{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODQ3MDEz", "number": 10494, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNTozNTowMlrODWvkUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNTozNTowMlrODWvkUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTc0NjA5OnYy", "diffSide": "RIGHT", "path": "sdks/python/apache_beam/pvalue.py", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNTozNTowMlrOFbrUqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwMDo0OTowNVrOFcjVrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NTY3NA==", "bodyText": "This doesn't seem safe to me. We should not be promoting the type from PValue to a PCollection unless we can actually guarantee that it will always be a PCollection here.  As far as I can tell, it may actually be PValue, but correct me if I'm wrong.\nHere's how I came to that conclusion.\nThe code where AppliedPTransform.outputs is assigned values seems to indicate it should be a mapping of PValue:\n  def add_output(self,\n                 output,  # type: Union[pvalue.DoOutputsTuple, pvalue.PValue]\n                 tag=None  # type: Union[str, int, None]\n                ):\n    # type: (...) -> None\n    if isinstance(output, pvalue.DoOutputsTuple):\n      self.add_output(output[output._main_tag])\n    elif isinstance(output, pvalue.PValue):\n      # TODO(BEAM-1833): Require tags when calling this method.\n      if tag is None and None in self.outputs:\n        tag = len(self.outputs)\n      assert tag not in self.outputs\n      self.outputs[tag] = output\n    elif isinstance(output, dict):\n      for output_tag, out in output.items():\n        self.add_output(out, tag=output_tag)\n    else:\n      raise TypeError(\"Unexpected output type: %s\" % output)\nAs a result, I have typed AppliedPTransform.outputs as Dict[Union[str, int, None], pvalue.PValue].  If it's the case that AppliedPTransform.outputs only holds PCollections then we should enforce that in the isinstance check above (and elsewhere) and in the typing for AppliedPTransform.\n\nAlso note that the trailing # type: PCollection used here has no effect in mypy, and in fact it generates an error.  In mypy, you can only use this the first time that a variable is defined (e.g. for pcoll that's line 300 above this), and you can only use it to broaden a type (as I did originally, going from PCollection to PValue).   Narrowing the type is basically disregarding/overriding the inspected type, so that requires using typing.cast().\nThis is why I'm really wary of supporting pytype.", "url": "https://github.com/apache/beam/pull/10494#discussion_r364565674", "createdAt": "2020-01-09T05:35:02Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -308,7 +308,7 @@ def __getitem__(self, tag):\n         self.producer.add_output(pcoll, tag)\n     else:\n       # Main output is output of inner ParDo.\n-      pcoll = self.producer.parts[0].outputs[None]\n+      pcoll = self.producer.parts[0].outputs[None]  # type: PCollection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d4fb15414124a10cc7d03e818c2cdb7938ed768"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NzQ5OA==", "bodyText": "If everyone is in agreement that AppliedPTransform.outputs can only hold PCollections then the typing for AppliedPTransform should be fixed.  Doing it this way -- simply overriding the type -- is a superficial fix that leaves the door open for this problem to happen elsewhere in the code where AppliedPTransform is used  (and as I mentioned, it doesn't actually work for mypy).", "url": "https://github.com/apache/beam/pull/10494#discussion_r364567498", "createdAt": "2020-01-09T05:45:27Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -308,7 +308,7 @@ def __getitem__(self, tag):\n         self.producer.add_output(pcoll, tag)\n     else:\n       # Main output is output of inner ParDo.\n-      pcoll = self.producer.parts[0].outputs[None]\n+      pcoll = self.producer.parts[0].outputs[None]  # type: PCollection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NTY3NA=="}, "originalCommit": {"oid": "2d4fb15414124a10cc7d03e818c2cdb7938ed768"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0MDQ5OQ==", "bodyText": "IIUC, DoOutputsTuple could only follow a ParDo and its outputs should be PCollection's. However this contract is not really captured in the code. You are right that AppliedPTransform.outputs could have types of PValue, but this should not be the case for DoOutputsTuple.", "url": "https://github.com/apache/beam/pull/10494#discussion_r365040499", "createdAt": "2020-01-10T01:42:59Z", "author": {"login": "aaltay"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -308,7 +308,7 @@ def __getitem__(self, tag):\n         self.producer.add_output(pcoll, tag)\n     else:\n       # Main output is output of inner ParDo.\n-      pcoll = self.producer.parts[0].outputs[None]\n+      pcoll = self.producer.parts[0].outputs[None]  # type: PCollection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NTY3NA=="}, "originalCommit": {"oid": "2d4fb15414124a10cc7d03e818c2cdb7938ed768"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTA0OTExNA==", "bodyText": "understood.  If we're confident about that contract I think the proper way to solve this would be something like this:\n      pval = self.producer.parts[0].outputs[None]\n      assert isinstance(pval, PCollection), \"DoOutputsTuple should follow a ParDo\"\n      pcoll = pval\nIf you want to be a bit more formal you could raise a TypeError or the like.\nThat will naturally narrow the type of pcoll.  The reason for the temporary variable pval is that you cannot assign of type PValue to a variable already defined as PCollection (above in the if tag is not None block).", "url": "https://github.com/apache/beam/pull/10494#discussion_r365049114", "createdAt": "2020-01-10T02:27:49Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -308,7 +308,7 @@ def __getitem__(self, tag):\n         self.producer.add_output(pcoll, tag)\n     else:\n       # Main output is output of inner ParDo.\n-      pcoll = self.producer.parts[0].outputs[None]\n+      pcoll = self.producer.parts[0].outputs[None]  # type: PCollection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NTY3NA=="}, "originalCommit": {"oid": "2d4fb15414124a10cc7d03e818c2cdb7938ed768"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ3NDIyOA==", "bodyText": "The types here are correct, self._pcolls should be a map to PCollections. This PR looks like an improvement to me. Would you be OK with this going in (with the assertion to do the type restriction)?\n(FWIW, it'd be nice to clean up the whole DoOutputsTuple thing, and how inputs and outputs are represented in general, but that's another issue.)", "url": "https://github.com/apache/beam/pull/10494#discussion_r365474228", "createdAt": "2020-01-10T23:51:30Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -308,7 +308,7 @@ def __getitem__(self, tag):\n         self.producer.add_output(pcoll, tag)\n     else:\n       # Main output is output of inner ParDo.\n-      pcoll = self.producer.parts[0].outputs[None]\n+      pcoll = self.producer.parts[0].outputs[None]  # type: PCollection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NTY3NA=="}, "originalCommit": {"oid": "2d4fb15414124a10cc7d03e818c2cdb7938ed768"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ4MzQzOQ==", "bodyText": "yep, looks good to me.", "url": "https://github.com/apache/beam/pull/10494#discussion_r365483439", "createdAt": "2020-01-11T00:49:05Z", "author": {"login": "chadrik"}, "path": "sdks/python/apache_beam/pvalue.py", "diffHunk": "@@ -308,7 +308,7 @@ def __getitem__(self, tag):\n         self.producer.add_output(pcoll, tag)\n     else:\n       # Main output is output of inner ParDo.\n-      pcoll = self.producer.parts[0].outputs[None]\n+      pcoll = self.producer.parts[0].outputs[None]  # type: PCollection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2NTY3NA=="}, "originalCommit": {"oid": "2d4fb15414124a10cc7d03e818c2cdb7938ed768"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2386, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}