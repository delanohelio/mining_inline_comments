{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNDgxOTAy", "number": 11564, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyNDo0NlrOD4ER-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoxNzowNlrOD5G3rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE2OTg2OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo/test/task_test.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyNDo0NlrOGOrvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyNDo0NlrOGOrvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0OTkwNA==", "bodyText": "I'd prefer to just use t.Error(err).\nThe current formatting prints out something that is not intuitive? e.g.\nApplyTransform(\"{2: int/int[varintz] GLO}\") = panic: value -300 present, but not expected", "url": "https://github.com/apache/beam/pull/11564#discussion_r418049904", "createdAt": "2020-04-30T14:24:46Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo/test/task_test.go", "diffHunk": "@@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package test\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/passert\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/ptest\"\n+\t\"pardo/pkg/task\"\n+\t\"testing\"\n+)\n+\n+func TestApplyTransform(t *testing.T) {\n+\tp, s := beam.NewPipelineWithRoot()\n+\ttests := []struct {\n+\t\tinput beam.PCollection\n+\t\twant []interface{}\n+\t}{\n+\t\t{\n+\t\t\tinput: beam.Create(s, -1, -2, -3, -4, -5),\n+\t\t\twant: []interface{}{-10, -20, -30, -40, -50},\n+\t\t},\n+\t\t{\n+\t\t\tinput: beam.Create(s, 1, 2, 3, 4, 5),\n+\t\t\twant: []interface{}{10, 20, 30, 40, 50},\n+\t\t},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tgot := task.ApplyTransform(s, tt.input)\n+\t\tpassert.Equals(s, got, tt.want...)\n+\t\tif err := ptest.Run(p); err != nil {\n+\t\t\tt.Errorf(\"ApplyTransform(\\\"%v\\\") = %v\", tt.input, err)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE3NzUyOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo/test/task_test.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyNjoyMlrOGOr0Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyNjoyMlrOGOr0Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1MTEwNw==", "bodyText": "I think one input is probably sufficient.\nBoth inputs are not fundamentally different.", "url": "https://github.com/apache/beam/pull/11564#discussion_r418051107", "createdAt": "2020-04-30T14:26:22Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo/test/task_test.go", "diffHunk": "@@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package test\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/passert\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/ptest\"\n+\t\"pardo/pkg/task\"\n+\t\"testing\"\n+)\n+\n+func TestApplyTransform(t *testing.T) {\n+\tp, s := beam.NewPipelineWithRoot()\n+\ttests := []struct {\n+\t\tinput beam.PCollection\n+\t\twant []interface{}\n+\t}{\n+\t\t{\n+\t\t\tinput: beam.Create(s, -1, -2, -3, -4, -5),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTIwNDk3OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo/cmd/main.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozMjozOVrOGOsGIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozMjozOVrOGOsGIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1NTcxMg==", "bodyText": "I would prefer to separate the Create into its own line to make it clear as a pipeline.\nAnd can we rename 'col' to 'output'?\nnumbers := beam.Create(s, 1, 2, 3, 4, 5)\noutput := task.ApplyTransform(s, numbers)", "url": "https://github.com/apache/beam/pull/11564#discussion_r418055712", "createdAt": "2020-04-30T14:32:39Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo/cmd/main.go", "diffHunk": "@@ -0,0 +1,41 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/log\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/debug\"\n+\t\"pardo/pkg/task\"\n+)\n+\n+func main() {\n+\tctx := context.Background()\n+\n+\tp, s := beam.NewPipelineWithRoot()\n+\n+\tcol := task.ApplyTransform(s, beam.Create(s, 1, 2, 3, 4, 5))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTIyMjgxOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozNjo0MVrOGOsRwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozNjo0MVrOGOsRwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1ODY4OQ==", "bodyText": "Can we rename the function to 'multiplyBy10Fn\"?", "url": "https://github.com/apache/beam/pull/11564#discussion_r418058689", "createdAt": "2020-04-30T14:36:41Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,25 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import \"github.com/apache/beam/sdks/go/pkg/beam\"\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\tprocessFn := func(element int) int {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI0MjAxOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0MDo0MlrOGOsdyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0MDo0MlrOGOsdyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2MTc2OA==", "bodyText": "I see another lesson using module function instead of local variable.\nShall we extract it as a module function for consistency?", "url": "https://github.com/apache/beam/pull/11564#discussion_r418061768", "createdAt": "2020-04-30T14:40:42Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,25 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import \"github.com/apache/beam/sdks/go/pkg/beam\"\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\tprocessFn := func(element int) int {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI0Njg4OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/test/task_test.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0MTo0OVrOGOsg3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0MTo0OVrOGOsg3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2MjU1OA==", "bodyText": "I think one input is probably sufficient.\nBoth inputs are not fundamentally different.", "url": "https://github.com/apache/beam/pull/11564#discussion_r418062558", "createdAt": "2020-04-30T14:41:49Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/test/task_test.go", "diffHunk": "@@ -0,0 +1,48 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package test\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/passert\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/ptest\"\n+\t\"pardo_onetomany/pkg/task\"\n+\t\"testing\"\n+)\n+\n+func TestTask(t *testing.T) {\n+\tp, s := beam.NewPipelineWithRoot()\n+\ttests := []struct {\n+\t\tinput beam.PCollection\n+\t\twant []interface{}\n+\t}{\n+\t\t{\n+\t\t\tinput: beam.Create(s, \"Hello Beam\", \"It is awesome\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI1MzI2OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/test/task_test.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0MzoyNFrOGOslNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0MzoyNFrOGOslNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2MzY3MA==", "bodyText": "I'd prefer to just use t.Error(err).\nThe current formatting prints out something that is not intuitive? e.g.\nApplyTransform(\"{2: string/string[string] GLO}\") = panic: value Itx present, but not expected", "url": "https://github.com/apache/beam/pull/11564#discussion_r418063670", "createdAt": "2020-04-30T14:43:24Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/test/task_test.go", "diffHunk": "@@ -0,0 +1,48 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package test\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/passert\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/ptest\"\n+\t\"pardo_onetomany/pkg/task\"\n+\t\"testing\"\n+)\n+\n+func TestTask(t *testing.T) {\n+\tp, s := beam.NewPipelineWithRoot()\n+\ttests := []struct {\n+\t\tinput beam.PCollection\n+\t\twant []interface{}\n+\t}{\n+\t\t{\n+\t\t\tinput: beam.Create(s, \"Hello Beam\", \"It is awesome\"),\n+\t\t\twant: []interface{}{\"Hello\", \"Beam\", \"It\", \"is\", \"awesome\"},\n+\t\t},\n+\t\t{\n+\t\t\tinput: beam.Create(s, \"Hello Beam. It is awesome.\"),\n+\t\t\twant: []interface{}{\"Hello\", \"Beam.\", \"It\", \"is\", \"awesome.\"},\n+\t\t},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tgot := task.ApplyTransform(s, tt.input)\n+\t\tpassert.Equals(s, got, tt.want...)\n+\t\tif err := ptest.Run(p); err != nil {\n+\t\t\tt.Errorf(\"ApplyTransform(\\\"%v\\\") = %v\", tt.input, err)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI2NzAxOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0NjoxMFrOGOst7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0NjoxMFrOGOst7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NTkwMQ==", "bodyText": "Can we rename the function to 'tokenizeFn\"?", "url": "https://github.com/apache/beam/pull/11564#discussion_r418065901", "createdAt": "2020-04-30T14:46:10Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,33 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"strings\"\n+)\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\treturn beam.ParDo(s, processFn, input)\n+}\n+\n+func processFn(input string, emit func(out string)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI3NTY2OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/cmd/main.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0ODowM1rOGOszjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo0ODowM1rOGOszjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2NzM0Mg==", "bodyText": "I would prefer to separate the Create into its own line to make it clear as a pipeline.\nAnd can we rename 'col' to 'output'?\nsentences:= beam.Create(s, \"Hello Beam\", \"It is awesome\")\noutput := task.ApplyTransform(s, sentences)", "url": "https://github.com/apache/beam/pull/11564#discussion_r418067342", "createdAt": "2020-04-30T14:48:03Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/cmd/main.go", "diffHunk": "@@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/log\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/debug\"\n+\t\"pardo_onetomany/pkg/task\"\n+)\n+\n+func main() {\n+\tp, s := beam.NewPipelineWithRoot()\n+\n+\tcol := task.ApplyTransform(s, beam.Create(s, \"Hello Beam\", \"It is awesome\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI5MDM0OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/MapElements/cmd/main.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1MToyMVrOGOs87A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1MToyMVrOGOs87A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA2OTc0MA==", "bodyText": "I would prefer to separate the Create into its own line to make it clear as a pipeline.\nAnd can we rename 'col' to 'output'?\nnumbers := beam.Create(s, 1, 2, 3, 4, 5)\noutput := task.ApplyTransform(s, numbers)", "url": "https://github.com/apache/beam/pull/11564#discussion_r418069740", "createdAt": "2020-04-30T14:51:21Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/MapElements/cmd/main.go", "diffHunk": "@@ -0,0 +1,39 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/log\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/beamx\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/x/debug\"\n+\t\"mapelements/pkg/task\"\n+)\n+\n+func main() {\n+\tp, s := beam.NewPipelineWithRoot()\n+\n+\tcol := task.ApplyTransform(s, beam.Create(s, 1, 2, 3, 4, 5))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI5Mjc1OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/MapElements/test/task_test.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1MTo1MlrOGOs-ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1MTo1MlrOGOs-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3MDExNw==", "bodyText": "I think one input is probably sufficient.\nBoth inputs are not fundamentally different.", "url": "https://github.com/apache/beam/pull/11564#discussion_r418070117", "createdAt": "2020-04-30T14:51:52Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/MapElements/test/task_test.go", "diffHunk": "@@ -0,0 +1,48 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package test\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/passert\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/ptest\"\n+\t\"mapelements/pkg/task\"\n+\t\"testing\"\n+)\n+\n+func TestTask(t *testing.T) {\n+\tp, s := beam.NewPipelineWithRoot()\n+\ttests := []struct {\n+\t\tinput beam.PCollection\n+\t\twant []interface{}\n+\t}{\n+\t\t{\n+\t\t\tinput: beam.Create(s, -1, -2, -3, -4, -5),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTI5Mzg4OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/MapElements/test/task_test.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1MjowOVrOGOs_HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1MjowOVrOGOs_HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3MDMwMQ==", "bodyText": "I'd prefer to just use t.Error(err).\nThe current formatting prints out something that is not intuitive? e.g.\nApplyTransform(\"{2: int/int[varintz] GLO}\") = panic: value -300 present, but not expected", "url": "https://github.com/apache/beam/pull/11564#discussion_r418070301", "createdAt": "2020-04-30T14:52:09Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/MapElements/test/task_test.go", "diffHunk": "@@ -0,0 +1,48 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package test\n+\n+import (\n+\t\"github.com/apache/beam/sdks/go/pkg/beam\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/passert\"\n+\t\"github.com/apache/beam/sdks/go/pkg/beam/testing/ptest\"\n+\t\"mapelements/pkg/task\"\n+\t\"testing\"\n+)\n+\n+func TestTask(t *testing.T) {\n+\tp, s := beam.NewPipelineWithRoot()\n+\ttests := []struct {\n+\t\tinput beam.PCollection\n+\t\twant []interface{}\n+\t}{\n+\t\t{\n+\t\t\tinput: beam.Create(s, -1, -2, -3, -4, -5),\n+\t\t\twant: []interface{}{-5, -10, -15, -20, -25},\n+\t\t},\n+\t\t{\n+\t\t\tinput: beam.Create(s, 1, 2, 3, 4, 5),\n+\t\t\twant: []interface{}{5, 10, 15, 20, 25},\n+\t\t},\n+\t}\n+\tfor _, tt := range tests {\n+\t\tgot := task.ApplyTransform(s, tt.input)\n+\t\tpassert.Equals(s, got, tt.want...)\n+\t\tif err := ptest.Run(p); err != nil {\n+\t\t\tt.Errorf(\"ApplyTransform(\\\"%v\\\") = %v\", tt.input, err)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTMwOTU4OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/MapElements/task.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1NTozN1rOGOtJWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDo1NTozN1rOGOtJWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA3MjkyMg==", "bodyText": "I'd prefer to name this lesson \"ParDo Struct\".\nSince there is no MapElements construct in Go, we don't need to mimic the Java version.", "url": "https://github.com/apache/beam/pull/11564#discussion_r418072922", "createdAt": "2020-04-30T14:55:37Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/MapElements/task.md", "diffHunk": "@@ -0,0 +1,34 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+# Mapping Elements using structs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ0MTQ0OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/MapElements/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNTo1MVrOGOud3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNTo1MVrOGOud3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NDU1Nw==", "bodyText": "I'd suggest having the empty struct revealed for the students. They can then fill in the struct body.", "url": "https://github.com/apache/beam/pull/11564#discussion_r418094557", "createdAt": "2020-04-30T15:25:51Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/MapElements/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,33 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import \"github.com/apache/beam/sdks/go/pkg/beam\"\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\tprocessFn := &multiplyByFn{\n+\t\tFactor: 5,\n+\t}\n+\treturn beam.ParDo(s, processFn, input)\n+}\n+\n+type multiplyByFn struct {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ0NTUwOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/MapElements/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNjo0N1rOGOugiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyNjo0N1rOGOugiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NTI0MA==", "bodyText": "I'd suggest having the empty ProcessElement function revealed for the students. They can then fill in the function body.", "url": "https://github.com/apache/beam/pull/11564#discussion_r418095240", "createdAt": "2020-04-30T15:26:47Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/MapElements/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,33 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import \"github.com/apache/beam/sdks/go/pkg/beam\"\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\tprocessFn := &multiplyByFn{\n+\t\tFactor: 5,\n+\t}\n+\treturn beam.ParDo(s, processFn, input)\n+}\n+\n+type multiplyByFn struct {\n+\tFactor int\n+}\n+\n+func (f *multiplyByFn) ProcessElement(input int) int {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ1MTAyOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/MapElements/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyODowOVrOGOukQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNToyODowOVrOGOukQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5NjE5Mg==", "bodyText": "Would rather have this inline similar to the example given.\nhttps://github.com/apache/beam/blob/master/sdks/go/examples/contains/contains.go#L48", "url": "https://github.com/apache/beam/pull/11564#discussion_r418096192", "createdAt": "2020-04-30T15:28:09Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/MapElements/pkg/task/task.go", "diffHunk": "@@ -0,0 +1,33 @@\n+// Licensed to the Apache Software Foundation (ASF) under one or more\n+// contributor license agreements.  See the NOTICE file distributed with\n+// this work for additional information regarding copyright ownership.\n+// The ASF licenses this file to You under the Apache License, Version 2.0\n+// (the \"License\"); you may not use this file except in compliance with\n+// the License.  You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package task\n+\n+import \"github.com/apache/beam/sdks/go/pkg/beam\"\n+\n+func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n+\tprocessFn := &multiplyByFn{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTQ5OTY5OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/FlatMapElements/task.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTozOTozMlrOGOvDXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNTozOTozMlrOGOvDXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNDE1Nw==", "bodyText": "I think we don't need this task. This is essentially the same as \"ParDo Struct\" and it's also not a FlatMap.", "url": "https://github.com/apache/beam/pull/11564#discussion_r418104157", "createdAt": "2020-04-30T15:39:32Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/FlatMapElements/task.md", "diffHunk": "@@ -0,0 +1,31 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+In this kata, we continue the use of a DoFn struct to map a single element into multiple elements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9d26a56e0a4d3201edfb4fd202d6a116e7cdc04"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzY2MDgyOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/lesson-info.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNzowOToxN1rOGPDsIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNzowOToxN1rOGPDsIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0MjI3Mw==", "bodyText": "Can maybe slightly rename to \"ParDo Struct\"?", "url": "https://github.com/apache/beam/pull/11564#discussion_r418442273", "createdAt": "2020-05-01T07:09:17Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/lesson-info.yaml", "diffHunk": "@@ -20,5 +20,4 @@\n content:\n - ParDo\n - ParDo OneToMany\n-- MapElements\n-- FlatMapElements\n+- ParDo struct", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzY2NjA4OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNzoxMzowN1rOGPDvIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjo1NDowNVrOGP0bSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0MzA0Mw==", "bodyText": "The \"* 10\" is not covered by the answer placeholder. Is it intentional?", "url": "https://github.com/apache/beam/pull/11564#discussion_r418443043", "createdAt": "2020-05-01T07:13:07Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo/pkg/task/task.go", "diffHunk": "@@ -18,8 +18,9 @@ package task\n import \"github.com/apache/beam/sdks/go/pkg/beam\"\n \n func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n-\tprocessFn := func(element int) int {\n-\t\treturn element * 10\n-\t}\n-\treturn beam.ParDo(s, processFn, input)\n+\treturn beam.ParDo(s, multiplyBy10Fn, input)\n }\n+\n+func multiplyBy10Fn(element int) int {\n+\treturn element * 10", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MTk2NA==", "bodyText": "What's odd is that I saw the following when testing the course in both IntelliJ and GoLand:", "url": "https://github.com/apache/beam/pull/11564#discussion_r419141964", "createdAt": "2020-05-03T18:36:03Z", "author": {"login": "damondouglas"}, "path": "learning/katas/go/Core Transforms/Map/ParDo/pkg/task/task.go", "diffHunk": "@@ -18,8 +18,9 @@ package task\n import \"github.com/apache/beam/sdks/go/pkg/beam\"\n \n func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n-\tprocessFn := func(element int) int {\n-\t\treturn element * 10\n-\t}\n-\treturn beam.ParDo(s, processFn, input)\n+\treturn beam.ParDo(s, multiplyBy10Fn, input)\n }\n+\n+func multiplyBy10Fn(element int) int {\n+\treturn element * 10", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0MzA0Mw=="}, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0MDc3Nw==", "bodyText": "This looks good now", "url": "https://github.com/apache/beam/pull/11564#discussion_r419240777", "createdAt": "2020-05-04T06:54:05Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo/pkg/task/task.go", "diffHunk": "@@ -18,8 +18,9 @@ package task\n import \"github.com/apache/beam/sdks/go/pkg/beam\"\n \n func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n-\tprocessFn := func(element int) int {\n-\t\treturn element * 10\n-\t}\n-\treturn beam.ParDo(s, processFn, input)\n+\treturn beam.ParDo(s, multiplyBy10Fn, input)\n }\n+\n+func multiplyBy10Fn(element int) int {\n+\treturn element * 10", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0MzA0Mw=="}, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzY2OTMxOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo struct/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNzoxNToyMlrOGPDxAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDo0MTowMlrOGQXC7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0MzUyMA==", "bodyText": "How about having the whole \"&multiplyByFn{...}\" be part of the answer placeholder?", "url": "https://github.com/apache/beam/pull/11564#discussion_r418443520", "createdAt": "2020-05-01T07:15:22Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo struct/pkg/task/task.go", "diffHunk": "@@ -18,10 +18,7 @@ package task\n import \"github.com/apache/beam/sdks/go/pkg/beam\"\n \n func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n-\tprocessFn := &multiplyByFn{\n-\t\tFactor: 5,\n-\t}\n-\treturn beam.ParDo(s, processFn, input)\n+\treturn beam.ParDo(s, &multiplyByFn{Factor: 5}, input)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0MTQyNw==", "bodyText": "This seems to have an issue now. There is no placeholder at all. And the task description doesn't load properly.\nCould it be because the directory name needs to be renamed to \"ParDo Struct\" with capital S?", "url": "https://github.com/apache/beam/pull/11564#discussion_r419241427", "createdAt": "2020-05-04T06:56:03Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo struct/pkg/task/task.go", "diffHunk": "@@ -18,10 +18,7 @@ package task\n import \"github.com/apache/beam/sdks/go/pkg/beam\"\n \n func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n-\tprocessFn := &multiplyByFn{\n-\t\tFactor: 5,\n-\t}\n-\treturn beam.ParDo(s, processFn, input)\n+\treturn beam.ParDo(s, &multiplyByFn{Factor: 5}, input)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0MzUyMA=="}, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzk4Mw==", "bodyText": "This looks good now! Thanks @damondouglas!", "url": "https://github.com/apache/beam/pull/11564#discussion_r419807983", "createdAt": "2020-05-05T00:41:02Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo struct/pkg/task/task.go", "diffHunk": "@@ -18,10 +18,7 @@ package task\n import \"github.com/apache/beam/sdks/go/pkg/beam\"\n \n func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n-\tprocessFn := &multiplyByFn{\n-\t\tFactor: 5,\n-\t}\n-\treturn beam.ParDo(s, processFn, input)\n+\treturn beam.ParDo(s, &multiplyByFn{Factor: 5}, input)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0MzUyMA=="}, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzY3MTI4OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo struct/task.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNzoxNjo0NVrOGPDyKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNzoxNjo0NVrOGPDyKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0MzgxNw==", "bodyText": "Can we have the ParDo mentioned, e.g. \"ParDo - using a struct as a DoFn\"?", "url": "https://github.com/apache/beam/pull/11564#discussion_r418443817", "createdAt": "2020-05-01T07:16:45Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo struct/task.md", "diffHunk": "@@ -16,10 +16,10 @@\n     specific language governing permissions and limitations\n     under the License.\n -->\n-# Mapping Elements using structs\n+# Using a struct as a DoFn", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzY3MzY0OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/pkg/task/task.go", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNzoxODozNFrOGPDzmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNjo1NDozOVrOGP0b9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NDE4NA==", "bodyText": "The answer placeholder(s) seems weird here. Maybe it requires a fix?\nOr alternatively, we can use a similar answer placeholder as in the \"ParDo\" task, i.e. having just empty \"fund ApplyTransforms\"?", "url": "https://github.com/apache/beam/pull/11564#discussion_r418444184", "createdAt": "2020-05-01T07:18:34Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/pkg/task/task.go", "diffHunk": "@@ -21,10 +21,10 @@ import (\n )\n \n func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n-\treturn beam.ParDo(s, processFn, input)\n+\treturn beam.ParDo(s, tokenizeFn, input)\n }\n \n-func processFn(input string, emit func(out string)) {\n+func tokenizeFn(input string, emit func(out string)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE0MjM4Nw==", "bodyText": "Similar to the previous placeholder issue.  This is what appears when I tested the course in both IntelliJ and GoLand:", "url": "https://github.com/apache/beam/pull/11564#discussion_r419142387", "createdAt": "2020-05-03T18:39:33Z", "author": {"login": "damondouglas"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/pkg/task/task.go", "diffHunk": "@@ -21,10 +21,10 @@ import (\n )\n \n func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n-\treturn beam.ParDo(s, processFn, input)\n+\treturn beam.ParDo(s, tokenizeFn, input)\n }\n \n-func processFn(input string, emit func(out string)) {\n+func tokenizeFn(input string, emit func(out string)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NDE4NA=="}, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0MDY4Mg==", "bodyText": "This looks good now", "url": "https://github.com/apache/beam/pull/11564#discussion_r419240682", "createdAt": "2020-05-04T06:53:52Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/pkg/task/task.go", "diffHunk": "@@ -21,10 +21,10 @@ import (\n )\n \n func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n-\treturn beam.ParDo(s, processFn, input)\n+\treturn beam.ParDo(s, tokenizeFn, input)\n }\n \n-func processFn(input string, emit func(out string)) {\n+func tokenizeFn(input string, emit func(out string)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NDE4NA=="}, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI0MDk0OQ==", "bodyText": "This looks good now", "url": "https://github.com/apache/beam/pull/11564#discussion_r419240949", "createdAt": "2020-05-04T06:54:39Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/pkg/task/task.go", "diffHunk": "@@ -21,10 +21,10 @@ import (\n )\n \n func ApplyTransform(s beam.Scope, input beam.PCollection) beam.PCollection {\n-\treturn beam.ParDo(s, processFn, input)\n+\treturn beam.ParDo(s, tokenizeFn, input)\n }\n \n-func processFn(input string, emit func(out string)) {\n+func tokenizeFn(input string, emit func(out string)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ0NDE4NA=="}, "originalCommit": {"oid": "9c5d3b28de33f846415215c58d9d7e1cfc01e29b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjA0ODE3OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/task.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODowOTowMVrOGQMCuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODowOTowMVrOGQMCuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyNzcwNQ==", "bodyText": "DoFns are generally a specific thing, so an article is handy.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              with <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#hdr-DoFns\">\n          \n          \n            \n              with a <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#hdr-DoFns\">", "url": "https://github.com/apache/beam/pull/11564#discussion_r419627705", "createdAt": "2020-05-04T18:09:01Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/task.md", "diffHunk": "@@ -0,0 +1,32 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# ParDo - One to Many\n+\n+In the previous kata we learned that ParDo maps a single element into another element.\n+In this kata we will map a single element into many by splitting a sentence into words.\n+\n+**Kata:** Please write a ParDo that maps each input sentence into words tokenized by whitespace (\" \").\n+\n+<div class=\"hint\">\n+  Use <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">\n+  ParDo</a>\n+  with <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#hdr-DoFns\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98275426b335ae7cc6ea9726ab47374fb3fe65e2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjA1NTc5OnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/task.md", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoxMDo1N1rOGQMHSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjozOTo0MFrOGSSvyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyODg3NA==", "bodyText": "Consider using the qualifed import name, like they'd see in their Go code (eg. beam.ParDo) , rather than just the single method. It would look odd to other languages, but the generally explicit package/provenance of identifiers is a hallmark of Go.", "url": "https://github.com/apache/beam/pull/11564#discussion_r419628874", "createdAt": "2020-05-04T18:10:57Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/task.md", "diffHunk": "@@ -0,0 +1,32 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# ParDo - One to Many\n+\n+In the previous kata we learned that ParDo maps a single element into another element.\n+In this kata we will map a single element into many by splitting a sentence into words.\n+\n+**Kata:** Please write a ParDo that maps each input sentence into words tokenized by whitespace (\" \").\n+\n+<div class=\"hint\">\n+  Use <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">\n+  ParDo</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98275426b335ae7cc6ea9726ab47374fb3fe65e2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1MTE5Mg==", "bodyText": "@lostluck Do you mean this?  If so, I could check across the various tasks of the existing katas to make sure its consistent.\n<div class=\"hint\">\n  Use <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">\n  beam.ParDo</a>", "url": "https://github.com/apache/beam/pull/11564#discussion_r420451192", "createdAt": "2020-05-05T22:45:52Z", "author": {"login": "damondouglas"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/task.md", "diffHunk": "@@ -0,0 +1,32 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# ParDo - One to Many\n+\n+In the previous kata we learned that ParDo maps a single element into another element.\n+In this kata we will map a single element into many by splitting a sentence into words.\n+\n+**Kata:** Please write a ParDo that maps each input sentence into words tokenized by whitespace (\" \").\n+\n+<div class=\"hint\">\n+  Use <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">\n+  ParDo</a>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyODg3NA=="}, "originalCommit": {"oid": "98275426b335ae7cc6ea9726ab47374fb3fe65e2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMDcxOQ==", "bodyText": "I do!", "url": "https://github.com/apache/beam/pull/11564#discussion_r421830719", "createdAt": "2020-05-07T22:28:02Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/task.md", "diffHunk": "@@ -0,0 +1,32 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# ParDo - One to Many\n+\n+In the previous kata we learned that ParDo maps a single element into another element.\n+In this kata we will map a single element into many by splitting a sentence into words.\n+\n+**Kata:** Please write a ParDo that maps each input sentence into words tokenized by whitespace (\" \").\n+\n+<div class=\"hint\">\n+  Use <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">\n+  ParDo</a>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyODg3NA=="}, "originalCommit": {"oid": "98275426b335ae7cc6ea9726ab47374fb3fe65e2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTE5OA==", "bodyText": "Rather, I do. But I can merge this in as is and the change can happen in another PR or it can happen this PR. Whichever you prefer.\nSorry for the delay in getting back to this.", "url": "https://github.com/apache/beam/pull/11564#discussion_r421831198", "createdAt": "2020-05-07T22:29:17Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/task.md", "diffHunk": "@@ -0,0 +1,32 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# ParDo - One to Many\n+\n+In the previous kata we learned that ParDo maps a single element into another element.\n+In this kata we will map a single element into many by splitting a sentence into words.\n+\n+**Kata:** Please write a ParDo that maps each input sentence into words tokenized by whitespace (\" \").\n+\n+<div class=\"hint\">\n+  Use <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">\n+  ParDo</a>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyODg3NA=="}, "originalCommit": {"oid": "98275426b335ae7cc6ea9726ab47374fb3fe65e2"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzNDY5OA==", "bodyText": "I created BEAM-9928 so this is not forgotten.  My vote is to merge the request.", "url": "https://github.com/apache/beam/pull/11564#discussion_r421834698", "createdAt": "2020-05-07T22:39:40Z", "author": {"login": "damondouglas"}, "path": "learning/katas/go/Core Transforms/Map/ParDo OneToMany/task.md", "diffHunk": "@@ -0,0 +1,32 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# ParDo - One to Many\n+\n+In the previous kata we learned that ParDo maps a single element into another element.\n+In this kata we will map a single element into many by splitting a sentence into words.\n+\n+**Kata:** Please write a ParDo that maps each input sentence into words tokenized by whitespace (\" \").\n+\n+<div class=\"hint\">\n+  Use <a href=\"https://godoc.org/github.com/apache/beam/sdks/go/pkg/beam#ParDo\">\n+  ParDo</a>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYyODg3NA=="}, "originalCommit": {"oid": "98275426b335ae7cc6ea9726ab47374fb3fe65e2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjA3OTgxOnYy", "diffSide": "RIGHT", "path": "learning/katas/go/Core Transforms/Map/ParDo/task.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODoxNzowNlrOGQMV5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMDozNzo0MlrOGQW_oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMjYxNQ==", "bodyText": "A possible adjacent task/step is converting a func DoFn into a Structural DoFn. Yes, this is relatively simple, but from a learning standpoint, it makes the distinction pretty clear, while not asking users too much else that might conflate with it.  (eg. Getting the wrong idea that funcs must be 1:1 vs 1:many/none, vs structs etc).\nNot necessary to do it in this PR.", "url": "https://github.com/apache/beam/pull/11564#discussion_r419632615", "createdAt": "2020-05-04T18:17:06Z", "author": {"login": "lostluck"}, "path": "learning/katas/go/Core Transforms/Map/ParDo/task.md", "diffHunk": "@@ -0,0 +1,39 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# ParDo\n+\n+ParDo is a Beam transform for generic parallel processing. The ParDo processing paradigm is similar to the \u201cMap\u201d \n+phase of a Map/Shuffle/Reduce-style algorithm: a ParDo transform considers each element in the input PCollection,\n+performs some processing function (your user code) on that element, and emits zero, one, or multiple elements to an \n+output PCollection.\n+\n+**Kata:** Please write a simple ParDo that maps the input element by multiplying it by 10.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98275426b335ae7cc6ea9726ab47374fb3fe65e2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgwNzEzNw==", "bodyText": "@lostluck, the space will not create any problem. It is friendlier for the learner to see the lesson and task names in the natural way versus using underscore name.", "url": "https://github.com/apache/beam/pull/11564#discussion_r419807137", "createdAt": "2020-05-05T00:37:42Z", "author": {"login": "henryken"}, "path": "learning/katas/go/Core Transforms/Map/ParDo/task.md", "diffHunk": "@@ -0,0 +1,39 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+-->\n+\n+# ParDo\n+\n+ParDo is a Beam transform for generic parallel processing. The ParDo processing paradigm is similar to the \u201cMap\u201d \n+phase of a Map/Shuffle/Reduce-style algorithm: a ParDo transform considers each element in the input PCollection,\n+performs some processing function (your user code) on that element, and emits zero, one, or multiple elements to an \n+output PCollection.\n+\n+**Kata:** Please write a simple ParDo that maps the input element by multiplying it by 10.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYzMjYxNQ=="}, "originalCommit": {"oid": "98275426b335ae7cc6ea9726ab47374fb3fe65e2"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1194, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}