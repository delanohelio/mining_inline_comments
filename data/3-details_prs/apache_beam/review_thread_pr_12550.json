{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTIzMjc3", "number": 12550, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNTowM1rOEXv5ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNTowM1rOEXv5ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM3NDQ0OnYy", "diffSide": "RIGHT", "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNTowM1rOG_tqFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo0MzoxOFrOG_t75Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTUyNA==", "bodyText": "This does not actually match the behavior of BigQuery. To match BigQuery you should remove the HashSet and instead replace anything starting with _field_ with the correct index for that column.\n(In BigQuery, this condition would be \"\".equals(name) || name.startsWith(\"_field_\"))", "url": "https://github.com/apache/beam/pull/12550#discussion_r469461524", "createdAt": "2020-08-12T18:35:03Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -180,12 +182,19 @@ private static RelDataType toCalciteStructType(\n \n   private static List<String> getFieldNameList(List<StructField> fields) {\n     ImmutableList.Builder<String> b = ImmutableList.builder();\n+    Set<String> usedName = new HashSet<>();\n     for (int i = 0; i < fields.size(); i++) {\n       String name = fields.get(i).getName();\n-      if (\"\".equals(name)) {\n-        name = \"$col\" + i; // avoid empty field names because Beam does not allow duplicate names\n+      // Follow the same way that BigQuery handles unspecified or duplicate field name\n+      if (\"\".equals(name) || usedName.contains(name)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6563c801613daf015e5f54f27ead56947ab7ed3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MzE2OQ==", "bodyText": "I run SELECT STRUCT(\"abc\" as a, 3 as a) on BigQuery. The result is a row of 2 fields whose names are f0_.a and f0_._field_2", "url": "https://github.com/apache/beam/pull/12550#discussion_r469463169", "createdAt": "2020-08-12T18:37:59Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -180,12 +182,19 @@ private static RelDataType toCalciteStructType(\n \n   private static List<String> getFieldNameList(List<StructField> fields) {\n     ImmutableList.Builder<String> b = ImmutableList.builder();\n+    Set<String> usedName = new HashSet<>();\n     for (int i = 0; i < fields.size(); i++) {\n       String name = fields.get(i).getName();\n-      if (\"\".equals(name)) {\n-        name = \"$col\" + i; // avoid empty field names because Beam does not allow duplicate names\n+      // Follow the same way that BigQuery handles unspecified or duplicate field name\n+      if (\"\".equals(name) || usedName.contains(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTUyNA=="}, "originalCommit": {"oid": "d6563c801613daf015e5f54f27ead56947ab7ed3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NTI1NA==", "bodyText": "I run SELECT STRUCT(\"abc\" AS _field_22, 3 AS _field_23) on BigQuery. The result is a row of 2 fields whose names are f0_._field_1 and f0_._field_2.", "url": "https://github.com/apache/beam/pull/12550#discussion_r469465254", "createdAt": "2020-08-12T18:41:45Z", "author": {"login": "apilloud"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -180,12 +182,19 @@ private static RelDataType toCalciteStructType(\n \n   private static List<String> getFieldNameList(List<StructField> fields) {\n     ImmutableList.Builder<String> b = ImmutableList.builder();\n+    Set<String> usedName = new HashSet<>();\n     for (int i = 0; i < fields.size(); i++) {\n       String name = fields.get(i).getName();\n-      if (\"\".equals(name)) {\n-        name = \"$col\" + i; // avoid empty field names because Beam does not allow duplicate names\n+      // Follow the same way that BigQuery handles unspecified or duplicate field name\n+      if (\"\".equals(name) || usedName.contains(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTUyNA=="}, "originalCommit": {"oid": "d6563c801613daf015e5f54f27ead56947ab7ed3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NjA4NQ==", "bodyText": "OK I got your point now. So I believe the condition should be \"\".equals(name) || name.startsWith(\"_field_\") || usedName.contains(name). This way we can avoid throwing the exception.", "url": "https://github.com/apache/beam/pull/12550#discussion_r469466085", "createdAt": "2020-08-12T18:43:18Z", "author": {"login": "robinyqiu"}, "path": "sdks/java/extensions/sql/zetasql/src/main/java/org/apache/beam/sdk/extensions/sql/zetasql/ZetaSqlCalciteTranslationUtils.java", "diffHunk": "@@ -180,12 +182,19 @@ private static RelDataType toCalciteStructType(\n \n   private static List<String> getFieldNameList(List<StructField> fields) {\n     ImmutableList.Builder<String> b = ImmutableList.builder();\n+    Set<String> usedName = new HashSet<>();\n     for (int i = 0; i < fields.size(); i++) {\n       String name = fields.get(i).getName();\n-      if (\"\".equals(name)) {\n-        name = \"$col\" + i; // avoid empty field names because Beam does not allow duplicate names\n+      // Follow the same way that BigQuery handles unspecified or duplicate field name\n+      if (\"\".equals(name) || usedName.contains(name)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MTUyNA=="}, "originalCommit": {"oid": "d6563c801613daf015e5f54f27ead56947ab7ed3"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 652, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}