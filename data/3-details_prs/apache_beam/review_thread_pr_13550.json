{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5ODcyNjc1", "number": 13550, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo0NDowM1rOFFuLtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoyOToxMlrOFFvdGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTQzODYwOnYy", "diffSide": "RIGHT", "path": "runners/samza/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo0NDowM1rOIGX2xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo0NDowM1rOIGX2xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1MzIyMw==", "bodyText": "we already have commons_lang3 in the compile path. I think we can remove this.", "url": "https://github.com/apache/beam/pull/13550#discussion_r543553223", "createdAt": "2020-12-15T17:44:03Z", "author": {"login": "xinyuiscool"}, "path": "runners/samza/build.gradle", "diffHunk": "@@ -64,6 +70,7 @@ dependencies {\n   compile \"org.apache.kafka:kafka-clients:0.11.0.2\"\n   testCompile project(path: \":sdks:java:core\", configuration: \"shadowTest\")\n   testCompile project(path: \":runners:core-java\", configuration: \"testRuntime\")\n+  testCompile library.java.commons_lang3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTQ3MTUyOnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/BeamJobCoordinatorRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1MTowNFrOIGYKow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1MTowNFrOIGYKow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU1ODMwNw==", "bodyText": "Better naming for this. Suggest using a new package,e.g. ...runners.samza.cluster., and remove Beam from the class name as it's confusing for other runners.", "url": "https://github.com/apache/beam/pull/13550#discussion_r543558307", "createdAt": "2020-12-15T17:51:04Z", "author": {"login": "xinyuiscool"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/BeamJobCoordinatorRunner.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.samza;\n+\n+import java.time.Duration;\n+import org.apache.samza.application.SamzaApplication;\n+import org.apache.samza.application.descriptors.ApplicationDescriptor;\n+import org.apache.samza.clustermanager.JobCoordinatorLaunchUtil;\n+import org.apache.samza.config.Config;\n+import org.apache.samza.context.ExternalContext;\n+import org.apache.samza.job.ApplicationStatus;\n+import org.apache.samza.runtime.ApplicationRunner;\n+\n+/** Runs on Yarn AM, execute planning and launches JobCoordinator. */\n+public class BeamJobCoordinatorRunner implements ApplicationRunner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTQ4OTExOnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaExecutionContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1NDo0MlrOIGYVFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMTo0ODoyOFrOIGhdUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2MDk4Mw==", "bodyText": "@Zhangyx39 discussed this change, along with the changes in MetricsEnvironment.java, in open source before. Please sync up with him about how do we want to proceed. Please keep the metrics change out of the scope of this RB.", "url": "https://github.com/apache/beam/pull/13550#discussion_r543560983", "createdAt": "2020-12-15T17:54:42Z", "author": {"login": "xinyuiscool"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaExecutionContext.java", "diffHunk": "@@ -178,7 +179,11 @@ public SamzaExecutionContext create(\n \n       final MetricsRegistryMap metricsRegistry =\n           (MetricsRegistryMap) containerContext.getContainerMetricsRegistry();\n-      SamzaExecutionContext.this.setMetricsContainer(new SamzaMetricsContainer(metricsRegistry));\n+      SamzaMetricsContainer samzaMetricsContainer =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcxMDU0NA==", "bodyText": "There are multiple metrics related changes. The ones that are related to global metrics container doesn't need to push to open source. For now, we can exclude all metrics related commits from this PR. We can do that in a separate PR.", "url": "https://github.com/apache/beam/pull/13550#discussion_r543710544", "createdAt": "2020-12-15T21:48:28Z", "author": {"login": "Zhangyx39"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaExecutionContext.java", "diffHunk": "@@ -178,7 +179,11 @@ public SamzaExecutionContext create(\n \n       final MetricsRegistryMap metricsRegistry =\n           (MetricsRegistryMap) containerContext.getContainerMetricsRegistry();\n-      SamzaExecutionContext.this.setMetricsContainer(new SamzaMetricsContainer(metricsRegistry));\n+      SamzaMetricsContainer samzaMetricsContainer =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2MDk4Mw=="}, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTUwMzI0OnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaJobServerDriver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1NzozMVrOIGYdaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1NzozMVrOIGYdaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2MzExNQ==", "bodyText": "Seems this can just be a local var instead of holding it as member.", "url": "https://github.com/apache/beam/pull/13550#discussion_r543563115", "createdAt": "2020-12-15T17:57:31Z", "author": {"login": "xinyuiscool"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaJobServerDriver.java", "diffHunk": "@@ -37,16 +38,17 @@\n import org.slf4j.LoggerFactory;\n \n /** Driver program that starts a job server. */\n-// TODO extend JobServerDriver\n+// TODO(BEAM-8510): extend JobServerDriver\n @SuppressWarnings({\n   \"nullness\" // TODO(https://issues.apache.org/jira/browse/BEAM-10402)\n })\n public class SamzaJobServerDriver {\n   private static final Logger LOG = LoggerFactory.getLogger(SamzaJobServerDriver.class);\n \n   private final SamzaPortablePipelineOptions pipelineOptions;\n+  private ExpansionServer expansionServer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTUxMTg5OnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaJobServerDriver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1OToyN1rOIGYirQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNzo1OToyN1rOIGYirQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NDQ2MQ==", "bodyText": "final for all the vars (this and below).", "url": "https://github.com/apache/beam/pull/13550#discussion_r543564461", "createdAt": "2020-12-15T17:59:27Z", "author": {"login": "xinyuiscool"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/SamzaJobServerDriver.java", "diffHunk": "@@ -100,17 +94,46 @@ protected JobInvocation invokeWithExecutor(\n         InMemoryJobService.DEFAULT_MAX_INVOCATION_HISTORY);\n   }\n \n+  private ExpansionServer createExpansionService(String host, int expansionPort)\n+      throws IOException {\n+    if (host == null) {\n+      host = InetAddress.getLoopbackAddress().getHostName();\n+    }\n+    ExpansionServer expansionServer =\n+        ExpansionServer.create(new ExpansionService(), host, expansionPort);\n+    LOG.info(\n+        \"Java ExpansionService started on {}:{}\",\n+        expansionServer.getHost(),\n+        expansionServer.getPort());\n+    return expansionServer;\n+  }\n+\n   public void run() throws Exception {\n-    final InMemoryJobService service = createJobService(pipelineOptions);\n-    final GrpcFnServer<InMemoryJobService> jobServiceGrpcFnServer =\n+    // Create services\n+    InMemoryJobService service = createJobService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTUyNjI0OnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/BoundedSourceSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowMjoxOVrOIGYq_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODowMjoxOVrOIGYq_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU2NjU5MQ==", "bodyText": "keep this as private? Otherwise move it to a util class.", "url": "https://github.com/apache/beam/pull/13550#discussion_r543566591", "createdAt": "2020-12-15T18:02:19Z", "author": {"login": "xinyuiscool"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/BoundedSourceSystem.java", "diffHunk": "@@ -439,16 +438,14 @@ public SystemAdmin getAdmin(String systemName, Config config) {\n       return source;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private static <T> Coder<WindowedValue<T>> getCoder(Config config) {\n-      return Base64Serializer.deserializeUnchecked(config.get(\"coder\"), Coder.class);\n-    }\n-\n-    private static SamzaPipelineOptions getPipelineOptions(Config config) {\n-      return Base64Serializer.deserializeUnchecked(\n-              config.get(\"beamPipelineOptions\"), SerializablePipelineOptions.class)\n-          .get()\n-          .as(SamzaPipelineOptions.class);\n+    static SamzaPipelineOptions getPipelineOptions(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTU3OTA5OnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/UnboundedSourceSystem.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoxNDowN1rOIGZKYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjoyMzowMVrOIGirRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3NDYyNQ==", "bodyText": "This flag seems a bit cumbersome to understand, as we already have running flag to control the looping.", "url": "https://github.com/apache/beam/pull/13550#discussion_r543574625", "createdAt": "2020-12-15T18:14:07Z", "author": {"login": "xinyuiscool"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/UnboundedSourceSystem.java", "diffHunk": "@@ -268,6 +269,7 @@ public void register(SystemStreamPartition ssp, String offset) {\n       private final FnWithMetricsWrapper metricsWrapper;\n \n       private volatile boolean running;\n+      private volatile boolean maxWatermarkReached = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzcyNzgyNQ==", "bodyText": "I believe this is change added to support Nexmark. @Zhangyx39  can you comment more on this?", "url": "https://github.com/apache/beam/pull/13550#discussion_r543727825", "createdAt": "2020-12-15T22:18:13Z", "author": {"login": "kw2542"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/UnboundedSourceSystem.java", "diffHunk": "@@ -268,6 +269,7 @@ public void register(SystemStreamPartition ssp, String offset) {\n       private final FnWithMetricsWrapper metricsWrapper;\n \n       private volatile boolean running;\n+      private volatile boolean maxWatermarkReached = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3NDYyNQ=="}, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczMDUwMg==", "bodyText": "This is needed to finish a nexmark test in streaming mode. As @xinyuiscool suggested, we can remove this flag and just use the running flag.", "url": "https://github.com/apache/beam/pull/13550#discussion_r543730502", "createdAt": "2020-12-15T22:23:01Z", "author": {"login": "Zhangyx39"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/UnboundedSourceSystem.java", "diffHunk": "@@ -268,6 +269,7 @@ public void register(SystemStreamPartition ssp, String offset) {\n       private final FnWithMetricsWrapper metricsWrapper;\n \n       private volatile boolean running;\n+      private volatile boolean maxWatermarkReached = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3NDYyNQ=="}, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTU4Njk3OnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/UnboundedSourceSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoxNTo0OFrOIGZO7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoxNTo0OFrOIGZO7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3NTc5MQ==", "bodyText": "This var seems not adding too much value. We should be able to tell the watermark time from nextWatermark.", "url": "https://github.com/apache/beam/pull/13550#discussion_r543575791", "createdAt": "2020-12-15T18:15:48Z", "author": {"login": "xinyuiscool"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/UnboundedSourceSystem.java", "diffHunk": "@@ -363,20 +365,32 @@ public void run() {\n       private void updateWatermark() throws InterruptedException {\n         final long time = System.currentTimeMillis();\n         if (time - lastWatermarkTime > watermarkInterval) {\n+          long watermarkMillis = Long.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTU5NDExOnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/UnboundedSourceSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoxNzoyMVrOIGZTAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoxNzoyMVrOIGZTAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3NjgzNQ==", "bodyText": "Shall we add\nrunning = false", "url": "https://github.com/apache/beam/pull/13550#discussion_r543576835", "createdAt": "2020-12-15T18:17:21Z", "author": {"login": "xinyuiscool"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/UnboundedSourceSystem.java", "diffHunk": "@@ -363,20 +365,32 @@ public void run() {\n       private void updateWatermark() throws InterruptedException {\n         final long time = System.currentTimeMillis();\n         if (time - lastWatermarkTime > watermarkInterval) {\n+          long watermarkMillis = Long.MAX_VALUE;\n           for (UnboundedReader reader : readers) {\n             final SystemStreamPartition ssp = readerToSsp.get(reader);\n             final Instant currentWatermark =\n                 currentWatermarks.containsKey(ssp)\n                     ? currentWatermarks.get(ssp)\n                     : BoundedWindow.TIMESTAMP_MIN_VALUE;\n             final Instant nextWatermark = reader.getWatermark();\n+            if (nextWatermark != null) {\n+              watermarkMillis = Math.min(nextWatermark.getMillis(), watermarkMillis);\n+            }\n             if (currentWatermark.isBefore(nextWatermark)) {\n               currentWatermarks.put(ssp, nextWatermark);\n-              enqueueWatermark(reader);\n+              if (BoundedWindow.TIMESTAMP_MAX_VALUE.isAfter(nextWatermark)) {\n+                enqueueWatermark(reader);\n+              } else {\n+                // Max watermark has been reached for this reader.\n+                enqueueMaxWatermarkAndEndOfStream(reader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTYwOTEyOnYy", "diffSide": "RIGHT", "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/UnboundedSourceSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoyMDozOVrOIGZbrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoyMDozOVrOIGZbrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3OTA1NQ==", "bodyText": "I think using previous check of nextWatermark inside the loop should be good enough.", "url": "https://github.com/apache/beam/pull/13550#discussion_r543579055", "createdAt": "2020-12-15T18:20:39Z", "author": {"login": "xinyuiscool"}, "path": "runners/samza/src/main/java/org/apache/beam/runners/samza/adapter/UnboundedSourceSystem.java", "diffHunk": "@@ -363,20 +365,32 @@ public void run() {\n       private void updateWatermark() throws InterruptedException {\n         final long time = System.currentTimeMillis();\n         if (time - lastWatermarkTime > watermarkInterval) {\n+          long watermarkMillis = Long.MAX_VALUE;\n           for (UnboundedReader reader : readers) {\n             final SystemStreamPartition ssp = readerToSsp.get(reader);\n             final Instant currentWatermark =\n                 currentWatermarks.containsKey(ssp)\n                     ? currentWatermarks.get(ssp)\n                     : BoundedWindow.TIMESTAMP_MIN_VALUE;\n             final Instant nextWatermark = reader.getWatermark();\n+            if (nextWatermark != null) {\n+              watermarkMillis = Math.min(nextWatermark.getMillis(), watermarkMillis);\n+            }\n             if (currentWatermark.isBefore(nextWatermark)) {\n               currentWatermarks.put(ssp, nextWatermark);\n-              enqueueWatermark(reader);\n+              if (BoundedWindow.TIMESTAMP_MAX_VALUE.isAfter(nextWatermark)) {\n+                enqueueWatermark(reader);\n+              } else {\n+                // Max watermark has been reached for this reader.\n+                enqueueMaxWatermarkAndEndOfStream(reader);\n+              }\n             }\n           }\n \n           lastWatermarkTime = time;\n+          if (watermarkMillis == BoundedWindow.TIMESTAMP_MAX_VALUE.getMillis()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTY0Njk2OnYy", "diffSide": "RIGHT", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/metrics/MetricsEnvironment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoyOToxMlrOIGZyKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODoyOToxMlrOIGZyKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU4NDgxMA==", "bodyText": "As mentioned above, please exclude this change from the pr and discuss with @Zhangyx39", "url": "https://github.com/apache/beam/pull/13550#discussion_r543584810", "createdAt": "2020-12-15T18:29:12Z", "author": {"login": "xinyuiscool"}, "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/metrics/MetricsEnvironment.java", "diffHunk": "@@ -53,6 +54,12 @@\n \n   private static final ThreadLocal<@Nullable MetricsContainer> CONTAINER_FOR_THREAD =\n       new ThreadLocal<>();\n+  private static final AtomicReference<MetricsContainer> CONTAINER_GLOBAL = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c5fe65afc5f4e99c2a6fe2732c576e2c16852a2"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2574, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}