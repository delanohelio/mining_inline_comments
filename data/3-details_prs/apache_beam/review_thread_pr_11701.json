{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NjM3NzM4", "number": 11701, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzowMjozMVrOD-AFqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzowMjozMVrOD-AFqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzM5NzU0OnYy", "diffSide": "LEFT", "path": "sdks/python/apache_beam/coders/row_coder.py", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzowMjozMVrOGX1ktA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODozMjo1N1rOGYYt3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0ODE4MA==", "bodyText": "This forces the value to be an iterable, rather than just having the right fields, right? Are we sure we want to do that?", "url": "https://github.com/apache/beam/pull/11701#discussion_r427648180", "createdAt": "2020-05-19T23:02:31Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/row_coder.py", "diffHunk": "@@ -134,19 +134,18 @@ def __init__(self, schema, components):\n   def encode_to_stream(self, value, out, nested):\n     nvals = len(self.schema.fields)\n     self.SIZE_CODER.encode_to_stream(nvals, out, True)\n-    attrs = [getattr(value, f.name) for f in self.schema.fields]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dafb03854696c8d189da4f1ad16345931e6d09dc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY1NTMzMg==", "bodyText": "Yeah that's right. Right now it should only be possible to get here with a NamedTuple instance, so it should be safe.\nLooking forward to the day where more types might go through this code.. I kind of like the idea of using tuple as the \"base\" schema type in Python (i.e. the type we must be able to convert to/from for use in row coder). Relying on attributes isn't great since it limits us to field names that are valid python identifiers.\nAll that being said I'd be fine dropping this part of the change for now. Renaming the special id field also fixes the bug.", "url": "https://github.com/apache/beam/pull/11701#discussion_r427655332", "createdAt": "2020-05-19T23:24:52Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/coders/row_coder.py", "diffHunk": "@@ -134,19 +134,18 @@ def __init__(self, schema, components):\n   def encode_to_stream(self, value, out, nested):\n     nvals = len(self.schema.fields)\n     self.SIZE_CODER.encode_to_stream(nvals, out, True)\n-    attrs = [getattr(value, f.name) for f in self.schema.fields]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0ODE4MA=="}, "originalCommit": {"oid": "dafb03854696c8d189da4f1ad16345931e6d09dc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIxNzkxNw==", "bodyText": "Yeah, let's drop this change for now.", "url": "https://github.com/apache/beam/pull/11701#discussion_r428217917", "createdAt": "2020-05-20T18:23:56Z", "author": {"login": "robertwb"}, "path": "sdks/python/apache_beam/coders/row_coder.py", "diffHunk": "@@ -134,19 +134,18 @@ def __init__(self, schema, components):\n   def encode_to_stream(self, value, out, nested):\n     nvals = len(self.schema.fields)\n     self.SIZE_CODER.encode_to_stream(nvals, out, True)\n-    attrs = [getattr(value, f.name) for f in self.schema.fields]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0ODE4MA=="}, "originalCommit": {"oid": "dafb03854696c8d189da4f1ad16345931e6d09dc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIyMzk2Ng==", "bodyText": "I just pushed a commit that drops the coder change for now", "url": "https://github.com/apache/beam/pull/11701#discussion_r428223966", "createdAt": "2020-05-20T18:32:57Z", "author": {"login": "TheNeuralBit"}, "path": "sdks/python/apache_beam/coders/row_coder.py", "diffHunk": "@@ -134,19 +134,18 @@ def __init__(self, schema, components):\n   def encode_to_stream(self, value, out, nested):\n     nvals = len(self.schema.fields)\n     self.SIZE_CODER.encode_to_stream(nvals, out, True)\n-    attrs = [getattr(value, f.name) for f in self.schema.fields]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY0ODE4MA=="}, "originalCommit": {"oid": "dafb03854696c8d189da4f1ad16345931e6d09dc"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3761, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}