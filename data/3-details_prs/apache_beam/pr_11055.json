{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MzQ2NzE2", "number": 11055, "title": "[BEAM-9436] Improve GBK in spark structured streaming runner", "bodyText": "Could not avoid materialization because ReduceFnRunner needs an Iterable<WindowedValue> but managed to avoid a flatmap step and memory consumption with KV creation.\n\nThank you for your contribution! Follow this checklist to help us incorporate your contribution quickly and easily:\n\n Choose reviewer(s) and mention them in a comment (R: @username).\n Format the pull request title like [BEAM-XXX] Fixes bug in ApproximateQuantiles, where you replace BEAM-XXX with the appropriate JIRA issue, if applicable. This will automatically link the pull request to the issue.\n Update CHANGES.md with noteworthy changes.\n If this contribution is large, please file an Apache Individual Contributor License Agreement.\n\nSee the Contributor Guide for more tips on how to make review process smoother.\nPost-Commit Tests Status (on master branch)\n\n\n\nLang\nSDK\nApex\nDataflow\nFlink\nGearpump\nSamza\nSpark\n\n\n\n\nGo\n\n---\n---\n\n---\n---\n\n\n\nJava\n\n\n\n\n\n\n\n\n\nPython\n\n---\n\n\n---\n---\n\n\n\nXLang\n---\n---\n---\n\n---\n---\n\n\n\n\nPre-Commit Tests Status (on master branch)\n\n\n\n---\nJava\nPython\nGo\nWebsite\n\n\n\n\nNon-portable\n\n\n\n\n\n\nPortable\n---\n\n---\n---\n\n\n\nSee .test-infra/jenkins/README for trigger phrase, status and link of all Jenkins jobs.", "createdAt": "2020-03-05T15:36:40Z", "url": "https://github.com/apache/beam/pull/11055", "merged": true, "mergeCommit": {"oid": "5989def2512c1f73ed8ce54b67166998da398321"}, "closed": true, "closedAt": "2020-04-07T08:15:13Z", "author": {"login": "echauchot"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcK9DglABqjMxMDQ2ODczMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcT87lpAFqTM4NzA3MDcwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbfe0985fc04f11e4f66769826625a5375d7ddce", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/cbfe0985fc04f11e4f66769826625a5375d7ddce", "committedDate": "2020-03-05T15:46:16Z", "message": "f"}, "afterCommit": {"oid": "17eb9304e32da04c4f9209a8a8700236cb39c78c", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/17eb9304e32da04c4f9209a8a8700236cb39c78c", "committedDate": "2020-03-06T09:51:50Z", "message": "[BEAM-9436] Add GBK load tests spark structured streaming"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17eb9304e32da04c4f9209a8a8700236cb39c78c", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/17eb9304e32da04c4f9209a8a8700236cb39c78c", "committedDate": "2020-03-06T09:51:50Z", "message": "[BEAM-9436] Add GBK load tests spark structured streaming"}, "afterCommit": {"oid": "ceca95b9ef1d3139d64feeb24e8937eabd2ba3f9", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/ceca95b9ef1d3139d64feeb24e8937eabd2ba3f9", "committedDate": "2020-03-09T09:09:03Z", "message": "[BEAM-9436] Add GBK load tests spark structured streaming"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f561585700af7419f2f84e810179a4713960293", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/7f561585700af7419f2f84e810179a4713960293", "committedDate": "2020-03-10T16:52:40Z", "message": "Temp: put provided deps to compile scope to be able to run load tests on jenkins"}, "afterCommit": {"oid": "e79959c8a1851c059ee24b8350edaf971bbfcebb", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/e79959c8a1851c059ee24b8350edaf971bbfcebb", "committedDate": "2020-03-11T09:50:29Z", "message": "Add spark structured streaming to smoke load tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e79959c8a1851c059ee24b8350edaf971bbfcebb", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/e79959c8a1851c059ee24b8350edaf971bbfcebb", "committedDate": "2020-03-11T09:50:29Z", "message": "Add spark structured streaming to smoke load tests"}, "afterCommit": {"oid": "395c8a5a2f6977914f263344d42d9bf77136c8ba", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/395c8a5a2f6977914f263344d42d9bf77136c8ba", "committedDate": "2020-03-16T07:50:26Z", "message": "[BEAM-9436] avoid one flatmap step and a KV creation per element by doing the (mandatory for ReducefnRunner) materialization when grouping by windows."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MzQ4ODE0", "url": "https://github.com/apache/beam/pull/11055#pullrequestreview-379348814", "createdAt": "2020-03-23T11:38:17Z", "commit": {"oid": "395c8a5a2f6977914f263344d42d9bf77136c8ba"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTozODoxN1rOF6BlYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMTozOTowMVrOF6Bm5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NzY4Mg==", "bodyText": "I think we still can have potential OOM here, right?", "url": "https://github.com/apache/beam/pull/11055#discussion_r396387682", "createdAt": "2020-03-23T11:38:17Z", "author": {"login": "aromanenko-dev"}, "path": "runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/functions/GroupAlsoByWindowViaOutputBufferFn.java", "diffHunk": "@@ -65,9 +65,15 @@ public GroupAlsoByWindowViaOutputBufferFn(\n \n   @Override\n   public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n-      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n-    K key = kv.getKey();\n-    Iterable<WindowedValue<InputT>> values = kv.getValue();\n+      K key, Iterator<WindowedValue<KV<K, InputT>>> iterator) throws Exception {\n+\n+    // we have to meterialize the Iterator because ReduceFnRunner.processElements expects\n+    // ArrayList<WindowedValue<InputT>> and not Iterator<WindowedValue<KV<K, InputT>>>\n+    ArrayList<WindowedValue<InputT>> values = new ArrayList<>();\n+    while (iterator.hasNext()) {\n+      WindowedValue<KV<K, InputT>> wv = iterator.next();\n+      values.add(wv.withValue(wv.getValue().getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395c8a5a2f6977914f263344d42d9bf77136c8ba"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4ODA2OQ==", "bodyText": "typo: \"meterialize\"", "url": "https://github.com/apache/beam/pull/11055#discussion_r396388069", "createdAt": "2020-03-23T11:39:01Z", "author": {"login": "aromanenko-dev"}, "path": "runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/functions/GroupAlsoByWindowViaOutputBufferFn.java", "diffHunk": "@@ -65,9 +65,15 @@ public GroupAlsoByWindowViaOutputBufferFn(\n \n   @Override\n   public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n-      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n-    K key = kv.getKey();\n-    Iterable<WindowedValue<InputT>> values = kv.getValue();\n+      K key, Iterator<WindowedValue<KV<K, InputT>>> iterator) throws Exception {\n+\n+    // we have to meterialize the Iterator because ReduceFnRunner.processElements expects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395c8a5a2f6977914f263344d42d9bf77136c8ba"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDc4MDIz", "url": "https://github.com/apache/beam/pull/11055#pullrequestreview-379478023", "createdAt": "2020-03-23T14:24:22Z", "commit": {"oid": "395c8a5a2f6977914f263344d42d9bf77136c8ba"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNDoyMlrOF6Hw4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDozMTozOVrOF6IFfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ4ODkzMQ==", "bodyText": "It expects Iterable not ArrayList. It looks like doing the refactoring in ReduceFnRunner#processElements to support Iterator instead could be a nice fix and avoid this extra materialization for the Spark runner (maybe worth to dig deeper there in a different issue/JIRA).", "url": "https://github.com/apache/beam/pull/11055#discussion_r396488931", "createdAt": "2020-03-23T14:24:22Z", "author": {"login": "iemejia"}, "path": "runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/functions/GroupAlsoByWindowViaOutputBufferFn.java", "diffHunk": "@@ -65,9 +65,15 @@ public GroupAlsoByWindowViaOutputBufferFn(\n \n   @Override\n   public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n-      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n-    K key = kv.getKey();\n-    Iterable<WindowedValue<InputT>> values = kv.getValue();\n+      K key, Iterator<WindowedValue<KV<K, InputT>>> iterator) throws Exception {\n+\n+    // we have to meterialize the Iterator because ReduceFnRunner.processElements expects\n+    // ArrayList<WindowedValue<InputT>> and not Iterator<WindowedValue<KV<K, InputT>>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395c8a5a2f6977914f263344d42d9bf77136c8ba"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MTQ2Nw==", "bodyText": "Yes this comment in the doc does seem to confirm this ...users must take care to avoid materializing the whole iterator for a group (for example, by calling toList) unless they are sure that this is possible given the memory constraints of their cluster. this looks like doing exactly the same than I would expect the toList call to do.\n\nSee this comment #11055 (comment)", "url": "https://github.com/apache/beam/pull/11055#discussion_r396491467", "createdAt": "2020-03-23T14:27:49Z", "author": {"login": "iemejia"}, "path": "runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/functions/GroupAlsoByWindowViaOutputBufferFn.java", "diffHunk": "@@ -65,9 +65,15 @@ public GroupAlsoByWindowViaOutputBufferFn(\n \n   @Override\n   public Iterator<WindowedValue<KV<K, Iterable<InputT>>>> call(\n-      KV<K, Iterable<WindowedValue<InputT>>> kv) throws Exception {\n-    K key = kv.getKey();\n-    Iterable<WindowedValue<InputT>> values = kv.getValue();\n+      K key, Iterator<WindowedValue<KV<K, InputT>>> iterator) throws Exception {\n+\n+    // we have to meterialize the Iterator because ReduceFnRunner.processElements expects\n+    // ArrayList<WindowedValue<InputT>> and not Iterator<WindowedValue<KV<K, InputT>>>\n+    ArrayList<WindowedValue<InputT>> values = new ArrayList<>();\n+    while (iterator.hasNext()) {\n+      WindowedValue<KV<K, InputT>> wv = iterator.next();\n+      values.add(wv.withValue(wv.getValue().getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM4NzY4Mg=="}, "originalCommit": {"oid": "395c8a5a2f6977914f263344d42d9bf77136c8ba"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5NDIwNw==", "bodyText": "I am not familiar with this function but the documentation explicitly says ...as a result requires shuffling all the data in the Dataset. If an application intends to perform an aggregation over each key, it is best to use the reduce function or an org.apache.spark.sql.expressions#Aggregator. It is probably a good idea that we test/ensure somehow that GbK + flatMapGroups do not end up producing a double shuffle otherwise the improvement would become a regression.", "url": "https://github.com/apache/beam/pull/11055#discussion_r396494207", "createdAt": "2020-03-23T14:31:39Z", "author": {"login": "iemejia"}, "path": "runners/spark/src/main/java/org/apache/beam/runners/spark/structuredstreaming/translation/batch/GroupByKeyTranslatorBatch.java", "diffHunk": "@@ -53,50 +49,23 @@ public void translateTransform(\n \n     @SuppressWarnings(\"unchecked\")\n     final PCollection<KV<K, V>> inputPCollection = (PCollection<KV<K, V>>) context.getInput();\n-\n     Dataset<WindowedValue<KV<K, V>>> input = context.getDataset(inputPCollection);\n-\n     WindowingStrategy<?, ?> windowingStrategy = inputPCollection.getWindowingStrategy();\n     KvCoder<K, V> kvCoder = (KvCoder<K, V>) inputPCollection.getCoder();\n+    Coder<V> valueCoder = kvCoder.getValueCoder();\n \n     // group by key only\n     Coder<K> keyCoder = kvCoder.getKeyCoder();\n     KeyValueGroupedDataset<K, WindowedValue<KV<K, V>>> groupByKeyOnly =\n         input.groupByKey(KVHelpers.extractKey(), EncoderHelpers.fromBeamCoder(keyCoder));\n \n-    // Materialize groupByKeyOnly values, potential OOM because of creation of new iterable\n-    Coder<V> valueCoder = kvCoder.getValueCoder();\n-    WindowedValue.WindowedValueCoder<V> wvCoder =\n-        WindowedValue.FullWindowedValueCoder.of(\n-            valueCoder, inputPCollection.getWindowingStrategy().getWindowFn().windowCoder());\n-    IterableCoder<WindowedValue<V>> iterableCoder = IterableCoder.of(wvCoder);\n-    Dataset<KV<K, Iterable<WindowedValue<V>>>> materialized =\n-        groupByKeyOnly.mapGroups(\n-            (MapGroupsFunction<K, WindowedValue<KV<K, V>>, KV<K, Iterable<WindowedValue<V>>>>)\n-                (key, iterator) -> {\n-                  List<WindowedValue<V>> values = new ArrayList<>();\n-                  while (iterator.hasNext()) {\n-                    WindowedValue<KV<K, V>> next = iterator.next();\n-                    values.add(\n-                        WindowedValue.of(\n-                            next.getValue().getValue(),\n-                            next.getTimestamp(),\n-                            next.getWindows(),\n-                            next.getPane()));\n-                  }\n-                  KV<K, Iterable<WindowedValue<V>>> kv =\n-                      KV.of(key, Iterables.unmodifiableIterable(values));\n-                  return kv;\n-                },\n-            EncoderHelpers.fromBeamCoder(KvCoder.of(keyCoder, iterableCoder)));\n-\n     // group also by windows\n     WindowedValue.FullWindowedValueCoder<KV<K, Iterable<V>>> outputCoder =\n         WindowedValue.FullWindowedValueCoder.of(\n             KvCoder.of(keyCoder, IterableCoder.of(valueCoder)),\n             windowingStrategy.getWindowFn().windowCoder());\n     Dataset<WindowedValue<KV<K, Iterable<V>>>> output =\n-        materialized.flatMap(\n+        groupByKeyOnly.flatMapGroups(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "395c8a5a2f6977914f263344d42d9bf77136c8ba"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzgyNzAx", "url": "https://github.com/apache/beam/pull/11055#pullrequestreview-380382701", "createdAt": "2020-03-24T14:47:05Z", "commit": {"oid": "395c8a5a2f6977914f263344d42d9bf77136c8ba"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "395c8a5a2f6977914f263344d42d9bf77136c8ba", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/395c8a5a2f6977914f263344d42d9bf77136c8ba", "committedDate": "2020-03-16T07:50:26Z", "message": "[BEAM-9436] avoid one flatmap step and a KV creation per element by doing the (mandatory for ReducefnRunner) materialization when grouping by windows."}, "afterCommit": {"oid": "136c29b3a375fb900af7adac2518662e6e2a9e52", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/136c29b3a375fb900af7adac2518662e6e2a9e52", "committedDate": "2020-03-26T11:05:04Z", "message": "[BEAM-9436] avoid one flatmap step and a KV creation per element by doing the (mandatory for ReducefnRunner) materialization when grouping by windows."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbf69fb69f6b640b99ccd01cc6e4503b8e417ffb", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/dbf69fb69f6b640b99ccd01cc6e4503b8e417ffb", "committedDate": "2020-03-27T09:53:30Z", "message": "Update comment on OOM in list materialization"}, "afterCommit": {"oid": "b7a02b58afc08a9f99d6007b5a1be5dcdaddde78", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/b7a02b58afc08a9f99d6007b5a1be5dcdaddde78", "committedDate": "2020-03-27T14:58:20Z", "message": "Update comment on OOM in list materialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0859001c820900de400f11a9150c8a2a1b3f6f48", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/0859001c820900de400f11a9150c8a2a1b3f6f48", "committedDate": "2020-03-30T08:10:19Z", "message": "[BEAM-5980] Change load-tests build to include spark-sql for spark structured streaming runner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7356a471e1be486aec819ac00216b2f80dd718f2", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/7356a471e1be486aec819ac00216b2f80dd718f2", "committedDate": "2020-03-30T08:10:19Z", "message": "[BEAM-9436] avoid one flatmap step and a KV creation per element by doing the (mandatory for ReducefnRunner) materialization when grouping by windows."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7a02b58afc08a9f99d6007b5a1be5dcdaddde78", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/b7a02b58afc08a9f99d6007b5a1be5dcdaddde78", "committedDate": "2020-03-27T14:58:20Z", "message": "Update comment on OOM in list materialization"}, "afterCommit": {"oid": "7356a471e1be486aec819ac00216b2f80dd718f2", "author": {"user": {"login": "echauchot", "name": "Etienne Chauchot"}}, "url": "https://github.com/apache/beam/commit/7356a471e1be486aec819ac00216b2f80dd718f2", "committedDate": "2020-03-30T08:10:19Z", "message": "[BEAM-9436] avoid one flatmap step and a KV creation per element by doing the (mandatory for ReducefnRunner) materialization when grouping by windows."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MDcwNzA3", "url": "https://github.com/apache/beam/pull/11055#pullrequestreview-387070707", "createdAt": "2020-04-03T08:50:02Z", "commit": {"oid": "7356a471e1be486aec819ac00216b2f80dd718f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3049, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}