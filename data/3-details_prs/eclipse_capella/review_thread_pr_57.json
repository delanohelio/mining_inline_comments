{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MDQwMzA1", "number": 57, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDowODowMFrODcPu-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxNjozM1rODkSDeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTQ0NTA1OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/plugin.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDowODowMFrOFkMYFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOToyNDo1MFrOFkqz6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NTgzMA==", "bodyText": "There's no need to contribute to BaseCapella since the title block only appears on diagram. Same remark applies for BaseSiriusTable.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r373495830", "createdAt": "2020-01-31T14:08:00Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/plugin.xml", "diffHunk": "@@ -97,6 +97,12 @@\n                id=\"org.polarsys.capella.core.data.core.properties.sections.StringPropertyValueSection\"\r\n                tab=\"BaseCapella\">\r\n          </propertySection>\r\n+         <propertySection\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5NDQ3Mw==", "bodyText": "Removed.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r373994473", "createdAt": "2020-02-03T09:24:50Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/plugin.xml", "diffHunk": "@@ -97,6 +97,12 @@\n                id=\"org.polarsys.capella.core.data.core.properties.sections.StringPropertyValueSection\"\r\n                tab=\"BaseCapella\">\r\n          </propertySection>\r\n+         <propertySection\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NTgzMA=="}, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTQ1NDM4OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDoxMDo1NFrOFkMdrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTozNjoyOVrOFmUkVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NzI2Mw==", "bodyText": "What is this method supposed to do? There's no feature \"name\" associated to a DAnnotation.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r373497263", "createdAt": "2020-01-31T14:10:54Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Name:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  private void setContentValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Content:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  /**\r\n+   *\r\n+   */\r\n+  public void clearNameField() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODU1MA==", "bodyText": "This is used for the name of the cell block.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r374008550", "createdAt": "2020-02-03T09:53:37Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Name:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  private void setContentValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Content:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  /**\r\n+   *\r\n+   */\r\n+  public void clearNameField() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NzI2Mw=="}, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NjE4OQ==", "bodyText": "Sorry I was not clear.\nsetDataValue(semanticElement, ModellingcorePackage.eINSTANCE.getAbstractNamedElement_Name(), \"\"); is not necessary here. semanticElement is a DAnnotation which does not take part in the ModellingcorePackage and does not have a name.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375386189", "createdAt": "2020-02-05T17:03:57Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Name:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  private void setContentValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Content:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  /**\r\n+   *\r\n+   */\r\n+  public void clearNameField() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NzI2Mw=="}, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyNzE4OA==", "bodyText": "Removed.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375727188", "createdAt": "2020-02-06T09:36:29Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Name:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  private void setContentValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Content:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  /**\r\n+   *\r\n+   */\r\n+  public void clearNameField() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5NzI2Mw=="}, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTQ1ODE4OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDoxMjowOVrOFkMgEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTozMzo0OVrOFkrEWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5Nzg3Mw==", "bodyText": "Content field?", "url": "https://github.com/eclipse/capella/pull/57#discussion_r373497873", "createdAt": "2020-01-31T14:12:09Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Name:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  private void setContentValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Content:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  /**\r\n+   *\r\n+   */\r\n+  public void clearNameField() {\r\n+    if (null != nameTextField) {\r\n+      setDataValue(semanticElement, ModellingcorePackage.eINSTANCE.getAbstractNamedElement_Name(), \"\");\r\n+      nameTextField.setText(\"\");\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the name text field is enabled\r\n+   */\r\n+  public void enableNameField(boolean enabled) {\r\n+    if (null != nameTextField && !nameTextField.isDisposed()) {\r\n+      nameTextField.setEnabled(enabled);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the summary text field is enabled\r\n+   */\r\n+  public void enableSummaryField(boolean enabled) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5ODY4Mg==", "bodyText": "Yes, content. Changed.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r373998682", "createdAt": "2020-02-03T09:33:49Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Name:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  private void setContentValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Content:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  /**\r\n+   *\r\n+   */\r\n+  public void clearNameField() {\r\n+    if (null != nameTextField) {\r\n+      setDataValue(semanticElement, ModellingcorePackage.eINSTANCE.getAbstractNamedElement_Name(), \"\");\r\n+      nameTextField.setText(\"\");\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the name text field is enabled\r\n+   */\r\n+  public void enableNameField(boolean enabled) {\r\n+    if (null != nameTextField && !nameTextField.isDisposed()) {\r\n+      nameTextField.setEnabled(enabled);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the summary text field is enabled\r\n+   */\r\n+  public void enableSummaryField(boolean enabled) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ5Nzg3Mw=="}, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTQ3NjkzOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDoxODowMFrOFkMraA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1NDowNFrOFkrr5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwMDc3Ng==", "bodyText": "To test in collaborative mode to see if the cell is locked when being modifed by someone else.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r373500776", "createdAt": "2020-01-31T14:18:00Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Name:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  private void setContentValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Content:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  /**\r\n+   *\r\n+   */\r\n+  public void clearNameField() {\r\n+    if (null != nameTextField) {\r\n+      setDataValue(semanticElement, ModellingcorePackage.eINSTANCE.getAbstractNamedElement_Name(), \"\");\r\n+      nameTextField.setText(\"\");\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the name text field is enabled\r\n+   */\r\n+  public void enableNameField(boolean enabled) {\r\n+    if (null != nameTextField && !nameTextField.isDisposed()) {\r\n+      nameTextField.setEnabled(enabled);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the summary text field is enabled\r\n+   */\r\n+  public void enableSummaryField(boolean enabled) {\r\n+    if (null != contentTextField && !contentTextField.isDisposed()) {\r\n+      contentTextField.setEnabled(enabled);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  @Override\r\n+  public void setEnabled(boolean enabled) {\r\n+    LockHelper.getInstance().enable(nameTextField, enabled);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODgwNQ==", "bodyText": "Will do.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r374008805", "createdAt": "2020-02-03T09:54:04Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Name:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  private void setContentValue(EObject object, final Object value) {\r\n+    AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+      @Override\r\n+      public void run() {\r\n+        ((DAnnotation) object).getDetails().put(\"Content:\", value.toString());\r\n+      }\r\n+    };\r\n+    executeCommand(command);\r\n+  }\r\n+\r\n+  /**\r\n+   *\r\n+   */\r\n+  public void clearNameField() {\r\n+    if (null != nameTextField) {\r\n+      setDataValue(semanticElement, ModellingcorePackage.eINSTANCE.getAbstractNamedElement_Name(), \"\");\r\n+      nameTextField.setText(\"\");\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the name text field is enabled\r\n+   */\r\n+  public void enableNameField(boolean enabled) {\r\n+    if (null != nameTextField && !nameTextField.isDisposed()) {\r\n+      nameTextField.setEnabled(enabled);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the summary text field is enabled\r\n+   */\r\n+  public void enableSummaryField(boolean enabled) {\r\n+    if (null != contentTextField && !contentTextField.isDisposed()) {\r\n+      contentTextField.setEnabled(enabled);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  @Override\r\n+  public void setEnabled(boolean enabled) {\r\n+    LockHelper.getInstance().enable(nameTextField, enabled);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwMDc3Ng=="}, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTQ4MjY5OnYy", "diffSide": "LEFT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/description/common.odesign", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDoxOTo1MFrOFkMvDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTozNDowOVrOFkrE-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwMTcwOQ==", "bodyText": "Is this change wanted?", "url": "https://github.com/eclipse/capella/pull/57#discussion_r373501709", "createdAt": "2020-01-31T14:19:50Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/description/common.odesign", "diffHunk": "@@ -2894,14 +2894,24 @@\n           </style>\r\n         </edgeMappings>\r\n         <edgeMappings name=\"DT_PVGconnector\" synchronizationLock=\"true\" sourceMapping=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']\" targetMapping=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']\" targetFinderExpression=\"service:PVinPVG\">\r\n-          <style lineStyle=\"dash\" sourceArrow=\"FillDiamond\">\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk5ODg0Mw==", "bodyText": "Mistake. Changed back.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r373998843", "createdAt": "2020-02-03T09:34:09Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/description/common.odesign", "diffHunk": "@@ -2894,14 +2894,24 @@\n           </style>\r\n         </edgeMappings>\r\n         <edgeMappings name=\"DT_PVGconnector\" synchronizationLock=\"true\" sourceMapping=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']\" targetMapping=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']\" targetFinderExpression=\"service:PVinPVG\">\r\n-          <style lineStyle=\"dash\" sourceArrow=\"FillDiamond\">\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUwMTcwOQ=="}, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTUzOTMzOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/description/common.odesign", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDozNzoxNlrOFkNR1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToxMzo1OFrOFk00jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxMDYxNQ==", "bodyText": "What's the reusedContainerMappings (reusedContainerMappings=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']\") for?", "url": "https://github.com/eclipse/capella/pull/57#discussion_r373510615", "createdAt": "2020-01-31T14:37:16Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/description/common.odesign", "diffHunk": "@@ -2894,14 +2894,24 @@\n           </style>\r\n         </edgeMappings>\r\n         <edgeMappings name=\"DT_PVGconnector\" synchronizationLock=\"true\" sourceMapping=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']\" targetMapping=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']\" targetFinderExpression=\"service:PVinPVG\">\r\n-          <style lineStyle=\"dash\" sourceArrow=\"FillDiamond\">\r\n+          <style lineStyle=\"dash\" sourceArrow=\"Diamond\">\r\n             <strokeColor xsi:type=\"description:SystemColor\" href=\"environment:/viewpoint#//@systemColors/@entries[name='black']\"/>\r\n             <centerLabelStyleDescription>\r\n               <labelColor xsi:type=\"description:SystemColor\" href=\"environment:/viewpoint#//@systemColors/@entries[name='black']\"/>\r\n             </centerLabelStyleDescription>\r\n           </style>\r\n         </edgeMappings>\r\n-        <containerMappings name=\"DT_Class\" deletionDescription=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']\" labelDirectEdit=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']\" semanticCandidatesExpression=\"\" createElements=\"false\" domainClass=\"Class\" dropDescriptions=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataValue%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataValue%20Into%20Class']\" childrenPresentation=\"List\">\r\n+        <edgeMappings name=\"DT_TitleBlockEdge\" targetMapping=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']\" targetFinderExpression=\"service:computeTitleBlockElements(diagram)\">\r\n+          <sourceMapping xsi:type=\"description_1:ContainerMapping\" href=\"#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']\"/>\r\n+          <sourceMapping xsi:type=\"description_1:ContainerMapping\" href=\"physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']\"/>\r\n+          <style lineStyle=\"dash\" targetArrow=\"NoDecoration\" sizeComputationExpression=\"2\">\r\n+            <strokeColor xsi:type=\"description:SystemColor\" href=\"environment:/viewpoint#//@systemColors/@entries[name='gray']\"/>\r\n+            <centerLabelStyleDescription labelSize=\"12\">\r\n+              <labelColor xsi:type=\"description:SystemColor\" href=\"environment:/viewpoint#//@systemColors/@entries[name='black']\"/>\r\n+            </centerLabelStyleDescription>\r\n+          </style>\r\n+        </edgeMappings>\r\n+        <containerMappings name=\"DT_Class\" deletionDescription=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']\" labelDirectEdit=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']\" semanticCandidatesExpression=\"\" createElements=\"false\" domainClass=\"Class\" dropDescriptions=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataValue%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataValue%20Into%20Class']\" reusedContainerMappings=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']\" childrenPresentation=\"List\">\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE1ODQ3OQ==", "bodyText": "Done. Changed to creation by \"Tool\" instead of \"Container Creation\".", "url": "https://github.com/eclipse/capella/pull/57#discussion_r374158479", "createdAt": "2020-02-03T15:13:58Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/description/common.odesign", "diffHunk": "@@ -2894,14 +2894,24 @@\n           </style>\r\n         </edgeMappings>\r\n         <edgeMappings name=\"DT_PVGconnector\" synchronizationLock=\"true\" sourceMapping=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG']\" targetMapping=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_PVG'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@nodeMappings[name='DT_PV']\" targetFinderExpression=\"service:PVinPVG\">\r\n-          <style lineStyle=\"dash\" sourceArrow=\"FillDiamond\">\r\n+          <style lineStyle=\"dash\" sourceArrow=\"Diamond\">\r\n             <strokeColor xsi:type=\"description:SystemColor\" href=\"environment:/viewpoint#//@systemColors/@entries[name='black']\"/>\r\n             <centerLabelStyleDescription>\r\n               <labelColor xsi:type=\"description:SystemColor\" href=\"environment:/viewpoint#//@systemColors/@entries[name='black']\"/>\r\n             </centerLabelStyleDescription>\r\n           </style>\r\n         </edgeMappings>\r\n-        <containerMappings name=\"DT_Class\" deletionDescription=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']\" labelDirectEdit=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']\" semanticCandidatesExpression=\"\" createElements=\"false\" domainClass=\"Class\" dropDescriptions=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataValue%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataValue%20Into%20Class']\" childrenPresentation=\"List\">\r\n+        <edgeMappings name=\"DT_TitleBlockEdge\" targetMapping=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']\" targetFinderExpression=\"service:computeTitleBlockElements(diagram)\">\r\n+          <sourceMapping xsi:type=\"description_1:ContainerMapping\" href=\"#//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_Class']\"/>\r\n+          <sourceMapping xsi:type=\"description_1:ContainerMapping\" href=\"physical.odesign#//@ownedViewpoints[name='Physical%20Architecture']/@ownedRepresentations[name='Physical%20Architecture%20Blank']/@defaultLayer/@containerMappings[name='PAB_PC']\"/>\r\n+          <style lineStyle=\"dash\" targetArrow=\"NoDecoration\" sizeComputationExpression=\"2\">\r\n+            <strokeColor xsi:type=\"description:SystemColor\" href=\"environment:/viewpoint#//@systemColors/@entries[name='gray']\"/>\r\n+            <centerLabelStyleDescription labelSize=\"12\">\r\n+              <labelColor xsi:type=\"description:SystemColor\" href=\"environment:/viewpoint#//@systemColors/@entries[name='black']\"/>\r\n+            </centerLabelStyleDescription>\r\n+          </style>\r\n+        </edgeMappings>\r\n+        <containerMappings name=\"DT_Class\" deletionDescription=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='Delete_DataType']\" labelDirectEdit=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='name']\" semanticCandidatesExpression=\"\" createElements=\"false\" domainClass=\"Class\" dropDescriptions=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='D%26D%20DataValue%20From%20Project%20Explorer'] //@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@toolSections.0/@ownedTools[name='DataValue%20Into%20Class']\" reusedContainerMappings=\"//@ownedViewpoints[name='Common']/@ownedRepresentations[name='Class%20Diagram%20Blank']/@defaultLayer/@containerMappings[name='DT_TitleBlockContainer']\" childrenPresentation=\"List\">\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxMDYxNQ=="}, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTU0NDA3OnYy", "diffSide": "LEFT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/description/common.odesign", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxNDozODo0OVrOFkNU1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1Mjo0MVrOFkro-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxMTM4MA==", "bodyText": "Is this change wanted?", "url": "https://github.com/eclipse/capella/pull/57#discussion_r373511380", "createdAt": "2020-01-31T14:38:49Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/description/common.odesign", "diffHunk": "@@ -3839,9 +3888,7 @@\n             <elementView name=\"elementView\"/>\r\n             <containerView name=\"containerView\"/>\r\n             <initialOperation>\r\n-              <firstModelOperations xsi:type=\"tool_1:ChangeContext\" browseExpression=\"aql:elementView.sourceNode.target\">\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAwODA1Ng==", "bodyText": "Mistake. Changed back.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r374008056", "createdAt": "2020-02-03T09:52:41Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/description/common.odesign", "diffHunk": "@@ -3839,9 +3888,7 @@\n             <elementView name=\"elementView\"/>\r\n             <containerView name=\"containerView\"/>\r\n             <initialOperation>\r\n-              <firstModelOperations xsi:type=\"tool_1:ChangeContext\" browseExpression=\"aql:elementView.sourceNode.target\">\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUxMTM4MA=="}, "originalCommit": {"oid": "29766df4ff9af31a9dfb18e1e20ba2de5280588a"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTY0MjA3OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzowMTo1NlrOFl_r7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDoxNjoxMVrOFmV0lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NTA3MA==", "bodyText": "Could you extract this code into a method to avoid code duplication?", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375385070", "createdAt": "2020-02-05T17:01:56Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.addModifyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    if (!((DAnnotation) object).getDetails().get(\"Name:\").equals(value.toString())) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NzczMw==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375747733", "createdAt": "2020-02-06T10:16:11Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.addModifyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    if (!((DAnnotation) object).getDetails().get(\"Name:\").equals(value.toString())) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NTA3MA=="}, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTY1NjA2OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/sections/TitleBlockCellSection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzowNTo1OFrOFl_00w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0Mjo1OFrOFmUxCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NzM0Nw==", "bodyText": "Could you extract Keywords like \"TB\" into constants with meaningful name so that it's easier to maintain the code?", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375387347", "createdAt": "2020-02-05T17:05:58Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/sections/TitleBlockCellSection.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *  \n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.data.core.properties.sections;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;\n+import org.polarsys.capella.core.data.core.properties.fields.TitleBlockBasicElementGroup;\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\n+import org.polarsys.capella.core.ui.properties.sections.AbstractSection;\n+\n+/**\n+ * The PropertyValueGroup section.\n+ */\n+public class TitleBlockCellSection extends AbstractSection {\n+  protected TitleBlockBasicElementGroup titleBlockBasicElementGroup;\n+\n+  /**\n+   * @see org.eclipse.jface.viewers.IFilter#select(java.lang.Object)\n+   */\n+  @Override\n+  public boolean select(Object toTest) {\n+    EObject eObjectToTest = super.selection(toTest);\n+\n+    return ((eObjectToTest != null) && (eObjectToTest instanceof DAnnotation)\n+        && ((DAnnotation) eObjectToTest).getSource().startsWith(\"TB\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMDQ0Mg==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375730442", "createdAt": "2020-02-06T09:42:58Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/sections/TitleBlockCellSection.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *  \n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.data.core.properties.sections;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;\n+import org.polarsys.capella.core.data.core.properties.fields.TitleBlockBasicElementGroup;\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\n+import org.polarsys.capella.core.ui.properties.sections.AbstractSection;\n+\n+/**\n+ * The PropertyValueGroup section.\n+ */\n+public class TitleBlockCellSection extends AbstractSection {\n+  protected TitleBlockBasicElementGroup titleBlockBasicElementGroup;\n+\n+  /**\n+   * @see org.eclipse.jface.viewers.IFilter#select(java.lang.Object)\n+   */\n+  @Override\n+  public boolean select(Object toTest) {\n+    EObject eObjectToTest = super.selection(toTest);\n+\n+    return ((eObjectToTest != null) && (eObjectToTest instanceof DAnnotation)\n+        && ((DAnnotation) eObjectToTest).getSource().startsWith(\"TB\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NzM0Nw=="}, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTY1ODE0OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/sections/TitleBlockCellSection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzowNjozNVrOFl_2Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0NDowMFrOFmUzEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NzY4Mg==", "bodyText": "Same remark as above for cell names.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375387682", "createdAt": "2020-02-05T17:06:35Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/sections/TitleBlockCellSection.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *  \n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.data.core.properties.sections;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;\n+import org.polarsys.capella.core.data.core.properties.fields.TitleBlockBasicElementGroup;\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\n+import org.polarsys.capella.core.ui.properties.sections.AbstractSection;\n+\n+/**\n+ * The PropertyValueGroup section.\n+ */\n+public class TitleBlockCellSection extends AbstractSection {\n+  protected TitleBlockBasicElementGroup titleBlockBasicElementGroup;\n+\n+  /**\n+   * @see org.eclipse.jface.viewers.IFilter#select(java.lang.Object)\n+   */\n+  @Override\n+  public boolean select(Object toTest) {\n+    EObject eObjectToTest = super.selection(toTest);\n+\n+    return ((eObjectToTest != null) && (eObjectToTest instanceof DAnnotation)\n+        && ((DAnnotation) eObjectToTest).getSource().startsWith(\"TB\"));\n+  }\n+\n+  @Override\n+  public List<AbstractSemanticField> getSemanticFields() {\n+    List<AbstractSemanticField> fields = new ArrayList<AbstractSemanticField>();\n+    fields.add(titleBlockBasicElementGroup);\n+    return fields;\n+  }\n+\n+  @Override\n+  public void createContents(Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {\n+    titleBlockBasicElementGroup = new TitleBlockBasicElementGroup(parent, getWidgetFactory(), true, true);\n+    titleBlockBasicElementGroup.setDisplayedInWizard(isDisplayedInWizard());\n+  }\n+\n+  @Override\n+  public void loadData(EObject capellaElement) {\n+    super.loadData(capellaElement);\n+    String name = ((DAnnotation) capellaElement).getDetails().get(\"Name:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczMDk2MA==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375730960", "createdAt": "2020-02-06T09:44:00Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/sections/TitleBlockCellSection.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *  \n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.data.core.properties.sections;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.jface.viewers.ISelection;\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\n+import org.eclipse.swt.widgets.Composite;\n+import org.eclipse.ui.IWorkbenchPart;\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetPage;\n+import org.polarsys.capella.core.data.core.properties.fields.TitleBlockBasicElementGroup;\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\n+import org.polarsys.capella.core.ui.properties.sections.AbstractSection;\n+\n+/**\n+ * The PropertyValueGroup section.\n+ */\n+public class TitleBlockCellSection extends AbstractSection {\n+  protected TitleBlockBasicElementGroup titleBlockBasicElementGroup;\n+\n+  /**\n+   * @see org.eclipse.jface.viewers.IFilter#select(java.lang.Object)\n+   */\n+  @Override\n+  public boolean select(Object toTest) {\n+    EObject eObjectToTest = super.selection(toTest);\n+\n+    return ((eObjectToTest != null) && (eObjectToTest instanceof DAnnotation)\n+        && ((DAnnotation) eObjectToTest).getSource().startsWith(\"TB\"));\n+  }\n+\n+  @Override\n+  public List<AbstractSemanticField> getSemanticFields() {\n+    List<AbstractSemanticField> fields = new ArrayList<AbstractSemanticField>();\n+    fields.add(titleBlockBasicElementGroup);\n+    return fields;\n+  }\n+\n+  @Override\n+  public void createContents(Composite parent, TabbedPropertySheetPage aTabbedPropertySheetPage) {\n+    titleBlockBasicElementGroup = new TitleBlockBasicElementGroup(parent, getWidgetFactory(), true, true);\n+    titleBlockBasicElementGroup.setDisplayedInWizard(isDisplayedInWizard());\n+  }\n+\n+  @Override\n+  public void loadData(EObject capellaElement) {\n+    super.loadData(capellaElement);\n+    String name = ((DAnnotation) capellaElement).getDetails().get(\"Name:\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NzY4Mg=="}, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTY4NTAyOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoxNDowMFrOFmAG7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwODowMDo1MVrOFmSANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MTk4Mw==", "bodyText": "This method is called for KeyPressed events which makes the expression evaluated for each key press. This can cause performance issue and not really necessary. Focus lost event should be good.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375391983", "createdAt": "2020-02-05T17:14:00Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.addModifyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    if (!((DAnnotation) object).getDetails().get(\"Name:\").equals(value.toString())) {\r\n+      DDiagram diagram = (DDiagram) object.eContainer();\r\n+      AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+        @Override\r\n+        public void run() {\r\n+          ((DAnnotation) object).getDetails().put(\"Name:\", value.toString());\r\n+          RefreshRepresentationsCommand refreshCommand = new RefreshRepresentationsCommand(\r\n+              TransactionUtil.getEditingDomain(diagram), new NullProgressMonitor(), diagram);\r\n+          refreshCommand.execute();\r\n+        }\r\n+      };\r\n+      executeCommand(command);\r\n+    }\r\n+  }\r\n+\r\n+  private void setContentValue(EObject object, final Object value) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY4NTE3Mg==", "bodyText": "I added this because focus listener seems to have some problems. This problem is also present for example for PropertyValue. If you complete the Name and then complete Summary and then click somewhere on the screen, then if you go back to PropertyValue, the Summary is not saved. This appears to be because focus lost and focus gained are not called when they should.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375685172", "createdAt": "2020-02-06T08:00:51Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.data.modellingcore.ModellingcorePackage;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.addModifyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setNameValue(semanticElement, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setContentValue(semanticElement, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setNameValue(EObject object, final Object value) {\r\n+    if (!((DAnnotation) object).getDetails().get(\"Name:\").equals(value.toString())) {\r\n+      DDiagram diagram = (DDiagram) object.eContainer();\r\n+      AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+        @Override\r\n+        public void run() {\r\n+          ((DAnnotation) object).getDetails().put(\"Name:\", value.toString());\r\n+          RefreshRepresentationsCommand refreshCommand = new RefreshRepresentationsCommand(\r\n+              TransactionUtil.getEditingDomain(diagram), new NullProgressMonitor(), diagram);\r\n+          refreshCommand.execute();\r\n+        }\r\n+      };\r\n+      executeCommand(command);\r\n+    }\r\n+  }\r\n+\r\n+  private void setContentValue(EObject object, final Object value) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5MTk4Mw=="}, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTY5ODk0OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoxNzo1NFrOFmAPog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowMTozMFrOFxuWuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NDIxMA==", "bodyText": "As I observe, this is evaluated on the graphical elements but not the semantic elements. For example, typing feature:summary on a cell of a title block linked to a class does not show anything though a class does have a summary.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375394210", "createdAt": "2020-02-05T17:17:54Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2019 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(\"TitleBlock\");\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(\"Name:\", \"Name\");\r\n+          annotationCol.getDetails().put(\"Content:\", \"feature:name\");\r\n+          if (!elementView.equals(diagram)) {\r\n+            annotationCol.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          }\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeTarget(EObject elementView, DAnnotation source, DAnnotation target) {\r\n+    source.getReferences().remove(elementView);\r\n+    target.getReferences().add(elementView);\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeSource(EObject elementView, EObject source, EObject target, DEdge edgeView) {\r\n+    DNodeContainer targetNode = (DNodeContainer) edgeView.getTargetNode();\r\n+    DAnnotation annotation = (DAnnotation) targetNode.getTarget();\r\n+    annotation.getReferences().remove(source);\r\n+    annotation.getReferences().add(target);\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (((DAnnotation) titleBlock).getReferences().get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (((DAnnotation) titleBlock).getReferences().get(i))).getReferences().add(annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(\"TitleBlock\"))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczNTk4Nw==", "bodyText": "It appears that is actually working.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r375735987", "createdAt": "2020-02-06T09:53:27Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2019 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(\"TitleBlock\");\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(\"Name:\", \"Name\");\r\n+          annotationCol.getDetails().put(\"Content:\", \"feature:name\");\r\n+          if (!elementView.equals(diagram)) {\r\n+            annotationCol.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          }\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeTarget(EObject elementView, DAnnotation source, DAnnotation target) {\r\n+    source.getReferences().remove(elementView);\r\n+    target.getReferences().add(elementView);\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeSource(EObject elementView, EObject source, EObject target, DEdge edgeView) {\r\n+    DNodeContainer targetNode = (DNodeContainer) edgeView.getTargetNode();\r\n+    DAnnotation annotation = (DAnnotation) targetNode.getTarget();\r\n+    annotation.getReferences().remove(source);\r\n+    annotation.getReferences().add(target);\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (((DAnnotation) titleBlock).getReferences().get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (((DAnnotation) titleBlock).getReferences().get(i))).getReferences().add(annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(\"TitleBlock\"))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NDIxMA=="}, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MDEzMQ==", "bodyText": "There's a little bug when the element does not have the feature (e.g. summary), the cell shows some weird elements...", "url": "https://github.com/eclipse/capella/pull/57#discussion_r380790131", "createdAt": "2020-02-18T16:33:57Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2019 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(\"TitleBlock\");\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(\"Name:\", \"Name\");\r\n+          annotationCol.getDetails().put(\"Content:\", \"feature:name\");\r\n+          if (!elementView.equals(diagram)) {\r\n+            annotationCol.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          }\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeTarget(EObject elementView, DAnnotation source, DAnnotation target) {\r\n+    source.getReferences().remove(elementView);\r\n+    target.getReferences().add(elementView);\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeSource(EObject elementView, EObject source, EObject target, DEdge edgeView) {\r\n+    DNodeContainer targetNode = (DNodeContainer) edgeView.getTargetNode();\r\n+    DAnnotation annotation = (DAnnotation) targetNode.getTarget();\r\n+    annotation.getReferences().remove(source);\r\n+    annotation.getReferences().add(target);\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (((DAnnotation) titleBlock).getReferences().get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (((DAnnotation) titleBlock).getReferences().get(i))).getReferences().add(annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(\"TitleBlock\"))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NDIxMA=="}, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4NDAyNw==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r387684027", "createdAt": "2020-03-04T14:01:30Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2019 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(\"TitleBlock\");\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(\"Name:\", \"Name\");\r\n+          annotationCol.getDetails().put(\"Content:\", \"feature:name\");\r\n+          if (!elementView.equals(diagram)) {\r\n+            annotationCol.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          }\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeTarget(EObject elementView, DAnnotation source, DAnnotation target) {\r\n+    source.getReferences().remove(elementView);\r\n+    target.getReferences().add(elementView);\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeSource(EObject elementView, EObject source, EObject target, DEdge edgeView) {\r\n+    DNodeContainer targetNode = (DNodeContainer) edgeView.getTargetNode();\r\n+    DAnnotation annotation = (DAnnotation) targetNode.getTarget();\r\n+    annotation.getReferences().remove(source);\r\n+    annotation.getReferences().add(target);\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (((DAnnotation) titleBlock).getReferences().get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (((DAnnotation) titleBlock).getReferences().get(i))).getReferences().add(annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(\"TitleBlock\"))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5NDIxMA=="}, "originalCommit": {"oid": "8e21c35f93fe2b198b5bdd995224a4c81e20c3af"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzg0MTk3OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowMToyMVrOFm69ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozMjowNFrOFnfFWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NjIxOQ==", "bodyText": "No need for these fields, should be removed.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376356219", "createdAt": "2020-02-07T12:01:21Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0ODA1OQ==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376948059", "createdAt": "2020-02-10T09:32:04Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NjIxOQ=="}, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzg0Mjg0OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowMTozNlrOFm698w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowMTozNlrOFm698w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NjMzOQ==", "bodyText": "remove check.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376356339", "createdAt": "2020-02-07T12:01:36Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzg0MzI4OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowMTo1MVrOFm6-Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozMjoxNVrOFnfFtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NjQxOQ==", "bodyText": "Remove check.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376356419", "createdAt": "2020-02-07T12:01:51Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0ODE1MA==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376948150", "createdAt": "2020-02-10T09:32:15Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NjQxOQ=="}, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzg0Njc4OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowMzozMVrOFm7Aiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTozMzo1NlrOFnfJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzAwMw==", "bodyText": "I think this can be removed.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376357003", "createdAt": "2020-02-07T12:03:31Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.addModifyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setFieldValue(semanticElement, NAME, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setFieldValue(semanticElement, CONTENT, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setFieldValue(EObject object, String field, final Object value) {\r\n+    if (!((DAnnotation) object).getDetails().get(field).equals(value.toString())) {\r\n+      DDiagram diagram = (DDiagram) object.eContainer();\r\n+      AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+        @Override\r\n+        public void run() {\r\n+          ((DAnnotation) object).getDetails().put(field, value.toString());\r\n+          RefreshRepresentationsCommand refreshCommand = new RefreshRepresentationsCommand(\r\n+              TransactionUtil.getEditingDomain(diagram), new NullProgressMonitor(), diagram);\r\n+          refreshCommand.execute();\r\n+        }\r\n+      };\r\n+      executeCommand(command);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the name text field is enabled\r\n+   */\r\n+  public void enableNameField(boolean enabled) {\r\n+    if (null != nameTextField && !nameTextField.isDisposed()) {\r\n+      nameTextField.setEnabled(enabled);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the content text field is enabled\r\n+   */\r\n+  public void enableContentField(boolean enabled) {\r\n+    if (null != contentTextField && !contentTextField.isDisposed()) {\r\n+      contentTextField.setEnabled(enabled);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  @Override\r\n+  public void setEnabled(boolean enabled) {\r\n+    LockHelper.getInstance().enable(nameTextField, enabled);\r\n+    LockHelper.getInstance().enable(contentTextField, enabled);\r\n+  }\r\n+\r\n+  @Override\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0OTAwMw==", "bodyText": "Is abstract in AbstractSemanticField and thus needs to be implemented.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376949003", "createdAt": "2020-02-10T09:33:56Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.events.ModifyEvent;\r\n+import org.eclipse.swt.events.ModifyListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField implements ModifyListener {\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory) {\r\n+    this(parent, widgetFactory, true, true);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r\n+  public TitleBlockBasicElementGroup(Composite parent, TabbedPropertySheetWidgetFactory widgetFactory,\r\n+      boolean hasNameField, boolean hasContentField) {\r\n+    super(widgetFactory);\r\n+\r\n+    Group textGroup = widgetFactory.createGroup(parent, ICommonConstants.EMPTY_STRING);\r\n+    textGroup.setLayout(new GridLayout(2, false));\r\n+    GridData gd = new GridData(GridData.FILL_HORIZONTAL);\r\n+    gd.horizontalSpan = 2;\r\n+    textGroup.setLayoutData(gd);\r\n+\r\n+    // Name\r\n+    if (hasNameField) {\r\n+      nameTextField = createTextField(textGroup, Messages.getString(\"NamedElement.NameLabel\"));\r\n+    }\r\n+    // Content\r\n+    if (hasContentField) {\r\n+      contentTextField = createTextField(textGroup, Messages.getString(\"NamedElement.ContentLabel\"));\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textGroup\r\n+   * @param textLabel\r\n+   */\r\n+  private Text createTextField(Group textGroup, String textLabel) {\r\n+    widgetFactory.createCLabel(textGroup, textLabel);\r\n+\r\n+    Text textField = widgetFactory.createText(textGroup, ICommonConstants.EMPTY_STRING);\r\n+    textField.addFocusListener(this);\r\n+    textField.addKeyListener(this);\r\n+    textField.addModifyListener(this);\r\n+    textField.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r\n+\r\n+    return textField;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public void loadData(EObject semanticElement, String name, String content) {\r\n+    super.loadData(semanticElement, null);\r\n+\r\n+    if (null != semanticElement) {\r\n+      if (null != nameTextField)\r\n+        setTextValue(nameTextField, name);\r\n+      if (null != contentTextField)\r\n+        setTextValue(contentTextField, content);\r\n+    }\r\n+  }\r\n+\r\n+  protected void setTextValue(Text text, String value) {\r\n+    text.setText(value);\r\n+  }\r\n+\r\n+  /**\r\n+   * @param textField\r\n+   *          text field to be filled\r\n+   */\r\n+  @Override\r\n+  protected void fillTextField(Text textField) {\r\n+    if (textField.equals(nameTextField)) {\r\n+      setFieldValue(semanticElement, NAME, nameTextField.getText());\r\n+    } else if (textField.equals(contentTextField)) {\r\n+      setFieldValue(semanticElement, CONTENT, contentTextField.getText());\r\n+    }\r\n+  }\r\n+\r\n+  private void setFieldValue(EObject object, String field, final Object value) {\r\n+    if (!((DAnnotation) object).getDetails().get(field).equals(value.toString())) {\r\n+      DDiagram diagram = (DDiagram) object.eContainer();\r\n+      AbstractReadWriteCommand command = new AbstractReadWriteCommand() {\r\n+        @Override\r\n+        public void run() {\r\n+          ((DAnnotation) object).getDetails().put(field, value.toString());\r\n+          RefreshRepresentationsCommand refreshCommand = new RefreshRepresentationsCommand(\r\n+              TransactionUtil.getEditingDomain(diagram), new NullProgressMonitor(), diagram);\r\n+          refreshCommand.execute();\r\n+        }\r\n+      };\r\n+      executeCommand(command);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the name text field is enabled\r\n+   */\r\n+  public void enableNameField(boolean enabled) {\r\n+    if (null != nameTextField && !nameTextField.isDisposed()) {\r\n+      nameTextField.setEnabled(enabled);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * @param enabled\r\n+   *          whether or not the content text field is enabled\r\n+   */\r\n+  public void enableContentField(boolean enabled) {\r\n+    if (null != contentTextField && !contentTextField.isDisposed()) {\r\n+      contentTextField.setEnabled(enabled);\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  @Override\r\n+  public void setEnabled(boolean enabled) {\r\n+    LockHelper.getInstance().enable(nameTextField, enabled);\r\n+    LockHelper.getInstance().enable(contentTextField, enabled);\r\n+  }\r\n+\r\n+  @Override\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzAwMw=="}, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTcyMDM3OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo0OTo0N1rOFnd23Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOToyOTozMlrOFnfACA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNzk2NQ==", "bodyText": "remove comment", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376927965", "createdAt": "2020-02-10T08:49:47Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(\"TitleBlock\");\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(\"Name:\", \"Name\");\r\n+          annotationCol.getDetails().put(\"Content:\", \"feature:name\");\r\n+          if (!elementView.equals(diagram)) {\r\n+            annotationCol.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          }\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeTarget(EObject elementView, DAnnotation source, DAnnotation target) {\r\n+    source.getReferences().remove(elementView);\r\n+    target.getReferences().add(elementView);\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeSource(EObject elementView, EObject source, EObject target, DEdge edgeView) {\r\n+    DNodeContainer targetNode = (DNodeContainer) edgeView.getTargetNode();\r\n+    DAnnotation annotation = (DAnnotation) targetNode.getTarget();\r\n+    annotation.getReferences().remove(source);\r\n+    annotation.getReferences().add(target);\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(\"TitleBlock\"))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) cell;\r\n+        String idCell = annotation.getSource();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          // String feature = propertiesContent.get(idCell);\r\n+          String feature = annotation.getDetails().get(\"Content:\");\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            if (!annotation.getReferences().isEmpty()) {\r\n+              objToEvaluate = annotation.getReferences().get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(\"Content:\", (String) obj);\r\n+                DRepresentation representation = (DRepresentation) diagram;\r\n+                representation.getEAnnotations().add(annotationContent);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          // TODO Auto-generated catch block\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) cell;\r\n+      String idCell = annotation.getSource();\r\n+      // String name = propertiesName.get(idCell);\r\n+      String name = ((DAnnotation) cell).getDetails().get(\"Name:\");\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    // feature:name\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 268}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0NjY5Ng==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376946696", "createdAt": "2020-02-10T09:29:32Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(\"TitleBlock\");\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(\"Name:\", \"Name\");\r\n+          annotationCol.getDetails().put(\"Content:\", \"feature:name\");\r\n+          if (!elementView.equals(diagram)) {\r\n+            annotationCol.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          }\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeTarget(EObject elementView, DAnnotation source, DAnnotation target) {\r\n+    source.getReferences().remove(elementView);\r\n+    target.getReferences().add(elementView);\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeSource(EObject elementView, EObject source, EObject target, DEdge edgeView) {\r\n+    DNodeContainer targetNode = (DNodeContainer) edgeView.getTargetNode();\r\n+    DAnnotation annotation = (DAnnotation) targetNode.getTarget();\r\n+    annotation.getReferences().remove(source);\r\n+    annotation.getReferences().add(target);\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(\"TitleBlock\"))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) cell;\r\n+        String idCell = annotation.getSource();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          // String feature = propertiesContent.get(idCell);\r\n+          String feature = annotation.getDetails().get(\"Content:\");\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            if (!annotation.getReferences().isEmpty()) {\r\n+              objToEvaluate = annotation.getReferences().get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(\"Content:\", (String) obj);\r\n+                DRepresentation representation = (DRepresentation) diagram;\r\n+                representation.getEAnnotations().add(annotationContent);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          // TODO Auto-generated catch block\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) cell;\r\n+      String idCell = annotation.getSource();\r\n+      // String name = propertiesName.get(idCell);\r\n+      String name = ((DAnnotation) cell).getDetails().get(\"Name:\");\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    // feature:name\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNzk2NQ=="}, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTcyMDg4OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwODo0OTo1N1rOFnd3LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOToyOToxMlrOFne_Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyODA0NQ==", "bodyText": "remove comment", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376928045", "createdAt": "2020-02-10T08:49:57Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(\"TitleBlock\");\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(\"Name:\", \"Name\");\r\n+          annotationCol.getDetails().put(\"Content:\", \"feature:name\");\r\n+          if (!elementView.equals(diagram)) {\r\n+            annotationCol.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          }\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeTarget(EObject elementView, DAnnotation source, DAnnotation target) {\r\n+    source.getReferences().remove(elementView);\r\n+    target.getReferences().add(elementView);\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeSource(EObject elementView, EObject source, EObject target, DEdge edgeView) {\r\n+    DNodeContainer targetNode = (DNodeContainer) edgeView.getTargetNode();\r\n+    DAnnotation annotation = (DAnnotation) targetNode.getTarget();\r\n+    annotation.getReferences().remove(source);\r\n+    annotation.getReferences().add(target);\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(\"TitleBlock\"))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) cell;\r\n+        String idCell = annotation.getSource();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          // String feature = propertiesContent.get(idCell);\r\n+          String feature = annotation.getDetails().get(\"Content:\");\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            if (!annotation.getReferences().isEmpty()) {\r\n+              objToEvaluate = annotation.getReferences().get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(\"Content:\", (String) obj);\r\n+                DRepresentation representation = (DRepresentation) diagram;\r\n+                representation.getEAnnotations().add(annotationContent);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          // TODO Auto-generated catch block\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) cell;\r\n+      String idCell = annotation.getSource();\r\n+      // String name = propertiesName.get(idCell);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk0NjUzNA==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r376946534", "createdAt": "2020-02-10T09:29:12Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,286 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(\"TitleBlock\");\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(\"Name:\", \"Name\");\r\n+          annotationCol.getDetails().put(\"Content:\", \"feature:name\");\r\n+          if (!elementView.equals(diagram)) {\r\n+            annotationCol.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+          }\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeTarget(EObject elementView, DAnnotation source, DAnnotation target) {\r\n+    source.getReferences().remove(elementView);\r\n+    target.getReferences().add(elementView);\r\n+  }\r\n+\r\n+  public void reconnectTitleBlockEdgeSource(EObject elementView, EObject source, EObject target, DEdge edgeView) {\r\n+    DNodeContainer targetNode = (DNodeContainer) edgeView.getTargetNode();\r\n+    DAnnotation annotation = (DAnnotation) targetNode.getTarget();\r\n+    annotation.getReferences().remove(source);\r\n+    annotation.getReferences().add(target);\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+              representation.getEAnnotations().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(\"TitleBlock\"))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) cell;\r\n+        String idCell = annotation.getSource();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          // String feature = propertiesContent.get(idCell);\r\n+          String feature = annotation.getDetails().get(\"Content:\");\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            if (!annotation.getReferences().isEmpty()) {\r\n+              objToEvaluate = annotation.getReferences().get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(\"Content:\", (String) obj);\r\n+                DRepresentation representation = (DRepresentation) diagram;\r\n+                representation.getEAnnotations().add(annotationContent);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          // TODO Auto-generated catch block\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) cell;\r\n+      String idCell = annotation.getSource();\r\n+      // String name = propertiesName.get(idCell);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyODA0NQ=="}, "originalCommit": {"oid": "cb3f1fe6b18135ff038380be23260559565a372c"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjMzNzAxOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDozNjowNlrOFrEs6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDozNjowNlrOFrEs6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcxMDEyMA==", "bodyText": "remove hasNameField, hasContentField from description.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r380710120", "createdAt": "2020-02-18T14:36:06Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.data.core.properties/src/org/polarsys/capella/core/data/core/properties/fields/TitleBlockBasicElementGroup.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.data.core.properties.fields;\r\n+\r\n+import org.eclipse.core.runtime.NullProgressMonitor;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.transaction.util.TransactionUtil;\r\n+import org.eclipse.sirius.business.api.dialect.command.RefreshRepresentationsCommand;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.views.properties.tabbed.TabbedPropertySheetWidgetFactory;\r\n+import org.polarsys.capella.common.ef.command.AbstractReadWriteCommand;\r\n+import org.polarsys.capella.common.mdsofa.common.constant.ICommonConstants;\r\n+import org.polarsys.capella.core.data.core.properties.Messages;\r\n+import org.polarsys.capella.core.ui.properties.fields.AbstractSemanticField;\r\n+import org.polarsys.capella.core.ui.properties.helpers.LockHelper;\r\n+\r\n+public class TitleBlockBasicElementGroup extends AbstractSemanticField {\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  protected Text nameTextField;\r\n+  protected Text contentTextField;\r\n+\r\n+  /**\r\n+   * @param parent\r\n+   * @param widgetFactory\r\n+   * @param hasNameField\r\n+   * @param hasContentField\r\n+   */\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8606eee7c8235d2424c033b08225f63853be5a2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjM2MzYzOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDo0MjozNVrOFrE8-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDo0MjozNVrOFrE8-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcxNDIzNA==", "bodyText": "Clean up a little bit this file:\n\nremove comments\nremove unnecessary code", "url": "https://github.com/eclipse/capella/pull/57#discussion_r380714234", "createdAt": "2020-02-18T14:42:35Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,408 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8606eee7c8235d2424c033b08225f63853be5a2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDkxOTAzOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyNDoxOFrOFvQQJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzo1Mjo0NFrOFvS-eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MzY2OA==", "bodyText": "Split this function in createDiagramTitleBlock and createElementTitleBlock.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385093668", "createdAt": "2020-02-27T12:24:18Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzODI5Ng==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385138296", "createdAt": "2020-02-27T13:52:44Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5MzY2OA=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDkyMTg1OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyNToyNlrOFvQSBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzo0NjozOVrOFvSwug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NDE0OA==", "bodyText": "rename maybe to isDiagramTileBlock", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385094148", "createdAt": "2020-02-27T12:25:26Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzNDc3OA==", "bodyText": "Removed it, as there was already a isDiagramTitleBlock method.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385134778", "createdAt": "2020-02-27T13:46:39Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NDE0OA=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDkyNjIwOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyNjo0NVrOFvQUdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDowMDo1MVrOFvTRMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NDc3Mw==", "bodyText": "It if is an element title block, it will reference also the semantic element so lines = lines = 1.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385094773", "createdAt": "2020-02-27T12:26:45Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE0MzA4OA==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385143088", "createdAt": "2020-02-27T14:00:51Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NDc3Mw=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDkzMDY2OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjoyODoxNVrOFvQXHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxMDowMVrOFv2Kcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NTQ1Mw==", "bodyText": "before doing EObject obj = titleBlock.getReferences().get(1), check that titleBlock.getReferences().size() > 1", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385095453", "createdAt": "2020-02-27T12:28:15Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxNDgwMg==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385714802", "createdAt": "2020-02-28T14:10:01Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA5NTQ1Mw=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk4NTE2OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0NjoyMFrOFvQ3fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoxMTowMlrOFv0ceg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMzc0Mg==", "bodyText": "create getAvailableDiagramTitleBlocks and another one getAvailableElementTitleBlocks. Instead of TITLE_BLOCK use DIAGRAM_TITLE_BLOCK and ELEMENT_TITLE_BLOCK.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385103742", "createdAt": "2020-02-27T12:46:20Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 362}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4NjY1MA==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385686650", "createdAt": "2020-02-28T13:11:02Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwMzc0Mg=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 362}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk4NzAzOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0Njo1NFrOFvQ4jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoxMToxM1rOFv0cyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDAxMw==", "bodyText": "same remark as for getAvailableTitleBlocks, create 2 functions one for Diagram TB one for Element TB.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385104013", "createdAt": "2020-02-27T12:46:54Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 385}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4NjczMA==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385686730", "createdAt": "2020-02-28T13:11:13Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDAxMw=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 385}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk4ODIyOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0NzoyNlrOFvQ5Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoxMToyMVrOFv0dDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDIwNw==", "bodyText": "also here, create one function for diagram TB and one for element TB.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385104207", "createdAt": "2020-02-27T12:47:26Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r\n+      boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(TITLE_BLOCK)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 416}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4Njc5OQ==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385686799", "createdAt": "2020-02-28T13:11:21Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r\n+      boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(TITLE_BLOCK)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDIwNw=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 416}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk5MTgzOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo0ODoyNVrOFvQ7WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwODoxMDoyMFrOFvsiwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDcyOA==", "bodyText": "do not hardcode mapping.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385104728", "createdAt": "2020-02-27T12:48:25Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r\n+      boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(TITLE_BLOCK)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      boolean isDiagram) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(TITLE_BLOCK)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (isDiagram) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.CDB_TITLE_BLOCK;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 463}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1NzE4Ng==", "bodyText": "Changed name.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385557186", "createdAt": "2020-02-28T08:10:20Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r\n+      boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(TITLE_BLOCK)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      boolean isDiagram) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(TITLE_BLOCK)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (isDiagram) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.CDB_TITLE_BLOCK;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNDcyOA=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 463}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk5NzcxOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1MDoyMFrOFvQ-5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoxMjoyM1rOFv0ewg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNTYzNw==", "bodyText": "insetad of TITLE_BLOCK use DIAGRAM_TITLE_BLOCK.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385105637", "createdAt": "2020-02-27T12:50:20Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r\n+      boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(TITLE_BLOCK)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      boolean isDiagram) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(TITLE_BLOCK)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (isDiagram) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.CDB_TITLE_BLOCK;\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r\n+    if (context instanceof DNodeList) {\r\n+      if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+        titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+      }\r\n+      return DiagramServices.getDiagramServices().createDNodeListElement(mapping, titleBlock,\r\n+          (DragAndDropTarget) context, diagram);\r\n+    }\r\n+    if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+      titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+    }\r\n+    return DiagramServices.getDiagramServices().createNode(mapping, titleBlock, (DragAndDropTarget) context, diagram);\r\n+  }\r\n+\r\n+  public boolean isUniqueDiagramTitleBlock(EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 481}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4NzIzNA==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385687234", "createdAt": "2020-02-28T13:12:23Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r\n+      boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(TITLE_BLOCK)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      boolean isDiagram) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(TITLE_BLOCK)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (isDiagram) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.CDB_TITLE_BLOCK;\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r\n+    if (context instanceof DNodeList) {\r\n+      if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+        titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+      }\r\n+      return DiagramServices.getDiagramServices().createDNodeListElement(mapping, titleBlock,\r\n+          (DragAndDropTarget) context, diagram);\r\n+    }\r\n+    if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+      titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+    }\r\n+    return DiagramServices.getDiagramServices().createNode(mapping, titleBlock, (DragAndDropTarget) context, diagram);\r\n+  }\r\n+\r\n+  public boolean isUniqueDiagramTitleBlock(EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNTYzNw=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 481}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDk5ODgyOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1MDo0M1rOFvQ_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMzoxMjowOFrOFv0eVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNTgyNw==", "bodyText": "instead of TITLE_BLOCK use ELEMENT_TITLE_BLOCK.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385105827", "createdAt": "2020-02-27T12:50:43Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r\n+      boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(TITLE_BLOCK)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      boolean isDiagram) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(TITLE_BLOCK)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (isDiagram) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.CDB_TITLE_BLOCK;\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r\n+    if (context instanceof DNodeList) {\r\n+      if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+        titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+      }\r\n+      return DiagramServices.getDiagramServices().createDNodeListElement(mapping, titleBlock,\r\n+          (DragAndDropTarget) context, diagram);\r\n+    }\r\n+    if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+      titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+    }\r\n+    return DiagramServices.getDiagramServices().createNode(mapping, titleBlock, (DragAndDropTarget) context, diagram);\r\n+  }\r\n+\r\n+  public boolean isUniqueDiagramTitleBlock(EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .filter(x -> x.getReferences().size() == 2).collect(Collectors.toList());\r\n+    }\r\n+    return (result.size() == 0);\r\n+  }\r\n+\r\n+  public boolean isUniqueElementTitleBlock(Object elementView, EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 492}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY4NzEyNw==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385687127", "createdAt": "2020-02-28T13:12:08Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r\n+      boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(TITLE_BLOCK)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      boolean isDiagram) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(TITLE_BLOCK)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (isDiagram) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.CDB_TITLE_BLOCK;\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r\n+    if (context instanceof DNodeList) {\r\n+      if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+        titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+      }\r\n+      return DiagramServices.getDiagramServices().createDNodeListElement(mapping, titleBlock,\r\n+          (DragAndDropTarget) context, diagram);\r\n+    }\r\n+    if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+      titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+    }\r\n+    return DiagramServices.getDiagramServices().createNode(mapping, titleBlock, (DragAndDropTarget) context, diagram);\r\n+  }\r\n+\r\n+  public boolean isUniqueDiagramTitleBlock(EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .filter(x -> x.getReferences().size() == 2).collect(Collectors.toList());\r\n+    }\r\n+    return (result.size() == 0);\r\n+  }\r\n+\r\n+  public boolean isUniqueElementTitleBlock(Object elementView, EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNTgyNw=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 492}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTAwMTU2OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMjo1MToyOVrOFvRBKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzo0NzoyOFrOFvSyiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNjIxNw==", "bodyText": "remove commented code.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385106217", "createdAt": "2020-02-27T12:51:29Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r\n+      boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(TITLE_BLOCK)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      boolean isDiagram) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(TITLE_BLOCK)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (isDiagram) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.CDB_TITLE_BLOCK;\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r\n+    if (context instanceof DNodeList) {\r\n+      if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+        titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+      }\r\n+      return DiagramServices.getDiagramServices().createDNodeListElement(mapping, titleBlock,\r\n+          (DragAndDropTarget) context, diagram);\r\n+    }\r\n+    if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+      titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+    }\r\n+    return DiagramServices.getDiagramServices().createNode(mapping, titleBlock, (DragAndDropTarget) context, diagram);\r\n+  }\r\n+\r\n+  public boolean isUniqueDiagramTitleBlock(EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .filter(x -> x.getReferences().size() == 2).collect(Collectors.toList());\r\n+    }\r\n+    return (result.size() == 0);\r\n+  }\r\n+\r\n+  public boolean isUniqueElementTitleBlock(Object elementView, EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      for (DAnnotation annotation : result) {\r\n+        for (EObject reference : annotation.getReferences()) {\r\n+          if (reference == ((DNodeList) elementView).getTarget()) {\r\n+            return false;\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  public static Image getImage(Object object) {\r\n+    DAnnotation annotation = (DAnnotation) object;\r\n+    // if is diag ann\r\n+    String imagePath = \"/icons/full/obj16/TitleBlock_16.png\";\r\n+    URL url = FileLocator.find(SiriusViewActivator.getInstance().getBundle(), new Path(imagePath), null);\r\n+\r\n+    // org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator.getPlugin()\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 511}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEzNTI0Mw==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r385135243", "createdAt": "2020-02-27T13:47:28Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.sirius.analysis/src/org/polarsys/capella/core/sirius/analysis/TitleBlockServices.java", "diffHunk": "@@ -0,0 +1,515 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.sirius.analysis;\r\n+\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Objects;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.sirius.common.tools.api.interpreter.EvaluationException;\r\n+import org.eclipse.sirius.common.tools.internal.interpreter.FeatureInterpreter;\r\n+import org.eclipse.sirius.diagram.AbstractDNode;\r\n+import org.eclipse.sirius.diagram.DDiagram;\r\n+import org.eclipse.sirius.diagram.DDiagramElement;\r\n+import org.eclipse.sirius.diagram.DEdge;\r\n+import org.eclipse.sirius.diagram.DNodeContainer;\r\n+import org.eclipse.sirius.diagram.DNodeList;\r\n+import org.eclipse.sirius.diagram.DSemanticDiagram;\r\n+import org.eclipse.sirius.diagram.DragAndDropTarget;\r\n+import org.eclipse.sirius.diagram.description.NodeMapping;\r\n+import org.eclipse.sirius.viewpoint.DRepresentation;\r\n+import org.eclipse.sirius.viewpoint.description.DAnnotation;\r\n+import org.eclipse.sirius.viewpoint.description.DescriptionFactory;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.polarsys.capella.core.data.information.impl.ClassImpl;\r\n+import org.polarsys.capella.core.data.information.impl.DataPkgImpl;\r\n+import org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator;\r\n+\r\n+public class TitleBlockServices {\r\n+  private static TitleBlockServices service = null;\r\n+\r\n+  static Map<String, String> propertiesName = new HashMap<String, String>();\r\n+  static Map<String, String> propertiesContent = new HashMap<String, String>();\r\n+\r\n+  private static final String TITLE_BLOCK = \"TitleBlock\";\r\n+  private static final String NAME = \"Name:\";\r\n+  private static final String CONTENT = \"Content:\";\r\n+  private static final String VISIBILITY = \"Visibility\";\r\n+  private static final String IS_ELEMENT_TITLE_BLOCK = \"Is Element Title Block\";\r\n+  private static final String TRUE = \"True\";\r\n+  private static final String FALSE = \"False\";\r\n+\r\n+  public static TitleBlockServices getService() {\r\n+    if (service == null) {\r\n+      init();\r\n+      service = new TitleBlockServices();\r\n+    }\r\n+    return service;\r\n+  }\r\n+\r\n+  public static void init() {\r\n+    propertiesName.put(\"TB_0_0\", \"Name\");\r\n+    propertiesName.put(\"TB_0_1\", \"Documentation\");\r\n+    propertiesName.put(\"TB_1_0\", \"Contextual elements\");\r\n+    propertiesContent.put(\"TB_0_0\", \"feature:name\");\r\n+    propertiesContent.put(\"TB_0_1\", \"\");// \"feature:documentation\");\r\n+    propertiesContent.put(\"TB_1_0\", \"\");\r\n+  }\r\n+\r\n+  public boolean isDiagram(EObject container) {\r\n+    return (container instanceof DataPkgImpl);\r\n+  }\r\n+\r\n+  public void createDiagramTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (elementView instanceof DSemanticDiagram && isUniqueDiagramTitleBlock(diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public void createElementTitleBlock(EObject elementView, EObject diagram) {\r\n+    if (!(elementView instanceof DSemanticDiagram) && isUniqueElementTitleBlock(elementView, diagram)) {\r\n+      createTitleBlock(elementView, diagram);\r\n+    }\r\n+  }\r\n+\r\n+  public boolean isDiagramTitleBlock(DAnnotation titleBlock) {\r\n+    List<EObject> references = titleBlock.getReferences().stream().filter(x -> !(x instanceof DAnnotation))\r\n+        .collect(Collectors.toList());\r\n+    if (references.isEmpty()) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  private void createTitleBlock(EObject elementView, EObject diagram) {\r\n+    DRepresentation representation = null;\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      representation = (DRepresentation) diagram;\r\n+    }\r\n+\r\n+    if (representation != null) {\r\n+      // todo - read from properties\r\n+      int numLines = 2;\r\n+      int numCols = 2;\r\n+\r\n+      DAnnotation annotation = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotation.setSource(TITLE_BLOCK);\r\n+      annotation.getDetails().put(VISIBILITY, TRUE);\r\n+\r\n+      List<DAnnotation> annotationLines = new ArrayList<DAnnotation>();\r\n+      for (int i = 0; i < numLines; i++) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+\r\n+        // addColumnsToLine(annotationLine, representation, numCols); start\r\n+        List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+        for (int j = 0; j < numCols; j++) {\r\n+          DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+          annotationCol.setSource(\"TB_\" + i + \"_\" + j);\r\n+          annotationCol.getDetails().put(NAME, \"Name\");\r\n+          annotationCol.getDetails().put(CONTENT, \"feature:name\");\r\n+          annotationCols.add(annotationCol);\r\n+          representation.getEAnnotations().add(annotationCol);\r\n+        }\r\n+        annotationLine.getReferences().addAll(annotationCols);\r\n+        representation.getEAnnotations().add(annotationLine);\r\n+        // stop\r\n+\r\n+        annotationLines.add(annotationLine);\r\n+      }\r\n+\r\n+      if (!elementView.equals(diagram)) {\r\n+        annotation.getReferences().add(((DDiagramElement) elementView).getTarget());\r\n+        annotation.getDetails().put(IS_ELEMENT_TITLE_BLOCK, TRUE);\r\n+      }\r\n+      annotation.getReferences().addAll(annotationLines);\r\n+      representation.getEAnnotations().add(annotation);\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockLine(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        DAnnotation annotationLine = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+        annotationLine.setSource(\"TitleBlockLine\");\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numCols = getNumColumns((DAnnotation) titleBlock);\r\n+          if (numCols > 0) {\r\n+            ((DAnnotation) titleBlock).getReferences().add(annotationLine);\r\n+            addColumnsToLine(annotationLine, representation, numCols, getNumLines((DAnnotation) titleBlock));\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  public void createTitleBlockColumn(EObject titleBlock, EObject diagram) {\r\n+    if (!isDiagramLevel(titleBlock)) {\r\n+      DRepresentation representation = null;\r\n+      if ((diagram instanceof DRepresentation)) {\r\n+        representation = (DRepresentation) diagram;\r\n+      }\r\n+      if (representation != null) {\r\n+        if (titleBlock instanceof DAnnotation) {\r\n+          int numLines = ((DAnnotation) titleBlock).getReferences().size();\r\n+          List<EObject> lines = ((DAnnotation) titleBlock).getReferences();\r\n+          for (int i = 0; i < numLines; i++) {\r\n+            DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+            annotationCol.setSource(\"TitleBlockLineCol\");\r\n+            if (lines.get(i) instanceof DAnnotation) {\r\n+              ((DAnnotation) (lines.get(i))).getReferences().add(annotationCol);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  private boolean isDiagramLevel(EObject titleBlock) {\r\n+    for (EObject reference : ((DAnnotation) titleBlock).getReferences()) {\r\n+      if (!(reference instanceof DAnnotation)) {\r\n+        return false;\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  private void addColumnsToLine(DAnnotation annotationLine, DRepresentation representation, int numCols,\r\n+      int lineNumber) {\r\n+    List<DAnnotation> annotationCols = new ArrayList<DAnnotation>();\r\n+    for (int j = 0; j < numCols; j++) {\r\n+      DAnnotation annotationCol = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+      annotationCol.setSource(\"TB_\" + lineNumber + \"_\" + j);\r\n+      annotationCols.add(annotationCol);\r\n+      representation.getEAnnotations().add(annotationCol);\r\n+    }\r\n+    annotationLine.getReferences().addAll(annotationCols);\r\n+    representation.getEAnnotations().add(annotationLine);\r\n+  }\r\n+\r\n+  public int getNumLines(DAnnotation titleBlock) {\r\n+    return titleBlock.getReferences().size();\r\n+  }\r\n+\r\n+  public int getNumColumns(DAnnotation titleBlock) {\r\n+    EObject obj = titleBlock.getReferences().get(1);\r\n+    if (obj instanceof DAnnotation)\r\n+      return ((DAnnotation) obj).getReferences().size();\r\n+    return 0;\r\n+  }\r\n+\r\n+  public Collection<EObject> computeTitleBlockElements(EObject elem, EObject diagram) {\r\n+    Collection<EObject> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getReferences().contains(elem))\r\n+          .collect(Collectors.toList());\r\n+    }\r\n+    return result;\r\n+  }\r\n+\r\n+  public List<DAnnotation> checkIsTitleBlockContainer(Object elementView) {\r\n+    List<DAnnotation> list = new ArrayList<DAnnotation>();\r\n+    if ((elementView instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) elementView;\r\n+      list = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      deleteDanglingTitleBlock(list, elementView);\r\n+      // clearEAnnotations(elementView);\r\n+      list = list.stream().filter(x -> Objects.nonNull(x.getDetails().get(VISIBILITY)))\r\n+          .filter(x -> x.getDetails().get(VISIBILITY).equals(TRUE)).collect(Collectors.toList());\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  private void deleteDanglingTitleBlock(List<DAnnotation> list, Object elementView) {\r\n+    List<DAnnotation> deleteList = new ArrayList<DAnnotation>();\r\n+    for (DAnnotation annotation : list) {\r\n+      boolean hasExternalElementReference = false;\r\n+      for (EObject element : annotation.getReferences()) {\r\n+        if (!(element instanceof DAnnotation)) {\r\n+          hasExternalElementReference = true;\r\n+          boolean elementPresentInDiagram = false;\r\n+          List<DDiagramElement> diagramElementsList = ((DSemanticDiagram) elementView).getOwnedDiagramElements();\r\n+          for (DDiagramElement diagramElement : diagramElementsList) {\r\n+            if (!(diagramElement instanceof DEdge) && diagramElement.getTarget().equals(element)) {\r\n+              elementPresentInDiagram = true;\r\n+            }\r\n+          }\r\n+          if (!(elementPresentInDiagram)) {\r\n+            annotation.getDetails().put(VISIBILITY, FALSE);\r\n+          }\r\n+        }\r\n+      }\r\n+      if (!(hasExternalElementReference)) {\r\n+        deleteList.add(annotation);\r\n+      }\r\n+    }\r\n+    deleteList = deleteList.stream().filter(x -> Objects.nonNull(x.getDetails().get(IS_ELEMENT_TITLE_BLOCK)))\r\n+        .filter(x -> x.getDetails().get(IS_ELEMENT_TITLE_BLOCK).equals(TRUE)).collect(Collectors.toList());\r\n+    CapellaServices.getService().removeElements(deleteList);\r\n+  }\r\n+\r\n+  public void clearEAnnotations(Object elementView, DAnnotation element) {\r\n+    List<DAnnotation> annotationsList = new ArrayList<>();\r\n+    for (EObject titleBlockLine : element.getReferences()) {\r\n+      if (titleBlockLine instanceof DAnnotation) {\r\n+        annotationsList.add((DAnnotation) titleBlockLine); // title block lines\r\n+        if (!((DAnnotation) titleBlockLine).getReferences().isEmpty()) {\r\n+          for (EObject titleBlockCell : ((DAnnotation) titleBlockLine).getReferences()) {\r\n+            if (titleBlockCell instanceof DAnnotation) {\r\n+              annotationsList.add((DAnnotation) titleBlockCell);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    ((DSemanticDiagram) elementView).getEAnnotations().removeAll(annotationsList);\r\n+  }\r\n+\r\n+  public List<Object> getTitleBlockCellContent(EObject diagram, EObject cell, EObject containerView) {\r\n+    init();\r\n+    List<Object> list = new ArrayList<Object>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      if (cell instanceof DAnnotation) {\r\n+        DAnnotation annotation = (DAnnotation) ((DNodeContainer) (containerView.eContainer().eContainer())).getTarget();\r\n+        FeatureInterpreter interpreter = new FeatureInterpreter();\r\n+        try {\r\n+          String feature = ((DAnnotation) cell).getDetails().get(CONTENT);\r\n+          if (feature != null) {\r\n+            EObject objToEvaluate = diagram;\r\n+            List<EObject> modelElements = annotation.getReferences().parallelStream()\r\n+                .filter(x -> !(x instanceof DAnnotation)).collect(Collectors.toList());\r\n+            if (!modelElements.isEmpty()) {\r\n+              objToEvaluate = modelElements.get(0);\r\n+            }\r\n+            Object obj = interpreter.evaluate(objToEvaluate, feature);\r\n+            if (obj != null) {\r\n+              if (obj instanceof EObject) {\r\n+                list.add(obj);\r\n+              } else if (obj instanceof String) {\r\n+                DAnnotation annotationContent = DescriptionFactory.eINSTANCE.createDAnnotation();\r\n+                annotationContent.setSource(\"abc\");\r\n+                annotationContent.getDetails().put(CONTENT, (String) obj);\r\n+                list.add(annotationContent);\r\n+              }\r\n+            } else {\r\n+              DRepresentation representation = (DRepresentation) diagram;\r\n+              list = representation.getOwnedRepresentationElements().stream()\r\n+                  .filter(x -> (x.getTarget() instanceof ClassImpl)).collect(Collectors.toList());\r\n+            }\r\n+          }\r\n+        } catch (EvaluationException e) {\r\n+          e.printStackTrace();\r\n+        }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n+\r\n+  public String getTitleBlockCellLabel(EObject diagram, EObject cell) {\r\n+    init();\r\n+    if (cell instanceof DAnnotation) {\r\n+      String name = ((DAnnotation) cell).getDetails().get(NAME);\r\n+      if (name != null)\r\n+        return name;\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public String getCellLabel(EObject obj) {\r\n+    if (obj instanceof DAnnotation) {\r\n+      DAnnotation annotation = (DAnnotation) obj;\r\n+      return annotation.getDetails().get(CONTENT);\r\n+    }\r\n+    return \"\";\r\n+  }\r\n+\r\n+  public boolean isAnnotation(EObject obj) {\r\n+    return obj instanceof DAnnotation;\r\n+  }\r\n+\r\n+  public boolean isTitleBlockAllowed(EObject element, EObject containerView) {\r\n+    if (containerView instanceof DRepresentation) {\r\n+      return true;\r\n+    }\r\n+    return false;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getAvailableTitleBlocksToInsert(final EObject elementView, boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>();\r\n+    EList<DAnnotation> eList = ((DDiagram) elementView).getEAnnotations();\r\n+    for (DAnnotation elem : eList) {\r\n+      if (elem.getSource().equals(TITLE_BLOCK)) {\r\n+        result.add(elem);\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public List<DAnnotation> getInitialSelectionOfShowHideTitleBlocks(final EObject elementView,\r\n+      boolean isDiagramTitleBlock) {\r\n+    List<DAnnotation> result = new ArrayList<>(1);\r\n+    DSemanticDiagram diagram = (DSemanticDiagram) CapellaServices.getService().getDiagramContainer(elementView);\r\n+    if (elementView.equals(diagram)) {\r\n+      EList<DAnnotation> diagramElements = diagram.getEAnnotations();\r\n+      for (DAnnotation dDiagramElement : diagramElements) {\r\n+        if (dDiagramElement.getSource().equals(TITLE_BLOCK)) {\r\n+          if (null != dDiagramElement.getDetails().get(VISIBILITY)) {\r\n+            if (dDiagramElement.getDetails().get(VISIBILITY).equals(TRUE)) {\r\n+              result.add(dDiagramElement);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    List<DAnnotation> finalResult = new ArrayList<>();\r\n+    for (DAnnotation annotation : result) {\r\n+      if (isDiagramTitleBlock) {\r\n+        if (isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      } else {\r\n+        if (!isDiagramTitleBlock(annotation)) {\r\n+          finalResult.add(annotation);\r\n+        }\r\n+      }\r\n+    }\r\n+    return finalResult;\r\n+  }\r\n+\r\n+  public EObject showHideTitleBlocks(EObject context, List<DAnnotation> selectedTitleBlocks, DDiagram diagram,\r\n+      boolean isDiagram) {\r\n+    Map<DAnnotation, DDiagramElement> visibleElements = new HashMap<>();\r\n+    List<EObject> allNodes = new ArrayList<>();\r\n+    allNodes.addAll(((DSemanticDiagram) context).getOwnedDiagramElements());\r\n+    for (EObject aObject : allNodes) {\r\n+      if (aObject instanceof DNodeContainer) {\r\n+        if (((DNodeContainer) aObject).getTarget() instanceof DAnnotation) {\r\n+          if (((DAnnotation) ((DNodeContainer) aObject).getTarget()).getSource().equals(TITLE_BLOCK)) {\r\n+            DDiagramElement aNode = ((DDiagramElement) aObject);\r\n+            EObject nodeTarget = aNode.getTarget();\r\n+            if (nodeTarget instanceof DAnnotation && aNode instanceof DDiagramElement) {\r\n+              visibleElements.put((DAnnotation) nodeTarget, aNode);\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (Entry<DAnnotation, DDiagramElement> me : visibleElements.entrySet()) {\r\n+      if (!selectedTitleBlocks.contains(me.getKey())) {\r\n+        EObject container = me.getValue().eContainer();\r\n+        if (container instanceof DSemanticDiagram) {\r\n+          DAnnotation annotation = ((DAnnotation) (me.getValue().getTarget()));\r\n+          if (isDiagram) {\r\n+            if (isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          } else {\r\n+            if (!isDiagramTitleBlock(annotation)) {\r\n+              annotation.getDetails().put(VISIBILITY, FALSE);\r\n+              DiagramServices.getDiagramServices().removeAbstractDNodeView((DNodeContainer) me.getValue());\r\n+            }\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    for (DAnnotation aTitleBlock : selectedTitleBlocks) {\r\n+      if (!visibleElements.containsKey(aTitleBlock)) {\r\n+\r\n+        createTitleBlockView(context, aTitleBlock, diagram);\r\n+      }\r\n+    }\r\n+    return context;\r\n+  }\r\n+\r\n+  private AbstractDNode createTitleBlockView(EObject context, DAnnotation titleBlock, DDiagram diagram) {\r\n+    String mappingName = IMappingNameConstants.CDB_TITLE_BLOCK;\r\n+    NodeMapping mapping = DiagramServices.getDiagramServices().getNodeMapping(diagram, mappingName);\r\n+    if (context instanceof DNodeList) {\r\n+      if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+        titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+      }\r\n+      return DiagramServices.getDiagramServices().createDNodeListElement(mapping, titleBlock,\r\n+          (DragAndDropTarget) context, diagram);\r\n+    }\r\n+    if (null != titleBlock.getDetails().get(VISIBILITY)) {\r\n+      titleBlock.getDetails().put(VISIBILITY, TRUE);\r\n+    }\r\n+    return DiagramServices.getDiagramServices().createNode(mapping, titleBlock, (DragAndDropTarget) context, diagram);\r\n+  }\r\n+\r\n+  public boolean isUniqueDiagramTitleBlock(EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .filter(x -> x.getReferences().size() == 2).collect(Collectors.toList());\r\n+    }\r\n+    return (result.size() == 0);\r\n+  }\r\n+\r\n+  public boolean isUniqueElementTitleBlock(Object elementView, EObject diagram) {\r\n+    Collection<DAnnotation> result = new ArrayList<>();\r\n+    if ((diagram instanceof DRepresentation)) {\r\n+      DRepresentation representation = (DRepresentation) diagram;\r\n+      result = representation.getEAnnotations().stream().filter(x -> x.getSource().equals(TITLE_BLOCK))\r\n+          .collect(Collectors.toList());\r\n+      for (DAnnotation annotation : result) {\r\n+        for (EObject reference : annotation.getReferences()) {\r\n+          if (reference == ((DNodeList) elementView).getTarget()) {\r\n+            return false;\r\n+          }\r\n+        }\r\n+      }\r\n+    }\r\n+    return true;\r\n+  }\r\n+\r\n+  public static Image getImage(Object object) {\r\n+    DAnnotation annotation = (DAnnotation) object;\r\n+    // if is diag ann\r\n+    String imagePath = \"/icons/full/obj16/TitleBlock_16.png\";\r\n+    URL url = FileLocator.find(SiriusViewActivator.getInstance().getBundle(), new Path(imagePath), null);\r\n+\r\n+    // org.polarsys.capella.core.sirius.analysis.activator.SiriusViewActivator.getPlugin()\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEwNjIxNw=="}, "originalCommit": {"oid": "0d423369ed4d96990d3c1b3c928a3f973eedf228"}, "originalPosition": 511}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzcwNzAyOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.properties/src/org/polarsys/capella/core/ui/properties/providers/CapellaTransfertViewerLabelProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxNTozM1rOFwg-kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMzo1OTo1OVrOFxuTLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNjI3Mg==", "bodyText": "Could you check that this should apply to only DAnnotations that represent title blocks. Your code applies to all DAnnotation which is not what we want.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r386416272", "createdAt": "2020-03-02T14:15:33Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.properties/src/org/polarsys/capella/core/ui/properties/providers/CapellaTransfertViewerLabelProvider.java", "diffHunk": "@@ -39,25 +46,32 @@\n import org.polarsys.capella.core.model.handler.helpers.CapellaProjectHelper.TriStateBoolean;\n import org.polarsys.capella.core.model.helpers.ComponentExchangeExt;\n import org.polarsys.capella.core.ui.properties.CapellaUIPropertiesPlugin;\n+import org.polarsys.capella.core.ui.resources.CapellaUIResourcesPlugin;\n \n public class CapellaTransfertViewerLabelProvider extends DataLabelProvider {\n \n   private static String PATTERN1 = \" [{0} -> {1}]{2}\"; //$NON-NLS-1$\n   private static String UNAMED = \"<unnamed>\"; //$NON-NLS-1$\n-  \n+\n   private boolean disableLabelComputation = CapellaUIPropertiesPlugin.getDefault().isDisableLabelComputation();\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public Image getImage(Object object) {\n-    if (object instanceof DView) { //Sirius-2822\n+    if (object instanceof DView) { // Sirius-2822\n       Viewpoint viewpoint = ((DView) object).getViewpoint();\n       if (viewpoint != null) {\n         return getImage(viewpoint);\n       }\n     }\n+    if (object instanceof DAnnotation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c78080c28b26e17c8601c596bacbc566e038b00"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4MzExNg==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r387683116", "createdAt": "2020-03-04T13:59:59Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.ui.properties/src/org/polarsys/capella/core/ui/properties/providers/CapellaTransfertViewerLabelProvider.java", "diffHunk": "@@ -39,25 +46,32 @@\n import org.polarsys.capella.core.model.handler.helpers.CapellaProjectHelper.TriStateBoolean;\n import org.polarsys.capella.core.model.helpers.ComponentExchangeExt;\n import org.polarsys.capella.core.ui.properties.CapellaUIPropertiesPlugin;\n+import org.polarsys.capella.core.ui.resources.CapellaUIResourcesPlugin;\n \n public class CapellaTransfertViewerLabelProvider extends DataLabelProvider {\n \n   private static String PATTERN1 = \" [{0} -> {1}]{2}\"; //$NON-NLS-1$\n   private static String UNAMED = \"<unnamed>\"; //$NON-NLS-1$\n-  \n+\n   private boolean disableLabelComputation = CapellaUIPropertiesPlugin.getDefault().isDisableLabelComputation();\n \n   /**\n    * {@inheritDoc}\n    */\n   @Override\n   public Image getImage(Object object) {\n-    if (object instanceof DView) { //Sirius-2822\n+    if (object instanceof DView) { // Sirius-2822\n       Viewpoint viewpoint = ((DView) object).getViewpoint();\n       if (viewpoint != null) {\n         return getImage(viewpoint);\n       }\n     }\n+    if (object instanceof DAnnotation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNjI3Mg=="}, "originalCommit": {"oid": "2c78080c28b26e17c8601c596bacbc566e038b00"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzcxMTI4OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.properties/src/org/polarsys/capella/core/ui/properties/providers/CapellaTransfertViewerLabelProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNDoxNjozM1rOFwhA9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDowMDowOFrOFxuTmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNjg4NQ==", "bodyText": "Same remark as above.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r386416885", "createdAt": "2020-03-02T14:16:33Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.properties/src/org/polarsys/capella/core/ui/properties/providers/CapellaTransfertViewerLabelProvider.java", "diffHunk": "@@ -150,6 +163,18 @@ private String doGetText(Object object) {\n         return viewpoint.getName();\n       }\n \n+    } else if (object instanceof DAnnotation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c78080c28b26e17c8601c596bacbc566e038b00"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4MzIyNw==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/57#discussion_r387683227", "createdAt": "2020-03-04T14:00:08Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.ui.properties/src/org/polarsys/capella/core/ui/properties/providers/CapellaTransfertViewerLabelProvider.java", "diffHunk": "@@ -150,6 +163,18 @@ private String doGetText(Object object) {\n         return viewpoint.getName();\n       }\n \n+    } else if (object instanceof DAnnotation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQxNjg4NQ=="}, "originalCommit": {"oid": "2c78080c28b26e17c8601c596bacbc566e038b00"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4356, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}