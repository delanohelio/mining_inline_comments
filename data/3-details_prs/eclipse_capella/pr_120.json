{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MzkyNzAy", "number": 120, "title": "[560828] [CommandLine] Add some evolutions for command line argument", "bodyText": "management\nChange-Id: I4eb0e556aae4a9c90cb069fa26b3d959e984d6fe\nSigned-off-by: Tu Ton minhtutonthat@gmail.com", "createdAt": "2020-03-05T16:59:52Z", "url": "https://github.com/eclipse/capella/pull/120", "merged": true, "mergeCommit": {"oid": "2b9e8d80498d78dcd4b1bc0b360890a3e80e20bf"}, "closed": true, "closedAt": "2020-03-11T08:50:52Z", "author": {"login": "minhtutonthat"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKudaWgH2gAyMzg0MzkyNzAyOjJmODRiYjRiNjNjZDU3YjkyODlmMzI3OGQ3ZGU4MWZjMWRjMWVkNGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMRxbggFqTM3MTkwODc5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2f84bb4b63cd57b9289f3278d7de81fc1dc1ed4b", "author": {"user": {"login": "minhtutonthat", "name": "Minh Tu Ton That"}}, "url": "https://github.com/eclipse/capella/commit/2f84bb4b63cd57b9289f3278d7de81fc1dc1ed4b", "committedDate": "2020-03-05T16:53:05Z", "message": "[560828] [CommandLine] Add some evolutions for command line argument\nmanagement\n\nChange-Id: I4eb0e556aae4a9c90cb069fa26b3d959e984d6fe\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff7bc04b92f853ccd0056bfa3b257f924da398c7", "author": {"user": {"login": "minhtutonthat", "name": "Minh Tu Ton That"}}, "url": "https://github.com/eclipse/capella/commit/ff7bc04b92f853ccd0056bfa3b257f924da398c7", "committedDate": "2020-03-06T09:26:12Z", "message": "[560828] [CommandLine] Add some evolutions for command line argument\nmanagement\n\n- Fix failed test CommandLineFolderMigrationTest. The test failed\nbecause there are test models remaining in the workspace.\n\nChange-Id: I9e5064925cdafa64c05371fada356665319da4d4\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6184f9b2bfa9dbb1b102323e00b18302d8d61cad", "author": {"user": {"login": "minhtutonthat", "name": "Minh Tu Ton That"}}, "url": "https://github.com/eclipse/capella/commit/6184f9b2bfa9dbb1b102323e00b18302d8d61cad", "committedDate": "2020-03-06T12:59:18Z", "message": "[560828] [CommandLine] Add some evolutions for command line argument\nmanagement\n\n- Bugfix: Command line help cannot read jar content\n\nChange-Id: I0dc0ece24f3f713851dfc47eb62fc8c5582f7537\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0d6756abf560505d98a7d838a40ccc6ae8da372", "author": {"user": {"login": "minhtutonthat", "name": "Minh Tu Ton That"}}, "url": "https://github.com/eclipse/capella/commit/a0d6756abf560505d98a7d838a40ccc6ae8da372", "committedDate": "2020-03-09T16:11:48Z", "message": "[560828] [CommandLine] Add some evolutions for command line argument\nmanagement\n\n- Make -exportZip becomes generic for all commands\n- Add -backup argument for Migration command line\n- Updat docs\n\nChange-Id: I713421d37c37980b3b25e09b2d06be23dc4d7808\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxODE1Mjc0", "url": "https://github.com/eclipse/capella/pull/120#pullrequestreview-371815274", "createdAt": "2020-03-10T10:02:15Z", "commit": {"oid": "a0d6756abf560505d98a7d838a40ccc6ae8da372"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDowMjoxNlrOF0IQRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjowMDoyMlrOF0L33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNTUxMA==", "bodyText": "This can be removed. The doc in already present in the overridden method.", "url": "https://github.com/eclipse/capella/pull/120#discussion_r390205510", "createdAt": "2020-03-10T10:02:16Z", "author": {"login": "sandupostaru"}, "path": "core/plugins/org.polarsys.capella.core.commandline.core/src/org/polarsys/capella/core/commandline/core/DefaultCommandLine.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.commandline.core;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IWorkspace;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.FileLocator;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.equinox.app.IApplicationContext;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.FrameworkUtil;\n+import org.polarsys.capella.common.tools.report.config.registry.ReportManagerRegistry;\n+import org.polarsys.capella.common.tools.report.util.IReportManagerDefaultComponents;\n+import org.polarsys.capella.core.model.handler.command.CapellaResourceHelper;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+public class DefaultCommandLine extends AbstractCommandLine {\n+  public static String ALL_ARGUMENT = \"/all\";\n+\n+  public DefaultCommandLine() {\n+    argHelper = CommandLineArgumentHelper.getInstance();\n+    logger = ReportManagerRegistry.getInstance().subscribe(IReportManagerDefaultComponents.DEFAULT);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * @throws CommandLineException\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d6756abf560505d98a7d838a40ccc6ae8da372"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxNDE5OQ==", "bodyText": "Extract a variable containing\n Arrays.stream(ResourcesPlugin.getWorkspace().getRoot().getProjects())\nbefore the for loop\nThis can be further optimized, but considering the size of the projects is small, I think it is ok for now.", "url": "https://github.com/eclipse/capella/pull/120#discussion_r390214199", "createdAt": "2020-03-10T10:18:02Z", "author": {"login": "sandupostaru"}, "path": "core/plugins/org.polarsys.capella.core.commandline.core/src/org/polarsys/capella/core/commandline/core/DefaultCommandLine.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.commandline.core;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IWorkspace;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.FileLocator;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.equinox.app.IApplicationContext;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.FrameworkUtil;\n+import org.polarsys.capella.common.tools.report.config.registry.ReportManagerRegistry;\n+import org.polarsys.capella.common.tools.report.util.IReportManagerDefaultComponents;\n+import org.polarsys.capella.core.model.handler.command.CapellaResourceHelper;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+public class DefaultCommandLine extends AbstractCommandLine {\n+  public static String ALL_ARGUMENT = \"/all\";\n+\n+  public DefaultCommandLine() {\n+    argHelper = CommandLineArgumentHelper.getInstance();\n+    logger = ReportManagerRegistry.getInstance().subscribe(IReportManagerDefaultComponents.DEFAULT);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * @throws CommandLineException\n+   */\n+  @Override\n+  public void prepare(IApplicationContext context) throws CommandLineException {\n+    // Import projects\n+    importProjects();\n+    // Create output folder\n+    getOrCreateOutputFolder();\n+  }\n+\n+  protected void importProjects() throws CommandLineException {\n+    String projectsToImport = argHelper.getImportProjects();\n+    if (projectsToImport != null) {\n+      try {\n+        importProjects(toList(projectsToImport));\n+      } catch (CoreException exception) {\n+        throw new CommandLineException(exception.getMessage());\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void postExecute(IApplicationContext context) throws CommandLineException {\n+    exportZips();\n+  }\n+\n+  protected void exportZips() throws CommandLineException {\n+    String projectsToExportZip = argHelper.getExportZips();\n+    if (projectsToExportZip != null) {\n+      if (projectsToExportZip.equals(ALL_ARGUMENT)) {\n+        exportProjectZips(Arrays.stream(ResourcesPlugin.getWorkspace().getRoot().getProjects())\n+            .map(iProject -> iProject.getName()).collect(Collectors.toList()));\n+      } else {\n+        exportProjectZips(toList(projectsToExportZip));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * @param projectsToExportZip\n+   * @throws CoreException\n+   */\n+  protected void exportProjectZips(List<String> projectsToExportZip) throws CommandLineException {\n+    IFolder outputFolder = getOrCreateOutputFolder();\n+    if (outputFolder == null) {\n+      logger.error(Messages.export_zip_no_ouputfolder);\n+    } else {\n+      for (String project : projectsToExportZip) {\n+        Optional<IProject> anyIProject = Arrays.stream(ResourcesPlugin.getWorkspace().getRoot().getProjects())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d6756abf560505d98a7d838a40ccc6ae8da372"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxODExOA==", "bodyText": "Can just be:\n if (!argHelper.getInputs().equals(ALL_ARGUMENT))", "url": "https://github.com/eclipse/capella/pull/120#discussion_r390218118", "createdAt": "2020-03-10T10:25:19Z", "author": {"login": "sandupostaru"}, "path": "core/plugins/org.polarsys.capella.core.commandline.core/src/org/polarsys/capella/core/commandline/core/DefaultCommandLine.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.commandline.core;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IWorkspace;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.FileLocator;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.equinox.app.IApplicationContext;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.FrameworkUtil;\n+import org.polarsys.capella.common.tools.report.config.registry.ReportManagerRegistry;\n+import org.polarsys.capella.common.tools.report.util.IReportManagerDefaultComponents;\n+import org.polarsys.capella.core.model.handler.command.CapellaResourceHelper;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+public class DefaultCommandLine extends AbstractCommandLine {\n+  public static String ALL_ARGUMENT = \"/all\";\n+\n+  public DefaultCommandLine() {\n+    argHelper = CommandLineArgumentHelper.getInstance();\n+    logger = ReportManagerRegistry.getInstance().subscribe(IReportManagerDefaultComponents.DEFAULT);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * @throws CommandLineException\n+   */\n+  @Override\n+  public void prepare(IApplicationContext context) throws CommandLineException {\n+    // Import projects\n+    importProjects();\n+    // Create output folder\n+    getOrCreateOutputFolder();\n+  }\n+\n+  protected void importProjects() throws CommandLineException {\n+    String projectsToImport = argHelper.getImportProjects();\n+    if (projectsToImport != null) {\n+      try {\n+        importProjects(toList(projectsToImport));\n+      } catch (CoreException exception) {\n+        throw new CommandLineException(exception.getMessage());\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void postExecute(IApplicationContext context) throws CommandLineException {\n+    exportZips();\n+  }\n+\n+  protected void exportZips() throws CommandLineException {\n+    String projectsToExportZip = argHelper.getExportZips();\n+    if (projectsToExportZip != null) {\n+      if (projectsToExportZip.equals(ALL_ARGUMENT)) {\n+        exportProjectZips(Arrays.stream(ResourcesPlugin.getWorkspace().getRoot().getProjects())\n+            .map(iProject -> iProject.getName()).collect(Collectors.toList()));\n+      } else {\n+        exportProjectZips(toList(projectsToExportZip));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * @param projectsToExportZip\n+   * @throws CoreException\n+   */\n+  protected void exportProjectZips(List<String> projectsToExportZip) throws CommandLineException {\n+    IFolder outputFolder = getOrCreateOutputFolder();\n+    if (outputFolder == null) {\n+      logger.error(Messages.export_zip_no_ouputfolder);\n+    } else {\n+      for (String project : projectsToExportZip) {\n+        Optional<IProject> anyIProject = Arrays.stream(ResourcesPlugin.getWorkspace().getRoot().getProjects())\n+            .filter(iProject -> iProject.getName().equals(project)).findAny();\n+        if (!anyIProject.isPresent()) {\n+          logger.error(Messages.export_zip_not_found + project);\n+        } else {\n+          IWorkspace workspace = ResourcesPlugin.getWorkspace();\n+          IFile file = outputFolder.getFile(project + \".zip\");\n+          IProject newProject = workspace.getRoot().getProject(project);\n+          WorkbenchHelper.exportZipFile(newProject, file);\n+        }\n+      }\n+    }\n+  }\n+\n+  protected void checkProject(IProject project) throws CommandLineException {\n+    if (!project.exists()) {\n+      logError(Messages.project + project.getName() + Messages.not_exist);\n+    } else {\n+      try {\n+        project.open(new NullProgressMonitor());\n+      } catch (CoreException exception) {\n+        logError(Messages.unable_open_project + project.getName());\n+      }\n+      List<IFile> melodymodellerFiles = getCapellamodellerFiles(project);\n+      // check that all melodymodeller files are compliant with current Capella version\n+      for (IFile modeller : melodymodellerFiles) {\n+        compliancyCheck(modeller);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Check that inputs arguments are valid\n+   * \n+   * @throws CommandLineException\n+   */\n+  protected void checkInputs() throws CommandLineException {\n+    if (argHelper.getInputs() == null) {\n+      logger.error(Messages.inputs_mandatory);\n+    } else if (argHelper.getInputs().equals(ALL_ARGUMENT)) {\n+      // /all is accepted as argument\n+    } else {\n+      List<String> inputs = toList(argHelper.getInputs());\n+      for (String input : inputs) {\n+        if (input.endsWith(CapellaResourceHelper.AIRD_FILE_EXTENSION)) {\n+          checkInputAirdFile(input);\n+        } else {\n+          checkInputProject(input);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d6756abf560505d98a7d838a40ccc6ae8da372"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMDI5NQ==", "bodyText": "Question: Is it necessary to create the output folder as a project and not only as a folder using standard java API?", "url": "https://github.com/eclipse/capella/pull/120#discussion_r390220295", "createdAt": "2020-03-10T10:29:09Z", "author": {"login": "sandupostaru"}, "path": "core/plugins/org.polarsys.capella.core.commandline.core/src/org/polarsys/capella/core/commandline/core/DefaultCommandLine.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.commandline.core;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IWorkspace;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.FileLocator;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.equinox.app.IApplicationContext;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.FrameworkUtil;\n+import org.polarsys.capella.common.tools.report.config.registry.ReportManagerRegistry;\n+import org.polarsys.capella.common.tools.report.util.IReportManagerDefaultComponents;\n+import org.polarsys.capella.core.model.handler.command.CapellaResourceHelper;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+public class DefaultCommandLine extends AbstractCommandLine {\n+  public static String ALL_ARGUMENT = \"/all\";\n+\n+  public DefaultCommandLine() {\n+    argHelper = CommandLineArgumentHelper.getInstance();\n+    logger = ReportManagerRegistry.getInstance().subscribe(IReportManagerDefaultComponents.DEFAULT);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * @throws CommandLineException\n+   */\n+  @Override\n+  public void prepare(IApplicationContext context) throws CommandLineException {\n+    // Import projects\n+    importProjects();\n+    // Create output folder\n+    getOrCreateOutputFolder();\n+  }\n+\n+  protected void importProjects() throws CommandLineException {\n+    String projectsToImport = argHelper.getImportProjects();\n+    if (projectsToImport != null) {\n+      try {\n+        importProjects(toList(projectsToImport));\n+      } catch (CoreException exception) {\n+        throw new CommandLineException(exception.getMessage());\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void postExecute(IApplicationContext context) throws CommandLineException {\n+    exportZips();\n+  }\n+\n+  protected void exportZips() throws CommandLineException {\n+    String projectsToExportZip = argHelper.getExportZips();\n+    if (projectsToExportZip != null) {\n+      if (projectsToExportZip.equals(ALL_ARGUMENT)) {\n+        exportProjectZips(Arrays.stream(ResourcesPlugin.getWorkspace().getRoot().getProjects())\n+            .map(iProject -> iProject.getName()).collect(Collectors.toList()));\n+      } else {\n+        exportProjectZips(toList(projectsToExportZip));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * @param projectsToExportZip\n+   * @throws CoreException\n+   */\n+  protected void exportProjectZips(List<String> projectsToExportZip) throws CommandLineException {\n+    IFolder outputFolder = getOrCreateOutputFolder();\n+    if (outputFolder == null) {\n+      logger.error(Messages.export_zip_no_ouputfolder);\n+    } else {\n+      for (String project : projectsToExportZip) {\n+        Optional<IProject> anyIProject = Arrays.stream(ResourcesPlugin.getWorkspace().getRoot().getProjects())\n+            .filter(iProject -> iProject.getName().equals(project)).findAny();\n+        if (!anyIProject.isPresent()) {\n+          logger.error(Messages.export_zip_not_found + project);\n+        } else {\n+          IWorkspace workspace = ResourcesPlugin.getWorkspace();\n+          IFile file = outputFolder.getFile(project + \".zip\");\n+          IProject newProject = workspace.getRoot().getProject(project);\n+          WorkbenchHelper.exportZipFile(newProject, file);\n+        }\n+      }\n+    }\n+  }\n+\n+  protected void checkProject(IProject project) throws CommandLineException {\n+    if (!project.exists()) {\n+      logError(Messages.project + project.getName() + Messages.not_exist);\n+    } else {\n+      try {\n+        project.open(new NullProgressMonitor());\n+      } catch (CoreException exception) {\n+        logError(Messages.unable_open_project + project.getName());\n+      }\n+      List<IFile> melodymodellerFiles = getCapellamodellerFiles(project);\n+      // check that all melodymodeller files are compliant with current Capella version\n+      for (IFile modeller : melodymodellerFiles) {\n+        compliancyCheck(modeller);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Check that inputs arguments are valid\n+   * \n+   * @throws CommandLineException\n+   */\n+  protected void checkInputs() throws CommandLineException {\n+    if (argHelper.getInputs() == null) {\n+      logger.error(Messages.inputs_mandatory);\n+    } else if (argHelper.getInputs().equals(ALL_ARGUMENT)) {\n+      // /all is accepted as argument\n+    } else {\n+      List<String> inputs = toList(argHelper.getInputs());\n+      for (String input : inputs) {\n+        if (input.endsWith(CapellaResourceHelper.AIRD_FILE_EXTENSION)) {\n+          checkInputAirdFile(input);\n+        } else {\n+          checkInputProject(input);\n+        }\n+      }\n+    }\n+  }\n+\n+  protected void checkInputProject(String projectPath) throws CommandLineException {\n+    String projectName = getProjectNameFromPath(projectPath);\n+    IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);\n+    checkProject(project);\n+  }\n+\n+  protected void checkInputAirdFile(String airdPath) throws CommandLineException {\n+    String projectName = getProjectNameFromPath(airdPath);\n+    IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);\n+    checkProject(project);\n+    IFile file = project.getFile(getRelativeFilePath(airdPath));\n+    if (!file.exists()) {\n+      String message = Messages.aird + airdPath + Messages.not_exist;\n+      logError(message);\n+      throw new CommandLineException(message);\n+    }\n+  }\n+\n+  /**\n+   * @param outputFolder\n+   * @throws CommandLineException\n+   */\n+  protected IFolder getOrCreateOutputFolder() throws CommandLineException {\n+    String outputFolder = argHelper.getOutputFolder();\n+    IFolder folder = null;\n+    if (outputFolder != null) {\n+      folder = ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(outputFolder));\n+\n+      try {\n+        IProject project = folder.getProject();\n+        if (!project.exists()) {\n+          project.create(new NullProgressMonitor());\n+        }\n+\n+        if (!project.isOpen()) {\n+          project.open(new NullProgressMonitor());\n+        }\n+        if (!folder.exists()) {\n+          folder.create(true, true, new NullProgressMonitor());\n+        } else {\n+          logInfo(outputFolder + Messages.already_exist);\n+        }\n+\n+      } catch (CoreException exception) {\n+        StringBuilder message = new StringBuilder(Messages.cannot_create_folder);\n+        logger.error(message.toString(), exception);\n+        throw new CommandLineException(message.toString());\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d6756abf560505d98a7d838a40ccc6ae8da372"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMTIwNQ==", "bodyText": "Cool \ud83d\udc4d", "url": "https://github.com/eclipse/capella/pull/120#discussion_r390221205", "createdAt": "2020-03-10T10:30:53Z", "author": {"login": "sandupostaru"}, "path": "core/plugins/org.polarsys.capella.core.commandline.core/src/org/polarsys/capella/core/commandline/core/DefaultCommandLine.java", "diffHunk": "@@ -0,0 +1,384 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *\n+ * Contributors:\n+ *    Thales - initial API and implementation\n+ *******************************************************************************/\n+package org.polarsys.capella.core.commandline.core;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+\n+import org.eclipse.core.resources.IFile;\n+import org.eclipse.core.resources.IFolder;\n+import org.eclipse.core.resources.IProject;\n+import org.eclipse.core.resources.IWorkspace;\n+import org.eclipse.core.resources.ResourcesPlugin;\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.FileLocator;\n+import org.eclipse.core.runtime.NullProgressMonitor;\n+import org.eclipse.core.runtime.Path;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.equinox.app.IApplicationContext;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.FrameworkUtil;\n+import org.polarsys.capella.common.tools.report.config.registry.ReportManagerRegistry;\n+import org.polarsys.capella.common.tools.report.util.IReportManagerDefaultComponents;\n+import org.polarsys.capella.core.model.handler.command.CapellaResourceHelper;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+\n+public class DefaultCommandLine extends AbstractCommandLine {\n+  public static String ALL_ARGUMENT = \"/all\";\n+\n+  public DefaultCommandLine() {\n+    argHelper = CommandLineArgumentHelper.getInstance();\n+    logger = ReportManagerRegistry.getInstance().subscribe(IReportManagerDefaultComponents.DEFAULT);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * @throws CommandLineException\n+   */\n+  @Override\n+  public void prepare(IApplicationContext context) throws CommandLineException {\n+    // Import projects\n+    importProjects();\n+    // Create output folder\n+    getOrCreateOutputFolder();\n+  }\n+\n+  protected void importProjects() throws CommandLineException {\n+    String projectsToImport = argHelper.getImportProjects();\n+    if (projectsToImport != null) {\n+      try {\n+        importProjects(toList(projectsToImport));\n+      } catch (CoreException exception) {\n+        throw new CommandLineException(exception.getMessage());\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void postExecute(IApplicationContext context) throws CommandLineException {\n+    exportZips();\n+  }\n+\n+  protected void exportZips() throws CommandLineException {\n+    String projectsToExportZip = argHelper.getExportZips();\n+    if (projectsToExportZip != null) {\n+      if (projectsToExportZip.equals(ALL_ARGUMENT)) {\n+        exportProjectZips(Arrays.stream(ResourcesPlugin.getWorkspace().getRoot().getProjects())\n+            .map(iProject -> iProject.getName()).collect(Collectors.toList()));\n+      } else {\n+        exportProjectZips(toList(projectsToExportZip));\n+      }\n+    }\n+  }\n+\n+  /**\n+   * @param projectsToExportZip\n+   * @throws CoreException\n+   */\n+  protected void exportProjectZips(List<String> projectsToExportZip) throws CommandLineException {\n+    IFolder outputFolder = getOrCreateOutputFolder();\n+    if (outputFolder == null) {\n+      logger.error(Messages.export_zip_no_ouputfolder);\n+    } else {\n+      for (String project : projectsToExportZip) {\n+        Optional<IProject> anyIProject = Arrays.stream(ResourcesPlugin.getWorkspace().getRoot().getProjects())\n+            .filter(iProject -> iProject.getName().equals(project)).findAny();\n+        if (!anyIProject.isPresent()) {\n+          logger.error(Messages.export_zip_not_found + project);\n+        } else {\n+          IWorkspace workspace = ResourcesPlugin.getWorkspace();\n+          IFile file = outputFolder.getFile(project + \".zip\");\n+          IProject newProject = workspace.getRoot().getProject(project);\n+          WorkbenchHelper.exportZipFile(newProject, file);\n+        }\n+      }\n+    }\n+  }\n+\n+  protected void checkProject(IProject project) throws CommandLineException {\n+    if (!project.exists()) {\n+      logError(Messages.project + project.getName() + Messages.not_exist);\n+    } else {\n+      try {\n+        project.open(new NullProgressMonitor());\n+      } catch (CoreException exception) {\n+        logError(Messages.unable_open_project + project.getName());\n+      }\n+      List<IFile> melodymodellerFiles = getCapellamodellerFiles(project);\n+      // check that all melodymodeller files are compliant with current Capella version\n+      for (IFile modeller : melodymodellerFiles) {\n+        compliancyCheck(modeller);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Check that inputs arguments are valid\n+   * \n+   * @throws CommandLineException\n+   */\n+  protected void checkInputs() throws CommandLineException {\n+    if (argHelper.getInputs() == null) {\n+      logger.error(Messages.inputs_mandatory);\n+    } else if (argHelper.getInputs().equals(ALL_ARGUMENT)) {\n+      // /all is accepted as argument\n+    } else {\n+      List<String> inputs = toList(argHelper.getInputs());\n+      for (String input : inputs) {\n+        if (input.endsWith(CapellaResourceHelper.AIRD_FILE_EXTENSION)) {\n+          checkInputAirdFile(input);\n+        } else {\n+          checkInputProject(input);\n+        }\n+      }\n+    }\n+  }\n+\n+  protected void checkInputProject(String projectPath) throws CommandLineException {\n+    String projectName = getProjectNameFromPath(projectPath);\n+    IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);\n+    checkProject(project);\n+  }\n+\n+  protected void checkInputAirdFile(String airdPath) throws CommandLineException {\n+    String projectName = getProjectNameFromPath(airdPath);\n+    IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);\n+    checkProject(project);\n+    IFile file = project.getFile(getRelativeFilePath(airdPath));\n+    if (!file.exists()) {\n+      String message = Messages.aird + airdPath + Messages.not_exist;\n+      logError(message);\n+      throw new CommandLineException(message);\n+    }\n+  }\n+\n+  /**\n+   * @param outputFolder\n+   * @throws CommandLineException\n+   */\n+  protected IFolder getOrCreateOutputFolder() throws CommandLineException {\n+    String outputFolder = argHelper.getOutputFolder();\n+    IFolder folder = null;\n+    if (outputFolder != null) {\n+      folder = ResourcesPlugin.getWorkspace().getRoot().getFolder(new Path(outputFolder));\n+\n+      try {\n+        IProject project = folder.getProject();\n+        if (!project.exists()) {\n+          project.create(new NullProgressMonitor());\n+        }\n+\n+        if (!project.isOpen()) {\n+          project.open(new NullProgressMonitor());\n+        }\n+        if (!folder.exists()) {\n+          folder.create(true, true, new NullProgressMonitor());\n+        } else {\n+          logInfo(outputFolder + Messages.already_exist);\n+        }\n+\n+      } catch (CoreException exception) {\n+        StringBuilder message = new StringBuilder(Messages.cannot_create_folder);\n+        logger.error(message.toString(), exception);\n+        throw new CommandLineException(message.toString());\n+      }\n+    }\n+\n+    return folder;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public void printHelp() {\n+    printHelp(Collections.emptyList());\n+  }\n+  \n+  protected void printHelp(List<String> hiddenArguments) {\n+    System.out.println(\"*** Applicable arguments for command line***\"); //$NON-NLS-1$\n+    printArgumentsFromTable(\"commonParameters\", true, hiddenArguments);\n+  }\n+\n+  protected void printArgumentsFromTable(String tableId, boolean printTitle, List<String> hiddenArguments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d6756abf560505d98a7d838a40ccc6ae8da372"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyNTU1MA==", "bodyText": "\u26a0\ufe0f\n     this.backUpModel = backupModel;", "url": "https://github.com/eclipse/capella/pull/120#discussion_r390225550", "createdAt": "2020-03-10T10:39:04Z", "author": {"login": "sandupostaru"}, "path": "core/plugins/org.polarsys.capella.core.data.migration/src/org/polarsys/capella/core/data/migration/context/MigrationContext.java", "diffHunk": "@@ -66,6 +68,14 @@ public void setSkipConfirmation(boolean skipConfirmation) {\n     _skipConfirmation = skipConfirmation;\n   }\n \n+  public boolean isBackupModel() {\n+    return backUpModel;\n+  }\n+\n+  public void setBackupModel(boolean backupModel) {\n+    backUpModel = backupModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d6756abf560505d98a7d838a40ccc6ae8da372"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI2NDc5Ng==", "bodyText": "should be eclipsec.exe instead of capella.exe for all references", "url": "https://github.com/eclipse/capella/pull/120#discussion_r390264796", "createdAt": "2020-03-10T12:00:22Z", "author": {"login": "sandupostaru"}, "path": "doc/plugins/org.polarsys.capella.commandline.doc/html/19. Command Line Support/19.1. Core Mechanism and Applications.html", "diffHunk": "@@ -144,9 +166,8 @@ <h3 id=\"Model_Validation\">Model Validation</h3>\n &lt;CapellaInstallationPath&gt;/capella.exe -nosplash", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0d6756abf560505d98a7d838a40ccc6ae8da372"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53f2a461dc2c855e887098fd0eb59f8998f1ca1f", "author": {"user": {"login": "minhtutonthat", "name": "Minh Tu Ton That"}}, "url": "https://github.com/eclipse/capella/commit/53f2a461dc2c855e887098fd0eb59f8998f1ca1f", "committedDate": "2020-03-10T12:27:01Z", "message": "[560828] [CommandLine] Add some evolutions for command line argument\nmanagement\n\nChange-Id: I3adb7a57986777735dbec1da4fd204ca08593ecc\nSigned-off-by: Tu Ton <minhtutonthat@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTA4Nzkw", "url": "https://github.com/eclipse/capella/pull/120#pullrequestreview-371908790", "createdAt": "2020-03-10T12:32:37Z", "commit": {"oid": "53f2a461dc2c855e887098fd0eb59f8998f1ca1f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjozMjozN1rOF0Mz9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjozMjozN1rOF0Mz9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MDE4Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/eclipse/capella/pull/120#discussion_r390280182", "createdAt": "2020-03-10T12:32:37Z", "author": {"login": "sandupostaru"}, "path": "core/plugins/org.polarsys.capella.core.commandline.core/src/org/polarsys/capella/core/commandline/core/DefaultCommandLine.java", "diffHunk": "@@ -113,9 +108,10 @@ protected void exportProjectZips(List<String> projectsToExportZip) throws Comman\n     if (outputFolder == null) {\n       logger.error(Messages.export_zip_no_ouputfolder);\n     } else {\n+      IProject[] iProjects = ResourcesPlugin.getWorkspace().getRoot().getProjects();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53f2a461dc2c855e887098fd0eb59f8998f1ca1f"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1406, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}