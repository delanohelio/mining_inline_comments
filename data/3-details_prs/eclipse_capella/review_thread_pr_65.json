{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzkwNTYx", "number": 65, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoyNToxNVrODdarQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoxNjoxM1rODkqtNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTcyMzUzOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/META-INF/MANIFEST.MF", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzoyNToxNVrOFmAe_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMTozMToyNlrOFmX9sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5ODE0MQ==", "bodyText": "Is there a specific reason to use Import-Package instead of Require-Bundle?", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375398141", "createdAt": "2020-02-05T17:25:15Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/META-INF/MANIFEST.MF", "diffHunk": "@@ -3,18 +3,18 @@ Bundle-ManifestVersion: 2\n Bundle-Name: %pluginName\r\n Bundle-SymbolicName: org.polarsys.capella.core.ui.search;singleton:=true\r\n Bundle-Version: 1.4.0.qualifier\r\n-Bundle-Activator: org.polarsys.capella.core.ui.search.CapellaUISearchPlugin\r\n+Bundle-Activator: org.polarsys.capella.core.ui.search.Activator\r\n Bundle-Vendor: %providerName\r\n-Require-Bundle: com.google.guava,\r\n- org.polarsys.capella.core.ui.toolkit,\r\n- org.polarsys.capella.core.platform.sirius.ui.navigator,\r\n- org.polarsys.capella.core.ui.semantic.browser,\r\n- org.polarsys.capella.common.tools.report.appenders.reportlogview,\r\n- org.polarsys.capella.common.re.gen,\r\n- org.eclipse.sirius,\r\n- org.eclipse.core.expressions,\r\n- org.eclipse.ui.ide\r\n Bundle-RequiredExecutionEnvironment: JavaSE-1.8\r\n-Export-Package: org.polarsys.capella.core.ui.search,\r\n- org.polarsys.capella.core.ui.search.handler\r\n Bundle-Localization: plugin\r\n+Require-Bundle: org.eclipse.search,\r\n+ org.eclipse.jface.text,\r\n+ org.polarsys.capella.core.platform.sirius.ui.navigator,\r\n+ org.polarsys.capella.common.ui.toolkit,\r\n+ org.eclipse.sirius.common.ui,\r\n+ org.polarsys.capella.core.sirius.ui,\r\n+ org.eclipse.ui.workbench.texteditor\r\n+Export-Package: org.polarsys.capella.core.ui.search\r\n+Import-Package: org.polarsys.capella.common.ui.toolkit.viewers.data\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc4MjgzMw==", "bodyText": "No specific reason, will use require bundle instead.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375782833", "createdAt": "2020-02-06T11:31:26Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/META-INF/MANIFEST.MF", "diffHunk": "@@ -3,18 +3,18 @@ Bundle-ManifestVersion: 2\n Bundle-Name: %pluginName\r\n Bundle-SymbolicName: org.polarsys.capella.core.ui.search;singleton:=true\r\n Bundle-Version: 1.4.0.qualifier\r\n-Bundle-Activator: org.polarsys.capella.core.ui.search.CapellaUISearchPlugin\r\n+Bundle-Activator: org.polarsys.capella.core.ui.search.Activator\r\n Bundle-Vendor: %providerName\r\n-Require-Bundle: com.google.guava,\r\n- org.polarsys.capella.core.ui.toolkit,\r\n- org.polarsys.capella.core.platform.sirius.ui.navigator,\r\n- org.polarsys.capella.core.ui.semantic.browser,\r\n- org.polarsys.capella.common.tools.report.appenders.reportlogview,\r\n- org.polarsys.capella.common.re.gen,\r\n- org.eclipse.sirius,\r\n- org.eclipse.core.expressions,\r\n- org.eclipse.ui.ide\r\n Bundle-RequiredExecutionEnvironment: JavaSE-1.8\r\n-Export-Package: org.polarsys.capella.core.ui.search,\r\n- org.polarsys.capella.core.ui.search.handler\r\n Bundle-Localization: plugin\r\n+Require-Bundle: org.eclipse.search,\r\n+ org.eclipse.jface.text,\r\n+ org.polarsys.capella.core.platform.sirius.ui.navigator,\r\n+ org.polarsys.capella.common.ui.toolkit,\r\n+ org.eclipse.sirius.common.ui,\r\n+ org.polarsys.capella.core.sirius.ui,\r\n+ org.eclipse.ui.workbench.texteditor\r\n+Export-Package: org.polarsys.capella.core.ui.search\r\n+Import-Package: org.polarsys.capella.common.ui.toolkit.viewers.data\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM5ODE0MQ=="}, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTczOTUwOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/AbstractCapellaSearchEntry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzozMDowOVrOFmAo2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMTozMTozN1rOFmX9_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwMDY2NA==", "bodyText": "Avoid using variables with underscore in their names (for Sonar)", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375400664", "createdAt": "2020-02-05T17:30:09Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/AbstractCapellaSearchEntry.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.Stack;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.search.ui.text.Match;\r\n+\r\n+/**\r\n+ * Entity responsible of model result hierarchical organization.\r\n+ */\r\n+public abstract class AbstractCapellaSearchEntry extends Match {\r\n+  /** precedent AbstractCapellaSearchResultEntry in the hierarchical search query result thread */\r\n+  protected AbstractCapellaSearchEntry parent;\r\n+\r\n+  /** true if a real match (eg. not an intermediary structural object for ordering purpose only), false otherwise */\r\n+  protected boolean matchedOnce;\r\n+\r\n+  /**\r\n+   * all AbstractCapellaSearchResultEntry children, potentially matches themselves or intermediary structural object(s)\r\n+   * for ordering purposes only)\r\n+   */\r\n+  private Collection<Object> children;\r\n+  \r\n+  private String text;\r\n+  \r\n+  private IProject project;\r\n+\r\n+  public AbstractCapellaSearchEntry(AbstractCapellaSearchEntry _parent, Object _source, boolean _matched, IProject _project) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc4MjkwOA==", "bodyText": "OK.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375782908", "createdAt": "2020-02-06T11:31:37Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/AbstractCapellaSearchEntry.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.Stack;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.search.ui.text.Match;\r\n+\r\n+/**\r\n+ * Entity responsible of model result hierarchical organization.\r\n+ */\r\n+public abstract class AbstractCapellaSearchEntry extends Match {\r\n+  /** precedent AbstractCapellaSearchResultEntry in the hierarchical search query result thread */\r\n+  protected AbstractCapellaSearchEntry parent;\r\n+\r\n+  /** true if a real match (eg. not an intermediary structural object for ordering purpose only), false otherwise */\r\n+  protected boolean matchedOnce;\r\n+\r\n+  /**\r\n+   * all AbstractCapellaSearchResultEntry children, potentially matches themselves or intermediary structural object(s)\r\n+   * for ordering purposes only)\r\n+   */\r\n+  private Collection<Object> children;\r\n+  \r\n+  private String text;\r\n+  \r\n+  private IProject project;\r\n+\r\n+  public AbstractCapellaSearchEntry(AbstractCapellaSearchEntry _parent, Object _source, boolean _matched, IProject _project) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQwMDY2NA=="}, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzg3OTk1OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo1Mzo1M1rOFmVHnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMTozNTo1OFrOFmYFDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczNjIyMQ==", "bodyText": "Is this an assignement?", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375736221", "createdAt": "2020-02-06T09:53:53Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResult.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+import java.util.stream.Stream;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.emf.ecore.EAttribute;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.EStructuralFeature;\r\n+import org.eclipse.emf.ecore.ETypedElement;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.search.ui.text.AbstractTextSearchResult;\r\n+import org.eclipse.search.ui.text.IEditorMatchAdapter;\r\n+import org.eclipse.search.ui.text.IFileMatchAdapter;\r\n+import org.eclipse.search.ui.text.MatchFilter;\r\n+\r\n+public class CapellaSearchResult extends AbstractTextSearchResult {\r\n+\r\n+  private CapellaSearchQuery capellaSearchQuery;\r\n+\r\n+  /**\r\n+   * Current Search Entries\r\n+   */\r\n+  private Map<Object, Collection<Object>> searchEntries;\r\n+  private Map<Object, AbstractCapellaSearchEntry> elementToMatches = new HashMap();\r\n+  \r\n+  public CapellaSearchResult(CapellaSearchQuery capellaSearchQuery) {\r\n+    this.capellaSearchQuery = capellaSearchQuery;\r\n+    setActiveMatchFilters(new MatchFilter[] {}); // By default, no filter is activated\r\n+    searchEntries = new HashMap<Object, Collection<Object>>();\r\n+  }\r\n+  \r\n+  @Override\r\n+  public String getLabel() {\r\n+    int totalOccurrenceCount = getOccurrenceCount();\r\n+    int matchedElementsCount = getElements().length;\r\n+    int matchedProjectsCount = getProjects().size();\r\n+    String queryLabel = capellaSearchQuery.getLabel();\r\n+    int activeFilterCount = getActiveMatchFilters().length;\r\n+    if (activeFilterCount == 0) {\r\n+      return String.format(Messages.CapellaSearchResult_Label, queryLabel, totalOccurrenceCount, matchedElementsCount,\r\n+          matchedProjectsCount);\r\n+    }\r\n+    int displayedOccurrenceCount = 0; //getDisplayedOccurrenceCount();\r\n+    return String.format(Messages.CapellaSearchResult_Label_With_Active_Filters, queryLabel, totalOccurrenceCount,\r\n+        matchedElementsCount, matchedProjectsCount, totalOccurrenceCount - displayedOccurrenceCount, activeFilterCount);\r\n+  }\r\n+\r\n+  @Override\r\n+  public String getTooltip() {\r\n+    return getLabel();\r\n+  }\r\n+\r\n+  @Override\r\n+  public ImageDescriptor getImageDescriptor() {\r\n+    return Activator.getDefault().getImageDescriptor(\"search.gif\"); //$NON-NLS-1$\r\n+  }\r\n+\r\n+  @Override\r\n+  public CapellaSearchQuery getQuery() {\r\n+    return capellaSearchQuery;\r\n+  }\r\n+\r\n+  @Override\r\n+  public IEditorMatchAdapter getEditorMatchAdapter() {\r\n+    return null;\r\n+  }\r\n+\r\n+  @Override\r\n+  public IFileMatchAdapter getFileMatchAdapter() {\r\n+    return null;\r\n+  }\r\n+\r\n+  /**\r\n+   * Get all projects from matches\r\n+   * \r\n+   * @return\r\n+   */\r\n+  public Set<Object> getProjects() {\r\n+    return searchEntries.keySet();\r\n+  }\r\n+\r\n+  @Override\r\n+  public MatchFilter[] getAllMatchFilters() {\r\n+    return new MatchFilter[] { //\r\n+//        CapellaSearchMatchFilter.NOT_MODIFIABLE, //\r\n+//        CapellaSearchMatchFilter.CAPELLA_ELEMENT, //\r\n+//        CapellaSearchMatchFilter.REPRESENTATION //\r\n+    };\r\n+  }\r\n+\r\n+  /////////\r\n+  \r\n+  \r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public AbstractCapellaSearchEntry insert(Object file, AbstractCapellaSearchEntry entry, boolean notify) {\r\n+    if (searchEntries.get(file) == null) {\r\n+      searchEntries.put(file, new ArrayList<Object>());\r\n+    }\r\n+    insert2(searchEntries.get(file), entry, notify);\r\n+    return entry;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public AbstractCapellaSearchEntry insert(Object file, AbstractCapellaSearchEntry entry, Object eTypedElem, String valuation,\r\n+      boolean notify) {\r\n+    return insert5(entry, eTypedElem, valuation, notify, file);\r\n+  }\r\n+\r\n+  /**\r\n+   * Inserts & merges an entry sequence into an existing entry sequence hierarchy\r\n+   * \r\n+   * @param currentEntrySubHierarchyCollection\r\n+   * @param entryToInsert\r\n+   * @param notify\r\n+   */\r\n+  private void insert2(Collection<Object> currentEntrySubHierarchyCollection, AbstractCapellaSearchEntry entryToInsert,\r\n+      boolean notify) {\r\n+\r\n+      boolean alreadyExist = false;\r\n+      for (Object currentEntrySubHierarchy : currentEntrySubHierarchyCollection) {\r\n+        if (alreadyExist = currentEntrySubHierarchy.equals(entryToInsert)) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc4NDcxOQ==", "bodyText": "Will remove this.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375784719", "createdAt": "2020-02-06T11:35:58Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResult.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+import java.util.stream.Stream;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.emf.ecore.EAttribute;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.EStructuralFeature;\r\n+import org.eclipse.emf.ecore.ETypedElement;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.search.ui.text.AbstractTextSearchResult;\r\n+import org.eclipse.search.ui.text.IEditorMatchAdapter;\r\n+import org.eclipse.search.ui.text.IFileMatchAdapter;\r\n+import org.eclipse.search.ui.text.MatchFilter;\r\n+\r\n+public class CapellaSearchResult extends AbstractTextSearchResult {\r\n+\r\n+  private CapellaSearchQuery capellaSearchQuery;\r\n+\r\n+  /**\r\n+   * Current Search Entries\r\n+   */\r\n+  private Map<Object, Collection<Object>> searchEntries;\r\n+  private Map<Object, AbstractCapellaSearchEntry> elementToMatches = new HashMap();\r\n+  \r\n+  public CapellaSearchResult(CapellaSearchQuery capellaSearchQuery) {\r\n+    this.capellaSearchQuery = capellaSearchQuery;\r\n+    setActiveMatchFilters(new MatchFilter[] {}); // By default, no filter is activated\r\n+    searchEntries = new HashMap<Object, Collection<Object>>();\r\n+  }\r\n+  \r\n+  @Override\r\n+  public String getLabel() {\r\n+    int totalOccurrenceCount = getOccurrenceCount();\r\n+    int matchedElementsCount = getElements().length;\r\n+    int matchedProjectsCount = getProjects().size();\r\n+    String queryLabel = capellaSearchQuery.getLabel();\r\n+    int activeFilterCount = getActiveMatchFilters().length;\r\n+    if (activeFilterCount == 0) {\r\n+      return String.format(Messages.CapellaSearchResult_Label, queryLabel, totalOccurrenceCount, matchedElementsCount,\r\n+          matchedProjectsCount);\r\n+    }\r\n+    int displayedOccurrenceCount = 0; //getDisplayedOccurrenceCount();\r\n+    return String.format(Messages.CapellaSearchResult_Label_With_Active_Filters, queryLabel, totalOccurrenceCount,\r\n+        matchedElementsCount, matchedProjectsCount, totalOccurrenceCount - displayedOccurrenceCount, activeFilterCount);\r\n+  }\r\n+\r\n+  @Override\r\n+  public String getTooltip() {\r\n+    return getLabel();\r\n+  }\r\n+\r\n+  @Override\r\n+  public ImageDescriptor getImageDescriptor() {\r\n+    return Activator.getDefault().getImageDescriptor(\"search.gif\"); //$NON-NLS-1$\r\n+  }\r\n+\r\n+  @Override\r\n+  public CapellaSearchQuery getQuery() {\r\n+    return capellaSearchQuery;\r\n+  }\r\n+\r\n+  @Override\r\n+  public IEditorMatchAdapter getEditorMatchAdapter() {\r\n+    return null;\r\n+  }\r\n+\r\n+  @Override\r\n+  public IFileMatchAdapter getFileMatchAdapter() {\r\n+    return null;\r\n+  }\r\n+\r\n+  /**\r\n+   * Get all projects from matches\r\n+   * \r\n+   * @return\r\n+   */\r\n+  public Set<Object> getProjects() {\r\n+    return searchEntries.keySet();\r\n+  }\r\n+\r\n+  @Override\r\n+  public MatchFilter[] getAllMatchFilters() {\r\n+    return new MatchFilter[] { //\r\n+//        CapellaSearchMatchFilter.NOT_MODIFIABLE, //\r\n+//        CapellaSearchMatchFilter.CAPELLA_ELEMENT, //\r\n+//        CapellaSearchMatchFilter.REPRESENTATION //\r\n+    };\r\n+  }\r\n+\r\n+  /////////\r\n+  \r\n+  \r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public AbstractCapellaSearchEntry insert(Object file, AbstractCapellaSearchEntry entry, boolean notify) {\r\n+    if (searchEntries.get(file) == null) {\r\n+      searchEntries.put(file, new ArrayList<Object>());\r\n+    }\r\n+    insert2(searchEntries.get(file), entry, notify);\r\n+    return entry;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public AbstractCapellaSearchEntry insert(Object file, AbstractCapellaSearchEntry entry, Object eTypedElem, String valuation,\r\n+      boolean notify) {\r\n+    return insert5(entry, eTypedElem, valuation, notify, file);\r\n+  }\r\n+\r\n+  /**\r\n+   * Inserts & merges an entry sequence into an existing entry sequence hierarchy\r\n+   * \r\n+   * @param currentEntrySubHierarchyCollection\r\n+   * @param entryToInsert\r\n+   * @param notify\r\n+   */\r\n+  private void insert2(Collection<Object> currentEntrySubHierarchyCollection, AbstractCapellaSearchEntry entryToInsert,\r\n+      boolean notify) {\r\n+\r\n+      boolean alreadyExist = false;\r\n+      for (Object currentEntrySubHierarchy : currentEntrySubHierarchyCollection) {\r\n+        if (alreadyExist = currentEntrySubHierarchy.equals(entryToInsert)) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTczNjIyMQ=="}, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDAwMjgzOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/AbstractCapellaSearchEntry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDozMTo0MlrOFmWTRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMTozMjowN1rOFmX-xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1NTU4OQ==", "bodyText": "Deque, the unsynchronized version of Stack, should be used to be more performance efficient.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375755589", "createdAt": "2020-02-06T10:31:42Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/AbstractCapellaSearchEntry.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.Stack;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.search.ui.text.Match;\r\n+\r\n+/**\r\n+ * Entity responsible of model result hierarchical organization.\r\n+ */\r\n+public abstract class AbstractCapellaSearchEntry extends Match {\r\n+  /** precedent AbstractCapellaSearchResultEntry in the hierarchical search query result thread */\r\n+  protected AbstractCapellaSearchEntry parent;\r\n+\r\n+  /** true if a real match (eg. not an intermediary structural object for ordering purpose only), false otherwise */\r\n+  protected boolean matchedOnce;\r\n+\r\n+  /**\r\n+   * all AbstractCapellaSearchResultEntry children, potentially matches themselves or intermediary structural object(s)\r\n+   * for ordering purposes only)\r\n+   */\r\n+  private Collection<Object> children;\r\n+  \r\n+  private String text;\r\n+  \r\n+  private IProject project;\r\n+\r\n+  public AbstractCapellaSearchEntry(AbstractCapellaSearchEntry _parent, Object _source, boolean _matched, IProject _project) {\r\n+    super(_source, -1, -1);\r\n+    parent = _parent;\r\n+    children = new HashSet<Object>();\r\n+    project = _project;\r\n+    setMatchedOnce(_matched);\r\n+  }\r\n+\r\n+  public AbstractCapellaSearchEntry(AbstractCapellaSearchEntry _parent, Object _source,\r\n+      String _valuation, boolean _matched, IProject _project) {\r\n+    this(_parent, _source, _matched, _project);\r\n+    text = _valuation;\r\n+  }\r\n+  \r\n+  public String getText() {\r\n+    return text;\r\n+  }\r\n+  \r\n+  public void setText(String _text) {\r\n+    text = _text;\r\n+  }\r\n+  \r\n+  public Collection<Object> getChildren() {\r\n+    return children;\r\n+  }\r\n+\r\n+  public IProject getProject() {\r\n+    return project;\r\n+  }\r\n+  \r\n+  /**\r\n+   * Adds AbstractCapellaSearchResultEntry child, potentially match itself or intermediary structural object(s) for\r\n+   * ordering purposes only.\r\n+   */\r\n+  public void addChildren(AbstractCapellaSearchEntry e) {\r\n+    children.add(e);\r\n+  }\r\n+\r\n+  /**\r\n+   * Remove AbstractCapellaSearchResultEntry child, potentially match itself or intermediary structural object(s) for\r\n+   * ordering purposes only.\r\n+   */\r\n+  public void removeChildren(AbstractCapellaSearchEntry e) {\r\n+    children.remove(e);\r\n+  }\r\n+\r\n+  /////////////////////////\r\n+  // Getters / Setters\r\n+  /////////////////////////\r\n+\r\n+  /**\r\n+   * @return AbstractCapellaSearchResultEntry parent, potentially match itself or intermediary structural object(s) for\r\n+   *         ordering purposes only.\r\n+   */\r\n+  public AbstractCapellaSearchEntry getParent() {\r\n+    return parent;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets AbstractCapellaSearchResultEntry parent, potentially match itself or intermediary structural object(s) for\r\n+   * ordering purposes only.\r\n+   */\r\n+  public void setParent(AbstractCapellaSearchEntry p) {\r\n+    parent = p;\r\n+  }\r\n+\r\n+  /**\r\n+   * @return true if a real match (eg. not an intermediary structural object for ordering purpose only), false otherwise\r\n+   */\r\n+  public boolean wasMatchedAtleastOnce() {\r\n+    return matchedOnce;\r\n+  }\r\n+\r\n+  /**\r\n+   * Set to true if a real match (eg. not an intermediary structural object for ordering purpose only), false otherwise\r\n+   */\r\n+  public void setMatchedOnce(boolean matchedOnce) {\r\n+    this.matchedOnce = matchedOnce;\r\n+  }\r\n+\r\n+  /**\r\n+   * @return AbstractCapellaSearchResultEntry hierarchy in a root to leaf order (eg. tree like), void Stack otherwise.\r\n+   */\r\n+  public Stack<AbstractCapellaSearchEntry> getHierarchyFromRootToLeaf() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc4MzExMA==", "bodyText": "OK.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375783110", "createdAt": "2020-02-06T11:32:07Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/AbstractCapellaSearchEntry.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashSet;\r\n+import java.util.Stack;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.search.ui.text.Match;\r\n+\r\n+/**\r\n+ * Entity responsible of model result hierarchical organization.\r\n+ */\r\n+public abstract class AbstractCapellaSearchEntry extends Match {\r\n+  /** precedent AbstractCapellaSearchResultEntry in the hierarchical search query result thread */\r\n+  protected AbstractCapellaSearchEntry parent;\r\n+\r\n+  /** true if a real match (eg. not an intermediary structural object for ordering purpose only), false otherwise */\r\n+  protected boolean matchedOnce;\r\n+\r\n+  /**\r\n+   * all AbstractCapellaSearchResultEntry children, potentially matches themselves or intermediary structural object(s)\r\n+   * for ordering purposes only)\r\n+   */\r\n+  private Collection<Object> children;\r\n+  \r\n+  private String text;\r\n+  \r\n+  private IProject project;\r\n+\r\n+  public AbstractCapellaSearchEntry(AbstractCapellaSearchEntry _parent, Object _source, boolean _matched, IProject _project) {\r\n+    super(_source, -1, -1);\r\n+    parent = _parent;\r\n+    children = new HashSet<Object>();\r\n+    project = _project;\r\n+    setMatchedOnce(_matched);\r\n+  }\r\n+\r\n+  public AbstractCapellaSearchEntry(AbstractCapellaSearchEntry _parent, Object _source,\r\n+      String _valuation, boolean _matched, IProject _project) {\r\n+    this(_parent, _source, _matched, _project);\r\n+    text = _valuation;\r\n+  }\r\n+  \r\n+  public String getText() {\r\n+    return text;\r\n+  }\r\n+  \r\n+  public void setText(String _text) {\r\n+    text = _text;\r\n+  }\r\n+  \r\n+  public Collection<Object> getChildren() {\r\n+    return children;\r\n+  }\r\n+\r\n+  public IProject getProject() {\r\n+    return project;\r\n+  }\r\n+  \r\n+  /**\r\n+   * Adds AbstractCapellaSearchResultEntry child, potentially match itself or intermediary structural object(s) for\r\n+   * ordering purposes only.\r\n+   */\r\n+  public void addChildren(AbstractCapellaSearchEntry e) {\r\n+    children.add(e);\r\n+  }\r\n+\r\n+  /**\r\n+   * Remove AbstractCapellaSearchResultEntry child, potentially match itself or intermediary structural object(s) for\r\n+   * ordering purposes only.\r\n+   */\r\n+  public void removeChildren(AbstractCapellaSearchEntry e) {\r\n+    children.remove(e);\r\n+  }\r\n+\r\n+  /////////////////////////\r\n+  // Getters / Setters\r\n+  /////////////////////////\r\n+\r\n+  /**\r\n+   * @return AbstractCapellaSearchResultEntry parent, potentially match itself or intermediary structural object(s) for\r\n+   *         ordering purposes only.\r\n+   */\r\n+  public AbstractCapellaSearchEntry getParent() {\r\n+    return parent;\r\n+  }\r\n+\r\n+  /**\r\n+   * Sets AbstractCapellaSearchResultEntry parent, potentially match itself or intermediary structural object(s) for\r\n+   * ordering purposes only.\r\n+   */\r\n+  public void setParent(AbstractCapellaSearchEntry p) {\r\n+    parent = p;\r\n+  }\r\n+\r\n+  /**\r\n+   * @return true if a real match (eg. not an intermediary structural object for ordering purpose only), false otherwise\r\n+   */\r\n+  public boolean wasMatchedAtleastOnce() {\r\n+    return matchedOnce;\r\n+  }\r\n+\r\n+  /**\r\n+   * Set to true if a real match (eg. not an intermediary structural object for ordering purpose only), false otherwise\r\n+   */\r\n+  public void setMatchedOnce(boolean matchedOnce) {\r\n+    this.matchedOnce = matchedOnce;\r\n+  }\r\n+\r\n+  /**\r\n+   * @return AbstractCapellaSearchResultEntry hierarchy in a root to leaf order (eg. tree like), void Stack otherwise.\r\n+   */\r\n+  public Stack<AbstractCapellaSearchEntry> getHierarchyFromRootToLeaf() {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1NTU4OQ=="}, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDAwODU3OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDozMzoxN1rOFmWWlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMTozMjo0NlrOFmX_-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1NjQzNg==", "bodyText": "This has not been finished, isn't it?", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375756436", "createdAt": "2020-02-06T10:33:17Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResult.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+import java.util.stream.Stream;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.emf.ecore.EAttribute;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.EStructuralFeature;\r\n+import org.eclipse.emf.ecore.ETypedElement;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.search.ui.text.AbstractTextSearchResult;\r\n+import org.eclipse.search.ui.text.IEditorMatchAdapter;\r\n+import org.eclipse.search.ui.text.IFileMatchAdapter;\r\n+import org.eclipse.search.ui.text.MatchFilter;\r\n+\r\n+public class CapellaSearchResult extends AbstractTextSearchResult {\r\n+\r\n+  private CapellaSearchQuery capellaSearchQuery;\r\n+\r\n+  /**\r\n+   * Current Search Entries\r\n+   */\r\n+  private Map<Object, Collection<Object>> searchEntries;\r\n+  private Map<Object, AbstractCapellaSearchEntry> elementToMatches = new HashMap();\r\n+  \r\n+  public CapellaSearchResult(CapellaSearchQuery capellaSearchQuery) {\r\n+    this.capellaSearchQuery = capellaSearchQuery;\r\n+    setActiveMatchFilters(new MatchFilter[] {}); // By default, no filter is activated\r\n+    searchEntries = new HashMap<Object, Collection<Object>>();\r\n+  }\r\n+  \r\n+  @Override\r\n+  public String getLabel() {\r\n+    int totalOccurrenceCount = getOccurrenceCount();\r\n+    int matchedElementsCount = getElements().length;\r\n+    int matchedProjectsCount = getProjects().size();\r\n+    String queryLabel = capellaSearchQuery.getLabel();\r\n+    int activeFilterCount = getActiveMatchFilters().length;\r\n+    if (activeFilterCount == 0) {\r\n+      return String.format(Messages.CapellaSearchResult_Label, queryLabel, totalOccurrenceCount, matchedElementsCount,\r\n+          matchedProjectsCount);\r\n+    }\r\n+    int displayedOccurrenceCount = 0; //getDisplayedOccurrenceCount();\r\n+    return String.format(Messages.CapellaSearchResult_Label_With_Active_Filters, queryLabel, totalOccurrenceCount,\r\n+        matchedElementsCount, matchedProjectsCount, totalOccurrenceCount - displayedOccurrenceCount, activeFilterCount);\r\n+  }\r\n+\r\n+  @Override\r\n+  public String getTooltip() {\r\n+    return getLabel();\r\n+  }\r\n+\r\n+  @Override\r\n+  public ImageDescriptor getImageDescriptor() {\r\n+    return Activator.getDefault().getImageDescriptor(\"search.gif\"); //$NON-NLS-1$\r\n+  }\r\n+\r\n+  @Override\r\n+  public CapellaSearchQuery getQuery() {\r\n+    return capellaSearchQuery;\r\n+  }\r\n+\r\n+  @Override\r\n+  public IEditorMatchAdapter getEditorMatchAdapter() {\r\n+    return null;\r\n+  }\r\n+\r\n+  @Override\r\n+  public IFileMatchAdapter getFileMatchAdapter() {\r\n+    return null;\r\n+  }\r\n+\r\n+  /**\r\n+   * Get all projects from matches\r\n+   * \r\n+   * @return\r\n+   */\r\n+  public Set<Object> getProjects() {\r\n+    return searchEntries.keySet();\r\n+  }\r\n+\r\n+  @Override\r\n+  public MatchFilter[] getAllMatchFilters() {\r\n+    return new MatchFilter[] { //\r\n+//        CapellaSearchMatchFilter.NOT_MODIFIABLE, //\r\n+//        CapellaSearchMatchFilter.CAPELLA_ELEMENT, //\r\n+//        CapellaSearchMatchFilter.REPRESENTATION //\r\n+    };\r\n+  }\r\n+\r\n+  /////////\r\n+  \r\n+  \r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public AbstractCapellaSearchEntry insert(Object file, AbstractCapellaSearchEntry entry, boolean notify) {\r\n+    if (searchEntries.get(file) == null) {\r\n+      searchEntries.put(file, new ArrayList<Object>());\r\n+    }\r\n+    insert2(searchEntries.get(file), entry, notify);\r\n+    return entry;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public AbstractCapellaSearchEntry insert(Object file, AbstractCapellaSearchEntry entry, Object eTypedElem, String valuation,\r\n+      boolean notify) {\r\n+    return insert5(entry, eTypedElem, valuation, notify, file);\r\n+  }\r\n+\r\n+  /**\r\n+   * Inserts & merges an entry sequence into an existing entry sequence hierarchy\r\n+   * \r\n+   * @param currentEntrySubHierarchyCollection\r\n+   * @param entryToInsert\r\n+   * @param notify\r\n+   */\r\n+  private void insert2(Collection<Object> currentEntrySubHierarchyCollection, AbstractCapellaSearchEntry entryToInsert,\r\n+      boolean notify) {\r\n+\r\n+      boolean alreadyExist = false;\r\n+      for (Object currentEntrySubHierarchy : currentEntrySubHierarchyCollection) {\r\n+        if (alreadyExist = currentEntrySubHierarchy.equals(entryToInsert)) {\r\n+          updateInsertionPoint((AbstractCapellaSearchEntry) currentEntrySubHierarchy, (AbstractCapellaSearchEntry) entryToInsert);\r\n+          insert3(currentEntrySubHierarchy, entryToInsert.getChildren(), notify);\r\n+          break;\r\n+        }\r\n+      }\r\n+      if (!alreadyExist) {\r\n+        currentEntrySubHierarchyCollection.add(entryToInsert);\r\n+        if (notify) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc4MzQxNg==", "bodyText": "I didn't use the notify, will be removed.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375783416", "createdAt": "2020-02-06T11:32:46Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResult.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+import java.util.stream.Stream;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.emf.ecore.EAttribute;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.EStructuralFeature;\r\n+import org.eclipse.emf.ecore.ETypedElement;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.search.ui.text.AbstractTextSearchResult;\r\n+import org.eclipse.search.ui.text.IEditorMatchAdapter;\r\n+import org.eclipse.search.ui.text.IFileMatchAdapter;\r\n+import org.eclipse.search.ui.text.MatchFilter;\r\n+\r\n+public class CapellaSearchResult extends AbstractTextSearchResult {\r\n+\r\n+  private CapellaSearchQuery capellaSearchQuery;\r\n+\r\n+  /**\r\n+   * Current Search Entries\r\n+   */\r\n+  private Map<Object, Collection<Object>> searchEntries;\r\n+  private Map<Object, AbstractCapellaSearchEntry> elementToMatches = new HashMap();\r\n+  \r\n+  public CapellaSearchResult(CapellaSearchQuery capellaSearchQuery) {\r\n+    this.capellaSearchQuery = capellaSearchQuery;\r\n+    setActiveMatchFilters(new MatchFilter[] {}); // By default, no filter is activated\r\n+    searchEntries = new HashMap<Object, Collection<Object>>();\r\n+  }\r\n+  \r\n+  @Override\r\n+  public String getLabel() {\r\n+    int totalOccurrenceCount = getOccurrenceCount();\r\n+    int matchedElementsCount = getElements().length;\r\n+    int matchedProjectsCount = getProjects().size();\r\n+    String queryLabel = capellaSearchQuery.getLabel();\r\n+    int activeFilterCount = getActiveMatchFilters().length;\r\n+    if (activeFilterCount == 0) {\r\n+      return String.format(Messages.CapellaSearchResult_Label, queryLabel, totalOccurrenceCount, matchedElementsCount,\r\n+          matchedProjectsCount);\r\n+    }\r\n+    int displayedOccurrenceCount = 0; //getDisplayedOccurrenceCount();\r\n+    return String.format(Messages.CapellaSearchResult_Label_With_Active_Filters, queryLabel, totalOccurrenceCount,\r\n+        matchedElementsCount, matchedProjectsCount, totalOccurrenceCount - displayedOccurrenceCount, activeFilterCount);\r\n+  }\r\n+\r\n+  @Override\r\n+  public String getTooltip() {\r\n+    return getLabel();\r\n+  }\r\n+\r\n+  @Override\r\n+  public ImageDescriptor getImageDescriptor() {\r\n+    return Activator.getDefault().getImageDescriptor(\"search.gif\"); //$NON-NLS-1$\r\n+  }\r\n+\r\n+  @Override\r\n+  public CapellaSearchQuery getQuery() {\r\n+    return capellaSearchQuery;\r\n+  }\r\n+\r\n+  @Override\r\n+  public IEditorMatchAdapter getEditorMatchAdapter() {\r\n+    return null;\r\n+  }\r\n+\r\n+  @Override\r\n+  public IFileMatchAdapter getFileMatchAdapter() {\r\n+    return null;\r\n+  }\r\n+\r\n+  /**\r\n+   * Get all projects from matches\r\n+   * \r\n+   * @return\r\n+   */\r\n+  public Set<Object> getProjects() {\r\n+    return searchEntries.keySet();\r\n+  }\r\n+\r\n+  @Override\r\n+  public MatchFilter[] getAllMatchFilters() {\r\n+    return new MatchFilter[] { //\r\n+//        CapellaSearchMatchFilter.NOT_MODIFIABLE, //\r\n+//        CapellaSearchMatchFilter.CAPELLA_ELEMENT, //\r\n+//        CapellaSearchMatchFilter.REPRESENTATION //\r\n+    };\r\n+  }\r\n+\r\n+  /////////\r\n+  \r\n+  \r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public AbstractCapellaSearchEntry insert(Object file, AbstractCapellaSearchEntry entry, boolean notify) {\r\n+    if (searchEntries.get(file) == null) {\r\n+      searchEntries.put(file, new ArrayList<Object>());\r\n+    }\r\n+    insert2(searchEntries.get(file), entry, notify);\r\n+    return entry;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public AbstractCapellaSearchEntry insert(Object file, AbstractCapellaSearchEntry entry, Object eTypedElem, String valuation,\r\n+      boolean notify) {\r\n+    return insert5(entry, eTypedElem, valuation, notify, file);\r\n+  }\r\n+\r\n+  /**\r\n+   * Inserts & merges an entry sequence into an existing entry sequence hierarchy\r\n+   * \r\n+   * @param currentEntrySubHierarchyCollection\r\n+   * @param entryToInsert\r\n+   * @param notify\r\n+   */\r\n+  private void insert2(Collection<Object> currentEntrySubHierarchyCollection, AbstractCapellaSearchEntry entryToInsert,\r\n+      boolean notify) {\r\n+\r\n+      boolean alreadyExist = false;\r\n+      for (Object currentEntrySubHierarchy : currentEntrySubHierarchyCollection) {\r\n+        if (alreadyExist = currentEntrySubHierarchy.equals(entryToInsert)) {\r\n+          updateInsertionPoint((AbstractCapellaSearchEntry) currentEntrySubHierarchy, (AbstractCapellaSearchEntry) entryToInsert);\r\n+          insert3(currentEntrySubHierarchy, entryToInsert.getChildren(), notify);\r\n+          break;\r\n+        }\r\n+      }\r\n+      if (!alreadyExist) {\r\n+        currentEntrySubHierarchyCollection.add(entryToInsert);\r\n+        if (notify) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1NjQzNg=="}, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDAwOTg4OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDozMzo0MFrOFmWXWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDozMzo0MFrOFmWXWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1NjYzNQ==", "bodyText": "Same remark as above", "url": "https://github.com/eclipse/capella/pull/65#discussion_r375756635", "createdAt": "2020-02-06T10:33:40Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchResult.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+import java.util.stream.Stream;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.emf.ecore.EAttribute;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.emf.ecore.EStructuralFeature;\r\n+import org.eclipse.emf.ecore.ETypedElement;\r\n+import org.eclipse.emf.ecore.util.EcoreUtil;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.search.ui.text.AbstractTextSearchResult;\r\n+import org.eclipse.search.ui.text.IEditorMatchAdapter;\r\n+import org.eclipse.search.ui.text.IFileMatchAdapter;\r\n+import org.eclipse.search.ui.text.MatchFilter;\r\n+\r\n+public class CapellaSearchResult extends AbstractTextSearchResult {\r\n+\r\n+  private CapellaSearchQuery capellaSearchQuery;\r\n+\r\n+  /**\r\n+   * Current Search Entries\r\n+   */\r\n+  private Map<Object, Collection<Object>> searchEntries;\r\n+  private Map<Object, AbstractCapellaSearchEntry> elementToMatches = new HashMap();\r\n+  \r\n+  public CapellaSearchResult(CapellaSearchQuery capellaSearchQuery) {\r\n+    this.capellaSearchQuery = capellaSearchQuery;\r\n+    setActiveMatchFilters(new MatchFilter[] {}); // By default, no filter is activated\r\n+    searchEntries = new HashMap<Object, Collection<Object>>();\r\n+  }\r\n+  \r\n+  @Override\r\n+  public String getLabel() {\r\n+    int totalOccurrenceCount = getOccurrenceCount();\r\n+    int matchedElementsCount = getElements().length;\r\n+    int matchedProjectsCount = getProjects().size();\r\n+    String queryLabel = capellaSearchQuery.getLabel();\r\n+    int activeFilterCount = getActiveMatchFilters().length;\r\n+    if (activeFilterCount == 0) {\r\n+      return String.format(Messages.CapellaSearchResult_Label, queryLabel, totalOccurrenceCount, matchedElementsCount,\r\n+          matchedProjectsCount);\r\n+    }\r\n+    int displayedOccurrenceCount = 0; //getDisplayedOccurrenceCount();\r\n+    return String.format(Messages.CapellaSearchResult_Label_With_Active_Filters, queryLabel, totalOccurrenceCount,\r\n+        matchedElementsCount, matchedProjectsCount, totalOccurrenceCount - displayedOccurrenceCount, activeFilterCount);\r\n+  }\r\n+\r\n+  @Override\r\n+  public String getTooltip() {\r\n+    return getLabel();\r\n+  }\r\n+\r\n+  @Override\r\n+  public ImageDescriptor getImageDescriptor() {\r\n+    return Activator.getDefault().getImageDescriptor(\"search.gif\"); //$NON-NLS-1$\r\n+  }\r\n+\r\n+  @Override\r\n+  public CapellaSearchQuery getQuery() {\r\n+    return capellaSearchQuery;\r\n+  }\r\n+\r\n+  @Override\r\n+  public IEditorMatchAdapter getEditorMatchAdapter() {\r\n+    return null;\r\n+  }\r\n+\r\n+  @Override\r\n+  public IFileMatchAdapter getFileMatchAdapter() {\r\n+    return null;\r\n+  }\r\n+\r\n+  /**\r\n+   * Get all projects from matches\r\n+   * \r\n+   * @return\r\n+   */\r\n+  public Set<Object> getProjects() {\r\n+    return searchEntries.keySet();\r\n+  }\r\n+\r\n+  @Override\r\n+  public MatchFilter[] getAllMatchFilters() {\r\n+    return new MatchFilter[] { //\r\n+//        CapellaSearchMatchFilter.NOT_MODIFIABLE, //\r\n+//        CapellaSearchMatchFilter.CAPELLA_ELEMENT, //\r\n+//        CapellaSearchMatchFilter.REPRESENTATION //\r\n+    };\r\n+  }\r\n+\r\n+  /////////\r\n+  \r\n+  \r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public AbstractCapellaSearchEntry insert(Object file, AbstractCapellaSearchEntry entry, boolean notify) {\r\n+    if (searchEntries.get(file) == null) {\r\n+      searchEntries.put(file, new ArrayList<Object>());\r\n+    }\r\n+    insert2(searchEntries.get(file), entry, notify);\r\n+    return entry;\r\n+  }\r\n+\r\n+  /**\r\n+   * {@inheritDoc}\r\n+   */\r\n+  public AbstractCapellaSearchEntry insert(Object file, AbstractCapellaSearchEntry entry, Object eTypedElem, String valuation,\r\n+      boolean notify) {\r\n+    return insert5(entry, eTypedElem, valuation, notify, file);\r\n+  }\r\n+\r\n+  /**\r\n+   * Inserts & merges an entry sequence into an existing entry sequence hierarchy\r\n+   * \r\n+   * @param currentEntrySubHierarchyCollection\r\n+   * @param entryToInsert\r\n+   * @param notify\r\n+   */\r\n+  private void insert2(Collection<Object> currentEntrySubHierarchyCollection, AbstractCapellaSearchEntry entryToInsert,\r\n+      boolean notify) {\r\n+\r\n+      boolean alreadyExist = false;\r\n+      for (Object currentEntrySubHierarchy : currentEntrySubHierarchyCollection) {\r\n+        if (alreadyExist = currentEntrySubHierarchy.equals(entryToInsert)) {\r\n+          updateInsertionPoint((AbstractCapellaSearchEntry) currentEntrySubHierarchy, (AbstractCapellaSearchEntry) entryToInsert);\r\n+          insert3(currentEntrySubHierarchy, entryToInsert.getChildren(), notify);\r\n+          break;\r\n+        }\r\n+      }\r\n+      if (!alreadyExist) {\r\n+        currentEntrySubHierarchyCollection.add(entryToInsert);\r\n+        if (notify) {\r\n+          // fireItemAdded(entryToInsert);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * Inserts & merges an entry into an existing entry sequence hierarchy\r\n+   * \r\n+   * @param currentEntrySubHierarchy\r\n+   * @param entrySubtreeToInsertCollection\r\n+   * @param notify\r\n+   */\r\n+  private void insert3(Object currentEntrySubHierarchy, Collection<Object> entrySubtreeToInsertCollection,\r\n+      boolean notify) {\r\n+    for (Object e2i : entrySubtreeToInsertCollection) {\r\n+      if (e2i instanceof AbstractCapellaSearchEntry && currentEntrySubHierarchy instanceof AbstractCapellaSearchEntry) {\r\n+        if (currentEntrySubHierarchy.equals(e2i)) {\r\n+          updateInsertionPoint((AbstractCapellaSearchEntry) currentEntrySubHierarchy, (AbstractCapellaSearchEntry) e2i);\r\n+        }\r\n+        insert2(((AbstractCapellaSearchEntry) currentEntrySubHierarchy).getChildren(), (AbstractCapellaSearchEntry) e2i, notify);\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  /**\r\n+   * Inserts & merges an entry sequence into an existing entry\r\n+   * \r\n+   * @param compoundEntryToInsert\r\n+   * @param entryToInsert\r\n+   * @param notify\r\n+   * \r\n+   * @return newly inserted occurence entry\r\n+   */\r\n+  private AbstractCapellaSearchEntry insert5(AbstractCapellaSearchEntry entryHierarchyIntoWhichInsert, Object eTypedElem, String text,\r\n+      boolean notify, Object file) {\r\n+    CapellaSearchMatchOccurence occurence = null;\r\n+    for (Object result : entryHierarchyIntoWhichInsert.getChildren()) {\r\n+      if (result instanceof CapellaSearchMatchOccurence) {\r\n+        AbstractCapellaSearchEntry oc = (AbstractCapellaSearchEntry) result;\r\n+        if (isAnInvalidETypedElement(((EObject) oc.getElement()), (ETypedElement) eTypedElem)\r\n+            || isAnAlreadyExistingOccurenceValuation(text, (ETypedElement) eTypedElem, (CapellaSearchMatchOccurence) oc)) {\r\n+          return occurence;\r\n+        }\r\n+      }\r\n+    }\r\n+    occurence = new CapellaSearchMatchOccurence(entryHierarchyIntoWhichInsert, eTypedElem, text,\r\n+        true, (IProject)file);\r\n+    \r\n+    entryHierarchyIntoWhichInsert.addChildren(occurence);\r\n+\r\n+    if (notify) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b879aac89491ea8e12aa6d6fb119f42e04ae05"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjM3NzY0OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search_cdb/src/org/polarsys/capella/core/ui/search_cdb/CapellaSearchResultTreeContentProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDowMzozN1rOFoKE_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoxNzozNVrOFoKk-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjQ3Ng==", "bodyText": "Will this commented code be used in the future ?", "url": "https://github.com/eclipse/capella/pull/65#discussion_r377652476", "createdAt": "2020-02-11T14:03:37Z", "author": {"login": "Cosmin-Visan"}, "path": "core/plugins/org.polarsys.capella.core.ui.search_cdb/src/org/polarsys/capella/core/ui/search_cdb/CapellaSearchResultTreeContentProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search_cdb;\r\n+\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.viewers.ITreeContentProvider;\r\n+import org.eclipse.jface.viewers.Viewer;\r\n+import org.polarsys.capella.core.platform.sirius.ui.navigator.viewer.CapellaNavigatorContentProvider;\r\n+\r\n+public class CapellaSearchResultTreeContentProvider extends CapellaNavigatorContentProvider {\r\n+  private CapellaSearchResult_CDB searchResult;\r\n+\r\n+  public CapellaSearchResultTreeContentProvider(CapellaSearchResultPage_CDB capellaSearchResultPage) {\r\n+    super();\r\n+    searchResult = capellaSearchResultPage.getInput();\r\n+  }\r\n+  \r\n+  public Object[] getChildren(Object parentElement) {\r\n+    if (parentElement instanceof CapellaSearchMatch_CDB) {\r\n+      return ((CapellaSearchMatch_CDB)parentElement).getMatchOccurrences().toArray();\r\n+    }\r\n+    return super.getChildren(parentElement);\r\n+  }\r\n+  \r\n+  public Object getParent(Object element) {\r\n+    if (element instanceof CapellaSearchMatch_CDB) {\r\n+      return super.getParent(((CapellaSearchMatch_CDB)element).getElement());\r\n+    }\r\n+    return super.getParent(element);\r\n+  }\r\n+  \r\n+  @Override\r\n+  public Object[] getElements(Object inputElement) {\r\n+    if (inputElement instanceof CapellaSearchResult_CDB) {\r\n+      CapellaSearchResult_CDB input = (CapellaSearchResult_CDB) inputElement;\r\n+      Set<IProject> files = input.getProjects();\r\n+      return files.toArray();\r\n+    }\r\n+    return super.getElements(inputElement);\r\n+  }\r\n+  \r\n+  @Override\r\n+  public boolean hasChildren(Object element) {\r\n+    if (element instanceof IProject) {\r\n+      return true;\r\n+    } else if (element instanceof CapellaSearchMatch_CDB) {\r\n+      return !((CapellaSearchMatch_CDB) element).getMatchOccurrences().isEmpty();\r\n+    }\r\n+    return super.hasChildren(element);\r\n+  }\r\n+  \r\n+  /*public Object[] getSources(Object[] input) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e8b169585d150fd4f890457c969472e2ef950de"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2MDY2NQ==", "bodyText": "No, I accidentally commited this file. I will remove it.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r377660665", "createdAt": "2020-02-11T14:17:35Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search_cdb/src/org/polarsys/capella/core/ui/search_cdb/CapellaSearchResultTreeContentProvider.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search_cdb;\r\n+\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.emf.ecore.EObject;\r\n+import org.eclipse.jface.viewers.ITreeContentProvider;\r\n+import org.eclipse.jface.viewers.Viewer;\r\n+import org.polarsys.capella.core.platform.sirius.ui.navigator.viewer.CapellaNavigatorContentProvider;\r\n+\r\n+public class CapellaSearchResultTreeContentProvider extends CapellaNavigatorContentProvider {\r\n+  private CapellaSearchResult_CDB searchResult;\r\n+\r\n+  public CapellaSearchResultTreeContentProvider(CapellaSearchResultPage_CDB capellaSearchResultPage) {\r\n+    super();\r\n+    searchResult = capellaSearchResultPage.getInput();\r\n+  }\r\n+  \r\n+  public Object[] getChildren(Object parentElement) {\r\n+    if (parentElement instanceof CapellaSearchMatch_CDB) {\r\n+      return ((CapellaSearchMatch_CDB)parentElement).getMatchOccurrences().toArray();\r\n+    }\r\n+    return super.getChildren(parentElement);\r\n+  }\r\n+  \r\n+  public Object getParent(Object element) {\r\n+    if (element instanceof CapellaSearchMatch_CDB) {\r\n+      return super.getParent(((CapellaSearchMatch_CDB)element).getElement());\r\n+    }\r\n+    return super.getParent(element);\r\n+  }\r\n+  \r\n+  @Override\r\n+  public Object[] getElements(Object inputElement) {\r\n+    if (inputElement instanceof CapellaSearchResult_CDB) {\r\n+      CapellaSearchResult_CDB input = (CapellaSearchResult_CDB) inputElement;\r\n+      Set<IProject> files = input.getProjects();\r\n+      return files.toArray();\r\n+    }\r\n+    return super.getElements(inputElement);\r\n+  }\r\n+  \r\n+  @Override\r\n+  public boolean hasChildren(Object element) {\r\n+    if (element instanceof IProject) {\r\n+      return true;\r\n+    } else if (element instanceof CapellaSearchMatch_CDB) {\r\n+      return !((CapellaSearchMatch_CDB) element).getMatchOccurrences().isEmpty();\r\n+    }\r\n+    return super.hasChildren(element);\r\n+  }\r\n+  \r\n+  /*public Object[] getSources(Object[] input) {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1MjQ3Ng=="}, "originalCommit": {"oid": "3e8b169585d150fd4f890457c969472e2ef950de"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTk0NDcxOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchPage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxMjowOFrOFosTHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxNjozNFrOFqfFIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxMzE1MQ==", "bodyText": "Remove this import", "url": "https://github.com/eclipse/capella/pull/65#discussion_r378213151", "createdAt": "2020-02-12T12:12:08Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchPage.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.EnumMap;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Set;\r\n+import java.util.function.Predicate;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import javax.swing.JTable;\r\n+import org.eclipse.core.internal.resources.File;\r\n+import org.eclipse.core.resources.IFile;\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.IWorkspaceRoot;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.eclipse.core.runtime.IStatus;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EReference;\r\n+import org.eclipse.jface.dialogs.Dialog;\r\n+import org.eclipse.jface.dialogs.DialogPage;\r\n+import org.eclipse.jface.dialogs.MessageDialog;\r\n+import org.eclipse.jface.fieldassist.ComboContentAdapter;\r\n+import org.eclipse.jface.layout.GridDataFactory;\r\n+import org.eclipse.jface.layout.GridLayoutFactory;\r\n+import org.eclipse.jface.resource.JFaceColors;\r\n+import org.eclipse.jface.text.FindReplaceDocumentAdapterContentProposalProvider;\r\n+import org.eclipse.jface.viewers.CheckboxTableViewer;\r\n+import org.eclipse.jface.viewers.Viewer;\r\n+import org.eclipse.search.ui.IReplacePage;\r\n+import org.eclipse.search.ui.ISearchPage;\r\n+import org.eclipse.search.ui.ISearchPageContainer;\r\n+import org.eclipse.search.ui.NewSearchUI;\r\n+import org.eclipse.sirius.business.api.dialect.DialectManager;\r\n+import org.eclipse.sirius.business.api.session.Session;\r\n+import org.eclipse.sirius.business.api.session.SessionManager;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationDescriptor;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationElement;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.custom.CLabel;\r\n+import org.eclipse.swt.events.SelectionAdapter;\r\n+import org.eclipse.swt.events.SelectionEvent;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Button;\r\n+import org.eclipse.swt.widgets.Combo;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Label;\r\n+import org.eclipse.swt.widgets.Table;\r\n+import org.eclipse.ui.dialogs.PatternFilter;\r\n+import org.eclipse.ui.fieldassist.ContentAssistCommandAdapter;\r\n+import org.eclipse.ui.texteditor.ITextEditorActionDefinitionIds;\r\n+import org.polarsys.capella.core.model.handler.command.CapellaResourceHelper;\r\n+import org.polarsys.capella.core.sirius.ui.helper.SessionHelper;\r\n+import org.polarsys.capella.core.ui.search.searchfor.CapellaLeftSearchForContainerArea;\r\n+import org.polarsys.capella.core.ui.search.searchfor.CapellaRightSearchForContainerArea;\r\n+import org.polarsys.capella.test.framework.helpers.TestHelper;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNzc5OQ==", "bodyText": "Ok", "url": "https://github.com/eclipse/capella/pull/65#discussion_r378317799", "createdAt": "2020-02-12T15:19:06Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchPage.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.EnumMap;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Set;\r\n+import java.util.function.Predicate;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import javax.swing.JTable;\r\n+import org.eclipse.core.internal.resources.File;\r\n+import org.eclipse.core.resources.IFile;\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.IWorkspaceRoot;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.eclipse.core.runtime.IStatus;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EReference;\r\n+import org.eclipse.jface.dialogs.Dialog;\r\n+import org.eclipse.jface.dialogs.DialogPage;\r\n+import org.eclipse.jface.dialogs.MessageDialog;\r\n+import org.eclipse.jface.fieldassist.ComboContentAdapter;\r\n+import org.eclipse.jface.layout.GridDataFactory;\r\n+import org.eclipse.jface.layout.GridLayoutFactory;\r\n+import org.eclipse.jface.resource.JFaceColors;\r\n+import org.eclipse.jface.text.FindReplaceDocumentAdapterContentProposalProvider;\r\n+import org.eclipse.jface.viewers.CheckboxTableViewer;\r\n+import org.eclipse.jface.viewers.Viewer;\r\n+import org.eclipse.search.ui.IReplacePage;\r\n+import org.eclipse.search.ui.ISearchPage;\r\n+import org.eclipse.search.ui.ISearchPageContainer;\r\n+import org.eclipse.search.ui.NewSearchUI;\r\n+import org.eclipse.sirius.business.api.dialect.DialectManager;\r\n+import org.eclipse.sirius.business.api.session.Session;\r\n+import org.eclipse.sirius.business.api.session.SessionManager;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationDescriptor;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationElement;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.custom.CLabel;\r\n+import org.eclipse.swt.events.SelectionAdapter;\r\n+import org.eclipse.swt.events.SelectionEvent;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Button;\r\n+import org.eclipse.swt.widgets.Combo;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Label;\r\n+import org.eclipse.swt.widgets.Table;\r\n+import org.eclipse.ui.dialogs.PatternFilter;\r\n+import org.eclipse.ui.fieldassist.ContentAssistCommandAdapter;\r\n+import org.eclipse.ui.texteditor.ITextEditorActionDefinitionIds;\r\n+import org.polarsys.capella.core.model.handler.command.CapellaResourceHelper;\r\n+import org.polarsys.capella.core.sirius.ui.helper.SessionHelper;\r\n+import org.polarsys.capella.core.ui.search.searchfor.CapellaLeftSearchForContainerArea;\r\n+import org.polarsys.capella.core.ui.search.searchfor.CapellaRightSearchForContainerArea;\r\n+import org.polarsys.capella.test.framework.helpers.TestHelper;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxMzE1MQ=="}, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5MzcyOA==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r380093728", "createdAt": "2020-02-17T10:16:34Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchPage.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.EnumMap;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+import java.util.Set;\r\n+import java.util.function.Predicate;\r\n+import java.util.stream.Collectors;\r\n+\r\n+import javax.swing.JTable;\r\n+import org.eclipse.core.internal.resources.File;\r\n+import org.eclipse.core.resources.IFile;\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.IWorkspaceRoot;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.eclipse.core.runtime.IStatus;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EReference;\r\n+import org.eclipse.jface.dialogs.Dialog;\r\n+import org.eclipse.jface.dialogs.DialogPage;\r\n+import org.eclipse.jface.dialogs.MessageDialog;\r\n+import org.eclipse.jface.fieldassist.ComboContentAdapter;\r\n+import org.eclipse.jface.layout.GridDataFactory;\r\n+import org.eclipse.jface.layout.GridLayoutFactory;\r\n+import org.eclipse.jface.resource.JFaceColors;\r\n+import org.eclipse.jface.text.FindReplaceDocumentAdapterContentProposalProvider;\r\n+import org.eclipse.jface.viewers.CheckboxTableViewer;\r\n+import org.eclipse.jface.viewers.Viewer;\r\n+import org.eclipse.search.ui.IReplacePage;\r\n+import org.eclipse.search.ui.ISearchPage;\r\n+import org.eclipse.search.ui.ISearchPageContainer;\r\n+import org.eclipse.search.ui.NewSearchUI;\r\n+import org.eclipse.sirius.business.api.dialect.DialectManager;\r\n+import org.eclipse.sirius.business.api.session.Session;\r\n+import org.eclipse.sirius.business.api.session.SessionManager;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationDescriptor;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationElement;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.custom.CLabel;\r\n+import org.eclipse.swt.events.SelectionAdapter;\r\n+import org.eclipse.swt.events.SelectionEvent;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Button;\r\n+import org.eclipse.swt.widgets.Combo;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Label;\r\n+import org.eclipse.swt.widgets.Table;\r\n+import org.eclipse.ui.dialogs.PatternFilter;\r\n+import org.eclipse.ui.fieldassist.ContentAssistCommandAdapter;\r\n+import org.eclipse.ui.texteditor.ITextEditorActionDefinitionIds;\r\n+import org.polarsys.capella.core.model.handler.command.CapellaResourceHelper;\r\n+import org.polarsys.capella.core.sirius.ui.helper.SessionHelper;\r\n+import org.polarsys.capella.core.ui.search.searchfor.CapellaLeftSearchForContainerArea;\r\n+import org.polarsys.capella.core.ui.search.searchfor.CapellaRightSearchForContainerArea;\r\n+import org.polarsys.capella.test.framework.helpers.TestHelper;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxMzE1MQ=="}, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTk1MDI4OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/MetaClassesParticipantsItemProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxNDowNlrOFosWcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxODowM1rOFqfI6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDAwMQ==", "bodyText": "Add org.eclipse.sirius.diagram to MANIFEST.MF", "url": "https://github.com/eclipse/capella/pull/65#discussion_r378214001", "createdAt": "2020-02-12T12:14:06Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/MetaClassesParticipantsItemProvider.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search.searchfor;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EAttribute;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EClassifier;\r\n+import org.eclipse.emf.ecore.EPackage;\r\n+import org.eclipse.sirius.business.api.dialect.DialectManager;\r\n+import org.eclipse.sirius.business.api.session.Session;\r\n+import org.eclipse.sirius.diagram.DiagramPackage;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5NDY5Ng==", "bodyText": "I have: org.eclipse.sirius.common.ui.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r380094696", "createdAt": "2020-02-17T10:18:03Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/MetaClassesParticipantsItemProvider.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search.searchfor;\r\n+\r\n+import java.util.Collection;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.core.resources.IProject;\r\n+import org.eclipse.core.resources.ResourcesPlugin;\r\n+import org.eclipse.emf.common.util.EList;\r\n+import org.eclipse.emf.ecore.EAttribute;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.EClassifier;\r\n+import org.eclipse.emf.ecore.EPackage;\r\n+import org.eclipse.sirius.business.api.dialect.DialectManager;\r\n+import org.eclipse.sirius.business.api.session.Session;\r\n+import org.eclipse.sirius.diagram.DiagramPackage;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDAwMQ=="}, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzOTk1NDY4OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchPage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjoxNTozMVrOFosZAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxODowOFrOFqfJCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDY1Nw==", "bodyText": "Remove unused imports. There are many of them.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r378214657", "createdAt": "2020-02-12T12:15:31Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchPage.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxNzkxMA==", "bodyText": "OK", "url": "https://github.com/eclipse/capella/pull/65#discussion_r378317910", "createdAt": "2020-02-12T15:19:16Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchPage.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDY1Nw=="}, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5NDczMQ==", "bodyText": "Done.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r380094731", "createdAt": "2020-02-17T10:18:08Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchPage.java", "diffHunk": "@@ -0,0 +1,389 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxNDY1Nw=="}, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDA0MDU4OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchSettingsHistory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo0NToyNVrOFotMow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNToxOToyNlrOFoysxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNzg3NQ==", "bodyText": "Could you try to abstract this class and CapellaReplaceHistory to have a common class since they have a lot in common?", "url": "https://github.com/eclipse/capella/pull/65#discussion_r378227875", "createdAt": "2020-02-12T12:45:25Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchSettingsHistory.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.jface.dialogs.IDialogSettings;\r\n+\r\n+public class CapellaSearchSettingsHistory {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMxODAyMQ==", "bodyText": "Ok", "url": "https://github.com/eclipse/capella/pull/65#discussion_r378318021", "createdAt": "2020-02-12T15:19:26Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/CapellaSearchSettingsHistory.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.eclipse.jface.dialogs.IDialogSettings;\r\n+\r\n+public class CapellaSearchSettingsHistory {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyNzg3NQ=="}, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDA0NzAxOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/AbstractCapellaSearchForContainerArea.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMjo0NzozN1rOFotQqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDoxOToyNVrOFqfLlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyODkwNA==", "bodyText": "Could you avoid using deprecated methods if possible in this class (e.g. setSorter)?", "url": "https://github.com/eclipse/capella/pull/65#discussion_r378228904", "createdAt": "2020-02-12T12:47:37Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/AbstractCapellaSearchForContainerArea.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search.searchfor;\r\n+\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.emf.common.notify.AdapterFactory;\r\n+import org.eclipse.emf.ecore.EAttribute;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.ENamedElement;\r\n+import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.ComposedAdapterFactory;\r\n+import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;\r\n+import org.eclipse.jface.operation.IRunnableWithProgress;\r\n+import org.eclipse.jface.viewers.CheckboxTreeViewer;\r\n+import org.eclipse.jface.viewers.IStructuredContentProvider;\r\n+import org.eclipse.jface.viewers.TreePath;\r\n+import org.eclipse.jface.viewers.Viewer;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationDescriptor;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationElement;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.events.SelectionEvent;\r\n+import org.eclipse.swt.events.SelectionListener;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Button;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.ui.IWorkbench;\r\n+import org.eclipse.ui.PlatformUI;\r\n+import org.eclipse.ui.dialogs.PatternFilter;\r\n+import org.eclipse.ui.progress.IProgressService;\r\n+import org.polarsys.capella.core.ui.search.Activator;\r\n+import org.polarsys.capella.core.ui.search.Messages;\r\n+import org.polarsys.capella.core.data.capellamodeller.provider.CapellaModellerEditPlugin;\r\n+\r\n+public abstract class AbstractCapellaSearchForContainerArea {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5NTM4Mw==", "bodyText": "II removed deprecated except two more which I noted it: PatternConstructor.createPattern, viewer.setAllChecked.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r380095383", "createdAt": "2020-02-17T10:19:25Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/AbstractCapellaSearchForContainerArea.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search.searchfor;\r\n+\r\n+import java.lang.reflect.InvocationTargetException;\r\n+import java.net.URL;\r\n+import java.util.ArrayList;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.core.runtime.Status;\r\n+import org.eclipse.emf.common.notify.AdapterFactory;\r\n+import org.eclipse.emf.ecore.EAttribute;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.emf.ecore.ENamedElement;\r\n+import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;\r\n+import org.eclipse.emf.edit.provider.ComposedAdapterFactory;\r\n+import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;\r\n+import org.eclipse.jface.operation.IRunnableWithProgress;\r\n+import org.eclipse.jface.viewers.CheckboxTreeViewer;\r\n+import org.eclipse.jface.viewers.IStructuredContentProvider;\r\n+import org.eclipse.jface.viewers.TreePath;\r\n+import org.eclipse.jface.viewers.Viewer;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationDescriptor;\r\n+import org.eclipse.sirius.viewpoint.DRepresentationElement;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.events.SelectionEvent;\r\n+import org.eclipse.swt.events.SelectionListener;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Button;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.ui.IWorkbench;\r\n+import org.eclipse.ui.PlatformUI;\r\n+import org.eclipse.ui.dialogs.PatternFilter;\r\n+import org.eclipse.ui.progress.IProgressService;\r\n+import org.polarsys.capella.core.ui.search.Activator;\r\n+import org.polarsys.capella.core.ui.search.Messages;\r\n+import org.polarsys.capella.core.data.capellamodeller.provider.CapellaModellerEditPlugin;\r\n+\r\n+public abstract class AbstractCapellaSearchForContainerArea {\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyODkwNA=="}, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDUzMDM0OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/ModelSearchImagesUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDo1OTo1MVrOFox6Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNDo1OTo1MVrOFox6Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMwNTAzOQ==", "bodyText": "There are some problems with this class. It not only recreates images but also maintains a map of ImageDescriptor which is already done with the ExtendedImageRegistry. This causes performance issue and code redundancy. Moreover, it's not generic. Capella's elements are treated separately than diagram elements, viewpoint elements, etc.\nIMO, there are 2 solutions: 1) Create dummy objects of eClasses just to get their label and image (using EObjectLabelProviderHelper). We've already done this in Capella in org.polarsys.capella.core.ui.metric.actions.MetricAction.\n2) More complicated but I think feasible. Contribute a new class (e.g. EClassLabelProviderHelper) to get label and image from EClass. From an EClass we can get the Package URI and then get the ItemProviderAdapterFactory (contributed via org.eclipse.emf.edit.itemProviderAdapterFactories extension point). From the ItemProviderAdapterFactory we can determine the .edit bundle (e.g. org.polarsys.capella.core.data.gen.edit in Capella). With the bundle we can get the image (like what you've done) with ExtendedImageRegistry.INSTANCE.getImageDescriptor. For the label, we can inspire from the method org.eclipse.emf.common.EMFPlugin.InternalHelper.getString(String, boolean).", "url": "https://github.com/eclipse/capella/pull/65#discussion_r378305039", "createdAt": "2020-02-12T14:59:51Z", "author": {"login": "minhtutonthat"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/ModelSearchImagesUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search.searchfor;\r\n+\r\n+import java.net.URL;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.core.runtime.FileLocator;\r\n+import org.eclipse.core.runtime.Path;\r\n+import org.eclipse.jface.resource.ImageDescriptor;\r\n+import org.eclipse.swt.graphics.Image;\r\n+import org.osgi.framework.Bundle;\r\n+\r\n+/**\r\n+ * Utility class for images\r\n+ */\r\n+public final class ModelSearchImagesUtil {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f433e930f1bef11bb4735f446147bf1cca4e48"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Nzc1MDMwOnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoxNjoxM1rOFxHdOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNDoxNjoxM1rOFxHdOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA0NjcxMw==", "bodyText": "I will delete this function in next commit.", "url": "https://github.com/eclipse/capella/pull/65#discussion_r387046713", "createdAt": "2020-03-03T14:16:13Z", "author": {"login": "georgiana-ecobici"}, "path": "core/plugins/org.polarsys.capella.core.ui.search/src/org/polarsys/capella/core/ui/search/searchfor/CapellaLeftSearchForContainerArea.java", "diffHunk": "@@ -0,0 +1,273 @@\n+/*******************************************************************************\r\n+ * Copyright (c) 2020 THALES GLOBAL SERVICES.\r\n+ * All rights reserved. This program and the accompanying materials\r\n+ * are made available under the terms of the Eclipse Public License v1.0\r\n+ * which accompanies this distribution, and is available at\r\n+ * http://www.eclipse.org/legal/epl-v10.html\r\n+ *  \r\n+ * Contributors:\r\n+ *    Thales - initial API and implementation\r\n+ *******************************************************************************/\r\n+package org.polarsys.capella.core.ui.search.searchfor;\r\n+\r\n+import java.lang.reflect.InvocationTargetException;\r\n+\r\n+import org.eclipse.core.resources.IProjectDescription;\r\n+import org.eclipse.core.runtime.CoreException;\r\n+import org.eclipse.core.runtime.IProgressMonitor;\r\n+import org.eclipse.emf.ecore.EClass;\r\n+import org.eclipse.jface.layout.GridDataFactory;\r\n+import org.eclipse.jface.layout.GridLayoutFactory;\r\n+import org.eclipse.jface.operation.IRunnableWithProgress;\r\n+import org.eclipse.jface.viewers.CheckStateChangedEvent;\r\n+import org.eclipse.jface.viewers.CheckboxTreeViewer;\r\n+import org.eclipse.jface.viewers.ICheckStateListener;\r\n+import org.eclipse.jface.viewers.Viewer;\r\n+import org.eclipse.swt.SWT;\r\n+import org.eclipse.swt.events.SelectionAdapter;\r\n+import org.eclipse.swt.events.SelectionEvent;\r\n+import org.eclipse.swt.events.SelectionListener;\r\n+import org.eclipse.swt.layout.GridData;\r\n+import org.eclipse.swt.layout.GridLayout;\r\n+import org.eclipse.swt.widgets.Button;\r\n+import org.eclipse.swt.widgets.Composite;\r\n+import org.eclipse.swt.widgets.Group;\r\n+import org.eclipse.swt.widgets.Text;\r\n+import org.eclipse.ui.IWorkbench;\r\n+import org.eclipse.ui.PlatformUI;\r\n+import org.eclipse.ui.dialogs.PatternFilter;\r\n+import org.eclipse.ui.progress.IProgressService;\r\n+import org.polarsys.capella.core.ui.search.CapellaSearchConstants;\r\n+import org.polarsys.capella.core.ui.search.CapellaSearchPage;\r\n+\r\n+public class CapellaLeftSearchForContainerArea extends AbstractCapellaSearchForContainerArea {\r\n+  protected AbstractMetaModelParticipantsItemProvider partictipantsItemProvider;\r\n+  Button checkboxFilterAbstract;\r\n+  Button checkboxFilterSemantic;\r\n+\r\n+  public CapellaLeftSearchForContainerArea(Group parent, CapellaSearchPage searchPage) {\r\n+    super(parent, null, searchPage);\r\n+  }\r\n+\r\n+  @Override\r\n+  protected AbstractMetaModelParticipantsItemProvider getPartictipantsItemProvider() {\r\n+    if (partictipantsItemProvider == null) {\r\n+      partictipantsItemProvider = new MetaClassesParticipantsItemProvider(this);\r\n+    }\r\n+    return partictipantsItemProvider;\r\n+  }\r\n+\r\n+  protected PatternFilter createPatternFilter() {\r\n+    return new PatternFilter() {\r\n+      @Override\r\n+      public Object[] filter(Viewer viewer, Object parent, Object[] elements) {\r\n+        Object[] result = super.filter(viewer, parent, elements);\r\n+        if (parent != null) {\r\n+          if (parent.equals(\"\")) {\r\n+            displayedElements.clear();\r\n+            for (Object element : result) {\r\n+              updateDisplayedElements(filter(viewer, element, partictipantsItemProvider.getChildren(element)));\r\n+            }\r\n+          }\r\n+        }\r\n+        return result;\r\n+      }\r\n+\r\n+      private void updateDisplayedElements(Object[] elements) {\r\n+        for (Object displayedElement : elements) {\r\n+          if (displayedElement instanceof EClass) {\r\n+            displayedElements.add(displayedElement);\r\n+          }\r\n+        }\r\n+      }\r\n+    };\r\n+  }\r\n+\r\n+  @Override\r\n+  protected void setCheckSubtree() {\r\n+    ((CheckboxTreeViewer) filteredTree.getViewer()).addCheckStateListener(getCheckStateListener());\r\n+  }\r\n+\r\n+  private ICheckStateListener getCheckStateListener() {\r\n+    return new ICheckStateListener() {\r\n+      public void checkStateChanged(final CheckStateChangedEvent event) {\r\n+        CheckboxTreeViewer viewer = (CheckboxTreeViewer) filteredTree.getViewer();\r\n+        boolean state = event.getChecked();\r\n+        Object parent = event.getElement();\r\n+        if (state == true)\r\n+          checkedElements.add(parent);\r\n+        else\r\n+          checkedElements.remove(parent);\r\n+\r\n+        // handle the inheritance check propagation\r\n+        Object[] changedObjects = partictipantsItemProvider.getChildren(parent);\r\n+\r\n+        for (Object obj : changedObjects) {\r\n+          viewer.setChecked(obj, state);\r\n+          if (state == true) {\r\n+            checkedElements.add(obj);\r\n+          } else {\r\n+            checkedElements.remove(obj);\r\n+          }\r\n+        }\r\n+\r\n+        searchPage.updateValidationStatus(searchPage.getCapellaSearchSettings().validate());\r\n+        // setSearchMetaClasses, beside the metaclass it contains also the category (Diagram Elements or Model Elements)\r\n+        searchPage.getCapellaSearchSettings().setSearchMetaClasses(checkedElements);\r\n+        // refresh the attributes in right panel\r\n+        if (otherSideArea != null) {\r\n+          otherSideArea.filteredTree.getViewer().refresh();\r\n+        }\r\n+      }\r\n+    };\r\n+  }\r\n+\r\n+  public void createFiltercontainer(Group parentGroup) {\r\n+    Group searchForSelectionGroup = new Group(parentGroup, SWT.NONE);\r\n+    GridLayoutFactory.swtDefaults().numColumns(2).applyTo(searchForSelectionGroup);\r\n+\r\n+    GridData gdGrp = new GridData(GridData.FILL_BOTH);\r\n+    gdGrp.widthHint = 50;\r\n+    searchForSelectionGroup.setLayoutData(gdGrp);\r\n+\r\n+    searchForSelectionGroup.setText(CapellaSearchConstants.Filters_Label);\r\n+    checkboxFilterAbstract = createCheckboxFilters(searchForSelectionGroup, CapellaSearchConstants.Abstract_Label,\r\n+        false);\r\n+    checkboxFilterSemantic = createCheckboxFilters(searchForSelectionGroup, CapellaSearchConstants.Semantic_Label,\r\n+        true);\r\n+  }\r\n+\r\n+  private Button createCheckboxFilters(Composite group, String label, boolean selected) {\r\n+    Button checkboxFilters = new Button(group, SWT.CHECK);\r\n+    checkboxFilters.setText(label);\r\n+    GridDataFactory.swtDefaults().align(SWT.FILL, SWT.CENTER).applyTo(checkboxFilters);\r\n+    checkboxFilters.setFont(group.getFont());\r\n+    checkboxFilters.setSelection(selected);\r\n+\r\n+    checkboxFilters.addSelectionListener(new SelectionAdapter() {\r\n+      @Override\r\n+      public void widgetSelected(SelectionEvent e) {\r\n+        applyFilter();\r\n+      }\r\n+    });\r\n+    return checkboxFilters;\r\n+  }\r\n+\r\n+  protected void applyFilter() {\r\n+    IRunnableWithProgress runnable = new IRunnableWithProgress() {\r\n+      @Override\r\n+      public void run(IProgressMonitor monitor) throws InvocationTargetException {\r\n+        CheckboxTreeViewer checkboxTreeViewer = (CheckboxTreeViewer) filteredTree.getViewer();\r\n+        MetaClassesParticipantsItemProvider provider = (MetaClassesParticipantsItemProvider) getPartictipantsItemProvider();\r\n+        provider.setShowAbstract(checkboxFilterAbstract.getSelection());\r\n+        provider.setShowSemantics(checkboxFilterSemantic.getSelection());\r\n+        checkboxTreeViewer.refresh();\r\n+        checkboxTreeViewer.expandAll();\r\n+      }\r\n+    };\r\n+    IProgressService service = PlatformUI.getWorkbench().getProgressService();\r\n+    try {\r\n+      service.run(false, false, runnable);\r\n+    } catch (InterruptedException e) {\r\n+      e.printStackTrace();\r\n+    } catch (InvocationTargetException e) {\r\n+      e.printStackTrace();\r\n+    }\r\n+  }\r\n+\r\n+  public void addFilters() {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b994bb865c874368514db470598ae2e786da42"}, "originalPosition": 178}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4360, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}