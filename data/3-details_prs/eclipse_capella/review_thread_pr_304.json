{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2ODYyNTQw", "number": 304, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDowOToxOFrOEQF1YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoxMDoyNFrOEQF3VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzA4MjU3OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.model.handler/src/org/polarsys/capella/core/model/handler/helpers/CapellaAdapterHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDowOToxOFrOG0EMKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDowOToxOFrOG0EMKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0Nzc4NQ==", "bodyText": "can you reformat this file, there is tab instead of spaces.", "url": "https://github.com/eclipse/capella/pull/304#discussion_r457247785", "createdAt": "2020-07-20T10:09:18Z", "author": {"login": "pdulth"}, "path": "core/plugins/org.polarsys.capella.core.model.handler/src/org/polarsys/capella/core/model/handler/helpers/CapellaAdapterHelper.java", "diffHunk": "@@ -34,191 +34,218 @@\n  */\r\n public class CapellaAdapterHelper {\r\n \r\n-  /**\r\n-   * Returns the semantic element for the given object.\r\n-   * \r\n-   * @see it is similar than resolveSemanticObject(object, false) It shall have be called resolveEObject.\r\n-   * \r\n-   * @param object\r\n-   *          must not be a list\r\n-   */\r\n-  @Deprecated\r\n-  public static EObject resolveSemanticObject(Object object) {\r\n-    return resolveEObject(object);\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns the semantic element for the given object.\r\n-   * \r\n-   * @see it is similar than resolveSemanticObject(object, false)\r\n-   * \r\n-   * @param object\r\n-   *          must not be a list\r\n-   */\r\n-  public static EObject resolveEObject(Object object) {\r\n-    return resolveSemanticObject(object, false);\r\n-  }\r\n-\r\n-  /**\r\n-   * Returns the semantic element for the given object. According to onlySemantic, if the element is a Sirius\r\n-   * representation, it returns the semantic element associated.\r\n-   */\r\n-  public static EObject resolveSemanticObject(Object object, boolean onlySemantic) {\r\n-    if (object instanceof EObject) {\r\n-      return resolveEObject(object, onlySemantic);\r\n-\r\n-    } else if (object instanceof IAdaptable) {\r\n-      EObject adapter = ((IAdaptable) object).getAdapter(EObject.class);\r\n-      if (adapter == null) {\r\n-        return resolveEObject(object, onlySemantic);\r\n-      }\r\n-      return resolveEObject(adapter, onlySemantic);\r\n-    }\r\n-\r\n-    return null;\r\n-  }\r\n-\r\n-  /**\r\n-   * This method returns the list of EObject from the given objects.\r\n-   */\r\n-  public static Collection<EObject> resolveEObjects(Collection<?> objects) {\r\n-    return resolveSemanticObjects(objects, false);\r\n-  }\r\n-\r\n-  /**\r\n-   * This method returns the list of semantic objects from the given objects.\r\n-   */\r\n-  public static Collection<EObject> resolveSemanticsObjects(Collection<?> objects) {\r\n-    return resolveSemanticObjects(objects, true);\r\n-  }\r\n-\r\n-  /**\r\n-   * This method returns the list of EObject from the given objects.\r\n-   */\r\n-  public static Collection<EObject> resolveSemanticObjects(Collection<?> objects, boolean onlySemantic) {\r\n-    return objects.stream() //\r\n-        .map(x -> resolveSemanticObject(x, onlySemantic)) //\r\n-        .filter(Objects::nonNull) //\r\n-        .collect(Collectors.toList());\r\n-  }\r\n-\r\n-  /**\r\n-   * This method\r\n-   */\r\n-  private static EObject resolveEObject(Object object, boolean onlySemantic) {\r\n-    if ((object instanceof DRepresentationDescriptor) || (object instanceof DRepresentation)) {\r\n-      if (onlySemantic) {\r\n-        if (object instanceof DSemanticDecorator) {\r\n-          return ((DSemanticDecorator) object).getTarget();\r\n-        } else if (object instanceof DRepresentationDescriptor) {\r\n-          return ((DRepresentationDescriptor) object).getTarget();\r\n-        }\r\n-      } else {\r\n-        if (object instanceof DRepresentation) {\r\n-          return RepresentationHelper.getRepresentationDescriptor((DRepresentation) object);\r\n-        }\r\n-        return (EObject) object;\r\n-      }\r\n-    }\r\n-    return getBusinessObject(object);\r\n-  }\r\n-\r\n-  /**\r\n-   * Business level adaptation\r\n-   * \r\n-   * @param object\r\n-   */\r\n-  private static EObject getBusinessObject(Object object) {\r\n-    if (object != null) {\r\n-      if (CapellaResourceHelper.isSemanticElement(object)) {\r\n-        return getRelatedSemanticObject((EObject) object);\r\n-      }\r\n-      EObject obj = Adapters.adapt(object, Element.class, true);\r\n-      if (obj != null) {\r\n-        // null can happen when we try to adapt a non semantic element (notes, text, ...)\r\n-        if ((obj instanceof Project || null != obj.eContainer()) && (null != obj.eResource())) {\r\n-          // null can happen when a diagram shows a deleted element\r\n-          return getRelatedSemanticObject(obj);\r\n-        }\r\n-      }\r\n-    }\r\n-    return null;\r\n-  }\r\n-\r\n-  /**\r\n-   * @param object\r\n-   *          object to adapt\r\n-   * @return adapted object\r\n-   */\r\n-  private static EObject getRelatedSemanticObject(EObject object) {\r\n-    if (object.eClass().equals(CsPackage.eINSTANCE.getPart())) {\r\n-      boolean allowMultiplePart = TriStateBoolean.True.equals(CapellaProjectHelper.isReusableComponentsDriven(object));\r\n-      if (!allowMultiplePart) {\r\n-        AbstractType type = ((Part) object).getAbstractType();\r\n-        if ((type != null) && !(type instanceof ConfigurationItem)) {\r\n-          return type;\r\n-        }\r\n-      }\r\n-    }\r\n-    return object;\r\n-  }\r\n-  \r\n-  /**\r\n-   * This method returns the list of EObject from the given objects.\r\n-   */\r\n-  public static Collection<EObject> resolveEObjects(Collection<?> objects, boolean onlySemantic, boolean onlyBusiness) {\r\n-    return objects.stream() //\r\n-        .map(x -> resolveEObject(x, onlySemantic, onlyBusiness)) //\r\n-        .filter(Objects::nonNull) //\r\n-        .collect(Collectors.toList());\r\n-  }\r\n-  \r\n-  /**\r\n-   * Resolve EObject\r\n-   * \r\n-   * @param onlySemantic:\r\n-   *          if false, the element is a graphical element, return the related Sirius object, otherwise, return the\r\n-   *          semantic element behind it\r\n-   * @param onlyBusiness:\r\n-   *          if true, if the returned element is a semantic element, retrieve the user most convenient one behind it.\r\n-   */\r\n-  public static EObject resolveEObject(Object object, boolean onlySemantic, boolean onlyBusiness) {\r\n-    EObject result = null;\r\n-    EObject adapt = null;\r\n-    if (object instanceof DRepresentation) {\r\n-      object = RepresentationHelper.getRepresentationDescriptor((DRepresentation) object);\r\n-    }\r\n-\r\n-    adapt = Adapters.adapt(object, EObject.class, true);\r\n-    if (adapt instanceof EObject) {\r\n-      result = (EObject) adapt;\r\n-    }\r\n-    if (onlySemantic) {\r\n-      if (result instanceof DSemanticDecorator) {\r\n-        result = ((DSemanticDecorator) result).getTarget();\r\n-\r\n-      } else if (result instanceof DRepresentationDescriptor) {\r\n-        result = ((DRepresentationDescriptor) result).getTarget();\r\n-      }\r\n-\r\n-      adapt = Adapters.adapt(result, Element.class, true);\r\n-      if (adapt instanceof Element) {\r\n-        result = (Element) adapt;\r\n-      }\r\n-      if (result instanceof Element) {\r\n-        // null can happen when we try to adapt a non semantic element (notes, text, ...)\r\n-        if (!((object instanceof Project || null != ((EObject) result).eContainer())\r\n-            && (null != ((EObject) result).eResource()))) {\r\n-          // null can happen when a diagram shows a deleted element\r\n-          return null;\r\n-        }\r\n-      }\r\n-    }\r\n-    if (onlyBusiness) {\r\n-      if (result instanceof Element) {\r\n-        result = getBusinessObject((Element) result);\r\n-      }\r\n-    }\r\n-    return result;\r\n-  }\r\n+\t/**\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31710d2245795e581a363e46bf38110d1c26fad0"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzA4NzU2OnYy", "diffSide": "RIGHT", "path": "core/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/sections/DescriptionPropertySection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoxMDoyNFrOG0EPEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoxMDoyNFrOG0EPEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0ODUzMA==", "bodyText": "diagram but w/e", "url": "https://github.com/eclipse/capella/pull/304#discussion_r457248530", "createdAt": "2020-07-20T10:10:24Z", "author": {"login": "pdulth"}, "path": "core/plugins/org.polarsys.capella.core.ui.properties.richtext/src/org/polarsys/capella/core/ui/properties/richtext/sections/DescriptionPropertySection.java", "diffHunk": "@@ -77,6 +80,15 @@ public void dispose() {\n     }\n   }\n \n+  @Override\n+  protected EObject adaptElement(EObject object) {\n+    // We want to add description on descriptors, so we don't adapt it to its semantic element", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31710d2245795e581a363e46bf38110d1c26fad0"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4227, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}