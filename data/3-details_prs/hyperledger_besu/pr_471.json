{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4OTg1MzM4", "number": 471, "title": "Now members of on chain privacy groups can be re-added after they hav\u2026", "bodyText": "Now members of on chain privacy groups can be re-added after they have been removed.\n\nFixes #455\nAdded an acceptance test for that.\n\nSigned-off-by: Stefan Pingel stefan.pingel@consensys.net", "createdAt": "2020-03-16T04:45:28Z", "url": "https://github.com/hyperledger/besu/pull/471", "merged": true, "mergeCommit": {"oid": "da75f9cba46efb9ddb0f2d036520ea4326b873c3"}, "closed": true, "closedAt": "2020-03-18T05:08:08Z", "author": {"login": "pinges"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOGnfNgH2gAyMzg4OTg1MzM4OmIzZmRhNGI2NWIwYzFlZWVlZDdiZWI1MWIzNmViNGMzZmFmNDEyNmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOwKZIgFqTM3NjU2NzM1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "author": {"user": {"login": "pinges", "name": "Stefan Pingel"}}, "url": "https://github.com/hyperledger/besu/commit/b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e", "committedDate": "2020-03-16T04:43:35Z", "message": "Now members of on chain privacy groups can be re-added after they have been removed\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjIzNzI3", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375623727", "createdAt": "2020-03-16T22:25:21Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoyNToyMVrOF3Hu1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoyNToyMVrOF3Hu1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0MjY3OA==", "bodyText": "We should rename this variable to contract or something.", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393342678", "createdAt": "2020-03-16T22:25:21Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -364,6 +368,23 @@ public PrivxCreatePrivacyGroupResponse privxCreatePrivacyGroup(\n         GetCodeResponse.class);\n   }\n \n+  public Request<?, EthCall> privCall(\n+      final String privacyGroupId,\n+      final Contract eventEmitter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI0ODI0", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375624824", "createdAt": "2020-03-16T22:27:15Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoyNzoxNVrOF3HzQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoyNzoxNVrOF3HzQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0MzgwOQ==", "bodyText": "We should probably replace code for result in this assertion msg.", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393343809", "createdAt": "2020-03-16T22:27:15Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCallTransaction.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+import org.web3j.protocol.core.methods.response.EthCall;\n+import org.web3j.tx.Contract;\n+\n+public class PrivCallTransaction implements Transaction<EthCall> {\n+\n+  private final String privacyGroupId;\n+  private final Contract contract;\n+  private final String encoded;\n+  private final String blockNumberLatestPending;\n+\n+  public PrivCallTransaction(\n+      final String privacyGroupId, final Contract contract, final String encoded) {\n+    this(privacyGroupId, contract, encoded, \"latest\");\n+  }\n+\n+  public PrivCallTransaction(\n+      final String privacyGroupId,\n+      final Contract contract,\n+      final String encoded,\n+      final String blockNumberLatestPending) {\n+    this.privacyGroupId = privacyGroupId;\n+    this.contract = contract;\n+    this.encoded = encoded;\n+    this.blockNumberLatestPending = blockNumberLatestPending;\n+  }\n+\n+  @Override\n+  public EthCall execute(final NodeRequests node) {\n+    try {\n+      final EthCall response =\n+          node.privacy()\n+              .privCall(privacyGroupId, contract, encoded, blockNumberLatestPending)\n+              .send();\n+      assertThat(response).as(\"check response is not null\").isNotNull();\n+      assertThat(response.getResult()).as(\"check code in response isn't null\").isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI1Mjg3", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375625287", "createdAt": "2020-03-16T22:28:23Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoyODoyM1rOF3H1ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoyODoyM1rOF3H1ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NDQxOQ==", "bodyText": "I'd like to see a more descriptive name in this test. Something like memberCanBeAddedAfterBeingRemoved or something similar.", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393344419", "createdAt": "2020-03-16T22:28:23Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI1OTc0", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375625974", "createdAt": "2020-03-16T22:29:59Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoyOTo1OVrOF3H5Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoyOTo1OVrOF3H5Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NTM0Nw==", "bodyText": "I don't think VALUE_WHILE_BOB_MEMBER and VALUE_WHILE_BOB_REMOVED need to be class-level constants. They can be local variables.", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393345347", "createdAt": "2020-03-16T22:29:59Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI2MjIy", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375626222", "createdAt": "2020-03-16T22:30:35Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMDozNVrOF3H6xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMDozNVrOF3H6xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NTczNQ==", "bodyText": "Can this method be private?", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393345735", "createdAt": "2020-03-16T22:30:35Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobRemoved =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_REMOVED); // bob rehydrated the transaction that updated the eventEmitter\n+    // value\n+\n+    PrivateTransactionReceipt receipt =\n+        bob.execute(\n+            privacyTransactions.getPrivateTransactionReceipt(\n+                receiptWhileBobRemoved.getcommitmentHash()));\n+    assertThat(receipt.getStatus()).isEqualTo(\"0x1\");\n+\n+    receipt =\n+        bob.execute(\n+            privacyTransactions.getPrivateTransactionReceipt(\n+                receiptWhileBobMember.getcommitmentHash()));\n+    assertThat(receipt.getStatus()).isEqualTo(\"0x1\");\n+  }\n+\n+  PrivateTransactionReceipt setEventEmitterValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI2Mjcw", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375626270", "createdAt": "2020-03-16T22:30:41Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMDo0MVrOF3H7BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMDo0MVrOF3H7BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NTc5Ng==", "bodyText": "Can this method be private?", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393345796", "createdAt": "2020-03-16T22:30:41Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobRemoved =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_REMOVED); // bob rehydrated the transaction that updated the eventEmitter\n+    // value\n+\n+    PrivateTransactionReceipt receipt =\n+        bob.execute(\n+            privacyTransactions.getPrivateTransactionReceipt(\n+                receiptWhileBobRemoved.getcommitmentHash()));\n+    assertThat(receipt.getStatus()).isEqualTo(\"0x1\");\n+\n+    receipt =\n+        bob.execute(\n+            privacyTransactions.getPrivateTransactionReceipt(\n+                receiptWhileBobMember.getcommitmentHash()));\n+    assertThat(receipt.getStatus()).isEqualTo(\"0x1\");\n+  }\n+\n+  PrivateTransactionReceipt setEventEmitterValue(\n+      final String privacyGroupId, final EventEmitter eventEmitter, final int value) {\n+    final String aliceStoreHash1 =\n+        alice.execute(\n+            privateContractTransactions.callOnChainPermissioningSmartContract(\n+                eventEmitter.getContractAddress(),\n+                eventEmitter.store(BigInteger.valueOf(value)).encodeFunctionCall(),\n+                alice.getTransactionSigningKey(),\n+                POW_CHAIN_ID,\n+                alice.getEnclaveKey(),\n+                privacyGroupId));\n+\n+    final PrivateTransactionReceipt receipt =\n+        alice.execute(privacyTransactions.getPrivateTransactionReceipt(aliceStoreHash1));\n+    assertThat(receipt.getStatus()).isEqualTo(\"0x1\");\n+    return receipt;\n+  }\n+\n+  void checkEmitterValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI3MjQ4", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375627248", "createdAt": "2020-03-16T22:33:15Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMzoxNVrOF3H_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMzoxNVrOF3H_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0Njk3OQ==", "bodyText": "It would be good to use the \"concise\" version of this.\nlockPrivacyGroup(privacyGroupId, alice);", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393346979", "createdAt": "2020-03-16T22:33:15Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI3NTQ3", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375627547", "createdAt": "2020-03-16T22:33:55Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMzo1NlrOF3IAsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozMzo1NlrOF3IAsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NzI1MQ==", "bodyText": "Same here, it would be good to use the \"concise\" version:\naddMembersToPrivacyGroup(privacyGroupId, alice, bob);", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393347251", "createdAt": "2020-03-16T22:33:56Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI4MzI0", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375628324", "createdAt": "2020-03-16T22:35:47Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozNTo0N1rOF3IDPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozNTo0N1rOF3IDPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0NzkwMA==", "bodyText": "This seems to be repeated pattern in this test.\n\nChange the contract value\nCheck the expected value for members.\n\nAny chance that we can encapsulate this logic into a method and reuse across this test? It should make the test more readable.\nSomething like:\nchangeContractValueAndCheck(privacyGroupId, contract, members, expectedValue);", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393347900", "createdAt": "2020-03-16T22:35:47Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobRemoved =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI4Njc5", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375628679", "createdAt": "2020-03-16T22:36:41Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozNjo0MlrOF3IEhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozNjo0MlrOF3IEhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODIyOQ==", "bodyText": "Please use:\nremoveFromPrivacyGroup(privacyGroupId, alice, bob);", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393348229", "createdAt": "2020-03-16T22:36:42Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjI5MTIw", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375629120", "createdAt": "2020-03-16T22:37:50Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozNzo1MFrOF3IF3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozNzo1MFrOF3IF3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODU3Mg==", "bodyText": "Please use:\nlockPrivacyGroup(privacyGroupId, alice);\naddMembersToPrivacyGroup(privacyGroupId, alice, bob);", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393348572", "createdAt": "2020-03-16T22:37:50Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -103,6 +106,96 @@ public void canAddParticipantToGroup() {\n     charlie.verify(privateTransactionVerifier.existingPrivateTransactionReceipt(commitmentHash));\n   }\n \n+  @Test\n+  public void aliceCanAddRemoveAddBob() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(alice);\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n+\n+    final EventEmitter eventEmitter = deployEventEmitterContract(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobMember =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+    checkEmitterValue(bob, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_MEMBER);\n+\n+    alice.execute(privacyTransactions.removeFromPrivacyGroup(privacyGroupId, alice, bob));\n+\n+    checkOnChainPrivacyGroupExists(privacyGroupId, alice);\n+\n+    final PrivateTransactionReceipt receiptWhileBobRemoved =\n+        setEventEmitterValue(privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(alice, privacyGroupId, eventEmitter, VALUE_WHILE_BOB_REMOVED);\n+    checkEmitterValue(\n+        bob,\n+        privacyGroupId,\n+        eventEmitter,\n+        VALUE_WHILE_BOB_MEMBER); // bob did not get the last transaction\n+\n+    alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjMwNDE1", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375630415", "createdAt": "2020-03-16T22:41:07Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0MTowN1rOF3IKBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0MTowN1rOF3IKBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0OTYzOQ==", "bodyText": "lockPrivacyGroup(privacyGroupId, alice);\naddMembersToPrivacyGroup(privacyGroupId, alice, bob);", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393349639", "createdAt": "2020-03-16T22:41:07Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -122,13 +215,13 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n         .verify(eventEmitter);\n \n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroup(privacyGroupId, alice));\n+        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n \n     alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjMwNTYy", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375630562", "createdAt": "2020-03-16T22:41:28Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0MToyOFrOF3IKdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0MToyOFrOF3IKdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0OTc0OQ==", "bodyText": "lockPrivacyGroup(privacyGroupId, bob);", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393349749", "createdAt": "2020-03-16T22:41:28Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -122,13 +215,13 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n         .verify(eventEmitter);\n \n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroup(privacyGroupId, alice));\n+        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n \n     alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    bob.execute(privacyTransactions.privxLockPrivacyGroup(privacyGroupId, bob));\n+    bob.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, bob));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjMxMzUy", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375631352", "createdAt": "2020-03-16T22:43:27Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0MzoyN1rOF3IM2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0MzoyN1rOF3IM2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MDM2Mw==", "bodyText": "Maybe this should be a debug or trace level?", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393350363", "createdAt": "2020-03-16T22:43:27Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java", "diffHunk": "@@ -95,31 +118,97 @@ public Result processBlock(\n                             .getPrivateTransaction()\n                             .getPrivacyGroupId()\n                             .get());\n-                if (!preProcessPrivacyGroupHeadBlockMap.containsKey(privacyGroupId)) {\n+\n+                final List<PrivateTransactionWithMetadata> actualList =\n+                    createActualList(\n+                        blockHeader, privateTransactionWithMetadataList, privacyGroupId);\n+\n+                if (actualList.size() > 0) {\n+                  LOG.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjMyNTgy", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-375632582", "createdAt": "2020-03-16T22:46:30Z", "commit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0NjozMFrOF3IQ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0NjozMFrOF3IQ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTM5Ng==", "bodyText": "I feel like if we move this logic into its own class (e.g. PrivateTransactionRehydrationSelector (or something with a better name) we could have multiple unit tests to guarantee the different possible logical paths.\nAnd the unit tests could help one understand the different scenarios.\nMaybe we don't do it now, but it would be a good thing.", "url": "https://github.com/hyperledger/besu/pull/471#discussion_r393351396", "createdAt": "2020-03-16T22:46:30Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/PrivacyBlockProcessor.java", "diffHunk": "@@ -95,31 +118,97 @@ public Result processBlock(\n                             .getPrivateTransaction()\n                             .getPrivacyGroupId()\n                             .get());\n-                if (!preProcessPrivacyGroupHeadBlockMap.containsKey(privacyGroupId)) {\n+\n+                final List<PrivateTransactionWithMetadata> actualList =\n+                    createActualList(\n+                        blockHeader, privateTransactionWithMetadataList, privacyGroupId);\n+\n+                if (actualList.size() > 0) {\n+                  LOG.info(\n+                      \"Rehydrating privacy group {}, number of transactions to be rehydrated is {} out of a total number of {} transactions.\",\n+                      privacyGroupId.toString(),\n+                      actualList.size(),\n+                      privateTransactionWithMetadataList.size());\n                   final PrivateStateRehydration privateStateRehydration =\n                       new PrivateStateRehydration(\n                           privateStateStorage,\n                           blockchain,\n                           protocolSchedule,\n                           publicWorldStateArchive,\n                           privateWorldStateArchive);\n-                  privateStateRehydration.rehydrate(privateTransactionWithMetadataList);\n+                  privateStateRehydration.rehydrate(actualList);\n                   privateStateStorage.updater().putAddDataKey(privacyGroupId, addKey).commit();\n                 }\n               } catch (final EnclaveClientException e) {\n-                // we were not being added\n+                // we were not being added because we have not found the add blob\n               }\n             });\n-    final PrivacyGroupHeadBlockMap privacyGroupHeadBlockMap =\n-        new PrivacyGroupHeadBlockMap(\n+  }\n+\n+  private List<PrivateTransactionWithMetadata> createActualList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3fda4b65b0c1eeeed7beb51b36eb4c3faf4126e"}, "originalPosition": 97}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77016b56487db74216cef871ed21a8e78054f280", "author": {"user": {"login": "pinges", "name": "Stefan Pingel"}}, "url": "https://github.com/hyperledger/besu/commit/77016b56487db74216cef871ed21a8e78054f280", "committedDate": "2020-03-17T01:00:15Z", "message": "fix conflicts\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4130e74357678732ce0bb10c1e2848a0a891576f", "author": {"user": {"login": "pinges", "name": "Stefan Pingel"}}, "url": "https://github.com/hyperledger/besu/commit/4130e74357678732ce0bb10c1e2848a0a891576f", "committedDate": "2020-03-17T03:57:46Z", "message": "Lucas' comments\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c750dc3b19e53adf097bc989d012ae3c2e219646", "author": {"user": {"login": "pinges", "name": "Stefan Pingel"}}, "url": "https://github.com/hyperledger/besu/commit/c750dc3b19e53adf097bc989d012ae3c2e219646", "committedDate": "2020-03-18T04:46:25Z", "message": "Merge branch 'master' into fixReadd"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTY3MzU2", "url": "https://github.com/hyperledger/besu/pull/471#pullrequestreview-376567356", "createdAt": "2020-03-18T05:07:49Z", "commit": {"oid": "c750dc3b19e53adf097bc989d012ae3c2e219646"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1831, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}