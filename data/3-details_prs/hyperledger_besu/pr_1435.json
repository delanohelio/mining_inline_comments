{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMTUwNDIx", "number": 1435, "title": "Added NodeSmartContractV2PermissioningController", "bodyText": "PR description\n\nCreated AbstractNodeSmartContractPermissioningController that contains some of the shared functionality between all smart contract-based node permissioning providers.\nAdded NodeSmartContractV2PermissioningController that conforms with the updated Node Permissioning EEA interface.\nCreated a new config in SmartContractPermissioningConfiguration that is used in NodePermissioningControllerFactory to choose the right smart contract permissioning provider (EEA v1 or v2) - currently it defaults to 1 (EEA v1 interface).\nCreated CLI option that will set the correct value on SmartContractPermissioningConfiguration (nodeSmartContractInterfaceVersion).\nTests :)\n\nNote about EEA compatibility:\nIt looks like the final change on the return type from byte32 to bool hasn't been accepted yet. However, I believe it is likely to be. The discussion can be seen here: EntEthAlliance/client-spec#902\nChangelog\n\n I thought about the changelog and included a changelog update if required.", "createdAt": "2020-10-08T19:51:39Z", "url": "https://github.com/hyperledger/besu/pull/1435", "merged": true, "mergeCommit": {"oid": "112e7535cc170cb1eb1a1b53749ecd2f5c9753a4"}, "closed": true, "closedAt": "2020-10-19T03:41:00Z", "author": {"login": "lucassaldanha"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRrQRFAFqTUwNjI1ODY1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdT6gY2AH2gAyNTAwMTUwNDIxOjY5NDBkOWNkN2JiYzczZTJhZTYwYjkzNjVmMDBjYmRmZWEzYzBmNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MjU4NjU5", "url": "https://github.com/hyperledger/besu/pull/1435#pullrequestreview-506258659", "createdAt": "2020-10-12T02:36:11Z", "commit": {"oid": "dde420b35359c613760597cc3cd065513a288e0b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMjozNjoxMVrOHftRVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMzoxNzoxN1rOHftyww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAwOTYyMQ==", "bodyText": "what is the -1 value?", "url": "https://github.com/hyperledger/besu/pull/1435#discussion_r503009621", "createdAt": "2020-10-12T02:36:11Z", "author": {"login": "macfarla"}, "path": "ethereum/permissioning/src/main/java/org/hyperledger/besu/ethereum/permissioning/NodeSmartContractV2PermissioningController.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.permissioning;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.p2p.peers.EnodeURL;\n+import org.hyperledger.besu.ethereum.transaction.CallParameter;\n+import org.hyperledger.besu.ethereum.transaction.TransactionSimulator;\n+import org.hyperledger.besu.ethereum.transaction.TransactionSimulatorResult;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+\n+import java.net.InetAddress;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.web3j.abi.FunctionEncoder;\n+import org.web3j.abi.TypeEncoder;\n+import org.web3j.abi.datatypes.Bool;\n+import org.web3j.abi.datatypes.Function;\n+\n+/**\n+ * Controller that can read from a smart contract that exposes the EEA node permissioning v2 call\n+ * connectionAllowed(string,bytes16,uint16)\n+ */\n+public class NodeSmartContractV2PermissioningController\n+    extends AbstractNodeSmartContractPermissioningController {\n+\n+  final Bytes TRUE_RESPONSE = Bytes.fromHexString(TypeEncoder.encode(new Bool(true)));\n+  final Bytes FALSE_RESPONSE = Bytes.fromHexString(TypeEncoder.encode(new Bool(false)));\n+\n+  public NodeSmartContractV2PermissioningController(\n+      final Address contractAddress,\n+      final TransactionSimulator transactionSimulator,\n+      final MetricsSystem metricsSystem) {\n+    super(contractAddress, transactionSimulator, metricsSystem);\n+  }\n+\n+  @Override\n+  boolean checkSmartContractRules(final EnodeURL sourceEnode, final EnodeURL destinationEnode) {\n+    return isPermitted(sourceEnode) && isPermitted(destinationEnode);\n+  }\n+\n+  private boolean isPermitted(final EnodeURL enode) {\n+    final Bytes payload = createPayload(enode);\n+    final CallParameter callParams =\n+        new CallParameter(null, contractAddress, -1, null, null, payload);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde420b35359c613760597cc3cd065513a288e0b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAxODE3OQ==", "bodyText": "this is duplicated on the new V2 controller", "url": "https://github.com/hyperledger/besu/pull/1435#discussion_r503018179", "createdAt": "2020-10-12T03:17:17Z", "author": {"login": "macfarla"}, "path": "ethereum/permissioning/src/main/java/org/hyperledger/besu/ethereum/permissioning/NodeSmartContractPermissioningController.java", "diffHunk": "@@ -61,58 +55,19 @@ private static Bytes hashSignature(final String signature) {\n   private static final Bytes FALSE_RESPONSE =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde420b35359c613760597cc3cd065513a288e0b"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dde420b35359c613760597cc3cd065513a288e0b", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/dde420b35359c613760597cc3cd065513a288e0b", "committedDate": "2020-10-08T20:09:21Z", "message": "Spotless :)\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}, "afterCommit": {"oid": "931c230884cae0e54d419c44c77955b6657dd245", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/931c230884cae0e54d419c44c77955b6657dd245", "committedDate": "2020-10-13T05:40:27Z", "message": "Added unit tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "931c230884cae0e54d419c44c77955b6657dd245", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/931c230884cae0e54d419c44c77955b6657dd245", "committedDate": "2020-10-13T05:40:27Z", "message": "Added unit tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}, "afterCommit": {"oid": "6a7f15baf4973da8e452a135af574529d486ab53", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/6a7f15baf4973da8e452a135af574529d486ab53", "committedDate": "2020-10-13T05:48:53Z", "message": "Added unit tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a7f15baf4973da8e452a135af574529d486ab53", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/6a7f15baf4973da8e452a135af574529d486ab53", "committedDate": "2020-10-13T05:48:53Z", "message": "Added unit tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}, "afterCommit": {"oid": "1c202990ec4b13439fee00491ed56fde19ecfc57", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/1c202990ec4b13439fee00491ed56fde19ecfc57", "committedDate": "2020-10-13T07:43:36Z", "message": "Added unit tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c202990ec4b13439fee00491ed56fde19ecfc57", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/1c202990ec4b13439fee00491ed56fde19ecfc57", "committedDate": "2020-10-13T07:43:36Z", "message": "Added unit tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}, "afterCommit": {"oid": "fda1b7c9b407f5767d09fd03e792b68c525fafe7", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/fda1b7c9b407f5767d09fd03e792b68c525fafe7", "committedDate": "2020-10-14T02:26:38Z", "message": "Added unit tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fda1b7c9b407f5767d09fd03e792b68c525fafe7", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/fda1b7c9b407f5767d09fd03e792b68c525fafe7", "committedDate": "2020-10-14T02:26:38Z", "message": "Added unit tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}, "afterCommit": {"oid": "62b258aea269119ebbf087401e329c58e68b8f0f", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/62b258aea269119ebbf087401e329c58e68b8f0f", "committedDate": "2020-10-15T05:50:58Z", "message": "Added unit and acceptance tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b3a716c0c2dbc60b9f5224604eb17bdde16277f", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/9b3a716c0c2dbc60b9f5224604eb17bdde16277f", "committedDate": "2020-10-16T01:05:19Z", "message": "Added NodeSmartContractV2PermissioningController\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3df9050e208bfa670a6df07c98b48c226e0d915f", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/3df9050e208bfa670a6df07c98b48c226e0d915f", "committedDate": "2020-10-16T01:05:19Z", "message": "Spotless :)\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80850c51f5fa9bbfde4168a73209dabb2f1d6964", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/80850c51f5fa9bbfde4168a73209dabb2f1d6964", "committedDate": "2020-10-16T01:05:19Z", "message": "Added unit and acceptance tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd955697b5559fd2d6feaf4e04dbd18cf2806f4b", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/dd955697b5559fd2d6feaf4e04dbd18cf2806f4b", "committedDate": "2020-10-16T01:09:19Z", "message": "Changelog entry\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62b258aea269119ebbf087401e329c58e68b8f0f", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/62b258aea269119ebbf087401e329c58e68b8f0f", "committedDate": "2020-10-15T05:50:58Z", "message": "Added unit and acceptance tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}, "afterCommit": {"oid": "dd955697b5559fd2d6feaf4e04dbd18cf2806f4b", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/dd955697b5559fd2d6feaf4e04dbd18cf2806f4b", "committedDate": "2020-10-16T01:09:19Z", "message": "Changelog entry\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "702c1a5dae36ea6b7c911c61d3dea207fe2eacf1", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/702c1a5dae36ea6b7c911c61d3dea207fe2eacf1", "committedDate": "2020-10-16T01:51:20Z", "message": "Updating tests\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMDE3MTgw", "url": "https://github.com/hyperledger/besu/pull/1435#pullrequestreview-511017180", "createdAt": "2020-10-17T21:44:23Z", "commit": {"oid": "702c1a5dae36ea6b7c911c61d3dea207fe2eacf1"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMTo0NDoyM1rOHjgC7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QyMjowNDo1NlrOHjgI-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4NzI0NA==", "bodyText": "is there an EEA version to link to?", "url": "https://github.com/hyperledger/besu/pull/1435#discussion_r506987244", "createdAt": "2020-10-17T21:44:23Z", "author": {"login": "macfarla"}, "path": "CHANGELOG.md", "diffHunk": "@@ -4,6 +4,7 @@\n * `--random-peer-priority-enabled` flag added. Allows for incoming connections to be prioritized randomly. This will prevent (typically small, stable) networks from forming impenetrable peer cliques. [#1440](https://github.com/hyperledger/besu/pull/1440)\n * Hide deprecated `--host-whitelist` option. [\\#1444](https://github.com/hyperledger/besu/pull/1444)\n * Prioritize high gas prices during mining. Previously we ordered only by the order in which the transactions were received. This will increase expected profit when mining. [\\#1449](https://github.com/hyperledger/besu/pull/1449)\n+* Added support for the updated smart contract-based node permissioning EEA interface. [\\#1435](https://github.com/hyperledger/besu/pull/1435)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "702c1a5dae36ea6b7c911c61d3dea207fe2eacf1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4NzQ1MQ==", "bodyText": "connectionAllowedFunction?", "url": "https://github.com/hyperledger/besu/pull/1435#discussion_r506987451", "createdAt": "2020-10-17T21:46:57Z", "author": {"login": "macfarla"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/perm/NodeSmartContractPermissioningConnectionIsAllowedV2Transaction.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.perm;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.p2p.peers.EnodeURL;\n+import org.hyperledger.besu.ethereum.permissioning.NodeSmartContractV2PermissioningController;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.RunnableNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.web3j.abi.FunctionEncoder;\n+import org.web3j.abi.datatypes.Function;\n+import org.web3j.protocol.core.DefaultBlockParameterName;\n+\n+public class NodeSmartContractPermissioningConnectionIsAllowedV2Transaction\n+    implements Transaction<Boolean> {\n+\n+  private final Address contractAddress;\n+  private final Node node;\n+\n+  public NodeSmartContractPermissioningConnectionIsAllowedV2Transaction(\n+      final Address contractAddress, final Node node) {\n+    this.contractAddress = contractAddress;\n+    this.node = node;\n+  }\n+\n+  @Override\n+  public Boolean execute(final NodeRequests node) {\n+    try {\n+      final String value =\n+          node.eth().ethCall(payload(), DefaultBlockParameterName.LATEST).send().getValue();\n+      return Bytes.fromHexString(value)\n+          .equals(NodeSmartContractV2PermissioningController.TRUE_RESPONSE);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private org.web3j.protocol.core.methods.request.Transaction payload() {\n+    final EnodeURL enodeURL = EnodeURL.fromURI(((RunnableNode) node).enodeUrl());\n+    final Bytes payload = createPayload(enodeURL);\n+\n+    return org.web3j.protocol.core.methods.request.Transaction.createFunctionCallTransaction(\n+        null, null, null, null, contractAddress.toString(), payload.toString());\n+  }\n+\n+  private Bytes createPayload(final EnodeURL enodeUrl) {\n+    try {\n+      final String hexNodeIdString = enodeUrl.getNodeId().toUnprefixedHexString();\n+      final byte[] ip = NodeSmartContractV2PermissioningController.encodeIp(enodeUrl.getIp());\n+      final int port = enodeUrl.getListeningPortOrZero();\n+\n+      final Function addNodeFunction =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "702c1a5dae36ea6b7c911c61d3dea207fe2eacf1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4NzU4MQ==", "bodyText": "removeNodeFunction", "url": "https://github.com/hyperledger/besu/pull/1435#discussion_r506987581", "createdAt": "2020-10-17T21:49:11Z", "author": {"login": "macfarla"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/perm/NodeSmartContractPermissioningForbidNodeV2Transaction.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.perm;\n+\n+import static org.web3j.utils.Numeric.toHexString;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.p2p.peers.EnodeURL;\n+import org.hyperledger.besu.ethereum.permissioning.NodeSmartContractV2PermissioningController;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.RunnableNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.web3j.abi.FunctionEncoder;\n+import org.web3j.abi.datatypes.Function;\n+import org.web3j.crypto.RawTransaction;\n+import org.web3j.crypto.TransactionEncoder;\n+\n+public class NodeSmartContractPermissioningForbidNodeV2Transaction implements Transaction<Hash> {\n+\n+  private final Account sender;\n+  private final Address contractAddress;\n+  private final Node node;\n+\n+  public NodeSmartContractPermissioningForbidNodeV2Transaction(\n+      final Account sender, final Address contractAddress, final Node node) {\n+    this.sender = sender;\n+    this.contractAddress = contractAddress;\n+    this.node = node;\n+  }\n+\n+  @Override\n+  public Hash execute(final NodeRequests node) {\n+    final String signedTransactionData = signedTransactionData();\n+    try {\n+      String hash =\n+          node.eth().ethSendRawTransaction(signedTransactionData).send().getTransactionHash();\n+      return Hash.fromHexString(hash);\n+    } catch (final IOException e) {\n+      throw new RuntimeException(e);\n+    }\n+  }\n+\n+  private String signedTransactionData() {\n+    final EnodeURL enodeURL = EnodeURL.fromURI(((RunnableNode) node).enodeUrl());\n+    final Bytes payload = createPayload(enodeURL);\n+\n+    RawTransaction transaction =\n+        RawTransaction.createTransaction(\n+            sender.getNextNonce(),\n+            BigInteger.valueOf(1000),\n+            BigInteger.valueOf(3_000_000L),\n+            contractAddress.toString(),\n+            payload.toString());\n+\n+    return toHexString(\n+        TransactionEncoder.signMessage(transaction, sender.web3jCredentialsOrThrow()));\n+  }\n+\n+  private Bytes createPayload(final EnodeURL enodeUrl) {\n+    try {\n+      final String hexNodeIdString = enodeUrl.getNodeId().toUnprefixedHexString();\n+      final byte[] ip = NodeSmartContractV2PermissioningController.encodeIp(enodeUrl.getIp());\n+      final int port = enodeUrl.getListeningPortOrZero();\n+\n+      final Function addNodeFunction =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "702c1a5dae36ea6b7c911c61d3dea207fe2eacf1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4Nzk3Ng==", "bodyText": "is it worth adding verify(connectionNotAllowed(forbiddenNode))", "url": "https://github.com/hyperledger/besu/pull/1435#discussion_r506987976", "createdAt": "2020-10-17T21:54:30Z", "author": {"login": "macfarla"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/permissioning/NodeSmartContractPermissioningV2AcceptanceTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.permissioning;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class NodeSmartContractPermissioningV2AcceptanceTest\n+    extends NodeSmartContractPermissioningV2AcceptanceTestBase {\n+\n+  private Node bootnode;\n+  private Node permissionedNode;\n+  private Node allowedNode;\n+  private Node forbiddenNode;\n+\n+  @Before\n+  public void setUp() {\n+    bootnode = bootnode(\"bootnode\");\n+    forbiddenNode = node(\"forbidden-node\");\n+    allowedNode = node(\"allowed-node\");\n+    permissionedNode = permissionedNode(\"permissioned-node\");\n+\n+    permissionedCluster.start(bootnode, forbiddenNode, allowedNode, permissionedNode);\n+\n+    // updating permissioning smart contract with allowed nodes\n+\n+    permissionedNode.execute(allowNode(bootnode));\n+    permissionedNode.verify(connectionIsAllowed(bootnode));\n+\n+    permissionedNode.execute(allowNode(allowedNode));\n+    permissionedNode.verify(connectionIsAllowed(allowedNode));\n+\n+    permissionedNode.execute(allowNode(permissionedNode));\n+    permissionedNode.verify(connectionIsAllowed(permissionedNode));\n+  }\n+\n+  @Test\n+  public void permissionedNodeShouldPeerOnlyWithAllowedNodes() {\n+    bootnode.verify(net.awaitPeerCount(3));\n+    allowedNode.verify(net.awaitPeerCount(3));\n+    forbiddenNode.verify(net.awaitPeerCount(2));\n+    permissionedNode.verify(net.awaitPeerCount(2));\n+  }\n+\n+  @Test\n+  public void permissionedNodeShouldDisconnectFromNodeNotPermittedAnymore() {\n+    permissionedNode.verify(admin.addPeer(bootnode));\n+    permissionedNode.verify(admin.addPeer(allowedNode));\n+    permissionedNode.verify(net.awaitPeerCount(2));\n+\n+    permissionedNode.execute(forbidNode(allowedNode));\n+    permissionedNode.verify(connectionIsForbidden(allowedNode));\n+\n+    permissionedNode.verify(net.awaitPeerCount(1));\n+  }\n+\n+  @Test\n+  public void permissionedNodeShouldConnectToNewlyPermittedNode() {\n+    permissionedNode.verify(admin.addPeer(bootnode));\n+    permissionedNode.verify(admin.addPeer(allowedNode));\n+    permissionedNode.verify(net.awaitPeerCount(2));\n+\n+    permissionedNode.execute(allowNode(forbiddenNode));\n+    permissionedNode.verify(connectionIsAllowed(forbiddenNode));\n+    permissionedNode.verify(admin.addPeer(forbiddenNode));\n+\n+    permissionedNode.verify(net.awaitPeerCount(3));\n+  }\n+\n+  @Test\n+  public void permissioningUpdatesPropagateThroughNetwork() {\n+    permissionedNode.verify(admin.addPeer(bootnode));\n+    permissionedNode.verify(admin.addPeer(allowedNode));\n+    permissionedNode.verify(net.awaitPeerCount(2));\n+\n+    // permissioning changes in peer should propagate to permissioned node\n+    allowedNode.execute(allowNode(forbiddenNode));\n+    allowedNode.verify(connectionIsAllowed(forbiddenNode));\n+    permissionedNode.verify(connectionIsAllowed(forbiddenNode));\n+\n+    permissionedNode.verify(admin.addPeer(forbiddenNode));\n+    permissionedNode.verify(net.awaitPeerCount(3));\n+  }\n+\n+  @Test\n+  public void onChainPermissioningAllowlistShouldPersistAcrossRestarts() {\n+    permissionedCluster.stop();\n+    permissionedCluster.start(bootnode, forbiddenNode, allowedNode, permissionedNode);\n+\n+    permissionedNode.verify(connectionIsAllowed(allowedNode));\n+    permissionedNode.verify(connectionIsAllowed(bootnode));\n+    permissionedNode.verify(connectionIsAllowed(permissionedNode));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "702c1a5dae36ea6b7c911c61d3dea207fe2eacf1"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODMxNQ==", "bodyText": "final", "url": "https://github.com/hyperledger/besu/pull/1435#discussion_r506988315", "createdAt": "2020-10-17T21:58:40Z", "author": {"login": "macfarla"}, "path": "ethereum/permissioning/src/main/java/org/hyperledger/besu/ethereum/permissioning/NodeSmartContractV2PermissioningController.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.permissioning;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.p2p.peers.EnodeURL;\n+import org.hyperledger.besu.ethereum.transaction.CallParameter;\n+import org.hyperledger.besu.ethereum.transaction.TransactionSimulator;\n+import org.hyperledger.besu.ethereum.transaction.TransactionSimulatorResult;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+\n+import java.net.InetAddress;\n+import java.util.List;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.web3j.abi.FunctionEncoder;\n+import org.web3j.abi.TypeEncoder;\n+import org.web3j.abi.datatypes.Bool;\n+import org.web3j.abi.datatypes.Function;\n+\n+/**\n+ * Controller that can read from a smart contract that exposes the EEA node permissioning v2 call\n+ * connectionAllowed(string,bytes16,uint16)\n+ */\n+public class NodeSmartContractV2PermissioningController\n+    extends AbstractNodeSmartContractPermissioningController {\n+\n+  public static final Bytes TRUE_RESPONSE = Bytes.fromHexString(TypeEncoder.encode(new Bool(true)));\n+  public static Bytes FALSE_RESPONSE = Bytes.fromHexString(TypeEncoder.encode(new Bool(false)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "702c1a5dae36ea6b7c911c61d3dea207fe2eacf1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk4ODc5NQ==", "bodyText": "is this needed? no other changes in this test", "url": "https://github.com/hyperledger/besu/pull/1435#discussion_r506988795", "createdAt": "2020-10-17T22:04:56Z", "author": {"login": "macfarla"}, "path": "ethereum/permissioning/src/test/java/org/hyperledger/besu/ethereum/permissioning/node/NodePermissioningControllerFactoryTest.java", "diffHunk": "@@ -55,6 +56,11 @@\n   SmartContractPermissioningConfiguration smartContractPermissioningConfiguration;\n   PermissioningConfiguration config;\n \n+  @Before\n+  public void before() {\n+    when(transactionSimulator.doesAddressExistAtHead(any())).thenReturn(Optional.of(true));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "702c1a5dae36ea6b7c911c61d3dea207fe2eacf1"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99f95133ee1c625d7925383e4bc72fdc6bd300e2", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/99f95133ee1c625d7925383e4bc72fdc6bd300e2", "committedDate": "2020-10-19T02:11:05Z", "message": "PR comments\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6940d9cd7bbc73e2ae60b9365f00cbdfea3c0f65", "author": {"user": {"login": "lucassaldanha", "name": "Lucas Saldanha"}}, "url": "https://github.com/hyperledger/besu/commit/6940d9cd7bbc73e2ae60b9365f00cbdfea3c0f65", "committedDate": "2020-10-19T02:11:40Z", "message": "Merge branch 'master' into node-perm-update\n\nSigned-off-by: Lucas Saldanha <lucascrsaldanha@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2199, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}