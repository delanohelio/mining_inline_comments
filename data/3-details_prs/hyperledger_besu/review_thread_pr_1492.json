{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MTk1ODEx", "number": 1492, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0Njo0N1rOEyBIsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNjo1NTowMFrOE2XkyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODgyODY2OnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0Njo0N1rOHobZBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODozODowMlrOHpLSLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1Mzg2Mw==", "bodyText": "What is instrumentation name used for?  I'm not seeing other classes use it, only a getter, constructor, and builder.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512153863", "createdAt": "2020-10-26T17:46:47Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "diffHunk": "@@ -30,12 +30,15 @@\n public class MetricsConfiguration {\n   private static final String DEFAULT_METRICS_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PORT = 9545;\n-\n+  private static final String DEFAULT_INSTRUMENTATION_NAME = \"besu\";\n+  private static final String DEFAULT_METRICS_PROTOCOL = \"prometheus\";\n   private static final String DEFAULT_METRICS_PUSH_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PUSH_PORT = 9001;\n   public static final Boolean DEFAULT_TIMERS_ENABLED = true;\n \n   private final boolean enabled;\n+  private final String instrumentationName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzODU0MA==", "bodyText": "I actually think it's best to match it to prometheus job name. I'll clean that up.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512938540", "createdAt": "2020-10-27T18:38:02Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "diffHunk": "@@ -30,12 +30,15 @@\n public class MetricsConfiguration {\n   private static final String DEFAULT_METRICS_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PORT = 9545;\n-\n+  private static final String DEFAULT_INSTRUMENTATION_NAME = \"besu\";\n+  private static final String DEFAULT_METRICS_PROTOCOL = \"prometheus\";\n   private static final String DEFAULT_METRICS_PUSH_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PUSH_PORT = 9001;\n   public static final Boolean DEFAULT_TIMERS_ENABLED = true;\n \n   private final boolean enabled;\n+  private final String instrumentationName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1Mzg2Mw=="}, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODgyOTc5OnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0NzowNFrOHobZtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTo1OTowNFrOHpOltg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDAzOA==", "bodyText": "This should be an enum and not a free string.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512154038", "createdAt": "2020-10-26T17:47:04Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "diffHunk": "@@ -30,12 +30,15 @@\n public class MetricsConfiguration {\n   private static final String DEFAULT_METRICS_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PORT = 9545;\n-\n+  private static final String DEFAULT_INSTRUMENTATION_NAME = \"besu\";\n+  private static final String DEFAULT_METRICS_PROTOCOL = \"prometheus\";\n   private static final String DEFAULT_METRICS_PUSH_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PUSH_PORT = 9001;\n   public static final Boolean DEFAULT_TIMERS_ENABLED = true;\n \n   private final boolean enabled;\n+  private final String instrumentationName;\n+  private final String protocol;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5MjY5NA==", "bodyText": "Fixed.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512992694", "createdAt": "2020-10-27T19:59:04Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "diffHunk": "@@ -30,12 +30,15 @@\n public class MetricsConfiguration {\n   private static final String DEFAULT_METRICS_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PORT = 9545;\n-\n+  private static final String DEFAULT_INSTRUMENTATION_NAME = \"besu\";\n+  private static final String DEFAULT_METRICS_PROTOCOL = \"prometheus\";\n   private static final String DEFAULT_METRICS_PUSH_HOST = \"127.0.0.1\";\n   public static final int DEFAULT_METRICS_PUSH_PORT = 9001;\n   public static final Boolean DEFAULT_TIMERS_ENABLED = true;\n \n   private final boolean enabled;\n+  private final String instrumentationName;\n+  private final String protocol;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NDAzOA=="}, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODgzOTIwOnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0OToxN1rOHobfiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOTozOTo1OVrOHoffbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NTUyOA==", "bodyText": "This split logic should be in a system neutral class.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512155528", "createdAt": "2020-10-26T17:49:17Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "diffHunk": "@@ -71,25 +72,38 @@ public static ObservableMetricsSystem init(final MetricsConfiguration metricsCon\n     if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n       return new NoOpMetricsSystem();\n     }\n-    final PrometheusMetricsSystem metricsSystem =\n-        new PrometheusMetricsSystem(\n-            metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.PROCESS)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.PROCESS,\n-          singleton(new StandardExports().register(metricsSystem.registry)));\n-    }\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.JVM)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.JVM,\n-          asList(\n-              new MemoryPoolsExports().register(metricsSystem.registry),\n-              new BufferPoolsExports().register(metricsSystem.registry),\n-              new GarbageCollectorExports().register(metricsSystem.registry),\n-              new ThreadExports().register(metricsSystem.registry),\n-              new ClassLoadingExports().register(metricsSystem.registry)));\n+    if (PROMETHEUS_PROTOCOL.equals(metricsConfiguration.getProtocol())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5MjU0OQ==", "bodyText": "Sure, move it up to the ObservableMetricsSystem interface?", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512192549", "createdAt": "2020-10-26T18:49:27Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "diffHunk": "@@ -71,25 +72,38 @@ public static ObservableMetricsSystem init(final MetricsConfiguration metricsCon\n     if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n       return new NoOpMetricsSystem();\n     }\n-    final PrometheusMetricsSystem metricsSystem =\n-        new PrometheusMetricsSystem(\n-            metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.PROCESS)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.PROCESS,\n-          singleton(new StandardExports().register(metricsSystem.registry)));\n-    }\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.JVM)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.JVM,\n-          asList(\n-              new MemoryPoolsExports().register(metricsSystem.registry),\n-              new BufferPoolsExports().register(metricsSystem.registry),\n-              new GarbageCollectorExports().register(metricsSystem.registry),\n-              new ThreadExports().register(metricsSystem.registry),\n-              new ClassLoadingExports().register(metricsSystem.registry)));\n+    if (PROMETHEUS_PROTOCOL.equals(metricsConfiguration.getProtocol())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NTUyOA=="}, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMTAzNw==", "bodyText": "No, move it to a new system neutral class.  The interface is not the bootstrap.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512221037", "createdAt": "2020-10-26T19:39:59Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "diffHunk": "@@ -71,25 +72,38 @@ public static ObservableMetricsSystem init(final MetricsConfiguration metricsCon\n     if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n       return new NoOpMetricsSystem();\n     }\n-    final PrometheusMetricsSystem metricsSystem =\n-        new PrometheusMetricsSystem(\n-            metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.PROCESS)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.PROCESS,\n-          singleton(new StandardExports().register(metricsSystem.registry)));\n-    }\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.JVM)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.JVM,\n-          asList(\n-              new MemoryPoolsExports().register(metricsSystem.registry),\n-              new BufferPoolsExports().register(metricsSystem.registry),\n-              new GarbageCollectorExports().register(metricsSystem.registry),\n-              new ThreadExports().register(metricsSystem.registry),\n-              new ClassLoadingExports().register(metricsSystem.registry)));\n+    if (PROMETHEUS_PROTOCOL.equals(metricsConfiguration.getProtocol())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NTUyOA=="}, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODg0MDMwOnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0OTozMVrOHobgNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo0OTozMVrOHobgNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE1NTcwMQ==", "bodyText": "This init logic should be in an OTLP specific class.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512155701", "createdAt": "2020-10-26T17:49:31Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "diffHunk": "@@ -71,25 +72,38 @@ public static ObservableMetricsSystem init(final MetricsConfiguration metricsCon\n     if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n       return new NoOpMetricsSystem();\n     }\n-    final PrometheusMetricsSystem metricsSystem =\n-        new PrometheusMetricsSystem(\n-            metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.PROCESS)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.PROCESS,\n-          singleton(new StandardExports().register(metricsSystem.registry)));\n-    }\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.JVM)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.JVM,\n-          asList(\n-              new MemoryPoolsExports().register(metricsSystem.registry),\n-              new BufferPoolsExports().register(metricsSystem.registry),\n-              new GarbageCollectorExports().register(metricsSystem.registry),\n-              new ThreadExports().register(metricsSystem.registry),\n-              new ClassLoadingExports().register(metricsSystem.registry)));\n+    if (PROMETHEUS_PROTOCOL.equals(metricsConfiguration.getProtocol())) {\n+      final PrometheusMetricsSystem metricsSystem =\n+          new PrometheusMetricsSystem(\n+              metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n+      metricsSystem.initDefaults();\n+      return metricsSystem;\n+    } else if (OPENTELEMETRY_PROTOCOL.equals(metricsConfiguration.getProtocol())) {\n+      final OpenTelemetrySystem metricsSystem =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODg2NzQ2OnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzo1NjoxOFrOHobxEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODo1Mjo1NFrOHod4Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MDAxNw==", "bodyText": "These classes have JMX initialization in their constructors, so the if blocks checking on the category being enabled before being added to the collector needs to be preserved.\nYes, I know, side effects.  But fixing that is tangential to the scope of this PR.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512160017", "createdAt": "2020-10-26T17:56:18Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "diffHunk": "@@ -71,25 +72,38 @@ public static ObservableMetricsSystem init(final MetricsConfiguration metricsCon\n     if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n       return new NoOpMetricsSystem();\n     }\n-    final PrometheusMetricsSystem metricsSystem =\n-        new PrometheusMetricsSystem(\n-            metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.PROCESS)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.PROCESS,\n-          singleton(new StandardExports().register(metricsSystem.registry)));\n-    }\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.JVM)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.JVM,\n-          asList(\n-              new MemoryPoolsExports().register(metricsSystem.registry),\n-              new BufferPoolsExports().register(metricsSystem.registry),\n-              new GarbageCollectorExports().register(metricsSystem.registry),\n-              new ThreadExports().register(metricsSystem.registry),\n-              new ClassLoadingExports().register(metricsSystem.registry)));\n+    if (PROMETHEUS_PROTOCOL.equals(metricsConfiguration.getProtocol())) {\n+      final PrometheusMetricsSystem metricsSystem =\n+          new PrometheusMetricsSystem(\n+              metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n+      metricsSystem.initDefaults();\n+      return metricsSystem;\n+    } else if (OPENTELEMETRY_PROTOCOL.equals(metricsConfiguration.getProtocol())) {\n+      final OpenTelemetrySystem metricsSystem =\n+          new OpenTelemetrySystem(\n+              metricsConfiguration.getMetricCategories(),\n+              metricsConfiguration.isTimersEnabled(),\n+              metricsConfiguration.isPushEnabled());\n+      metricsSystem.initDefaults();\n+      return metricsSystem;\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Invalid metrics protocol \" + metricsConfiguration.getProtocol());\n     }\n-    return metricsSystem;\n+  }\n+\n+  private void initDefaults() {\n+    addCollector(StandardMetricCategory.PROCESS, new StandardExports());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5NDU2Ng==", "bodyText": "Ah, didn't catch that. Will work on that.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512194566", "createdAt": "2020-10-26T18:52:54Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/PrometheusMetricsSystem.java", "diffHunk": "@@ -71,25 +72,38 @@ public static ObservableMetricsSystem init(final MetricsConfiguration metricsCon\n     if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n       return new NoOpMetricsSystem();\n     }\n-    final PrometheusMetricsSystem metricsSystem =\n-        new PrometheusMetricsSystem(\n-            metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.PROCESS)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.PROCESS,\n-          singleton(new StandardExports().register(metricsSystem.registry)));\n-    }\n-    if (metricsSystem.isCategoryEnabled(StandardMetricCategory.JVM)) {\n-      metricsSystem.collectors.put(\n-          StandardMetricCategory.JVM,\n-          asList(\n-              new MemoryPoolsExports().register(metricsSystem.registry),\n-              new BufferPoolsExports().register(metricsSystem.registry),\n-              new GarbageCollectorExports().register(metricsSystem.registry),\n-              new ThreadExports().register(metricsSystem.registry),\n-              new ClassLoadingExports().register(metricsSystem.registry)));\n+    if (PROMETHEUS_PROTOCOL.equals(metricsConfiguration.getProtocol())) {\n+      final PrometheusMetricsSystem metricsSystem =\n+          new PrometheusMetricsSystem(\n+              metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n+      metricsSystem.initDefaults();\n+      return metricsSystem;\n+    } else if (OPENTELEMETRY_PROTOCOL.equals(metricsConfiguration.getProtocol())) {\n+      final OpenTelemetrySystem metricsSystem =\n+          new OpenTelemetrySystem(\n+              metricsConfiguration.getMetricCategories(),\n+              metricsConfiguration.isTimersEnabled(),\n+              metricsConfiguration.isPushEnabled());\n+      metricsSystem.initDefaults();\n+      return metricsSystem;\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Invalid metrics protocol \" + metricsConfiguration.getProtocol());\n     }\n-    return metricsSystem;\n+  }\n+\n+  private void initDefaults() {\n+    addCollector(StandardMetricCategory.PROCESS, new StandardExports());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2MDAxNw=="}, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODkwMzc4OnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowNTozOFrOHocHrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTo1ODo1NFrOHpOlQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NTgwNA==", "bodyText": "This isn't set anywhere.  There should be a CLI flag in BesuCommand.java.  Probably --metrics-protocol (around line 647) accepting the protocol enum and defaulting to prometheus (like we do for --sync-mode), then feeding that into the metrics config in the metricsConfiguration() method.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512165804", "createdAt": "2020-10-26T18:05:38Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "diffHunk": "@@ -207,6 +227,11 @@ public Builder enabled(final boolean enabled) {\n       return this;\n     }\n \n+    public Builder protocol(final String protocol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5MjU3Nw==", "bodyText": "Ok added.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512992577", "createdAt": "2020-10-27T19:58:54Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsConfiguration.java", "diffHunk": "@@ -207,6 +227,11 @@ public Builder enabled(final boolean enabled) {\n       return this;\n     }\n \n+    public Builder protocol(final String protocol) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NTgwNA=="}, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODkyNzgwOnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoxMTo0M1rOHocWdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoyNDowOVrOHpKw7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTU4OA==", "bodyText": "Export at 2Hz?  Is that a good idea performance wise?  I think you should use the metrics push interval from the MetricsConfiguration.  If we need to go faster than 1/sec we may need to adjust it somehow.  But I would need to be persuaded that pushing more than 1/sec is a good idea at scale.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512169588", "createdAt": "2020-10-26T18:11:43Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.metrics.opentelemetry;\n+\n+import org.hyperledger.besu.metrics.BesuMetricCategory;\n+import org.hyperledger.besu.metrics.ObservableMetricsSystem;\n+import org.hyperledger.besu.metrics.Observation;\n+import org.hyperledger.besu.metrics.StandardMetricCategory;\n+import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryUsage;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.metrics.DoubleValueObserver;\n+import io.opentelemetry.metrics.DoubleValueRecorder;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongSumObserver;\n+import io.opentelemetry.metrics.LongUpDownSumObserver;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+\n+/** Metrics system relying on the native OpenTelemetry format. */\n+public class OpenTelemetrySystem implements ObservableMetricsSystem {\n+  private static final String TYPE_LABEL_KEY = \"type\";\n+  private static final String AREA_LABEL_KEY = \"area\";\n+  private static final String POOL_LABEL_KEY = \"pool\";\n+  private static final String USED = \"used\";\n+  private static final String COMMITTED = \"committed\";\n+  private static final String MAX = \"max\";\n+  private static final String HEAP = \"heap\";\n+  private static final String NON_HEAP = \"non_heap\";\n+\n+  private final Set<MetricCategory> enabledCategories;\n+  private final boolean timersEnabled;\n+  private final Map<String, LabelledMetric<Counter>> cachedCounters = new ConcurrentHashMap<>();\n+  private final Map<String, LabelledMetric<OperationTimer>> cachedTimers =\n+      new ConcurrentHashMap<>();\n+  private final MeterSdkProvider meterSdkProvider = MeterSdkProvider.builder().build();\n+  private IntervalMetricReader periodicReader;\n+\n+  public OpenTelemetrySystem(\n+      final Set<MetricCategory> enabledCategories,\n+      final boolean timersEnabled,\n+      final boolean pushEnabled) {\n+    this.enabledCategories = ImmutableSet.copyOf(enabledCategories);\n+    this.timersEnabled = timersEnabled;\n+\n+    if (pushEnabled) {\n+      IntervalMetricReader.Builder builder =\n+          IntervalMetricReader.builder()\n+              .setMetricProducers(Collections.singleton(meterSdkProvider.getMetricProducer()))\n+              .setMetricExporter(OtlpGrpcMetricExporter.getDefault())\n+              .setExportIntervalMillis(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5NDIxNw==", "bodyText": "Right, sounds like a good config flag. I know Prometheus is routinely 5 to 10s. Otel can be faster, especially if you want to instrument realtime metrics. A good default is 5s.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512194217", "createdAt": "2020-10-26T18:52:18Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.metrics.opentelemetry;\n+\n+import org.hyperledger.besu.metrics.BesuMetricCategory;\n+import org.hyperledger.besu.metrics.ObservableMetricsSystem;\n+import org.hyperledger.besu.metrics.Observation;\n+import org.hyperledger.besu.metrics.StandardMetricCategory;\n+import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryUsage;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.metrics.DoubleValueObserver;\n+import io.opentelemetry.metrics.DoubleValueRecorder;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongSumObserver;\n+import io.opentelemetry.metrics.LongUpDownSumObserver;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+\n+/** Metrics system relying on the native OpenTelemetry format. */\n+public class OpenTelemetrySystem implements ObservableMetricsSystem {\n+  private static final String TYPE_LABEL_KEY = \"type\";\n+  private static final String AREA_LABEL_KEY = \"area\";\n+  private static final String POOL_LABEL_KEY = \"pool\";\n+  private static final String USED = \"used\";\n+  private static final String COMMITTED = \"committed\";\n+  private static final String MAX = \"max\";\n+  private static final String HEAP = \"heap\";\n+  private static final String NON_HEAP = \"non_heap\";\n+\n+  private final Set<MetricCategory> enabledCategories;\n+  private final boolean timersEnabled;\n+  private final Map<String, LabelledMetric<Counter>> cachedCounters = new ConcurrentHashMap<>();\n+  private final Map<String, LabelledMetric<OperationTimer>> cachedTimers =\n+      new ConcurrentHashMap<>();\n+  private final MeterSdkProvider meterSdkProvider = MeterSdkProvider.builder().build();\n+  private IntervalMetricReader periodicReader;\n+\n+  public OpenTelemetrySystem(\n+      final Set<MetricCategory> enabledCategories,\n+      final boolean timersEnabled,\n+      final boolean pushEnabled) {\n+    this.enabledCategories = ImmutableSet.copyOf(enabledCategories);\n+    this.timersEnabled = timersEnabled;\n+\n+    if (pushEnabled) {\n+      IntervalMetricReader.Builder builder =\n+          IntervalMetricReader.builder()\n+              .setMetricProducers(Collections.singleton(meterSdkProvider.getMetricProducer()))\n+              .setMetricExporter(OtlpGrpcMetricExporter.getDefault())\n+              .setExportIntervalMillis(500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTU4OA=="}, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIyMTg5Mg==", "bodyText": "if we need to we can add a --push-metrics-interval-unit that defaults to seconds, but if Otel doesn't need sub-second push frequency I'd prefer to push it off as long as possible.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512221892", "createdAt": "2020-10-26T19:41:26Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.metrics.opentelemetry;\n+\n+import org.hyperledger.besu.metrics.BesuMetricCategory;\n+import org.hyperledger.besu.metrics.ObservableMetricsSystem;\n+import org.hyperledger.besu.metrics.Observation;\n+import org.hyperledger.besu.metrics.StandardMetricCategory;\n+import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryUsage;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.metrics.DoubleValueObserver;\n+import io.opentelemetry.metrics.DoubleValueRecorder;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongSumObserver;\n+import io.opentelemetry.metrics.LongUpDownSumObserver;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+\n+/** Metrics system relying on the native OpenTelemetry format. */\n+public class OpenTelemetrySystem implements ObservableMetricsSystem {\n+  private static final String TYPE_LABEL_KEY = \"type\";\n+  private static final String AREA_LABEL_KEY = \"area\";\n+  private static final String POOL_LABEL_KEY = \"pool\";\n+  private static final String USED = \"used\";\n+  private static final String COMMITTED = \"committed\";\n+  private static final String MAX = \"max\";\n+  private static final String HEAP = \"heap\";\n+  private static final String NON_HEAP = \"non_heap\";\n+\n+  private final Set<MetricCategory> enabledCategories;\n+  private final boolean timersEnabled;\n+  private final Map<String, LabelledMetric<Counter>> cachedCounters = new ConcurrentHashMap<>();\n+  private final Map<String, LabelledMetric<OperationTimer>> cachedTimers =\n+      new ConcurrentHashMap<>();\n+  private final MeterSdkProvider meterSdkProvider = MeterSdkProvider.builder().build();\n+  private IntervalMetricReader periodicReader;\n+\n+  public OpenTelemetrySystem(\n+      final Set<MetricCategory> enabledCategories,\n+      final boolean timersEnabled,\n+      final boolean pushEnabled) {\n+    this.enabledCategories = ImmutableSet.copyOf(enabledCategories);\n+    this.timersEnabled = timersEnabled;\n+\n+    if (pushEnabled) {\n+      IntervalMetricReader.Builder builder =\n+          IntervalMetricReader.builder()\n+              .setMetricProducers(Collections.singleton(meterSdkProvider.getMetricProducer()))\n+              .setMetricExporter(OtlpGrpcMetricExporter.getDefault())\n+              .setExportIntervalMillis(500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTU4OA=="}, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzMDAzMA==", "bodyText": "It's not about Otel needing sub-second frequency, it's what the users want to see. Some folks use Otel and backend offering for subsecond metric resolution. Granted, that's probably not a prime use case here, so we can stick to seconds until someone comes along with that need.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r512930030", "createdAt": "2020-10-27T18:24:09Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -0,0 +1,295 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.metrics.opentelemetry;\n+\n+import org.hyperledger.besu.metrics.BesuMetricCategory;\n+import org.hyperledger.besu.metrics.ObservableMetricsSystem;\n+import org.hyperledger.besu.metrics.Observation;\n+import org.hyperledger.besu.metrics.StandardMetricCategory;\n+import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryUsage;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.metrics.DoubleValueObserver;\n+import io.opentelemetry.metrics.DoubleValueRecorder;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongSumObserver;\n+import io.opentelemetry.metrics.LongUpDownSumObserver;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+\n+/** Metrics system relying on the native OpenTelemetry format. */\n+public class OpenTelemetrySystem implements ObservableMetricsSystem {\n+  private static final String TYPE_LABEL_KEY = \"type\";\n+  private static final String AREA_LABEL_KEY = \"area\";\n+  private static final String POOL_LABEL_KEY = \"pool\";\n+  private static final String USED = \"used\";\n+  private static final String COMMITTED = \"committed\";\n+  private static final String MAX = \"max\";\n+  private static final String HEAP = \"heap\";\n+  private static final String NON_HEAP = \"non_heap\";\n+\n+  private final Set<MetricCategory> enabledCategories;\n+  private final boolean timersEnabled;\n+  private final Map<String, LabelledMetric<Counter>> cachedCounters = new ConcurrentHashMap<>();\n+  private final Map<String, LabelledMetric<OperationTimer>> cachedTimers =\n+      new ConcurrentHashMap<>();\n+  private final MeterSdkProvider meterSdkProvider = MeterSdkProvider.builder().build();\n+  private IntervalMetricReader periodicReader;\n+\n+  public OpenTelemetrySystem(\n+      final Set<MetricCategory> enabledCategories,\n+      final boolean timersEnabled,\n+      final boolean pushEnabled) {\n+    this.enabledCategories = ImmutableSet.copyOf(enabledCategories);\n+    this.timersEnabled = timersEnabled;\n+\n+    if (pushEnabled) {\n+      IntervalMetricReader.Builder builder =\n+          IntervalMetricReader.builder()\n+              .setMetricProducers(Collections.singleton(meterSdkProvider.getMetricProducer()))\n+              .setMetricExporter(OtlpGrpcMetricExporter.getDefault())\n+              .setExportIntervalMillis(500);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTU4OA=="}, "originalCommit": {"oid": "06e333918f54567a3a2b9ea401d75ab8bcbe4072"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNDQ2NDg1OnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsProtocol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTowNzo1NlrOHpRCsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMTowNzo1NlrOHpRCsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzMjg4MQ==", "bodyText": "NoOp is too lingo-driven to be exposed to the CLI.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              NOOP;\n          \n          \n            \n              NONE;", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r513032881", "createdAt": "2020-10-27T21:07:56Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsProtocol.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.hyperledger.besu.metrics;\n+\n+/** Enumeration of metrics protocols supported by Besu. */\n+public enum MetricsProtocol {\n+  PROMETHEUS,\n+  OPENTELEMETRY,\n+  NOOP;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc871caf77134992ae32fd939a90d8b25cf7954"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMzk2MTM4OnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsSystemFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDowMjoyNlrOHqsfPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMDowMjoyNlrOHqsfPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUzMTEzMg==", "bodyText": "This will make LGTM happy.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          1000 * metricsConfiguration.getPushInterval());\n          \n          \n            \n                          1000L * metricsConfiguration.getPushInterval());", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r514531132", "createdAt": "2020-10-29T20:02:26Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/MetricsSystemFactory.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.metrics;\n+\n+import static org.hyperledger.besu.metrics.MetricsProtocol.OPENTELEMETRY;\n+import static org.hyperledger.besu.metrics.MetricsProtocol.PROMETHEUS;\n+\n+import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n+import org.hyperledger.besu.metrics.opentelemetry.OpenTelemetrySystem;\n+import org.hyperledger.besu.metrics.prometheus.MetricsConfiguration;\n+import org.hyperledger.besu.metrics.prometheus.PrometheusMetricsSystem;\n+\n+/** Creates a new metric system based on configuration. */\n+public class MetricsSystemFactory {\n+\n+  private MetricsSystemFactory() {}\n+\n+  /**\n+   * Creates and starts a new metric system to observe the behavior of the client\n+   *\n+   * @param metricsConfiguration the configuration of the metric system\n+   * @return a new metric system\n+   */\n+  public static ObservableMetricsSystem create(final MetricsConfiguration metricsConfiguration) {\n+    if (!metricsConfiguration.isEnabled() && !metricsConfiguration.isPushEnabled()) {\n+      return new NoOpMetricsSystem();\n+    }\n+    if (PROMETHEUS.equals(metricsConfiguration.getProtocol())) {\n+      final PrometheusMetricsSystem metricsSystem =\n+          new PrometheusMetricsSystem(\n+              metricsConfiguration.getMetricCategories(), metricsConfiguration.isTimersEnabled());\n+      metricsSystem.init();\n+      return metricsSystem;\n+    } else if (OPENTELEMETRY.equals(metricsConfiguration.getProtocol())) {\n+      final OpenTelemetrySystem metricsSystem =\n+          new OpenTelemetrySystem(\n+              metricsConfiguration.getMetricCategories(),\n+              metricsConfiguration.isTimersEnabled(),\n+              metricsConfiguration.getPrometheusJob(),\n+              true,\n+              1000 * metricsConfiguration.getPushInterval());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5736e789aabce23889cdb48ddbfb28e04e8a557"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDM4MDk0OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNToyMjozMlrOHvIt0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo0ODoxMFrOHw1VBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NzkyMA==", "bodyText": "This should be set in the launcher scripts.  Other dependent classes may start logging before BesuCommand gets to fire off its class initializers.  Especially as our set of dependent libraries continues to grow.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519187920", "createdAt": "2020-11-07T15:22:32Z", "author": {"login": "shemnon"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -202,6 +204,11 @@\n     footer = \"Besu is licensed under the Apache License 2.0\")\n public class BesuCommand implements DefaultCommandValues, Runnable {\n \n+  static {\n+    // redirect java.util.logging loggers to use log4j2.\n+    System.setProperty(\"java.util.logging.manager\", \"org.apache.logging.log4j.jul.LogManager\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2NzQzMA==", "bodyText": "Moved to the launcher script arguments.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r520967430", "createdAt": "2020-11-11T00:48:10Z", "author": {"login": "atoulme"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -202,6 +204,11 @@\n     footer = \"Besu is licensed under the Apache License 2.0\")\n public class BesuCommand implements DefaultCommandValues, Runnable {\n \n+  static {\n+    // redirect java.util.logging loggers to use log4j2.\n+    System.setProperty(\"java.util.logging.manager\", \"org.apache.logging.log4j.jul.LogManager\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4NzkyMA=="}, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDM4MTMwOnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNToyMzoyNFrOHvIuAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo0NzoxMFrOHw1SCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4Nzk3MA==", "bodyText": "UX: change NOOP to NONE.\nThe long term solution is to use ${COMPLETION-CANDIDATES} instead of spelling them out in static text.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519187970", "createdAt": "2020-11-07T15:23:24Z", "author": {"login": "shemnon"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -644,6 +651,13 @@ void setBannedNodeIds(final List<String> values) {\n       description = \"Set to start the metrics exporter (default: ${DEFAULT-VALUE})\")\n   private final Boolean isMetricsEnabled = false;\n \n+  @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"}) // PicoCLI requires non-final Strings.\n+  @Option(\n+      names = {\"--metrics-protocol\"},\n+      description =\n+          \"Metrics protocol, one of PROMETHEUS, OPENTELEMETRY or NOOP. (default: ${DEFAULT-VALUE})\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2NjY2Ng==", "bodyText": "OK", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r520966666", "createdAt": "2020-11-11T00:47:10Z", "author": {"login": "atoulme"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -644,6 +651,13 @@ void setBannedNodeIds(final List<String> values) {\n       description = \"Set to start the metrics exporter (default: ${DEFAULT-VALUE})\")\n   private final Boolean isMetricsEnabled = false;\n \n+  @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"}) // PicoCLI requires non-final Strings.\n+  @Option(\n+      names = {\"--metrics-protocol\"},\n+      description =\n+          \"Metrics protocol, one of PROMETHEUS, OPENTELEMETRY or NOOP. (default: ${DEFAULT-VALUE})\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4Nzk3MA=="}, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDM4NDgxOnYy", "diffSide": "RIGHT", "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/PrometheusMetricsSystemModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNToyNzozM1rOHvIvrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo0Nzo0NVrOHw1T2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4ODM5OA==", "bodyText": "If this is a class named Prometheous* then a call to getMetricsSystem should not be able to return an OTLP metrics system.  Perhaps delete this class and move the impl of this method to MetricsSysteModule, which currently throws an abstract class error.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519188398", "createdAt": "2020-11-07T15:27:33Z", "author": {"login": "shemnon"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/PrometheusMetricsSystemModule.java", "diffHunk": "@@ -16,14 +16,14 @@\n \n package org.hyperledger.besu.evmtool;\n \n+import org.hyperledger.besu.metrics.MetricsSystemFactory;\n import org.hyperledger.besu.metrics.prometheus.MetricsConfiguration;\n-import org.hyperledger.besu.metrics.prometheus.PrometheusMetricsSystem;\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n \n public class PrometheusMetricsSystemModule extends MetricsSystemModule {\n \n   @Override\n   public MetricsSystem getMetricsSystem() {\n-    return PrometheusMetricsSystem.init(MetricsConfiguration.builder().build());\n+    return MetricsSystemFactory.create(MetricsConfiguration.builder().build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2NzEyOQ==", "bodyText": "Done, deleted and pushed to the super class.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r520967129", "createdAt": "2020-11-11T00:47:45Z", "author": {"login": "atoulme"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/PrometheusMetricsSystemModule.java", "diffHunk": "@@ -16,14 +16,14 @@\n \n package org.hyperledger.besu.evmtool;\n \n+import org.hyperledger.besu.metrics.MetricsSystemFactory;\n import org.hyperledger.besu.metrics.prometheus.MetricsConfiguration;\n-import org.hyperledger.besu.metrics.prometheus.PrometheusMetricsSystem;\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n \n public class PrometheusMetricsSystemModule extends MetricsSystemModule {\n \n   @Override\n   public MetricsSystem getMetricsSystem() {\n-    return PrometheusMetricsSystem.init(MetricsConfiguration.builder().build());\n+    return MetricsSystemFactory.create(MetricsConfiguration.builder().build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE4ODM5OA=="}, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDQzMDQ5OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/RunnerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNjozMTowNFrOHvJFXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNjozMTowNFrOHvJFXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5Mzk0OA==", "bodyText": "See my comments about lifecycle management in OpenTelemetrySystem", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519193948", "createdAt": "2020-11-07T16:31:04Z", "author": {"login": "shemnon"}, "path": "besu/src/main/java/org/hyperledger/besu/RunnerBuilder.java", "diffHunk": "@@ -601,7 +602,8 @@ public Runner build() {\n     }\n \n     Optional<MetricsService> metricsService = Optional.empty();\n-    if (metricsConfiguration.isEnabled() || metricsConfiguration.isPushEnabled()) {\n+    if ((metricsConfiguration.isEnabled() || metricsConfiguration.isPushEnabled())\n+        && metricsConfiguration.getProtocol().equals(MetricsProtocol.PROMETHEUS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDQzOTYyOnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNjo0Mzo1M1rOHvJJyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNjo0Mzo1M1rOHvJJyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NTA4MQ==", "bodyText": "See my comments about lifecycle management in OpenTelemetrySystem", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519195081", "createdAt": "2020-11-07T16:43:53Z", "author": {"login": "shemnon"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "diffHunk": "@@ -437,7 +438,8 @@ private void checkCommand(\n     Optional<MetricsService> metricsService = Optional.empty();\n     final MetricsConfiguration metricsConfiguration =\n         parentCommand.parentCommand.metricsConfiguration();\n-    if (metricsConfiguration.isEnabled() || metricsConfiguration.isPushEnabled()) {\n+    if ((metricsConfiguration.isEnabled() || metricsConfiguration.isPushEnabled())\n+        && metricsConfiguration.getProtocol().equals(MetricsProtocol.PROMETHEUS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDQ0NzEzOnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNjo1Mzo1MVrOHvJNSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo0Njo1OVrOHw1Rjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NTk3OQ==", "bodyText": "The handling of the network communication tasks for Prometheus is separated into the MetricsService, which handles lifecycle events as well as port management (if that's needed).\nRather than pull Promethous' networking stack into the PromethousMetricSystem we should pull at least the networking lifecycle and port management parts into a MetricsService class.  If pull is a thing that would include hooks to start pull as well as the existing push code in response to start, do what is done in close in the stop method, and if reporting a port makes sense (pull only) report it in getPort.  Ideally the networking classes would live in this new class (just periodicReader?) but I am OK with the OLTPMetricsService simply doing what needs to be done in this class via method calls.\nTo that end MetricsService.create will need some adjustment, have it return an Optional<MetricsService> and the existing code goes down the stack where protocol==PROMETHEOUS and the catch-all (for NONE) returns an Optional.empty(), also the calls that have guards can have those guards removed as create does it all now.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519195979", "createdAt": "2020-11-07T16:53:51Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.metrics.opentelemetry;\n+\n+import org.hyperledger.besu.metrics.BesuMetricCategory;\n+import org.hyperledger.besu.metrics.ObservableMetricsSystem;\n+import org.hyperledger.besu.metrics.Observation;\n+import org.hyperledger.besu.metrics.StandardMetricCategory;\n+import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryUsage;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.metrics.DoubleValueObserver;\n+import io.opentelemetry.metrics.DoubleValueRecorder;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongSumObserver;\n+import io.opentelemetry.metrics.LongUpDownSumObserver;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.resources.ResourceAttributes;\n+\n+/** Metrics system relying on the native OpenTelemetry format. */\n+public class OpenTelemetrySystem implements ObservableMetricsSystem {\n+  private static final String TYPE_LABEL_KEY = \"type\";\n+  private static final String AREA_LABEL_KEY = \"area\";\n+  private static final String POOL_LABEL_KEY = \"pool\";\n+  private static final String USED = \"used\";\n+  private static final String COMMITTED = \"committed\";\n+  private static final String MAX = \"max\";\n+  private static final String HEAP = \"heap\";\n+  private static final String NON_HEAP = \"non_heap\";\n+\n+  private final Set<MetricCategory> enabledCategories;\n+  private final boolean timersEnabled;\n+  private final Map<String, LabelledMetric<Counter>> cachedCounters = new ConcurrentHashMap<>();\n+  private final Map<String, LabelledMetric<OperationTimer>> cachedTimers =\n+      new ConcurrentHashMap<>();\n+  private final MeterSdkProvider meterSdkProvider;\n+  private IntervalMetricReader periodicReader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2NjU0Mw==", "bodyText": "OK, I think I have done that.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r520966543", "createdAt": "2020-11-11T00:46:59Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.metrics.opentelemetry;\n+\n+import org.hyperledger.besu.metrics.BesuMetricCategory;\n+import org.hyperledger.besu.metrics.ObservableMetricsSystem;\n+import org.hyperledger.besu.metrics.Observation;\n+import org.hyperledger.besu.metrics.StandardMetricCategory;\n+import org.hyperledger.besu.metrics.noop.NoOpMetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+import java.lang.management.GarbageCollectorMXBean;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.MemoryPoolMXBean;\n+import java.lang.management.MemoryUsage;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import java.util.stream.Stream;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.common.Labels;\n+import io.opentelemetry.exporters.otlp.OtlpGrpcMetricExporter;\n+import io.opentelemetry.metrics.DoubleValueObserver;\n+import io.opentelemetry.metrics.DoubleValueRecorder;\n+import io.opentelemetry.metrics.LongCounter;\n+import io.opentelemetry.metrics.LongSumObserver;\n+import io.opentelemetry.metrics.LongUpDownSumObserver;\n+import io.opentelemetry.metrics.Meter;\n+import io.opentelemetry.sdk.metrics.MeterSdkProvider;\n+import io.opentelemetry.sdk.metrics.data.MetricData;\n+import io.opentelemetry.sdk.metrics.export.IntervalMetricReader;\n+import io.opentelemetry.sdk.resources.Resource;\n+import io.opentelemetry.sdk.resources.ResourceAttributes;\n+\n+/** Metrics system relying on the native OpenTelemetry format. */\n+public class OpenTelemetrySystem implements ObservableMetricsSystem {\n+  private static final String TYPE_LABEL_KEY = \"type\";\n+  private static final String AREA_LABEL_KEY = \"area\";\n+  private static final String POOL_LABEL_KEY = \"pool\";\n+  private static final String USED = \"used\";\n+  private static final String COMMITTED = \"committed\";\n+  private static final String MAX = \"max\";\n+  private static final String HEAP = \"heap\";\n+  private static final String NON_HEAP = \"non_heap\";\n+\n+  private final Set<MetricCategory> enabledCategories;\n+  private final boolean timersEnabled;\n+  private final Map<String, LabelledMetric<Counter>> cachedCounters = new ConcurrentHashMap<>();\n+  private final Map<String, LabelledMetric<OperationTimer>> cachedTimers =\n+      new ConcurrentHashMap<>();\n+  private final MeterSdkProvider meterSdkProvider;\n+  private IntervalMetricReader periodicReader;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NTk3OQ=="}, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NDQ0ODA4OnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/ObservableMetricsSystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QxNjo1NTowMFrOHvJNvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMDo0NzoyNFrOHw1SyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NjA5NQ==", "bodyText": "remove this in favor of relying on MetricsService handling lifecycle events.  The specific sub-classes will know about the specific MetricsService they are paired with can can cast down.", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r519196095", "createdAt": "2020-11-07T16:55:00Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/ObservableMetricsSystem.java", "diffHunk": "@@ -17,11 +17,33 @@\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n \n+import java.util.Set;\n import java.util.stream.Stream;\n \n public interface ObservableMetricsSystem extends MetricsSystem {\n \n   Stream<Observation> streamObservations(MetricCategory category);\n \n   Stream<Observation> streamObservations();\n+\n+  /**\n+   * Provides an immutable view into the metric categories enabled for metric collection.\n+   *\n+   * @return the set of enabled metric categories.\n+   */\n+  Set<MetricCategory> getEnabledCategories();\n+\n+  /**\n+   * Checks if a particular category of metrics is enabled.\n+   *\n+   * @param category the category to check\n+   * @return true if the category is enabled, false otherwise\n+   */\n+  default boolean isCategoryEnabled(final MetricCategory category) {\n+    return getEnabledCategories().stream()\n+        .anyMatch(metricCategory -> metricCategory.getName().equals(category.getName()));\n+  }\n+\n+  /** Stops orderly the metrics system prior to shutdown. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2Njg1Ng==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1492#discussion_r520966856", "createdAt": "2020-11-11T00:47:24Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/ObservableMetricsSystem.java", "diffHunk": "@@ -17,11 +17,33 @@\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n \n+import java.util.Set;\n import java.util.stream.Stream;\n \n public interface ObservableMetricsSystem extends MetricsSystem {\n \n   Stream<Observation> streamObservations(MetricCategory category);\n \n   Stream<Observation> streamObservations();\n+\n+  /**\n+   * Provides an immutable view into the metric categories enabled for metric collection.\n+   *\n+   * @return the set of enabled metric categories.\n+   */\n+  Set<MetricCategory> getEnabledCategories();\n+\n+  /**\n+   * Checks if a particular category of metrics is enabled.\n+   *\n+   * @param category the category to check\n+   * @return true if the category is enabled, false otherwise\n+   */\n+  default boolean isCategoryEnabled(final MetricCategory category) {\n+    return getEnabledCategories().stream()\n+        .anyMatch(metricCategory -> metricCategory.getName().equals(category.getName()));\n+  }\n+\n+  /** Stops orderly the metrics system prior to shutdown. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE5NjA5NQ=="}, "originalCommit": {"oid": "ea01ea2b86a99aaeaba806fbb0edd874417e9ba7"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1295, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}