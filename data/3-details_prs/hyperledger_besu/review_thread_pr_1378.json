{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MjA1MDIw", "number": 1378, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxNDozNlrOEkM_kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToyNDoyMFrOEkNWCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Mzk3MDc1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugGetBadBlocks.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxNDozNlrOHTAasQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo1ODoyN1rOHTD-zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5MTgyNQ==", "bodyText": "Maybe .stream().map(...).collect(Collectors.toList) instead of adding to a mutable collection?", "url": "https://github.com/hyperledger/besu/pull/1378#discussion_r489691825", "createdAt": "2020-09-16T19:14:36Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugGetBadBlocks.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.BadBlockResult;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.BlockResultFactory;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.chain.BadBlockManager;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class DebugGetBadBlocks implements JsonRpcMethod {\n+\n+  private final BlockchainQueries blockchain;\n+  private final ProtocolSchedule protocolSchedule;\n+  private final BlockResultFactory blockResultFactory;\n+\n+  public DebugGetBadBlocks(\n+      final BlockchainQueries blockchain,\n+      final ProtocolSchedule protocolSchedule,\n+      final BlockResultFactory blockResultFactory) {\n+    this.blockchain = blockchain;\n+    this.protocolSchedule = protocolSchedule;\n+    this.blockResultFactory = blockResultFactory;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.DEBUG_GET_BAD_BLOCKS.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final List<BadBlockResult> response = new ArrayList<>();\n+    final BadBlockManager badBlockManager =\n+        protocolSchedule.getByBlockNumber(blockchain.headBlockNumber()).getBadBlocksManager();\n+    badBlockManager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03d868da8d770002961e744a5a61b1f7c4e7c4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1MDIyMg==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1378#discussion_r489750222", "createdAt": "2020-09-16T20:58:27Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugGetBadBlocks.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.BadBlockResult;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.BlockResultFactory;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.chain.BadBlockManager;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class DebugGetBadBlocks implements JsonRpcMethod {\n+\n+  private final BlockchainQueries blockchain;\n+  private final ProtocolSchedule protocolSchedule;\n+  private final BlockResultFactory blockResultFactory;\n+\n+  public DebugGetBadBlocks(\n+      final BlockchainQueries blockchain,\n+      final ProtocolSchedule protocolSchedule,\n+      final BlockResultFactory blockResultFactory) {\n+    this.blockchain = blockchain;\n+    this.protocolSchedule = protocolSchedule;\n+    this.blockResultFactory = blockResultFactory;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.DEBUG_GET_BAD_BLOCKS.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final List<BadBlockResult> response = new ArrayList<>();\n+    final BadBlockManager badBlockManager =\n+        protocolSchedule.getByBlockNumber(blockchain.headBlockNumber()).getBadBlocksManager();\n+    badBlockManager", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5MTgyNQ=="}, "originalCommit": {"oid": "0e03d868da8d770002961e744a5a61b1f7c4e7c4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Mzk3NTg5OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/BadBlockResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxNToxN1rOHTAdvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo1OTozMlrOHTEA6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5MjYwNQ==", "bodyText": "What was your take on the Immutable Framework?  Did you like it/not like it?  This is another opportunity here.", "url": "https://github.com/hyperledger/besu/pull/1378#discussion_r489692605", "createdAt": "2020-09-16T19:15:17Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/BadBlockResult.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.results;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+@JsonPropertyOrder({\"block\", \"hash\", \"rlp\"})\n+public class BadBlockResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03d868da8d770002961e744a5a61b1f7c4e7c4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1MDc2Mw==", "bodyText": "yes I find it very useful. just forgot to use it :) updated", "url": "https://github.com/hyperledger/besu/pull/1378#discussion_r489750763", "createdAt": "2020-09-16T20:59:32Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/BadBlockResult.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.results;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import org.apache.tuweni.bytes.Bytes;\n+\n+@JsonPropertyOrder({\"block\", \"hash\", \"rlp\"})\n+public class BadBlockResult {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5MjYwNQ=="}, "originalCommit": {"oid": "0e03d868da8d770002961e744a5a61b1f7c4e7c4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDAxNzI2OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/chain/BadBlockManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToyMTo1N1rOHTA6GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTowMjowNlrOHTEF8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5OTg2NA==", "bodyText": "We want some sort of a limit on the bad blocks we keep around.  Maybe via com.google.common.cache.CacheBuilder?", "url": "https://github.com/hyperledger/besu/pull/1378#discussion_r489699864", "createdAt": "2020-09-16T19:21:57Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/chain/BadBlockManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.chain;\n+\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class BadBlockManager {\n+\n+  private final Map<Hash, Block> badBlocks = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03d868da8d770002961e744a5a61b1f7c4e7c4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwMjU5Ng==", "bodyText": "Geth said they keep on the order of 100 in memory.", "url": "https://github.com/hyperledger/besu/pull/1378#discussion_r489702596", "createdAt": "2020-09-16T19:25:41Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/chain/BadBlockManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.chain;\n+\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class BadBlockManager {\n+\n+  private final Map<Hash, Block> badBlocks = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5OTg2NA=="}, "originalCommit": {"oid": "0e03d868da8d770002961e744a5a61b1f7c4e7c4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1MjA0OQ==", "bodyText": "Indeed I wanted to use the cacheBuilder but as I understood that we did not want a limit for this cache I did not set it up. But anyway the choice to put a limit is much better", "url": "https://github.com/hyperledger/besu/pull/1378#discussion_r489752049", "createdAt": "2020-09-16T21:02:06Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/chain/BadBlockManager.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.chain;\n+\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+public class BadBlockManager {\n+\n+  private final Map<Hash, Block> badBlocks = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5OTg2NA=="}, "originalCommit": {"oid": "0e03d868da8d770002961e744a5a61b1f7c4e7c4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDAyODI0OnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/sync/tasks/DownloadHeaderSequenceTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToyNDoyMFrOHTBBww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTowMjoyMVrOHTEGZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwMTgyNw==", "bodyText": "Add some comments explaining that even though the header is known bad we are downloading the block body for the debug_badBlocks RPC.", "url": "https://github.com/hyperledger/besu/pull/1378#discussion_r489701827", "createdAt": "2020-09-16T19:24:20Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/sync/tasks/DownloadHeaderSequenceTask.java", "diffHunk": "@@ -195,16 +199,40 @@ public static DownloadHeaderSequenceTask endingAtHeader(\n               child =\n                   (headerIndex == segmentLength - 1) ? referenceHeader : headers[headerIndex + 1];\n             }\n+            final ProtocolSpec protocolSpec = protocolSchedule.getByBlockNumber(child.getNumber());\n+            final BadBlockManager badBlockManager = protocolSpec.getBadBlocksManager();\n \n             if (!validateHeader(child, header)) {\n               // Invalid headers - disconnect from peer\n-              LOG.debug(\n-                  \"Received invalid headers from peer, disconnecting from: {}\",\n-                  headersResult.getPeer());\n-              headersResult.getPeer().disconnect(DisconnectReason.BREACH_OF_PROTOCOL);\n-              future.completeExceptionally(\n-                  new InvalidBlockException(\n-                      \"Header failed validation.\", child.getNumber(), child.getHash()));\n+\n+              final BlockHeader invalidBlock = child;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03d868da8d770002961e744a5a61b1f7c4e7c4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1MjE2NQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1378#discussion_r489752165", "createdAt": "2020-09-16T21:02:21Z", "author": {"login": "matkt"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/sync/tasks/DownloadHeaderSequenceTask.java", "diffHunk": "@@ -195,16 +199,40 @@ public static DownloadHeaderSequenceTask endingAtHeader(\n               child =\n                   (headerIndex == segmentLength - 1) ? referenceHeader : headers[headerIndex + 1];\n             }\n+            final ProtocolSpec protocolSpec = protocolSchedule.getByBlockNumber(child.getNumber());\n+            final BadBlockManager badBlockManager = protocolSpec.getBadBlocksManager();\n \n             if (!validateHeader(child, header)) {\n               // Invalid headers - disconnect from peer\n-              LOG.debug(\n-                  \"Received invalid headers from peer, disconnecting from: {}\",\n-                  headersResult.getPeer());\n-              headersResult.getPeer().disconnect(DisconnectReason.BREACH_OF_PROTOCOL);\n-              future.completeExceptionally(\n-                  new InvalidBlockException(\n-                      \"Header failed validation.\", child.getNumber(), child.getHash()));\n+\n+              final BlockHeader invalidBlock = child;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwMTgyNw=="}, "originalCommit": {"oid": "0e03d868da8d770002961e744a5a61b1f7c4e7c4"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 781, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}