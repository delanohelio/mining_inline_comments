{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NjI3NTU2", "number": 1542, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoxMjoxMVrOE4J5rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoxNjo1N1rOE4KAtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzE3OTMyOnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoxMjoxMVrOHx6IeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoyNDoyOFrOHx6lCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5NDcxMw==", "bodyText": "If you use isEmpty here it's easier to parse at a glance how it differs from the version below", "url": "https://github.com/hyperledger/besu/pull/1542#discussion_r522094713", "createdAt": "2020-11-12T13:12:11Z", "author": {"login": "RatanRSur"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -61,6 +64,9 @@ public ForkIdManager(final Blockchain blockchain, final List<Long> nonFilteredFo\n   }\n \n   public ForkId computeForkId() {\n+    if (legacyEth64) {\n+      return forkAndHashList.size() > 0 ? forkAndHashList.get(forkAndHashList.size() - 1) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd255562e5657b7d4faa1d5e2c6d7d63fb266f85"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwMjAyNA==", "bodyText": "I agree. Done", "url": "https://github.com/hyperledger/besu/pull/1542#discussion_r522102024", "createdAt": "2020-11-12T13:24:28Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -61,6 +64,9 @@ public ForkIdManager(final Blockchain blockchain, final List<Long> nonFilteredFo\n   }\n \n   public ForkId computeForkId() {\n+    if (legacyEth64) {\n+      return forkAndHashList.size() > 0 ? forkAndHashList.get(forkAndHashList.size() - 1) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5NDcxMw=="}, "originalCommit": {"oid": "bd255562e5657b7d4faa1d5e2c6d7d63fb266f85"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzE5NzM0OnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/LegacyForkIdManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoxNjo1N1rOHx6Tgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoyNDozNVrOHx6lWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5NzUzOA==", "bodyText": "Do we need to keep these unused methods around?", "url": "https://github.com/hyperledger/besu/pull/1542#discussion_r522097538", "createdAt": "2020-11-12T13:16:57Z", "author": {"login": "RatanRSur"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/LegacyForkIdManager.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.eth.manager.ForkId;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.CRC32;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class LegacyForkIdManager {\n+\n+  private final Blockchain blockchain;\n+  private final Hash genesisHash;\n+  private final List<Long> forks;\n+  private long forkNext;\n+  private final long highestKnownFork;\n+  private List<ForkId> forkAndHashList;\n+\n+  public LegacyForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n+    this.blockchain = blockchain;\n+    this.genesisHash = blockchain.getGenesisBlock().getHash();\n+    // de-dupe and sanitize forks\n+    this.forks =\n+        forks.stream().filter(fork -> fork > 0).distinct().collect(Collectors.toUnmodifiableList());\n+    highestKnownFork = forks.size() > 0 ? forks.get(forks.size() - 1) : 0L;\n+    createForkIds();\n+  };\n+\n+  public List<ForkId> getForkAndHashList() {\n+    return this.forkAndHashList;\n+  }\n+\n+  public ForkId getLatestForkId() {\n+    if (forkAndHashList.size() > 0) {\n+      return forkAndHashList.get(forkAndHashList.size() - 1);\n+    }\n+    return null;\n+  }\n+\n+  public static ForkId readFrom(final RLPInput in) {\n+    in.enterList();\n+    final Bytes hash = in.readBytes();\n+    final Bytes next = in.readBytes();\n+    in.leaveList();\n+    return new ForkId(hash, next);\n+  }\n+\n+  /**\n+   * EIP-2124 behaviour\n+   *\n+   * @param forkId to be validated.\n+   * @return boolean (peer valid (true) or invalid (false))\n+   */\n+  boolean peerCheck(final ForkId forkId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd255562e5657b7d4faa1d5e2c6d7d63fb266f85"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwMjEwNw==", "bodyText": "No. I removed them.", "url": "https://github.com/hyperledger/besu/pull/1542#discussion_r522102107", "createdAt": "2020-11-12T13:24:35Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/LegacyForkIdManager.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.eth.manager.ForkId;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.CRC32;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class LegacyForkIdManager {\n+\n+  private final Blockchain blockchain;\n+  private final Hash genesisHash;\n+  private final List<Long> forks;\n+  private long forkNext;\n+  private final long highestKnownFork;\n+  private List<ForkId> forkAndHashList;\n+\n+  public LegacyForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n+    this.blockchain = blockchain;\n+    this.genesisHash = blockchain.getGenesisBlock().getHash();\n+    // de-dupe and sanitize forks\n+    this.forks =\n+        forks.stream().filter(fork -> fork > 0).distinct().collect(Collectors.toUnmodifiableList());\n+    highestKnownFork = forks.size() > 0 ? forks.get(forks.size() - 1) : 0L;\n+    createForkIds();\n+  };\n+\n+  public List<ForkId> getForkAndHashList() {\n+    return this.forkAndHashList;\n+  }\n+\n+  public ForkId getLatestForkId() {\n+    if (forkAndHashList.size() > 0) {\n+      return forkAndHashList.get(forkAndHashList.size() - 1);\n+    }\n+    return null;\n+  }\n+\n+  public static ForkId readFrom(final RLPInput in) {\n+    in.enterList();\n+    final Bytes hash = in.readBytes();\n+    final Bytes next = in.readBytes();\n+    in.leaveList();\n+    return new ForkId(hash, next);\n+  }\n+\n+  /**\n+   * EIP-2124 behaviour\n+   *\n+   * @param forkId to be validated.\n+   * @return boolean (peer valid (true) or invalid (false))\n+   */\n+  boolean peerCheck(final ForkId forkId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5NzUzOA=="}, "originalCommit": {"oid": "bd255562e5657b7d4faa1d5e2c6d7d63fb266f85"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1323, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}