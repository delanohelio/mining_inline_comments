{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4OTYzNjE1", "number": 1633, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDo0OToyN1rOE-UB4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwMzowMTo1OVrOE-V01g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzc1MzMxOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetWork.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDo0OToyN1rOH7dHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMzo0NDoxMVrOH7eBrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTA5OA==", "bodyText": "For better or worse this RPC is instantiated for non-pow networks.  We need to initialize default values if it is not a PoW miner:\n  public EthGetWork(final MiningCoordinator miner) {\n    this.miner = miner;\n    if (miner instanceof EthHashMiningCoordinator) {\n      this.epochCalculator = ((EthHashMiningCoordinator) miner).getEpochCalculator();\n    } else {\n      this.epochCalculator = new EpochCalculator.DefaultEpochCalculator();\n    }\n  }", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105098", "createdAt": "2020-11-28T20:49:27Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetWork.java", "diffHunk": "@@ -36,9 +38,14 @@\n \n   private final MiningCoordinator miner;\n   private static final Logger LOG = getLogger();\n+  private final EpochCalculator epochCalculator;\n \n   public EthGetWork(final MiningCoordinator miner) {\n+    if (!(miner instanceof EthHashMiningCoordinator)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjExOTk4MA==", "bodyText": "I've updated this.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532119980", "createdAt": "2020-11-28T23:44:11Z", "author": {"login": "edwardmack"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetWork.java", "diffHunk": "@@ -36,9 +38,14 @@\n \n   private final MiningCoordinator miner;\n   private static final Logger LOG = getLogger();\n+  private final EpochCalculator epochCalculator;\n \n   public EthGetWork(final MiningCoordinator miner) {\n+    if (!(miner instanceof EthHashMiningCoordinator)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTA5OA=="}, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzc1NDU0OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDo1MDoyOVrOH7dIFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMzo0NToyM1rOH7eCHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTIzNg==", "bodyText": "We don't need activationBlock, and it runs against the patterns used in other hard fork configuration objects so it should be removed along with all dependents.  The Protocol Schedules will ensure that this calculator is only applied to thanos blocks and that for classic blocks pre-thanos a default epoch calculator is used.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105236", "createdAt": "2020-11-28T20:50:29Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+public interface EpochCalculator {\n+  public long epochStartBlock(final long block);\n+\n+  public long cacheEpoch(final long block);\n+\n+  final class DefaultEpochCalculator implements EpochCalculator {\n+\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      return cacheEpoch(block) * EthHash.EPOCH_LENGTH + 1;\n+    }\n+\n+    @Override\n+    public long cacheEpoch(final long block) {\n+      return Long.divideUnsigned(block, EthHash.EPOCH_LENGTH);\n+    }\n+  }\n+\n+  final class Ecip1099EpochCalculator implements EpochCalculator {\n+    private final long activationBlock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyMDA5Mg==", "bodyText": "I should have realized this wasn't needed.  It's much cleaner now without having to pass activationBlock around.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532120092", "createdAt": "2020-11-28T23:45:23Z", "author": {"login": "edwardmack"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+public interface EpochCalculator {\n+  public long epochStartBlock(final long block);\n+\n+  public long cacheEpoch(final long block);\n+\n+  final class DefaultEpochCalculator implements EpochCalculator {\n+\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      return cacheEpoch(block) * EthHash.EPOCH_LENGTH + 1;\n+    }\n+\n+    @Override\n+    public long cacheEpoch(final long block) {\n+      return Long.divideUnsigned(block, EthHash.EPOCH_LENGTH);\n+    }\n+  }\n+\n+  final class Ecip1099EpochCalculator implements EpochCalculator {\n+    private final long activationBlock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTIzNg=="}, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzc1NTkxOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDo1MTo0NlrOH7dIrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDo1MTo0NlrOH7dIrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTM4OA==", "bodyText": "Just the second clause should remain.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105388", "createdAt": "2020-11-28T20:51:46Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+public interface EpochCalculator {\n+  public long epochStartBlock(final long block);\n+\n+  public long cacheEpoch(final long block);\n+\n+  final class DefaultEpochCalculator implements EpochCalculator {\n+\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      return cacheEpoch(block) * EthHash.EPOCH_LENGTH + 1;\n+    }\n+\n+    @Override\n+    public long cacheEpoch(final long block) {\n+      return Long.divideUnsigned(block, EthHash.EPOCH_LENGTH);\n+    }\n+  }\n+\n+  final class Ecip1099EpochCalculator implements EpochCalculator {\n+    private final long activationBlock;\n+\n+    public Ecip1099EpochCalculator(final long activationBlock) {\n+      this.activationBlock = activationBlock;\n+    }\n+\n+    /** calculate start block given epoch */\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      long epoch = cacheEpoch(block);\n+      return block < activationBlock\n+          ? epoch * EthHash.EPOCH_LENGTH + 1\n+          : epoch * (EthHash.EPOCH_LENGTH * 2) + 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzc1NjAxOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDo1MTo1NVrOH7dIug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDo1MTo1NVrOH7dIug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTQwMg==", "bodyText": "Just the second clause should remain.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105402", "createdAt": "2020-11-28T20:51:55Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/EpochCalculator.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+public interface EpochCalculator {\n+  public long epochStartBlock(final long block);\n+\n+  public long cacheEpoch(final long block);\n+\n+  final class DefaultEpochCalculator implements EpochCalculator {\n+\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      return cacheEpoch(block) * EthHash.EPOCH_LENGTH + 1;\n+    }\n+\n+    @Override\n+    public long cacheEpoch(final long block) {\n+      return Long.divideUnsigned(block, EthHash.EPOCH_LENGTH);\n+    }\n+  }\n+\n+  final class Ecip1099EpochCalculator implements EpochCalculator {\n+    private final long activationBlock;\n+\n+    public Ecip1099EpochCalculator(final long activationBlock) {\n+      this.activationBlock = activationBlock;\n+    }\n+\n+    /** calculate start block given epoch */\n+    @Override\n+    public long epochStartBlock(final long block) {\n+      long epoch = cacheEpoch(block);\n+      return block < activationBlock\n+          ? epoch * EthHash.EPOCH_LENGTH + 1\n+          : epoch * (EthHash.EPOCH_LENGTH * 2) + 1;\n+    }\n+\n+    @Override\n+    public long cacheEpoch(final long block) {\n+      return block < activationBlock\n+          ? Long.divideUnsigned(block, EthHash.EPOCH_LENGTH)\n+          : Long.divideUnsigned(block, EthHash.EPOCH_LENGTH * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzc1NzMyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDo1Mzo0N1rOH7dJTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMzo0NjoyN1rOH7eCZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTU0OA==", "bodyText": "Since this is private and single use it should be un-wrapped inside of the two-arg dagSeed method.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105548", "createdAt": "2020-11-28T20:53:47Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java", "diffHunk": "@@ -35,7 +35,7 @@\n             }\n           });\n \n-  public static byte[] dagSeed(final long block) {\n+  private static byte[] dagSeed(final long block) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyMDE2Ng==", "bodyText": "Done.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532120166", "createdAt": "2020-11-28T23:46:27Z", "author": {"login": "edwardmack"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java", "diffHunk": "@@ -35,7 +35,7 @@\n             }\n           });\n \n-  public static byte[] dagSeed(final long block) {\n+  private static byte[] dagSeed(final long block) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTU0OA=="}, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzc1ODM1OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDo1NTowNlrOH7dJww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMDo1NTowNlrOH7dJww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNTY2Nw==", "bodyText": "dog->dag\n\ud83d\udc36", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532105667", "createdAt": "2020-11-28T20:55:06Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/DirectAcyclicGraphSeed.java", "diffHunk": "@@ -50,4 +50,16 @@\n     }\n     return seed;\n   }\n+\n+  /**\n+   * Calculates dog seed to use for generating a verification cache and the mining dataset.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzc2MzYxOnYy", "diffSide": "LEFT", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/mainnet/EtcHashTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMTowMToyMFrOH7dMKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMzo0Njo0NVrOH7eChA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNjI4Mg==", "bodyText": "(a) rather than testing a before/after activation block (which per another comment I think we should get rid of the activation block) we should test early (somewhere in the first 30k blocks) vs late (somewhere in the last 30k blocks)\n(b) we don't test epochStartBlock, this seems like a reasonable place to add that as a unit test.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532106282", "createdAt": "2020-11-28T21:01:20Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/mainnet/EtcHashTest.java", "diffHunk": "@@ -14,21 +14,19 @@\n  */\n package org.hyperledger.besu.ethereum.mainnet;\n \n-import java.util.function.Function;\n-\n import org.assertj.core.api.Assertions;\n import org.junit.Test;\n \n public class EtcHashTest {\n \n   @Test\n   public void testEpoch() {\n-    Function<Long, Long> epochCalculator = EthHash.ecip1099Epoch(2_000_000);\n+    EpochCalculator epochCalculator = new EpochCalculator.Ecip1099EpochCalculator(2_000_000);\n \n     // check before activation block (1,000,000/30,000 = 33)\n-    Assertions.assertThat(epochCalculator.apply(1_000_000L)).isEqualTo(33);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEyMDE5Ng==", "bodyText": "Tests added.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532120196", "createdAt": "2020-11-28T23:46:45Z", "author": {"login": "edwardmack"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/mainnet/EtcHashTest.java", "diffHunk": "@@ -14,21 +14,19 @@\n  */\n package org.hyperledger.besu.ethereum.mainnet;\n \n-import java.util.function.Function;\n-\n import org.assertj.core.api.Assertions;\n import org.junit.Test;\n \n public class EtcHashTest {\n \n   @Test\n   public void testEpoch() {\n-    Function<Long, Long> epochCalculator = EthHash.ecip1099Epoch(2_000_000);\n+    EpochCalculator epochCalculator = new EpochCalculator.Ecip1099EpochCalculator(2_000_000);\n \n     // check before activation block (1,000,000/30,000 = 33)\n-    Assertions.assertThat(epochCalculator.apply(1_000_000L)).isEqualTo(33);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNjI4Mg=="}, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzc2NTYwOnYy", "diffSide": "RIGHT", "path": "ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1EthProxyProtocol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMTowNDoxM1rOH7dNFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMTowNDoxM1rOH7dNFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNjUxOQ==", "bodyText": "We need a message in this throw, something like \"Stratum1 Proxies require an EthHashMiningCoordinator not \" + (miningCoordinator == null) ? \"null\" : miningCoordinator.getClass().getName()", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532106519", "createdAt": "2020-11-28T21:04:13Z", "author": {"login": "shemnon"}, "path": "ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1EthProxyProtocol.java", "diffHunk": "@@ -49,9 +51,14 @@\n   private final MiningCoordinator miningCoordinator;\n   private EthHashSolverInputs currentInput;\n   private Function<EthHashSolution, Boolean> submitCallback;\n+  private final EpochCalculator epochCalculator;\n \n   public Stratum1EthProxyProtocol(final MiningCoordinator miningCoordinator) {\n+    if (!(miningCoordinator instanceof EthHashMiningCoordinator)) {\n+      throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNzc2NjAyOnYy", "diffSide": "RIGHT", "path": "ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1Protocol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMTowNDozMVrOH7dNRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOFQyMTowNDozMVrOH7dNRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwNjU2NA==", "bodyText": "Again, the exception needs a message.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532106564", "createdAt": "2020-11-28T21:04:31Z", "author": {"login": "shemnon"}, "path": "ethereum/stratum/src/main/java/org/hyperledger/besu/ethereum/stratum/Stratum1Protocol.java", "diffHunk": "@@ -80,10 +83,14 @@ public Stratum1Protocol(final String extranonce, final MiningCoordinator miningC\n       final MiningCoordinator miningCoordinator,\n       final Supplier<String> jobIdSupplier,\n       final Supplier<String> subscriptionIdCreator) {\n+    if (!(miningCoordinator instanceof EthHashMiningCoordinator)) {\n+      throw new IllegalArgumentException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fbfe3214ae172652b6e3233ebc9087d99618198"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODA0NDM1OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwMzowMToxNFrOH7fP3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwMzowMToxNFrOH7fP3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEzOTk5OQ==", "bodyText": "This field is unused.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532139999", "createdAt": "2020-11-29T03:01:14Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java", "diffHunk": "@@ -220,7 +220,8 @@ public static ProtocolSpecBuilder thanosDefinition(\n       final OptionalInt configStackSizeLimit,\n       final boolean enableRevertReason,\n       final OptionalLong ecip1017EraRounds,\n-      final boolean quorumCompatibilityMode) {\n+      final boolean quorumCompatibilityMode,\n+      final OptionalLong activationBlock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fccc18586b6fe8796310d8ff6361a67f3783c48"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzODA0NzU4OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ProtocolScheduleBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwMzowMTo1OVrOH7fSIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQwMzowMTo1OVrOH7fSIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjE0MDU3OQ==", "bodyText": "This field is not needed.", "url": "https://github.com/hyperledger/besu/pull/1633#discussion_r532140579", "createdAt": "2020-11-29T03:01:59Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ProtocolScheduleBuilder.java", "diffHunk": "@@ -306,7 +306,8 @@ public ProtocolSchedule createProtocolSchedule() {\n             config.getEvmStackSize(),\n             isRevertReasonEnabled,\n             config.getEcip1017EraRounds(),\n-            quorumCompatibilityMode));\n+            quorumCompatibilityMode,\n+            config.getThanosBlockNumber()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fccc18586b6fe8796310d8ff6361a67f3783c48"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1379, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}