{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0OTM3NTY2", "number": 400, "title": "[PIE-1798] Fail cases for multitenancy ATs", "bodyText": "PR description\nAdded tests around fail cases for multitenancy-enabled RPC calls.\nFixed Issue(s)", "createdAt": "2020-02-13T15:38:29Z", "url": "https://github.com/hyperledger/besu/pull/400", "merged": true, "mergeCommit": {"oid": "8cdfb6822a12d822cb602c010c655a88cd1ed592"}, "closed": true, "closedAt": "2020-02-14T07:04:47Z", "author": {"login": "mark-terry"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcD8B9dAH2gAyMzc0OTM3NTY2OmI5ZTEwNjU0YzYyNmQ1NjM4YmIwZWE4MzViZDQ2MjRlOTg3OTBjMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEJ29GgFqTM1ODc0MDQ1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b9e10654c626d5638bb0ea835bd4624e98790c08", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/b9e10654c626d5638bb0ea835bd4624e98790c08", "committedDate": "2020-02-13T14:44:18Z", "message": "[PIE-1798] Added some multitenancy fail case tests.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/c2cc6f9fce1c89fcf419b3160409bf6c3537146c", "committedDate": "2020-02-13T15:36:56Z", "message": "[PIE-1798] Refactoring.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjA0NTc2", "url": "https://github.com/hyperledger/besu/pull/400#pullrequestreview-358604576", "createdAt": "2020-02-13T22:41:35Z", "commit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo0MTozNVrOFpmG0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxMzo0N1rOFpmy5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MDI3Mg==", "bodyText": "Can this have a more generic name as this is not specific to multitenancy. Perhaps something like ExpectJsonRpcError?", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379160272", "createdAt": "2020-02-13T22:41:35Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/MultiTenancyValidationFail.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import org.assertj.core.api.Assertions;\n+import org.web3j.protocol.exceptions.ClientConnectionException;\n+\n+public class MultiTenancyValidationFail implements Condition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MTQ0Nw==", "bodyText": "Can this port be made dynamic? Otherwise will probably have problems with port conflicts at some point with multiple ATs running in parallel.", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379161447", "createdAt": "2020-02-13T22:44:51Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MTkwNA==", "bodyText": "Can use Transaction<Hash> instead of the raw type here and for the other tests", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379161904", "createdAt": "2020-02-13T22:46:00Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String OTHER_ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenantedPrivacy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+\n+    final String token =\n+        node.execute(permissioningTransactions.createSuccessfulLogin(\"failUser\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    multiTenancyCluster.close();\n+  }\n+\n+  @Test\n+  public void sendTransactionShouldFailWhenPrivateFromNotMatchEnclaveKey()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress, OTHER_ENCLAVE_KEY);\n+    retrievePrivacyGroupEnclaveStub();\n+    final Transaction transaction =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2OTc5MQ==", "bodyText": "Suggest using ENCLAVE_PUBLIC_KEY as enclave key can also refer to the key we get back after sending data to the enclave.", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379169791", "createdAt": "2020-02-13T23:08:26Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2OTkyMg==", "bodyText": "Suggest using OTHER_ENCLAVE_PUBLIC_KEY to avoid confusing with enclave key", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379169922", "createdAt": "2020-02-13T23:08:51Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String OTHER_ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MTU1OQ==", "bodyText": "Also need tests for privDistributeRawTransaction", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379171559", "createdAt": "2020-02-13T23:13:47Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String OTHER_ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenantedPrivacy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+\n+    final String token =\n+        node.execute(permissioningTransactions.createSuccessfulLogin(\"failUser\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    multiTenancyCluster.close();\n+  }\n+\n+  @Test\n+  public void sendTransactionShouldFailWhenPrivateFromNotMatchEnclaveKey()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress, OTHER_ENCLAVE_KEY);\n+    retrievePrivacyGroupEnclaveStub();\n+    final Transaction transaction =\n+        privacyTransactions.sendRawTransaction(\n+            getRLPOutput(validSignedPrivateTransaction).encoded().toHexString());\n+    node.verify(priv.multiTenancyValidationFail(transaction, JsonRpcError.ENCLAVE_ERROR));\n+  }\n+\n+  @Test\n+  public void sendTransactionShouldFailWhenPrivacyGroupDoesNotContainEnclaveKey()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress, ENCLAVE_KEY);\n+    retrievePrivacyGroupEnclaveStub();\n+    final Transaction transaction =\n+        privacyTransactions.sendRawTransaction(\n+            getRLPOutput(validSignedPrivateTransaction).encoded().toHexString());\n+    node.verify(priv.multiTenancyValidationFail(transaction, JsonRpcError.ENCLAVE_ERROR));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e335ca8e048d0d67f4066a4bfaf3d5d9caf343ae", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/e335ca8e048d0d67f4066a4bfaf3d5d9caf343ae", "committedDate": "2020-02-14T00:00:36Z", "message": "[PIE-1798] PR fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb4b2cb74f6041b0e22fdeb320440d6991abb740", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/bb4b2cb74f6041b0e22fdeb320440d6991abb740", "committedDate": "2020-02-14T06:41:38Z", "message": "[PIE-1798] PR fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a80250218ed90d3e6fa9829043fba895e7421151", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/a80250218ed90d3e6fa9829043fba895e7421151", "committedDate": "2020-02-14T00:01:25Z", "message": "Merge branch 'master' into PIE-1798-newfails"}, "afterCommit": {"oid": "bb4b2cb74f6041b0e22fdeb320440d6991abb740", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/bb4b2cb74f6041b0e22fdeb320440d6991abb740", "committedDate": "2020-02-14T06:41:38Z", "message": "[PIE-1798] PR fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c8a1b3bbd8aac019bf0f87738a1ef3cb2368445", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/0c8a1b3bbd8aac019bf0f87738a1ef3cb2368445", "committedDate": "2020-02-14T06:42:16Z", "message": "Merge branch 'master' into PIE-1798-newfails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce1317d55acd277ffd0110564ff6543e29e93f2f", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/ce1317d55acd277ffd0110564ff6543e29e93f2f", "committedDate": "2020-02-14T06:45:52Z", "message": "[PIE-1798] Rawtypes fix.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "928c27ef3476968eff1dd5a01d3d023db03aadb0", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/928c27ef3476968eff1dd5a01d3d023db03aadb0", "committedDate": "2020-02-14T06:46:10Z", "message": "Merge branch 'PIE-1798-newfails' of github.com:mark-terry/besu into PIE-1798-newfails"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NzQwNDUz", "url": "https://github.com/hyperledger/besu/pull/400#pullrequestreview-358740453", "createdAt": "2020-02-14T06:50:57Z", "commit": {"oid": "928c27ef3476968eff1dd5a01d3d023db03aadb0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1770, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}