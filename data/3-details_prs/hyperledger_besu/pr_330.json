{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NTI0MzYw", "number": 330, "title": "[PIE-1798] Priv RPC acceptance tests with stub enclave.", "bodyText": "Signed-off-by: Mark Terry mark.terry@consensys.net\n\n\nPR description\nAdded acceptance tests for priv rpc calls where a stub enclave is able to be utilised.\nFixed Issue(s)\n\n\nPart of PIE-1798", "createdAt": "2020-01-27T14:33:26Z", "url": "https://github.com/hyperledger/besu/pull/330", "merged": true, "mergeCommit": {"oid": "d25297443e7327139acf9634ef4ab0a4544ee59e"}, "closed": true, "closedAt": "2020-02-11T02:19:44Z", "author": {"login": "mark-terry"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-lpBuAFqTM0OTA1NDM2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDHLXIAFqTM1NjM3MjgzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU0MzYw", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349054360", "createdAt": "2020-01-27T23:49:32Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0OTozMlrOFiVYyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo0OTozMlrOFiVYyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NjMxMw==", "bodyText": "final keyword here in subsequent tests.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371546313", "createdAt": "2020-01-27T23:49:32Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivCreatePrivacyGroupSuccess.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivCreatePrivacyGroupTransaction;\n+\n+public class PrivCreatePrivacyGroupSuccess implements Condition {\n+\n+  private final PrivCreatePrivacyGroupTransaction transaction;\n+  private final String groupId;\n+\n+  public PrivCreatePrivacyGroupSuccess(\n+      final PrivCreatePrivacyGroupTransaction transaction, final String groupId) {\n+    this.transaction = transaction;\n+    this.groupId = groupId;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    String result = node.execute(transaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU0NzI0", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349054724", "createdAt": "2020-01-27T23:50:37Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1MDozN1rOFiVaAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1MDozN1rOFiVaAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NjYyNg==", "bodyText": "What does 0x7E implies? Is it address of contract, transaction?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371546626", "createdAt": "2020-01-27T23:50:37Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivacyPrecompileAddressSuccess.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetPrivacyPrecompileAddressTransaction;\n+\n+public class PrivGetPrivacyPrecompileAddressSuccess implements Condition {\n+\n+  private final PrivGetPrivacyPrecompileAddressTransaction transaction;\n+\n+  public PrivGetPrivacyPrecompileAddressSuccess(\n+      final PrivGetPrivacyPrecompileAddressTransaction transaction) {\n+    this.transaction = transaction;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    String result = node.execute(transaction);\n+    assertThat(Integer.decode(result)).isEqualTo(Integer.decode(\"0x7E\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU1MzIy", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349055322", "createdAt": "2020-01-27T23:52:27Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1MjoyN1rOFiVb8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1MjoyN1rOFiVb8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzEyMg==", "bodyText": "I would make \"authentication/auth.toml\" a constant ... easier to modify in future if required.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371547122", "createdAt": "2020-01-27T23:52:27Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -134,7 +141,7 @@ public BesuNode createNodeWithAuthentication(final String name)\n         new BesuNodeConfigurationBuilder()\n             .name(name)\n             .jsonRpcEnabled()\n-            .jsonRpcAuthenticationEnabled()\n+            .jsonRpcAuthenticationEnabled(\"authentication/auth.toml\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU1ODMy", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349055832", "createdAt": "2020-01-27T23:53:54Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1Mzo1NFrOFiVdpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1Mzo1NFrOFiVdpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0NzU1Ng==", "bodyText": "Either final or perhaps consider it declaring a constant.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371547556", "createdAt": "2020-01-27T23:53:54Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -161,6 +168,36 @@ public BesuNode createNodeWithP2pDisabled(final String name) throws IOException\n             .build());\n   }\n \n+  public BesuNode createNodeWithMultiTenancyEnabled(\n+      final String name,\n+      final String enclaveUrl,\n+      final String authFile,\n+      final String authPubKeyFile)\n+      throws IOException, URISyntaxException {\n+    ClassLoader classLoader = getClass().getClassLoader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU2Njk0", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349056694", "createdAt": "2020-01-27T23:56:29Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1NjoyOVrOFiVgbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1NjoyOVrOFiVgbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODI3MQ==", "bodyText": "Although new ArrayList exists before your changes, a nice pattern is to use Collections.emptyList() if the intent is to pass an empty list without the implementation details.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548271", "createdAt": "2020-01-27T23:56:29Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/privacy/PrivacyNode.java", "diffHunk": "@@ -96,7 +96,8 @@ public PrivacyNode(final PrivacyNodeConfiguration privacyConfiguration, final Ve\n             besuConfig.isRevertReasonEnabled(),\n             besuConfig.getPlugins(),\n             besuConfig.getExtraCLIOptions(),\n-            new ArrayList<>());\n+            new ArrayList<>(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU3MDQ1", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349057045", "createdAt": "2020-01-27T23:57:31Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1NzozMVrOFiVhkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1NzozMVrOFiVhkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODU2Mw==", "bodyText": "final", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548563", "createdAt": "2020-01-27T23:57:31Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivCreatePrivacyGroupTransaction.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivCreatePrivacyGroupTransaction implements Transaction<String> {\n+\n+  final CreatePrivacyGroupParameter params;\n+\n+  public PrivCreatePrivacyGroupTransaction(final CreatePrivacyGroupParameter params) {\n+    this.params = params;\n+  }\n+\n+  @Override\n+  public String execute(final NodeRequests node) {\n+    try {\n+      PrivacyRequestFactory.CreatePrivacyGroupResponse result =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU3MTky", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349057192", "createdAt": "2020-01-27T23:57:59Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1Nzo1OVrOFiViEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1Nzo1OVrOFiViEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODY4OA==", "bodyText": "final", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548688", "createdAt": "2020-01-27T23:57:59Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivDeletePrivacyGroupTransaction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivDeletePrivacyGroupTransaction implements Transaction<String> {\n+\n+  final String transactionHash;\n+\n+  public PrivDeletePrivacyGroupTransaction(final String transactionHash) {\n+    this.transactionHash = transactionHash;\n+  }\n+\n+  @Override\n+  public String execute(final NodeRequests node) {\n+    try {\n+      PrivacyRequestFactory.DeletePrivacyGroupResponse result =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU3MzA5", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349057309", "createdAt": "2020-01-27T23:58:24Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1ODoyNFrOFiView==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1ODoyNFrOFiView==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODc5NQ==", "bodyText": "final", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548795", "createdAt": "2020-01-27T23:58:24Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivFindPrivacyGroupTransaction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivFindPrivacyGroupTransaction implements Transaction<String> {\n+\n+  final String[] groupMembers;\n+\n+  public PrivFindPrivacyGroupTransaction(final String[] groupMembers) {\n+    this.groupMembers = groupMembers;\n+  }\n+\n+  @Override\n+  public String execute(final NodeRequests node) {\n+    try {\n+      PrivacyRequestFactory.FindPrivacyGroupResponse result =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU3Mzgz", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349057383", "createdAt": "2020-01-27T23:58:37Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1ODozN1rOFiVirQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1ODozN1rOFiVirQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODg0NQ==", "bodyText": "final", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548845", "createdAt": "2020-01-27T23:58:37Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivacyPrecompileAddressTransaction.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetPrivacyPrecompileAddressTransaction implements Transaction<String> {\n+\n+  @Override\n+  public String execute(final NodeRequests node) {\n+    try {\n+      PrivacyRequestFactory.GetPrivacyPrecompileAddressResponse result =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU3NDgx", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349057481", "createdAt": "2020-01-27T23:58:58Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1ODo1OFrOFiVi_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMzo1ODo1OFrOFiVi_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU0ODkyNw==", "bodyText": "final", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371548927", "createdAt": "2020-01-27T23:58:58Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetPrivateTransactionTransaction\n+    implements Transaction<PrivacyRequestFactory.GetPrivateTransactionResponse> {\n+\n+  final String transactionHash;\n+\n+  public PrivGetPrivateTransactionTransaction(final String transactionHash) {\n+    this.transactionHash = transactionHash;\n+  }\n+\n+  @Override\n+  public PrivacyRequestFactory.GetPrivateTransactionResponse execute(final NodeRequests node) {\n+    try {\n+      PrivacyRequestFactory.GetPrivateTransactionResponse result =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU5NjQ2", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349059646", "createdAt": "2020-01-28T00:05:08Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNTowOVrOFiVqCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNTowOVrOFiVqCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDcyOA==", "bodyText": "final", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371550728", "createdAt": "2020-01-28T00:05:09Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int enclavePort = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + enclavePort,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    String base64SignedPrivateTransactionRLP =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDU5ODEz", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349059813", "createdAt": "2020-01-28T00:05:39Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNTozOVrOFiVqnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowNTozOVrOFiVqnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MDg3Nw==", "bodyText": "final", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371550877", "createdAt": "2020-01-28T00:05:39Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int enclavePort = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + enclavePort,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String groupId = \"groupId\";\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+\n+    CreatePrivacyGroupParameter params =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDYwNTY2", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349060566", "createdAt": "2020-01-28T00:08:06Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowODowNlrOFiVtJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowODowNlrOFiVtJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTUyNA==", "bodyText": "oh we still have that ... didn't we end up creating a duplicate of PANTHEON -> BESU?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371551524", "createdAt": "2020-01-28T00:08:06Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int enclavePort = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + enclavePort,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String groupId = \"groupId\";\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+\n+    CreatePrivacyGroupParameter params =\n+        new CreatePrivacyGroupParameter(\n+            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n+    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n+  }\n+\n+  @Test\n+  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n+\n+    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n+    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n+  }\n+\n+  @Test\n+  public void shouldFindPrivacyGroup() throws JsonProcessingException {\n+    final ObjectMapper mapper = new ObjectMapper();\n+    final String findGroupResponse = mapper.writeValueAsString(List.of(testPrivacyGroup()));\n+    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n+\n+    final String[] paramArray = {enclaveKey};\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privFindPrivacyGroupSuccess(paramArray));\n+  }\n+\n+  private PrivacyGroup testPrivacyGroup() {\n+    return new PrivacyGroup(\n+        privacyGroupId, PrivacyGroup.Type.PANTHEON, \"test\", \"testGroup\", List.of(enclaveKey));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDYwOTIz", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349060923", "createdAt": "2020-01-28T00:09:17Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowOToxN1rOFiVuUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDowOToxN1rOFiVuUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MTgyNw==", "bodyText": "final", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371551827", "createdAt": "2020-01-28T00:09:17Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetPrivateTransactionTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n+\n+import org.assertj.core.api.Assertions;\n+\n+public class PrivGetPrivateTransactionSuccess implements Condition {\n+\n+  private final PrivGetPrivateTransactionTransaction transaction;\n+  private final String privateFrom;\n+\n+  public PrivGetPrivateTransactionSuccess(\n+      final PrivGetPrivateTransactionTransaction transaction, final String privateFrom) {\n+    this.transaction = transaction;\n+    this.privateFrom = privateFrom;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    PrivacyRequestFactory.GetPrivateTransactionResponse result = node.execute(transaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDYxOTAz", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349061903", "createdAt": "2020-01-28T00:12:16Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDoxMjoxNlrOFiVxlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDoxMjoxNlrOFiVxlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1MjY2MA==", "bodyText": "I am slightly torn between using inner static class vs declared them as separate source files.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371552660", "createdAt": "2020-01-28T00:12:16Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -16,12 +16,43 @@\n \n import static java.util.Collections.singletonList;\n \n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+\n+import java.util.HashMap;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.assertj.core.util.Lists;\n import org.web3j.protocol.Web3jService;\n import org.web3j.protocol.besu.Besu;\n import org.web3j.protocol.core.Request;\n import org.web3j.protocol.core.Response;\n \n public class PrivacyRequestFactory {\n+\n+  public static class GetPrivacyPrecompileAddressResponse extends Response<String> {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDY1MzEw", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349065310", "createdAt": "2020-01-28T00:22:30Z", "commit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDoyMjozMFrOFiV71Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMDoyNjozNVrOFiV_8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NTI4NQ==", "bodyText": "Not a fan of static importing, then?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371555285", "createdAt": "2020-01-28T00:22:30Z", "author": {"login": "CjHare"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetPrivateTransactionSuccess.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetPrivateTransactionTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n+\n+import org.assertj.core.api.Assertions;\n+\n+public class PrivGetPrivateTransactionSuccess implements Condition {\n+\n+  private final PrivGetPrivateTransactionTransaction transaction;\n+  private final String privateFrom;\n+\n+  public PrivGetPrivateTransactionSuccess(\n+      final PrivGetPrivateTransactionTransaction transaction, final String privateFrom) {\n+    this.transaction = transaction;\n+    this.privateFrom = privateFrom;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    PrivacyRequestFactory.GetPrivateTransactionResponse result = node.execute(transaction);\n+    Assertions.assertThat(result.getPrivateFrom()).isEqualTo(privateFrom);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NTk4NQ==", "bodyText": "Style: static fields are usually upper case i.e ENCLAVE_PORT", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371555985", "createdAt": "2020-01-28T00:25:14Z", "author": {"login": "CjHare"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int enclavePort = 1080;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU1NjMzOA==", "bodyText": "As an ObjectMapper is used in at least two tests, perhaps promoting to a class field is appropriate?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371556338", "createdAt": "2020-01-28T00:26:35Z", "author": {"login": "CjHare"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int enclavePort = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(enclavePort));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + enclavePort,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess());\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d99ae372ae494aaeec8d08b40e880a168eb2af2"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTIzNTA2", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349123506", "createdAt": "2020-01-28T04:26:49Z", "commit": {"oid": "812615d282ba69ac032c760eded9f5aeb6d8620c"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDoyNjo1MFrOFiY7Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNTozMjowOVrOFiZqNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNDMwNg==", "bodyText": "nit: I think enabled is implied, so perhaps just createNodeWithMultiTenancy", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371604306", "createdAt": "2020-01-28T04:26:50Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -161,6 +168,36 @@ public BesuNode createNodeWithP2pDisabled(final String name) throws IOException\n             .build());\n   }\n \n+  public BesuNode createNodeWithMultiTenancyEnabled(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "812615d282ba69ac032c760eded9f5aeb6d8620c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODIwNw==", "bodyText": "What about tests for sending transactions with eea_sendRawTransaction and priv_distributeRawTransaction?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371608207", "createdAt": "2020-01-28T04:44:06Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODQyMQ==", "bodyText": "Also should have some tests for priv_getTransactionCount and prvi_getTransactionReceipt rpcs", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371608421", "createdAt": "2020-01-28T04:45:39Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODc5NQ==", "bodyText": "These constants can be capitalised", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371608795", "createdAt": "2020-01-28T04:47:55Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODk5NA==", "bodyText": "Can these be made constants?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371608994", "createdAt": "2020-01-28T04:49:14Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDkyMQ==", "bodyText": "These needs be a private marker transaction for this to work. This would be creating a transaction with an empty payload which works because you are responding for any reason on the enclave /receive", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371610921", "createdAt": "2020-01-28T05:00:59Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    final Integer precompileAddress = Integer.decode(\"0x7E\");\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTQyNg==", "bodyText": "More descriptive name, success doesn't indicate what case this testing for. Perhaps something like shouldGetPrivateTransactionWhenUsersPrivacyGroup not sure exactly on the what wording. But it looks like this is the happy case you are testing when it's our privacy group the transaction is in.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371611426", "createdAt": "2020-01-28T05:03:56Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    final Integer precompileAddress = Integer.decode(\"0x7E\");\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTU0MA==", "bodyText": "Again, more detail on the test name why should it create the privacy group?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371611540", "createdAt": "2020-01-28T05:04:40Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    final Integer precompileAddress = Integer.decode(\"0x7E\");\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void shouldCreatePrivacyGroup() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTU4NQ==", "bodyText": "As above, more detail on the test name", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371611585", "createdAt": "2020-01-28T05:04:53Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    final Integer precompileAddress = Integer.decode(\"0x7E\");\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n+    final String groupId = \"groupId\";\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+\n+    final CreatePrivacyGroupParameter params =\n+        new CreatePrivacyGroupParameter(\n+            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n+    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n+  }\n+\n+  @Test\n+  public void shouldDeletePrivacyGroup() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTU5OA==", "bodyText": "As above, more detail on the test name", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371611598", "createdAt": "2020-01-28T05:04:57Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private static final int ENCLAVE_PORT = 1080;\n+  private final String privacyGroupId = \"groupId\";\n+  private final String enclaveKey = \"negmDcN2P4ODpqn/6WkJ02zT/0w0bjhGpkZ8UP6vARk=\";\n+\n+  private final String key1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private final String key2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private final String key3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancyEnabled(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivacyPrecompileAddress() {\n+    final Integer precompileAddress = Integer.decode(\"0x7E\");\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(precompileAddress));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+    // Create a transaction\n+    final Account sender = accounts.createAccount(\"account1\");\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), privacyGroupId, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void shouldCreatePrivacyGroup() throws JsonProcessingException {\n+    final String groupId = \"groupId\";\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+\n+    final CreatePrivacyGroupParameter params =\n+        new CreatePrivacyGroupParameter(\n+            List.of(key1, key2, key3), \"GroupName\", \"Group description.\");\n+    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privCreatePrivacyGroupSuccess(params, groupId));\n+  }\n+\n+  @Test\n+  public void shouldDeletePrivacyGroup() throws JsonProcessingException {\n+    final String retrieveGroupResponse = mapper.writeValueAsString(testPrivacyGroup());\n+    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n+\n+    final String deleteGroupResponse = mapper.writeValueAsString(privacyGroupId);\n+    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privDeletePrivacyGroupSuccess(privacyGroupId));\n+  }\n+\n+  @Test\n+  public void shouldFindPrivacyGroup() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg4MA==", "bodyText": "Do we need both?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371611880", "createdAt": "2020-01-28T05:06:30Z", "author": {"login": "jframe"}, "path": "enclave/src/main/java/org/hyperledger/besu/enclave/types/PrivacyGroup.java", "diffHunk": "@@ -82,6 +82,7 @@ public PrivacyGroup(\n \n   public enum Type {\n     LEGACY,\n-    PANTHEON\n+    PANTHEON,\n+    BESU", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjM1Ng==", "bodyText": "could just use int instead of Integer", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371612356", "createdAt": "2020-01-28T05:09:14Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivTransactions;\n+\n+public class PrivConditions {\n+\n+  private final PrivTransactions transactions;\n+\n+  public PrivConditions(final PrivTransactions transactions) {\n+    this.transactions = transactions;\n+  }\n+\n+  public Condition privGetPrivacyPrecompileAddressSuccess(final Integer precompileAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMzQ5NQ==", "bodyText": "The findPrivacyGroup returns a list of found privacy groups not a string. Would of expected this condition to verify the returned privacy groups matches some expected value.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371613495", "createdAt": "2020-01-28T05:15:56Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivFindPrivacyGroupTransaction;\n+\n+public class PrivFindPrivacyGroupSuccess implements Condition {\n+\n+  private final PrivFindPrivacyGroupTransaction transaction;\n+\n+  public PrivFindPrivacyGroupSuccess(final PrivFindPrivacyGroupTransaction transaction) {\n+    this.transaction = transaction;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    final String result = node.execute(transaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxNDk3NQ==", "bodyText": "Not sure what the current thinking is, but we are trying to prefix all transactions with create to make it more readable", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371614975", "createdAt": "2020-01-28T05:24:30Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivTransactions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+\n+public class PrivTransactions {\n+  public PrivGetPrivacyPrecompileAddressTransaction privGetPrivacyPrecompileAddress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxNTExMQ==", "bodyText": "Don't we need to mention priv as part of the method name, we can get that from the transaction class name.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371615111", "createdAt": "2020-01-28T05:25:27Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivTransactions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+\n+public class PrivTransactions {\n+  public PrivGetPrivacyPrecompileAddressTransaction privGetPrivacyPrecompileAddress() {\n+    return new PrivGetPrivacyPrecompileAddressTransaction();\n+  }\n+\n+  public PrivGetPrivateTransactionTransaction privGetPrivateTransaction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxNTgwNA==", "bodyText": "Can the above response classes be moved to sit with your response classes at the top of the class", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371615804", "createdAt": "2020-01-28T05:29:29Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -51,4 +82,46 @@ public String getTransactionKey() {\n       return getResult();\n     }\n   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxNjMwOA==", "bodyText": "Bit torn here, the private transaction response contains a lot more than just result. Thinking we should probably define the response type correctly with all fields even if we are only checking the result at the moment.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r371616308", "createdAt": "2020-01-28T05:32:09Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -16,12 +16,43 @@\n \n import static java.util.Collections.singletonList;\n \n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import org.web3j.protocol.Web3jService;\n import org.web3j.protocol.besu.Besu;\n import org.web3j.protocol.core.Request;\n import org.web3j.protocol.core.Response;\n \n public class PrivacyRequestFactory {\n+\n+  public static class GetPrivacyPrecompileAddressResponse extends Response<String> {}\n+\n+  public static class GetPrivateTransactionResponse extends Response<HashMap<String, String>> {\n+    final String privateFrom;\n+\n+    @JsonCreator\n+    public GetPrivateTransactionResponse(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTM4NDM4", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-349138438", "createdAt": "2020-01-28T05:34:47Z", "commit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMDIwMzk1", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-352020395", "createdAt": "2020-02-03T04:53:24Z", "commit": {"oid": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNDo1MzoyNFrOFkmXsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNToxNjo0OVrOFkmk-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMTcxNA==", "bodyText": "nit: rename to transactionHash", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373921714", "createdAt": "2020-02-03T04:53:24Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.WaitUtils;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.EeaSendRawTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionCountTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n+\n+import org.assertj.core.api.Assertions;\n+\n+public class EeaSendRawTransactionWithCountVerification implements Condition {\n+\n+  private final EeaSendRawTransaction sendRawTransactionTransaction;\n+  private final Object[] transactionCountParams;\n+\n+  public EeaSendRawTransactionWithCountVerification(\n+      final EeaSendRawTransaction sendRawTransactionTransaction,\n+      final Object[] transactionCountParams) {\n+    this.sendRawTransactionTransaction = sendRawTransactionTransaction;\n+    this.transactionCountParams = transactionCountParams;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    final PrivGetTransactionCountTransaction getTransactionCountTransaction =\n+        new PrivGetTransactionCountTransaction(transactionCountParams);\n+    WaitUtils.waitFor(\n+        () -> Assertions.assertThat(node.execute(getTransactionCountTransaction)).isEqualTo(0));\n+\n+    final Hash result = node.execute(sendRawTransactionTransaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMjI2Ng==", "bodyText": "Instead of passing in an array of params for the sendRawTransaction it would be nicer to pass in the sender and privacyGroupId as seperate arguments", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373922266", "createdAt": "2020-02-03T04:56:53Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n+\n+public class PrivConditions {\n+\n+  private final PrivacyTransactions transactions;\n+\n+  public PrivConditions(final PrivacyTransactions transactions) {\n+    this.transactions = transactions;\n+  }\n+\n+  public Condition privGetPrivacyPrecompileAddressSuccess(final Address precompileAddress) {\n+    return new PrivGetPrivacyPrecompileAddressSuccess(\n+        transactions.getPrivacyPrecompileAddress(), precompileAddress);\n+  }\n+\n+  public Condition privGetPrivateTransactionSuccess(\n+      final String transactionHash, final String privateFrom) {\n+    return new PrivGetPrivateTransactionSuccess(\n+        transactions.getPrivateTransaction(transactionHash), privateFrom);\n+  }\n+\n+  public Condition privCreatePrivacyGroupSuccess(\n+      final CreatePrivacyGroupParameter params, final String groupId) {\n+    return new PrivCreatePrivacyGroupSuccess(transactions.createPrivacyGroup(params), groupId);\n+  }\n+\n+  public Condition privDeletePrivacyGroupSuccess(final String groupId) {\n+    return new PrivDeletePrivacyGroupSuccess(transactions.deletePrivacyGroup(groupId), groupId);\n+  }\n+\n+  public Condition privFindPrivacyGroupSuccess(final String[] groupMembers, final int numGroups) {\n+    return new PrivFindPrivacyGroupSuccess(transactions.findPrivacyGroup(groupMembers), numGroups);\n+  }\n+\n+  public Condition eeaSendRawTransactionSuccess(\n+      final String transaction, final Object[] transactionCountParams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMjM5OQ==", "bodyText": "nit: rename to privacyGroups", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373922399", "createdAt": "2020-02-03T04:57:54Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivFindPrivacyGroupSuccess.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivFindPrivacyGroupTransaction;\n+\n+public class PrivFindPrivacyGroupSuccess implements Condition {\n+\n+  private final PrivFindPrivacyGroupTransaction transaction;\n+  private final int numGroups;\n+\n+  public PrivFindPrivacyGroupSuccess(\n+      final PrivFindPrivacyGroupTransaction transaction, final int numGroups) {\n+    this.transaction = transaction;\n+    this.numGroups = numGroups;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    final PrivacyGroup[] result = node.execute(transaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMjg4Ng==", "bodyText": "Think this should be in a multitenancy package under privacy", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373922886", "createdAt": "2020-02-03T05:01:28Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyMzQ3OA==", "bodyText": "Will this always be 1? Might need to pass in the transaction count as an argument.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373923478", "createdAt": "2020-02-03T05:05:56Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionWithCountVerification.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.WaitUtils;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.EeaSendRawTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionCountTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n+\n+import org.assertj.core.api.Assertions;\n+\n+public class EeaSendRawTransactionWithCountVerification implements Condition {\n+\n+  private final EeaSendRawTransaction sendRawTransactionTransaction;\n+  private final Object[] transactionCountParams;\n+\n+  public EeaSendRawTransactionWithCountVerification(\n+      final EeaSendRawTransaction sendRawTransactionTransaction,\n+      final Object[] transactionCountParams) {\n+    this.sendRawTransactionTransaction = sendRawTransactionTransaction;\n+    this.transactionCountParams = transactionCountParams;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    final PrivGetTransactionCountTransaction getTransactionCountTransaction =\n+        new PrivGetTransactionCountTransaction(transactionCountParams);\n+    WaitUtils.waitFor(\n+        () -> Assertions.assertThat(node.execute(getTransactionCountTransaction)).isEqualTo(0));\n+\n+    final Hash result = node.execute(sendRawTransactionTransaction);\n+    assertThat(result).isInstanceOf(Hash.class);\n+\n+    WaitUtils.waitFor(\n+        () ->\n+            Assertions.assertThat(node.execute(new PrivGetTransactionReceiptTransaction(result)))\n+                .isNotNull());\n+\n+    WaitUtils.waitFor(\n+        () -> Assertions.assertThat(node.execute(getTransactionCountTransaction)).isEqualTo(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNDUxMg==", "bodyText": "Just pass the hash through as the hash type, the condition or the transaction can do the conversion, will make test bit easier to read.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373924512", "createdAt": "2020-02-03T05:12:55Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Account sender = accounts.createAccount(\"account1\");\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_pub_key\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void getPrivacyPrecompileAddressShouldReturnExpectedAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(DEFAULT_PRIVACY));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), PRIVACY_GROUP_ID, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNDkxNQ==", "bodyText": "Think this would be nicer without the intermediary CreatePrivacyGroupParameter object with just passing through the keys, name and description as 3 params to the privCreatePrivacyGroupSuccess condition", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373924915", "createdAt": "2020-02-03T05:15:43Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Account sender = accounts.createAccount(\"account1\");\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_pub_key\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void getPrivacyPrecompileAddressShouldReturnExpectedAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(DEFAULT_PRIVACY));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), PRIVACY_GROUP_ID, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void createPrivacyGroupSuccessShouldReturnNewId() throws JsonProcessingException {\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup(emptyList()));\n+\n+    final CreatePrivacyGroupParameter params =\n+        new CreatePrivacyGroupParameter(\n+            List.of(KEY1, KEY2, KEY3), \"GroupName\", \"Group description.\");\n+    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privCreatePrivacyGroupSuccess(params, PRIVACY_GROUP_ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkyNTExMg==", "bodyText": "could just pass in the privacy groups as a vararg?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r373925112", "createdAt": "2020-02-03T05:16:49Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.parameters.CreatePrivacyGroupParameter;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Account sender = accounts.createAccount(\"account1\");\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_pub_key\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+  }\n+\n+  @Test\n+  public void getPrivacyPrecompileAddressShouldReturnExpectedAddress() {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(DEFAULT_PRIVACY));\n+  }\n+\n+  @Test\n+  public void shouldGetPrivateTransaction() throws JsonProcessingException {\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+\n+    final String base64SignedPrivateTransactionRLP =\n+        \"+MyAAYJSCJQJXnuupqbHxMLf65d++sMmr1Uth6D//////////////////////////////////////////4AboEi1W/qRWseVxDGXjYpqmStijVV9pf91mzB9SVo2ZJNToB//0xCsdD83HeO59/nLVsCyitQ2AbSrlJ9T+qB70sgEoANWlbTMSwlB5gVR16Gc8wYD21v8I+WsQ6VvV/JfdUhqoA8gDohf8p6XPiV2tmABgdGworUpTjDZvkoZgf+zOguMinJlc3RyaWN0ZWQ=\";\n+    // privateFrom value from above transaction\n+    final String privateFrom = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+    final Hash transactionHash = node.execute(accountTransactions.createTransfer(sender, 50));\n+    multiTenancyCluster.verify(sender.balanceEquals(50));\n+\n+    final String receiveResponse =\n+        mapper.writeValueAsString(\n+            new ReceiveResponse(\n+                base64SignedPrivateTransactionRLP.getBytes(UTF_8), PRIVACY_GROUP_ID, \"senderKey\"));\n+\n+    stubFor(post(\"/receive\").willReturn(ok(receiveResponse)));\n+\n+    node.verify(priv.privGetPrivateTransactionSuccess(transactionHash.toString(), privateFrom));\n+  }\n+\n+  @Test\n+  public void createPrivacyGroupSuccessShouldReturnNewId() throws JsonProcessingException {\n+    final String createGroupResponse = mapper.writeValueAsString(testPrivacyGroup(emptyList()));\n+\n+    final CreatePrivacyGroupParameter params =\n+        new CreatePrivacyGroupParameter(\n+            List.of(KEY1, KEY2, KEY3), \"GroupName\", \"Group description.\");\n+    stubFor(post(\"/createPrivacyGroup\").willReturn(ok(createGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privCreatePrivacyGroupSuccess(params, PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void deletePrivacyGroupSuccessShouldReturnId() throws JsonProcessingException {\n+    final String retrieveGroupResponse =\n+        mapper.writeValueAsString(testPrivacyGroup(List.of(ENCLAVE_KEY)));\n+    stubFor(post(\"/retrievePrivacyGroup\").willReturn(ok(retrieveGroupResponse)));\n+\n+    final String deleteGroupResponse = mapper.writeValueAsString(PRIVACY_GROUP_ID);\n+    stubFor(post(\"/deletePrivacyGroup\").willReturn(ok(deleteGroupResponse)));\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privDeletePrivacyGroupSuccess(PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void findPrivacyGroupSuccessShouldReturnExpectedGroupMembership()\n+      throws JsonProcessingException {\n+    List<PrivacyGroup> groupMembership =\n+        List.of(\n+            testPrivacyGroup(emptyList()),\n+            testPrivacyGroup(emptyList()),\n+            testPrivacyGroup(emptyList()));\n+    final String findGroupResponse = mapper.writeValueAsString(groupMembership);\n+    stubFor(post(\"/findPrivacyGroup\").willReturn(ok(findGroupResponse)));\n+\n+    final String[] paramArray = {ENCLAVE_KEY};\n+\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+    node.verify(priv.privFindPrivacyGroupSuccess(paramArray, groupMembership.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ee00904fcfe9a552f0f4b771be2101f6e7f515"}, "originalPosition": 156}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aeddbf15211883a462b97729290413e1b0ad667", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/6aeddbf15211883a462b97729290413e1b0ad667", "committedDate": "2020-02-03T13:33:07Z", "message": "[PIE-1798] Added Privacy RPC ATs with stub enclave.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c93e5c896a4b97e7d4e2ca74a423a7c01ebb8f9d", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/c93e5c896a4b97e7d4e2ca74a423a7c01ebb8f9d", "committedDate": "2020-02-03T13:26:24Z", "message": "[PIE-1798] PR fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}, "afterCommit": {"oid": "6aeddbf15211883a462b97729290413e1b0ad667", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/6aeddbf15211883a462b97729290413e1b0ad667", "committedDate": "2020-02-03T13:33:07Z", "message": "[PIE-1798] Added Privacy RPC ATs with stub enclave.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcdc869e358214913e7759a19d74d9284b0c7e1e", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/fcdc869e358214913e7759a19d74d9284b0c7e1e", "committedDate": "2020-02-03T14:20:30Z", "message": "[PIE-1798] Removed PrivacyGroup type.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}, "afterCommit": {"oid": "6aeddbf15211883a462b97729290413e1b0ad667", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/6aeddbf15211883a462b97729290413e1b0ad667", "committedDate": "2020-02-03T13:33:07Z", "message": "[PIE-1798] Added Privacy RPC ATs with stub enclave.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17694a2f87b21459e21c4e26ae4a0e66688653fa", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/17694a2f87b21459e21c4e26ae4a0e66688653fa", "committedDate": "2020-02-05T03:18:57Z", "message": "[PIE-1798] AT test fix.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNDU2MjA0", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-353456204", "createdAt": "2020-02-05T04:09:58Z", "commit": {"oid": "17694a2f87b21459e21c4e26ae4a0e66688653fa"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDowOTo1OFrOFlrRrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNDoxMzo0OVrOFlrUYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MDY2OA==", "bodyText": "nit: this can be a local var", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375050668", "createdAt": "2020-02-05T04:09:58Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17694a2f87b21459e21c4e26ae4a0e66688653fa"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA1MTM2Mw==", "bodyText": "Tests for priv_getTransactionCount, priv_getEeaTransactionCount and priv_call. Perhaps these are tested indirectly through other tests though?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375051363", "createdAt": "2020-02-05T04:13:49Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,229 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.account.Account;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Account sender = accounts.createAccount(\"account1\");\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_pub_key\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17694a2f87b21459e21c4e26ae4a0e66688653fa"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "483e595bce0fb4a0f508182b4b1afe97e7e30ecc", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/483e595bce0fb4a0f508182b4b1afe97e7e30ecc", "committedDate": "2020-02-05T13:49:11Z", "message": "[PIE-1798] Refactorings.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7caa5580aff8c256ec2953218b7c6335c03c86dd", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/7caa5580aff8c256ec2953218b7c6335c03c86dd", "committedDate": "2020-02-05T14:23:35Z", "message": "[PIE-1798] errorprone.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "973addd7bf2c8b1d95af30b93d70d94bb2f59335", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/973addd7bf2c8b1d95af30b93d70d94bb2f59335", "committedDate": "2020-02-05T15:11:44Z", "message": "[PIE-1798] priv_getPrivateTransaction fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3b33d49f95f48a0763ec25eb927acdb90406232", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/a3b33d49f95f48a0763ec25eb927acdb90406232", "committedDate": "2020-02-05T15:21:04Z", "message": "[PIE-1798] priv_getTransactionReceipt test.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb", "committedDate": "2020-02-06T01:27:06Z", "message": "[PIE-1798] privGetEeaTransactionCount test.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MjA0NTI5", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-354204529", "createdAt": "2020-02-06T05:14:57Z", "commit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNToxNDo1OFrOFmPexg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNTo1MTo1OVrOFmP80g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0Mzg0Ng==", "bodyText": "Why do we need a completableFuture here? Generally the ATs are written in synchronous way so that we perform some operation using node.execute and then node.verify to wait for the condition to succeed.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375643846", "createdAt": "2020-02-06T05:14:58Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/EeaSendRawTransactionSuccess.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.EeaSendRawTransactionTransaction;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+public class EeaSendRawTransactionSuccess implements Condition {\n+\n+  private final EeaSendRawTransactionTransaction sendRawTransactionTransaction;\n+  private final CompletableFuture<Hash> completeableFuture;\n+\n+  public EeaSendRawTransactionSuccess(\n+      final EeaSendRawTransactionTransaction sendRawTransactionTransaction,\n+      final CompletableFuture<Hash> completableFuture) {\n+    this.sendRawTransactionTransaction = sendRawTransactionTransaction;\n+    this.completeableFuture = completableFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NDIxNg==", "bodyText": "I think we can remove the Success from the end of all these conditions as that is the normal case.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375644216", "createdAt": "2020-02-06T05:16:42Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class PrivConditions {\n+\n+  private final PrivacyTransactions transactions;\n+\n+  public PrivConditions(final PrivacyTransactions transactions) {\n+    this.transactions = transactions;\n+  }\n+\n+  public Condition privGetPrivacyPrecompileAddressSuccess(final Address precompileAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NDU0Mw==", "bodyText": "No need for priv at the start of all the conditions, they are in the privConditions so it will be obvious these are in the priv namespace.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375644543", "createdAt": "2020-02-06T05:18:06Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivConditions.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyTransactions;\n+\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class PrivConditions {\n+\n+  private final PrivacyTransactions transactions;\n+\n+  public PrivConditions(final PrivacyTransactions transactions) {\n+    this.transactions = transactions;\n+  }\n+\n+  public Condition privGetPrivacyPrecompileAddressSuccess(final Address precompileAddress) {\n+    return new PrivGetPrivacyPrecompileAddressSuccess(\n+        transactions.getPrivacyPrecompileAddress(), precompileAddress);\n+  }\n+\n+  public Condition privGetPrivateTransactionSuccess(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NDcwOQ==", "bodyText": "nit: can use the primitive int here", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375644709", "createdAt": "2020-02-06T05:18:55Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetEeaTransactionCountSuccess.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetEeaTransactionCountTransaction;\n+\n+public class PrivGetEeaTransactionCountSuccess implements Condition {\n+\n+  private final PrivGetEeaTransactionCountTransaction privGetEeaTransactionCountTransaction;\n+  private final int expectedTransactionCount;\n+\n+  public PrivGetEeaTransactionCountSuccess(\n+      final PrivGetEeaTransactionCountTransaction privGetEeaTransactionCountTransaction,\n+      final int expectedTransactionCount) {\n+    this.privGetEeaTransactionCountTransaction = privGetEeaTransactionCountTransaction;\n+    this.expectedTransactionCount = expectedTransactionCount;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    final Integer result = node.execute(privGetEeaTransactionCountTransaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NTU4OA==", "bodyText": "why do we need to check the instance type of the result?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375645588", "createdAt": "2020-02-06T05:23:21Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.WaitUtils;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n+\n+import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;\n+\n+public class PrivGetTransactionReceiptSuccess implements Condition {\n+\n+  private final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction;\n+\n+  public PrivGetTransactionReceiptSuccess(\n+      final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction) {\n+    this.privGetTransactionCountTransaction = privGetTransactionCountTransaction;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    WaitUtils.waitFor(\n+        () ->\n+            assertThat(node.execute(privGetTransactionCountTransaction))\n+                .isNotNull()\n+                .isInstanceOf(PrivateTransactionReceipt.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NTg1OQ==", "bodyText": "Can we just check that status is 1 indicating it's successful?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375645859", "createdAt": "2020-02-06T05:24:48Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetTransactionReceiptSuccess.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.WaitUtils;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n+\n+import org.web3j.protocol.besu.response.privacy.PrivateTransactionReceipt;\n+\n+public class PrivGetTransactionReceiptSuccess implements Condition {\n+\n+  private final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction;\n+\n+  public PrivGetTransactionReceiptSuccess(\n+      final PrivGetTransactionReceiptTransaction privGetTransactionCountTransaction) {\n+    this.privGetTransactionCountTransaction = privGetTransactionCountTransaction;\n+  }\n+\n+  @Override\n+  public void verify(final Node node) {\n+    WaitUtils.waitFor(\n+        () ->\n+            assertThat(node.execute(privGetTransactionCountTransaction))\n+                .isNotNull()\n+                .isInstanceOf(PrivateTransactionReceipt.class));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NjQ3Ng==", "bodyText": "rename to privateFrom", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375646476", "createdAt": "2020-02-06T05:27:55Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetEeaTransactionCountTransaction implements Transaction<Integer> {\n+\n+  private final Object[] params;\n+\n+  public PrivGetEeaTransactionCountTransaction(\n+      final String transactionCountSender,\n+      final String transactionCountSenderBase64,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NjUzMg==", "bodyText": "rename to privateFor", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375646532", "createdAt": "2020-02-06T05:28:08Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetEeaTransactionCountTransaction implements Transaction<Integer> {\n+\n+  private final Object[] params;\n+\n+  public PrivGetEeaTransactionCountTransaction(\n+      final String transactionCountSender,\n+      final String transactionCountSenderBase64,\n+      final String[] addresses) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0Njg4MA==", "bodyText": "perhaps accountAddress?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375646880", "createdAt": "2020-02-06T05:29:58Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetEeaTransactionCountTransaction.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetEeaTransactionCountTransaction implements Transaction<Integer> {\n+\n+  private final Object[] params;\n+\n+  public PrivGetEeaTransactionCountTransaction(\n+      final String transactionCountSender,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NzE0Ng==", "bodyText": "nit: rename transactionCountSender to accountAddress and transactionCountPrivacyGroupId could be just privacyGroupId", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375647146", "createdAt": "2020-02-06T05:31:07Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetTransactionCountTransaction.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetTransactionCountTransaction implements Transaction<Integer> {\n+\n+  private final Object[] params;\n+\n+  public PrivGetTransactionCountTransaction(\n+      final String transactionCountSender, final String transactionCountPrivacyGroupId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0NzI2NQ==", "bodyText": "No need to have transaction on the end if transaction is in the name", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375647265", "createdAt": "2020-02-06T05:31:40Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivGetPrivateTransactionTransaction.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.privacy.PrivateTransactionGroupResult;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.NodeRequests;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.io.IOException;\n+\n+public class PrivGetPrivateTransactionTransaction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0ODcyOA==", "bodyText": "Do we need this change? It's not in the AT package, will this affect the priv_getPrivateTransaction rpc response?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375648728", "createdAt": "2020-02-06T05:38:23Z", "author": {"login": "jframe"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionGroupResult.java", "diffHunk": "@@ -47,6 +49,26 @@ public PrivateTransactionGroupResult(final PrivateTransaction tx) {\n     this.privacyGroupId = tx.getPrivacyGroupId().get().toBase64String();\n   }\n \n+  @JsonCreator\n+  public PrivateTransactionGroupResult(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY0OTEyNA==", "bodyText": "Does this need to change? Seems odd that we would be modifying classes in the API module for a AT unless there is a bug somewhere.", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375649124", "createdAt": "2020-02-06T05:40:18Z", "author": {"login": "jframe"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/privacy/PrivateTransactionResult.java", "diffHunk": "@@ -53,6 +55,36 @@ public PrivateTransactionResult(final PrivateTransaction tx) {\n     this.restriction = new String(tx.getRestriction().getBytes().toArrayUnsafe(), UTF_8);\n   }\n \n+  @JsonCreator\n+  public PrivateTransactionResult(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTY1MTUzOA==", "bodyText": "added another comment about this, but would be good if we can avoid passing a future into the condition", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r375651538", "createdAt": "2020-02-06T05:51:59Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private Cluster multiTenancyCluster;\n+  private String token;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenancy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_pub_key\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    token = node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+\n+  @Test\n+  public void privGetPrivacyPrecompileAddressShouldReturnExpectedAddress() {\n+    node.verify(priv.privGetPrivacyPrecompileAddressSuccess(DEFAULT_PRIVACY));\n+  }\n+\n+  @Test\n+  public void privGetPrivateTransactionSuccessShouldReturnExpectedPrivateTransaction()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress);\n+\n+    receiveEnclaveStub(getRLPOutput(validSignedPrivateTransaction));\n+    retrievePrivacyGroupEnclaveStub();\n+    sendEnclaveStub(\"testKey\");\n+\n+    final Hash transactionHash =\n+        node.execute(\n+            privacyTransactions.sendRawTransaction(\n+                getRLPOutput(validSignedPrivateTransaction).encoded().toHexString()));\n+    node.verify(priv.getTransactionReceiptSuccess(transactionHash));\n+    node.verify(\n+        priv.privGetPrivateTransactionSuccess(transactionHash, validSignedPrivateTransaction));\n+  }\n+\n+  @Test\n+  public void privCreatePrivacyGroupSuccessShouldReturnNewId() throws JsonProcessingException {\n+    createPrivacyGroupEnclaveStub();\n+\n+    node.verify(\n+        priv.privCreatePrivacyGroupSuccess(\n+            List.of(KEY1, KEY2, KEY3), \"GroupName\", \"Group description.\", PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void privDeletePrivacyGroupSuccessShouldReturnId() throws JsonProcessingException {\n+    retrievePrivacyGroupEnclaveStub();\n+    deletePrivacyGroupEnclaveStub();\n+\n+    node.verify(priv.privDeletePrivacyGroupSuccess(PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void privFindPrivacyGroupSuccessShouldReturnExpectedGroupMembership()\n+      throws JsonProcessingException {\n+    final List<PrivacyGroup> groupMembership =\n+        List.of(\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU),\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU),\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU));\n+\n+    findPrivacyGroupEnclaveStub(groupMembership);\n+\n+    node.verify(priv.privFindPrivacyGroupSuccess(groupMembership.size(), ENCLAVE_KEY));\n+  }\n+\n+  @Test\n+  public void eeaSendRawTransactionSuccessShouldReturnPrivateTransactionHash()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress);\n+\n+    retrievePrivacyGroupEnclaveStub();\n+    sendEnclaveStub(\"testKey\");\n+    receiveEnclaveStub(getRLPOutput(validSignedPrivateTransaction));\n+\n+    CompletableFuture<Hash> completableFuture = new CompletableFuture<>();\n+\n+    node.verify(\n+        priv.eeaSendRawTransactionSuccess(\n+            getRLPOutput(validSignedPrivateTransaction).encoded().toHexString(),\n+            completableFuture));\n+\n+    completableFuture.whenComplete(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dc2e3eb9de7c3a981fc990820fb0edd05f5a4fb"}, "originalPosition": 160}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/26e2ae42161267533dae57ae7504d13c29a22d0c", "committedDate": "2020-02-06T14:28:11Z", "message": "[PIE-1798] PR fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0OTA4MzE3", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-354908317", "createdAt": "2020-02-07T03:07:13Z", "commit": {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzowNzoxM1rOFmxGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoxOTo1MFrOFmxQZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NDY5MQ==", "bodyText": "is this needed for this PR? I.e. does this PR make use of random vs signed Private Marker transactions?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376194691", "createdAt": "2020-02-07T03:07:13Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java", "diffHunk": "@@ -105,7 +106,21 @@ public void startNode(final BesuNode node) {\n       params.add(\"--privacy-precompiled-address\");\n       params.add(String.valueOf(node.getPrivacyParameters().getPrivacyAddress()));\n       params.add(\"--privacy-marker-transaction-signing-key-file\");\n-      params.add(node.homeDirectory().resolve(\"key\").toString());\n+      node.getPrivacyParameters()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NDc0MA==", "bodyText": "do you need to flag the tempFIle as \"deleteOnExit\"?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376194740", "createdAt": "2020-02-07T03:07:27Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java", "diffHunk": "@@ -105,7 +106,21 @@ public void startNode(final BesuNode node) {\n       params.add(\"--privacy-precompiled-address\");\n       params.add(String.valueOf(node.getPrivacyParameters().getPrivacyAddress()));\n       params.add(\"--privacy-marker-transaction-signing-key-file\");\n-      params.add(node.homeDirectory().resolve(\"key\").toString());\n+      node.getPrivacyParameters()\n+          .getSigningKeyPair()\n+          .ifPresentOrElse(\n+              keyPair -> {\n+                try {\n+                  File privKeyFile = File.createTempFile(\"privKey\", \".tmp\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTAxMQ==", "bodyText": "rename the function to imply the authFile is coming from SystemResources (also - this is no longer an enable/disable function", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376195011", "createdAt": "2020-02-07T03:08:52Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java", "diffHunk": "@@ -103,11 +105,10 @@ public BesuNodeConfigurationBuilder enablePrivateTransactions() {\n     return this;\n   }\n \n-  public BesuNodeConfigurationBuilder jsonRpcAuthenticationEnabled() throws URISyntaxException {\n+  public BesuNodeConfigurationBuilder jsonRpcAuthenticationEnabled(final String authFile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTIxOA==", "bodyText": "nit:_personally I'd rather see someone pass in a concrete privacyParameters, then this function can do a \"Optional.ofNullable\" - the person injecting the data doesn't (necessarily) want to have to construct up an Optional to make this work (unless this is invoked from a simple pass-through function)", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376195218", "createdAt": "2020-02-07T03:09:57Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeConfigurationBuilder.java", "diffHunk": "@@ -234,6 +235,12 @@ public BesuNodeConfigurationBuilder staticNodes(final List<String> staticNodes)\n     return this;\n   }\n \n+  public BesuNodeConfigurationBuilder privacyParameters(\n+      final Optional<PrivacyParameters> privacyParameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTY5OQ==", "bodyText": "nit: rename to end with ...withMultiTenantedPrivacy?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376195699", "createdAt": "2020-02-07T03:12:22Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -161,6 +168,39 @@ public BesuNode createNodeWithP2pDisabled(final String name) throws IOException\n             .build());\n   }\n \n+  public BesuNode createNodeWithMultiTenancy(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NTk1OA==", "bodyText": "what are these priv/pub keys - or are they referenced from the authFile?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376195958", "createdAt": "2020-02-07T03:13:16Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -161,6 +168,39 @@ public BesuNode createNodeWithP2pDisabled(final String name) throws IOException\n             .build());\n   }\n \n+  public BesuNode createNodeWithMultiTenancy(\n+      final String name,\n+      final String enclaveUrl,\n+      final String authFile,\n+      final String authPubKeyFile,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NjI1NQ==", "bodyText": "is this needed for multi-tenancy (i.e. isn't this in the auth file?)", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376196255", "createdAt": "2020-02-07T03:14:48Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/configuration/BesuNodeFactory.java", "diffHunk": "@@ -161,6 +168,39 @@ public BesuNode createNodeWithP2pDisabled(final String name) throws IOException\n             .build());\n   }\n \n+  public BesuNode createNodeWithMultiTenancy(\n+      final String name,\n+      final String enclaveUrl,\n+      final String authFile,\n+      final String authPubKeyFile,\n+      final String authPrivateKeyPath)\n+      throws IOException, URISyntaxException {\n+    final PrivacyParameters.Builder privacyParametersBuilder = new PrivacyParameters.Builder();\n+    final PrivacyParameters privacyParameters =\n+        privacyParametersBuilder\n+            .setMultiTenancyEnabled(true)\n+            .setEnabled(true)\n+            .setStorageProvider(new InMemoryPrivacyStorageProvider())\n+            .setEnclaveFactory(new EnclaveFactory(Vertx.vertx()))\n+            .setEnclaveUrl(URI.create(enclaveUrl))\n+            .setEnclavePublicKeyUsingFile(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NzAwNg==", "bodyText": "still here?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376197006", "createdAt": "2020-02-07T03:18:43Z", "author": {"login": "rain-on"}, "path": "enclave/src/main/java/org/hyperledger/besu/enclave/types/PrivacyGroup.java", "diffHunk": "@@ -82,6 +82,7 @@ public PrivacyGroup(\n \n   public enum Type {\n     LEGACY,\n-    PANTHEON\n+    PANTHEON,\n+    BESU", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg4MA=="}, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NzIyMg==", "bodyText": "nit: using a \"mock\" something in AT seems like a bad idea - is this being sued safely/sensibly?", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r376197222", "createdAt": "2020-02-07T03:19:50Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/tests/build.gradle", "diffHunk": "@@ -33,6 +35,8 @@ dependencies {\n   testImplementation 'org.web3j:besu'\n   testImplementation 'tech.pegasys.ethsigner.internal:core'\n   testImplementation 'tech.pegasys.ethsigner.internal:file-based'\n+\n+  testCompile \"com.github.tomakehurst:wiremock-jre8-standalone:2.25.1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26e2ae42161267533dae57ae7504d13c29a22d0c"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "850d8b3dd4194000ff4d7e5ba9527633db917bbe", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/850d8b3dd4194000ff4d7e5ba9527633db917bbe", "committedDate": "2020-02-07T15:16:55Z", "message": "[PIE-1798] PR fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae8bc976d2f67e3a70508f0c376408f93619996d", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/ae8bc976d2f67e3a70508f0c376408f93619996d", "committedDate": "2020-02-09T23:28:54Z", "message": "[PIE-1798] Test fixes.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eea14d80cbe74dbe125d3f6f9d52646db0754d91", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/eea14d80cbe74dbe125d3f6f9d52646db0754d91", "committedDate": "2020-02-10T12:41:50Z", "message": "Merge branch 'master' into PIE-1798"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzQ2NTQ0", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-356346544", "createdAt": "2020-02-10T23:47:33Z", "commit": {"oid": "eea14d80cbe74dbe125d3f6f9d52646db0754d91"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzo0NzozM1rOFn5tuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzo0ODoxOFrOFn5umw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4NDM3Ng==", "bodyText": "We should use PANTHEON for type now as that is what Orion supports", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r377384376", "createdAt": "2020-02-10T23:47:33Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static java.util.Collections.emptyList;\n+import static org.hyperledger.besu.ethereum.core.Address.DEFAULT_PRIVACY;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.enclave.types.ReceiveResponse;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.io.Base64;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String KEY1 = \"sgFkVOyFndZe/5SAZJO5UYbrl7pezHetveriBBWWnE8=\";\n+  private static final String KEY2 = \"R1kW75NQC9XX3kwNpyPjCBFflM29+XvnKKS9VLrUkzo=\";\n+  private static final String KEY3 = \"QzHuACXpfhoGAgrQriWJcDJ6MrUwcCvutKMoAn9KplQ=\";\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenantedPrivacy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+    final String token =\n+        node.execute(permissioningTransactions.createSuccessfulLogin(\"user\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    multiTenancyCluster.close();\n+  }\n+\n+  @Test\n+  public void privGetPrivacyPrecompileAddressShouldReturnExpectedAddress() {\n+    node.verify(priv.getPrivacyPrecompileAddress(DEFAULT_PRIVACY));\n+  }\n+\n+  @Test\n+  public void privGetPrivateTransactionSuccessShouldReturnExpectedPrivateTransaction()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress);\n+\n+    receiveEnclaveStub(getRLPOutput(validSignedPrivateTransaction));\n+    retrievePrivacyGroupEnclaveStub();\n+    sendEnclaveStub(\"testKey\");\n+\n+    final Hash transactionHash =\n+        node.execute(\n+            privacyTransactions.sendRawTransaction(\n+                getRLPOutput(validSignedPrivateTransaction).encoded().toHexString()));\n+    node.verify(priv.getTransactionReceipt(transactionHash));\n+    node.verify(priv.getPrivateTransaction(transactionHash, validSignedPrivateTransaction));\n+  }\n+\n+  @Test\n+  public void privCreatePrivacyGroupSuccessShouldReturnNewId() throws JsonProcessingException {\n+    createPrivacyGroupEnclaveStub();\n+\n+    node.verify(\n+        priv.createPrivacyGroup(\n+            List.of(KEY1, KEY2, KEY3), \"GroupName\", \"Group description.\", PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void privDeletePrivacyGroupSuccessShouldReturnId() throws JsonProcessingException {\n+    retrievePrivacyGroupEnclaveStub();\n+    deletePrivacyGroupEnclaveStub();\n+\n+    node.verify(priv.deletePrivacyGroup(PRIVACY_GROUP_ID));\n+  }\n+\n+  @Test\n+  public void privFindPrivacyGroupSuccessShouldReturnExpectedGroupMembership()\n+      throws JsonProcessingException {\n+    final List<PrivacyGroup> groupMembership =\n+        List.of(\n+            testPrivacyGroup(emptyList(), PrivacyGroup.Type.BESU),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eea14d80cbe74dbe125d3f6f9d52646db0754d91"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM4NDYwMw==", "bodyText": "Should remove Besu. Pantheon is the only option supported by Orion atm", "url": "https://github.com/hyperledger/besu/pull/330#discussion_r377384603", "createdAt": "2020-02-10T23:48:18Z", "author": {"login": "jframe"}, "path": "enclave/src/main/java/org/hyperledger/besu/enclave/types/PrivacyGroup.java", "diffHunk": "@@ -82,6 +82,7 @@ public PrivacyGroup(\n \n   public enum Type {\n     LEGACY,\n-    PANTHEON\n+    PANTHEON,\n+    BESU", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg4MA=="}, "originalCommit": {"oid": "1f495db92373a4c89cc472af5d02ddc52052fa15"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca9e3104222e05c4deff47e60dcc3068ee7186e7", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/ca9e3104222e05c4deff47e60dcc3068ee7186e7", "committedDate": "2020-02-10T23:57:44Z", "message": "[PIE-1798] Removed incorrect additional PrivacyGroup value.\n\nSigned-off-by: Mark Terry <mark.terry@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4be0cf192fc6c68ae8d10bb531cdc998c615516", "author": {"user": {"login": "mark-terry", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/e4be0cf192fc6c68ae8d10bb531cdc998c615516", "committedDate": "2020-02-10T23:58:42Z", "message": "Merge branch 'master' into PIE-1798"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MzcyODM4", "url": "https://github.com/hyperledger/besu/pull/330#pullrequestreview-356372838", "createdAt": "2020-02-11T01:09:37Z", "commit": {"oid": "e4be0cf192fc6c68ae8d10bb531cdc998c615516"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1904, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}