{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjEzOTc2", "number": 947, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxODoxOFrOD932LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyOTozNVrOEAj7Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjA0NzE2OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxODoxOFrOGXoOrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNjowMzozOFrOGb8NSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTU0OA==", "bodyText": "Should the whole block be in the execute runnable?  i.e. add the compare and set check into the async part?  Are we sure start will only ever be called once?", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r427429548", "createdAt": "2020-05-19T16:18:18Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -84,12 +84,14 @@ public Pruner(\n   }\n \n   public void start() {\n-\n     if (state.compareAndSet(State.IDLE, State.RUNNING)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655113820b1bb67ccbf9ceaa850e1e8cbf87e618"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzMzU2MA==", "bodyText": "I think we could call this as many times as we like and the compareAndSet would make sure that the if body is only executed once, right? That said, I don't mind pushing the whole thing into the execute. Works for me.", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r430533560", "createdAt": "2020-05-26T16:09:48Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -84,12 +84,14 @@ public Pruner(\n   }\n \n   public void start() {\n-\n     if (state.compareAndSet(State.IDLE, State.RUNNING)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTU0OA=="}, "originalCommit": {"oid": "655113820b1bb67ccbf9ceaa850e1e8cbf87e618"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1NjU3NQ==", "bodyText": "The executor may back up, so we could queue up a bunch of the lambdas for execution before the first one starts (which is where I presume the stat gets set to running or prepare).  While the test is idempotent the execution does not appear on its surface to be, especially since we are adding observers inside the async function.", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r430656575", "createdAt": "2020-05-26T19:33:10Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -84,12 +84,14 @@ public Pruner(\n   }\n \n   public void start() {\n-\n     if (state.compareAndSet(State.IDLE, State.RUNNING)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTU0OA=="}, "originalCommit": {"oid": "655113820b1bb67ccbf9ceaa850e1e8cbf87e618"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0MzAzNg==", "bodyText": "The state variable  is an AtomicReference - the code inside the block is guaranteed to execute at most once as it's currently written.", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r431943036", "createdAt": "2020-05-28T15:52:01Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -84,12 +84,14 @@ public Pruner(\n   }\n \n   public void start() {\n-\n     if (state.compareAndSet(State.IDLE, State.RUNNING)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTU0OA=="}, "originalCommit": {"oid": "655113820b1bb67ccbf9ceaa850e1e8cbf87e618"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1MTE3Ng==", "bodyText": "nm - I think I see the issue:  the startup logic could actually run after the shutdown logic because you don't know when it will actually execute \ud83d\udc4d", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r431951176", "createdAt": "2020-05-28T16:03:38Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -84,12 +84,14 @@ public Pruner(\n   }\n \n   public void start() {\n-\n     if (state.compareAndSet(State.IDLE, State.RUNNING)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyOTU0OA=="}, "originalCommit": {"oid": "655113820b1bb67ccbf9ceaa850e1e8cbf87e618"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjA1NjQ5OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoyMDoyMVrOGXoUdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoyMDoyMVrOGXoUdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzMTAyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void start() {\n          \n          \n            \n            \n          \n          \n            \n                if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n          \n          \n            \n                  LOG.info(\"Starting Pruner.\");\n          \n          \n            \n                  executorService = executorServiceSupplier.get();\n          \n          \n            \n                  pruningStrategy.prepare();\n          \n          \n            \n                  blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n          \n          \n            \n                  execute(\n          \n          \n            \n                      () -> {\n          \n          \n            \n                        pruningStrategy.prepare();\n          \n          \n            \n                        blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n          \n          \n            \n                      });\n          \n          \n            \n                }\n          \n          \n            \n              }\n          \n          \n            \n              public void start() {\n          \n          \n            \n                execute(this::startAsync);\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              private void startAsync() {\n          \n          \n            \n                  LOG.info(\"Starting Pruner.\");\n          \n          \n            \n                  executorService = executorServiceSupplier.get();\n          \n          \n            \n                  pruningStrategy.prepare();\n          \n          \n            \n                  blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n          \n          \n            \n                  pruningStrategy.prepare();\n          \n          \n            \n                  blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n          \n          \n            \n                }\n          \n          \n            \n              }", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r427431028", "createdAt": "2020-05-19T16:20:21Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -84,12 +84,14 @@ public Pruner(\n   }\n \n   public void start() {\n-\n     if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n       LOG.info(\"Starting Pruner.\");\n       executorService = executorServiceSupplier.get();\n-      pruningStrategy.prepare();\n-      blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n+      execute(\n+          () -> {\n+            pruningStrategy.prepare();\n+            blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n+          });\n     }\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "655113820b1bb67ccbf9ceaa850e1e8cbf87e618"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDIyNjg1OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyNjo0MlrOGb6maw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozNTozMVrOGb7AOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNDg0Mw==", "bodyText": "Not sure why you can't get your executor and then run the async task?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                execute(\n          \n          \n            \n                    () -> {\n          \n          \n            \n                      if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n          \n          \n            \n                        LOG.info(\"Starting Pruner.\");\n          \n          \n            \n                        pruningStrategy.prepare();\n          \n          \n            \n                        blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n          \n          \n            \n                      }\n          \n          \n            \n                    });\n          \n          \n            \n                if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n          \n          \n            \n                  LOG.info(\"Starting Pruner.\");\n          \n          \n            \n                  executorService = executorServiceSupplier.get();\n          \n          \n            \n                  execute(() -> {\n          \n          \n            \n                      pruningStrategy.prepare();\n          \n          \n            \n                      blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n          \n          \n            \n                  });\n          \n          \n            \n                }", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r431924843", "createdAt": "2020-05-28T15:26:42Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -70,27 +68,27 @@ public Pruner(\n       final MarkSweepPruner pruningStrategy,\n       final Blockchain blockchain,\n       final PrunerConfiguration prunerConfiguration) {\n-    this(pruningStrategy, blockchain, prunerConfiguration, getDefaultExecutorSupplier());\n-  }\n-\n-  private static Supplier<ExecutorService> getDefaultExecutorSupplier() {\n-    return () ->\n+    this(\n+        pruningStrategy,\n+        blockchain,\n+        prunerConfiguration,\n         Executors.newSingleThreadExecutor(\n             new ThreadFactoryBuilder()\n                 .setDaemon(true)\n                 .setPriority(Thread.MIN_PRIORITY)\n                 .setNameFormat(\"StatePruning-%d\")\n-                .build());\n+                .build()));\n   }\n \n   public void start() {\n-\n-    if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n-      LOG.info(\"Starting Pruner.\");\n-      executorService = executorServiceSupplier.get();\n-      pruningStrategy.prepare();\n-      blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n-    }\n+    execute(\n+        () -> {\n+          if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n+            LOG.info(\"Starting Pruner.\");\n+            pruningStrategy.prepare();\n+            blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n+          }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2fc0cd10fc9bb5e80fb62f8f85a9ea19065ce09"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzMTI1MA==", "bodyText": "That's how I initially had it \ud83d\ude05. Danno mentioned something about the executor backing up. Tbh I didn't understand his point fully but I was going to look into it later. I was thinking that the AtomicBool should be enough to prevent starting it multiple times.", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r431931250", "createdAt": "2020-05-28T15:35:12Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -70,27 +68,27 @@ public Pruner(\n       final MarkSweepPruner pruningStrategy,\n       final Blockchain blockchain,\n       final PrunerConfiguration prunerConfiguration) {\n-    this(pruningStrategy, blockchain, prunerConfiguration, getDefaultExecutorSupplier());\n-  }\n-\n-  private static Supplier<ExecutorService> getDefaultExecutorSupplier() {\n-    return () ->\n+    this(\n+        pruningStrategy,\n+        blockchain,\n+        prunerConfiguration,\n         Executors.newSingleThreadExecutor(\n             new ThreadFactoryBuilder()\n                 .setDaemon(true)\n                 .setPriority(Thread.MIN_PRIORITY)\n                 .setNameFormat(\"StatePruning-%d\")\n-                .build());\n+                .build()));\n   }\n \n   public void start() {\n-\n-    if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n-      LOG.info(\"Starting Pruner.\");\n-      executorService = executorServiceSupplier.get();\n-      pruningStrategy.prepare();\n-      blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n-    }\n+    execute(\n+        () -> {\n+          if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n+            LOG.info(\"Starting Pruner.\");\n+            pruningStrategy.prepare();\n+            blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n+          }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNDg0Mw=="}, "originalCommit": {"oid": "b2fc0cd10fc9bb5e80fb62f8f85a9ea19065ce09"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzMTQ1MQ==", "bodyText": "Look at just the first commit in the PR", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r431931451", "createdAt": "2020-05-28T15:35:31Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -70,27 +68,27 @@ public Pruner(\n       final MarkSweepPruner pruningStrategy,\n       final Blockchain blockchain,\n       final PrunerConfiguration prunerConfiguration) {\n-    this(pruningStrategy, blockchain, prunerConfiguration, getDefaultExecutorSupplier());\n-  }\n-\n-  private static Supplier<ExecutorService> getDefaultExecutorSupplier() {\n-    return () ->\n+    this(\n+        pruningStrategy,\n+        blockchain,\n+        prunerConfiguration,\n         Executors.newSingleThreadExecutor(\n             new ThreadFactoryBuilder()\n                 .setDaemon(true)\n                 .setPriority(Thread.MIN_PRIORITY)\n                 .setNameFormat(\"StatePruning-%d\")\n-                .build());\n+                .build()));\n   }\n \n   public void start() {\n-\n-    if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n-      LOG.info(\"Starting Pruner.\");\n-      executorService = executorServiceSupplier.get();\n-      pruningStrategy.prepare();\n-      blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n-    }\n+    execute(\n+        () -> {\n+          if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n+            LOG.info(\"Starting Pruner.\");\n+            pruningStrategy.prepare();\n+            blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n+          }\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNDg0Mw=="}, "originalCommit": {"oid": "b2fc0cd10fc9bb5e80fb62f8f85a9ea19065ce09"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDI0MDkwOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyOTozNVrOGb6vRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo1OTo0OFrOGb8DDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNzEwOA==", "bodyText": "Is this not going to create timing issues?  I think we may be intentionally blocking here, so that our listeners get setup before we start syncing and pulling in data.  Changing this to async, it seems like we might run into problems where:  we start importing blocks before our listeners are set up, we don't mark those initial state data, so we end up pruning useful state.\nI'd suggest returning a future, and waiting for the future to complete before starting the sync task.", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r431927108", "createdAt": "2020-05-28T15:29:35Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -70,27 +68,27 @@ public Pruner(\n       final MarkSweepPruner pruningStrategy,\n       final Blockchain blockchain,\n       final PrunerConfiguration prunerConfiguration) {\n-    this(pruningStrategy, blockchain, prunerConfiguration, getDefaultExecutorSupplier());\n-  }\n-\n-  private static Supplier<ExecutorService> getDefaultExecutorSupplier() {\n-    return () ->\n+    this(\n+        pruningStrategy,\n+        blockchain,\n+        prunerConfiguration,\n         Executors.newSingleThreadExecutor(\n             new ThreadFactoryBuilder()\n                 .setDaemon(true)\n                 .setPriority(Thread.MIN_PRIORITY)\n                 .setNameFormat(\"StatePruning-%d\")\n-                .build());\n+                .build()));\n   }\n \n   public void start() {\n-\n-    if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n-      LOG.info(\"Starting Pruner.\");\n-      executorService = executorServiceSupplier.get();\n-      pruningStrategy.prepare();\n-      blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n-    }\n+    execute(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2fc0cd10fc9bb5e80fb62f8f85a9ea19065ce09"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzMjQ4Mw==", "bodyText": "I thought about this but it's this runnable that sets up the block added listener so I think we're good.", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r431932483", "createdAt": "2020-05-28T15:36:53Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -70,27 +68,27 @@ public Pruner(\n       final MarkSweepPruner pruningStrategy,\n       final Blockchain blockchain,\n       final PrunerConfiguration prunerConfiguration) {\n-    this(pruningStrategy, blockchain, prunerConfiguration, getDefaultExecutorSupplier());\n-  }\n-\n-  private static Supplier<ExecutorService> getDefaultExecutorSupplier() {\n-    return () ->\n+    this(\n+        pruningStrategy,\n+        blockchain,\n+        prunerConfiguration,\n         Executors.newSingleThreadExecutor(\n             new ThreadFactoryBuilder()\n                 .setDaemon(true)\n                 .setPriority(Thread.MIN_PRIORITY)\n                 .setNameFormat(\"StatePruning-%d\")\n-                .build());\n+                .build()));\n   }\n \n   public void start() {\n-\n-    if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n-      LOG.info(\"Starting Pruner.\");\n-      executorService = executorServiceSupplier.get();\n-      pruningStrategy.prepare();\n-      blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n-    }\n+    execute(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNzEwOA=="}, "originalCommit": {"oid": "b2fc0cd10fc9bb5e80fb62f8f85a9ea19065ce09"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0ODU1OA==", "bodyText": "Ok, I think that makes sense - we start listening for world state, then start listening for blocks, and the block listener is what starts up the marking phase. \ud83d\udc4d", "url": "https://github.com/hyperledger/besu/pull/947#discussion_r431948558", "createdAt": "2020-05-28T15:59:48Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/worldstate/Pruner.java", "diffHunk": "@@ -70,27 +68,27 @@ public Pruner(\n       final MarkSweepPruner pruningStrategy,\n       final Blockchain blockchain,\n       final PrunerConfiguration prunerConfiguration) {\n-    this(pruningStrategy, blockchain, prunerConfiguration, getDefaultExecutorSupplier());\n-  }\n-\n-  private static Supplier<ExecutorService> getDefaultExecutorSupplier() {\n-    return () ->\n+    this(\n+        pruningStrategy,\n+        blockchain,\n+        prunerConfiguration,\n         Executors.newSingleThreadExecutor(\n             new ThreadFactoryBuilder()\n                 .setDaemon(true)\n                 .setPriority(Thread.MIN_PRIORITY)\n                 .setNameFormat(\"StatePruning-%d\")\n-                .build());\n+                .build()));\n   }\n \n   public void start() {\n-\n-    if (state.compareAndSet(State.IDLE, State.RUNNING)) {\n-      LOG.info(\"Starting Pruner.\");\n-      executorService = executorServiceSupplier.get();\n-      pruningStrategy.prepare();\n-      blockAddedObserverId = blockchain.observeBlockAdded(this::handleNewBlock);\n-    }\n+    execute(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyNzEwOA=="}, "originalCommit": {"oid": "b2fc0cd10fc9bb5e80fb62f8f85a9ea19065ce09"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 877, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}