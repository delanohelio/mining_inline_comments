{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MzExMjc1", "number": 1288, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzozODo0OVrOEX1gWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoxMDozM1rOEZuS4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDI5MzM5OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzozODo0OVrOG_2drA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMTo0Njo0OVrOG_5HVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNTgwNA==", "bodyText": "Maye we could have a overloaded version of this method instead of changing every call. For most tests, having the node key signing the transaction is enough, isn't it?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469605804", "createdAt": "2020-08-12T23:38:49Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -127,18 +128,20 @@ public String getTransactionKey() {\n   }\n \n   public String privxAddToPrivacyGroup(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNjM3Mw==", "bodyText": "The same applies to the other methods in this class.", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469606373", "createdAt": "2020-08-12T23:40:48Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -127,18 +128,20 @@ public String getTransactionKey() {\n   }\n \n   public String privxAddToPrivacyGroup(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNTgwNA=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0OTIzOA==", "bodyText": "I thought that it would be nice to make it obvious who is signing the transaction ...", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469649238", "createdAt": "2020-08-13T01:46:49Z", "author": {"login": "pinges"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -127,18 +128,20 @@ public String getTransactionKey() {\n   }\n \n   public String privxAddToPrivacyGroup(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNTgwNA=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMwOTUzOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo0Njo0MFrOG_2mxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDo1MzoxMlrOG_4BUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwODEzNQ==", "bodyText": "Did you forget to delete this?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469608135", "createdAt": "2020-08-12T23:46:40Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,33 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);\n+\n+    final Object[] aliceKeys = alice.getOrion().getPublicKeys().toArray();\n+    final Object[] bobKeys = bob.getOrion().getPublicKeys().toArray();\n+    final Address aliceAddress = alice.getAddress();\n+\n+    System.out.println(aliceKeys.length + bobKeys.length + aliceAddress.toString());\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    bob.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, bob));\n+    //    boolean b = true;\n+    //    while (b) {\n+    //      int i = 0;\n+    //      if (i == 1) b = false;\n+    //    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzMTMxMw==", "bodyText": "Yep! Deleted!\nThat is what you have to do to do some debugging :-)", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469631313", "createdAt": "2020-08-13T00:53:12Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,33 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);\n+\n+    final Object[] aliceKeys = alice.getOrion().getPublicKeys().toArray();\n+    final Object[] bobKeys = bob.getOrion().getPublicKeys().toArray();\n+    final Address aliceAddress = alice.getAddress();\n+\n+    System.out.println(aliceKeys.length + bobKeys.length + aliceAddress.toString());\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    bob.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, bob));\n+    //    boolean b = true;\n+    //    while (b) {\n+    //      int i = 0;\n+    //      if (i == 1) b = false;\n+    //    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwODEzNQ=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMxNjAwOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo0OTo0MlrOG_2qVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDo1NDoxMVrOG_4Chg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwOTA0NA==", "bodyText": "Either we remove this Sys.out or we replace it with a log msg.", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469609044", "createdAt": "2020-08-12T23:49:42Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -457,6 +488,15 @@ public void addMembersToTwoGroupsInTheSameBlock() throws InterruptedException {\n    * @return the id of the privacy group\n    */\n   private String createOnChainPrivacyGroup(final PrivacyNode... members) {\n+\n+    System.out.println(\"Public keys start:\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzMTYyMg==", "bodyText": "Removed!", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469631622", "createdAt": "2020-08-13T00:54:11Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -457,6 +488,15 @@ public void addMembersToTwoGroupsInTheSameBlock() throws InterruptedException {\n    * @return the id of the privacy group\n    */\n   private String createOnChainPrivacyGroup(final PrivacyNode... members) {\n+\n+    System.out.println(\"Public keys start:\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwOTA0NA=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyMjE1OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/contracts/PrivacyProxyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1MjowN1rOG_2tsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMTowODoyMlrOG_4WHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwOTkwNQ==", "bodyText": "I'd rather have two separate test cases:\n\nOwner successfully upgrades contract\nNon-owner can't upgrade contract", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469609905", "createdAt": "2020-08-12T23:52:07Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/contracts/PrivacyProxyTest.java", "diffHunk": "@@ -67,47 +76,39 @@ public void rlp() throws Exception {\n     contractVerifier\n         .validTransactionReceipt(onChainPrivacyGroupManagementProxy.getContractAddress())\n         .verify(onChainPrivacyGroupManagementProxy);\n-    // 0x0b0235be\n-    assertThat(RAW_FIRST_PARTICIPANT)\n-        .isEqualTo(\n-            onChainPrivacyGroupManagementProxy\n-                .getParticipants(firstParticipant.raw())\n-                .encodeFunctionCall());\n-    // 0xf744b089\n+    assertThat(RAW_GET_PARTICIPANTS)\n+        .isEqualTo(onChainPrivacyGroupManagementProxy.getParticipants().encodeFunctionCall());\n     assertThat(RAW_ADD_PARTICIPANT)\n         .isEqualTo(\n             onChainPrivacyGroupManagementProxy\n-                .addParticipants(firstParticipant.raw(), Collections.emptyList())\n+                .addParticipants(Collections.emptyList())\n                 .encodeFunctionCall());\n   }\n \n   @Ignore(\"return 0x which causes web3j to throw exception instead of return empty list\")\n   @Test\n   public void deploysWithNoParticipant() throws Exception {\n-    final List<byte[]> participants =\n-        onChainPrivacyGroupManagementProxy.getParticipants(firstParticipant.raw()).send();\n+    final List<byte[]> participants = onChainPrivacyGroupManagementProxy.getParticipants().send();\n     assertThat(participants.size()).isEqualTo(0);\n   }\n \n   @Test\n   public void canAddParticipants() throws Exception {\n     onChainPrivacyGroupManagementProxy\n-        .addParticipants(firstParticipant.raw(), Collections.singletonList(secondParticipant.raw()))\n+        .addParticipants(Arrays.asList(firstParticipant.raw(), secondParticipant.raw()))\n         .send();\n-    final List<byte[]> participants =\n-        onChainPrivacyGroupManagementProxy.getParticipants(firstParticipant.raw()).send();\n+    final List<byte[]> participants = onChainPrivacyGroupManagementProxy.getParticipants().send();\n     assertThat(participants.size()).isEqualTo(2);\n     assertThat(firstParticipant.raw()).isEqualTo(participants.get(0));\n     assertThat(secondParticipant.raw()).isEqualTo(participants.get(1));\n   }\n \n   @Test\n-  public void canUpgrade() throws Exception {\n+  public void onlyOwnerCanUpgrade() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzNjYzOA==", "bodyText": "Done!", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469636638", "createdAt": "2020-08-13T01:08:22Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/contracts/PrivacyProxyTest.java", "diffHunk": "@@ -67,47 +76,39 @@ public void rlp() throws Exception {\n     contractVerifier\n         .validTransactionReceipt(onChainPrivacyGroupManagementProxy.getContractAddress())\n         .verify(onChainPrivacyGroupManagementProxy);\n-    // 0x0b0235be\n-    assertThat(RAW_FIRST_PARTICIPANT)\n-        .isEqualTo(\n-            onChainPrivacyGroupManagementProxy\n-                .getParticipants(firstParticipant.raw())\n-                .encodeFunctionCall());\n-    // 0xf744b089\n+    assertThat(RAW_GET_PARTICIPANTS)\n+        .isEqualTo(onChainPrivacyGroupManagementProxy.getParticipants().encodeFunctionCall());\n     assertThat(RAW_ADD_PARTICIPANT)\n         .isEqualTo(\n             onChainPrivacyGroupManagementProxy\n-                .addParticipants(firstParticipant.raw(), Collections.emptyList())\n+                .addParticipants(Collections.emptyList())\n                 .encodeFunctionCall());\n   }\n \n   @Ignore(\"return 0x which causes web3j to throw exception instead of return empty list\")\n   @Test\n   public void deploysWithNoParticipant() throws Exception {\n-    final List<byte[]> participants =\n-        onChainPrivacyGroupManagementProxy.getParticipants(firstParticipant.raw()).send();\n+    final List<byte[]> participants = onChainPrivacyGroupManagementProxy.getParticipants().send();\n     assertThat(participants.size()).isEqualTo(0);\n   }\n \n   @Test\n   public void canAddParticipants() throws Exception {\n     onChainPrivacyGroupManagementProxy\n-        .addParticipants(firstParticipant.raw(), Collections.singletonList(secondParticipant.raw()))\n+        .addParticipants(Arrays.asList(firstParticipant.raw(), secondParticipant.raw()))\n         .send();\n-    final List<byte[]> participants =\n-        onChainPrivacyGroupManagementProxy.getParticipants(firstParticipant.raw()).send();\n+    final List<byte[]> participants = onChainPrivacyGroupManagementProxy.getParticipants().send();\n     assertThat(participants.size()).isEqualTo(2);\n     assertThat(firstParticipant.raw()).isEqualTo(participants.get(0));\n     assertThat(secondParticipant.raw()).isEqualTo(participants.get(1));\n   }\n \n   @Test\n-  public void canUpgrade() throws Exception {\n+  public void onlyOwnerCanUpgrade() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwOTkwNQ=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyNzQwOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDo1NVrOG_2wtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToxMDowM1rOG_4YFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDY3OA==", "bodyText": "I feel like this would be easier to read if we join the two if's together:\nif (maybePrivacyGroup.isEmpty() && !privacyController.isGroupAdditionTransaction(privateTransaction))", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469610678", "createdAt": "2020-08-12T23:54:55Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -95,8 +95,11 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n         maybePrivacyGroup =\n             privacyController.retrieveOnChainPrivacyGroup(\n                 maybePrivacyGroupId.get(), enclavePublicKey);\n-        if (maybePrivacyGroup.isEmpty()\n-            && !privacyController.isGroupAdditionTransaction(privateTransaction)) {\n+        if (maybePrivacyGroup.isEmpty()) {\n+          if (!privacyController.isGroupAdditionTransaction(privateTransaction)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzNzE0MQ==", "bodyText": "but then I can't do the else in line 102 ...\nCould be done, but I would prefer not to do that :-)", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469637141", "createdAt": "2020-08-13T01:10:03Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -95,8 +95,11 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n         maybePrivacyGroup =\n             privacyController.retrieveOnChainPrivacyGroup(\n                 maybePrivacyGroupId.get(), enclavePublicKey);\n-        if (maybePrivacyGroup.isEmpty()\n-            && !privacyController.isGroupAdditionTransaction(privateTransaction)) {\n+        if (maybePrivacyGroup.isEmpty()) {\n+          if (!privacyController.isGroupAdditionTransaction(privateTransaction)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDY3OA=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMzMjg2OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NzoyNVrOG_2zvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToxMDo1NVrOG_4ZEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTQ1Mg==", "bodyText": "This shouldn't be logged as an error. The system is behaving exactly as expected.\nIt should be a DEBUG or TRACE to help investigations or bug fixing.", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469611452", "createdAt": "2020-08-12T23:57:25Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -226,11 +242,97 @@ boolean canExecute(\n         blockchain,\n         disposablePrivateState,\n         privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"Privacy group version mismatch while trying to execute transaction with commitment {}\",\n+          messageFrame.getTransactionHash());\n+      return false;\n+    }\n+\n+    if (!isMemberOfPrivacyGroup(\n+        isAddingParticipant,\n+        privateTransaction,\n+        privateFrom,\n+        privacyGroupId,\n+        messageFrame,\n+        currentBlockHeader,\n+        publicWorldState,\n+        blockchain,\n+        disposablePrivateState,\n+        privateWorldStateUpdater)) {\n+      LOG.error(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzNzM5Mw==", "bodyText": "You are right, I'll change it to debug!", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469637393", "createdAt": "2020-08-13T01:10:55Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -226,11 +242,97 @@ boolean canExecute(\n         blockchain,\n         disposablePrivateState,\n         privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"Privacy group version mismatch while trying to execute transaction with commitment {}\",\n+          messageFrame.getTransactionHash());\n+      return false;\n+    }\n+\n+    if (!isMemberOfPrivacyGroup(\n+        isAddingParticipant,\n+        privateTransaction,\n+        privateFrom,\n+        privacyGroupId,\n+        messageFrame,\n+        currentBlockHeader,\n+        publicWorldState,\n+        blockchain,\n+        disposablePrivateState,\n+        privateWorldStateUpdater)) {\n+      LOG.error(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTQ1Mg=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMzNTY4OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1OTowMlrOG_21gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMzowOTo0NlrOG_6abg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTkwNA==", "bodyText": "Can't we add this to the class that encapsulates the interaction with the contract? OnchainPrivacyGroupContract", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469611904", "createdAt": "2020-08-12T23:59:02Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -226,11 +242,97 @@ boolean canExecute(\n         blockchain,\n         disposablePrivateState,\n         privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"Privacy group version mismatch while trying to execute transaction with commitment {}\",\n+          messageFrame.getTransactionHash());\n+      return false;\n+    }\n+\n+    if (!isMemberOfPrivacyGroup(\n+        isAddingParticipant,\n+        privateTransaction,\n+        privateFrom,\n+        privacyGroupId,\n+        messageFrame,\n+        currentBlockHeader,\n+        publicWorldState,\n+        blockchain,\n+        disposablePrivateState,\n+        privateWorldStateUpdater)) {\n+      LOG.error(\n+          \"PrivateTransaction with hash {} cannot execute in privacy group {} because private from {} is not a member.\",\n+          messageFrame.getTransactionHash(),\n+          privacyGroupId.toBase64String(),\n+          privateFrom.toBase64String());\n       return false;\n     }\n+\n     return true;\n   }\n \n+  private boolean isMemberOfPrivacyGroup(\n+      final boolean isAddingParticipant,\n+      final PrivateTransaction privateTransaction,\n+      final Bytes privateFrom,\n+      final Bytes32 privacyGroupId,\n+      final MessageFrame messageFrame,\n+      final ProcessableBlockHeader currentBlockHeader,\n+      final WorldUpdater publicWorldState,\n+      final Blockchain blockchain,\n+      final MutableWorldState disposablePrivateState,\n+      final WorldUpdater privateWorldStateUpdater) {\n+    final PrivateTransactionProcessor.Result result =\n+        simulateTransaction(\n+            messageFrame,\n+            currentBlockHeader,\n+            publicWorldState,\n+            privacyGroupId,\n+            blockchain,\n+            disposablePrivateState,\n+            privateWorldStateUpdater,\n+            OnChainGroupManagement.GET_PARTICIPANTS_METHOD_SIGNATURE);\n+    final List<Bytes> list = getMembersFromResult(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzNzk0MQ==", "bodyText": "I think you are right, we should have one (or maybe two) classes that encapsulate the interaction with the management contracts. BUT I would prefer to do that as a separate PR ...", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469637941", "createdAt": "2020-08-13T01:12:52Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -226,11 +242,97 @@ boolean canExecute(\n         blockchain,\n         disposablePrivateState,\n         privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"Privacy group version mismatch while trying to execute transaction with commitment {}\",\n+          messageFrame.getTransactionHash());\n+      return false;\n+    }\n+\n+    if (!isMemberOfPrivacyGroup(\n+        isAddingParticipant,\n+        privateTransaction,\n+        privateFrom,\n+        privacyGroupId,\n+        messageFrame,\n+        currentBlockHeader,\n+        publicWorldState,\n+        blockchain,\n+        disposablePrivateState,\n+        privateWorldStateUpdater)) {\n+      LOG.error(\n+          \"PrivateTransaction with hash {} cannot execute in privacy group {} because private from {} is not a member.\",\n+          messageFrame.getTransactionHash(),\n+          privacyGroupId.toBase64String(),\n+          privateFrom.toBase64String());\n       return false;\n     }\n+\n     return true;\n   }\n \n+  private boolean isMemberOfPrivacyGroup(\n+      final boolean isAddingParticipant,\n+      final PrivateTransaction privateTransaction,\n+      final Bytes privateFrom,\n+      final Bytes32 privacyGroupId,\n+      final MessageFrame messageFrame,\n+      final ProcessableBlockHeader currentBlockHeader,\n+      final WorldUpdater publicWorldState,\n+      final Blockchain blockchain,\n+      final MutableWorldState disposablePrivateState,\n+      final WorldUpdater privateWorldStateUpdater) {\n+    final PrivateTransactionProcessor.Result result =\n+        simulateTransaction(\n+            messageFrame,\n+            currentBlockHeader,\n+            publicWorldState,\n+            privacyGroupId,\n+            blockchain,\n+            disposablePrivateState,\n+            privateWorldStateUpdater,\n+            OnChainGroupManagement.GET_PARTICIPANTS_METHOD_SIGNATURE);\n+    final List<Bytes> list = getMembersFromResult(result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTkwNA=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3MDUxMA==", "bodyText": "This will be done in a seperate PR. See https://app.zenhub.com/workspaces/team-revenant-5e6accf93892a67e1d7a7f34/issues/hyperledger/besu/1303", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469670510", "createdAt": "2020-08-13T03:09:46Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -226,11 +242,97 @@ boolean canExecute(\n         blockchain,\n         disposablePrivateState,\n         privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"Privacy group version mismatch while trying to execute transaction with commitment {}\",\n+          messageFrame.getTransactionHash());\n+      return false;\n+    }\n+\n+    if (!isMemberOfPrivacyGroup(\n+        isAddingParticipant,\n+        privateTransaction,\n+        privateFrom,\n+        privacyGroupId,\n+        messageFrame,\n+        currentBlockHeader,\n+        publicWorldState,\n+        blockchain,\n+        disposablePrivateState,\n+        privateWorldStateUpdater)) {\n+      LOG.error(\n+          \"PrivateTransaction with hash {} cannot execute in privacy group {} because private from {} is not a member.\",\n+          messageFrame.getTransactionHash(),\n+          privacyGroupId.toBase64String(),\n+          privateFrom.toBase64String());\n       return false;\n     }\n+\n     return true;\n   }\n \n+  private boolean isMemberOfPrivacyGroup(\n+      final boolean isAddingParticipant,\n+      final PrivateTransaction privateTransaction,\n+      final Bytes privateFrom,\n+      final Bytes32 privacyGroupId,\n+      final MessageFrame messageFrame,\n+      final ProcessableBlockHeader currentBlockHeader,\n+      final WorldUpdater publicWorldState,\n+      final Blockchain blockchain,\n+      final MutableWorldState disposablePrivateState,\n+      final WorldUpdater privateWorldStateUpdater) {\n+    final PrivateTransactionProcessor.Result result =\n+        simulateTransaction(\n+            messageFrame,\n+            currentBlockHeader,\n+            publicWorldState,\n+            privacyGroupId,\n+            blockchain,\n+            disposablePrivateState,\n+            privateWorldStateUpdater,\n+            OnChainGroupManagement.GET_PARTICIPANTS_METHOD_SIGNATURE);\n+    final List<Bytes> list = getMembersFromResult(result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTkwNA=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMzNzQzOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1OTo0MFrOG_22aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToxMzoxNFrOG_4bkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjEzOQ==", "bodyText": "Are these TODOs things that we need to discuss before merging this PR?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469612139", "createdAt": "2020-08-12T23:59:40Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "diffHunk": "@@ -134,14 +136,29 @@ public Bytes compute(final Bytes input, final MessageFrame messageFrame) {\n     final PrivateTransaction privateTransaction =\n         PrivateTransaction.readFrom(bytesValueRLPInput.readAsRlp());\n \n-    if (!privateFromMatchesSenderKey(\n-        privateTransaction.getPrivateFrom(), receiveResponse.getSenderKey())) {\n+    final Bytes privateFrom = privateTransaction.getPrivateFrom();\n+    if (!privateFromMatchesSenderKey(privateFrom, receiveResponse.getSenderKey())) {\n       return Bytes.EMPTY;\n     }\n \n     final Bytes32 privacyGroupId =\n         Bytes32.wrap(Bytes.fromBase64String(receiveResponse.getPrivacyGroupId()));\n \n+    try {\n+      // TODO: Do we need to check anything for legacy private transactions\n+      if (privateTransaction.getPrivateFor().isEmpty()\n+          && !enclave\n+              .retrievePrivacyGroup(privacyGroupId.toBase64String())\n+              .getMembers()\n+              .contains(privateFrom.toBase64String())) {\n+        return Bytes.EMPTY;\n+      }\n+    } catch (final EnclaveClientException e) {\n+      // TODO: do I have to catch anything else here? This exception is thrown when the privacy\n+      // group can not be found\n+      return Bytes.EMPTY;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzODAzNA==", "bodyText": "Yes!", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469638034", "createdAt": "2020-08-13T01:13:14Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "diffHunk": "@@ -134,14 +136,29 @@ public Bytes compute(final Bytes input, final MessageFrame messageFrame) {\n     final PrivateTransaction privateTransaction =\n         PrivateTransaction.readFrom(bytesValueRLPInput.readAsRlp());\n \n-    if (!privateFromMatchesSenderKey(\n-        privateTransaction.getPrivateFrom(), receiveResponse.getSenderKey())) {\n+    final Bytes privateFrom = privateTransaction.getPrivateFrom();\n+    if (!privateFromMatchesSenderKey(privateFrom, receiveResponse.getSenderKey())) {\n       return Bytes.EMPTY;\n     }\n \n     final Bytes32 privacyGroupId =\n         Bytes32.wrap(Bytes.fromBase64String(receiveResponse.getPrivacyGroupId()));\n \n+    try {\n+      // TODO: Do we need to check anything for legacy private transactions\n+      if (privateTransaction.getPrivateFor().isEmpty()\n+          && !enclave\n+              .retrievePrivacyGroup(privacyGroupId.toBase64String())\n+              .getMembers()\n+              .contains(privateFrom.toBase64String())) {\n+        return Bytes.EMPTY;\n+      }\n+    } catch (final EnclaveClientException e) {\n+      // TODO: do I have to catch anything else here? This exception is thrown when the privacy\n+      // group can not be found\n+      return Bytes.EMPTY;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjEzOQ=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM0MTEwOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMToyN1rOG_24lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNTo1MTo1OFrOHBahdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjY5NA==", "bodyText": "NIT: we can return the value directly instead of assigning it to maybePrivacyGroup.", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469612694", "createdAt": "2020-08-13T00:01:27Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -234,11 +234,7 @@ public boolean isGroupAdditionTransaction(final PrivateTransaction privateTransa\n       final Bytes privacyGroupId, final String enclavePublicKey) {\n     final Optional<PrivacyGroup> maybePrivacyGroup =\n         privacyController.retrieveOnChainPrivacyGroup(privacyGroupId, enclavePublicKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0ODA3Mg==", "bodyText": "This is returning Optional because the off-chain equivalent does it ...", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469648072", "createdAt": "2020-08-13T01:42:06Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -234,11 +234,7 @@ public boolean isGroupAdditionTransaction(final PrivateTransaction privateTransa\n       final Bytes privacyGroupId, final String enclavePublicKey) {\n     final Optional<PrivacyGroup> maybePrivacyGroup =\n         privacyController.retrieveOnChainPrivacyGroup(privacyGroupId, enclavePublicKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjY5NA=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0NTE3Mg==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471245172", "createdAt": "2020-08-17T05:51:58Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -234,11 +234,7 @@ public boolean isGroupAdditionTransaction(final PrivateTransaction privateTransa\n       final Bytes privacyGroupId, final String enclavePublicKey) {\n     final Optional<PrivacyGroup> maybePrivacyGroup =\n         privacyController.retrieveOnChainPrivacyGroup(privacyGroupId, enclavePublicKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjY5NA=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM0NzcxOnYy", "diffSide": "RIGHT", "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowNDowMVrOG_28Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMTo0NDowNFrOG_5ElA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMzYwMw==", "bodyText": "Just to confirm. We are setting the owner when we inject the contract into the newly created private state, correct?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469613603", "createdAt": "2020-08-13T00:04:01Z", "author": {"login": "lucassaldanha"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -3,6 +3,7 @@ import \"./OnChainPrivacyGroupManagementInterface.sol\";\n \n contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupManagementInterface {\n \n+    address private _owner;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0ODUzMg==", "bodyText": "The owner is set when the addParticipants is called the first time:\nfunction addParticipants(bytes32[] memory _accounts) public returns (bool) {\nrequire(!_canExecute);\nif (_owner == address(0x0)) {\n_owner = tx.origin;\n}\n...", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469648532", "createdAt": "2020-08-13T01:44:04Z", "author": {"login": "pinges"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -3,6 +3,7 @@ import \"./OnChainPrivacyGroupManagementInterface.sol\";\n \n contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupManagementInterface {\n \n+    address private _owner;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMzYwMw=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM1NDY2OnYy", "diffSide": "RIGHT", "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowNzoyOVrOG_3AEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMTo0OTo1N1rOG_5KnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNDYwOA==", "bodyText": "The owner check can be simplified using a function modifier. Check this example:\nhttps://solidity.readthedocs.io/en/v0.6.2/contracts.html#function-modifiers", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469614608", "createdAt": "2020-08-13T00:07:29Z", "author": {"login": "lucassaldanha"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MDA3Nw==", "bodyText": "Let's talk about that ...", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469650077", "createdAt": "2020-08-13T01:49:57Z", "author": {"login": "pinges"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNDYwOA=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM1NTY0OnYy", "diffSide": "RIGHT", "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowNzo1NFrOG_3Alg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMTo0OTozMFrOG_5KDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNDc0Mg==", "bodyText": "I don't understand why we are doing this.", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469614742", "createdAt": "2020-08-13T00:07:54Z", "author": {"login": "lucassaldanha"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {\n         require(!_canExecute);\n-        if(distributionList.length == 0) {\n-            addParticipant(_enclaveKey);\n+        if (_owner == address(0x0)) {\n+            _owner = tx.origin;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0OTkzMg==", "bodyText": "Setting the owner when the method is called the first time (just after injecting it)", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469649932", "createdAt": "2020-08-13T01:49:30Z", "author": {"login": "pinges"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {\n         require(!_canExecute);\n-        if(distributionList.length == 0) {\n-            addParticipant(_enclaveKey);\n+        if (_owner == address(0x0)) {\n+            _owner = tx.origin;\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNDc0Mg=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM1ODg3OnYy", "diffSide": "RIGHT", "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowOTozMVrOG_3Cbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNTo1MDowNlrOHBafOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTIxNQ==", "bodyText": "I know that this was already here, but I don't like the fact we are calling the enclaveKey accounts.\nGiven we are changing the contract, can we fix this (for all methods)?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469615215", "createdAt": "2020-08-13T00:09:31Z", "author": {"login": "lucassaldanha"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MDYxNg==", "bodyText": "Good plan! Would you just call it enclave keys?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469650616", "createdAt": "2020-08-13T01:52:01Z", "author": {"login": "pinges"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTIxNQ=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0NDYwMw==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471244603", "createdAt": "2020-08-17T05:50:06Z", "author": {"login": "pinges"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTIxNQ=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM2MzUxOnYy", "diffSide": "RIGHT", "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDoxMTo1MFrOG_3FFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMTo1NDo0MFrOG_5PVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTg5Mw==", "bodyText": "This seems a bit weird. Aren't we supposed to return true or false?\nI feel like we could have: return tx.origin == _owner.\nAm I missing something?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469615893", "createdAt": "2020-08-13T00:11:50Z", "author": {"login": "lucassaldanha"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {\n         require(!_canExecute);\n-        if(distributionList.length == 0) {\n-            addParticipant(_enclaveKey);\n+        if (_owner == address(0x0)) {\n+            _owner = tx.origin;\n         }\n-        require(isMember(_enclaveKey));\n-        bool result = addAll(_enclaveKey, _accounts);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n+        bool result = addAll(_accounts);\n         _canExecute = true;\n         updateVersion();\n         return result;\n     }\n \n-    function removeParticipant(bytes32 _enclaveKey, bytes32 _account) public returns (bool) {\n-        require(isMember(_enclaveKey));\n+    function removeParticipant(bytes32 _account) public returns (bool) {\n+        require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         bool result = removeInternal(_account);\n         updateVersion();\n+        emit ParticipantRemoved(result, _account);\n         return result;\n     }\n \n-    function getParticipants(bytes32 _enclaveKey) public view returns (bytes32[] memory) {\n-        require(isMember(_enclaveKey));\n+    function getParticipants() public view returns (bytes32[] memory) {\n         return distributionList;\n     }\n \n+    function canUpgrade() external returns (bool) {\n+        require(tx.origin == _owner, \"Origin not the owner.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzMDU1OA==", "bodyText": "is there an implicit return true in solidity?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469630558", "createdAt": "2020-08-13T00:50:58Z", "author": {"login": "macfarla"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {\n         require(!_canExecute);\n-        if(distributionList.length == 0) {\n-            addParticipant(_enclaveKey);\n+        if (_owner == address(0x0)) {\n+            _owner = tx.origin;\n         }\n-        require(isMember(_enclaveKey));\n-        bool result = addAll(_enclaveKey, _accounts);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n+        bool result = addAll(_accounts);\n         _canExecute = true;\n         updateVersion();\n         return result;\n     }\n \n-    function removeParticipant(bytes32 _enclaveKey, bytes32 _account) public returns (bool) {\n-        require(isMember(_enclaveKey));\n+    function removeParticipant(bytes32 _account) public returns (bool) {\n+        require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         bool result = removeInternal(_account);\n         updateVersion();\n+        emit ParticipantRemoved(result, _account);\n         return result;\n     }\n \n-    function getParticipants(bytes32 _enclaveKey) public view returns (bytes32[] memory) {\n-        require(isMember(_enclaveKey));\n+    function getParticipants() public view returns (bytes32[] memory) {\n         return distributionList;\n     }\n \n+    function canUpgrade() external returns (bool) {\n+        require(tx.origin == _owner, \"Origin not the owner.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTg5Mw=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MTI4NQ==", "bodyText": "Good catch!", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469651285", "createdAt": "2020-08-13T01:54:40Z", "author": {"login": "pinges"}, "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {\n         require(!_canExecute);\n-        if(distributionList.length == 0) {\n-            addParticipant(_enclaveKey);\n+        if (_owner == address(0x0)) {\n+            _owner = tx.origin;\n         }\n-        require(isMember(_enclaveKey));\n-        bool result = addAll(_enclaveKey, _accounts);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n+        bool result = addAll(_accounts);\n         _canExecute = true;\n         updateVersion();\n         return result;\n     }\n \n-    function removeParticipant(bytes32 _enclaveKey, bytes32 _account) public returns (bool) {\n-        require(isMember(_enclaveKey));\n+    function removeParticipant(bytes32 _account) public returns (bool) {\n+        require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         bool result = removeInternal(_account);\n         updateVersion();\n+        emit ParticipantRemoved(result, _account);\n         return result;\n     }\n \n-    function getParticipants(bytes32 _enclaveKey) public view returns (bytes32[] memory) {\n-        require(isMember(_enclaveKey));\n+    function getParticipants() public view returns (bytes32[] memory) {\n         return distributionList;\n     }\n \n+    function canUpgrade() external returns (bool) {\n+        require(tx.origin == _owner, \"Origin not the owner.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTg5Mw=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM3MjMzOnYy", "diffSide": "RIGHT", "path": "privacy-contracts/src/main/solidity/OnChainPrivacyGroupManagementProxy.sol", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDoxNjozOVrOG_3KQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMTo1OToxMlrOG_5T8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNzIxOA==", "bodyText": "Which version is the required one? We shouldn't have two :P", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469617218", "createdAt": "2020-08-13T00:16:39Z", "author": {"login": "lucassaldanha"}, "path": "privacy-contracts/src/main/solidity/OnChainPrivacyGroupManagementProxy.sol", "diffHunk": "@@ -1,5 +1,6 @@\n pragma solidity ^0.5.12;\n \n+pragma solidity ^0.5.9;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MjQ2Nw==", "bodyText": "My local version does only have the 0.5.9 .... Weird!", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469652467", "createdAt": "2020-08-13T01:59:12Z", "author": {"login": "pinges"}, "path": "privacy-contracts/src/main/solidity/OnChainPrivacyGroupManagementProxy.sol", "diffHunk": "@@ -1,5 +1,6 @@\n pragma solidity ^0.5.12;\n \n+pragma solidity ^0.5.9;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNzIxOA=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDQyMzE3OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDozMDozOFrOG_3oPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMTo1OTozNFrOG_5UVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNDg5Mw==", "bodyText": "commented out code", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469624893", "createdAt": "2020-08-13T00:30:38Z", "author": {"login": "macfarla"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,33 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);\n+\n+    final Object[] aliceKeys = alice.getOrion().getPublicKeys().toArray();\n+    final Object[] bobKeys = bob.getOrion().getPublicKeys().toArray();\n+    final Address aliceAddress = alice.getAddress();\n+\n+    System.out.println(aliceKeys.length + bobKeys.length + aliceAddress.toString());\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    bob.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, bob));\n+    //    boolean b = true;\n+    //    while (b) {\n+    //      int i = 0;\n+    //      if (i == 1) b = false;\n+    //    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MjU2NA==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469652564", "createdAt": "2020-08-13T01:59:34Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,33 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);\n+\n+    final Object[] aliceKeys = alice.getOrion().getPublicKeys().toArray();\n+    final Object[] bobKeys = bob.getOrion().getPublicKeys().toArray();\n+    final Address aliceAddress = alice.getAddress();\n+\n+    System.out.println(aliceKeys.length + bobKeys.length + aliceAddress.toString());\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    bob.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, bob));\n+    //    boolean b = true;\n+    //    while (b) {\n+    //      int i = 0;\n+    //      if (i == 1) b = false;\n+    //    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNDg5Mw=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDQyNDE0OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDozMTowOFrOG_3ovQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMTo1OTo0M1rOG_5Ufw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNTAyMQ==", "bodyText": "debug code", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469625021", "createdAt": "2020-08-13T00:31:08Z", "author": {"login": "macfarla"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -457,6 +488,15 @@ public void addMembersToTwoGroupsInTheSameBlock() throws InterruptedException {\n    * @return the id of the privacy group\n    */\n   private String createOnChainPrivacyGroup(final PrivacyNode... members) {\n+\n+    System.out.println(\"Public keys start:\");\n+    Arrays.stream(members)\n+        .map(m -> m.getOrion().getPublicKeys())\n+        .forEach(\n+            k -> {\n+              System.out.println(k);\n+            });\n+    System.out.println(\"Public keys end!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MjYwNw==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469652607", "createdAt": "2020-08-13T01:59:43Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -457,6 +488,15 @@ public void addMembersToTwoGroupsInTheSameBlock() throws InterruptedException {\n    * @return the id of the privacy group\n    */\n   private String createOnChainPrivacyGroup(final PrivacyNode... members) {\n+\n+    System.out.println(\"Public keys start:\");\n+    Arrays.stream(members)\n+        .map(m -> m.getOrion().getPublicKeys())\n+        .forEach(\n+            k -> {\n+              System.out.println(k);\n+            });\n+    System.out.println(\"Public keys end!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNTAyMQ=="}, "originalCommit": {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTI2NzM5OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDoxMjozMVrOHB-6tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMToxNjo1N1rOHB_94w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MTQ2Mg==", "bodyText": "s/On-Chain/Onchain", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471841462", "createdAt": "2020-08-18T00:12:31Z", "author": {"login": "macfarla"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,5 +1,15 @@\n # Changelog\n \n+## 1.5.3\n+\n+### Breaking Changes\n+\n+When upgrading to 1.5.3, ensure you've taken into account the following breaking changes.\n+\n+#### On-Chain Privacy Group Management", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3f3039536259bc77c483183b45ab176688ec0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1ODY1OQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471858659", "createdAt": "2020-08-18T01:16:57Z", "author": {"login": "pinges"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,5 +1,15 @@\n # Changelog\n \n+## 1.5.3\n+\n+### Breaking Changes\n+\n+When upgrading to 1.5.3, ensure you've taken into account the following breaking changes.\n+\n+#### On-Chain Privacy Group Management", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MTQ2Mg=="}, "originalCommit": {"oid": "08a3f3039536259bc77c483183b45ab176688ec0"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTI2ODA1OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDoxMjo1M1rOHB-7HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDoxMjo1M1rOHB-7HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MTU2NA==", "bodyText": "s/on-chain/onchain", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471841564", "createdAt": "2020-08-18T00:12:53Z", "author": {"login": "macfarla"}, "path": "CHANGELOG.md", "diffHunk": "@@ -1,5 +1,15 @@\n # Changelog\n \n+## 1.5.3\n+\n+### Breaking Changes\n+\n+When upgrading to 1.5.3, ensure you've taken into account the following breaking changes.\n+\n+#### On-Chain Privacy Group Management\n+\n+This early access feature was changed in a way that makes on-chain privacy groups created with previous versions no longer usable. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3f3039536259bc77c483183b45ab176688ec0"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTI3MzkzOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDoxNTo1OVrOHB--fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMToxNjo1MlrOHB_90w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MjQzMQ==", "bodyText": "should this say \"privateFrom\" rather than \"private from\"?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471842431", "createdAt": "2020-08-18T00:15:59Z", "author": {"login": "macfarla"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -226,11 +242,97 @@ boolean canExecute(\n         blockchain,\n         disposablePrivateState,\n         privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"Privacy group version mismatch while trying to execute transaction with commitment {}\",\n+          messageFrame.getTransactionHash());\n+      return false;\n+    }\n+\n+    if (!isMemberOfPrivacyGroup(\n+        isAddingParticipant,\n+        privateTransaction,\n+        privateFrom,\n+        privacyGroupId,\n+        messageFrame,\n+        currentBlockHeader,\n+        publicWorldState,\n+        blockchain,\n+        disposablePrivateState,\n+        privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"PrivateTransaction with hash {} cannot execute in privacy group {} because private from {} is not a member.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3f3039536259bc77c483183b45ab176688ec0"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1ODY0Mw==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471858643", "createdAt": "2020-08-18T01:16:52Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -226,11 +242,97 @@ boolean canExecute(\n         blockchain,\n         disposablePrivateState,\n         privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"Privacy group version mismatch while trying to execute transaction with commitment {}\",\n+          messageFrame.getTransactionHash());\n+      return false;\n+    }\n+\n+    if (!isMemberOfPrivacyGroup(\n+        isAddingParticipant,\n+        privateTransaction,\n+        privateFrom,\n+        privacyGroupId,\n+        messageFrame,\n+        currentBlockHeader,\n+        publicWorldState,\n+        blockchain,\n+        disposablePrivateState,\n+        privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"PrivateTransaction with hash {} cannot execute in privacy group {} because private from {} is not a member.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MjQzMQ=="}, "originalCommit": {"oid": "08a3f3039536259bc77c483183b45ab176688ec0"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTI3NjQyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDoxNzoyMVrOHB-_6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMToxNjo0NVrOHB_9rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0Mjc5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.error(\"Can not communicate with enclave is it up?\", e);\n          \n          \n            \n                  LOG.error(\"Can not communicate with enclave, is it up?\", e);", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471842794", "createdAt": "2020-08-18T00:17:21Z", "author": {"login": "macfarla"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "diffHunk": "@@ -134,14 +136,32 @@ public Bytes compute(final Bytes input, final MessageFrame messageFrame) {\n     final PrivateTransaction privateTransaction =\n         PrivateTransaction.readFrom(bytesValueRLPInput.readAsRlp());\n \n-    if (!privateFromMatchesSenderKey(\n-        privateTransaction.getPrivateFrom(), receiveResponse.getSenderKey())) {\n+    final Bytes privateFrom = privateTransaction.getPrivateFrom();\n+    if (!privateFromMatchesSenderKey(privateFrom, receiveResponse.getSenderKey())) {\n       return Bytes.EMPTY;\n     }\n \n     final Bytes32 privacyGroupId =\n         Bytes32.wrap(Bytes.fromBase64String(receiveResponse.getPrivacyGroupId()));\n \n+    try {\n+      if (!enclave\n+          .retrievePrivacyGroup(privacyGroupId.toBase64String())\n+          .getMembers()\n+          .contains(privateFrom.toBase64String())) {\n+        return Bytes.EMPTY;\n+      }\n+    } catch (final EnclaveClientException e) {\n+      // This exception is thrown when the privacy group can not be found\n+      return Bytes.EMPTY;\n+    } catch (final EnclaveServerException e) {\n+      LOG.error(\"Enclave is responding with an error, perhaps it has a misconfiguration?\", e);\n+      throw e;\n+    } catch (final EnclaveIOException e) {\n+      LOG.error(\"Can not communicate with enclave is it up?\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3f3039536259bc77c483183b45ab176688ec0"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1ODYwNQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471858605", "createdAt": "2020-08-18T01:16:45Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "diffHunk": "@@ -134,14 +136,32 @@ public Bytes compute(final Bytes input, final MessageFrame messageFrame) {\n     final PrivateTransaction privateTransaction =\n         PrivateTransaction.readFrom(bytesValueRLPInput.readAsRlp());\n \n-    if (!privateFromMatchesSenderKey(\n-        privateTransaction.getPrivateFrom(), receiveResponse.getSenderKey())) {\n+    final Bytes privateFrom = privateTransaction.getPrivateFrom();\n+    if (!privateFromMatchesSenderKey(privateFrom, receiveResponse.getSenderKey())) {\n       return Bytes.EMPTY;\n     }\n \n     final Bytes32 privacyGroupId =\n         Bytes32.wrap(Bytes.fromBase64String(receiveResponse.getPrivacyGroupId()));\n \n+    try {\n+      if (!enclave\n+          .retrievePrivacyGroup(privacyGroupId.toBase64String())\n+          .getMembers()\n+          .contains(privateFrom.toBase64String())) {\n+        return Bytes.EMPTY;\n+      }\n+    } catch (final EnclaveClientException e) {\n+      // This exception is thrown when the privacy group can not be found\n+      return Bytes.EMPTY;\n+    } catch (final EnclaveServerException e) {\n+      LOG.error(\"Enclave is responding with an error, perhaps it has a misconfiguration?\", e);\n+      throw e;\n+    } catch (final EnclaveIOException e) {\n+      LOG.error(\"Can not communicate with enclave is it up?\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0Mjc5NA=="}, "originalCommit": {"oid": "08a3f3039536259bc77c483183b45ab176688ec0"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTI4MDUxOnYy", "diffSide": "LEFT", "path": "privacy-contracts/src/main/java/org/hyperledger/besu/privacy/contracts/generated/OnChainPrivacyGroupManagementInterface.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDoxOTo0NFrOHB_CYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMDo1OTowMVrOHB_q9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MzQyNw==", "bodyText": "do we need the SPDX header even for generated files?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471843427", "createdAt": "2020-08-18T00:19:44Z", "author": {"login": "macfarla"}, "path": "privacy-contracts/src/main/java/org/hyperledger/besu/privacy/contracts/generated/OnChainPrivacyGroupManagementInterface.java", "diffHunk": "@@ -1,17 +1,3 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3f3039536259bc77c483183b45ab176688ec0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MzgxNQ==", "bodyText": "Yes, unfotunately ... :-)", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471853815", "createdAt": "2020-08-18T00:59:01Z", "author": {"login": "pinges"}, "path": "privacy-contracts/src/main/java/org/hyperledger/besu/privacy/contracts/generated/OnChainPrivacyGroupManagementInterface.java", "diffHunk": "@@ -1,17 +1,3 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MzQyNw=="}, "originalCommit": {"oid": "08a3f3039536259bc77c483183b45ab176688ec0"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDA2NTE3OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/Ibft2PrivacyClusterAcceptanceTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjowMDoxMVrOHCsq-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoyMDo0OVrOHCtGOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTA5Ng==", "bodyText": "You left a sys.out here", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472591096", "createdAt": "2020-08-19T02:00:11Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/Ibft2PrivacyClusterAcceptanceTest.java", "diffHunk": "@@ -144,16 +144,25 @@ public void canInteractWithMultiplePrivacyGroups() {\n                 bob.getEnclaveKey()));\n \n     // alice gets receipt from charlie's interaction\n-    final PrivateTransactionReceipt firstExpectedReceipt =\n+    final PrivateTransactionReceipt aliceReceipt =\n         alice.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n \n+    final PrivateTransactionReceipt bobReceipt =\n+        bob.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n+    final PrivateTransactionReceipt charlieReceipt =\n+        bob.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n+\n+    System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTI2MA==", "bodyText": "Also, are we using bobReceipt and charlieReceipt for anything?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472591260", "createdAt": "2020-08-19T02:00:42Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/Ibft2PrivacyClusterAcceptanceTest.java", "diffHunk": "@@ -144,16 +144,25 @@ public void canInteractWithMultiplePrivacyGroups() {\n                 bob.getEnclaveKey()));\n \n     // alice gets receipt from charlie's interaction\n-    final PrivateTransactionReceipt firstExpectedReceipt =\n+    final PrivateTransactionReceipt aliceReceipt =\n         alice.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n \n+    final PrivateTransactionReceipt bobReceipt =\n+        bob.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n+    final PrivateTransactionReceipt charlieReceipt =\n+        bob.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n+\n+    System.out.println(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTA5Ng=="}, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5NzIzMg==", "bodyText": "Used that for debugging :-)\nGone now!", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472597232", "createdAt": "2020-08-19T02:19:28Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/Ibft2PrivacyClusterAcceptanceTest.java", "diffHunk": "@@ -144,16 +144,25 @@ public void canInteractWithMultiplePrivacyGroups() {\n                 bob.getEnclaveKey()));\n \n     // alice gets receipt from charlie's interaction\n-    final PrivateTransactionReceipt firstExpectedReceipt =\n+    final PrivateTransactionReceipt aliceReceipt =\n         alice.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n \n+    final PrivateTransactionReceipt bobReceipt =\n+        bob.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n+    final PrivateTransactionReceipt charlieReceipt =\n+        bob.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n+\n+    System.out.println(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTA5Ng=="}, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5ODA3Mg==", "bodyText": "it's still there @pinges - do you have changes that aren't pushed?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472598072", "createdAt": "2020-08-19T02:20:49Z", "author": {"login": "macfarla"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/Ibft2PrivacyClusterAcceptanceTest.java", "diffHunk": "@@ -144,16 +144,25 @@ public void canInteractWithMultiplePrivacyGroups() {\n                 bob.getEnclaveKey()));\n \n     // alice gets receipt from charlie's interaction\n-    final PrivateTransactionReceipt firstExpectedReceipt =\n+    final PrivateTransactionReceipt aliceReceipt =\n         alice.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n \n+    final PrivateTransactionReceipt bobReceipt =\n+        bob.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n+    final PrivateTransactionReceipt charlieReceipt =\n+        bob.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n+\n+    System.out.println(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTA5Ng=="}, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDA2ODQ3OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjowMjowMVrOHCstAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoyMDozMVrOHCtFaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTYxNw==", "bodyText": "NIT: we could assign Credentials.create(alice.getTransactionSigningKey()) to a variable aliceCredentials to make the code easier to read.", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472591617", "createdAt": "2020-08-19T02:02:01Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -100,8 +101,9 @@ public void canAddParticipantToGroup() {\n \n     charlie.verify(privateTransactionVerifier.noPrivateTransactionReceipt(commitmentHash));\n \n-    lockPrivacyGroup(privacyGroupId, alice);\n-    addMembersToPrivacyGroup(privacyGroupId, alice, charlie);\n+    lockPrivacyGroup(privacyGroupId, alice, Credentials.create(alice.getTransactionSigningKey()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5Nzg2Nw==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472597867", "createdAt": "2020-08-19T02:20:31Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -100,8 +101,9 @@ public void canAddParticipantToGroup() {\n \n     charlie.verify(privateTransactionVerifier.noPrivateTransactionReceipt(commitmentHash));\n \n-    lockPrivacyGroup(privacyGroupId, alice);\n-    addMembersToPrivacyGroup(privacyGroupId, alice, charlie);\n+    lockPrivacyGroup(privacyGroupId, alice, Credentials.create(alice.getTransactionSigningKey()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTYxNw=="}, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDA2OTc3OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjowMjo1MFrOHCstyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoyMToxN1rOHCtHMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTgxNw==", "bodyText": "Left another sys.out :)", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472591817", "createdAt": "2020-08-19T02:02:50Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,28 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5ODMyMw==", "bodyText": "Gone", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472598323", "createdAt": "2020-08-19T02:21:17Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,28 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTgxNw=="}, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDA3MDI1OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjowMzowNVrOHCsuCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoyMTo0NlrOHCtIRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTg4Mg==", "bodyText": "Yet another sys.out...", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472591882", "createdAt": "2020-08-19T02:03:05Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,28 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);\n+\n+    final Object[] aliceKeys = alice.getOrion().getPublicKeys().toArray();\n+    final Object[] bobKeys = bob.getOrion().getPublicKeys().toArray();\n+    final Address aliceAddress = alice.getAddress();\n+\n+    System.out.println(aliceKeys.length + bobKeys.length + aliceAddress.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5ODU5OQ==", "bodyText": "Gone", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472598599", "createdAt": "2020-08-19T02:21:46Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,28 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);\n+\n+    final Object[] aliceKeys = alice.getOrion().getPublicKeys().toArray();\n+    final Object[] bobKeys = bob.getOrion().getPublicKeys().toArray();\n+    final Address aliceAddress = alice.getAddress();\n+\n+    System.out.println(aliceKeys.length + bobKeys.length + aliceAddress.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTg4Mg=="}, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDA4MzUzOnYy", "diffSide": "RIGHT", "path": "privacy-contracts/src/main/solidity/OnChainPrivacyGroupManagementProxy.sol", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoxMDozM1rOHCs1_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMjoyNTowNFrOHCtP_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MzkxNw==", "bodyText": "Instead of always emitting the event with a status, why don't we only emit the event when the participant is removed successfully?", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472593917", "createdAt": "2020-08-19T02:10:33Z", "author": {"login": "lucassaldanha"}, "path": "privacy-contracts/src/main/solidity/OnChainPrivacyGroupManagementProxy.sol", "diffHunk": "@@ -10,28 +11,25 @@ contract OnChainPrivacyGroupManagementProxy is OnChainPrivacyGroupManagementInte\n         implementation = _implementation;\n     }\n \n-    function upgradeTo(address _newImplementation) external {\n-        require(implementation != _newImplementation);\n-        _setImplementation(_newImplementation);\n-    }\n-\n     function _setImplementation(address _newImp) internal {\n         implementation = _newImp;\n     }\n \n-    function addParticipants(bytes32 enclaveKey, bytes32[] memory participants) public returns (bool) {\n+    function addParticipants(bytes32[] memory _publicEnclaveKeys) public returns (bool) {\n         OnChainPrivacyGroupManagementInterface privacyInterface = OnChainPrivacyGroupManagementInterface(implementation);\n-        return privacyInterface.addParticipants(enclaveKey, participants);\n+        return privacyInterface.addParticipants(_publicEnclaveKeys);\n     }\n \n-    function getParticipants(bytes32 enclaveKey) view public returns (bytes32[] memory) {\n+    function getParticipants() view public returns (bytes32[] memory) {\n         OnChainPrivacyGroupManagementInterface privacyInterface = OnChainPrivacyGroupManagementInterface(implementation);\n-        return privacyInterface.getParticipants(enclaveKey);\n+        return privacyInterface.getParticipants();\n     }\n \n-    function removeParticipant(bytes32 enclaveKey, bytes32 account) public returns (bool) {\n+    function removeParticipant(bytes32 _member) public returns (bool) {\n         OnChainPrivacyGroupManagementInterface privacyInterface = OnChainPrivacyGroupManagementInterface(implementation);\n-        return privacyInterface.removeParticipant(enclaveKey, account);\n+        bool result = privacyInterface.removeParticipant(_member);\n+        emit ParticipantRemoved(result, _member);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwMDU3Mg==", "bodyText": "Good plan!", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472600572", "createdAt": "2020-08-19T02:25:04Z", "author": {"login": "pinges"}, "path": "privacy-contracts/src/main/solidity/OnChainPrivacyGroupManagementProxy.sol", "diffHunk": "@@ -10,28 +11,25 @@ contract OnChainPrivacyGroupManagementProxy is OnChainPrivacyGroupManagementInte\n         implementation = _implementation;\n     }\n \n-    function upgradeTo(address _newImplementation) external {\n-        require(implementation != _newImplementation);\n-        _setImplementation(_newImplementation);\n-    }\n-\n     function _setImplementation(address _newImp) internal {\n         implementation = _newImp;\n     }\n \n-    function addParticipants(bytes32 enclaveKey, bytes32[] memory participants) public returns (bool) {\n+    function addParticipants(bytes32[] memory _publicEnclaveKeys) public returns (bool) {\n         OnChainPrivacyGroupManagementInterface privacyInterface = OnChainPrivacyGroupManagementInterface(implementation);\n-        return privacyInterface.addParticipants(enclaveKey, participants);\n+        return privacyInterface.addParticipants(_publicEnclaveKeys);\n     }\n \n-    function getParticipants(bytes32 enclaveKey) view public returns (bytes32[] memory) {\n+    function getParticipants() view public returns (bytes32[] memory) {\n         OnChainPrivacyGroupManagementInterface privacyInterface = OnChainPrivacyGroupManagementInterface(implementation);\n-        return privacyInterface.getParticipants(enclaveKey);\n+        return privacyInterface.getParticipants();\n     }\n \n-    function removeParticipant(bytes32 enclaveKey, bytes32 account) public returns (bool) {\n+    function removeParticipant(bytes32 _member) public returns (bool) {\n         OnChainPrivacyGroupManagementInterface privacyInterface = OnChainPrivacyGroupManagementInterface(implementation);\n-        return privacyInterface.removeParticipant(enclaveKey, account);\n+        bool result = privacyInterface.removeParticipant(_member);\n+        emit ParticipantRemoved(result, _member);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MzkxNw=="}, "originalCommit": {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 747, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}