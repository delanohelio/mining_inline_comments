{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MjAxNjQy", "number": 1192, "title": "Flatten EVM Loop", "bodyText": "Our current EVM loop splits out cost, execution and halt evaluation.  Flattening these three into one method results in a significant speedup in reference tests, which are EVM heavy.", "createdAt": "2020-07-03T21:55:26Z", "url": "https://github.com/hyperledger/besu/pull/1192", "merged": true, "mergeCommit": {"oid": "1961b5d143fdcb73188b1c078ba661a62a9c13ad"}, "closed": true, "closedAt": "2020-07-08T01:17:50Z", "author": {"login": "shemnon"}, "timelineItems": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxJ23tgH2gAyNDQ0MjAxNjQyOjNmODNiZGM5NTQ4Y2VhYmMxZmNlZjY5YWMzODQyYzJmNjBmY2ZkODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyvBcwgH2gAyNDQ0MjAxNjQyOjI2NGZhMjEwMTU0NWRlMTQ0MjI1MDk1ZWEyNDZjODkyNDU5YjlhODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3f83bdc9548ceabc1fcef69ac3842c2f60fcfd85", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/3f83bdc9548ceabc1fcef69ac3842c2f60fcfd85", "committedDate": "2020-07-03T02:17:27Z", "message": "first proof of concept\n\nJumpi shows good improvement in the loop tests.  Not all operations\nimplemented.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25f29eff7c2d891b5e1ac9aab3b5a39a7f388f38", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/25f29eff7c2d891b5e1ac9aab3b5a39a7f388f38", "committedDate": "2020-07-03T15:31:23Z", "message": "fixed cost operations\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b4cefef9d99f53f2273962ef3eb777895737837", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/5b4cefef9d99f53f2273962ef3eb777895737837", "committedDate": "2020-07-03T21:37:34Z", "message": "test pass\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77257620428d7678a36e721d50e268ed3e6e40b3", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/77257620428d7678a36e721d50e268ed3e6e40b3", "committedDate": "2020-07-03T21:54:13Z", "message": "merge\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3df258eaabb9cf4e0e032394e2ba457682895fc", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/e3df258eaabb9cf4e0e032394e2ba457682895fc", "committedDate": "2020-07-03T22:21:12Z", "message": "small fixes\n\nfix versions\nremove ExceptionalHaltException\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e31677d192316cbe9a5629b05e80b08468e4cc10", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/e31677d192316cbe9a5629b05e80b08468e4cc10", "committedDate": "2020-07-03T22:16:21Z", "message": "small fixes\n\nfix versions\nremove ExceptionalHaltException\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}, "afterCommit": {"oid": "e3df258eaabb9cf4e0e032394e2ba457682895fc", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/e3df258eaabb9cf4e0e032394e2ba457682895fc", "committedDate": "2020-07-03T22:21:12Z", "message": "small fixes\n\nfix versions\nremove ExceptionalHaltException\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06c627abcbd351ff635fb4194e1240335c1057e9", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/06c627abcbd351ff635fb4194e1240335c1057e9", "committedDate": "2020-07-06T04:27:28Z", "message": "refrence test fixes\n\nFix Some oddities on when we decrement gas in create and calls\nDon't charge gas on exceptional halts\nrely on stack exceptions for overflow/underflow\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdb5f29daca82b27d925736a9a07e328ab14ea95", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/bdb5f29daca82b27d925736a9a07e328ab14ea95", "committedDate": "2020-07-06T04:31:38Z", "message": "spotless\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "761b43f8c2f369e4b5491c710dc412cb2b71cb20", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/761b43f8c2f369e4b5491c710dc412cb2b71cb20", "committedDate": "2020-07-06T21:47:54Z", "message": "remove old cost, execeptionalHaltReason, and execute code\n\nPush down execute into all of the operations and remove old interface\nmethods that accessed costs in 3 ways.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0378c1286664b98fc7cd92e4f43196492b7e2d64", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/0378c1286664b98fc7cd92e4f43196492b7e2d64", "committedDate": "2020-07-07T00:46:55Z", "message": "clenup\n\nremove duplicate classes\nremove over/underflow catches that will never matter.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "520021b45c33f55a40d1e73006457f9fb18d9e70", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/520021b45c33f55a40d1e73006457f9fb18d9e70", "committedDate": "2020-07-07T00:53:55Z", "message": "cleanup\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e181233bfb0390360bf924efb827687c222edcc", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/6e181233bfb0390360bf924efb827687c222edcc", "committedDate": "2020-07-07T03:35:57Z", "message": "Merge branch 'master' of github.com:hyperledger/besu into evmLoop2\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9df2d41b63d86199ae4c7dd46a2f171a4ee1e5b3", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/9df2d41b63d86199ae4c7dd46a2f171a4ee1e5b3", "committedDate": "2020-07-07T05:05:03Z", "message": "Update Reference Tests\n\nUpdate to the reference tests used on hivetests.etherdevops.io and\nretesteth.etherdevops.io.  Both are using a more current release of the\nreference tessts that includes performance and subroutines items.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86d5c55d272a9d157bb27da82d70c166a838d702", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/86d5c55d272a9d157bb27da82d70c166a838d702", "committedDate": "2020-07-07T06:09:45Z", "message": "Update Reference Tests\n\nUpdate to the reference tests used on hivetests.etherdevops.io and\nretesteth.etherdevops.io.  Both are using a more current release of the\nreference tessts that includes performance and subroutines items.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "185f7c6c5e0846f2bb4717bd849a082faf469cb3", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/185f7c6c5e0846f2bb4717bd849a082faf469cb3", "committedDate": "2020-07-07T06:24:18Z", "message": "fix wierd shanghai corner case\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55dd19e248cd38446b0c6ad302d52528217eb8ab", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/55dd19e248cd38446b0c6ad302d52528217eb8ab", "committedDate": "2020-07-07T14:25:46Z", "message": "Merge branch 'master' into evmLoop2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "488fa4d16207b13a37cb22ba4536ccf7df35ee5c", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/488fa4d16207b13a37cb22ba4536ccf7df35ee5c", "committedDate": "2020-07-07T16:19:47Z", "message": "compress some gets/pops in operations\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDU3OTI4", "url": "https://github.com/hyperledger/besu/pull/1192#pullrequestreview-444057928", "createdAt": "2020-07-07T16:28:31Z", "commit": {"oid": "488fa4d16207b13a37cb22ba4536ccf7df35ee5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyODozMVrOGuGZdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjoyODozMVrOGuGZdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk5MjUwMg==", "bodyText": "It seems like this ended up being redundant, is that right?", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r450992502", "createdAt": "2020-07-07T16:28:31Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/AbstractMessageProcessor.java", "diffHunk": "@@ -155,8 +153,6 @@ protected void completedFailed(final MessageFrame frame) {\n   private void codeExecute(final MessageFrame frame, final OperationTracer operationTracer) {\n     try {\n       evm.runToHalt(frame, operationTracer);\n-    } catch (final ExceptionalHaltException e) {\n-      frame.setState(MessageFrame.State.EXCEPTIONAL_HALT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488fa4d16207b13a37cb22ba4536ccf7df35ee5c"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDc5NjE3", "url": "https://github.com/hyperledger/besu/pull/1192#pullrequestreview-444079617", "createdAt": "2020-07-07T16:55:01Z", "commit": {"oid": "488fa4d16207b13a37cb22ba4536ccf7df35ee5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NTowMVrOGuHYnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NTowMVrOGuHYnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwODY2OA==", "bodyText": "Since this now also checks gas, we should reflect the implementer's responsibility in the javadoc if not the name of the method.", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451008668", "createdAt": "2020-07-07T16:55:01Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/Operation.java", "diffHunk": "@@ -20,34 +20,33 @@\n \n public interface Operation {\n \n-  /**\n-   * Gas cost of this operation, in context of the provided frame.\n-   *\n-   * @param frame The frame for execution of this operation.\n-   * @return The gas cost associated with executing this operation given the current {@link\n-   *     MessageFrame}.\n-   */\n-  Gas cost(MessageFrame frame);\n+  class OperationResult {\n+    final Optional<Gas> gasCost;\n+    final Optional<ExceptionalHaltReason> haltReason;\n+\n+    public OperationResult(\n+        final Optional<Gas> gasCost, final Optional<ExceptionalHaltReason> haltReason) {\n+      this.gasCost = gasCost;\n+      this.haltReason = haltReason;\n+    }\n+\n+    public Optional<Gas> getGasCost() {\n+      return gasCost;\n+    }\n+\n+    public Optional<ExceptionalHaltReason> getHaltReason() {\n+      return haltReason;\n+    }\n+  }\n \n   /**\n    * Executes the logic behind this operation.\n    *\n    * @param frame The frame for execution of this operation.\n+   * @param evm The EVM for execution of this operation.\n+   * @return the gas cost and any exeptional halt reasons of the operation.\n    */\n-  void execute(MessageFrame frame);\n-\n-  /**\n-   * Check if an exceptional halt condition should apply\n-   *\n-   * @param frame the current frame\n-   * @param evm the currently executing EVM\n-   * @return an {@link Optional} containing the {@link ExceptionalHaltReason} that applies or empty\n-   *     if no exceptional halt condition applies.\n-   */\n-  default Optional<ExceptionalHaltReason> exceptionalHaltCondition(\n-      final MessageFrame frame, final EVM evm) {\n-    return Optional.empty();\n-  }\n+  OperationResult execute(final MessageFrame frame, final EVM evm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488fa4d16207b13a37cb22ba4536ccf7df35ee5c"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTAyNzE0", "url": "https://github.com/hyperledger/besu/pull/1192#pullrequestreview-444102714", "createdAt": "2020-07-07T17:25:45Z", "commit": {"oid": "488fa4d16207b13a37cb22ba4536ccf7df35ee5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyNTo0NVrOGuIfOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoyNTo0NVrOGuIfOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAyNjc0NA==", "bodyText": "OVERFLOWFLOW_RESPONSE? Do you want to say OVERFLOW_RESPONSE", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451026744", "createdAt": "2020-07-07T17:25:45Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/BlockHashOperation.java", "diffHunk": "@@ -15,55 +15,70 @@\n package org.hyperledger.besu.ethereum.vm.operations;\n \n import org.hyperledger.besu.ethereum.core.BlockHeader;\n-import org.hyperledger.besu.ethereum.core.Gas;\n import org.hyperledger.besu.ethereum.core.Hash;\n import org.hyperledger.besu.ethereum.core.ProcessableBlockHeader;\n-import org.hyperledger.besu.ethereum.vm.AbstractOperation;\n import org.hyperledger.besu.ethereum.vm.BlockHashLookup;\n+import org.hyperledger.besu.ethereum.vm.EVM;\n import org.hyperledger.besu.ethereum.vm.GasCalculator;\n import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.ethereum.vm.OperandStack.OverflowException;\n+import org.hyperledger.besu.ethereum.vm.OperandStack.UnderflowException;\n \n import org.apache.tuweni.bytes.Bytes32;\n import org.apache.tuweni.units.bigints.UInt256;\n \n-public class BlockHashOperation extends AbstractOperation {\n+public class BlockHashOperation extends AbstractFixedCostOperation {\n \n   private static final int MAX_RELATIVE_BLOCK = 255;\n \n   public BlockHashOperation(final GasCalculator gasCalculator) {\n-    super(0x40, \"BLOCKHASH\", 1, 1, false, 1, gasCalculator);\n+    super(\n+        0x40,\n+        \"BLOCKHASH\",\n+        1,\n+        1,\n+        false,\n+        1,\n+        gasCalculator,\n+        gasCalculator.getBlockHashOperationGasCost());\n   }\n \n   @Override\n-  public Gas cost(final MessageFrame frame) {\n-    return gasCalculator().getBlockHashOperationGasCost();\n-  }\n+  public OperationResult execute(final MessageFrame frame, final EVM evm) {\n+    try {\n+      if (frame.getRemainingGas().compareTo(gasCost) < 0) {\n+        return oogResponse;\n+      }\n+      final UInt256 blockArg = UInt256.fromBytes(frame.popStackItem());\n \n-  @Override\n-  public void execute(final MessageFrame frame) {\n-    final UInt256 blockArg = UInt256.fromBytes(frame.popStackItem());\n+      // Short-circuit if value is unreasonably large\n+      if (!blockArg.fitsLong()) {\n+        frame.pushStackItem(Bytes32.ZERO);\n+        return successResponse;\n+      }\n \n-    // Short-circuit if value is unreasonably large\n-    if (!blockArg.fitsLong()) {\n-      frame.pushStackItem(Bytes32.ZERO);\n-      return;\n-    }\n+      final long soughtBlock = blockArg.toLong();\n+      final ProcessableBlockHeader blockHeader = frame.getBlockHeader();\n+      final long currentBlockNumber = blockHeader.getNumber();\n+      final long mostRecentBlockNumber = currentBlockNumber - 1;\n \n-    final long soughtBlock = blockArg.toLong();\n-    final ProcessableBlockHeader blockHeader = frame.getBlockHeader();\n-    final long currentBlockNumber = blockHeader.getNumber();\n-    final long mostRecentBlockNumber = currentBlockNumber - 1;\n+      // If the current block is the genesis block or the sought block is\n+      // not within the last 256 completed blocks, zero is returned.\n+      if (currentBlockNumber == BlockHeader.GENESIS_BLOCK_NUMBER\n+          || soughtBlock < (mostRecentBlockNumber - MAX_RELATIVE_BLOCK)\n+          || soughtBlock > mostRecentBlockNumber) {\n+        frame.pushStackItem(Bytes32.ZERO);\n+      } else {\n+        final BlockHashLookup blockHashLookup = frame.getBlockHashLookup();\n+        final Hash blockHash = blockHashLookup.getBlockHash(soughtBlock);\n+        frame.pushStackItem(blockHash);\n+      }\n \n-    // If the current block is the genesis block or the sought block is\n-    // not within the last 256 completed blocks, zero is returned.\n-    if (currentBlockNumber == BlockHeader.GENESIS_BLOCK_NUMBER\n-        || soughtBlock < (mostRecentBlockNumber - MAX_RELATIVE_BLOCK)\n-        || soughtBlock > mostRecentBlockNumber) {\n-      frame.pushStackItem(Bytes32.ZERO);\n-    } else {\n-      final BlockHashLookup blockHashLookup = frame.getBlockHashLookup();\n-      final Hash blockHash = blockHashLookup.getBlockHash(soughtBlock);\n-      frame.pushStackItem(blockHash);\n+      return successResponse;\n+    } catch (final UnderflowException ue) {\n+      return UNDERFLOW_RESPONSE;\n+    } catch (final OverflowException oe) {\n+      return OVERFLOWFLOW_RESPONSE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488fa4d16207b13a37cb22ba4536ccf7df35ee5c"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e6c564b31833fd87b39e74df66ae74d1e9e32e7", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/4e6c564b31833fd87b39e74df66ae74d1e9e32e7", "committedDate": "2020-07-07T17:27:44Z", "message": "OVERFLOWFLOW -> OVERFLOW\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f53ec642a6e90be1e28cfae445d1e1645ee01cde", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/f53ec642a6e90be1e28cfae445d1e1645ee01cde", "committedDate": "2020-07-07T17:31:10Z", "message": "update javadoc.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTA2NjUw", "url": "https://github.com/hyperledger/besu/pull/1192#pullrequestreview-444106650", "createdAt": "2020-07-07T17:31:26Z", "commit": {"oid": "488fa4d16207b13a37cb22ba4536ccf7df35ee5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzozMToyNlrOGuIsEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzozMToyNlrOGuIsEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzMDAzNA==", "bodyText": "Maybe be we need to avoid using assert here ?", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451030034", "createdAt": "2020-07-07T17:31:26Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/SLoadOperation.java", "diffHunk": "@@ -15,32 +15,40 @@\n package org.hyperledger.besu.ethereum.vm.operations;\n \n import org.hyperledger.besu.ethereum.core.Account;\n-import org.hyperledger.besu.ethereum.core.Gas;\n-import org.hyperledger.besu.ethereum.vm.AbstractOperation;\n+import org.hyperledger.besu.ethereum.vm.EVM;\n import org.hyperledger.besu.ethereum.vm.GasCalculator;\n import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.ethereum.vm.OperandStack.OverflowException;\n+import org.hyperledger.besu.ethereum.vm.OperandStack.UnderflowException;\n \n import org.apache.tuweni.bytes.Bytes32;\n import org.apache.tuweni.units.bigints.UInt256;\n \n-public class SLoadOperation extends AbstractOperation {\n+public class SLoadOperation extends AbstractFixedCostOperation {\n \n   public SLoadOperation(final GasCalculator gasCalculator) {\n-    super(0x54, \"SLOAD\", 1, 1, false, 1, gasCalculator);\n+    super(0x54, \"SLOAD\", 1, 1, false, 1, gasCalculator, gasCalculator.getSloadOperationGasCost());\n   }\n \n   @Override\n-  public Gas cost(final MessageFrame frame) {\n-    return gasCalculator().getSloadOperationGasCost();\n-  }\n+  public OperationResult execute(final MessageFrame frame, final EVM evm) {\n+    try {\n+      if (frame.getRemainingGas().compareTo(gasCost) < 0) {\n+        return oogResponse;\n+      }\n \n-  @Override\n-  public void execute(final MessageFrame frame) {\n-    final Bytes32 key = frame.popStackItem();\n+      final Bytes32 key = frame.popStackItem();\n+\n+      final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n+      assert account != null : \"VM account should exist\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "488fa4d16207b13a37cb22ba4536ccf7df35ee5c"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c", "committedDate": "2020-07-07T17:57:35Z", "message": "remove assert\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTY1ODMw", "url": "https://github.com/hyperledger/besu/pull/1192#pullrequestreview-444165830", "createdAt": "2020-07-07T18:56:50Z", "commit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo1Njo1MFrOGuLjPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo1Njo1MFrOGuLjPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3NjkyNQ==", "bodyText": "Can this ever be true?", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451076925", "createdAt": "2020-07-07T18:56:50Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/AbstractCallOperation.java", "diffHunk": "@@ -146,55 +150,89 @@ protected AbstractCallOperation(\n   protected abstract boolean isStatic(MessageFrame frame);\n \n   @Override\n-  public void execute(final MessageFrame frame) {\n-    frame.clearReturnData();\n-\n-    final Address to = to(frame);\n-    final Account contract = frame.getWorldState().get(to);\n-\n-    final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n-    final Wei balance = account.getBalance();\n-    if (value(frame).compareTo(balance) > 0 || frame.getMessageStackDepth() >= 1024) {\n-      frame.expandMemory(inputDataOffset(frame).intValue(), inputDataLength(frame).intValue());\n-      frame.expandMemory(outputDataOffset(frame).intValue(), outputDataLength(frame).intValue());\n-      frame.incrementRemainingGas(gasAvailableForChildCall(frame));\n-      frame.popStackItems(getStackItemsConsumed());\n-      frame.pushStackItem(Bytes32.ZERO);\n-      return;\n+  public OperationResult execute(final MessageFrame frame, final EVM evm) {\n+    try {\n+      // manual check becasue some reads won't come until the \"complete\" step.\n+      if (frame.stackSize() < getStackItemsConsumed()) {\n+        return UNDERFLOW_RESPONSE;\n+      }\n+      final Optional<ExceptionalHaltReason> haltReason = exceptionalHaltCondition(frame, evm);\n+      if (haltReason.isPresent()) {\n+        return new OperationResult(Optional.empty(), haltReason);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTcxMTU3", "url": "https://github.com/hyperledger/besu/pull/1192#pullrequestreview-444171157", "createdAt": "2020-07-07T19:04:49Z", "commit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTowNDo0OVrOGuLzIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOTowNDo0OVrOGuLzIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4MDk5NA==", "bodyText": "Could we make cost() just return an Optional?", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451080994", "createdAt": "2020-07-07T19:04:49Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/AbstractCallOperation.java", "diffHunk": "@@ -146,55 +150,89 @@ protected AbstractCallOperation(\n   protected abstract boolean isStatic(MessageFrame frame);\n \n   @Override\n-  public void execute(final MessageFrame frame) {\n-    frame.clearReturnData();\n-\n-    final Address to = to(frame);\n-    final Account contract = frame.getWorldState().get(to);\n-\n-    final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n-    final Wei balance = account.getBalance();\n-    if (value(frame).compareTo(balance) > 0 || frame.getMessageStackDepth() >= 1024) {\n-      frame.expandMemory(inputDataOffset(frame).intValue(), inputDataLength(frame).intValue());\n-      frame.expandMemory(outputDataOffset(frame).intValue(), outputDataLength(frame).intValue());\n-      frame.incrementRemainingGas(gasAvailableForChildCall(frame));\n-      frame.popStackItems(getStackItemsConsumed());\n-      frame.pushStackItem(Bytes32.ZERO);\n-      return;\n+  public OperationResult execute(final MessageFrame frame, final EVM evm) {\n+    try {\n+      // manual check becasue some reads won't come until the \"complete\" step.\n+      if (frame.stackSize() < getStackItemsConsumed()) {\n+        return UNDERFLOW_RESPONSE;\n+      }\n+      final Optional<ExceptionalHaltReason> haltReason = exceptionalHaltCondition(frame, evm);\n+      if (haltReason.isPresent()) {\n+        return new OperationResult(Optional.empty(), haltReason);\n+      }\n+      final Gas cost = cost(frame);\n+      final Optional<Gas> optionalCost = Optional.ofNullable(cost);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTgwMjIy", "url": "https://github.com/hyperledger/besu/pull/1192#pullrequestreview-444180222", "createdAt": "2020-07-07T19:18:28Z", "commit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToxODoyOFrOGuMPKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToxODoyOFrOGuMPKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4ODE3MA==", "bodyText": "i'm not sure but it seems like an indexoutofbound exception is needed here. this is what is used in line 120 of this class", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451088170", "createdAt": "2020-07-07T19:18:28Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/OperandStack.java", "diffHunk": "@@ -24,71 +26,128 @@\n  * <p>The operand stack is responsible for storing the current operands that the EVM can execute. It\n  * is assumed to have a fixed size.\n  */\n-public interface OperandStack {\n+public class OperandStack {\n \n-  /**\n-   * Returns the operand located at the offset from the top of the stack.\n-   *\n-   * @param offset the position relative to the top of the stack of the operand to return\n-   * @return the operand located at the specified offset\n-   * @throws IndexOutOfBoundsException if the offset is out of range (offset &lt; 0 || offset &gt;=\n-   *     {@link #size()})\n-   */\n-  Bytes32 get(int offset);\n+  private final Bytes32[] entries;\n \n-  /**\n-   * Removes the operand at the top of the stack.\n-   *\n-   * @return the operand removed from the top of the stack\n-   * @throws IllegalStateException if the stack is empty (e.g. a stack underflow occurs)\n-   */\n-  Bytes32 pop();\n+  private final int maxSize;\n+\n+  private int top;\n+\n+  public static class UnderflowException extends RuntimeException {\n+    // Don't create a stack trace since these are not \"errors\" per say but are using exceptions to\n+    // throw rare control flow conditions (EVM stack overflow) that are expected to be seen in\n+    // normal\n+    // operations.\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+      return this;\n+    }\n+  }\n+\n+  public static class OverflowException extends RuntimeException {\n+    // Don't create a stack trace since these are not \"errors\" per say but are using exceptions to\n+    // throw rare control flow conditions (EVM stack overflow) that are expected to be seen in\n+    // normal\n+    // operations.\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+      return this;\n+    }\n+  }\n+\n+  public OperandStack(final int maxSize) {\n+    if (maxSize < 0) {\n+      throw new IllegalArgumentException(\n+          String.format(\"max size (%d) must be non-negative\", maxSize));\n+    }\n+    this.entries = new Bytes32[maxSize];\n+    this.maxSize = maxSize;\n+    this.top = -1;\n+  }\n+\n+  public Bytes32 get(final int offset) {\n+    if (offset < 0 || offset >= size()) {\n+      throw new UnderflowException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "631da9cde1b2315f6016a84c36781c65f6fd1cf6", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/631da9cde1b2315f6016a84c36781c65f6fd1cf6", "committedDate": "2020-07-07T19:44:58Z", "message": "review changes\n\n* When get is out of bounds on OperandStack use\n  IndexOutOfBoundsException.\n* Move call in statics value halt check into an execute subclass and\n  remove the exceptionalHaltCondition method.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MTgwNTY5", "url": "https://github.com/hyperledger/besu/pull/1192#pullrequestreview-444180569", "createdAt": "2020-07-07T19:19:00Z", "commit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxOToxOTowMVrOGuMQLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDowMjo1M1rOGuNo9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA4ODQzMQ==", "bodyText": "What do you think about using these in ReturnStack as well?", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451088431", "createdAt": "2020-07-07T19:19:01Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/OperandStack.java", "diffHunk": "@@ -24,71 +26,128 @@\n  * <p>The operand stack is responsible for storing the current operands that the EVM can execute. It\n  * is assumed to have a fixed size.\n  */\n-public interface OperandStack {\n+public class OperandStack {\n \n-  /**\n-   * Returns the operand located at the offset from the top of the stack.\n-   *\n-   * @param offset the position relative to the top of the stack of the operand to return\n-   * @return the operand located at the specified offset\n-   * @throws IndexOutOfBoundsException if the offset is out of range (offset &lt; 0 || offset &gt;=\n-   *     {@link #size()})\n-   */\n-  Bytes32 get(int offset);\n+  private final Bytes32[] entries;\n \n-  /**\n-   * Removes the operand at the top of the stack.\n-   *\n-   * @return the operand removed from the top of the stack\n-   * @throws IllegalStateException if the stack is empty (e.g. a stack underflow occurs)\n-   */\n-  Bytes32 pop();\n+  private final int maxSize;\n+\n+  private int top;\n+\n+  public static class UnderflowException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5MTA3Ng==", "bodyText": "(optional) checkArgument", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451091076", "createdAt": "2020-07-07T19:24:07Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/OperandStack.java", "diffHunk": "@@ -24,71 +26,128 @@\n  * <p>The operand stack is responsible for storing the current operands that the EVM can execute. It\n  * is assumed to have a fixed size.\n  */\n-public interface OperandStack {\n+public class OperandStack {\n \n-  /**\n-   * Returns the operand located at the offset from the top of the stack.\n-   *\n-   * @param offset the position relative to the top of the stack of the operand to return\n-   * @return the operand located at the specified offset\n-   * @throws IndexOutOfBoundsException if the offset is out of range (offset &lt; 0 || offset &gt;=\n-   *     {@link #size()})\n-   */\n-  Bytes32 get(int offset);\n+  private final Bytes32[] entries;\n \n-  /**\n-   * Removes the operand at the top of the stack.\n-   *\n-   * @return the operand removed from the top of the stack\n-   * @throws IllegalStateException if the stack is empty (e.g. a stack underflow occurs)\n-   */\n-  Bytes32 pop();\n+  private final int maxSize;\n+\n+  private int top;\n+\n+  public static class UnderflowException extends RuntimeException {\n+    // Don't create a stack trace since these are not \"errors\" per say but are using exceptions to\n+    // throw rare control flow conditions (EVM stack overflow) that are expected to be seen in\n+    // normal\n+    // operations.\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+      return this;\n+    }\n+  }\n+\n+  public static class OverflowException extends RuntimeException {\n+    // Don't create a stack trace since these are not \"errors\" per say but are using exceptions to\n+    // throw rare control flow conditions (EVM stack overflow) that are expected to be seen in\n+    // normal\n+    // operations.\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+      return this;\n+    }\n+  }\n+\n+  public OperandStack(final int maxSize) {\n+    if (maxSize < 0) {\n+      throw new IllegalArgumentException(\n+          String.format(\"max size (%d) must be non-negative\", maxSize));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5NDAzMg==", "bodyText": "I think we just need to do the upper bounds check, right? Because we'll get the 0 one for free when we try to index.", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451094032", "createdAt": "2020-07-07T19:29:52Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/OperandStack.java", "diffHunk": "@@ -24,71 +26,128 @@\n  * <p>The operand stack is responsible for storing the current operands that the EVM can execute. It\n  * is assumed to have a fixed size.\n  */\n-public interface OperandStack {\n+public class OperandStack {\n \n-  /**\n-   * Returns the operand located at the offset from the top of the stack.\n-   *\n-   * @param offset the position relative to the top of the stack of the operand to return\n-   * @return the operand located at the specified offset\n-   * @throws IndexOutOfBoundsException if the offset is out of range (offset &lt; 0 || offset &gt;=\n-   *     {@link #size()})\n-   */\n-  Bytes32 get(int offset);\n+  private final Bytes32[] entries;\n \n-  /**\n-   * Removes the operand at the top of the stack.\n-   *\n-   * @return the operand removed from the top of the stack\n-   * @throws IllegalStateException if the stack is empty (e.g. a stack underflow occurs)\n-   */\n-  Bytes32 pop();\n+  private final int maxSize;\n+\n+  private int top;\n+\n+  public static class UnderflowException extends RuntimeException {\n+    // Don't create a stack trace since these are not \"errors\" per say but are using exceptions to\n+    // throw rare control flow conditions (EVM stack overflow) that are expected to be seen in\n+    // normal\n+    // operations.\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+      return this;\n+    }\n+  }\n+\n+  public static class OverflowException extends RuntimeException {\n+    // Don't create a stack trace since these are not \"errors\" per say but are using exceptions to\n+    // throw rare control flow conditions (EVM stack overflow) that are expected to be seen in\n+    // normal\n+    // operations.\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+      return this;\n+    }\n+  }\n+\n+  public OperandStack(final int maxSize) {\n+    if (maxSize < 0) {\n+      throw new IllegalArgumentException(\n+          String.format(\"max size (%d) must be non-negative\", maxSize));\n+    }\n+    this.entries = new Bytes32[maxSize];\n+    this.maxSize = maxSize;\n+    this.top = -1;\n+  }\n+\n+  public Bytes32 get(final int offset) {\n+    if (offset < 0 || offset >= size()) {\n+      throw new UnderflowException();\n+    }\n+\n+    return entries[top - offset];\n+  }\n+\n+  public Bytes32 pop() {\n+    if (top < 0) {\n+      throw new UnderflowException();\n+    }\n+\n+    final Bytes32 removed = entries[top];\n+    entries[top--] = null;\n+    return removed;\n+  }\n \n   /**\n    * Pops the specified number of operands from the stack.\n    *\n    * @param items the number of operands to pop off the stack\n    * @throws IllegalArgumentException if the items to pop is negative.\n-   * @throws IllegalStateException when the items to pop is greater than {@link #size()}\n+   * @throws UnderflowException when the items to pop is greater than {@link #size()}\n    */\n-  default void bulkPop(final int items) {\n+  void bulkPop(final int items) {\n     if (items < 0) {\n       throw new IllegalArgumentException(\n           String.format(\"requested number of items to bulk pop (%d) is negative\", items));\n     }\n     checkArgument(items > 0, \"number of items to pop must be greater than 0\");\n     if (items > size()) {\n-      throw new IllegalStateException(\n-          String.format(\"requested to bulk pop %d items off a stack of size %d\", items, size()));\n+      throw new UnderflowException();\n     }\n \n     for (int i = 0; i < items; ++i) {\n       pop();\n     }\n   }\n \n-  /**\n-   * Pushes the operand onto the stack.\n-   *\n-   * @param operand the operand to push on the stack\n-   * @throws IllegalStateException when the stack is at capacity (e.g. a stack overflow occurs)\n-   */\n-  public void push(Bytes32 operand);\n+  public void push(final Bytes32 operand) {\n+    final int nextTop = top + 1;\n+    if (nextTop == maxSize) {\n+      throw new OverflowException();\n+    }\n+    entries[nextTop] = operand;\n+    top = nextTop;\n+  }\n \n-  /**\n-   * Sets the ith item from the top of the stack to the value.\n-   *\n-   * @param index the position relative to the top of the stack to set\n-   * @param operand the new operand that replaces the operand at the current offset\n-   * @throws IndexOutOfBoundsException if the offset is out of range (offset &lt; 0 || offset &gt;=\n-   *     {@link #size()})\n-   */\n-  void set(int index, Bytes32 operand);\n+  public void set(final int offset, final Bytes32 operand) {\n+    if (offset < 0 || offset >= size()) {\n+      throw new IndexOutOfBoundsException();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA5NjE1OQ==", "bodyText": "Just to make the code a bit more newbie friendly, I think we should rename oogResponse everywhere to outOfGasResponse.", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451096159", "createdAt": "2020-07-07T19:34:09Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/AbstractFixedCostOperation.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+\n+package org.hyperledger.besu.ethereum.vm.operations;\n+\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.vm.AbstractOperation;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.GasCalculator;\n+\n+import java.util.Optional;\n+\n+abstract class AbstractFixedCostOperation extends AbstractOperation {\n+\n+  protected final OperationResult successResponse;\n+  protected final OperationResult oogResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEwMjAyNQ==", "bodyText": "Do you think it'd be worth it to do all of this checking one layer up? We can have execute delegate to an executeOverflowUnderflowUnchecked that each operation implements. It would mean that we were wrapping things that can't over or underflow with the exception handlers but I think it's a small price to pay for that not being a potential slip-of-the-mind for a future opcode.", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451102025", "createdAt": "2020-07-07T19:45:34Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/AndOperation.java", "diffHunk": "@@ -14,31 +14,38 @@\n  */\n package org.hyperledger.besu.ethereum.vm.operations;\n \n-import org.hyperledger.besu.ethereum.core.Gas;\n-import org.hyperledger.besu.ethereum.vm.AbstractOperation;\n+import org.hyperledger.besu.ethereum.vm.EVM;\n import org.hyperledger.besu.ethereum.vm.GasCalculator;\n import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.ethereum.vm.OperandStack.OverflowException;\n+import org.hyperledger.besu.ethereum.vm.OperandStack.UnderflowException;\n \n import org.apache.tuweni.units.bigints.UInt256;\n \n-public class AndOperation extends AbstractOperation {\n+public class AndOperation extends AbstractFixedCostOperation {\n \n   public AndOperation(final GasCalculator gasCalculator) {\n-    super(0x16, \"AND\", 2, 1, false, 1, gasCalculator);\n+    super(0x16, \"AND\", 2, 1, false, 1, gasCalculator, gasCalculator.getVeryLowTierGasCost());\n   }\n \n   @Override\n-  public Gas cost(final MessageFrame frame) {\n-    return gasCalculator().getVeryLowTierGasCost();\n-  }\n-\n-  @Override\n-  public void execute(final MessageFrame frame) {\n-    final UInt256 value0 = UInt256.fromBytes(frame.popStackItem());\n-    final UInt256 value1 = UInt256.fromBytes(frame.popStackItem());\n-\n-    final UInt256 result = value0.and(value1);\n-\n-    frame.pushStackItem(result.toBytes());\n+  public OperationResult execute(final MessageFrame frame, final EVM evm) {\n+    try {\n+      if (frame.getRemainingGas().compareTo(gasCost) < 0) {\n+        return oogResponse;\n+      }\n+\n+      final UInt256 value0 = UInt256.fromBytes(frame.popStackItem());\n+      final UInt256 value1 = UInt256.fromBytes(frame.popStackItem());\n+\n+      final UInt256 result = value0.and(value1);\n+      frame.pushStackItem(result.toBytes());\n+\n+      return successResponse;\n+    } catch (final UnderflowException ue) {\n+      return UNDERFLOW_RESPONSE;\n+    } catch (final OverflowException oe) {\n+      return OVERFLOW_RESPONSE;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e1b6bb44c2a4f8fd4e7cd77603d5542d364920c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMDk5Ng==", "bodyText": "Why did we have so many more tests ignored before and why are these still ignored?", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451110996", "createdAt": "2020-07-07T20:02:32Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/vm/VMReferenceTest.java", "diffHunk": "@@ -65,53 +68,24 @@\n   // fully test these operations and the mocking does not add much value.\n   // Additionally, the GeneralStateTests provide coverage of these\n   // operations so the proper functionality does get tested somewhere.\n-  private static final String[] BLACKLISTED_TESTS = {\n-    \"balance0\",\n-    \"balanceAddressInputTooBig\",\n-    \"balanceCaller3\",\n-    \"balanceAddressInputTooBigRightMyAddress\",\n-    \"ExtCodeSizeAddressInputTooBigRightMyAddress\",\n-    \"env1\",\n-    \"extcodecopy0AddressTooBigRight\",\n-    \"PostToNameRegistrator0\",\n-    \"CallToReturn1\",\n-    \"CallRecursiveBomb0\",\n-    \"createNameRegistratorValueTooHigh\",\n-    \"suicideNotExistingAccount\",\n-    \"callstatelessToReturn1\",\n-    \"CallRecursiveBomb1\",\n-    \"ABAcallsSuicide1\",\n-    \"suicideSendEtherToMe\",\n-    \"suicide0\",\n-    \"CallToNameRegistrator0\",\n-    \"callstatelessToNameRegistrator0\",\n-    \"PostToReturn1\",\n-    \"callcodeToReturn1\",\n-    \"ABAcalls0\",\n-    \"CallRecursiveBomb2\",\n-    \"CallRecursiveBomb3\",\n-    \"ABAcallsSuicide0\",\n-    \"callcodeToNameRegistrator0\",\n-    \"CallToPrecompiledContract\",\n-    \"createNameRegistrator\"\n+  private static final String[] IGNORED_TESTS = {\n+    \"push32AndSuicide\", \"suicide\", \"suicide0\", \"suicideNotExistingAccount\", \"suicideSendEtherToMe\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "631da9cde1b2315f6016a84c36781c65f6fd1cf6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTExMTE1OQ==", "bodyText": "commented out code", "url": "https://github.com/hyperledger/besu/pull/1192#discussion_r451111159", "createdAt": "2020-07-07T20:02:53Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/vm/VMReferenceTest.java", "diffHunk": "@@ -157,15 +131,15 @@ protected void runTest() {\n     // This is normally set inside the containing message executing the code.\n     frame.setState(MessageFrame.State.CODE_EXECUTING);\n \n-    try {\n-      protocolSpec.getEvm().runToHalt(frame, OperationTracer.NO_TRACING);\n-    } catch (final ExceptionalHaltException ehe) {\n-      if (!spec.isExceptionHaltExpected())\n-        System.err.println(\n-            String.format(\n-                \"Test %s incurred in an exceptional halt exception for reasons: %s.\",\n-                name, ehe.getReasons()));\n-    }\n+    //    try {\n+    protocolSpec.getEvm().runToHalt(frame, OperationTracer.NO_TRACING);\n+    //    } catch (final ExceptionalHaltException ehe) {\n+    //      if (!spec.isExceptionHaltExpected())\n+    //        System.err.println(\n+    //            String.format(\n+    //                \"Test %s incurred in an exceptional halt exception for reasons: %s.\",\n+    //                name, ehe.getReasons()));\n+    //    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "631da9cde1b2315f6016a84c36781c65f6fd1cf6"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a00a68d48bc46d785d3c46425bf5512a127fc8f", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/2a00a68d48bc46d785d3c46425bf5512a127fc8f", "committedDate": "2020-07-07T20:56:42Z", "message": "add missing mock, add assertion.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f1f6e90d347cd34e3a6159d2eb68b03bc2e05d7", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/3f1f6e90d347cd34e3a6159d2eb68b03bc2e05d7", "committedDate": "2020-07-07T22:41:57Z", "message": "Move overflow/underflow checks up a level.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edc99f74544bc9ae0c07d55f5a580ddaaabb2b82", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/edc99f74544bc9ae0c07d55f5a580ddaaabb2b82", "committedDate": "2020-07-07T22:57:29Z", "message": "spotless, and checkArgument, and remove commented out code.\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c59a1eb9d9ca1bae3b7ee4c35ec874c79e013a4a", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/c59a1eb9d9ca1bae3b7ee4c35ec874c79e013a4a", "committedDate": "2020-07-07T23:39:49Z", "message": "rework unit test to expect exception\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f50a7dad8fde0ece0daab6f25d41e80df875e95d", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/f50a7dad8fde0ece0daab6f25d41e80df875e95d", "committedDate": "2020-07-07T23:48:28Z", "message": "spotless\n\nSigned-off-by: Danno Ferrin <danno.ferrin@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MzI1OTc5", "url": "https://github.com/hyperledger/besu/pull/1192#pullrequestreview-444325979", "createdAt": "2020-07-07T23:56:01Z", "commit": {"oid": "f50a7dad8fde0ece0daab6f25d41e80df875e95d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "264fa2101545de144225095ea246c892459b9a80", "author": {"user": {"login": "shemnon", "name": "Danno Ferrin"}}, "url": "https://github.com/hyperledger/besu/commit/264fa2101545de144225095ea246c892459b9a80", "committedDate": "2020-07-08T00:09:25Z", "message": "Merge branch 'master' into evmLoop2"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1513, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}