{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNTQyNzMy", "number": 713, "reviewThreads": {"totalCount": 49, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowNToxOVrODx6kdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzowODoxNFrOD2djfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjY2NDIzOnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowNToxOVrOGFp68g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowNToxOVrOGFp68g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4Mjg5OA==", "bodyText": "TODO: Remove commented code", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r408582898", "createdAt": "2020-04-15T05:05:19Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1937,6 +1965,7 @@ private Path pluginsDir() {\n     }\n   }\n \n+  /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b934f3a87be54ed9296ebe00aaedd7e96cea881a"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjY2NTMwOnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowNTo1MlrOGFp7lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTowNTo1MlrOGFp7lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4MzA2MQ==", "bodyText": "TODO: Remove comments", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r408583061", "createdAt": "2020-04-15T05:05:52Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -62,25 +62,24 @@\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n-  private final KeyLoader keyLoader;\n \n-  public PublicKeySubCommand(final PrintStream out, final KeyLoader keyLoader) {\n+  public PublicKeySubCommand(final PrintStream out) {\n     this.out = out;\n-    this.keyLoader = keyLoader;\n   }\n \n   @Override\n   public void run() {\n     spec.commandLine().usage(out);\n   }\n \n-  private Optional<KeyPair> getKeyPair() {\n-    try {\n-      return Optional.of(keyLoader.load(parentCommand.nodePrivateKeyFile()));\n-    } catch (IOException e) {\n-      LOG.error(\"An error occurred while trying to read the private key\", e);\n-      return Optional.empty();\n-    }\n+  private Optional<NodeKey> getNodeKey() {\n+    return parentCommand.getNodeKey();\n+    //    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b934f3a87be54ed9296ebe00aaedd7e96cea881a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNjY4OTQyOnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/controller/BesuControllerBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToxOTo0OVrOGFqJ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNToxOTo0OVrOGFqJ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU4NjcxNA==", "bodyText": "TODO: Remove comments", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r408586714", "createdAt": "2020-04-15T05:19:49Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/controller/BesuControllerBuilder.java", "diffHunk": "@@ -126,10 +123,11 @@\n     return this;\n   }\n \n+  /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2505c3d3a48811333ef6eaef63f1aa9f2e8a06fb"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ2OTA3OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoxOTowOVrOGGO72w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMToxMDo0M1rOGG8fow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4OTMzOQ==", "bodyText": "I know this is what I called it (roughly anyway) - but maybe I'm wrong - maybe its actually a \"local-file security provider\"?\nI.e. people don't care that its backed by bouncy-castle, only that its created with a file.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409189339", "createdAt": "2020-04-15T23:19:09Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/dsl/build.gradle", "diffHunk": "@@ -16,6 +16,7 @@ dependencies {\n   implementation project(':metrics:core')\n   implementation project(':plugin-api')\n   implementation project(':plugins:rocksdb')\n+  implementation project(':plugins:securitymodule-bouncycastle')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzNTc3OQ==", "bodyText": "module has been renamed.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409935779", "createdAt": "2020-04-17T01:10:43Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/build.gradle", "diffHunk": "@@ -16,6 +16,7 @@ dependencies {\n   implementation project(':metrics:core')\n   implementation project(':plugin-api')\n   implementation project(':plugins:rocksdb')\n+  implementation project(':plugins:securitymodule-bouncycastle')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4OTMzOQ=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ3NTMzOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ThreadBesuNodeRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyMjowNVrOGGO_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzo0NzoyM1rOGGPeTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MDI4Mw==", "bodyText": "is there a precedent for the case of this identifier? eg bouncyCastle, BouncyCastle, BoUnCyCaStLe? (or is this how we do it?)", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409190283", "createdAt": "2020-04-15T23:22:05Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ThreadBesuNodeRunner.java", "diffHunk": "@@ -133,13 +144,20 @@ public void startNode(final BesuNode node) {\n             .withMetricsSystem(metricsSystem)\n             .build();\n \n+    final SecurityModule securityModule =\n+        securityModuleService\n+            .getByName(\"bouncycastle\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5ODE1OQ==", "bodyText": "\"rocksdb\" is all lowercase, thats why I preferred lowercase bouncycastle.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409198159", "createdAt": "2020-04-15T23:47:23Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ThreadBesuNodeRunner.java", "diffHunk": "@@ -133,13 +144,20 @@ public void startNode(final BesuNode node) {\n             .withMetricsSystem(metricsSystem)\n             .build();\n \n+    final SecurityModule securityModule =\n+        securityModuleService\n+            .getByName(\"bouncycastle\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MDI4Mw=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ4MDMxOnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyNDoyNlrOGGPCeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyNzo0MFrOGGVGWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTAzMg==", "bodyText": "don't  think this should expose the nodeKey - that should only be available from the BesuController.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409191032", "createdAt": "2020-04-15T23:24:26Z", "author": {"login": "rain-on"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -949,6 +960,17 @@ private void addConfigurationService() {\n     }\n   }\n \n+  /* NOTE: Must be called after addConfigurationService */\n+  private void addNodeKey() {\n+    if (nodeKey == null) {\n+      nodeKey = new NodeKey(nodeKeySecurityModuleProvider(nodeKeySecurityModuleProviderName));\n+    }\n+  }\n+\n+  public Optional<NodeKey> getNodeKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI5MDMzMA==", "bodyText": "fixed.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409290330", "createdAt": "2020-04-16T05:27:40Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -949,6 +960,17 @@ private void addConfigurationService() {\n     }\n   }\n \n+  /* NOTE: Must be called after addConfigurationService */\n+  private void addNodeKey() {\n+    if (nodeKey == null) {\n+      nodeKey = new NodeKey(nodeKeySecurityModuleProvider(nodeKeySecurityModuleProviderName));\n+    }\n+  }\n+\n+  public Optional<NodeKey> getNodeKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTAzMg=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ4MTc1OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyNTowNlrOGGPDWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyNzo1MFrOGGVGiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTI1Ng==", "bodyText": "I'd put this down the some of the storageService commands - and wondering if its more of a \"construct\" rather than an \"add\"", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409191256", "createdAt": "2020-04-15T23:25:06Z", "author": {"login": "rain-on"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -949,6 +960,17 @@ private void addConfigurationService() {\n     }\n   }\n \n+  /* NOTE: Must be called after addConfigurationService */\n+  private void addNodeKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI5MDM3OQ==", "bodyText": "removed.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409290379", "createdAt": "2020-04-16T05:27:50Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -949,6 +960,17 @@ private void addConfigurationService() {\n     }\n   }\n \n+  /* NOTE: Must be called after addConfigurationService */\n+  private void addNodeKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTI1Ng=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ4NDczOnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyNjo0M1rOGGPFJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzo0ODoxNFrOGGPfjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTcxNw==", "bodyText": "If possible (not sure about subcommands) - it'd be nice if this class didn't own the NodeKey - only create it and pass it into the BesuControllerBuilder - it makes for nicer lifetime management (i.e. we don't have a 1/2 constructed BesuCommand class, which sometimes has a NodeKey, but sometimes not).", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409191717", "createdAt": "2020-04-15T23:26:43Z", "author": {"login": "rain-on"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -858,6 +865,7 @@ void setBannedNodeIds(final List<String> values) {\n   private BesuController<?> besuController;\n   private StandaloneCommand standaloneCommands;\n   private BesuConfiguration pluginCommonConfiguration;\n+  private NodeKey nodeKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5ODQ3OQ==", "bodyText": "the main requirement was subcommand, but since subcommand can access besuController, its a good idea to get it from there.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409198479", "createdAt": "2020-04-15T23:48:14Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -858,6 +865,7 @@ void setBannedNodeIds(final List<String> values) {\n   private BesuController<?> besuController;\n   private StandaloneCommand standaloneCommands;\n   private BesuConfiguration pluginCommonConfiguration;\n+  private NodeKey nodeKey;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTcxNw=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ4NjM4OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzoyNzozMlrOGGPGHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNToyODoxMFrOGGVG4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTk2Ng==", "bodyText": "can we get this from the BesuController rather than the BesuCommand?", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409191966", "createdAt": "2020-04-15T23:27:32Z", "author": {"login": "rain-on"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -62,25 +63,22 @@\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n-  private final KeyLoader keyLoader;\n \n-  public PublicKeySubCommand(final PrintStream out, final KeyLoader keyLoader) {\n+  public PublicKeySubCommand(final PrintStream out) {\n     this.out = out;\n-    this.keyLoader = keyLoader;\n   }\n \n   @Override\n   public void run() {\n     spec.commandLine().usage(out);\n   }\n \n-  private Optional<KeyPair> getKeyPair() {\n-    try {\n-      return Optional.of(keyLoader.load(parentCommand.nodePrivateKeyFile()));\n-    } catch (IOException e) {\n-      LOG.error(\"An error occurred while trying to read the private key\", e);\n-      return Optional.empty();\n-    }\n+  private BesuController<?> createBesuController() {\n+    return parentCommand.buildController();\n+  }\n+\n+  private Optional<NodeKey> getNodeKey() {\n+    return parentCommand.getNodeKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI5MDQ2NQ==", "bodyText": "done.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409290465", "createdAt": "2020-04-16T05:28:10Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -62,25 +63,22 @@\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n-  private final KeyLoader keyLoader;\n \n-  public PublicKeySubCommand(final PrintStream out, final KeyLoader keyLoader) {\n+  public PublicKeySubCommand(final PrintStream out) {\n     this.out = out;\n-    this.keyLoader = keyLoader;\n   }\n \n   @Override\n   public void run() {\n     spec.commandLine().usage(out);\n   }\n \n-  private Optional<KeyPair> getKeyPair() {\n-    try {\n-      return Optional.of(keyLoader.load(parentCommand.nodePrivateKeyFile()));\n-    } catch (IOException e) {\n-      LOG.error(\"An error occurred while trying to read the private key\", e);\n-      return Optional.empty();\n-    }\n+  private BesuController<?> createBesuController() {\n+    return parentCommand.buildController();\n+  }\n+\n+  private Optional<NodeKey> getNodeKey() {\n+    return parentCommand.getNodeKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MTk2Ng=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ5NDA2OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/services/SecurityModuleServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzozMToxMFrOGGPKoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMjozNDoxNFrOGGSVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MzEyMQ==", "bodyText": "Personally, I'd prefer to see a custom class rather than a Function, but that's also old fashioned me.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409193121", "createdAt": "2020-04-15T23:31:10Z", "author": {"login": "rain-on"}, "path": "besu/src/main/java/org/hyperledger/besu/services/SecurityModuleServiceImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.services;\n+\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class SecurityModuleServiceImpl implements SecurityModuleService {\n+  private final Map<String, Function<BesuConfiguration, SecurityModule>> securityModuleProviders =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0NTA2MA==", "bodyText": "Implemented a named functional interface extending Function.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409245060", "createdAt": "2020-04-16T02:34:14Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/services/SecurityModuleServiceImpl.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.services;\n+\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class SecurityModuleServiceImpl implements SecurityModuleService {\n+  private final Map<String, Function<BesuConfiguration, SecurityModule>> securityModuleProviders =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MzEyMQ=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDQ5NjIwOnYy", "diffSide": "RIGHT", "path": "besu/src/test/java/org/hyperledger/besu/cli/BesuCommandTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzozMjoyMlrOGGPL8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo1NTo1NlrOGGdtGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MzQ1Ng==", "bodyText": "Removing these tests is correct - but we probably need to put them somewhere else - for example, there's a test which states that --node-private-key-file cannot be set if we are dockerised... not sure how we're going to do that with the plugin approach :/", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409193456", "createdAt": "2020-04-15T23:32:22Z", "author": {"login": "rain-on"}, "path": "besu/src/test/java/org/hyperledger/besu/cli/BesuCommandTest.java", "diffHunk": "@@ -807,50 +807,6 @@ public void configOptionDisabledUnderDocker() {\n     assertThat(commandOutput.toString()).isEmpty();\n   }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5ODgzMQ==", "bodyText": "They will be moving to plugin unit tests.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409198831", "createdAt": "2020-04-15T23:49:19Z", "author": {"login": "usmansaleem"}, "path": "besu/src/test/java/org/hyperledger/besu/cli/BesuCommandTest.java", "diffHunk": "@@ -807,50 +807,6 @@ public void configOptionDisabledUnderDocker() {\n     assertThat(commandOutput.toString()).isEmpty();\n   }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MzQ1Ng=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzMTMyMQ==", "bodyText": "created unit tests in plugin to cover these scenarios.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409431321", "createdAt": "2020-04-16T09:55:56Z", "author": {"login": "usmansaleem"}, "path": "besu/src/test/java/org/hyperledger/besu/cli/BesuCommandTest.java", "diffHunk": "@@ -807,50 +807,6 @@ public void configOptionDisabledUnderDocker() {\n     assertThat(commandOutput.toString()).isEmpty();\n   }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5MzQ1Ng=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDUwNjAzOnYy", "diffSide": "RIGHT", "path": "besu/src/test/java/org/hyperledger/besu/cli/PublicKeySubCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzozNjo1OVrOGGPRtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMjoxOToxMlrOGGSG2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NDkzMg==", "bodyText": "can't you do this check on the NodeKey, rather than the KeyPair? I.e. these tests shouldn't need to know about keypair", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409194932", "createdAt": "2020-04-15T23:36:59Z", "author": {"login": "rain-on"}, "path": "besu/src/test/java/org/hyperledger/besu/cli/PublicKeySubCommandTest.java", "diffHunk": "@@ -113,9 +113,9 @@ public void callingPublicKeyExportSubCommandHelpMustDisplayUsage() {\n \n   @Test\n   public void callingPublicKeyExportSubCommandWithoutPathMustWriteKeyToStandardOutput() {\n-    final KeyPair keyPair = KeyPair.generate();\n+    final KeyPair keyPair = getKeyPair();\n \n-    parseCommand(f -> keyPair, PUBLIC_KEY_SUBCOMMAND_NAME, PUBLIC_KEY_EXPORT_SUBCOMMAND_NAME);\n+    parseCommand(PUBLIC_KEY_SUBCOMMAND_NAME, PUBLIC_KEY_EXPORT_SUBCOMMAND_NAME);\n \n     final String expectedOutputStart = keyPair.getPublicKey().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0MTMwNQ==", "bodyText": "yes, now exposing NodeKey from AbstractCommandTest instead of KeyPair.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409241305", "createdAt": "2020-04-16T02:19:12Z", "author": {"login": "usmansaleem"}, "path": "besu/src/test/java/org/hyperledger/besu/cli/PublicKeySubCommandTest.java", "diffHunk": "@@ -113,9 +113,9 @@ public void callingPublicKeyExportSubCommandHelpMustDisplayUsage() {\n \n   @Test\n   public void callingPublicKeyExportSubCommandWithoutPathMustWriteKeyToStandardOutput() {\n-    final KeyPair keyPair = KeyPair.generate();\n+    final KeyPair keyPair = getKeyPair();\n \n-    parseCommand(f -> keyPair, PUBLIC_KEY_SUBCOMMAND_NAME, PUBLIC_KEY_EXPORT_SUBCOMMAND_NAME);\n+    parseCommand(PUBLIC_KEY_SUBCOMMAND_NAME, PUBLIC_KEY_EXPORT_SUBCOMMAND_NAME);\n \n     final String expectedOutputStart = keyPair.getPublicKey().toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NDkzMg=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDUwNzg3OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleSecurityModule.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQyMzozNzo1MVrOGGPSyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMjoxODozOVrOGGSGIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NTIxMA==", "bodyText": "why the change to a Supplier? This feels like a change which shouldn't be part of this PR.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409195210", "createdAt": "2020-04-15T23:37:51Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleSecurityModule.java", "diffHunk": "@@ -15,32 +15,42 @@\n package org.hyperledger.besu.crypto;\n \n import org.hyperledger.besu.crypto.SECP256K1.KeyPair;\n+import org.hyperledger.besu.plugin.services.securitymodule.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.Signature;\n \n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import org.apache.tuweni.bytes.Bytes32;\n \n+/**\n+ * Implementation of SecurityModule deferring cryptographic operations via SECP256K1 class which\n+ * uses BouncyCastle.\n+ */\n public class BouncyCastleSecurityModule implements SecurityModule {\n \n-  private final KeyPair nodeKeys;\n+  private final Supplier<KeyPair> keyPairSupplier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMTA1Ng==", "bodyText": "Its because of plugin lifecycle. BouncyCastleCliOptions.getPrivateKeyFile(); is not populated during the register command. (as we register PicoCli service in register method as well). Hence we need to provide a method reference which allows the actual cal to be deferred while all cli options are initialized.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409201056", "createdAt": "2020-04-15T23:56:19Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleSecurityModule.java", "diffHunk": "@@ -15,32 +15,42 @@\n package org.hyperledger.besu.crypto;\n \n import org.hyperledger.besu.crypto.SECP256K1.KeyPair;\n+import org.hyperledger.besu.plugin.services.securitymodule.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.Signature;\n \n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import org.apache.tuweni.bytes.Bytes32;\n \n+/**\n+ * Implementation of SecurityModule deferring cryptographic operations via SECP256K1 class which\n+ * uses BouncyCastle.\n+ */\n public class BouncyCastleSecurityModule implements SecurityModule {\n \n-  private final KeyPair nodeKeys;\n+  private final Supplier<KeyPair> keyPairSupplier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NTIxMA=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMTQzNA==", "bodyText": "Other plugins are also following similar approach where they want to utilize cli options.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409201434", "createdAt": "2020-04-15T23:57:31Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleSecurityModule.java", "diffHunk": "@@ -15,32 +15,42 @@\n package org.hyperledger.besu.crypto;\n \n import org.hyperledger.besu.crypto.SECP256K1.KeyPair;\n+import org.hyperledger.besu.plugin.services.securitymodule.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.Signature;\n \n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import org.apache.tuweni.bytes.Bytes32;\n \n+/**\n+ * Implementation of SecurityModule deferring cryptographic operations via SECP256K1 class which\n+ * uses BouncyCastle.\n+ */\n public class BouncyCastleSecurityModule implements SecurityModule {\n \n-  private final KeyPair nodeKeys;\n+  private final Supplier<KeyPair> keyPairSupplier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NTIxMA=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTI0MTEyMw==", "bodyText": "Reverted and fixed AbstractCommandTest which resulted in this change.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409241123", "createdAt": "2020-04-16T02:18:39Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/BouncyCastleSecurityModule.java", "diffHunk": "@@ -15,32 +15,42 @@\n package org.hyperledger.besu.crypto;\n \n import org.hyperledger.besu.crypto.SECP256K1.KeyPair;\n+import org.hyperledger.besu.plugin.services.securitymodule.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.Signature;\n \n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import org.apache.tuweni.bytes.Bytes32;\n \n+/**\n+ * Implementation of SecurityModule deferring cryptographic operations via SECP256K1 class which\n+ * uses BouncyCastle.\n+ */\n public class BouncyCastleSecurityModule implements SecurityModule {\n \n-  private final KeyPair nodeKeys;\n+  private final Supplier<KeyPair> keyPairSupplier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NTIxMA=="}, "originalCommit": {"oid": "c13368907c14852c6a60d0d2f5633280c32a2013"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mjk1MTk1OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzo1Njo1MVrOGGmlFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTowODozN1rOGHAIQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjcyNg==", "bodyText": "This should be an interface not a class.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409576726", "createdAt": "2020-04-16T13:56:51Z", "author": {"login": "shemnon"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;\n \n import java.math.BigInteger;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTMzMQ==", "bodyText": "refactored as interface.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995331", "createdAt": "2020-04-17T05:08:37Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;\n \n import java.math.BigInteger;\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjcyNg=="}, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0Mjk1MzU0OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMzo1NzoxMVrOGGmmHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTowODo0N1rOGHAIYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3Njk4OA==", "bodyText": "This should be an interface not a class.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409576988", "createdAt": "2020-04-16T13:57:11Z", "author": {"login": "shemnon"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;\n \n import org.apache.tuweni.bytes.Bytes;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTM2MQ==", "bodyText": "refactored as interface.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995361", "createdAt": "2020-04-17T05:08:47Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;\n \n import org.apache.tuweni.bytes.Bytes;\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3Njk4OA=="}, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDkyNzQ2OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo1Mjo0OFrOGG59dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTowOTowNlrOGHAIvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDI2MA==", "bodyText": "This should be under the data package in the plugin api", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409894260", "createdAt": "2020-04-16T22:52:48Z", "author": {"login": "jframe"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTQ1NQ==", "bodyText": "refactored under data subpackage.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995455", "createdAt": "2020-04-17T05:09:06Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/PublicKey.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDI2MA=="}, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDkzMTYyOnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo1NDoyOVrOGG5_0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMToyODo1OVrOGG8zMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDg2NA==", "bodyText": "This should be under the data package in the plugin api", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409894864", "createdAt": "2020-04-16T22:54:29Z", "author": {"login": "jframe"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0MDc4NA==", "bodyText": "refactored to subpackage data", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409940784", "createdAt": "2020-04-17T01:28:59Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NDg2NA=="}, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDkzNzIyOnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo1NjozOVrOGG6DBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMjo1NjozOVrOGG6DBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NTY4NA==", "bodyText": "Since this is now a general purpose Ethereum signature data type in the plugin API I think this should include the recovery id.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409895684", "createdAt": "2020-04-16T22:56:39Z", "author": {"login": "jframe"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/Signature.java", "diffHunk": "@@ -12,7 +12,7 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule;\n \n import java.math.BigInteger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDk2ODkwOnYy", "diffSide": "RIGHT", "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzoxMDoyNFrOGG6VrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMToyMzowNFrOGG8s1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDQ2MQ==", "bodyText": "Doesn't look like this needs to be assigned to a field variable, couldn't this just be passed to the nodePrivateKeyFile function?", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409900461", "createdAt": "2020-04-16T23:10:24Z", "author": {"login": "jframe"}, "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.BesuPlugin;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+\n+import java.io.File;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LocalFileSecurityModulePlugin implements BesuPlugin {\n+  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  static final String SECURITY_MODULE_NAME = \"localfile\";\n+  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n+  private final LocalFileSecurityModuleCLIOptions cliOptions =\n+      new LocalFileSecurityModuleCLIOptions();\n+  private BesuConfiguration besuConfiguration;\n+\n+  @Override\n+  public void register(final BesuContext context) {\n+    LOG.debug(\"Registering plugin\");\n+    registerCliOptions(context);\n+    registerSecurityModule(context);\n+  }\n+\n+  private void registerCliOptions(final BesuContext context) {\n+    if (!isFullInstantiation()) {\n+      return; // don't register cli options in docker mode\n+    }\n+\n+    final PicoCLIOptions picoCLIOptions =\n+        context\n+            .getService(PicoCLIOptions.class)\n+            .orElseThrow(\n+                () ->\n+                    new IllegalStateException(\n+                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n+\n+    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n+  }\n+\n+  private void registerSecurityModule(final BesuContext context) {\n+    context\n+        .getService(SecurityModuleService.class)\n+        .orElseThrow(\n+            () ->\n+                new RuntimeException(\n+                    \"Security Module Service Not available, cannot register Service Module: \"\n+                        + SECURITY_MODULE_NAME))\n+        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n+  }\n+\n+  private SecurityModule createFileBasedKeyPairSecurityModule(\n+      final BesuConfiguration besuConfiguration) {\n+    this.besuConfiguration = besuConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzOTE1OQ==", "bodyText": "done.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409939159", "createdAt": "2020-04-17T01:23:04Z", "author": {"login": "usmansaleem"}, "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.BesuPlugin;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+\n+import java.io.File;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LocalFileSecurityModulePlugin implements BesuPlugin {\n+  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  static final String SECURITY_MODULE_NAME = \"localfile\";\n+  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n+  private final LocalFileSecurityModuleCLIOptions cliOptions =\n+      new LocalFileSecurityModuleCLIOptions();\n+  private BesuConfiguration besuConfiguration;\n+\n+  @Override\n+  public void register(final BesuContext context) {\n+    LOG.debug(\"Registering plugin\");\n+    registerCliOptions(context);\n+    registerSecurityModule(context);\n+  }\n+\n+  private void registerCliOptions(final BesuContext context) {\n+    if (!isFullInstantiation()) {\n+      return; // don't register cli options in docker mode\n+    }\n+\n+    final PicoCLIOptions picoCLIOptions =\n+        context\n+            .getService(PicoCLIOptions.class)\n+            .orElseThrow(\n+                () ->\n+                    new IllegalStateException(\n+                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n+\n+    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n+  }\n+\n+  private void registerSecurityModule(final BesuContext context) {\n+    context\n+        .getService(SecurityModuleService.class)\n+        .orElseThrow(\n+            () ->\n+                new RuntimeException(\n+                    \"Security Module Service Not available, cannot register Service Module: \"\n+                        + SECURITY_MODULE_NAME))\n+        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n+  }\n+\n+  private SecurityModule createFileBasedKeyPairSecurityModule(\n+      final BesuConfiguration besuConfiguration) {\n+    this.besuConfiguration = besuConfiguration;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDQ2MQ=="}, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDk3MDgwOnYy", "diffSide": "RIGHT", "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzoxMToxM1rOGG6W0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMToyMzoyNFrOGG8tXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDc1Mw==", "bodyText": "nit: final", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409900753", "createdAt": "2020-04-16T23:11:13Z", "author": {"login": "jframe"}, "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.BesuPlugin;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+\n+import java.io.File;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LocalFileSecurityModulePlugin implements BesuPlugin {\n+  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  static final String SECURITY_MODULE_NAME = \"localfile\";\n+  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n+  private final LocalFileSecurityModuleCLIOptions cliOptions =\n+      new LocalFileSecurityModuleCLIOptions();\n+  private BesuConfiguration besuConfiguration;\n+\n+  @Override\n+  public void register(final BesuContext context) {\n+    LOG.debug(\"Registering plugin\");\n+    registerCliOptions(context);\n+    registerSecurityModule(context);\n+  }\n+\n+  private void registerCliOptions(final BesuContext context) {\n+    if (!isFullInstantiation()) {\n+      return; // don't register cli options in docker mode\n+    }\n+\n+    final PicoCLIOptions picoCLIOptions =\n+        context\n+            .getService(PicoCLIOptions.class)\n+            .orElseThrow(\n+                () ->\n+                    new IllegalStateException(\n+                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n+\n+    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n+  }\n+\n+  private void registerSecurityModule(final BesuContext context) {\n+    context\n+        .getService(SecurityModuleService.class)\n+        .orElseThrow(\n+            () ->\n+                new RuntimeException(\n+                    \"Security Module Service Not available, cannot register Service Module: \"\n+                        + SECURITY_MODULE_NAME))\n+        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n+  }\n+\n+  private SecurityModule createFileBasedKeyPairSecurityModule(\n+      final BesuConfiguration besuConfiguration) {\n+    this.besuConfiguration = besuConfiguration;\n+    final File privateKeyFile = nodePrivateKeyFile();\n+    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(privateKeyFile);\n+    return new KeyPairSecurityModule(keyPair);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    File nodePrivateKeyFile = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzOTI5Mw==", "bodyText": "modified logic so that it uses final now.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409939293", "createdAt": "2020-04-17T01:23:24Z", "author": {"login": "usmansaleem"}, "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.BesuPlugin;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+\n+import java.io.File;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LocalFileSecurityModulePlugin implements BesuPlugin {\n+  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  static final String SECURITY_MODULE_NAME = \"localfile\";\n+  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n+  private final LocalFileSecurityModuleCLIOptions cliOptions =\n+      new LocalFileSecurityModuleCLIOptions();\n+  private BesuConfiguration besuConfiguration;\n+\n+  @Override\n+  public void register(final BesuContext context) {\n+    LOG.debug(\"Registering plugin\");\n+    registerCliOptions(context);\n+    registerSecurityModule(context);\n+  }\n+\n+  private void registerCliOptions(final BesuContext context) {\n+    if (!isFullInstantiation()) {\n+      return; // don't register cli options in docker mode\n+    }\n+\n+    final PicoCLIOptions picoCLIOptions =\n+        context\n+            .getService(PicoCLIOptions.class)\n+            .orElseThrow(\n+                () ->\n+                    new IllegalStateException(\n+                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n+\n+    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n+  }\n+\n+  private void registerSecurityModule(final BesuContext context) {\n+    context\n+        .getService(SecurityModuleService.class)\n+        .orElseThrow(\n+            () ->\n+                new RuntimeException(\n+                    \"Security Module Service Not available, cannot register Service Module: \"\n+                        + SECURITY_MODULE_NAME))\n+        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n+  }\n+\n+  private SecurityModule createFileBasedKeyPairSecurityModule(\n+      final BesuConfiguration besuConfiguration) {\n+    this.besuConfiguration = besuConfiguration;\n+    final File privateKeyFile = nodePrivateKeyFile();\n+    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(privateKeyFile);\n+    return new KeyPairSecurityModule(keyPair);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    File nodePrivateKeyFile = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMDc1Mw=="}, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDk5MTk1OnYy", "diffSide": "RIGHT", "path": "plugins/localfile-securitymodule/src/test/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePluginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQyMzoyMTowN1rOGG6jJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwMToyNDoxM1rOGG8ulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMzkxMA==", "bodyText": "Thinking an assertion would be better here, if the setProperty fails we want to know not just have the test be skipped.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409903910", "createdAt": "2020-04-16T23:21:07Z", "author": {"login": "jframe"}, "path": "plugins/localfile-securitymodule/src/test/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePluginTest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.hyperledger.besu.plugin.services.securitymodule.localfile.LocalFileSecurityModulePlugin.PICOCLI_NAMESPACE;\n+import static org.hyperledger.besu.plugin.services.securitymodule.localfile.LocalFileSecurityModulePlugin.SECURITY_MODULE_NAME;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeTrue;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+import org.hyperledger.besu.services.BesuConfigurationImpl;\n+import org.hyperledger.besu.services.PicoCLIOptionsImpl;\n+import org.hyperledger.besu.services.SecurityModuleServiceImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import picocli.CommandLine;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LocalFileSecurityModulePluginTest {\n+  @Rule public final TemporaryFolder temp = new TemporaryFolder();\n+\n+  @Mock private BesuContext besuContext;\n+  private final SecurityModuleServiceImpl securityModuleService = new SecurityModuleServiceImpl();\n+  private CommandLine commandLine;\n+\n+  @Before\n+  public void setUp() {\n+    commandLine = new CommandLine(TestCommand.class);\n+\n+    when(besuContext.getService(PicoCLIOptions.class))\n+        .thenReturn(Optional.of(new PicoCLIOptionsImpl(commandLine)));\n+    when(besuContext.getService(SecurityModuleService.class))\n+        .thenReturn(Optional.of(securityModuleService));\n+  }\n+\n+  @Before\n+  @After\n+  public void resetSystemProps() {\n+    System.setProperty(\"besu.docker\", \"false\");\n+  }\n+\n+  @Test\n+  public void cliOptionIsDisabledUnderDockerMode() {\n+    System.setProperty(\"besu.docker\", \"true\");\n+    assumeTrue(Boolean.getBoolean(\"besu.docker\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkzOTYwNw==", "bodyText": "This one is adapted from the original unit test under BesuCommandTest. I believe assume would skip the test if condition fails (instead of failing the whole job).", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409939607", "createdAt": "2020-04-17T01:24:13Z", "author": {"login": "usmansaleem"}, "path": "plugins/localfile-securitymodule/src/test/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePluginTest.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.hyperledger.besu.plugin.services.securitymodule.localfile.LocalFileSecurityModulePlugin.PICOCLI_NAMESPACE;\n+import static org.hyperledger.besu.plugin.services.securitymodule.localfile.LocalFileSecurityModulePlugin.SECURITY_MODULE_NAME;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeTrue;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+import org.hyperledger.besu.services.BesuConfigurationImpl;\n+import org.hyperledger.besu.services.PicoCLIOptionsImpl;\n+import org.hyperledger.besu.services.SecurityModuleServiceImpl;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import picocli.CommandLine;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LocalFileSecurityModulePluginTest {\n+  @Rule public final TemporaryFolder temp = new TemporaryFolder();\n+\n+  @Mock private BesuContext besuContext;\n+  private final SecurityModuleServiceImpl securityModuleService = new SecurityModuleServiceImpl();\n+  private CommandLine commandLine;\n+\n+  @Before\n+  public void setUp() {\n+    commandLine = new CommandLine(TestCommand.class);\n+\n+    when(besuContext.getService(PicoCLIOptions.class))\n+        .thenReturn(Optional.of(new PicoCLIOptionsImpl(commandLine)));\n+    when(besuContext.getService(SecurityModuleService.class))\n+        .thenReturn(Optional.of(securityModuleService));\n+  }\n+\n+  @Before\n+  @After\n+  public void resetSystemProps() {\n+    System.setProperty(\"besu.docker\", \"false\");\n+  }\n+\n+  @Test\n+  public void cliOptionIsDisabledUnderDockerMode() {\n+    System.setProperty(\"besu.docker\", \"true\");\n+    assumeTrue(Boolean.getBoolean(\"besu.docker\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkwMzkxMA=="}, "originalCommit": {"oid": "bc455365b78da4496b9ef0652712a745db600825"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTU2Njk5OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/Signature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDo0Mzo0MlrOGG_yJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTowOToyMVrOGHAI-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4OTY2OA==", "bodyText": "Can you add some javadoc", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409989668", "createdAt": "2020-04-17T04:43:42Z", "author": {"login": "jframe"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/Signature.java", "diffHunk": "@@ -12,24 +12,12 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule.data;\n \n import java.math.BigInteger;\n \n-public final class Signature {\n-  private final BigInteger r;\n-  private final BigInteger s;\n+public interface Signature {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83e47f0da0493896c063ee2bea5480024108f5f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTUxMg==", "bodyText": "Added brief javadoc.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995512", "createdAt": "2020-04-17T05:09:21Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/Signature.java", "diffHunk": "@@ -12,24 +12,12 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule.data;\n \n import java.math.BigInteger;\n \n-public final class Signature {\n-  private final BigInteger r;\n-  private final BigInteger s;\n+public interface Signature {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4OTY2OA=="}, "originalCommit": {"oid": "d83e47f0da0493896c063ee2bea5480024108f5f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTU2NzU0OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDo0Mzo1N1rOGG_yaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNTowOTozNFrOGHAJLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4OTczNg==", "bodyText": "can you add some javadoc", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409989736", "createdAt": "2020-04-17T04:43:57Z", "author": {"login": "jframe"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java", "diffHunk": "@@ -12,23 +12,11 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule.data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83e47f0da0493896c063ee2bea5480024108f5f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTU2Ng==", "bodyText": "Added brief javadoc", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995566", "createdAt": "2020-04-17T05:09:34Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java", "diffHunk": "@@ -12,23 +12,11 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule.data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4OTczNg=="}, "originalCommit": {"oid": "d83e47f0da0493896c063ee2bea5480024108f5f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTU3MjgwOnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDo0Nzo0MFrOGG_1eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNToxMDo0OVrOGHAKNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MDUyMA==", "bodyText": "Is there any benefit for this to extend Function? Would of expected this to be a top level class with a create method following the style done for storage API which has a KeyValueStorageFactory", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409990520", "createdAt": "2020-04-17T04:47:40Z", "author": {"login": "jframe"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  @FunctionalInterface\n+  interface SecurityModuleProvider extends Function<BesuConfiguration, SecurityModule> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83e47f0da0493896c063ee2bea5480024108f5f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5NTgyOQ==", "bodyText": "refactored to top level. The only benefit is adhering to existing functional interface. We can technically avoid declaring apply method altogether.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409995829", "createdAt": "2020-04-17T05:10:49Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  @FunctionalInterface\n+  interface SecurityModuleProvider extends Function<BesuConfiguration, SecurityModule> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MDUyMA=="}, "originalCommit": {"oid": "d83e47f0da0493896c063ee2bea5480024108f5f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTU3MzAxOnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNDo0Nzo1NFrOGG_1og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNToxNDo1M1rOGHAN5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MDU2Mg==", "bodyText": "Can some javadoc be added", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409990562", "createdAt": "2020-04-17T04:47:54Z", "author": {"login": "jframe"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  @FunctionalInterface", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d83e47f0da0493896c063ee2bea5480024108f5f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5Njc3NQ==", "bodyText": "added.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r409996775", "createdAt": "2020-04-17T05:14:53Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  @FunctionalInterface", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk5MDU2Mg=="}, "originalCommit": {"oid": "d83e47f0da0493896c063ee2bea5480024108f5f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzQxNzA2OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMjoxMDoyNFrOGIAc8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNDozODoxMVrOGICy1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0OTIwMQ==", "bodyText": "Still prefer to not have this extend Function. Think this would be much cleaner with a just a SecurityModule create(BesuConfiguration config) method.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411049201", "createdAt": "2020-04-20T02:10:24Z", "author": {"login": "jframe"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Represents Security Module Provider Function which takes an instance of BesuConfiguration and\n+ * produces an instance of SecurityModule.\n+ */\n+@Unstable\n+@FunctionalInterface\n+public interface SecurityModuleProvider extends Function<BesuConfiguration, SecurityModule> {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MjQ0OA==", "bodyText": "Think this would be much cleaner with a just a SecurityModule create(BesuConfiguration config) method.\n\nIt would also be more consistent with the approach use in the other plugins.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411072448", "createdAt": "2020-04-20T03:41:35Z", "author": {"login": "CjHare"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Represents Security Module Provider Function which takes an instance of BesuConfiguration and\n+ * produces an instance of SecurityModule.\n+ */\n+@Unstable\n+@FunctionalInterface\n+public interface SecurityModuleProvider extends Function<BesuConfiguration, SecurityModule> {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0OTIwMQ=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA4NzU3NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411087574", "createdAt": "2020-04-20T04:38:11Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModuleProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+\n+import java.util.function.Function;\n+\n+/**\n+ * Represents Security Module Provider Function which takes an instance of BesuConfiguration and\n+ * produces an instance of SecurityModule.\n+ */\n+@Unstable\n+@FunctionalInterface\n+public interface SecurityModuleProvider extends Function<BesuConfiguration, SecurityModule> {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0OTIwMQ=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzQyMDE1OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMjoxMTo0OVrOGIAefw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNDo0NTo1MFrOGIC7CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0OTU5OQ==", "bodyText": "Since the crypto provider can fail signing, calculating key agreement etc. I think we should have these methods throwing a custom exception, perhaps a SecurityModuleException.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411049599", "createdAt": "2020-04-20T02:11:49Z", "author": {"login": "jframe"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModule.java", "diffHunk": "@@ -21,11 +25,12 @@\n  * interface ensures cryptographic functions required by Ethereum are available to the application\n  * at large, without releasing the content of the private key.\n  */\n+@Unstable\n public interface SecurityModule {\n \n   /**\n    * @param dataHash The Keccack hash of a set of data, which is to be signed.\n-   * @return the signature (R, S, recId) generated by signing the hash with the node key\n+   * @return the signature (R, S) generated by signing the hash with the node key\n    */\n   Signature sign(Bytes32 dataHash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA4OTY3Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411089673", "createdAt": "2020-04-20T04:45:50Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/SecurityModule.java", "diffHunk": "@@ -21,11 +25,12 @@\n  * interface ensures cryptographic functions required by Ethereum are available to the application\n  * at large, without releasing the content of the private key.\n  */\n+@Unstable\n public interface SecurityModule {\n \n   /**\n    * @param dataHash The Keccack hash of a set of data, which is to be signed.\n-   * @return the signature (R, S, recId) generated by signing the hash with the node key\n+   * @return the signature (R, S) generated by signing the hash with the node key\n    */\n   Signature sign(Bytes32 dataHash);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA0OTU5OQ=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzQ0ODgyOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMjoyNzo0MVrOGIAtlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNDo0Njo0MlrOGIC8Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1MzQ2MA==", "bodyText": "nit: is there a standard as when we use - or not? i.e. local-file-security-module\"? or localfilesecuritymodule?", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411053460", "createdAt": "2020-04-20T02:27:41Z", "author": {"login": "rain-on"}, "path": "acceptance-tests/dsl/build.gradle", "diffHunk": "@@ -16,6 +16,7 @@ dependencies {\n   implementation project(':metrics:core')\n   implementation project(':plugin-api')\n   implementation project(':plugins:rocksdb')\n+  implementation project(':plugins:localfile-securitymodule')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA4OTkyMw==", "bodyText": "I think this might be the first one which would have three syllables :)", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411089923", "createdAt": "2020-04-20T04:46:42Z", "author": {"login": "usmansaleem"}, "path": "acceptance-tests/dsl/build.gradle", "diffHunk": "@@ -16,6 +16,7 @@ dependencies {\n   implementation project(':metrics:core')\n   implementation project(':plugin-api')\n   implementation project(':plugins:rocksdb')\n+  implementation project(':plugins:localfile-securitymodule')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1MzQ2MA=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzQ2MjEyOnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMjozNDoyMVrOGIA0jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTowMDowMlrOGIDLRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NTI0Ng==", "bodyText": "this is a side effect and not the purpose of this function - I think it'd be better for this to be called explicitly when needed.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411055246", "createdAt": "2020-04-20T02:34:21Z", "author": {"login": "rain-on"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1946,15 +1962,16 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n-    }\n+  private NodeKey buildNodeKey() {\n+    addConfigurationService(); // its a no-op if besu configuration service is already initialized", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5MjM1Ng==", "bodyText": "how do you recommend we call addConfigurationService from subcommand? I would either have to expose addConfigurationService as public or wrap these two methods in a different method.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411092356", "createdAt": "2020-04-20T04:54:51Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1946,15 +1962,16 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n-    }\n+  private NodeKey buildNodeKey() {\n+    addConfigurationService(); // its a no-op if besu configuration service is already initialized", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NTI0Ng=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5MzgyOQ==", "bodyText": "will use another method reference!", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411093829", "createdAt": "2020-04-20T05:00:02Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1946,15 +1962,16 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n-    }\n+  private NodeKey buildNodeKey() {\n+    addConfigurationService(); // its a no-op if besu configuration service is already initialized", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NTI0Ng=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzQ2NjI3OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMjozNjozM1rOGIA2ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTowMzo1NVrOGIDPqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NTgxMQ==", "bodyText": "probably don't need to pass in the string as a parameter - you can take it from the class variable.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411055811", "createdAt": "2020-04-20T02:36:33Z", "author": {"login": "rain-on"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1946,15 +1962,16 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n-    }\n+  private NodeKey buildNodeKey() {\n+    addConfigurationService(); // its a no-op if besu configuration service is already initialized\n+    return new NodeKey(securityModuleProvider(securityModuleProviderName));\n+  }\n \n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(dataDir());\n+  private SecurityModule securityModuleProvider(final String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5NDk1Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411094952", "createdAt": "2020-04-20T05:03:55Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1946,15 +1962,16 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n-    }\n+  private NodeKey buildNodeKey() {\n+    addConfigurationService(); // its a no-op if besu configuration service is already initialized\n+    return new NodeKey(securityModuleProvider(securityModuleProviderName));\n+  }\n \n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(dataDir());\n+  private SecurityModule securityModuleProvider(final String name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1NTgxMQ=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzQ4NzkxOnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMjo0ODoxNVrOGIBCbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNToxMTo1NVrOGIDYjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1ODc5Nw==", "bodyText": "unfortunately, this is kinda dangerous - when security classes offer a getEncoded() they typically imply an ASN1 encoding - not just a set of raw bytes.\nSo if we offer this as a function on a public key, we may need to be more explicit about what we expect.\n[Given this is part of the interface, it will require javadoc.]", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411058797", "createdAt": "2020-04-20T02:48:15Z", "author": {"login": "rain-on"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java", "diffHunk": "@@ -12,23 +12,17 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule.data;\n \n-import org.apache.tuweni.bytes.Bytes;\n-\n-public class PublicKey {\n-\n-  private final Bytes encoded;\n+import org.hyperledger.besu.plugin.Unstable;\n \n-  public PublicKey(final Bytes encoded) {\n-    this.encoded = encoded;\n-  }\n-\n-  public static PublicKey create(final Bytes encoded) {\n-    return new PublicKey(encoded);\n-  }\n+import org.apache.tuweni.bytes.Bytes;\n \n-  public Bytes getEncoded() {\n-    return encoded;\n-  }\n+/**\n+ * Represents a function which provides encoded Bytes of Public Key (such as SECP256K1 Public Key).\n+ */\n+@Unstable\n+@FunctionalInterface\n+public interface PublicKey {\n+  Bytes getEncoded();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5NzIyOQ==", "bodyText": "@rain-on @CjHare What is the encoding used by SECP256K1 implementation? org/hyperledger/besu/crypto/SECP256K1.java:176", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411097229", "createdAt": "2020-04-20T05:11:55Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/data/PublicKey.java", "diffHunk": "@@ -12,23 +12,17 @@\n  *\n  * SPDX-License-Identifier: Apache-2.0\n  */\n-package org.hyperledger.besu.crypto;\n+package org.hyperledger.besu.plugin.services.securitymodule.data;\n \n-import org.apache.tuweni.bytes.Bytes;\n-\n-public class PublicKey {\n-\n-  private final Bytes encoded;\n+import org.hyperledger.besu.plugin.Unstable;\n \n-  public PublicKey(final Bytes encoded) {\n-    this.encoded = encoded;\n-  }\n-\n-  public static PublicKey create(final Bytes encoded) {\n-    return new PublicKey(encoded);\n-  }\n+import org.apache.tuweni.bytes.Bytes;\n \n-  public Bytes getEncoded() {\n-    return encoded;\n-  }\n+/**\n+ * Represents a function which provides encoded Bytes of Public Key (such as SECP256K1 Public Key).\n+ */\n+@Unstable\n+@FunctionalInterface\n+public interface PublicKey {\n+  Bytes getEncoded();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1ODc5Nw=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzQ5MjE4OnYy", "diffSide": "RIGHT", "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMjo1MDo0MFrOGIBEvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNToyMDoxNlrOGIDiUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1OTM5MQ==", "bodyText": "I know its stolen, but its terribly named - can we change this to be more meaningful - i.e. or \"containerised\"? even \"inDocker\"?\nIs this function even required - does it add value over the literal variable?", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411059391", "createdAt": "2020-04-20T02:50:40Z", "author": {"login": "rain-on"}, "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.BesuPlugin;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+\n+import java.io.File;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LocalFileSecurityModulePlugin implements BesuPlugin {\n+  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  static final String SECURITY_MODULE_NAME = \"localfile\";\n+  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n+  private final LocalFileSecurityModuleCLIOptions cliOptions =\n+      new LocalFileSecurityModuleCLIOptions();\n+\n+  @Override\n+  public void register(final BesuContext context) {\n+    LOG.debug(\"Registering plugin\");\n+    registerCliOptions(context);\n+    registerSecurityModule(context);\n+  }\n+\n+  private void registerCliOptions(final BesuContext context) {\n+    if (!isFullInstantiation()) {\n+      return; // don't register cli options in docker mode\n+    }\n+\n+    final PicoCLIOptions picoCLIOptions =\n+        context\n+            .getService(PicoCLIOptions.class)\n+            .orElseThrow(\n+                () ->\n+                    new IllegalStateException(\n+                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n+\n+    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n+  }\n+\n+  private void registerSecurityModule(final BesuContext context) {\n+    context\n+        .getService(SecurityModuleService.class)\n+        .orElseThrow(\n+            () ->\n+                new RuntimeException(\n+                    \"Security Module Service Not available, cannot register Service Module: \"\n+                        + SECURITY_MODULE_NAME))\n+        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n+  }\n+\n+  private SecurityModule createFileBasedKeyPairSecurityModule(\n+      final BesuConfiguration besuConfiguration) {\n+    final File privateKeyFile = nodePrivateKeyFile(besuConfiguration);\n+    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(privateKeyFile);\n+    return new KeyPairSecurityModule(keyPair);\n+  }\n+\n+  private File nodePrivateKeyFile(final BesuConfiguration besuConfiguration) {\n+    final File nodePrivateKeyFile = isFullInstantiation() ? cliOptions.getPrivateKeyFile() : null;\n+\n+    return nodePrivateKeyFile != null\n+        ? nodePrivateKeyFile\n+        : KeyPairUtil.getDefaultKeyFile(besuConfiguration.getDataPath());\n+  }\n+\n+  private boolean isFullInstantiation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA5OTcyOA==", "bodyText": "agreed. Modified the code to use isDocker variable directly.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411099728", "createdAt": "2020-04-20T05:20:16Z", "author": {"login": "usmansaleem"}, "path": "plugins/localfile-securitymodule/src/main/java/org/hyperledger/besu/plugin/services/securitymodule/localfile/LocalFileSecurityModulePlugin.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services.securitymodule.localfile;\n+\n+import org.hyperledger.besu.crypto.KeyPairSecurityModule;\n+import org.hyperledger.besu.crypto.KeyPairUtil;\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.plugin.BesuContext;\n+import org.hyperledger.besu.plugin.BesuPlugin;\n+import org.hyperledger.besu.plugin.services.BesuConfiguration;\n+import org.hyperledger.besu.plugin.services.PicoCLIOptions;\n+import org.hyperledger.besu.plugin.services.SecurityModuleService;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.localfile.configuration.LocalFileSecurityModuleCLIOptions;\n+\n+import java.io.File;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LocalFileSecurityModulePlugin implements BesuPlugin {\n+  public static final String PICOCLI_NAMESPACE = \"localfile-security-module\";\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+  static final String SECURITY_MODULE_NAME = \"localfile\";\n+  private final boolean isDocker = Boolean.getBoolean(\"besu.docker\");\n+  private final LocalFileSecurityModuleCLIOptions cliOptions =\n+      new LocalFileSecurityModuleCLIOptions();\n+\n+  @Override\n+  public void register(final BesuContext context) {\n+    LOG.debug(\"Registering plugin\");\n+    registerCliOptions(context);\n+    registerSecurityModule(context);\n+  }\n+\n+  private void registerCliOptions(final BesuContext context) {\n+    if (!isFullInstantiation()) {\n+      return; // don't register cli options in docker mode\n+    }\n+\n+    final PicoCLIOptions picoCLIOptions =\n+        context\n+            .getService(PicoCLIOptions.class)\n+            .orElseThrow(\n+                () ->\n+                    new IllegalStateException(\n+                        \"Expecting a PicoCLIOptions service to register CLI options with, but none found.\"));\n+\n+    picoCLIOptions.addPicoCLIOptions(PICOCLI_NAMESPACE, cliOptions);\n+  }\n+\n+  private void registerSecurityModule(final BesuContext context) {\n+    context\n+        .getService(SecurityModuleService.class)\n+        .orElseThrow(\n+            () ->\n+                new RuntimeException(\n+                    \"Security Module Service Not available, cannot register Service Module: \"\n+                        + SECURITY_MODULE_NAME))\n+        .registerSecurityModule(SECURITY_MODULE_NAME, this::createFileBasedKeyPairSecurityModule);\n+  }\n+\n+  private SecurityModule createFileBasedKeyPairSecurityModule(\n+      final BesuConfiguration besuConfiguration) {\n+    final File privateKeyFile = nodePrivateKeyFile(besuConfiguration);\n+    final SECP256K1.KeyPair keyPair = KeyPairUtil.loadKeyPair(privateKeyFile);\n+    return new KeyPairSecurityModule(keyPair);\n+  }\n+\n+  private File nodePrivateKeyFile(final BesuConfiguration besuConfiguration) {\n+    final File nodePrivateKeyFile = isFullInstantiation() ? cliOptions.getPrivateKeyFile() : null;\n+\n+    return nodePrivateKeyFile != null\n+        ? nodePrivateKeyFile\n+        : KeyPairUtil.getDefaultKeyFile(besuConfiguration.getDataPath());\n+  }\n+\n+  private boolean isFullInstantiation() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA1OTM5MQ=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzU2NDk4OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzoyOTowM1rOGIBrKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNToyNjozN1rOGIDqUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA2OTIyNw==", "bodyText": "You can call this just nodeKey as the Supplier prefix can be inferred from the type.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411069227", "createdAt": "2020-04-20T03:29:03Z", "author": {"login": "CjHare"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -62,25 +63,20 @@\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n-  private final KeyLoader keyLoader;\n+  private final Supplier<NodeKey> nodeKeySupplier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMTc3OA==", "bodyText": "\ud83d\udc4d suggestion applied.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411101778", "createdAt": "2020-04-20T05:26:37Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -62,25 +63,20 @@\n   private CommandSpec spec; // Picocli injects reference to command spec\n \n   private final PrintStream out;\n-  private final KeyLoader keyLoader;\n+  private final Supplier<NodeKey> nodeKeySupplier;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA2OTIyNw=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzU2ODQ1OnYy", "diffSide": "LEFT", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzozMDo1NlrOGIBs6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNToyNTo0MlrOGIDpEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA2OTY3Mg==", "bodyText": "Was this change because NPE were being encountered?", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411069672", "createdAt": "2020-04-20T03:30:56Z", "author": {"login": "CjHare"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -113,22 +109,23 @@ public void run() {\n       checkNotNull(parentCommand);\n       checkNotNull(parentCommand.parentCommand);\n \n-      parentCommand.getKeyPair().ifPresent(this::outputPublicKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwMTQ1OQ==", "bodyText": "you mean not using getKeyPair anymore? or the usage of Optional.ofNullable?", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411101459", "createdAt": "2020-04-20T05:25:42Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/PublicKeySubCommand.java", "diffHunk": "@@ -113,22 +109,23 @@ public void run() {\n       checkNotNull(parentCommand);\n       checkNotNull(parentCommand.parentCommand);\n \n-      parentCommand.getKeyPair().ifPresent(this::outputPublicKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA2OTY3Mg=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzU3MzYyOnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzozMzoyMVrOGIBvjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTozNzo0NlrOGID4Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MDM0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This service allows plugins to register Security Module which is abstraction of cryptographic\n          \n          \n            \n             * This service allows plugins to register a Security Module, which is abstraction of cryptographic", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411070348", "createdAt": "2020-04-20T03:33:21Z", "author": {"login": "CjHare"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwNTI5OA==", "bodyText": "applied.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411105298", "createdAt": "2020-04-20T05:37:46Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MDM0OA=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzU3NTIwOnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzozMzo1NFrOGIBwQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNTozNzo1NVrOGID4Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MDUyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * operations by deferring to specific provider such as BouncyCastle\n          \n          \n            \n             * operations that defer to specific provider (e.g. BouncyCastle).", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411070529", "createdAt": "2020-04-20T03:33:54Z", "author": {"login": "CjHare"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEwNTMzOQ==", "bodyText": "applied", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411105339", "createdAt": "2020-04-20T05:37:55Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MDUyOQ=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzU3OTk5OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzozNjoyOFrOGIByvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzozNjoyOFrOGIByvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MTE2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Registers a factory as available for creating SecurityProvider instances.\n          \n          \n            \n               * Registers a provider of security modules.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411071164", "createdAt": "2020-04-20T03:36:28Z", "author": {"login": "CjHare"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register Security Module which is abstraction of cryptographic\n+ * operations by deferring to specific provider such as BouncyCastle\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  /**\n+   * Registers a factory as available for creating SecurityProvider instances.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzU5OTUzOnYy", "diffSide": "RIGHT", "path": "settings.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMzo0NjoxNVrOGIB8uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzowNzo1M1rOGIGMoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MzcyMw==", "bodyText": "Is there a reason to break alphabetical ordering?\n('plugins:localfile-securitymodule' would be above 'plugins:rocksdb')", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411073723", "createdAt": "2020-04-20T03:46:15Z", "author": {"login": "CjHare"}, "path": "settings.gradle", "diffHunk": "@@ -42,6 +42,7 @@ include 'nat'\n include 'besu'\n include 'plugin-api'\n include 'plugins:rocksdb'\n+include 'plugins:localfile-securitymodule'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE0MzMyOA==", "bodyText": "oversight, fixed.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r411143328", "createdAt": "2020-04-20T07:07:53Z", "author": {"login": "usmansaleem"}, "path": "settings.gradle", "diffHunk": "@@ -42,6 +42,7 @@ include 'nat'\n include 'besu'\n include 'plugin-api'\n include 'plugins:rocksdb'\n+include 'plugins:localfile-securitymodule'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTA3MzcyMw=="}, "originalCommit": {"oid": "25af953f801e5599c274add403d862d655f654e8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MDYxODcyOnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODowOToxOFrOGKcZDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzoyOTo0MVrOGL9-6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDEwOQ==", "bodyText": "There should no be any docker specific behaviour", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r413604109", "createdAt": "2020-04-23T08:09:18Z", "author": {"login": "NicolasMassart"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {\n+    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n+      // directly load KeyPairSecurityModule\n+      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n     }\n \n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(dataDir());\n+    return securityModuleService\n+        .getByName(securityModuleProviderName)\n+        .orElseThrow(\n+            () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n+        .create(pluginCommonConfiguration);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    final Optional<File> nodePrivateKeyFile =\n+        isDocker ? Optional.empty() : Optional.ofNullable(standaloneCommands.nodePrivateKeyFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6283c0caf360d5421f08d469ef8a0518c59fbbb5"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNzQwNg==", "bodyText": "This whole file is using docker specific behavior using org/hyperledger/besu/cli/BesuCommand.java:2103\n  private boolean isFullInstantiation() {\n    return !isDocker;\n  }", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r413607406", "createdAt": "2020-04-23T08:14:07Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {\n+    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n+      // directly load KeyPairSecurityModule\n+      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n     }\n \n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(dataDir());\n+    return securityModuleService\n+        .getByName(securityModuleProviderName)\n+        .orElseThrow(\n+            () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n+        .create(pluginCommonConfiguration);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    final Optional<File> nodePrivateKeyFile =\n+        isDocker ? Optional.empty() : Optional.ofNullable(standaloneCommands.nodePrivateKeyFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDEwOQ=="}, "originalCommit": {"oid": "6283c0caf360d5421f08d469ef8a0518c59fbbb5"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0MzMxMw==", "bodyText": "It's garbage code to be deleted. We don't provide the parameter in the docker image since 29c3c14#diff-ebacf6f6ae4ee68078bb16454b23247dL19 so this part of the code is dead since July 2019. It was discussed about removing it but it was not a priority. Now, if it's confusing, it should be a priority IMO.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414443313", "createdAt": "2020-04-24T09:46:02Z", "author": {"login": "NicolasMassart"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {\n+    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n+      // directly load KeyPairSecurityModule\n+      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n     }\n \n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(dataDir());\n+    return securityModuleService\n+        .getByName(securityModuleProviderName)\n+        .orElseThrow(\n+            () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n+        .create(pluginCommonConfiguration);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    final Optional<File> nodePrivateKeyFile =\n+        isDocker ? Optional.empty() : Optional.ofNullable(standaloneCommands.nodePrivateKeyFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDEwOQ=="}, "originalCommit": {"oid": "6283c0caf360d5421f08d469ef8a0518c59fbbb5"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk2NjU2Mw==", "bodyText": "\ud83d\udc4d I have created #785 and will clean it out in a separate PR.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414966563", "createdAt": "2020-04-25T03:31:49Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {\n+    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n+      // directly load KeyPairSecurityModule\n+      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n     }\n \n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(dataDir());\n+    return securityModuleService\n+        .getByName(securityModuleProviderName)\n+        .orElseThrow(\n+            () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n+        .create(pluginCommonConfiguration);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    final Optional<File> nodePrivateKeyFile =\n+        isDocker ? Optional.empty() : Optional.ofNullable(standaloneCommands.nodePrivateKeyFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDEwOQ=="}, "originalCommit": {"oid": "6283c0caf360d5421f08d469ef8a0518c59fbbb5"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzA0OA==", "bodyText": "\ud83d\udc4d Its a shame the docker code wasn't cleaned out before now - but the removal shouldn't be part of this work.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415203048", "createdAt": "2020-04-26T03:29:41Z", "author": {"login": "rain-on"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {\n+    if (DEFAULT_SECURITY_MODULE_PROVIDER.equals(securityModuleProviderName)) {\n+      // directly load KeyPairSecurityModule\n+      return new KeyPairSecurityModule(KeyPairUtil.loadKeyPair(nodePrivateKeyFile()));\n     }\n \n-    return nodePrivateKeyFile != null\n-        ? nodePrivateKeyFile\n-        : KeyPairUtil.getDefaultKeyFile(dataDir());\n+    return securityModuleService\n+        .getByName(securityModuleProviderName)\n+        .orElseThrow(\n+            () -> new RuntimeException(\"Security Module not found: \" + securityModuleProviderName))\n+        .create(pluginCommonConfiguration);\n+  }\n+\n+  private File nodePrivateKeyFile() {\n+    final Optional<File> nodePrivateKeyFile =\n+        isDocker ? Optional.empty() : Optional.ofNullable(standaloneCommands.nodePrivateKeyFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwNDEwOQ=="}, "originalCommit": {"oid": "6283c0caf360d5421f08d469ef8a0518c59fbbb5"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTI0ODQxOnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxMzo0NFrOGLGxPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0NjoyNVrOGLHeKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5ODQyOA==", "bodyText": "Can you add an error message as well", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414298428", "createdAt": "2020-04-24T05:13:44Z", "author": {"login": "jframe"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import static org.hyperledger.besu.crypto.ECPointUtil.fromBouncyCastleECPoint;\n+\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleException;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.Signature;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Implementation of SecurityModule wrapping SECP256K1.KeyPair and performing cryptographic\n+ * operations via SECP256K1 class\n+ */\n+public class KeyPairSecurityModule implements SecurityModule {\n+  private final SECP256K1.KeyPair keyPair;\n+  private final PublicKey publicKey;\n+\n+  public KeyPairSecurityModule(final SECP256K1.KeyPair keyPair) {\n+    this.keyPair = keyPair;\n+    try {\n+      this.publicKey =\n+          new PublicKeyImpl(fromBouncyCastleECPoint(keyPair.getPublicKey().asEcPoint()));\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);\n+    }\n+  }\n+\n+  @Override\n+  public Signature sign(final Bytes32 dataHash) throws SecurityModuleException {\n+    try {\n+      final SECP256K1.Signature signature = SECP256K1.sign(dataHash, keyPair);\n+      return new SignatureImpl(signature);\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwOTkyOA==", "bodyText": "Updated with error message.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414309928", "createdAt": "2020-04-24T05:46:25Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import static org.hyperledger.besu.crypto.ECPointUtil.fromBouncyCastleECPoint;\n+\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleException;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.Signature;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Implementation of SecurityModule wrapping SECP256K1.KeyPair and performing cryptographic\n+ * operations via SECP256K1 class\n+ */\n+public class KeyPairSecurityModule implements SecurityModule {\n+  private final SECP256K1.KeyPair keyPair;\n+  private final PublicKey publicKey;\n+\n+  public KeyPairSecurityModule(final SECP256K1.KeyPair keyPair) {\n+    this.keyPair = keyPair;\n+    try {\n+      this.publicKey =\n+          new PublicKeyImpl(fromBouncyCastleECPoint(keyPair.getPublicKey().asEcPoint()));\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);\n+    }\n+  }\n+\n+  @Override\n+  public Signature sign(final Bytes32 dataHash) throws SecurityModuleException {\n+    try {\n+      final SECP256K1.Signature signature = SECP256K1.sign(dataHash, keyPair);\n+      return new SignatureImpl(signature);\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5ODQyOA=="}, "originalCommit": {"oid": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTI0ODU5OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToxMzo0OFrOGLGxWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNTo0NjozNFrOGLHeZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5ODQ1Ng==", "bodyText": "Can you add an error message as well", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414298456", "createdAt": "2020-04-24T05:13:48Z", "author": {"login": "jframe"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import static org.hyperledger.besu.crypto.ECPointUtil.fromBouncyCastleECPoint;\n+\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleException;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.Signature;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Implementation of SecurityModule wrapping SECP256K1.KeyPair and performing cryptographic\n+ * operations via SECP256K1 class\n+ */\n+public class KeyPairSecurityModule implements SecurityModule {\n+  private final SECP256K1.KeyPair keyPair;\n+  private final PublicKey publicKey;\n+\n+  public KeyPairSecurityModule(final SECP256K1.KeyPair keyPair) {\n+    this.keyPair = keyPair;\n+    try {\n+      this.publicKey =\n+          new PublicKeyImpl(fromBouncyCastleECPoint(keyPair.getPublicKey().asEcPoint()));\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);\n+    }\n+  }\n+\n+  @Override\n+  public Signature sign(final Bytes32 dataHash) throws SecurityModuleException {\n+    try {\n+      final SECP256K1.Signature signature = SECP256K1.sign(dataHash, keyPair);\n+      return new SignatureImpl(signature);\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);\n+    }\n+  }\n+\n+  @Override\n+  public PublicKey getPublicKey() throws SecurityModuleException {\n+    return publicKey;\n+  }\n+\n+  @Override\n+  public Bytes32 calculateECDHKeyAgreement(final PublicKey partyKey)\n+      throws SecurityModuleException {\n+    try {\n+      final Bytes encodedECPoint = ECPointUtil.getEncodedBytes(partyKey.getW());\n+      final SECP256K1.PublicKey secp256KPartyKey = SECP256K1.PublicKey.create(encodedECPoint);\n+      return SECP256K1.calculateECDHKeyAgreement(keyPair.getPrivateKey(), secp256KPartyKey);\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwOTk4OA==", "bodyText": "Updated with error message.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414309988", "createdAt": "2020-04-24T05:46:34Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import static org.hyperledger.besu.crypto.ECPointUtil.fromBouncyCastleECPoint;\n+\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleException;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.Signature;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Implementation of SecurityModule wrapping SECP256K1.KeyPair and performing cryptographic\n+ * operations via SECP256K1 class\n+ */\n+public class KeyPairSecurityModule implements SecurityModule {\n+  private final SECP256K1.KeyPair keyPair;\n+  private final PublicKey publicKey;\n+\n+  public KeyPairSecurityModule(final SECP256K1.KeyPair keyPair) {\n+    this.keyPair = keyPair;\n+    try {\n+      this.publicKey =\n+          new PublicKeyImpl(fromBouncyCastleECPoint(keyPair.getPublicKey().asEcPoint()));\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);\n+    }\n+  }\n+\n+  @Override\n+  public Signature sign(final Bytes32 dataHash) throws SecurityModuleException {\n+    try {\n+      final SECP256K1.Signature signature = SECP256K1.sign(dataHash, keyPair);\n+      return new SignatureImpl(signature);\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);\n+    }\n+  }\n+\n+  @Override\n+  public PublicKey getPublicKey() throws SecurityModuleException {\n+    return publicKey;\n+  }\n+\n+  @Override\n+  public Bytes32 calculateECDHKeyAgreement(final PublicKey partyKey)\n+      throws SecurityModuleException {\n+    try {\n+      final Bytes encodedECPoint = ECPointUtil.getEncodedBytes(partyKey.getW());\n+      final SECP256K1.PublicKey secp256KPartyKey = SECP256K1.PublicKey.create(encodedECPoint);\n+      return SECP256K1.calculateECDHKeyAgreement(keyPair.getPrivateKey(), secp256KPartyKey);\n+    } catch (final Exception e) {\n+      throw new SecurityModuleException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5ODQ1Ng=="}, "originalCommit": {"oid": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTI2MzY1OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNToyMDowM1rOGLG5jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNjoyMDoxNVrOGLISww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwMDU1Nw==", "bodyText": "I think this function can be replaced with BigIntegers.asUnsignedByteArray(32, value);", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414300557", "createdAt": "2020-04-24T05:20:03Z", "author": {"login": "jframe"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+import java.util.Arrays;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.bouncycastle.math.ec.ECFieldElement;\n+\n+/** Helper class for ECPoint */\n+public class ECPointUtil {\n+  public static ECPoint fromBouncyCastleECPoint(\n+      final org.bouncycastle.math.ec.ECPoint bouncyCastleECPoint) {\n+    final ECFieldElement xCoord = bouncyCastleECPoint.getAffineXCoord();\n+    final ECFieldElement yCoord = bouncyCastleECPoint.getAffineYCoord();\n+\n+    final Bytes32 xEncoded = Bytes32.wrap(xCoord.getEncoded());\n+    final Bytes32 yEncoded = Bytes32.wrap(yCoord.getEncoded());\n+\n+    final BigInteger x = xEncoded.toUnsignedBigInteger();\n+    final BigInteger y = yEncoded.toUnsignedBigInteger();\n+\n+    return new ECPoint(x, y);\n+  }\n+\n+  public static Bytes getEncodedBytes(final ECPoint ecPoint) {\n+    final Bytes xBytes = Bytes32.wrap(toUnsignedByteArray(ecPoint.getAffineX()));\n+    final Bytes yBytes = Bytes32.wrap(toUnsignedByteArray(ecPoint.getAffineY()));\n+\n+    return Bytes.concatenate(xBytes, yBytes);\n+  }\n+\n+  /**\n+   * Adjust unsigned big integer from ECPoint. If it is less than 32, pad left 0. If it is 33, strip\n+   * 0.\n+   *\n+   * @param value BigInteger whose byte[] to adjust\n+   * @return byte[] 32 bit array after adjusting sign bit\n+   * @throws IllegalArgumentException if invalid array size encountered\n+   */\n+  @VisibleForTesting\n+  static byte[] toUnsignedByteArray(final BigInteger value) {\n+    final byte[] bytes = value.toByteArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMxMTM2OA==", "bodyText": "It does indeed.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414311368", "createdAt": "2020-04-24T05:50:23Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+import java.util.Arrays;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.bouncycastle.math.ec.ECFieldElement;\n+\n+/** Helper class for ECPoint */\n+public class ECPointUtil {\n+  public static ECPoint fromBouncyCastleECPoint(\n+      final org.bouncycastle.math.ec.ECPoint bouncyCastleECPoint) {\n+    final ECFieldElement xCoord = bouncyCastleECPoint.getAffineXCoord();\n+    final ECFieldElement yCoord = bouncyCastleECPoint.getAffineYCoord();\n+\n+    final Bytes32 xEncoded = Bytes32.wrap(xCoord.getEncoded());\n+    final Bytes32 yEncoded = Bytes32.wrap(yCoord.getEncoded());\n+\n+    final BigInteger x = xEncoded.toUnsignedBigInteger();\n+    final BigInteger y = yEncoded.toUnsignedBigInteger();\n+\n+    return new ECPoint(x, y);\n+  }\n+\n+  public static Bytes getEncodedBytes(final ECPoint ecPoint) {\n+    final Bytes xBytes = Bytes32.wrap(toUnsignedByteArray(ecPoint.getAffineX()));\n+    final Bytes yBytes = Bytes32.wrap(toUnsignedByteArray(ecPoint.getAffineY()));\n+\n+    return Bytes.concatenate(xBytes, yBytes);\n+  }\n+\n+  /**\n+   * Adjust unsigned big integer from ECPoint. If it is less than 32, pad left 0. If it is 33, strip\n+   * 0.\n+   *\n+   * @param value BigInteger whose byte[] to adjust\n+   * @return byte[] 32 bit array after adjusting sign bit\n+   * @throws IllegalArgumentException if invalid array size encountered\n+   */\n+  @VisibleForTesting\n+  static byte[] toUnsignedByteArray(final BigInteger value) {\n+    final byte[] bytes = value.toByteArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwMDU1Nw=="}, "originalCommit": {"oid": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyMzM5NQ==", "bodyText": "Thanks, i wasn't sure earlier that BC's asUnsignedByteArray would work as expected, but it does work as expected, updated the test cases to cover multiple scenarios and removed the method from ECPointUtil.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r414323395", "createdAt": "2020-04-24T06:20:15Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+import java.util.Arrays;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.bouncycastle.math.ec.ECFieldElement;\n+\n+/** Helper class for ECPoint */\n+public class ECPointUtil {\n+  public static ECPoint fromBouncyCastleECPoint(\n+      final org.bouncycastle.math.ec.ECPoint bouncyCastleECPoint) {\n+    final ECFieldElement xCoord = bouncyCastleECPoint.getAffineXCoord();\n+    final ECFieldElement yCoord = bouncyCastleECPoint.getAffineYCoord();\n+\n+    final Bytes32 xEncoded = Bytes32.wrap(xCoord.getEncoded());\n+    final Bytes32 yEncoded = Bytes32.wrap(yCoord.getEncoded());\n+\n+    final BigInteger x = xEncoded.toUnsignedBigInteger();\n+    final BigInteger y = yEncoded.toUnsignedBigInteger();\n+\n+    return new ECPoint(x, y);\n+  }\n+\n+  public static Bytes getEncodedBytes(final ECPoint ecPoint) {\n+    final Bytes xBytes = Bytes32.wrap(toUnsignedByteArray(ecPoint.getAffineX()));\n+    final Bytes yBytes = Bytes32.wrap(toUnsignedByteArray(ecPoint.getAffineY()));\n+\n+    return Bytes.concatenate(xBytes, yBytes);\n+  }\n+\n+  /**\n+   * Adjust unsigned big integer from ECPoint. If it is less than 32, pad left 0. If it is 33, strip\n+   * 0.\n+   *\n+   * @param value BigInteger whose byte[] to adjust\n+   * @return byte[] 32 bit array after adjusting sign bit\n+   * @throws IllegalArgumentException if invalid array size encountered\n+   */\n+  @VisibleForTesting\n+  static byte[] toUnsignedByteArray(final BigInteger value) {\n+    final byte[] bytes = value.toByteArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMwMDU1Nw=="}, "originalCommit": {"oid": "5dee1abe35bd70ab5c9395a7d00e78f5ffa3be77"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTk2NzU2OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzozMjo0MVrOGL-Aqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTozMjoyMFrOGMRcdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzQ5OA==", "bodyText": "Maybe this is just a different (rather than better) way of tackling t his, but in my head there is no default security module (Rather than the default containing data), thus:\n\n--security-module is an optional field, if not set, then we fallback to the KeyPair\nif the --security-module doesn't reference an available securitymodule, we exit out with a failure.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415203498", "createdAt": "2020-04-26T03:32:41Z", "author": {"login": "rain-on"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIyOTEzNA==", "bodyText": "Having said that - should the user be allowed to write \"--security-module=localfile\"? (I Honestly don't know)", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415229134", "createdAt": "2020-04-26T06:20:36Z", "author": {"login": "rain-on"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzQ5OA=="}, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMDE2MQ==", "bodyText": "Its optional field. If user specifies it on cli (or config file) with value other than localhost, we attempt to load SecurityModule via plugin. If plugin loading fails, we exit.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415430161", "createdAt": "2020-04-26T23:46:53Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzQ5OA=="}, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMDIwMg==", "bodyText": "It allows us to keep the usage of SecurityModule constant.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415430202", "createdAt": "2020-04-26T23:47:11Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzQ5OA=="}, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyMTkxMQ==", "bodyText": "Introduced registering KeyValueSecurityModule with SecurityModuleService.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415521911", "createdAt": "2020-04-27T05:32:20Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -1970,15 +1984,28 @@ private Path pluginsDir() {\n     }\n   }\n \n-  public File nodePrivateKeyFile() {\n-    File nodePrivateKeyFile = null;\n-    if (isFullInstantiation()) {\n-      nodePrivateKeyFile = standaloneCommands.nodePrivateKeyFile;\n+  @VisibleForTesting\n+  NodeKey buildNodeKey() {\n+    return new NodeKey(securityModuleProvider());\n+  }\n+\n+  private SecurityModule securityModuleProvider() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzQ5OA=="}, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjIxMDA3OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNjoyNToyNFrOGL_n7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNTozMTozMlrOGMRbgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIyOTkzMw==", "bodyText": "comment is superfluous", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415229933", "createdAt": "2020-04-26T06:25:24Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.bouncycastle.math.ec.ECFieldElement;\n+import org.bouncycastle.util.BigIntegers;\n+\n+/** Helper class for ECPoint */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyMTY2Ng==", "bodyText": "javadoc removed.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415521666", "createdAt": "2020-04-27T05:31:32Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/ECPointUtil.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.bouncycastle.math.ec.ECFieldElement;\n+import org.bouncycastle.util.BigIntegers;\n+\n+/** Helper class for ECPoint */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIyOTkzMw=="}, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjIxMjkzOnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNjoyNzoxOFrOGL_pJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQyMzo1NDozMlrOGML7tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDI0Ng==", "bodyText": "nit: given there's crypto operations happening here, do we want to move this to a static creator? which passes in a privkey and a PublicKey?", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415230246", "createdAt": "2020-04-26T06:27:18Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import static org.hyperledger.besu.crypto.ECPointUtil.fromBouncyCastleECPoint;\n+\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleException;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.Signature;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Implementation of SecurityModule wrapping SECP256K1.KeyPair and performing cryptographic\n+ * operations via SECP256K1 class\n+ */\n+public class KeyPairSecurityModule implements SecurityModule {\n+  private final SECP256K1.KeyPair keyPair;\n+  private final PublicKey publicKey;\n+\n+  public KeyPairSecurityModule(final SECP256K1.KeyPair keyPair) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMTYwNQ==", "bodyText": "we only require SECP256K1.KeyPair. The PublicKey is the interface (with ECPoint) that is meant to be converted from SECP256K1's PublicKey. The other option would be to initialize public key on the first access via getPublicKey. I don't feel the need of creator factory method.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415431605", "createdAt": "2020-04-26T23:54:32Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/KeyPairSecurityModule.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import static org.hyperledger.besu.crypto.ECPointUtil.fromBouncyCastleECPoint;\n+\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModule;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleException;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.PublicKey;\n+import org.hyperledger.besu.plugin.services.securitymodule.data.Signature;\n+\n+import java.math.BigInteger;\n+import java.security.spec.ECPoint;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Implementation of SecurityModule wrapping SECP256K1.KeyPair and performing cryptographic\n+ * operations via SECP256K1 class\n+ */\n+public class KeyPairSecurityModule implements SecurityModule {\n+  private final SECP256K1.KeyPair keyPair;\n+  private final PublicKey publicKey;\n+\n+  public KeyPairSecurityModule(final SECP256K1.KeyPair keyPair) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDI0Ng=="}, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjIxNjIzOnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNjoyOToyM1rOGL_qoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyODoxNVrOGMRW6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDYyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param name The name to identify the Security Provider Supplier Function\n          \n          \n            \n               * @param name The name to identify the Security Provider Supplier", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415230625", "createdAt": "2020-04-26T06:29:23Z", "author": {"login": "rain-on"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  /**\n+   * Registers a provider of security modules.\n+   *\n+   * @param name The name to identify the Security Provider Supplier Function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyMDQ4OQ==", "bodyText": "javadoc updated.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415520489", "createdAt": "2020-04-27T05:28:15Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  /**\n+   * Registers a provider of security modules.\n+   *\n+   * @param name The name to identify the Security Provider Supplier Function", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDYyNQ=="}, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjIxNzc1OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNjozMDowNFrOGL_rRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyODowM1rOGMRWmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDc4OQ==", "bodyText": "no need for final on interfaces", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415230789", "createdAt": "2020-04-26T06:30:04Z", "author": {"login": "rain-on"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  /**\n+   * Registers a provider of security modules.\n+   *\n+   * @param name The name to identify the Security Provider Supplier Function\n+   * @param securityModuleProvider Register reference of SecurityModuleProvider.\n+   */\n+  void registerSecurityModule(\n+      final String name, final SecurityModuleProvider securityModuleProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUyMDQxMA==", "bodyText": "final removed.", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415520410", "createdAt": "2020-04-27T05:28:03Z", "author": {"login": "usmansaleem"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/SecurityModuleService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.plugin.services;\n+\n+import org.hyperledger.besu.plugin.Unstable;\n+import org.hyperledger.besu.plugin.services.securitymodule.SecurityModuleProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * This service allows plugins to register a Security Module, which is abstraction of cryptographic\n+ * operations that defer to specific provider (e.g. BouncyCastle).\n+ */\n+@Unstable\n+public interface SecurityModuleService {\n+\n+  /**\n+   * Registers a provider of security modules.\n+   *\n+   * @param name The name to identify the Security Provider Supplier Function\n+   * @param securityModuleProvider Register reference of SecurityModuleProvider.\n+   */\n+  void registerSecurityModule(\n+      final String name, final SecurityModuleProvider securityModuleProvider);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMDc4OQ=="}, "originalCommit": {"oid": "3f6297314a699441b19a65a2aece1310d73808a7"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDMzNzc5OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzowNzo0NlrOGMO1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNToyNTozN1rOGMRTbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTA4Mw==", "bodyText": "Could this just be --security-module?", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415479083", "createdAt": "2020-04-27T03:07:46Z", "author": {"login": "jframe"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -815,6 +816,14 @@ void setBannedNodeIds(final List<String> values) {\n       arity = \"1\")\n   private String keyValueStorageName = DEFAULT_KEY_VALUE_STORAGE_NAME;\n \n+  @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"})\n+  @Option(\n+      names = {\"--security-module-provider\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6322e08bc1f71bdf7ff8d05ccecd3b96529a4eb7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTUxOTU5OA==", "bodyText": "renamed to --security-module", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415519598", "createdAt": "2020-04-27T05:25:37Z", "author": {"login": "usmansaleem"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -815,6 +816,14 @@ void setBannedNodeIds(final List<String> values) {\n       arity = \"1\")\n   private String keyValueStorageName = DEFAULT_KEY_VALUE_STORAGE_NAME;\n \n+  @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"})\n+  @Option(\n+      names = {\"--security-module-provider\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTA4Mw=="}, "originalCommit": {"oid": "6322e08bc1f71bdf7ff8d05ccecd3b96529a4eb7"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDMzOTE5OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzowODoxNFrOGMO11A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzowODoxNFrOGMO11A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3OTI1Mg==", "bodyText": "Similarly here think we can drop provider from the description", "url": "https://github.com/hyperledger/besu/pull/713#discussion_r415479252", "createdAt": "2020-04-27T03:08:14Z", "author": {"login": "jframe"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/BesuCommand.java", "diffHunk": "@@ -815,6 +816,14 @@ void setBannedNodeIds(final List<String> values) {\n       arity = \"1\")\n   private String keyValueStorageName = DEFAULT_KEY_VALUE_STORAGE_NAME;\n \n+  @SuppressWarnings({\"FieldCanBeFinal\", \"FieldMayBeFinal\"})\n+  @Option(\n+      names = {\"--security-module-provider\"},\n+      paramLabel = \"<PROVIDER-NAME>\",\n+      description = \"Identity for the Security Module provider to be used.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6322e08bc1f71bdf7ff8d05ccecd3b96529a4eb7"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1059, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}