{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0Mzc3MDE4", "number": 858, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzozNToyMFrOD6CJVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTo0Nzo0OFrOD7FsCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc5MTU3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribe.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzozNToyMFrOGRpGqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzowNzo1OFrOGRsxmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MjQyNg==", "bodyText": "Should we also have a branch for an invalid params json rpc error?", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421152426", "createdAt": "2020-05-06T23:35:20Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribe.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.websocket.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.Quantity;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.SubscriptionManager;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.InvalidSubscriptionRequestException;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.PrivateSubscribeRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionRequestMapper;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+public class PrivSubscribe extends AbstractPrivateSubscriptionMethod {\n+\n+  public PrivSubscribe(\n+      final SubscriptionManager subscriptionManager,\n+      final SubscriptionRequestMapper mapper,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(subscriptionManager, mapper, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.PRIV_SUBSCRIBE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    try {\n+      final PrivateSubscribeRequest subscribeRequest =\n+          getMapper().mapPrivateSubscribeRequest(requestContext);\n+\n+      checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n+          requestContext, subscribeRequest.getPrivacyGroupId());\n+\n+      final Long subscriptionId = subscriptionManager().subscribe(subscribeRequest);\n+\n+      return new JsonRpcSuccessResponse(\n+          requestContext.getRequest().getId(), Quantity.create(subscriptionId));\n+    } catch (final InvalidSubscriptionRequestException isEx) {\n+      return new JsonRpcErrorResponse(\n+          requestContext.getRequest().getId(), JsonRpcError.INVALID_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a62546bd4f47f2505f2b885957fee1c8247915"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NDc4MQ==", "bodyText": "Yeah, I thought it was being done in the same way we do for the JsonRpc API (https://github.com/hyperledger/besu/blob/master/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java#L590-L592).\nInstead of adding it to each WebSocket method, I think we should add this to the WebSocketRequestHandler#handle. So it applies for any WebSocket request.", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421164781", "createdAt": "2020-05-07T00:15:11Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribe.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.websocket.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.Quantity;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.SubscriptionManager;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.InvalidSubscriptionRequestException;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.PrivateSubscribeRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionRequestMapper;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+public class PrivSubscribe extends AbstractPrivateSubscriptionMethod {\n+\n+  public PrivSubscribe(\n+      final SubscriptionManager subscriptionManager,\n+      final SubscriptionRequestMapper mapper,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(subscriptionManager, mapper, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.PRIV_SUBSCRIBE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    try {\n+      final PrivateSubscribeRequest subscribeRequest =\n+          getMapper().mapPrivateSubscribeRequest(requestContext);\n+\n+      checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n+          requestContext, subscribeRequest.getPrivacyGroupId());\n+\n+      final Long subscriptionId = subscriptionManager().subscribe(subscribeRequest);\n+\n+      return new JsonRpcSuccessResponse(\n+          requestContext.getRequest().getId(), Quantity.create(subscriptionId));\n+    } catch (final InvalidSubscriptionRequestException isEx) {\n+      return new JsonRpcErrorResponse(\n+          requestContext.getRequest().getId(), JsonRpcError.INVALID_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MjQyNg=="}, "originalCommit": {"oid": "49a62546bd4f47f2505f2b885957fee1c8247915"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxMjU2OA==", "bodyText": "Done! \ud83d\udc4d\nWebSocketRequestHandler now will handle a InvalidJsonRpcParameters exception.", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421212568", "createdAt": "2020-05-07T03:07:58Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribe.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.websocket.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.Quantity;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.SubscriptionManager;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.InvalidSubscriptionRequestException;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.PrivateSubscribeRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionRequestMapper;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+public class PrivSubscribe extends AbstractPrivateSubscriptionMethod {\n+\n+  public PrivSubscribe(\n+      final SubscriptionManager subscriptionManager,\n+      final SubscriptionRequestMapper mapper,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(subscriptionManager, mapper, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.PRIV_SUBSCRIBE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    try {\n+      final PrivateSubscribeRequest subscribeRequest =\n+          getMapper().mapPrivateSubscribeRequest(requestContext);\n+\n+      checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(\n+          requestContext, subscribeRequest.getPrivacyGroupId());\n+\n+      final Long subscriptionId = subscriptionManager().subscribe(subscribeRequest);\n+\n+      return new JsonRpcSuccessResponse(\n+          requestContext.getRequest().getId(), Quantity.create(subscriptionId));\n+    } catch (final InvalidSubscriptionRequestException isEx) {\n+      return new JsonRpcErrorResponse(\n+          requestContext.getRequest().getId(), JsonRpcError.INVALID_REQUEST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MjQyNg=="}, "originalCommit": {"oid": "49a62546bd4f47f2505f2b885957fee1c8247915"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTgyMjM0OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/logs/LogsSubscriptionService.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzo0OTozN1rOGRpYcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMDowMjoxMFrOGRpneQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1Njk3Ng==", "bodyText": "I understand that we might not be able to reach the nirvana of not checking anything on disk for each block added event like we can with the mainnet side but could we at least take advantage of the fact that we already have the logs from the block added event and get the bare minimum from the privacy storage to filter a subset of them?", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421156976", "createdAt": "2020-05-06T23:49:37Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/logs/LogsSubscriptionService.java", "diffHunk": "@@ -46,9 +54,34 @@ public void accept(final LogWithMetadata logWithMetadata) {\n                   && filterParameter.getToBlock().getNumber().orElse(Long.MAX_VALUE) >= blockNumber\n                   && filterParameter.getLogsQuery().matches(logWithMetadata);\n             })\n-        .forEach(\n-            logsSubscription ->\n-                subscriptionManager.sendMessage(\n-                    logsSubscription.getSubscriptionId(), new LogResult(logWithMetadata)));\n+        .forEach(logsSubscription -> sendLogToSubscription(logWithMetadata, logsSubscription));\n+  }\n+\n+  public void checkPrivateLogs(final BlockAddedEvent event) {\n+    privacyQueries.ifPresent(\n+        pq ->\n+            subscriptionManager.subscriptionsOfType(SubscriptionType.LOGS, LogsSubscription.class)\n+                .stream()\n+                .filter(PrivateLogsSubscription.class::isInstance)\n+                .map(PrivateLogsSubscription.class::cast)\n+                .forEach(queryPrivateEventForSubscription(pq, event)));\n+  }\n+\n+  private Consumer<PrivateLogsSubscription> queryPrivateEventForSubscription(\n+      final PrivacyQueries privacyQueries, final BlockAddedEvent event) {\n+    return subscription -> {\n+      final String privacyGroupId = subscription.getPrivacyGroupId();\n+      final LogsQuery logsQuery = subscription.getFilterParameter().getLogsQuery();\n+\n+      privacyQueries\n+          .matchingLogs(privacyGroupId, event.getBlock().getHash(), logsQuery)\n+          .forEach(logWithMetadata -> sendLogToSubscription(logWithMetadata, subscription));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a62546bd4f47f2505f2b885957fee1c8247915"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1OTc4NQ==", "bodyText": "I don't think I understand your suggestion. The logs in the block added event are only logs generated by public contracts. We can't really use them to find private logs.", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421159785", "createdAt": "2020-05-06T23:58:52Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/logs/LogsSubscriptionService.java", "diffHunk": "@@ -46,9 +54,34 @@ public void accept(final LogWithMetadata logWithMetadata) {\n                   && filterParameter.getToBlock().getNumber().orElse(Long.MAX_VALUE) >= blockNumber\n                   && filterParameter.getLogsQuery().matches(logWithMetadata);\n             })\n-        .forEach(\n-            logsSubscription ->\n-                subscriptionManager.sendMessage(\n-                    logsSubscription.getSubscriptionId(), new LogResult(logWithMetadata)));\n+        .forEach(logsSubscription -> sendLogToSubscription(logWithMetadata, logsSubscription));\n+  }\n+\n+  public void checkPrivateLogs(final BlockAddedEvent event) {\n+    privacyQueries.ifPresent(\n+        pq ->\n+            subscriptionManager.subscriptionsOfType(SubscriptionType.LOGS, LogsSubscription.class)\n+                .stream()\n+                .filter(PrivateLogsSubscription.class::isInstance)\n+                .map(PrivateLogsSubscription.class::cast)\n+                .forEach(queryPrivateEventForSubscription(pq, event)));\n+  }\n+\n+  private Consumer<PrivateLogsSubscription> queryPrivateEventForSubscription(\n+      final PrivacyQueries privacyQueries, final BlockAddedEvent event) {\n+    return subscription -> {\n+      final String privacyGroupId = subscription.getPrivacyGroupId();\n+      final LogsQuery logsQuery = subscription.getFilterParameter().getLogsQuery();\n+\n+      privacyQueries\n+          .matchingLogs(privacyGroupId, event.getBlock().getHash(), logsQuery)\n+          .forEach(logWithMetadata -> sendLogToSubscription(logWithMetadata, subscription));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1Njk3Ng=="}, "originalCommit": {"oid": "49a62546bd4f47f2505f2b885957fee1c8247915"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2MDcwOA==", "bodyText": "Ahh, my misunderstanding then.", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421160708", "createdAt": "2020-05-07T00:01:48Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/logs/LogsSubscriptionService.java", "diffHunk": "@@ -46,9 +54,34 @@ public void accept(final LogWithMetadata logWithMetadata) {\n                   && filterParameter.getToBlock().getNumber().orElse(Long.MAX_VALUE) >= blockNumber\n                   && filterParameter.getLogsQuery().matches(logWithMetadata);\n             })\n-        .forEach(\n-            logsSubscription ->\n-                subscriptionManager.sendMessage(\n-                    logsSubscription.getSubscriptionId(), new LogResult(logWithMetadata)));\n+        .forEach(logsSubscription -> sendLogToSubscription(logWithMetadata, logsSubscription));\n+  }\n+\n+  public void checkPrivateLogs(final BlockAddedEvent event) {\n+    privacyQueries.ifPresent(\n+        pq ->\n+            subscriptionManager.subscriptionsOfType(SubscriptionType.LOGS, LogsSubscription.class)\n+                .stream()\n+                .filter(PrivateLogsSubscription.class::isInstance)\n+                .map(PrivateLogsSubscription.class::cast)\n+                .forEach(queryPrivateEventForSubscription(pq, event)));\n+  }\n+\n+  private Consumer<PrivateLogsSubscription> queryPrivateEventForSubscription(\n+      final PrivacyQueries privacyQueries, final BlockAddedEvent event) {\n+    return subscription -> {\n+      final String privacyGroupId = subscription.getPrivacyGroupId();\n+      final LogsQuery logsQuery = subscription.getFilterParameter().getLogsQuery();\n+\n+      privacyQueries\n+          .matchingLogs(privacyGroupId, event.getBlock().getHash(), logsQuery)\n+          .forEach(logWithMetadata -> sendLogToSubscription(logWithMetadata, subscription));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1Njk3Ng=="}, "originalCommit": {"oid": "49a62546bd4f47f2505f2b885957fee1c8247915"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2MDgyNQ==", "bodyText": "Sem problemas! ;)", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421160825", "createdAt": "2020-05-07T00:02:10Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/logs/LogsSubscriptionService.java", "diffHunk": "@@ -46,9 +54,34 @@ public void accept(final LogWithMetadata logWithMetadata) {\n                   && filterParameter.getToBlock().getNumber().orElse(Long.MAX_VALUE) >= blockNumber\n                   && filterParameter.getLogsQuery().matches(logWithMetadata);\n             })\n-        .forEach(\n-            logsSubscription ->\n-                subscriptionManager.sendMessage(\n-                    logsSubscription.getSubscriptionId(), new LogResult(logWithMetadata)));\n+        .forEach(logsSubscription -> sendLogToSubscription(logWithMetadata, logsSubscription));\n+  }\n+\n+  public void checkPrivateLogs(final BlockAddedEvent event) {\n+    privacyQueries.ifPresent(\n+        pq ->\n+            subscriptionManager.subscriptionsOfType(SubscriptionType.LOGS, LogsSubscription.class)\n+                .stream()\n+                .filter(PrivateLogsSubscription.class::isInstance)\n+                .map(PrivateLogsSubscription.class::cast)\n+                .forEach(queryPrivateEventForSubscription(pq, event)));\n+  }\n+\n+  private Consumer<PrivateLogsSubscription> queryPrivateEventForSubscription(\n+      final PrivacyQueries privacyQueries, final BlockAddedEvent event) {\n+    return subscription -> {\n+      final String privacyGroupId = subscription.getPrivacyGroupId();\n+      final LogsQuery logsQuery = subscription.getFilterParameter().getLogsQuery();\n+\n+      privacyQueries\n+          .matchingLogs(privacyGroupId, event.getBlock().getHash(), logsQuery)\n+          .forEach(logWithMetadata -> sendLogToSubscription(logWithMetadata, subscription));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1Njk3Ng=="}, "originalCommit": {"oid": "49a62546bd4f47f2505f2b885957fee1c8247915"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjIyMDM0OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/RunnerBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzoxOTo1M1rOGRs9hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMjoyNToxM1rOGTIG-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNTYyMg==", "bodyText": "could do an if/else or even\nprivacyQueries = privacyParameters.isEnabled() ? x : y;", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421215622", "createdAt": "2020-05-07T03:19:53Z", "author": {"login": "pinges"}, "path": "besu/src/main/java/org/hyperledger/besu/RunnerBuilder.java", "diffHunk": "@@ -698,11 +712,31 @@ private SubscriptionManager createSubscriptionManager(\n   }\n \n   private void createLogsSubscriptionService(\n-      final Blockchain blockchain, final SubscriptionManager subscriptionManager) {\n+      final Blockchain blockchain,\n+      final WorldStateArchive worldStateArchive,\n+      final SubscriptionManager subscriptionManager,\n+      final PrivacyParameters privacyParameters) {\n+\n+    Optional<PrivacyQueries> privacyQueries = Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwODk4NA==", "bodyText": "I think the way that it is implemented makes it more readable. PrivacyQueries start empty and, if privacy is enabled, we set it to the proper object.\nI think in this case the ternary operator will make it less readable.", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r422708984", "createdAt": "2020-05-10T22:25:13Z", "author": {"login": "lucassaldanha"}, "path": "besu/src/main/java/org/hyperledger/besu/RunnerBuilder.java", "diffHunk": "@@ -698,11 +712,31 @@ private SubscriptionManager createSubscriptionManager(\n   }\n \n   private void createLogsSubscriptionService(\n-      final Blockchain blockchain, final SubscriptionManager subscriptionManager) {\n+      final Blockchain blockchain,\n+      final WorldStateArchive worldStateArchive,\n+      final SubscriptionManager subscriptionManager,\n+      final PrivacyParameters privacyParameters) {\n+\n+    Optional<PrivacyQueries> privacyQueries = Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNTYyMg=="}, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjM5NzY5OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/response/JsonRpcError.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMDo1Nzo0MFrOGSVVQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQyMjoyOToxNVrOGTIIqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NzA1OQ==", "bodyText": "Do you think you can come up with a better message? :-)\nIt looks like this is not used anywhere. So maybe just delete the line.", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421877059", "createdAt": "2020-05-08T00:57:40Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/response/JsonRpcError.java", "diffHunk": "@@ -127,6 +127,7 @@\n   PMT_FAILED_INTRINSIC_GAS_EXCEEDS_LIMIT(\n       -50100,\n       \"Private Marker Transaction failed due to intrinsic gas exeeding the limit. Gas limit used from the Private Transaction.\"),\n+  PRIVATE_SUBSCRIPTION_MULTI_TENANCY_ERROR(-50100, \"foo.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjcwOTQxNw==", "bodyText": "Removed it :)", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r422709417", "createdAt": "2020-05-10T22:29:15Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/response/JsonRpcError.java", "diffHunk": "@@ -127,6 +127,7 @@\n   PMT_FAILED_INTRINSIC_GAS_EXCEEDS_LIMIT(\n       -50100,\n       \"Private Marker Transaction failed due to intrinsic gas exeeding the limit. Gas limit used from the Private Transaction.\"),\n+  PRIVATE_SUBSCRIPTION_MULTI_TENANCY_ERROR(-50100, \"foo.\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg3NzA1OQ=="}, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjYwMTU3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivateWebSocketMethodsFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjo1NDowNlrOGSXMmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMjo1NDowNlrOGSXMmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkwNzYwOA==", "bodyText": "We do this in the PrivacyApiGroupJsonRpcMethods as well, but in the PrivJsonRpcMethods we do pass the privacy controller and the enclavePublicKeyProvider into the create() method.\nThis means that we have several instances of the controller and enclavePKP where we would only need one.\nCan we fix that in a nice way?", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421907608", "createdAt": "2020-05-08T02:54:06Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivateWebSocketMethodsFactory.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.websocket.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.LatestNonceProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods.JsonRpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.SubscriptionManager;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionRequestMapper;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.PrivacyParameters;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.privacy.ChainHeadPrivateNonceProvider;\n+import org.hyperledger.besu.ethereum.privacy.DefaultPrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.MultiTenancyPrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateNonceProvider;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransactionSimulator;\n+import org.hyperledger.besu.ethereum.privacy.markertransaction.FixedKeySigningPrivateMarkerTransactionFactory;\n+import org.hyperledger.besu.ethereum.privacy.markertransaction.PrivateMarkerTransactionFactory;\n+import org.hyperledger.besu.ethereum.privacy.markertransaction.RandomSigningPrivateMarkerTransactionFactory;\n+\n+import java.math.BigInteger;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public class PrivateWebSocketMethodsFactory {\n+\n+  private final PrivacyParameters privacyParameters;\n+  private final SubscriptionManager subscriptionManager;\n+  private final ProtocolSchedule<?> protocolSchedule;\n+  private final BlockchainQueries blockchainQueries;\n+  private final TransactionPool transactionPool;\n+\n+  public PrivateWebSocketMethodsFactory(\n+      final PrivacyParameters privacyParameters,\n+      final SubscriptionManager subscriptionManager,\n+      final ProtocolSchedule<?> protocolSchedule,\n+      final BlockchainQueries blockchainQueries,\n+      final TransactionPool transactionPool) {\n+    this.privacyParameters = privacyParameters;\n+    this.subscriptionManager = subscriptionManager;\n+    this.protocolSchedule = protocolSchedule;\n+    this.blockchainQueries = blockchainQueries;\n+    this.transactionPool = transactionPool;\n+  }\n+\n+  public Collection<JsonRpcMethod> methods() {\n+    final SubscriptionRequestMapper subscriptionRequestMapper = new SubscriptionRequestMapper();\n+    final EnclavePublicKeyProvider enclavePublicKeyProvider =\n+        EnclavePublicKeyProvider.build(privacyParameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjg4OTQ2OnYy", "diffSide": "RIGHT", "path": "CHANGELOG.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTo0MToxOFrOGSZw0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTo0MToxOFrOGSZw0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk0OTY0OA==", "bodyText": "I'll move this to 1.4.6 section", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421949648", "createdAt": "2020-05-08T05:41:18Z", "author": {"login": "lucassaldanha"}, "path": "CHANGELOG.md", "diffHunk": "@@ -23,6 +23,7 @@ permissions on the directory allow other users and groups to r/w. Ideally this s\n   [\\#806](https://github.com/hyperledger/besu/pull/806) and [#845](https://github.com/hyperledger/besu/pull/845)\n - Native libraries for secp256k1 and Altbn128 encryption are enabled by default.  To disable these libraries use \n   `--Xsecp256k1-native-enabled=false` and `--Xaltbn128-native-enabled=false`. [\\#775](https://github.com/hyperledger/besu/pull/775)\n+- Implemented WebSocket logs subscription for private contracts (`priv_subscribe`/`priv_unsubscribe`) [#762]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzIyNzE1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/request/SubscriptionRequestMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo1MToxNVrOGSc0-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo1MToxNVrOGSc0-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk5OTg2NA==", "bodyText": "nit: final", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r421999864", "createdAt": "2020-05-08T07:51:15Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/request/SubscriptionRequestMapper.java", "diffHunk": "@@ -83,11 +83,60 @@ public UnsubscribeRequest mapUnsubscribeRequest(final JsonRpcRequestContext json\n       final long subscriptionId =\n           webSocketRpcRequestBody.getRequiredParameter(0, UnsignedLongParameter.class).getValue();\n       return new UnsubscribeRequest(subscriptionId, webSocketRpcRequestBody.getConnectionId());\n+    } catch (final Exception e) {\n+      throw new InvalidSubscriptionRequestException(\"Error parsing unsubscribe request\", e);\n+    }\n+  }\n+\n+  public PrivateSubscribeRequest mapPrivateSubscribeRequest(\n+      final JsonRpcRequestContext jsonRpcRequestContext)\n+      throws InvalidSubscriptionRequestException {\n+    try {\n+      final WebSocketRpcRequest webSocketRpcRequestBody = validateRequest(jsonRpcRequestContext);\n+\n+      final String privacyGroupId = webSocketRpcRequestBody.getRequiredParameter(0, String.class);\n+      final SubscriptionType subscriptionType =\n+          webSocketRpcRequestBody.getRequiredParameter(1, SubscriptionType.class);\n+\n+      switch (subscriptionType) {\n+        case LOGS:\n+          {\n+            final FilterParameter filterParameter =\n+                jsonRpcRequestContext.getRequiredParameter(2, FilterParameter.class);\n+            return new PrivateSubscribeRequest(\n+                SubscriptionType.LOGS,\n+                filterParameter,\n+                null,\n+                webSocketRpcRequestBody.getConnectionId(),\n+                privacyGroupId);\n+          }\n+        default:\n+          throw new InvalidSubscriptionRequestException(\n+              \"Invalid subscribe request. Invalid private subscription type.\");\n+      }\n+    } catch (InvalidSubscriptionRequestException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNzI0NDc1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/response/SubscriptionResponseResult.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo1NzoxMFrOGSc_6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNzo1NzoxMFrOGSc_6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjAwMjY2Ng==", "bodyText": "I hope that nobody relies on the order ...", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r422002666", "createdAt": "2020-05-08T07:57:10Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/response/SubscriptionResponseResult.java", "diffHunk": "@@ -17,17 +17,28 @@\n import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.JsonRpcResult;\n \n import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n \n-@JsonPropertyOrder({\"subscription\", \"result\"})\n+@JsonPropertyOrder({\"subscription\", \"privacyGroupId\", \"result\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjg1NDA1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTo0NjowNVrOGTNTjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwMTozOTozMVrOGTzIsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5NDEyNg==", "bodyText": "nit should it be jsonRpcRequestContext? Please check that in other tests in this file as well!", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r422794126", "createdAt": "2020-05-11T05:46:05Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribeTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.websocket.methods;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.Quantity;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.SubscriptionManager;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.InvalidSubscriptionRequestException;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.PrivateSubscribeRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionRequestMapper;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionType;\n+import org.hyperledger.besu.ethereum.privacy.MultiTenancyValidationException;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+import io.vertx.core.json.Json;\n+import io.vertx.ext.auth.User;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrivSubscribeTest {\n+\n+  private final String ENCLAVE_KEY = \"enclave_key\";\n+  private final String PRIVACY_GROUP_ID = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+  @Mock private SubscriptionManager subscriptionManagerMock;\n+  @Mock private SubscriptionRequestMapper mapperMock;\n+  @Mock private PrivacyController privacyController;\n+  @Mock private EnclavePublicKeyProvider enclavePublicKeyProvider;\n+\n+  private PrivSubscribe privSubscribe;\n+\n+  @Before\n+  public void before() {\n+    privSubscribe =\n+        new PrivSubscribe(\n+            subscriptionManagerMock, mapperMock, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Test\n+  public void expectedMethodName() {\n+    assertThat(privSubscribe.getName()).isEqualTo(\"priv_subscribe\");\n+  }\n+\n+  @Test\n+  public void responseContainsSubscriptionId() {\n+    final WebSocketRpcRequest webSocketRequest = createWebSocketRpcRequest();\n+    final JsonRpcRequestContext jsonRpcrequestContext = new JsonRpcRequestContext(webSocketRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxMzkzNg==", "bodyText": "It is correct. We only have a JsonRpcRequestContext, used for both JsonRpcRequest and WebSocketRpcRequest (subclass of the first one)", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r423413936", "createdAt": "2020-05-12T01:39:31Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribeTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.websocket.methods;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.Quantity;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.SubscriptionManager;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.InvalidSubscriptionRequestException;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.PrivateSubscribeRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionRequestMapper;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionType;\n+import org.hyperledger.besu.ethereum.privacy.MultiTenancyValidationException;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+import io.vertx.core.json.Json;\n+import io.vertx.ext.auth.User;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrivSubscribeTest {\n+\n+  private final String ENCLAVE_KEY = \"enclave_key\";\n+  private final String PRIVACY_GROUP_ID = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+  @Mock private SubscriptionManager subscriptionManagerMock;\n+  @Mock private SubscriptionRequestMapper mapperMock;\n+  @Mock private PrivacyController privacyController;\n+  @Mock private EnclavePublicKeyProvider enclavePublicKeyProvider;\n+\n+  private PrivSubscribe privSubscribe;\n+\n+  @Before\n+  public void before() {\n+    privSubscribe =\n+        new PrivSubscribe(\n+            subscriptionManagerMock, mapperMock, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Test\n+  public void expectedMethodName() {\n+    assertThat(privSubscribe.getName()).isEqualTo(\"priv_subscribe\");\n+  }\n+\n+  @Test\n+  public void responseContainsSubscriptionId() {\n+    final WebSocketRpcRequest webSocketRequest = createWebSocketRpcRequest();\n+    final JsonRpcRequestContext jsonRpcrequestContext = new JsonRpcRequestContext(webSocketRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5NDEyNg=="}, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjg1NzIwOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTo0NzozNFrOGTNVQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTo0NzozNFrOGTNVQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5NDU2Mw==", "bodyText": "s.a.", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r422794563", "createdAt": "2020-05-11T05:47:34Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribeTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.websocket.methods;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.Quantity;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.SubscriptionManager;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.InvalidSubscriptionRequestException;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.PrivateSubscribeRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionRequestMapper;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionType;\n+import org.hyperledger.besu.ethereum.privacy.MultiTenancyValidationException;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+import io.vertx.core.json.Json;\n+import io.vertx.ext.auth.User;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrivSubscribeTest {\n+\n+  private final String ENCLAVE_KEY = \"enclave_key\";\n+  private final String PRIVACY_GROUP_ID = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+  @Mock private SubscriptionManager subscriptionManagerMock;\n+  @Mock private SubscriptionRequestMapper mapperMock;\n+  @Mock private PrivacyController privacyController;\n+  @Mock private EnclavePublicKeyProvider enclavePublicKeyProvider;\n+\n+  private PrivSubscribe privSubscribe;\n+\n+  @Before\n+  public void before() {\n+    privSubscribe =\n+        new PrivSubscribe(\n+            subscriptionManagerMock, mapperMock, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Test\n+  public void expectedMethodName() {\n+    assertThat(privSubscribe.getName()).isEqualTo(\"priv_subscribe\");\n+  }\n+\n+  @Test\n+  public void responseContainsSubscriptionId() {\n+    final WebSocketRpcRequest webSocketRequest = createWebSocketRpcRequest();\n+    final JsonRpcRequestContext jsonRpcrequestContext = new JsonRpcRequestContext(webSocketRequest);\n+\n+    final PrivateSubscribeRequest subscribeRequest =\n+        new PrivateSubscribeRequest(\n+            SubscriptionType.LOGS,\n+            null,\n+            null,\n+            webSocketRequest.getConnectionId(),\n+            PRIVACY_GROUP_ID);\n+\n+    when(mapperMock.mapPrivateSubscribeRequest(eq(jsonRpcrequestContext)))\n+        .thenReturn(subscribeRequest);\n+    when(subscriptionManagerMock.subscribe(eq(subscribeRequest))).thenReturn(1L);\n+\n+    final JsonRpcSuccessResponse expectedResponse =\n+        new JsonRpcSuccessResponse(\n+            jsonRpcrequestContext.getRequest().getId(), Quantity.create((1L)));\n+\n+    assertThat(privSubscribe.response(jsonRpcrequestContext)).isEqualTo(expectedResponse);\n+  }\n+\n+  @Test\n+  public void invalidSubscribeRequestRespondsInvalidRequestResponse() {\n+    final WebSocketRpcRequest webSocketRequest = createWebSocketRpcRequest();\n+    final JsonRpcRequestContext jsonRpcrequestContext = new JsonRpcRequestContext(webSocketRequest);\n+\n+    when(mapperMock.mapPrivateSubscribeRequest(any()))\n+        .thenThrow(new InvalidSubscriptionRequestException());\n+\n+    final JsonRpcErrorResponse expectedResponse =\n+        new JsonRpcErrorResponse(\n+            jsonRpcrequestContext.getRequest().getId(), JsonRpcError.INVALID_REQUEST);\n+\n+    assertThat(privSubscribe.response(jsonRpcrequestContext)).isEqualTo(expectedResponse);\n+  }\n+\n+  @Test\n+  public void multiTenancyCheckFailure() {\n+    final User user = mock(User.class);\n+    final WebSocketRpcRequest webSocketRequest = createWebSocketRpcRequest();\n+    final JsonRpcRequestContext jsonRpcrequestContext =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjg1NzY4OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTo0Nzo0OFrOGTNVkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNTo0Nzo0OFrOGTNVkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc5NDY0Mw==", "bodyText": "s.a.", "url": "https://github.com/hyperledger/besu/pull/858#discussion_r422794643", "createdAt": "2020-05-11T05:47:48Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/methods/PrivSubscribeTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.websocket.methods;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.Quantity;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.SubscriptionManager;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.InvalidSubscriptionRequestException;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.PrivateSubscribeRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionRequestMapper;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.websocket.subscription.request.SubscriptionType;\n+import org.hyperledger.besu.ethereum.privacy.MultiTenancyValidationException;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+import io.vertx.core.json.Json;\n+import io.vertx.ext.auth.User;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrivSubscribeTest {\n+\n+  private final String ENCLAVE_KEY = \"enclave_key\";\n+  private final String PRIVACY_GROUP_ID = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+  @Mock private SubscriptionManager subscriptionManagerMock;\n+  @Mock private SubscriptionRequestMapper mapperMock;\n+  @Mock private PrivacyController privacyController;\n+  @Mock private EnclavePublicKeyProvider enclavePublicKeyProvider;\n+\n+  private PrivSubscribe privSubscribe;\n+\n+  @Before\n+  public void before() {\n+    privSubscribe =\n+        new PrivSubscribe(\n+            subscriptionManagerMock, mapperMock, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Test\n+  public void expectedMethodName() {\n+    assertThat(privSubscribe.getName()).isEqualTo(\"priv_subscribe\");\n+  }\n+\n+  @Test\n+  public void responseContainsSubscriptionId() {\n+    final WebSocketRpcRequest webSocketRequest = createWebSocketRpcRequest();\n+    final JsonRpcRequestContext jsonRpcrequestContext = new JsonRpcRequestContext(webSocketRequest);\n+\n+    final PrivateSubscribeRequest subscribeRequest =\n+        new PrivateSubscribeRequest(\n+            SubscriptionType.LOGS,\n+            null,\n+            null,\n+            webSocketRequest.getConnectionId(),\n+            PRIVACY_GROUP_ID);\n+\n+    when(mapperMock.mapPrivateSubscribeRequest(eq(jsonRpcrequestContext)))\n+        .thenReturn(subscribeRequest);\n+    when(subscriptionManagerMock.subscribe(eq(subscribeRequest))).thenReturn(1L);\n+\n+    final JsonRpcSuccessResponse expectedResponse =\n+        new JsonRpcSuccessResponse(\n+            jsonRpcrequestContext.getRequest().getId(), Quantity.create((1L)));\n+\n+    assertThat(privSubscribe.response(jsonRpcrequestContext)).isEqualTo(expectedResponse);\n+  }\n+\n+  @Test\n+  public void invalidSubscribeRequestRespondsInvalidRequestResponse() {\n+    final WebSocketRpcRequest webSocketRequest = createWebSocketRpcRequest();\n+    final JsonRpcRequestContext jsonRpcrequestContext = new JsonRpcRequestContext(webSocketRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f276aaf14e6f25c26bea3311242e56b380a90760"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 983, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}