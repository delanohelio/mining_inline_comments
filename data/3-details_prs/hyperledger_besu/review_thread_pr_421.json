{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NzMyNTA3", "number": 421, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTozMjo1MVrODhxQtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDoyNjozMlrODrBUEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzM2NjkzOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTozMjo1MVrOFssIQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo1Mzo0NVrOF_hi5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwNDY3Mw==", "bodyText": "Apply the clean code philosophy here, refactor these into private methods with descriptive names, please", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r382404673", "createdAt": "2020-02-21T05:32:51Z", "author": {"login": "CjHare"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -101,5 +115,42 @@ protected AcceptanceTestBase() {\n   @After\n   public void tearDownAcceptanceTestBase() {\n     cluster.close();\n+\n+    String os = System.getProperty(\"os.name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "635e31500095be9d9b59f4f518046a4538359325"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk0MjI3OQ==", "bodyText": "Done.", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r382942279", "createdAt": "2020-02-22T21:18:30Z", "author": {"login": "hmijail"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -101,5 +115,42 @@ protected AcceptanceTestBase() {\n   @After\n   public void tearDownAcceptanceTestBase() {\n     cluster.close();\n+\n+    String os = System.getProperty(\"os.name\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwNDY3Mw=="}, "originalCommit": {"oid": "635e31500095be9d9b59f4f518046a4538359325"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1OTk0MA==", "bodyText": "Done.\n\nMy observation is that the code has yet to change \ud83e\udd14", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r401959940", "createdAt": "2020-04-01T23:03:04Z", "author": {"login": "CjHare"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -101,5 +115,42 @@ protected AcceptanceTestBase() {\n   @After\n   public void tearDownAcceptanceTestBase() {\n     cluster.close();\n+\n+    String os = System.getProperty(\"os.name\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwNDY3Mw=="}, "originalCommit": {"oid": "635e31500095be9d9b59f4f518046a4538359325"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA1NzIwNQ==", "bodyText": "This is weird. In the \"Conversation\" tab of GitHub, this thread shows the code as it was originally, on Feb 20. It ignores the changes I introduced Feb 23 (commit 497c15b)\nMeanwhile, in the \"Files changed\" tab, this thread does show those changes.\nI wonder whether we were looking at the code from different tabs then? Or did you really mean that you wanted even more cleaning?\nAnyway, I have just pushed some more cleaning/refactoring that I did before realizing the GitHub weirdness.", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r402057205", "createdAt": "2020-04-02T05:19:35Z", "author": {"login": "hmijail"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -101,5 +115,42 @@ protected AcceptanceTestBase() {\n   @After\n   public void tearDownAcceptanceTestBase() {\n     cluster.close();\n+\n+    String os = System.getProperty(\"os.name\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwNDY3Mw=="}, "originalCommit": {"oid": "635e31500095be9d9b59f4f518046a4538359325"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA3NTg5OQ==", "bodyText": "Or did you really mean that you wanted even more cleaning?\n\nThat one \ud83d\ude01", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r402075899", "createdAt": "2020-04-02T06:21:26Z", "author": {"login": "CjHare"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -101,5 +115,42 @@ protected AcceptanceTestBase() {\n   @After\n   public void tearDownAcceptanceTestBase() {\n     cluster.close();\n+\n+    String os = System.getProperty(\"os.name\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwNDY3Mw=="}, "originalCommit": {"oid": "635e31500095be9d9b59f4f518046a4538359325"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE1NDIxNA==", "bodyText": "so... done now?", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r402154214", "createdAt": "2020-04-02T08:53:45Z", "author": {"login": "hmijail"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -101,5 +115,42 @@ protected AcceptanceTestBase() {\n   @After\n   public void tearDownAcceptanceTestBase() {\n     cluster.close();\n+\n+    String os = System.getProperty(\"os.name\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQwNDY3Mw=="}, "originalCommit": {"oid": "635e31500095be9d9b59f4f518046a4538359325"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDM2NzAzOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDoyNToyNlrOF7H-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDozMTo0MFrOF8AgCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTExNg==", "bodyText": "Doesn't this Log4j property need setting before the Log4j2 framework get initialised? (isn't it too late by here)", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r397541116", "createdAt": "2020-03-25T00:25:26Z", "author": {"login": "CjHare"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -52,13 +53,18 @@\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.ThreadContext;\n import org.junit.After;\n import org.junit.Rule;\n import org.junit.rules.TestName;\n import org.junit.rules.TestWatcher;\n import org.junit.runner.Description;\n \n public class AcceptanceTestBase {\n+  static {\n+    System.setProperty(\"log4j2.isThreadContextMapInheritable\", \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93b2e803ee497365ff437ce604e75e7abc98b21e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4NjI4Mw==", "bodyText": "Yes, it does, and no, it isn't, since it works ;). The framework is initialized when anything from it is used, and the property is set here earlier than that.\nThough to tell the truth I can't find now anything explicitly sanctioning this way of doing things.\nAnyway, I guess this is fragile in that some code change elsewhere might cause the \"early enough\" assumption to fail. So if preferred this could be set in a log4j2.property file. I just thought that here it's closer to its purpose.", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r397786283", "createdAt": "2020-03-25T11:33:14Z", "author": {"login": "hmijail"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -52,13 +53,18 @@\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.ThreadContext;\n import org.junit.After;\n import org.junit.Rule;\n import org.junit.rules.TestName;\n import org.junit.rules.TestWatcher;\n import org.junit.runner.Description;\n \n public class AcceptanceTestBase {\n+  static {\n+    System.setProperty(\"log4j2.isThreadContextMapInheritable\", \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTExNg=="}, "originalCommit": {"oid": "93b2e803ee497365ff437ce604e75e7abc98b21e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzOTc0MQ==", "bodyText": "Yeah put it a property file somewhere.\nYou'll want to also explicitly set\ndisableThreadContextMap = false\ndisableThreadContext = false\n\nAs if either of those are set to true by environment variables, the code isn't going to work\nhttps://logging.apache.org/log4j/2.x/manual/thread-context.html\n\nSet the system property disableThreadContextMap to true to disable the Thread Context Map.\nSet the system property disableThreadContext to true to disable both the Thread Context Map and Stack.", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r398239741", "createdAt": "2020-03-25T23:52:30Z", "author": {"login": "CjHare"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -52,13 +53,18 @@\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.ThreadContext;\n import org.junit.After;\n import org.junit.Rule;\n import org.junit.rules.TestName;\n import org.junit.rules.TestWatcher;\n import org.junit.runner.Description;\n \n public class AcceptanceTestBase {\n+  static {\n+    System.setProperty(\"log4j2.isThreadContextMapInheritable\", \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTExNg=="}, "originalCommit": {"oid": "93b2e803ee497365ff437ce604e75e7abc98b21e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NzA4Mg==", "bodyText": "Environment variables have higher priority than property files anyway, so setting those in a property file will not help for this scenario.\nDo we really want to force log4j2's behavior like that anyway? If so, then I guess the only way to do so is to set the values manually once the self-configuration is finished. That sounds gory to me.\nIMO, if the user has set environment variables like that, they already know enough to take care of the situation by themselves.", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r398467082", "createdAt": "2020-03-26T10:31:40Z", "author": {"login": "hmijail"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -52,13 +53,18 @@\n \n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.ThreadContext;\n import org.junit.After;\n import org.junit.Rule;\n import org.junit.rules.TestName;\n import org.junit.rules.TestWatcher;\n import org.junit.runner.Description;\n \n public class AcceptanceTestBase {\n+  static {\n+    System.setProperty(\"log4j2.isThreadContextMapInheritable\", \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTExNg=="}, "originalCommit": {"oid": "93b2e803ee497365ff437ce604e75e7abc98b21e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDM2ODgzOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwMDoyNjozMlrOF7IAGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjowMDo1NlrOF7X2hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTQwMw==", "bodyText": "Remind me again why this rule needs to be in the AcceptanceTestBase and not it's own class?", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r397541403", "createdAt": "2020-03-25T00:26:32Z", "author": {"login": "CjHare"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -201,4 +168,46 @@ public void tearDownAcceptanceTestBase() {\n       LOG.info(\"Don't know how to report memory for OS {}\", os);\n     }\n   }\n+\n+  @Rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93b2e803ee497365ff437ce604e75e7abc98b21e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MTA4NQ==", "bodyText": "Its purpose is that of @Before and @After, so I thought here it makes conceptual sense. But I guess it could go to its own class. Let me know whether to separate it then.", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r397791085", "createdAt": "2020-03-25T11:42:06Z", "author": {"login": "hmijail"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -201,4 +168,46 @@ public void tearDownAcceptanceTestBase() {\n       LOG.info(\"Don't know how to report memory for OS {}\", os);\n     }\n   }\n+\n+  @Rule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTQwMw=="}, "originalCommit": {"oid": "93b2e803ee497365ff437ce604e75e7abc98b21e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MTY4NA==", "bodyText": "By the way, the other @Rule was unused and just a vestige of a previous implementation. I'll remove it.", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r397791684", "createdAt": "2020-03-25T11:43:17Z", "author": {"login": "hmijail"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -201,4 +168,46 @@ public void tearDownAcceptanceTestBase() {\n       LOG.info(\"Don't know how to report memory for OS {}\", os);\n     }\n   }\n+\n+  @Rule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTQwMw=="}, "originalCommit": {"oid": "93b2e803ee497365ff437ce604e75e7abc98b21e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwMTA5Mg==", "bodyText": "(... or should that be another PR?)", "url": "https://github.com/hyperledger/besu/pull/421#discussion_r397801092", "createdAt": "2020-03-25T12:00:56Z", "author": {"login": "hmijail"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/AcceptanceTestBase.java", "diffHunk": "@@ -201,4 +168,46 @@ public void tearDownAcceptanceTestBase() {\n       LOG.info(\"Don't know how to report memory for OS {}\", os);\n     }\n   }\n+\n+  @Rule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU0MTQwMw=="}, "originalCommit": {"oid": "93b2e803ee497365ff437ce604e75e7abc98b21e"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1120, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}