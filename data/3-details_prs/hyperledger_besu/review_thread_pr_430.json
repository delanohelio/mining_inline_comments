{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NTM5Mjk0", "number": 430, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0Mjo1N1rODmw4_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0Mjo1N1rODmw4_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTczNTAxOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/database/DatabaseMigrationAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0Mjo1N1rOF0Xhfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzowOToyNVrOF0Yo3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NTY3OQ==", "bodyText": "and using multiple RocksDB columns", "url": "https://github.com/hyperledger/besu/pull/430#discussion_r390455679", "createdAt": "2020-03-10T16:42:57Z", "author": {"login": "RatanRSur"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/database/DatabaseMigrationAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.tests.acceptance.database;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.blockchain.Amount;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.configuration.BesuNodeConfigurationBuilder;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Resources;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class DatabaseMigrationAcceptanceTest extends AcceptanceTestBase {\n+  private final String testName;\n+  private final String dataPath;\n+  private final long expectedChainHeight;\n+  private Path hostDataPath;\n+  private BesuNode node;\n+  private final List<AccountData> testAccounts;\n+\n+  public DatabaseMigrationAcceptanceTest(\n+      final String testName,\n+      final String dataPath,\n+      final long expectedChainHeight,\n+      final List<AccountData> testAccounts) {\n+    this.testName = testName;\n+    this.dataPath = dataPath;\n+    this.expectedChainHeight = expectedChainHeight;\n+    this.testAccounts = testAccounts;\n+  }\n+\n+  @Parameters(name = \"{0}\")\n+  public static Object[][] getParameters() {\n+    return new Object[][] {\n+      // First 10 blocks of ropsten\n+      new Object[] {\n+        \"Before versioning was enabled\",\n+        \"version0\",\n+        0xA,\n+        Arrays.asList(\n+            new AccountData(\n+                \"0xd1aeb42885a43b72b518182ef893125814811048\",\n+                BigInteger.valueOf(0xA),\n+                Wei.fromHexString(\"0x2B5E3AF16B1880000\"))),\n+      },\n+      new Object[] {\n+        \"After versioning was enabled \",\n+        \"version1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a764d2c70ac2042d354aba82cbe052dea3488911"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ3Mzk0OA==", "bodyText": "Just one piece of additional information about version 1\n\nOk thank you", "url": "https://github.com/hyperledger/besu/pull/430#discussion_r390473948", "createdAt": "2020-03-10T17:09:25Z", "author": {"login": "abdelhamidbakhta"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/database/DatabaseMigrationAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.tests.acceptance.database;\n+\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.blockchain.Amount;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.configuration.BesuNodeConfigurationBuilder;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Resources;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class DatabaseMigrationAcceptanceTest extends AcceptanceTestBase {\n+  private final String testName;\n+  private final String dataPath;\n+  private final long expectedChainHeight;\n+  private Path hostDataPath;\n+  private BesuNode node;\n+  private final List<AccountData> testAccounts;\n+\n+  public DatabaseMigrationAcceptanceTest(\n+      final String testName,\n+      final String dataPath,\n+      final long expectedChainHeight,\n+      final List<AccountData> testAccounts) {\n+    this.testName = testName;\n+    this.dataPath = dataPath;\n+    this.expectedChainHeight = expectedChainHeight;\n+    this.testAccounts = testAccounts;\n+  }\n+\n+  @Parameters(name = \"{0}\")\n+  public static Object[][] getParameters() {\n+    return new Object[][] {\n+      // First 10 blocks of ropsten\n+      new Object[] {\n+        \"Before versioning was enabled\",\n+        \"version0\",\n+        0xA,\n+        Arrays.asList(\n+            new AccountData(\n+                \"0xd1aeb42885a43b72b518182ef893125814811048\",\n+                BigInteger.valueOf(0xA),\n+                Wei.fromHexString(\"0x2B5E3AF16B1880000\"))),\n+      },\n+      new Object[] {\n+        \"After versioning was enabled \",\n+        \"version1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NTY3OQ=="}, "originalCommit": {"oid": "a764d2c70ac2042d354aba82cbe052dea3488911"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1137, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}