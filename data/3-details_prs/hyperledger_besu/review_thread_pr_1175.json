{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMDM4NTk0", "number": 1175, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNToyOVrOEKILUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozOTo0M1rOEKIThw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDU1MTg1OnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNToyOVrOGq_dkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNToyOVrOGq_dkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczMzEzNg==", "bodyText": "Shouldn't we also check against the bondingPeers collection?\nMaybe we need a helper method resolvePeer that takes a peer and replaces it with representations from the peerTable or bondingPeers collection as needed.  Then we could dedupe the same logic in onMessage.", "url": "https://github.com/hyperledger/besu/pull/1175#discussion_r447733136", "createdAt": "2020-06-30T14:35:29Z", "author": {"login": "mbaxter"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "diffHunk": "@@ -586,6 +590,17 @@ public void setRetryDelayFunction(final RetryDelayFunction retryDelayFunction) {\n     this.retryDelayFunction = retryDelayFunction;\n   }\n \n+  public void handleBondingRequest(final DiscoveryPeer peer) {\n+    final DiscoveryPeer peerToBond =\n+        peerTable.get(peer).filter(known -> known.discoveryEndpointMatches(peer)).orElse(peer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d1404ebb21294aa726f095e0b4435c83b7d34f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDU1NzYyOnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNjo0NFrOGq_hOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozNjo0NFrOGq_hOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNDA3NQ==", "bodyText": "(nit) I think we could simplify:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (peerPermissions.allowOutboundBonding(peerToBond)\n          \n          \n            \n                    && !PeerDiscoveryStatus.BONDED.equals(peerToBond.getStatus())\n          \n          \n            \n                    && !PeerDiscoveryStatus.BONDING.equals(peerToBond.getStatus())) {\n          \n          \n            \n                if (peerPermissions.allowOutboundBonding(peerToBond)\n          \n          \n            \n                    && peerToBond.getStatus().equals(PeerDiscoveryStatus.KNOWN)) {", "url": "https://github.com/hyperledger/besu/pull/1175#discussion_r447734075", "createdAt": "2020-06-30T14:36:44Z", "author": {"login": "mbaxter"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "diffHunk": "@@ -586,6 +590,17 @@ public void setRetryDelayFunction(final RetryDelayFunction retryDelayFunction) {\n     this.retryDelayFunction = retryDelayFunction;\n   }\n \n+  public void handleBondingRequest(final DiscoveryPeer peer) {\n+    final DiscoveryPeer peerToBond =\n+        peerTable.get(peer).filter(known -> known.discoveryEndpointMatches(peer)).orElse(peer);\n+\n+    if (peerPermissions.allowOutboundBonding(peerToBond)\n+        && !PeerDiscoveryStatus.BONDED.equals(peerToBond.getStatus())\n+        && !PeerDiscoveryStatus.BONDING.equals(peerToBond.getStatus())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d1404ebb21294aa726f095e0b4435c83b7d34f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDU3Mjg3OnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDozOTo0M1rOGq_qig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxNTowOVrOGrBWcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNjQ1OA==", "bodyText": "good catch!", "url": "https://github.com/hyperledger/besu/pull/1175#discussion_r447736458", "createdAt": "2020-06-30T14:39:43Z", "author": {"login": "mbaxter"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "diffHunk": "@@ -107,7 +108,8 @@\n   private static final int PEER_REFRESH_ROUND_TIMEOUT_IN_SECONDS = 5;\n   protected final TimerUtil timerUtil;\n   private final PeerTable peerTable;\n-  private final Map<Bytes, DiscoveryPeer> bondingPeers;\n+  private final Cache<Bytes, DiscoveryPeer> bondingPeers =\n+      CacheBuilder.newBuilder().maximumSize(50).expireAfterWrite(10, TimeUnit.MINUTES).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d1404ebb21294aa726f095e0b4435c83b7d34f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NDA4Mw==", "bodyText": "Thanks to @shemnon", "url": "https://github.com/hyperledger/besu/pull/1175#discussion_r447764083", "createdAt": "2020-06-30T15:15:09Z", "author": {"login": "davemec"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "diffHunk": "@@ -107,7 +108,8 @@\n   private static final int PEER_REFRESH_ROUND_TIMEOUT_IN_SECONDS = 5;\n   protected final TimerUtil timerUtil;\n   private final PeerTable peerTable;\n-  private final Map<Bytes, DiscoveryPeer> bondingPeers;\n+  private final Cache<Bytes, DiscoveryPeer> bondingPeers =\n+      CacheBuilder.newBuilder().maximumSize(50).expireAfterWrite(10, TimeUnit.MINUTES).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzczNjQ1OA=="}, "originalCommit": {"oid": "58d1404ebb21294aa726f095e0b4435c83b7d34f"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 838, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}