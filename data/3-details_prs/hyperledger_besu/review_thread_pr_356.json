{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDgxMDE4", "number": 356, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjo1MTo1OVrODcgiiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDo1NToyMlrODd6ZLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjE5ODQ5OnYy", "diffSide": "RIGHT", "path": "ethereum/api/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjo1MTo1OVrOFklVSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNTo1MjowNlrOFkm8PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNDcxNA==", "bodyText": "nit: Should besu proper depend upon web3j?", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r373904714", "createdAt": "2020-02-03T02:51:59Z", "author": {"login": "rain-on"}, "path": "ethereum/api/build.gradle", "diffHunk": "@@ -59,6 +59,7 @@ dependencies {\n   implementation 'org.apache.tuweni:tuweni-units'\n   implementation 'org.bouncycastle:bcprov-jdk15on'\n   implementation 'org.springframework.security:spring-security-crypto'\n+  implementation 'org.web3j:besu:4.5.11'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265b38a76b2dbd3567180aa8c5d9a1e630b3cf5d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkzMTA2OQ==", "bodyText": "not sure, we could add the privacy group calculation to Tuweni use that from both Orion and Besu?", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r373931069", "createdAt": "2020-02-03T05:52:06Z", "author": {"login": "jframe"}, "path": "ethereum/api/build.gradle", "diffHunk": "@@ -59,6 +59,7 @@ dependencies {\n   implementation 'org.apache.tuweni:tuweni-units'\n   implementation 'org.bouncycastle:bcprov-jdk15on'\n   implementation 'org.springframework.security:spring-security-crypto'\n+  implementation 'org.web3j:besu:4.5.11'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNDcxNA=="}, "originalCommit": {"oid": "265b38a76b2dbd3567180aa8c5d9a1e630b3cf5d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjE5OTQ3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/PrivacySendTransaction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjo1MzoxNlrOFklV6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMjo1MzoxNlrOFklV6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNDg3NQ==", "bodyText": "you can move this into the try block - then you don't need the privateTransaction variable", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r373904875", "createdAt": "2020-02-03T02:53:16Z", "author": {"login": "rain-on"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/PrivacySendTransaction.java", "diffHunk": "@@ -46,48 +54,57 @@ public PrivacySendTransaction(\n     this.enclavePublicKeyProvider = enclavePublicKeyProvider;\n   }\n \n-  public PrivateTransaction validateAndDecodeRequest(final JsonRpcRequestContext request)\n+  public PrivateTransaction decode(final JsonRpcRequestContext request)\n       throws ErrorResponseException {\n     if (request.getRequest().getParamLength() != 1) {\n       throw new ErrorResponseException(\n-          new JsonRpcErrorResponse(request.getRequest().getId(), JsonRpcError.INVALID_PARAMS));\n+          new JsonRpcErrorResponse(request.getRequest().getId(), INVALID_PARAMS));\n     }\n     final String rawPrivateTransaction = request.getRequiredParameter(0, String.class);\n     final PrivateTransaction privateTransaction;\n     try {\n       privateTransaction = decodeRawTransaction(rawPrivateTransaction);\n     } catch (final InvalidJsonRpcRequestException e) {\n       throw new ErrorResponseException(\n-          new JsonRpcErrorResponse(request.getRequest().getId(), JsonRpcError.DECODE_ERROR));\n+          new JsonRpcErrorResponse(request.getRequest().getId(), DECODE_ERROR));\n     }\n-    if (!privateTransaction.getValue().isZero()) {\n+    return privateTransaction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265b38a76b2dbd3567180aa8c5d9a1e630b3cf5d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMjIwNzE2OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/PrivacySendTransaction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzowMDo1MVrOFklajQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMzowMDo1MVrOFklajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzkwNjA2MQ==", "bodyText": "nit: Could/shoud this take just a JsonRpcRequest - rather than the whole context?\nHaving said that this is a funny class - it takes Json input, and produces outputs business objects, just not sure what that means right now", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r373906061", "createdAt": "2020-02-03T03:00:51Z", "author": {"login": "rain-on"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/PrivacySendTransaction.java", "diffHunk": "@@ -46,48 +54,57 @@ public PrivacySendTransaction(\n     this.enclavePublicKeyProvider = enclavePublicKeyProvider;\n   }\n \n-  public PrivateTransaction validateAndDecodeRequest(final JsonRpcRequestContext request)\n+  public PrivateTransaction decode(final JsonRpcRequestContext request)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "265b38a76b2dbd3567180aa8c5d9a1e630b3cf5d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE1MDM2OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzoyNDoxMVrOFmOQiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDoyMTozMlrOFmO5DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyMzgxNg==", "bodyText": "nit: is it worth moving this to the top of the function so you can use it for the JsonRpcErrorResponse (line 78)?", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r375623816", "createdAt": "2020-02-06T03:24:11Z", "author": {"login": "rain-on"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -63,45 +63,42 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final PrivateTransaction privateTransaction;\n-    try {\n-      privateTransaction = privacySendTransaction.validateAndDecodeRequest(requestContext);\n-    } catch (final ErrorResponseException e) {\n-      return e.getResponse();\n-    }\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n-    final SendTransactionResponse sendTransactionResponse;\n     try {\n-      sendTransactionResponse =\n-          privacyController.sendTransaction(\n-              privateTransaction, enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n+      final PrivateTransaction privateTransaction =\n+          PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n+\n+      final String enclavePublicKey =\n+          enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+      final ValidationResult<TransactionInvalidReason> validationResult =\n+          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n+      if (!validationResult.isValid()) {\n+        return new JsonRpcErrorResponse(\n+            requestContext.getRequest().getId(),\n+            convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+      }\n+\n+      final String enclaveKey =\n+          privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n+      final Transaction privacyMarkerTransaction =\n+          privacyController.createPrivacyMarkerTransaction(enclaveKey, privateTransaction);\n+\n+      final Object id = requestContext.getRequest().getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d3fec5127cb6982efbbd4648bd3469bf4d77de4"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzNDE4OA==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r375634188", "createdAt": "2020-02-06T04:21:32Z", "author": {"login": "jframe"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -63,45 +63,42 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final PrivateTransaction privateTransaction;\n-    try {\n-      privateTransaction = privacySendTransaction.validateAndDecodeRequest(requestContext);\n-    } catch (final ErrorResponseException e) {\n-      return e.getResponse();\n-    }\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n-    final SendTransactionResponse sendTransactionResponse;\n     try {\n-      sendTransactionResponse =\n-          privacyController.sendTransaction(\n-              privateTransaction, enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n+      final PrivateTransaction privateTransaction =\n+          PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n+\n+      final String enclavePublicKey =\n+          enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+      final ValidationResult<TransactionInvalidReason> validationResult =\n+          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n+      if (!validationResult.isValid()) {\n+        return new JsonRpcErrorResponse(\n+            requestContext.getRequest().getId(),\n+            convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+      }\n+\n+      final String enclaveKey =\n+          privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n+      final Transaction privacyMarkerTransaction =\n+          privacyController.createPrivacyMarkerTransaction(enclaveKey, privateTransaction);\n+\n+      final Object id = requestContext.getRequest().getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyMzgxNg=="}, "originalCommit": {"oid": "9d3fec5127cb6982efbbd4648bd3469bf4d77de4"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE1MTY2OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzoyNToxOFrOFmORRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDoyNDowM1rOFmO6yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNDAwNw==", "bodyText": "nit: any word if we need to validate on distribute? Seems better, but that said, its validity now does not reflect its validity when mined.", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r375624007", "createdAt": "2020-02-06T03:25:18Z", "author": {"login": "rain-on"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "diffHunk": "@@ -60,35 +60,38 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final PrivateTransaction privateTransaction;\n-    try {\n-      privateTransaction = privacySendTransaction.validateAndDecodeRequest(requestContext);\n-    } catch (ErrorResponseException e) {\n-      return e.getResponse();\n-    }\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n-    final SendTransactionResponse sendTransactionResponse;\n     try {\n-      sendTransactionResponse =\n-          privacyController.sendTransaction(\n-              privateTransaction, enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n+      final PrivateTransaction privateTransaction =\n+          PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n+\n+      final String enclavePublicKey =\n+          enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+      final ValidationResult<TransactionInvalidReason> validationResult =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d3fec5127cb6982efbbd4648bd3469bf4d77de4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzNDYzNQ==", "bodyText": "Not sure. But it was doing validate before, I haven't changed this behaviour.", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r375634635", "createdAt": "2020-02-06T04:24:03Z", "author": {"login": "jframe"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "diffHunk": "@@ -60,35 +60,38 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final PrivateTransaction privateTransaction;\n-    try {\n-      privateTransaction = privacySendTransaction.validateAndDecodeRequest(requestContext);\n-    } catch (ErrorResponseException e) {\n-      return e.getResponse();\n-    }\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n-    final SendTransactionResponse sendTransactionResponse;\n     try {\n-      sendTransactionResponse =\n-          privacyController.sendTransaction(\n-              privateTransaction, enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n+      final PrivateTransaction privateTransaction =\n+          PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n+\n+      final String enclavePublicKey =\n+          enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+      final ValidationResult<TransactionInvalidReason> validationResult =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNDAwNw=="}, "originalCommit": {"oid": "9d3fec5127cb6982efbbd4648bd3469bf4d77de4"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE1NjY0OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzoyODo1OVrOFmOUPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDoyNzozOFrOFmO9Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNDc2NQ==", "bodyText": "Is the API meant to return a hex string? Or a Base64 String? I suppose it depends - what goes into the PMT? Hex or Base64?", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r375624765", "createdAt": "2020-02-06T03:28:59Z", "author": {"login": "rain-on"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "diffHunk": "@@ -60,35 +60,38 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final PrivateTransaction privateTransaction;\n-    try {\n-      privateTransaction = privacySendTransaction.validateAndDecodeRequest(requestContext);\n-    } catch (ErrorResponseException e) {\n-      return e.getResponse();\n-    }\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n-    final SendTransactionResponse sendTransactionResponse;\n     try {\n-      sendTransactionResponse =\n-          privacyController.sendTransaction(\n-              privateTransaction, enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n+      final PrivateTransaction privateTransaction =\n+          PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n+\n+      final String enclavePublicKey =\n+          enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+      final ValidationResult<TransactionInvalidReason> validationResult =\n+          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n+      if (!validationResult.isValid()) {\n+        return new JsonRpcErrorResponse(\n+            requestContext.getRequest().getId(),\n+            convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+      }\n+\n+      final String enclaveKey =\n+          privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n+      return new JsonRpcSuccessResponse(\n+          requestContext.getRequest().getId(), hexEncodeEnclaveKey(enclaveKey));\n     } catch (final MultiTenancyValidationException e) {\n       LOG.error(\"Unauthorized privacy multi-tenancy rpc request. {}\", e.getMessage());\n       return new JsonRpcErrorResponse(requestContext.getRequest().getId(), ENCLAVE_ERROR);\n+    } catch (final IllegalArgumentException | RLPException e) {\n+      return new JsonRpcErrorResponse(requestContext.getRequest().getId(), DECODE_ERROR);\n     } catch (final Exception e) {\n       return new JsonRpcErrorResponse(\n-          requestContext.getRequest().getId(),\n-          JsonRpcEnclaveErrorConverter.convertEnclaveInvalidReason(e.getMessage()));\n+          requestContext.getRequest().getId(), convertEnclaveInvalidReason(e.getMessage()));\n     }\n+  }\n \n-    return privacySendTransaction.validateAndExecute(\n-        requestContext,\n-        privateTransaction,\n-        sendTransactionResponse.getPrivacyGroupId(),\n-        () ->\n-            new JsonRpcSuccessResponse(\n-                requestContext.getRequest().getId(),\n-                Bytes.wrap(Base64.getDecoder().decode(sendTransactionResponse.getEnclaveKey()))\n-                    .toHexString()));\n+  private String hexEncodeEnclaveKey(final String enclaveKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d3fec5127cb6982efbbd4648bd3469bf4d77de4"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzNTIyMg==", "bodyText": "It's base64 string in the PMT. Why this returns hex don't know, this is what is what already doing. Presumably because values are normally hex encoded in Ethereum RPCs.", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r375635222", "createdAt": "2020-02-06T04:27:38Z", "author": {"login": "jframe"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "diffHunk": "@@ -60,35 +60,38 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final PrivateTransaction privateTransaction;\n-    try {\n-      privateTransaction = privacySendTransaction.validateAndDecodeRequest(requestContext);\n-    } catch (ErrorResponseException e) {\n-      return e.getResponse();\n-    }\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n-    final SendTransactionResponse sendTransactionResponse;\n     try {\n-      sendTransactionResponse =\n-          privacyController.sendTransaction(\n-              privateTransaction, enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n+      final PrivateTransaction privateTransaction =\n+          PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n+\n+      final String enclavePublicKey =\n+          enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+      final ValidationResult<TransactionInvalidReason> validationResult =\n+          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n+      if (!validationResult.isValid()) {\n+        return new JsonRpcErrorResponse(\n+            requestContext.getRequest().getId(),\n+            convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+      }\n+\n+      final String enclaveKey =\n+          privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n+      return new JsonRpcSuccessResponse(\n+          requestContext.getRequest().getId(), hexEncodeEnclaveKey(enclaveKey));\n     } catch (final MultiTenancyValidationException e) {\n       LOG.error(\"Unauthorized privacy multi-tenancy rpc request. {}\", e.getMessage());\n       return new JsonRpcErrorResponse(requestContext.getRequest().getId(), ENCLAVE_ERROR);\n+    } catch (final IllegalArgumentException | RLPException e) {\n+      return new JsonRpcErrorResponse(requestContext.getRequest().getId(), DECODE_ERROR);\n     } catch (final Exception e) {\n       return new JsonRpcErrorResponse(\n-          requestContext.getRequest().getId(),\n-          JsonRpcEnclaveErrorConverter.convertEnclaveInvalidReason(e.getMessage()));\n+          requestContext.getRequest().getId(), convertEnclaveInvalidReason(e.getMessage()));\n     }\n+  }\n \n-    return privacySendTransaction.validateAndExecute(\n-        requestContext,\n-        privateTransaction,\n-        sendTransactionResponse.getPrivacyGroupId(),\n-        () ->\n-            new JsonRpcSuccessResponse(\n-                requestContext.getRequest().getId(),\n-                Bytes.wrap(Base64.getDecoder().decode(sendTransactionResponse.getEnclaveKey()))\n-                    .toHexString()));\n+  private String hexEncodeEnclaveKey(final String enclaveKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNDc2NQ=="}, "originalCommit": {"oid": "9d3fec5127cb6982efbbd4648bd3469bf4d77de4"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE1OTk4OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozMTozMVrOFmOWPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDozNzowNFrOFmPD7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNTI3OQ==", "bodyText": "is there a reason this isn't a function on privateTransaction?", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r375625279", "createdAt": "2020-02-06T03:31:31Z", "author": {"login": "rain-on"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -235,13 +226,14 @@ private SendResponse sendRequest(\n     }\n   }\n \n-  private String getPrivacyGroupId(final String key, final String privateFrom) {\n-    LOG.debug(\"Getting privacy group for key {} and privateFrom {}\", key, privateFrom);\n-    try {\n-      return enclave.receive(key, privateFrom).getPrivacyGroupId();\n-    } catch (final RuntimeException e) {\n-      LOG.error(\"Failed to retrieve private transaction in enclave\", e);\n-      throw e;\n+  private String privacyGroupId(final PrivateTransaction privateTransaction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d3fec5127cb6982efbbd4648bd3469bf4d77de4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzNjk3Mg==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r375636972", "createdAt": "2020-02-06T04:37:04Z", "author": {"login": "jframe"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -235,13 +226,14 @@ private SendResponse sendRequest(\n     }\n   }\n \n-  private String getPrivacyGroupId(final String key, final String privateFrom) {\n-    LOG.debug(\"Getting privacy group for key {} and privateFrom {}\", key, privateFrom);\n-    try {\n-      return enclave.receive(key, privateFrom).getPrivacyGroupId();\n-    } catch (final RuntimeException e) {\n-      LOG.error(\"Failed to retrieve private transaction in enclave\", e);\n-      throw e;\n+  private String privacyGroupId(final PrivateTransaction privateTransaction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNTI3OQ=="}, "originalCommit": {"oid": "9d3fec5127cb6982efbbd4648bd3469bf4d77de4"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE2MjE1OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzozMzoxNVrOFmOXew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwNDozMjozN1rOFmPAeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNTU5NQ==", "bodyText": "wondering if this could be a more useful log msg if it included the transaction id (if such thing exists?)", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r375625595", "createdAt": "2020-02-06T03:33:15Z", "author": {"login": "rain-on"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionValidator.java", "diffHunk": "@@ -35,6 +36,15 @@ public PrivateTransactionValidator(final Optional<BigInteger> chainId) {\n \n   public ValidationResult<TransactionValidator.TransactionInvalidReason> validate(\n       final PrivateTransaction transaction, final Long accountNonce) {\n+    LOG.debug(\"Validating private transaction fields\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d3fec5127cb6982efbbd4648bd3469bf4d77de4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYzNjA4OQ==", "bodyText": "done. including the transaction hash on logs", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r375636089", "createdAt": "2020-02-06T04:32:37Z", "author": {"login": "jframe"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionValidator.java", "diffHunk": "@@ -35,6 +36,15 @@ public PrivateTransactionValidator(final Optional<BigInteger> chainId) {\n \n   public ValidationResult<TransactionValidator.TransactionInvalidReason> validate(\n       final PrivateTransaction transaction, final Long accountNonce) {\n+    LOG.debug(\"Validating private transaction fields\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNTU5NQ=="}, "originalCommit": {"oid": "9d3fec5127cb6982efbbd4648bd3469bf4d77de4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjkyMDE1OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivacyGroupUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNDo1NToyMlrOFmyS-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNjozMjo0NlrOFmzc0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNDI2Ng==", "bodyText": "generate does not sound right for me. Maybe calculateEeaPrivacyGroupId?", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r376214266", "createdAt": "2020-02-07T04:55:22Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivacyGroupUtil.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.crypto.Hash;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class PrivacyGroupUtil {\n+\n+  public static String generateEeaPrivacyGroupId(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adfdc6c8dc062275dcdc979d0b933435cc1d4f56"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIzMzE3MQ==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/356#discussion_r376233171", "createdAt": "2020-02-07T06:32:46Z", "author": {"login": "jframe"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivacyGroupUtil.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.privacy;\n+\n+import org.hyperledger.besu.crypto.Hash;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class PrivacyGroupUtil {\n+\n+  public static String generateEeaPrivacyGroupId(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIxNDI2Ng=="}, "originalCommit": {"oid": "adfdc6c8dc062275dcdc979d0b933435cc1d4f56"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1223, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}