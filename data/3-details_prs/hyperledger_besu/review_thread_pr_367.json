{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMjc3MzY5", "number": 367, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxNjowNVrODfWgTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTowNDowMFrODfYq9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjAxMTY1OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxNjowNVrOFpAiag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxNjowNVrOFpAiag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NDc0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                params.add(\"--auto-logs-bloom-indexing-enabled\");\n          \n          \n            \n                params.add(\"--auto-log-bloom-caching-enabled\");", "url": "https://github.com/hyperledger/besu/pull/367#discussion_r378544746", "createdAt": "2020-02-12T22:16:05Z", "author": {"login": "shemnon"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java", "diffHunk": "@@ -257,6 +257,9 @@ public void startNode(final BesuNode node) {\n     params.add(\"--key-value-storage\");\n     params.add(\"rocksdb\");\n \n+    params.add(\"--auto-logs-bloom-indexing-enabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d6efc35046e024222e9abce128f0942a49aba2b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjAxNzQ4OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ThreadBesuNodeRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxODoyNFrOFpAmFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxODoyNFrOFpAmFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NTY4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .autoLogsBloomIndexing(false)\n          \n          \n            \n                        .autoLogBloomCaching(false)", "url": "https://github.com/hyperledger/besu/pull/367#discussion_r378545686", "createdAt": "2020-02-12T22:18:24Z", "author": {"login": "shemnon"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ThreadBesuNodeRunner.java", "diffHunk": "@@ -195,6 +195,7 @@ public void startNode(final BesuNode node) {\n                     .map(EnodeURL::fromString)\n                     .collect(Collectors.toList()))\n             .besuPluginContext(new BesuPluginContextImpl())\n+            .autoLogsBloomIndexing(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d6efc35046e024222e9abce128f0942a49aba2b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjMyNjM2OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDo0Mzo1NFrOFpDjhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODowMzo1M1rOFpKIig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5NDE4Mg==", "bodyText": "This should be debug - it happens way too often.", "url": "https://github.com/hyperledger/besu/pull/367#discussion_r378594182", "createdAt": "2020-02-13T00:43:54Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "diffHunk": "@@ -117,16 +128,68 @@ private long fillCacheFile(\n       if (maybeHeader.isEmpty()) {\n         break;\n       }\n-      final byte[] logs = maybeHeader.get().getLogsBloom().toArray();\n-      checkNotNull(logs);\n-      checkState(logs.length == 256, \"BloomBits are not the correct length\");\n-      fos.write(logs);\n+      fillCacheFileWithBlock(maybeHeader.get(), fos);\n       indexingStatus.currentBlock = blockNum;\n       blockNum++;\n     }\n     return blockNum - startBlock;\n   }\n \n+  public void cacheLogsBloomForBlockHeader(final BlockHeader blockHeader) {\n+    try {\n+      final long blockNumber = blockHeader.getNumber();\n+      LOG.info(\"Caching logs bloom for block {}.\", \"0x\" + Long.toHexString(blockNumber));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d6efc35046e024222e9abce128f0942a49aba2b"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTk2Mg==", "bodyText": "Done.", "url": "https://github.com/hyperledger/besu/pull/367#discussion_r378701962", "createdAt": "2020-02-13T08:03:53Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "diffHunk": "@@ -117,16 +128,68 @@ private long fillCacheFile(\n       if (maybeHeader.isEmpty()) {\n         break;\n       }\n-      final byte[] logs = maybeHeader.get().getLogsBloom().toArray();\n-      checkNotNull(logs);\n-      checkState(logs.length == 256, \"BloomBits are not the correct length\");\n-      fos.write(logs);\n+      fillCacheFileWithBlock(maybeHeader.get(), fos);\n       indexingStatus.currentBlock = blockNum;\n       blockNum++;\n     }\n     return blockNum - startBlock;\n   }\n \n+  public void cacheLogsBloomForBlockHeader(final BlockHeader blockHeader) {\n+    try {\n+      final long blockNumber = blockHeader.getNumber();\n+      LOG.info(\"Caching logs bloom for block {}.\", \"0x\" + Long.toHexString(blockNumber));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5NDE4Mg=="}, "originalCommit": {"oid": "3d6efc35046e024222e9abce128f0942a49aba2b"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjM1NTgxOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMDo1NzowNFrOFpD0MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODowNTozNFrOFpKKuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5ODQ0OQ==", "bodyText": "This can result in indexing running twice... perhaps ensurePreviousSegmentsArePresent(blockchain.getChainHeadBlockNumber());?", "url": "https://github.com/hyperledger/besu/pull/367#discussion_r378598449", "createdAt": "2020-02-13T00:57:04Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "diffHunk": "@@ -60,6 +67,10 @@ public TransactionLogsIndexer(\n     this.scheduler = scheduler;\n   }\n \n+  public IndexingStatus indexAll() {\n+    return generateLogBloomCache(0, Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d6efc35046e024222e9abce128f0942a49aba2b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMjUyMA==", "bodyText": "Yes, good suggestion. Done.", "url": "https://github.com/hyperledger/besu/pull/367#discussion_r378702520", "createdAt": "2020-02-13T08:05:34Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "diffHunk": "@@ -60,6 +67,10 @@ public TransactionLogsIndexer(\n     this.scheduler = scheduler;\n   }\n \n+  public IndexingStatus indexAll() {\n+    return generateLogBloomCache(0, Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5ODQ0OQ=="}, "originalCommit": {"oid": "3d6efc35046e024222e9abce128f0942a49aba2b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjM2NDk5OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTowMzowMlrOFpD59A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODoxNTozMFrOFpKYsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5OTkyNA==", "bodyText": "I think we should track what segments we have made in a list or tree map.  Check the map before going to disk.", "url": "https://github.com/hyperledger/besu/pull/367#discussion_r378599924", "createdAt": "2020-02-13T01:03:02Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "diffHunk": "@@ -117,16 +128,68 @@ private long fillCacheFile(\n       if (maybeHeader.isEmpty()) {\n         break;\n       }\n-      final byte[] logs = maybeHeader.get().getLogsBloom().toArray();\n-      checkNotNull(logs);\n-      checkState(logs.length == 256, \"BloomBits are not the correct length\");\n-      fos.write(logs);\n+      fillCacheFileWithBlock(maybeHeader.get(), fos);\n       indexingStatus.currentBlock = blockNum;\n       blockNum++;\n     }\n     return blockNum - startBlock;\n   }\n \n+  public void cacheLogsBloomForBlockHeader(final BlockHeader blockHeader) {\n+    try {\n+      final long blockNumber = blockHeader.getNumber();\n+      LOG.info(\"Caching logs bloom for block {}.\", \"0x\" + Long.toHexString(blockNumber));\n+      ensurePreviousSegmentsArePresent(blockNumber);\n+      final File cacheFile = calculateCacheFileName(blockNumber, cacheDir);\n+      if (!cacheFile.exists()) {\n+        Files.createFile(cacheFile.toPath());\n+      }\n+      try (RandomAccessFile writer = new RandomAccessFile(cacheFile, \"rw\")) {\n+        final long offset = (blockNumber / BLOCKS_PER_BLOOM_CACHE) * BLOOM_BITS_LENGTH;\n+        writer.seek(offset);\n+        writer.write(ensureBloomBitsAreCorrectLength(blockHeader.getLogsBloom().toArray()));\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Unhandled indexing exception.\", e);\n+    }\n+  }\n+\n+  private void ensurePreviousSegmentsArePresent(final long blockNumber) {\n+    scheduler.scheduleFutureTask(\n+        () -> {\n+          long currentSegment = (blockNumber / BLOCKS_PER_BLOOM_CACHE) - 1;\n+          while (currentSegment > 0) {\n+            try {\n+              if (!isCachePresentForSegment(currentSegment)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d6efc35046e024222e9abce128f0942a49aba2b"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwNjA5OQ==", "bodyText": "Done.", "url": "https://github.com/hyperledger/besu/pull/367#discussion_r378706099", "createdAt": "2020-02-13T08:15:30Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "diffHunk": "@@ -117,16 +128,68 @@ private long fillCacheFile(\n       if (maybeHeader.isEmpty()) {\n         break;\n       }\n-      final byte[] logs = maybeHeader.get().getLogsBloom().toArray();\n-      checkNotNull(logs);\n-      checkState(logs.length == 256, \"BloomBits are not the correct length\");\n-      fos.write(logs);\n+      fillCacheFileWithBlock(maybeHeader.get(), fos);\n       indexingStatus.currentBlock = blockNum;\n       blockNum++;\n     }\n     return blockNum - startBlock;\n   }\n \n+  public void cacheLogsBloomForBlockHeader(final BlockHeader blockHeader) {\n+    try {\n+      final long blockNumber = blockHeader.getNumber();\n+      LOG.info(\"Caching logs bloom for block {}.\", \"0x\" + Long.toHexString(blockNumber));\n+      ensurePreviousSegmentsArePresent(blockNumber);\n+      final File cacheFile = calculateCacheFileName(blockNumber, cacheDir);\n+      if (!cacheFile.exists()) {\n+        Files.createFile(cacheFile.toPath());\n+      }\n+      try (RandomAccessFile writer = new RandomAccessFile(cacheFile, \"rw\")) {\n+        final long offset = (blockNumber / BLOCKS_PER_BLOOM_CACHE) * BLOOM_BITS_LENGTH;\n+        writer.seek(offset);\n+        writer.write(ensureBloomBitsAreCorrectLength(blockHeader.getLogsBloom().toArray()));\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Unhandled indexing exception.\", e);\n+    }\n+  }\n+\n+  private void ensurePreviousSegmentsArePresent(final long blockNumber) {\n+    scheduler.scheduleFutureTask(\n+        () -> {\n+          long currentSegment = (blockNumber / BLOCKS_PER_BLOOM_CACHE) - 1;\n+          while (currentSegment > 0) {\n+            try {\n+              if (!isCachePresentForSegment(currentSegment)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU5OTkyNA=="}, "originalCommit": {"oid": "3d6efc35046e024222e9abce128f0942a49aba2b"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjM2NjYzOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwMTowNDowMFrOFpD65g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODowNzo0MVrOFpKNdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwMDE2Ng==", "bodyText": "We should check indexing status before submitting the work.", "url": "https://github.com/hyperledger/besu/pull/367#discussion_r378600166", "createdAt": "2020-02-13T01:04:00Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "diffHunk": "@@ -117,16 +128,68 @@ private long fillCacheFile(\n       if (maybeHeader.isEmpty()) {\n         break;\n       }\n-      final byte[] logs = maybeHeader.get().getLogsBloom().toArray();\n-      checkNotNull(logs);\n-      checkState(logs.length == 256, \"BloomBits are not the correct length\");\n-      fos.write(logs);\n+      fillCacheFileWithBlock(maybeHeader.get(), fos);\n       indexingStatus.currentBlock = blockNum;\n       blockNum++;\n     }\n     return blockNum - startBlock;\n   }\n \n+  public void cacheLogsBloomForBlockHeader(final BlockHeader blockHeader) {\n+    try {\n+      final long blockNumber = blockHeader.getNumber();\n+      LOG.info(\"Caching logs bloom for block {}.\", \"0x\" + Long.toHexString(blockNumber));\n+      ensurePreviousSegmentsArePresent(blockNumber);\n+      final File cacheFile = calculateCacheFileName(blockNumber, cacheDir);\n+      if (!cacheFile.exists()) {\n+        Files.createFile(cacheFile.toPath());\n+      }\n+      try (RandomAccessFile writer = new RandomAccessFile(cacheFile, \"rw\")) {\n+        final long offset = (blockNumber / BLOCKS_PER_BLOOM_CACHE) * BLOOM_BITS_LENGTH;\n+        writer.seek(offset);\n+        writer.write(ensureBloomBitsAreCorrectLength(blockHeader.getLogsBloom().toArray()));\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Unhandled indexing exception.\", e);\n+    }\n+  }\n+\n+  private void ensurePreviousSegmentsArePresent(final long blockNumber) {\n+    scheduler.scheduleFutureTask(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d6efc35046e024222e9abce128f0942a49aba2b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMzIyMg==", "bodyText": "Done.", "url": "https://github.com/hyperledger/besu/pull/367#discussion_r378703222", "createdAt": "2020-02-13T08:07:41Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogsIndexer.java", "diffHunk": "@@ -117,16 +128,68 @@ private long fillCacheFile(\n       if (maybeHeader.isEmpty()) {\n         break;\n       }\n-      final byte[] logs = maybeHeader.get().getLogsBloom().toArray();\n-      checkNotNull(logs);\n-      checkState(logs.length == 256, \"BloomBits are not the correct length\");\n-      fos.write(logs);\n+      fillCacheFileWithBlock(maybeHeader.get(), fos);\n       indexingStatus.currentBlock = blockNum;\n       blockNum++;\n     }\n     return blockNum - startBlock;\n   }\n \n+  public void cacheLogsBloomForBlockHeader(final BlockHeader blockHeader) {\n+    try {\n+      final long blockNumber = blockHeader.getNumber();\n+      LOG.info(\"Caching logs bloom for block {}.\", \"0x\" + Long.toHexString(blockNumber));\n+      ensurePreviousSegmentsArePresent(blockNumber);\n+      final File cacheFile = calculateCacheFileName(blockNumber, cacheDir);\n+      if (!cacheFile.exists()) {\n+        Files.createFile(cacheFile.toPath());\n+      }\n+      try (RandomAccessFile writer = new RandomAccessFile(cacheFile, \"rw\")) {\n+        final long offset = (blockNumber / BLOCKS_PER_BLOOM_CACHE) * BLOOM_BITS_LENGTH;\n+        writer.seek(offset);\n+        writer.write(ensureBloomBitsAreCorrectLength(blockHeader.getLogsBloom().toArray()));\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Unhandled indexing exception.\", e);\n+    }\n+  }\n+\n+  private void ensurePreviousSegmentsArePresent(final long blockNumber) {\n+    scheduler.scheduleFutureTask(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODYwMDE2Ng=="}, "originalCommit": {"oid": "3d6efc35046e024222e9abce128f0942a49aba2b"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1229, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}