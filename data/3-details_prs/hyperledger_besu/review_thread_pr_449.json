{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NzI0ODg1", "number": 449, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjozNjo1MlrODnJ6fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowODo0MVrODojPDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzgzNDg3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceBlock.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjozNjo1MlrOF0_Obw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDowNTo1NlrOF1gCjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNjE1OQ==", "bodyText": "you can make the mapper static - also reuse the same one with emptyResult", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391106159", "createdAt": "2020-03-11T16:36:52Z", "author": {"login": "atoulme"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceBlock.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.parameters.BlockParameter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.processor.BlockTracer;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.processor.TransactionTrace;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat.FlatTraceGenerator;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat.RewardTraceGenerator;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.debug.TraceOptions;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.vm.DebugOperationTracer;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+\n+public class TraceBlock extends AbstractBlockParameterMethod {\n+  private final Supplier<BlockTracer> blockTracerSupplier;\n+  private final ProtocolSchedule<?> protocolSchedule;\n+\n+  public TraceBlock(\n+      final Supplier<BlockTracer> blockTracerSupplier,\n+      final ProtocolSchedule<?> protocolSchedule,\n+      final BlockchainQueries queries) {\n+    super(queries);\n+    this.blockTracerSupplier = blockTracerSupplier;\n+    this.protocolSchedule = protocolSchedule;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.TRACE_BLOCK.getMethodName();\n+  }\n+\n+  @Override\n+  protected BlockParameter blockParameter(final JsonRpcRequestContext request) {\n+    return request.getRequiredParameter(0, BlockParameter.class);\n+  }\n+\n+  @Override\n+  protected Object resultByBlockNumber(\n+      final JsonRpcRequestContext request, final long blockNumber) {\n+    if (blockNumber == BlockHeader.GENESIS_BLOCK_NUMBER) {\n+      // Nothing to trace for the genesis block\n+      return emptyResult();\n+    }\n+\n+    return getBlockchainQueries()\n+        .getBlockchain()\n+        .getBlockByNumber(blockNumber)\n+        .map(this::traceBlock)\n+        .orElse(null);\n+  }\n+\n+  private Object traceBlock(final Block block) {\n+\n+    if (block == null) {\n+      return emptyResult();\n+    }\n+    final ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0Mzc5MA==", "bodyText": "Done.", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391643790", "createdAt": "2020-03-12T14:05:56Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/TraceBlock.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.parameters.BlockParameter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.processor.BlockTracer;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.processor.TransactionTrace;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat.FlatTraceGenerator;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat.RewardTraceGenerator;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.debug.TraceOptions;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.vm.DebugOperationTracer;\n+\n+import java.util.List;\n+import java.util.function.Supplier;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+\n+public class TraceBlock extends AbstractBlockParameterMethod {\n+  private final Supplier<BlockTracer> blockTracerSupplier;\n+  private final ProtocolSchedule<?> protocolSchedule;\n+\n+  public TraceBlock(\n+      final Supplier<BlockTracer> blockTracerSupplier,\n+      final ProtocolSchedule<?> protocolSchedule,\n+      final BlockchainQueries queries) {\n+    super(queries);\n+    this.blockTracerSupplier = blockTracerSupplier;\n+    this.protocolSchedule = protocolSchedule;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.TRACE_BLOCK.getMethodName();\n+  }\n+\n+  @Override\n+  protected BlockParameter blockParameter(final JsonRpcRequestContext request) {\n+    return request.getRequiredParameter(0, BlockParameter.class);\n+  }\n+\n+  @Override\n+  protected Object resultByBlockNumber(\n+      final JsonRpcRequestContext request, final long blockNumber) {\n+    if (blockNumber == BlockHeader.GENESIS_BLOCK_NUMBER) {\n+      // Nothing to trace for the genesis block\n+      return emptyResult();\n+    }\n+\n+    return getBlockchainQueries()\n+        .getBlockchain()\n+        .getBlockByNumber(blockNumber)\n+        .map(this::traceBlock)\n+        .orElse(null);\n+  }\n+\n+  private Object traceBlock(final Block block) {\n+\n+    if (block == null) {\n+      return emptyResult();\n+    }\n+    final ObjectMapper mapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNjE1OQ=="}, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzg0NTUwOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/Action.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjozOTozMFrOF0_ViA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozOTo0MlrOF28hew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNzk3Ng==", "bodyText": "My understanding from working with @shemnon on JSON serialized code is that the team likes to have the right getters, but also to add @JsonProperty with the field names so it's obvious the method is used for JSON serialization.", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391107976", "createdAt": "2020-03-11T16:39:30Z", "author": {"login": "atoulme"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/Action.java", "diffHunk": "@@ -109,6 +131,14 @@ public String getRefundAddress() {\n     return refundAddress;\n   }\n \n+  public String getAuthor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwMTA0Ng==", "bodyText": "That is more of an emergent pattern than a deliberate one.  At one point getters and setters were prohibited from the codebase (pre public release).  That was changed but the JsonProperty annotations were not removed.", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391301046", "createdAt": "2020-03-11T22:16:44Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/Action.java", "diffHunk": "@@ -109,6 +131,14 @@ public String getRefundAddress() {\n     return refundAddress;\n   }\n \n+  public String getAuthor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNzk3Ng=="}, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NTQxNQ==", "bodyText": "it seem that no modification is necessary ?", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391645415", "createdAt": "2020-03-12T14:08:22Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/Action.java", "diffHunk": "@@ -109,6 +131,14 @@ public String getRefundAddress() {\n     return refundAddress;\n   }\n \n+  public String getAuthor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNzk3Ng=="}, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1OTAzNQ==", "bodyText": "I'm OK with no modification.  There is no written style guide for this.", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r393159035", "createdAt": "2020-03-16T16:39:42Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/Action.java", "diffHunk": "@@ -109,6 +131,14 @@ public String getRefundAddress() {\n     return refundAddress;\n   }\n \n+  public String getAuthor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwNzk3Ng=="}, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzg0NjcwOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/FlatTrace.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjozOTo0N1rOF0_WXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjozOTo0N1rOF0_WXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwODE5MA==", "bodyText": "Same here on adding @JsonProperty", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391108190", "createdAt": "2020-03-11T16:39:47Z", "author": {"login": "atoulme"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/FlatTrace.java", "diffHunk": "@@ -273,6 +265,38 @@ public Builder error(final Optional<String> error) {\n       return this;\n     }\n \n+    public String getType() {\n+      return type;\n+    }\n+\n+    public int getSubtraces() {\n+      return subtraces;\n+    }\n+\n+    public List<Integer> getTraceAddress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzg1MTM3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjo0MDo1MFrOF0_ZYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDowNzoyN1rOF1gGUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwODk2MA==", "bodyText": "Is 8 here a magic number?", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391108960", "createdAt": "2020-03-11T16:40:50Z", "author": {"login": "atoulme"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.Trace;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MiningBeneficiaryCalculator;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Stream;\n+\n+public class RewardTraceGenerator {\n+\n+  private static final String REWARD_LABEL = \"reward\";\n+  private static final String BLOCK_LABEL = \"block\";\n+  private static final String UNCLE_LABEL = \"uncle\";\n+\n+  /**\n+   * Generates a stream of reward {@link Trace} from the passed {@link Block} data.\n+   *\n+   * @param protocolSchedule the {@link ProtocolSchedule} to use\n+   * @param block the current {@link Block} to use\n+   * @return a stream of generated reward traces {@link Trace}\n+   */\n+  public static Stream<Trace> generateFromBlock(\n+      final ProtocolSchedule<?> protocolSchedule, final Block block) {\n+\n+    final List<Trace> flatTraces = new ArrayList<>();\n+\n+    final BlockHeader blockHeader = block.getHeader();\n+    final ProtocolSpec<?> protocolSpec = protocolSchedule.getByBlockNumber(blockHeader.getNumber());\n+    final MiningBeneficiaryCalculator miningBeneficiaryCalculator =\n+        protocolSpec.getMiningBeneficiaryCalculator();\n+\n+    final AtomicReference<Wei> totalBlockReward =\n+        new AtomicReference<>(protocolSpec.getBlockReward());\n+\n+    // add uncle reward traces\n+    block\n+        .getBody()\n+        .getOmmers()\n+        .forEach(\n+            ommerBlockHeader -> {\n+              final long distance = blockHeader.getNumber() - ommerBlockHeader.getNumber();\n+              final Wei blockReward = protocolSpec.getBlockReward();\n+              final Wei ommerReward =\n+                  blockReward.subtract(blockReward.multiply(distance).divide(8));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMwNDI5Nw==", "bodyText": "This is a magic number, along with 32, and yikes it's everywhere.  We need to factor it out but that is out of scope for this PR, I opened #452 and added a good first issue tag.", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391304297", "createdAt": "2020-03-11T22:22:10Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.Trace;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MiningBeneficiaryCalculator;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Stream;\n+\n+public class RewardTraceGenerator {\n+\n+  private static final String REWARD_LABEL = \"reward\";\n+  private static final String BLOCK_LABEL = \"block\";\n+  private static final String UNCLE_LABEL = \"uncle\";\n+\n+  /**\n+   * Generates a stream of reward {@link Trace} from the passed {@link Block} data.\n+   *\n+   * @param protocolSchedule the {@link ProtocolSchedule} to use\n+   * @param block the current {@link Block} to use\n+   * @return a stream of generated reward traces {@link Trace}\n+   */\n+  public static Stream<Trace> generateFromBlock(\n+      final ProtocolSchedule<?> protocolSchedule, final Block block) {\n+\n+    final List<Trace> flatTraces = new ArrayList<>();\n+\n+    final BlockHeader blockHeader = block.getHeader();\n+    final ProtocolSpec<?> protocolSpec = protocolSchedule.getByBlockNumber(blockHeader.getNumber());\n+    final MiningBeneficiaryCalculator miningBeneficiaryCalculator =\n+        protocolSpec.getMiningBeneficiaryCalculator();\n+\n+    final AtomicReference<Wei> totalBlockReward =\n+        new AtomicReference<>(protocolSpec.getBlockReward());\n+\n+    // add uncle reward traces\n+    block\n+        .getBody()\n+        .getOmmers()\n+        .forEach(\n+            ommerBlockHeader -> {\n+              final long distance = blockHeader.getNumber() - ommerBlockHeader.getNumber();\n+              final Wei blockReward = protocolSpec.getBlockReward();\n+              final Wei ommerReward =\n+                  blockReward.subtract(blockReward.multiply(distance).divide(8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwODk2MA=="}, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NDc1NQ==", "bodyText": "I just made a modification that uses the BlockProcessor and I added tests to verify that the RewardTracegenerator is using the processor to calculate the rewards", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391644755", "createdAt": "2020-03-12T14:07:27Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.Trace;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MiningBeneficiaryCalculator;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Stream;\n+\n+public class RewardTraceGenerator {\n+\n+  private static final String REWARD_LABEL = \"reward\";\n+  private static final String BLOCK_LABEL = \"block\";\n+  private static final String UNCLE_LABEL = \"uncle\";\n+\n+  /**\n+   * Generates a stream of reward {@link Trace} from the passed {@link Block} data.\n+   *\n+   * @param protocolSchedule the {@link ProtocolSchedule} to use\n+   * @param block the current {@link Block} to use\n+   * @return a stream of generated reward traces {@link Trace}\n+   */\n+  public static Stream<Trace> generateFromBlock(\n+      final ProtocolSchedule<?> protocolSchedule, final Block block) {\n+\n+    final List<Trace> flatTraces = new ArrayList<>();\n+\n+    final BlockHeader blockHeader = block.getHeader();\n+    final ProtocolSpec<?> protocolSpec = protocolSchedule.getByBlockNumber(blockHeader.getNumber());\n+    final MiningBeneficiaryCalculator miningBeneficiaryCalculator =\n+        protocolSpec.getMiningBeneficiaryCalculator();\n+\n+    final AtomicReference<Wei> totalBlockReward =\n+        new AtomicReference<>(protocolSpec.getBlockReward());\n+\n+    // add uncle reward traces\n+    block\n+        .getBody()\n+        .getOmmers()\n+        .forEach(\n+            ommerBlockHeader -> {\n+              final long distance = blockHeader.getNumber() - ommerBlockHeader.getNumber();\n+              final Wei blockReward = protocolSpec.getBlockReward();\n+              final Wei ommerReward =\n+                  blockReward.subtract(blockReward.multiply(distance).divide(8));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwODk2MA=="}, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMzg1NTQ1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNjo0MTo0NlrOF0_b5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDowNzo0MFrOF1gG6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwOTYwNw==", "bodyText": "Same, is 32 a magic number? Should that logic be tested elsewhere? It may be impacted by the chain spec (ETH vs ETC have different block rewards)", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391109607", "createdAt": "2020-03-11T16:41:46Z", "author": {"login": "atoulme"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.Trace;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MiningBeneficiaryCalculator;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Stream;\n+\n+public class RewardTraceGenerator {\n+\n+  private static final String REWARD_LABEL = \"reward\";\n+  private static final String BLOCK_LABEL = \"block\";\n+  private static final String UNCLE_LABEL = \"uncle\";\n+\n+  /**\n+   * Generates a stream of reward {@link Trace} from the passed {@link Block} data.\n+   *\n+   * @param protocolSchedule the {@link ProtocolSchedule} to use\n+   * @param block the current {@link Block} to use\n+   * @return a stream of generated reward traces {@link Trace}\n+   */\n+  public static Stream<Trace> generateFromBlock(\n+      final ProtocolSchedule<?> protocolSchedule, final Block block) {\n+\n+    final List<Trace> flatTraces = new ArrayList<>();\n+\n+    final BlockHeader blockHeader = block.getHeader();\n+    final ProtocolSpec<?> protocolSpec = protocolSchedule.getByBlockNumber(blockHeader.getNumber());\n+    final MiningBeneficiaryCalculator miningBeneficiaryCalculator =\n+        protocolSpec.getMiningBeneficiaryCalculator();\n+\n+    final AtomicReference<Wei> totalBlockReward =\n+        new AtomicReference<>(protocolSpec.getBlockReward());\n+\n+    // add uncle reward traces\n+    block\n+        .getBody()\n+        .getOmmers()\n+        .forEach(\n+            ommerBlockHeader -> {\n+              final long distance = blockHeader.getNumber() - ommerBlockHeader.getNumber();\n+              final Wei blockReward = protocolSpec.getBlockReward();\n+              final Wei ommerReward =\n+                  blockReward.subtract(blockReward.multiply(distance).divide(8));\n+              final Action.Builder uncleActionBuilder =\n+                  Action.builder()\n+                      .author(\n+                          miningBeneficiaryCalculator\n+                              .calculateBeneficiary(ommerBlockHeader)\n+                              .toHexString())\n+                      .rewardType(UNCLE_LABEL)\n+                      .value(ommerReward.toShortHexString());\n+              flatTraces.add(\n+                  RewardTrace.builder()\n+                      .actionBuilder(uncleActionBuilder)\n+                      .blockHash(block.getHash().toHexString())\n+                      .blockNumber(blockHeader.getNumber())\n+                      .type(REWARD_LABEL)\n+                      .build());\n+\n+              // add uncle inclusion reward\n+              totalBlockReward.set(totalBlockReward.get().add(blockReward.divide(32)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY0NDkwNQ==", "bodyText": "The same I just made a modification that uses the blockProcessor and I added tests to verify that the RewardTracegenerator is using the processor to calculate the rewards", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r391644905", "createdAt": "2020-03-12T14:07:40Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/RewardTraceGenerator.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.flat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.tracing.Trace;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MiningBeneficiaryCalculator;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Stream;\n+\n+public class RewardTraceGenerator {\n+\n+  private static final String REWARD_LABEL = \"reward\";\n+  private static final String BLOCK_LABEL = \"block\";\n+  private static final String UNCLE_LABEL = \"uncle\";\n+\n+  /**\n+   * Generates a stream of reward {@link Trace} from the passed {@link Block} data.\n+   *\n+   * @param protocolSchedule the {@link ProtocolSchedule} to use\n+   * @param block the current {@link Block} to use\n+   * @return a stream of generated reward traces {@link Trace}\n+   */\n+  public static Stream<Trace> generateFromBlock(\n+      final ProtocolSchedule<?> protocolSchedule, final Block block) {\n+\n+    final List<Trace> flatTraces = new ArrayList<>();\n+\n+    final BlockHeader blockHeader = block.getHeader();\n+    final ProtocolSpec<?> protocolSpec = protocolSchedule.getByBlockNumber(blockHeader.getNumber());\n+    final MiningBeneficiaryCalculator miningBeneficiaryCalculator =\n+        protocolSpec.getMiningBeneficiaryCalculator();\n+\n+    final AtomicReference<Wei> totalBlockReward =\n+        new AtomicReference<>(protocolSpec.getBlockReward());\n+\n+    // add uncle reward traces\n+    block\n+        .getBody()\n+        .getOmmers()\n+        .forEach(\n+            ommerBlockHeader -> {\n+              final long distance = blockHeader.getNumber() - ommerBlockHeader.getNumber();\n+              final Wei blockReward = protocolSpec.getBlockReward();\n+              final Wei ommerReward =\n+                  blockReward.subtract(blockReward.multiply(distance).divide(8));\n+              final Action.Builder uncleActionBuilder =\n+                  Action.builder()\n+                      .author(\n+                          miningBeneficiaryCalculator\n+                              .calculateBeneficiary(ommerBlockHeader)\n+                              .toHexString())\n+                      .rewardType(UNCLE_LABEL)\n+                      .value(ommerReward.toShortHexString());\n+              flatTraces.add(\n+                  RewardTrace.builder()\n+                      .actionBuilder(uncleActionBuilder)\n+                      .blockHash(block.getHash().toHexString())\n+                      .blockNumber(blockHeader.getNumber())\n+                      .type(REWARD_LABEL)\n+                      .build());\n+\n+              // add uncle inclusion reward\n+              totalBlockReward.set(totalBlockReward.get().add(blockReward.divide(32)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTEwOTYwNw=="}, "originalCommit": {"oid": "fd5ad39584a475f3b86bc80808d03132eb079cc6"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzA0MDc2OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BlockProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo0Mzo1OVrOF28tIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo0Mzo1OVrOF28tIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE2MjAxNw==", "bodyText": "I was hoping this ommer and block reward refactoring was going to happen in another follow on PR, but I'll allow it.", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r393162017", "createdAt": "2020-03-16T16:43:59Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BlockProcessor.java", "diffHunk": "@@ -80,4 +81,31 @@ Result processBlock(\n       BlockHeader blockHeader,\n       List<Transaction> transactions,\n       List<BlockHeader> ommers);\n+\n+  /**\n+   * Get ommer reward in ${@link Wei}\n+   *\n+   * @param blockReward reward of the block\n+   * @param blockNumber number of the block\n+   * @param ommerBlockNumber number of the block ommer\n+   * @return ommer reward\n+   */\n+  default Wei getOmmerReward(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85fd5dc7b20e65b48e293689d902bf90be9c73"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODQ2OTI1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/Action.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowODo0MVrOF3KvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowODo0MVrOF3KvMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MTkyMQ==", "bodyText": "I've had a lot of luck changing the order of the fields to match the desired output ordering.", "url": "https://github.com/hyperledger/besu/pull/449#discussion_r393391921", "createdAt": "2020-03-17T01:08:41Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/results/tracing/flat/Action.java", "diffHunk": "@@ -20,8 +20,24 @@\n import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.Quantity;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n \n @JsonInclude(NON_NULL)\n+@JsonPropertyOrder({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85fd5dc7b20e65b48e293689d902bf90be9c73"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1145, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}