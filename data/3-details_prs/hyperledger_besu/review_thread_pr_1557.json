{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMTk3ODgz", "number": 1557, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo0MzozNlrOE8tFZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0OToyOVrOFK98Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDg4Njc5OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/AbstractBlockProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo0MzozNlrOH4_Hhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOToyODoxM1rOH5R_dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxNjQyMg==", "bodyText": "org.hyperledger instead of io.hyperledger?", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529516422", "createdAt": "2020-11-24T12:43:36Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/AbstractBlockProcessor.java", "diffHunk": "@@ -46,6 +50,9 @@ TransactionReceipt create(\n \n   private static final Logger LOG = LogManager.getLogger();\n \n+  private static final Tracer tracer =\n+      OpenTelemetry.getGlobalTracer(\"io.hyperledger.besu.block\", \"1.0.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNTY1NQ==", "bodyText": "Fixed.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529825655", "createdAt": "2020-11-24T19:28:13Z", "author": {"login": "atoulme"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/AbstractBlockProcessor.java", "diffHunk": "@@ -46,6 +50,9 @@ TransactionReceipt create(\n \n   private static final Logger LOG = LogManager.getLogger();\n \n+  private static final Tracer tracer =\n+      OpenTelemetry.getGlobalTracer(\"io.hyperledger.besu.block\", \"1.0.0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxNjQyMg=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDg5MDU4OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo0NDozM1rOH4_Jyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo0NDozM1rOH4_Jyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxNzAwMg==", "bodyText": "org.hyperledger instead of io.hyperledger?", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529517002", "createdAt": "2020-11-24T12:44:33Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "diffHunk": "@@ -169,6 +198,7 @@ private JsonRpcHttpService(\n     this.authenticationService = authenticationService;\n     this.livenessService = livenessService;\n     this.readinessService = readinessService;\n+    this.tracer = OpenTelemetry.getGlobalTracer(\"io.hyperledger.besu.jsonrpc\", \"1.0.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDkwMjUzOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo0NzozMVrOH4_Q3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxOToyNTo1OFrOIKGoQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA==", "bodyText": "Is OpenTelemetry \"always on\"?  Should there be a way for the end user to \"opt out\" like we do for other metrics collection?", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529518814", "createdAt": "2020-11-24T12:47:31Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "diffHunk": "@@ -279,6 +310,32 @@ private Router buildRouter() {\n     return router;\n   }\n \n+  private void createSpan(final RoutingContext routingContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjMyNg==", "bodyText": "Asking for the best way on this.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529826326", "createdAt": "2020-11-24T19:29:24Z", "author": {"login": "atoulme"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "diffHunk": "@@ -279,6 +310,32 @@ private Router buildRouter() {\n     return router;\n   }\n \n+  private void createSpan(final RoutingContext routingContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzMTc1Nw==", "bodyText": "If it was just the one create span call it would be easy, but it looks like every request has to possibly add a span, so plumbing the metrics configs through seems a bit much... unless performance suffers.  We have a benchmark where rpcs is the bottleneck, so if it's a problem I'd expect those benchmarks to fail.  If you are willing to risk a call for a revert if performance takes a hit it can stay as-is.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529831757", "createdAt": "2020-11-24T19:39:08Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "diffHunk": "@@ -279,6 +310,32 @@ private Router buildRouter() {\n     return router;\n   }\n \n+  private void createSpan(final RoutingContext routingContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0Mzk2NQ==", "bodyText": "So I'm asking, and so far if we don't use a metrics backend, the spans are created, but in the words of OpenTelemetry devs, they then \"fall to the floor\" as there is no export enabled.\nIf we want to even avoid the object allocation of creating span objects, we can add a check in the Besu code that disables creating span objects.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529843965", "createdAt": "2020-11-24T20:01:18Z", "author": {"login": "atoulme"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "diffHunk": "@@ -279,6 +310,32 @@ private Router buildRouter() {\n     return router;\n   }\n \n+  private void createSpan(final RoutingContext routingContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NDg4MQ==", "bodyText": "Object allocation is my worry, but I'm thinking if it matters it will only show up under load, which we have a test set up to detect (but only for committed code).\nSo if the test shows a regression the worst case scenario of a commit is a rollback and then a fix.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529974881", "createdAt": "2020-11-24T22:59:44Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "diffHunk": "@@ -279,6 +310,32 @@ private Router buildRouter() {\n     return router;\n   }\n \n+  private void createSpan(final RoutingContext routingContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NTI4MQ==", "bodyText": "I am willing to try this out and see how the performance is impacted.\nInitially I had a span collecting trie performance, but I reverted it, as it was too verbose. I believe the AbstractBlockProcessor might be too verbose as well.\nWe'll see - it would be great to understand better if there are specific use cases (block imports, mining) where tracing helps specifically.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r547465281", "createdAt": "2020-12-22T19:25:58Z", "author": {"login": "atoulme"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "diffHunk": "@@ -279,6 +310,32 @@ private Router buildRouter() {\n     return router;\n   }\n \n+  private void createSpan(final RoutingContext routingContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDkxMTk0OnYy", "diffSide": "RIGHT", "path": "gradle/versions.gradle", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo1MDowMlrOH4_Wqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMjo0NTowNVrOIJsb8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDI5OQ==", "bodyText": "Ugghh... shaded jars.  Is this necessary?  They have a tendency of making security based library upgrades difficult for the shaded classes.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529520299", "createdAt": "2020-11-24T12:50:02Z", "author": {"login": "shemnon"}, "path": "gradle/versions.gradle", "diffHunk": "@@ -45,18 +45,21 @@ dependencyManagement {\n \n     dependency 'info.picocli:picocli:4.5.0'\n \n-    dependency 'io.grpc:grpc-netty:1.33.0'\n+    dependency 'io.grpc:grpc-netty-shaded:1.33.1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNTg2Mw==", "bodyText": "Asking the otel folks about this.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529825863", "createdAt": "2020-11-24T19:28:36Z", "author": {"login": "atoulme"}, "path": "gradle/versions.gradle", "diffHunk": "@@ -45,18 +45,21 @@ dependencyManagement {\n \n     dependency 'info.picocli:picocli:4.5.0'\n \n-    dependency 'io.grpc:grpc-netty:1.33.0'\n+    dependency 'io.grpc:grpc-netty-shaded:1.33.1'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDI5OQ=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0NDcxMQ==", "bodyText": "Some pushback, as the grpc project relies and documents the shaded jar as their distribution of choice. That said, your concern is valid, and I'll put in the work to replace the shaded jar with the detail of dependencies.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529944711", "createdAt": "2020-11-24T22:31:05Z", "author": {"login": "atoulme"}, "path": "gradle/versions.gradle", "diffHunk": "@@ -45,18 +45,21 @@ dependencyManagement {\n \n     dependency 'info.picocli:picocli:4.5.0'\n \n-    dependency 'io.grpc:grpc-netty:1.33.0'\n+    dependency 'io.grpc:grpc-netty-shaded:1.33.1'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDI5OQ=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAzNjE0Ng==", "bodyText": "OK, I have taken care of the shaded jar.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r547036146", "createdAt": "2020-12-22T02:45:05Z", "author": {"login": "atoulme"}, "path": "gradle/versions.gradle", "diffHunk": "@@ -45,18 +45,21 @@ dependencyManagement {\n \n     dependency 'info.picocli:picocli:4.5.0'\n \n-    dependency 'io.grpc:grpc-netty:1.33.0'\n+    dependency 'io.grpc:grpc-netty-shaded:1.33.1'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDI5OQ=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDkxNTkzOnYy", "diffSide": "RIGHT", "path": "gradle/wrapper/gradle-wrapper.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo1MTowNFrOH4_Y_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOToyODo1MlrOH5SA6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDg5NA==", "bodyText": "unneeded.  please remove.  it makes assessing the history of the file difficult.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529520894", "createdAt": "2020-11-24T12:51:04Z", "author": {"login": "shemnon"}, "path": "gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,5 +1,6 @@\n+#Wed Nov 18 15:38:00 PST 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjAyNA==", "bodyText": "Sorry, oversight. Removed.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529826024", "createdAt": "2020-11-24T19:28:52Z", "author": {"login": "atoulme"}, "path": "gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,5 +1,6 @@\n+#Wed Nov 18 15:38:00 PST 2020", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDg5NA=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDkyMTY2OnYy", "diffSide": "RIGHT", "path": "metrics/core/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo1MjozMFrOH4_cUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo1MjozMFrOH4_cUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMTc0Ng==", "bodyText": "Again, is the shaded version really necessary? I have concerns about proper security auditing.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529521746", "createdAt": "2020-11-24T12:52:30Z", "author": {"login": "shemnon"}, "path": "metrics/core/build.gradle", "diffHunk": "@@ -38,11 +38,12 @@ dependencies {\n   implementation project(':plugin-api')\n \n   implementation 'com.google.guava:guava'\n-  implementation 'io.grpc:grpc-netty'\n+  implementation 'io.grpc:grpc-netty-shaded'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDkyNjc0OnYy", "diffSide": "RIGHT", "path": "services/pipeline/src/main/java/org/hyperledger/besu/services/pipeline/Pipeline.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMjo1Mzo0OFrOH4_fUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOToyOTowOVrOH5SBiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMjUxMw==", "bodyText": "org.hyperledger not io.hyperledger", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529522513", "createdAt": "2020-11-24T12:53:48Z", "author": {"login": "shemnon"}, "path": "services/pipeline/src/main/java/org/hyperledger/besu/services/pipeline/Pipeline.java", "diffHunk": "@@ -37,6 +41,8 @@\n   private final Collection<Pipe<?>> pipes;\n   private final CompleterStage<?> completerStage;\n   private final AtomicBoolean started = new AtomicBoolean(false);\n+  private final Tracer tracer =\n+      OpenTelemetry.getGlobalTracer(\"io.hyperledger.besu.services.pipeline\", \"1.0.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjE4NQ==", "bodyText": "Fixed", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529826185", "createdAt": "2020-11-24T19:29:09Z", "author": {"login": "atoulme"}, "path": "services/pipeline/src/main/java/org/hyperledger/besu/services/pipeline/Pipeline.java", "diffHunk": "@@ -37,6 +41,8 @@\n   private final Collection<Pipe<?>> pipes;\n   private final CompleterStage<?> completerStage;\n   private final AtomicBoolean started = new AtomicBoolean(false);\n+  private final Tracer tracer =\n+      OpenTelemetry.getGlobalTracer(\"io.hyperledger.besu.services.pipeline\", \"1.0.0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMjUxMw=="}, "originalCommit": {"oid": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDQxMDc0OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0MDoxMVrOIN4qcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyNjoyN1rOIN6Urw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMDc2OA==", "bodyText": "Wrap these two lines inside an if (node.isMetricsEnabled() || metricsConfiguration.isPushEnabled()) { ... }", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551430768", "createdAt": "2021-01-04T16:40:11Z", "author": {"login": "shemnon"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java", "diffHunk": "@@ -204,6 +204,8 @@ public void startNode(final BesuNode node) {\n         params.add(\"--metrics-category\");\n         params.add(((Enum<?>) category).name());\n       }\n+      params.add(\"--metrics-protocol\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1Nzk2Nw==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551457967", "createdAt": "2021-01-04T17:26:27Z", "author": {"login": "atoulme"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java", "diffHunk": "@@ -204,6 +204,8 @@ public void startNode(final BesuNode node) {\n         params.add(\"--metrics-category\");\n         params.add(((Enum<?>) category).name());\n       }\n+      params.add(\"--metrics-protocol\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMDc2OA=="}, "originalCommit": {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDQzMDQ1OnYy", "diffSide": "LEFT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0NDo1NVrOIN42SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoxMjozNlrOIN529g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMzgwMA==", "bodyText": "What changed so that we no longer need the java agent for OTEL?  I'm not seeing anything code-wise so I'm concerned this is an accidental deletion.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551433800", "createdAt": "2021-01-04T16:44:55Z", "author": {"login": "shemnon"}, "path": "build.gradle", "diffHunk": "@@ -504,19 +502,6 @@ def tweakStartScript(createScriptTask) {\n \n   createScriptTask.unixScript.text = createScriptTask.unixScript.text.replace('BESU_HOME', '\\$APP_HOME')\n   createScriptTask.windowsScript.text = createScriptTask.windowsScript.text.replace('BESU_HOME', '%~dp0..')\n-  // OpenTelemetry Wiring for unix scripts\n-  def agentFileName = configurations.javaAgent.singleFile.toPath().getFileName()\n-  def unixRegex = $/exec \"$$JAVACMD\" /$\n-  def forwardSlash = \"/\"\n-  def unixReplacement = $/if [ -n \"$$TRACING\" ];then\n- TRACING_AGENT=\"-javaagent:$$APP_HOME/agent${forwardSlash}${agentFileName}\"\n-fi\n-exec \"$$JAVACMD\" $$TRACING_AGENT /$\n-  createScriptTask.unixScript.text = createScriptTask.unixScript.text.replace(unixRegex, unixReplacement)\n-  // OpenTelemetry Wiring for windows scripts\n-  def windowsRegex = $/\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS%/$\n-  def windowsReplacement = $/if Defined TRACING (TRACING_AGENT=\"-javaagent:\" \"%APP_HOME%\\agent\\/$ + agentFileName + '\")\\r\\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %TRACING_AGENT%'\n-  createScriptTask.windowsScript.text = createScriptTask.windowsScript.text.replace(windowsRegex, windowsReplacement)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1MDM1OA==", "bodyText": "The agent inspects the code and injects changes at runtime to create traces from well-known libraries such as SQL querying or HTTP. We now do this manually and in a much more targeted fashion. We no longer need to use automatic instrumentation. Automatic instrumentation could also create extra traces that don't provide as much value.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551450358", "createdAt": "2021-01-04T17:12:36Z", "author": {"login": "atoulme"}, "path": "build.gradle", "diffHunk": "@@ -504,19 +502,6 @@ def tweakStartScript(createScriptTask) {\n \n   createScriptTask.unixScript.text = createScriptTask.unixScript.text.replace('BESU_HOME', '\\$APP_HOME')\n   createScriptTask.windowsScript.text = createScriptTask.windowsScript.text.replace('BESU_HOME', '%~dp0..')\n-  // OpenTelemetry Wiring for unix scripts\n-  def agentFileName = configurations.javaAgent.singleFile.toPath().getFileName()\n-  def unixRegex = $/exec \"$$JAVACMD\" /$\n-  def forwardSlash = \"/\"\n-  def unixReplacement = $/if [ -n \"$$TRACING\" ];then\n- TRACING_AGENT=\"-javaagent:$$APP_HOME/agent${forwardSlash}${agentFileName}\"\n-fi\n-exec \"$$JAVACMD\" $$TRACING_AGENT /$\n-  createScriptTask.unixScript.text = createScriptTask.unixScript.text.replace(unixRegex, unixReplacement)\n-  // OpenTelemetry Wiring for windows scripts\n-  def windowsRegex = $/\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS%/$\n-  def windowsReplacement = $/if Defined TRACING (TRACING_AGENT=\"-javaagent:\" \"%APP_HOME%\\agent\\/$ + agentFileName + '\")\\r\\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %TRACING_AGENT%'\n-  createScriptTask.windowsScript.text = createScriptTask.windowsScript.text.replace(windowsRegex, windowsReplacement)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMzgwMA=="}, "originalCommit": {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDQzOTcyOnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0NzoxMVrOIN470Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzoyNjozNFrOIN6U4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNTIxNw==", "bodyText": "Should we add counter name as a logging arg?  Same for timer and gauge.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551435217", "createdAt": "2021-01-04T16:47:11Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -151,6 +151,7 @@ private Object extractValue(final MetricData.Type type, final MetricData.Point p\n       final String name,\n       final String help,\n       final String... labelNames) {\n+    LOG.trace(\"Creating a counter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1ODAxOQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551458019", "createdAt": "2021-01-04T17:26:34Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -151,6 +151,7 @@ private Object extractValue(final MetricData.Type type, final MetricData.Point p\n       final String name,\n       final String help,\n       final String... labelNames) {\n+    LOG.trace(\"Creating a counter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNTIxNw=="}, "originalCommit": {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDQ0OTM0OnYy", "diffSide": "RIGHT", "path": "metrics/core/src/test/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetryMetricsSystemTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNjo0OToyOVrOIN5Bmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDowNzozNFrOIN_WkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNjY5OQ==", "bodyText": "style nit:  7.0 would be less likely to be confused with hex encoded 125.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551436699", "createdAt": "2021-01-04T16:49:29Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/test/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetryMetricsSystemTest.java", "diffHunk": "@@ -175,12 +172,9 @@ public void shouldCreateObservationFromGauge() {\n     final ObservableMetricsSystem localMetricSystem =\n         MetricsSystemFactory.create(metricsConfiguration);\n     localMetricSystem.createGauge(RPC, \"myValue\", \"Help\", () -> 7d);\n-    List<MetricData.ValueAtPercentile> values = new ArrayList<>();\n-    values.add(MetricData.ValueAtPercentile.create(0, 7d));\n-    values.add(MetricData.ValueAtPercentile.create(100, 7d));\n \n     assertThat(localMetricSystem.streamObservations())\n-        .containsExactlyInAnyOrder(new Observation(RPC, \"myValue\", values, emptyList()));\n+        .containsExactlyInAnyOrder(new Observation(RPC, \"myValue\", 7d, emptyList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1Mzc0Mw==", "bodyText": "d stands for double - I'll edit to make sure it's all .0 instead, it's indeed surprising.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551453743", "createdAt": "2021-01-04T17:18:27Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/test/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetryMetricsSystemTest.java", "diffHunk": "@@ -175,12 +172,9 @@ public void shouldCreateObservationFromGauge() {\n     final ObservableMetricsSystem localMetricSystem =\n         MetricsSystemFactory.create(metricsConfiguration);\n     localMetricSystem.createGauge(RPC, \"myValue\", \"Help\", () -> 7d);\n-    List<MetricData.ValueAtPercentile> values = new ArrayList<>();\n-    values.add(MetricData.ValueAtPercentile.create(0, 7d));\n-    values.add(MetricData.ValueAtPercentile.create(100, 7d));\n \n     assertThat(localMetricSystem.streamObservations())\n-        .containsExactlyInAnyOrder(new Observation(RPC, \"myValue\", values, emptyList()));\n+        .containsExactlyInAnyOrder(new Observation(RPC, \"myValue\", 7d, emptyList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNjY5OQ=="}, "originalCommit": {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1ODA3OQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551458079", "createdAt": "2021-01-04T17:26:41Z", "author": {"login": "atoulme"}, "path": "metrics/core/src/test/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetryMetricsSystemTest.java", "diffHunk": "@@ -175,12 +172,9 @@ public void shouldCreateObservationFromGauge() {\n     final ObservableMetricsSystem localMetricSystem =\n         MetricsSystemFactory.create(metricsConfiguration);\n     localMetricSystem.createGauge(RPC, \"myValue\", \"Help\", () -> 7d);\n-    List<MetricData.ValueAtPercentile> values = new ArrayList<>();\n-    values.add(MetricData.ValueAtPercentile.create(0, 7d));\n-    values.add(MetricData.ValueAtPercentile.create(100, 7d));\n \n     assertThat(localMetricSystem.streamObservations())\n-        .containsExactlyInAnyOrder(new Observation(RPC, \"myValue\", values, emptyList()));\n+        .containsExactlyInAnyOrder(new Observation(RPC, \"myValue\", 7d, emptyList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNjY5OQ=="}, "originalCommit": {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0MDM2OA==", "bodyText": "Some style guides I've seen insist on one case for 0xhex encoded letters and another case for type designators.  Typically capitals for the types and lower case for actual digits.", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551540368", "createdAt": "2021-01-04T20:07:34Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/test/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetryMetricsSystemTest.java", "diffHunk": "@@ -175,12 +172,9 @@ public void shouldCreateObservationFromGauge() {\n     final ObservableMetricsSystem localMetricSystem =\n         MetricsSystemFactory.create(metricsConfiguration);\n     localMetricSystem.createGauge(RPC, \"myValue\", \"Help\", () -> 7d);\n-    List<MetricData.ValueAtPercentile> values = new ArrayList<>();\n-    values.add(MetricData.ValueAtPercentile.create(0, 7d));\n-    values.add(MetricData.ValueAtPercentile.create(100, 7d));\n \n     assertThat(localMetricSystem.streamObservations())\n-        .containsExactlyInAnyOrder(new Observation(RPC, \"myValue\", values, emptyList()));\n+        .containsExactlyInAnyOrder(new Observation(RPC, \"myValue\", 7d, emptyList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNjY5OQ=="}, "originalCommit": {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1340, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}