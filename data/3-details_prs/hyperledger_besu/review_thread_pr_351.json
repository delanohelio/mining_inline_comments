{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NDg5Mzg0", "number": 351, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQyMDo1MDozNVrODcb2iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoxMjozOFrODctU1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTQzMDQ5OnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQyMDo1MDozNVrOFkfCqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjo0MjoxNFrOFk4FJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMTY0Mg==", "bodyText": "I'm concerned about how this would perform under performance testing load.  This addresses the immediate problem but introduces performance debt.  This loop will get called a lot.\nCould we replace the Map<Address, SortedMap<Long, TransactionInfo>> with a different structure?  Perhaps instead of a Sorted map a new object that has the infos in a nonce-sorted list and then a sorted list of \"gaps\" (TreeSet, or maybe a PriorityQueue) and when queried we just peek the lowest number and return that, if there are no gaps then we peek the nonce of the last transaction info and return that value, and if empty query the account as a last resort.  We would need to add logic for when we add and remove transactions to update the gap list.", "url": "https://github.com/hyperledger/besu/pull/351#discussion_r373801642", "createdAt": "2020-02-01T20:50:35Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactions.java", "diffHunk": "@@ -331,6 +331,11 @@ public OptionalLong getNextNonceForSender(final Address sender) {\n       if (transactionsForSender == null) {\n         return OptionalLong.empty();\n       }\n+      for (final Long nonce : transactionsForSender.keySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71c075cec8d8e2396eaa8710b7b4bf5ad8cdd3e5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxNDU5Mg==", "bodyText": "I understand your concern. You are right. I will work a better implementation.", "url": "https://github.com/hyperledger/besu/pull/351#discussion_r374014592", "createdAt": "2020-02-03T10:05:42Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactions.java", "diffHunk": "@@ -331,6 +331,11 @@ public OptionalLong getNextNonceForSender(final Address sender) {\n       if (transactionsForSender == null) {\n         return OptionalLong.empty();\n       }\n+      for (final Long nonce : transactionsForSender.keySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMTY0Mg=="}, "originalCommit": {"oid": "71c075cec8d8e2396eaa8710b7b4bf5ad8cdd3e5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxMTg3OA==", "bodyText": "Fixed 4e6b11e", "url": "https://github.com/hyperledger/besu/pull/351#discussion_r374211878", "createdAt": "2020-02-03T16:42:14Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactions.java", "diffHunk": "@@ -331,6 +331,11 @@ public OptionalLong getNextNonceForSender(final Address sender) {\n       if (transactionsForSender == null) {\n         return OptionalLong.empty();\n       }\n+      for (final Long nonce : transactionsForSender.keySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgwMTY0Mg=="}, "originalCommit": {"oid": "71c075cec8d8e2396eaa8710b7b4bf5ad8cdd3e5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDIyNzUwOnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionsForSenderInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjo1Mjo0M1rOFk4buQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjo1ODo1NVrOFk4pQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzY1Nw==", "bodyText": "I'm not sure this if is needed, I think LongStream might handle that in the case that the first is larger than the second", "url": "https://github.com/hyperledger/besu/pull/351#discussion_r374217657", "createdAt": "2020-02-03T16:52:43Z", "author": {"login": "RatanRSur"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionsForSenderInfo.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.ethereum.eth.transactions;\n+\n+import java.util.Iterator;\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+class TransactionsForSenderInfo {\n+  private final SortedMap<Long, PendingTransactions.TransactionInfo> transactionsInfos;\n+  private final Queue<Long> gaps = new PriorityQueue<>();\n+\n+  TransactionsForSenderInfo() {\n+    transactionsInfos = new TreeMap<>();\n+  }\n+\n+  void addTransactionToTrack(\n+      final long nonce, final PendingTransactions.TransactionInfo transactionInfo) {\n+    if (!transactionsInfos.isEmpty()) {\n+      updateGapsOnNewTransaction(nonce);\n+    }\n+    transactionsInfos.put(nonce, transactionInfo);\n+  }\n+\n+  private void updateGapsOnNewTransaction(final long nonce) {\n+    final long highestNonce = transactionsInfos.lastKey();\n+    if (nonce > (highestNonce + 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc4c3b51a0c4771a3caf5314d8b873524f08e36"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMTEyMQ==", "bodyText": "nice catch. fixed.", "url": "https://github.com/hyperledger/besu/pull/351#discussion_r374221121", "createdAt": "2020-02-03T16:58:55Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionsForSenderInfo.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.ethereum.eth.transactions;\n+\n+import java.util.Iterator;\n+import java.util.PriorityQueue;\n+import java.util.Queue;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.stream.LongStream;\n+\n+class TransactionsForSenderInfo {\n+  private final SortedMap<Long, PendingTransactions.TransactionInfo> transactionsInfos;\n+  private final Queue<Long> gaps = new PriorityQueue<>();\n+\n+  TransactionsForSenderInfo() {\n+    transactionsInfos = new TreeMap<>();\n+  }\n+\n+  void addTransactionToTrack(\n+      final long nonce, final PendingTransactions.TransactionInfo transactionInfo) {\n+    if (!transactionsInfos.isEmpty()) {\n+      updateGapsOnNewTransaction(nonce);\n+    }\n+    transactionsInfos.put(nonce, transactionInfo);\n+  }\n+\n+  private void updateGapsOnNewTransaction(final long nonce) {\n+    final long highestNonce = transactionsInfos.lastKey();\n+    if (nonce > (highestNonce + 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzY1Nw=="}, "originalCommit": {"oid": "acc4c3b51a0c4771a3caf5314d8b873524f08e36"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDI5MzM1OnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionsTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoxMjozOFrOFk5E7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzoyMToxMVrOFk5WFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyODIwNA==", "bodyText": "Can we add an assert for \"1\" prior to adding any transactions?", "url": "https://github.com/hyperledger/besu/pull/351#discussion_r374228204", "createdAt": "2020-02-03T17:12:38Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionsTest.java", "diffHunk": "@@ -619,4 +619,26 @@ public void shouldNotIncrementAddedCounterWhenLocalTransactionAlreadyPresent() {\n     assertThat(metricsSystem.getCounterValue(ADDED_COUNTER, LOCAL)).isEqualTo(0);\n     assertThat(metricsSystem.getCounterValue(ADDED_COUNTER, REMOTE)).isEqualTo(1);\n   }\n+\n+  @Test\n+  public void assertThatCorrectNonceIsReturned() {\n+    addLocalTransactions(1, 2, 4, 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24906388b933dd02f54f39c6aba6a77c6d2b525c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyODQwMg==", "bodyText": "Or whatever the behavior should be when we have no TXes for a particular address", "url": "https://github.com/hyperledger/besu/pull/351#discussion_r374228402", "createdAt": "2020-02-03T17:13:02Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionsTest.java", "diffHunk": "@@ -619,4 +619,26 @@ public void shouldNotIncrementAddedCounterWhenLocalTransactionAlreadyPresent() {\n     assertThat(metricsSystem.getCounterValue(ADDED_COUNTER, LOCAL)).isEqualTo(0);\n     assertThat(metricsSystem.getCounterValue(ADDED_COUNTER, REMOTE)).isEqualTo(1);\n   }\n+\n+  @Test\n+  public void assertThatCorrectNonceIsReturned() {\n+    addLocalTransactions(1, 2, 4, 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyODIwNA=="}, "originalCommit": {"oid": "24906388b933dd02f54f39c6aba6a77c6d2b525c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIzMjU5OA==", "bodyText": "done. the expected behaviour is to return an empty Optional", "url": "https://github.com/hyperledger/besu/pull/351#discussion_r374232598", "createdAt": "2020-02-03T17:21:11Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionsTest.java", "diffHunk": "@@ -619,4 +619,26 @@ public void shouldNotIncrementAddedCounterWhenLocalTransactionAlreadyPresent() {\n     assertThat(metricsSystem.getCounterValue(ADDED_COUNTER, LOCAL)).isEqualTo(0);\n     assertThat(metricsSystem.getCounterValue(ADDED_COUNTER, REMOTE)).isEqualTo(1);\n   }\n+\n+  @Test\n+  public void assertThatCorrectNonceIsReturned() {\n+    addLocalTransactions(1, 2, 4, 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyODIwNA=="}, "originalCommit": {"oid": "24906388b933dd02f54f39c6aba6a77c6d2b525c"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1220, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}