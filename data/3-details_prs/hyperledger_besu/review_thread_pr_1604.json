{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2OTQ3NDYw", "number": 1604, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjoxNjoyNFrOE9aNIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMDozNToyMlrOE9wR9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODI3OTM3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjoxNjoyNFrOH6FhjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDowMDo1OFrOH6HYSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2OTk2NQ==", "bodyText": "We don't need the privacyController as a parameter as it is a field of the class.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530669965", "createdAt": "2020-11-25T22:16:24Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -94,19 +84,9 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n \n       final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n \n-      if (onchainPrivacyGroupsEnabled && maybePrivacyGroupId.isEmpty()) {\n-        return new JsonRpcErrorResponse(id, JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n-      }\n-\n       final Optional<PrivacyGroup> maybePrivacyGroup =\n-          onchainPrivacyGroupsEnabled\n-              ? findOnchainPrivacyGroup(\n-                  privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction)\n-              : findOffchainPrivacyGroup(privacyController, maybePrivacyGroupId, enclavePublicKey);\n-\n-      if (onchainPrivacyGroupsEnabled && maybePrivacyGroup.isEmpty()) {\n-        return new JsonRpcErrorResponse(id, JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n-      }\n+          findPrivacyGroup(\n+              privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwMDM2MQ==", "bodyText": "Good catch! Fixed!", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530700361", "createdAt": "2020-11-26T00:00:58Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -94,19 +84,9 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n \n       final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n \n-      if (onchainPrivacyGroupsEnabled && maybePrivacyGroupId.isEmpty()) {\n-        return new JsonRpcErrorResponse(id, JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n-      }\n-\n       final Optional<PrivacyGroup> maybePrivacyGroup =\n-          onchainPrivacyGroupsEnabled\n-              ? findOnchainPrivacyGroup(\n-                  privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction)\n-              : findOffchainPrivacyGroup(privacyController, maybePrivacyGroupId, enclavePublicKey);\n-\n-      if (onchainPrivacyGroupsEnabled && maybePrivacyGroup.isEmpty()) {\n-        return new JsonRpcErrorResponse(id, JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n-      }\n+          findPrivacyGroup(\n+              privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY2OTk2NQ=="}, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODI5NjA5OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjoyMzoyMlrOH6FrSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMDozMjo0OVrOH6H17g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MjQ1OA==", "bodyText": "The tests for OnChainEeaSendRawTransaction should be in a class named OnChainEeaSendRawTransactionTest.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530672458", "createdAt": "2020-11-25T22:23:22Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java", "diffHunk": "@@ -238,8 +237,8 @@ public void validTransactionPrivacyGroupIsSentToTransactionPool() {\n   @Test\n   public void validOnChainTransactionPrivacyGroupIsSentToTransactionPool() {\n     method =\n-        new EeaSendRawTransaction(\n-            transactionPool, privacyController, enclavePublicKeyProvider, true);\n+        new OnChainEeaSendRawTransaction(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwNzk1MA==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530707950", "createdAt": "2020-11-26T00:32:49Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java", "diffHunk": "@@ -238,8 +237,8 @@ public void validTransactionPrivacyGroupIsSentToTransactionPool() {\n   @Test\n   public void validOnChainTransactionPrivacyGroupIsSentToTransactionPool() {\n     method =\n-        new EeaSendRawTransaction(\n-            transactionPool, privacyController, enclavePublicKeyProvider, true);\n+        new OnChainEeaSendRawTransaction(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MjQ1OA=="}, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODMwMTI4OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjoyNTozMVrOH6FuQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMToyMTo0MFrOH6IoCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MzIxNw==", "bodyText": "The test name seems to be wrong. It has nothing to do with what is being tested.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530673217", "createdAt": "2020-11-25T22:25:31Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java", "diffHunk": "@@ -334,8 +333,7 @@ public void offChainPrivacyGroupTransactionFailsWhenOnchainPrivacyGroupFeatureIs\n   @Test\n   public void onChainPrivacyGroupTransactionFailsWhenFeatureIsNotEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDc3Ng==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530720776", "createdAt": "2020-11-26T01:21:40Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransactionTest.java", "diffHunk": "@@ -334,8 +333,7 @@ public void offChainPrivacyGroupTransactionFailsWhenOnchainPrivacyGroupFeatureIs\n   @Test\n   public void onChainPrivacyGroupTransactionFailsWhenFeatureIsNotEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY3MzIxNw=="}, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODM2MDE4OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjo1MjowOFrOH6GQoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMToyNDowNlrOH6IqQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MjAxNg==", "bodyText": "We can remove Address.DEFAULT_PRIVACY from the method call and use it inside the createPMTAndAddToTxPool method.\nEach class is implementing its own version of createPMTAndAddToTxPool so it knows what address to use.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530682016", "createdAt": "2020-11-25T22:52:08Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -116,30 +96,18 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n             id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n       }\n \n-      final String privateTransactionLookupId =\n-          privacyController.sendTransaction(\n-              privateTransaction, enclavePublicKey, maybePrivacyGroup);\n-\n-      if (onchainPrivacyGroupsEnabled) {\n-        final Bytes privacyGroupId =\n-            maybePrivacyGroupId.orElseThrow(\n-                () ->\n-                    new RuntimeException(\n-                        JsonRpcError.OFFCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST.getMessage()));\n-        final Optional<String> addPayloadPrivateTransactionLookupId =\n-            privacyController.buildAndSendAddPayload(\n-                privateTransaction,\n-                Bytes32.wrap(privacyGroupId),\n-                enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-        return createPMTAndAddToTxPool(\n-            id,\n-            privateTransaction,\n-            buildCompoundLookupId(privateTransactionLookupId, addPayloadPrivateTransactionLookupId),\n-            Address.ONCHAIN_PRIVACY);\n-      } else { // legacy or pantheon transaction\n-        return createPMTAndAddToTxPool(\n-            id, privateTransaction, privateTransactionLookupId, Address.DEFAULT_PRIVACY);\n-      }\n+      final JsonRpcResponse ret =\n+          createPMTAndAddToTxPool(\n+              id,\n+              privateTransaction,\n+              maybePrivacyGroup,\n+              maybePrivacyGroupId,\n+              enclavePublicKey,\n+              Address.DEFAULT_PRIVACY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMTM0NA==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530721344", "createdAt": "2020-11-26T01:24:06Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -116,30 +96,18 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n             id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n       }\n \n-      final String privateTransactionLookupId =\n-          privacyController.sendTransaction(\n-              privateTransaction, enclavePublicKey, maybePrivacyGroup);\n-\n-      if (onchainPrivacyGroupsEnabled) {\n-        final Bytes privacyGroupId =\n-            maybePrivacyGroupId.orElseThrow(\n-                () ->\n-                    new RuntimeException(\n-                        JsonRpcError.OFFCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST.getMessage()));\n-        final Optional<String> addPayloadPrivateTransactionLookupId =\n-            privacyController.buildAndSendAddPayload(\n-                privateTransaction,\n-                Bytes32.wrap(privacyGroupId),\n-                enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-        return createPMTAndAddToTxPool(\n-            id,\n-            privateTransaction,\n-            buildCompoundLookupId(privateTransactionLookupId, addPayloadPrivateTransactionLookupId),\n-            Address.ONCHAIN_PRIVACY);\n-      } else { // legacy or pantheon transaction\n-        return createPMTAndAddToTxPool(\n-            id, privateTransaction, privateTransactionLookupId, Address.DEFAULT_PRIVACY);\n-      }\n+      final JsonRpcResponse ret =\n+          createPMTAndAddToTxPool(\n+              id,\n+              privateTransaction,\n+              maybePrivacyGroup,\n+              maybePrivacyGroupId,\n+              enclavePublicKey,\n+              Address.DEFAULT_PRIVACY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4MjAxNg=="}, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODM3NjY0OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMjo1OTo0OFrOH6GZ6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMToyNDo0NVrOH6IrAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NDM5Mw==", "bodyText": "We don't need to override this method as they always return the same name.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530684393", "createdAt": "2020-11-25T22:59:48Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  public String getName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMTUzNw==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530721537", "createdAt": "2020-11-26T01:24:45Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  public String getName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NDM5Mw=="}, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODM4MjcwOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzowMzowMVrOH6GdaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMToyNzo0MFrOH6IuDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NTI4OA==", "bodyText": "We are getting from the optional without checking if the value exists. If by any reason the id doesn't exist, this will cause errors that are hard to debug. It is probably worth adding a check and throwing an exception with an easy to read error msg.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530685288", "createdAt": "2020-11-25T23:03:01Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.EEA_SEND_RAW_TRANSACTION.getMethodName();\n+  }\n+\n+  @Override\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final PrivacyController privacyController,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    if (maybePrivacyGroupId.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+    }\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOnchainPrivacyGroup(\n+            privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n+    if (maybePrivacyGroup.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n+    }\n+    return maybePrivacyGroup;\n+  }\n+\n+  @Override\n+  JsonRpcResponse createPMTAndAddToTxPool(\n+      final Object id,\n+      final PrivateTransaction privateTransaction,\n+      final Optional<PrivacyGroup> maybePrivacyGroup,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final Address privacyPrecompiledAddress) {\n+    final Bytes privacyGroupId = maybePrivacyGroupId.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMjMxOQ==", "bodyText": "It is not checked here, but it is checked in the findPrivacyGroup method ...\nI'll put in a comment here that this has already been checked!", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530722319", "createdAt": "2020-11-26T01:27:40Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.EEA_SEND_RAW_TRANSACTION.getMethodName();\n+  }\n+\n+  @Override\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final PrivacyController privacyController,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    if (maybePrivacyGroupId.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+    }\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOnchainPrivacyGroup(\n+            privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n+    if (maybePrivacyGroup.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n+    }\n+    return maybePrivacyGroup;\n+  }\n+\n+  @Override\n+  JsonRpcResponse createPMTAndAddToTxPool(\n+      final Object id,\n+      final PrivateTransaction privateTransaction,\n+      final Optional<PrivacyGroup> maybePrivacyGroup,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final Address privacyPrecompiledAddress) {\n+    final Bytes privacyGroupId = maybePrivacyGroupId.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NTI4OA=="}, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODM4NzkzOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzowNTo1MlrOH6Ggbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTozMjoyNVrOH6IzCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NjA2Mg==", "bodyText": "The method getJsonRpcErrorResponse can be private :)", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530686062", "createdAt": "2020-11-25T23:05:52Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -171,15 +152,4 @@ JsonRpcErrorResponse getJsonRpcErrorResponse(\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMzU5Mw==", "bodyText": "it is used in both classes!", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530723593", "createdAt": "2020-11-26T01:32:25Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -171,15 +152,4 @@ JsonRpcErrorResponse getJsonRpcErrorResponse(\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4NjA2Mg=="}, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODQwMDc1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQyMzoxMjo1MFrOH6Gnyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMTo1MTo0M1rOH6JHOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4Nzk0Ng==", "bodyText": "I don't like the fact that this method is doing two things. We can probably break it into two.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530687946", "createdAt": "2020-11-25T23:12:50Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -148,15 +116,28 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n     }\n   }\n \n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final PrivacyController privacyController,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOffchainPrivacyGroup(privacyController, maybePrivacyGroupId, enclavePublicKey);\n+    return maybePrivacyGroup;\n+  }\n+\n   JsonRpcResponse createPMTAndAddToTxPool(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyODc2MA==", "bodyText": "Done!", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530728760", "createdAt": "2020-11-26T01:51:43Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -148,15 +116,28 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n     }\n   }\n \n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final PrivacyController privacyController,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOffchainPrivacyGroup(privacyController, maybePrivacyGroupId, enclavePublicKey);\n+    return maybePrivacyGroup;\n+  }\n+\n   JsonRpcResponse createPMTAndAddToTxPool(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDY4Nzk0Ng=="}, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODYyNDEzOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/JsonRpcErrorResponseException.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMToxOTo1OFrOH6ImKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo0OTo1NFrOH6LxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDI5OQ==", "bodyText": "is onchain privacy group id not available the only thing this error will ever be for?", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530720299", "createdAt": "2020-11-26T01:19:58Z", "author": {"login": "macfarla"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/JsonRpcErrorResponseException.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+\n+public class JsonRpcErrorResponseException extends RuntimeException {\n+\n+  private final JsonRpcError jsonRpcError;\n+\n+  public JsonRpcErrorResponseException(final JsonRpcError onchainPrivacyGroupIdNotAvailable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDYwNQ==", "bodyText": "or should it be a more generic term", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530720605", "createdAt": "2020-11-26T01:21:00Z", "author": {"login": "macfarla"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/JsonRpcErrorResponseException.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+\n+public class JsonRpcErrorResponseException extends RuntimeException {\n+\n+  private final JsonRpcError jsonRpcError;\n+\n+  public JsonRpcErrorResponseException(final JsonRpcError onchainPrivacyGroupIdNotAvailable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDI5OQ=="}, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MjI4MQ==", "bodyText": "done!", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530772281", "createdAt": "2020-11-26T04:49:54Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/JsonRpcErrorResponseException.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+\n+public class JsonRpcErrorResponseException extends RuntimeException {\n+\n+  private final JsonRpcError jsonRpcError;\n+\n+  public JsonRpcErrorResponseException(final JsonRpcError onchainPrivacyGroupIdNotAvailable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyMDI5OQ=="}, "originalCommit": {"oid": "eb693b1b79e184807e58dcaa4a9d7ce4b800252f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODg5MzQxOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo1NzowN1rOH6LA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDowMjowMFrOH6LE_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1OTkwNQ==", "bodyText": "The id parameter isn't needed anymore.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530759905", "createdAt": "2020-11-26T03:57:07Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -148,20 +115,25 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n     }\n   }\n \n-  JsonRpcResponse createPMTAndAddToTxPool(\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOffchainPrivacyGroup(privacyController, maybePrivacyGroupId, enclavePublicKey);\n+    return maybePrivacyGroup;\n+  }\n+\n+  Transaction createPMT(\n       final Object id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197050795f42b811c6aa0157768ed1516a0742fa"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDk1Ng==", "bodyText": "You are right :-)\nDone", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530760956", "createdAt": "2020-11-26T04:02:00Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -148,20 +115,25 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n     }\n   }\n \n-  JsonRpcResponse createPMTAndAddToTxPool(\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOffchainPrivacyGroup(privacyController, maybePrivacyGroupId, enclavePublicKey);\n+    return maybePrivacyGroup;\n+  }\n+\n+  Transaction createPMT(\n       final Object id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc1OTkwNQ=="}, "originalCommit": {"oid": "197050795f42b811c6aa0157768ed1516a0742fa"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODg5NDcwOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo1ODowOFrOH6LBsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDowNTo0M1rOH6LIcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDExNA==", "bodyText": "The id parameter isn't needed", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530760114", "createdAt": "2020-11-26T03:58:08Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    if (maybePrivacyGroupId.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+    }\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOnchainPrivacyGroup(\n+            privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n+    if (maybePrivacyGroup.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n+    }\n+    return maybePrivacyGroup;\n+  }\n+\n+  @Override\n+  Transaction createPMT(\n+      final Object id,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197050795f42b811c6aa0157768ed1516a0742fa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MTQxMA==", "bodyText": "I don't have that in my version anymore ...", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530761410", "createdAt": "2020-11-26T04:04:00Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    if (maybePrivacyGroupId.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+    }\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOnchainPrivacyGroup(\n+            privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n+    if (maybePrivacyGroup.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n+    }\n+    return maybePrivacyGroup;\n+  }\n+\n+  @Override\n+  Transaction createPMT(\n+      final Object id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDExNA=="}, "originalCommit": {"oid": "197050795f42b811c6aa0157768ed1516a0742fa"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MTg0MQ==", "bodyText": "It seems to be there: https://github.com/hyperledger/besu/blob/197050795f42b811c6aa0157768ed1516a0742fa/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530761841", "createdAt": "2020-11-26T04:05:43Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    if (maybePrivacyGroupId.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+    }\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOnchainPrivacyGroup(\n+            privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n+    if (maybePrivacyGroup.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n+    }\n+    return maybePrivacyGroup;\n+  }\n+\n+  @Override\n+  Transaction createPMT(\n+      final Object id,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDExNA=="}, "originalCommit": {"oid": "197050795f42b811c6aa0157768ed1516a0742fa"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODg5NzM0OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo1OTo1MFrOH6LDJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwMzo1OTo1MFrOH6LDJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDQ4NA==", "bodyText": "We could distribute the private tx outside this method. This would keep this method simpler.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530760484", "createdAt": "2020-11-26T03:59:50Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.hyperledger.besu.ethereum.privacy.PrivacyGroupUtil.findOnchainPrivacyGroup;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Optional;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class OnChainEeaSendRawTransaction extends EeaSendRawTransaction {\n+\n+  public OnChainEeaSendRawTransaction(\n+      final TransactionPool transactionPool,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    super(transactionPool, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Override\n+  Optional<PrivacyGroup> findPrivacyGroup(\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey,\n+      final PrivateTransaction privateTransaction) {\n+    if (maybePrivacyGroupId.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+    }\n+    final Optional<PrivacyGroup> maybePrivacyGroup =\n+        findOnchainPrivacyGroup(\n+            privacyController, maybePrivacyGroupId, enclavePublicKey, privateTransaction);\n+    if (maybePrivacyGroup.isEmpty()) {\n+      throw new JsonRpcErrorResponseException(JsonRpcError.ONCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST);\n+    }\n+    return maybePrivacyGroup;\n+  }\n+\n+  @Override\n+  Transaction createPMT(\n+      final Object id,\n+      final PrivateTransaction privateTransaction,\n+      final Optional<PrivacyGroup> maybePrivacyGroup,\n+      final Optional<Bytes> maybePrivacyGroupId,\n+      final String enclavePublicKey) {\n+    final Bytes privacyGroupId =\n+        maybePrivacyGroupId.get(); // exists, as it has been checked in findPrivacyGroup\n+    final String privateTransactionLookupId =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197050795f42b811c6aa0157768ed1516a0742fa"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODg5ODkyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDowMDo1OFrOH6LECQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1MDozM1rOH6Lx7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDcxMw==", "bodyText": "This TODO isn't related to this change. We should remove it.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530760713", "createdAt": "2020-11-26T04:00:58Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionValidator.java", "diffHunk": "@@ -217,6 +217,8 @@ public MainnetTransactionValidator(\n     // org.bouncycastle.math.ec.ECCurve.AbstractFp.decompressPoint throws an\n     // IllegalArgumentException for \"Invalid point compression\" for bad signatures.\n     try {\n+      // TODO: this is where we are checking the signature. We have to fix the v value if this is a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197050795f42b811c6aa0157768ed1516a0742fa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MjQ2Mw==", "bodyText": "Yup!", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530772463", "createdAt": "2020-11-26T04:50:33Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/MainnetTransactionValidator.java", "diffHunk": "@@ -217,6 +217,8 @@ public MainnetTransactionValidator(\n     // org.bouncycastle.math.ec.ECCurve.AbstractFp.decompressPoint throws an\n     // IllegalArgumentException for \"Invalid point compression\" for bad signatures.\n     try {\n+      // TODO: this is where we are checking the signature. We have to fix the v value if this is a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDcxMw=="}, "originalCommit": {"oid": "197050795f42b811c6aa0157768ed1516a0742fa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyODg5OTExOnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionPool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDowMTowNVrOH6LEIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNDo1MDo1MlrOH6LyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDczNw==", "bodyText": "This TODO isn't related to this change. We should remove it.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530760737", "createdAt": "2020-11-26T04:01:05Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionPool.java", "diffHunk": "@@ -257,6 +257,7 @@ public PendingTransactions getPendingTransactions() {\n               transaction.getGasLimit(), chainHeadBlockHeader.getGasLimit()));\n     }\n \n+    // TODO: this is where we would use the private state to do the validation against", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "197050795f42b811c6aa0157768ed1516a0742fa"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc3MjUzNw==", "bodyText": "Done!", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r530772537", "createdAt": "2020-11-26T04:50:52Z", "author": {"login": "pinges"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/TransactionPool.java", "diffHunk": "@@ -257,6 +257,7 @@ public PendingTransactions getPendingTransactions() {\n               transaction.getGasLimit(), chainHeadBlockHeader.getGasLimit()));\n     }\n \n+    // TODO: this is where we would use the private state to do the validation against", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDc2MDczNw=="}, "originalCommit": {"oid": "197050795f42b811c6aa0157768ed1516a0742fa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTg5MDM3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransactionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMDozMTo1OFrOH6m16A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMzoyODozM1rOH6pFYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxNTg0OA==", "bodyText": "I'm not sure if this method name is correct. This test seems to be testing what happens when the on-chain privacy group is not found.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r531215848", "createdAt": "2020-11-26T20:31:58Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransactionTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class OnChainEeaSendRawTransactionTest extends EeaSendRawTransactionTest {\n+\n+  @Test\n+  public void validOnChainTransactionPrivacyGroupIsSentToTransactionPool() {\n+    method =\n+        new OnChainEeaSendRawTransaction(\n+            transactionPool, privacyController, enclavePublicKeyProvider);\n+\n+    when(privacyController.sendTransaction(any(PrivateTransaction.class), any(), any()))\n+        .thenReturn(MOCK_ORION_KEY);\n+    when(privacyController.validatePrivateTransaction(\n+            any(PrivateTransaction.class), any(String.class)))\n+        .thenReturn(ValidationResult.valid());\n+    final Optional<PrivacyGroup> optionalPrivacyGroup =\n+        Optional.of(\n+            new PrivacyGroup(\n+                \"\", PrivacyGroup.Type.ONCHAIN, \"\", \"\", Arrays.asList(ENCLAVE_PUBLIC_KEY)));\n+    when(privacyController.retrieveOnChainPrivacyGroupWithToBeAddedMembers(any(), any(), any()))\n+        .thenReturn(optionalPrivacyGroup);\n+    when(privacyController.createPrivacyMarkerTransaction(\n+            any(String.class), any(PrivateTransaction.class), any(Address.class)))\n+        .thenReturn(PUBLIC_TRANSACTION);\n+    when(transactionPool.addLocalTransaction(any(Transaction.class)))\n+        .thenReturn(ValidationResult.valid());\n+\n+    final JsonRpcRequestContext request =\n+        new JsonRpcRequestContext(\n+            new JsonRpcRequest(\n+                \"2.0\",\n+                \"eea_sendRawTransaction\",\n+                new String[] {VALID_PRIVATE_TRANSACTION_RLP_PRIVACY_GROUP}));\n+\n+    final JsonRpcResponse expectedResponse =\n+        new JsonRpcSuccessResponse(\n+            request.getRequest().getId(),\n+            \"0x221e930a2c18d91fca4d509eaa3512f3e01fef266f660e32473de67474b36c15\");\n+\n+    final JsonRpcResponse actualResponse = method.response(request);\n+\n+    assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse);\n+    verify(privacyController).sendTransaction(any(PrivateTransaction.class), any(), any());\n+    verify(privacyController)\n+        .validatePrivateTransaction(any(PrivateTransaction.class), any(String.class));\n+    verify(privacyController)\n+        .createPrivacyMarkerTransaction(\n+            any(String.class), any(PrivateTransaction.class), eq(Address.ONCHAIN_PRIVACY));\n+    verify(transactionPool).addLocalTransaction(any(Transaction.class));\n+  }\n+\n+  @Test\n+  public void transactionFailsForLegacyPrivateTransaction() {\n+    method =\n+        new OnChainEeaSendRawTransaction(\n+            transactionPool, privacyController, enclavePublicKeyProvider);\n+\n+    final JsonRpcRequestContext request = getJsonRpcRequestContext();\n+\n+    final JsonRpcResponse expectedResponse =\n+        new JsonRpcErrorResponse(\n+            request.getRequest().getId(), JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+\n+    final JsonRpcResponse actualResponse = method.response(request);\n+\n+    assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse);\n+  }\n+\n+  private JsonRpcRequestContext getJsonRpcRequestContext() {\n+    return new JsonRpcRequestContext(\n+        new JsonRpcRequest(\n+            \"2.0\", \"eea_sendRawTransaction\", new String[] {VALID_LEGACY_PRIVATE_TRANSACTION_RLP}),\n+        user);\n+  }\n+\n+  @Test\n+  public void offChainPrivacyGroupTransactionFailsWhenOnchainPrivacyGroupFeatureIsEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d254e225b912c1f0ad17396c0962b9d533fa27d1"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1MjU3OQ==", "bodyText": "Already done", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r531252579", "createdAt": "2020-11-26T23:28:33Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/OnChainEeaSendRawTransactionTest.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.eea;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class OnChainEeaSendRawTransactionTest extends EeaSendRawTransactionTest {\n+\n+  @Test\n+  public void validOnChainTransactionPrivacyGroupIsSentToTransactionPool() {\n+    method =\n+        new OnChainEeaSendRawTransaction(\n+            transactionPool, privacyController, enclavePublicKeyProvider);\n+\n+    when(privacyController.sendTransaction(any(PrivateTransaction.class), any(), any()))\n+        .thenReturn(MOCK_ORION_KEY);\n+    when(privacyController.validatePrivateTransaction(\n+            any(PrivateTransaction.class), any(String.class)))\n+        .thenReturn(ValidationResult.valid());\n+    final Optional<PrivacyGroup> optionalPrivacyGroup =\n+        Optional.of(\n+            new PrivacyGroup(\n+                \"\", PrivacyGroup.Type.ONCHAIN, \"\", \"\", Arrays.asList(ENCLAVE_PUBLIC_KEY)));\n+    when(privacyController.retrieveOnChainPrivacyGroupWithToBeAddedMembers(any(), any(), any()))\n+        .thenReturn(optionalPrivacyGroup);\n+    when(privacyController.createPrivacyMarkerTransaction(\n+            any(String.class), any(PrivateTransaction.class), any(Address.class)))\n+        .thenReturn(PUBLIC_TRANSACTION);\n+    when(transactionPool.addLocalTransaction(any(Transaction.class)))\n+        .thenReturn(ValidationResult.valid());\n+\n+    final JsonRpcRequestContext request =\n+        new JsonRpcRequestContext(\n+            new JsonRpcRequest(\n+                \"2.0\",\n+                \"eea_sendRawTransaction\",\n+                new String[] {VALID_PRIVATE_TRANSACTION_RLP_PRIVACY_GROUP}));\n+\n+    final JsonRpcResponse expectedResponse =\n+        new JsonRpcSuccessResponse(\n+            request.getRequest().getId(),\n+            \"0x221e930a2c18d91fca4d509eaa3512f3e01fef266f660e32473de67474b36c15\");\n+\n+    final JsonRpcResponse actualResponse = method.response(request);\n+\n+    assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse);\n+    verify(privacyController).sendTransaction(any(PrivateTransaction.class), any(), any());\n+    verify(privacyController)\n+        .validatePrivateTransaction(any(PrivateTransaction.class), any(String.class));\n+    verify(privacyController)\n+        .createPrivacyMarkerTransaction(\n+            any(String.class), any(PrivateTransaction.class), eq(Address.ONCHAIN_PRIVACY));\n+    verify(transactionPool).addLocalTransaction(any(Transaction.class));\n+  }\n+\n+  @Test\n+  public void transactionFailsForLegacyPrivateTransaction() {\n+    method =\n+        new OnChainEeaSendRawTransaction(\n+            transactionPool, privacyController, enclavePublicKeyProvider);\n+\n+    final JsonRpcRequestContext request = getJsonRpcRequestContext();\n+\n+    final JsonRpcResponse expectedResponse =\n+        new JsonRpcErrorResponse(\n+            request.getRequest().getId(), JsonRpcError.ONCHAIN_PRIVACY_GROUP_ID_NOT_AVAILABLE);\n+\n+    final JsonRpcResponse actualResponse = method.response(request);\n+\n+    assertThat(actualResponse).isEqualToComparingFieldByField(expectedResponse);\n+  }\n+\n+  private JsonRpcRequestContext getJsonRpcRequestContext() {\n+    return new JsonRpcRequestContext(\n+        new JsonRpcRequest(\n+            \"2.0\", \"eea_sendRawTransaction\", new String[] {VALID_LEGACY_PRIVATE_TRANSACTION_RLP}),\n+        user);\n+  }\n+\n+  @Test\n+  public void offChainPrivacyGroupTransactionFailsWhenOnchainPrivacyGroupFeatureIsEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxNTg0OA=="}, "originalCommit": {"oid": "d254e225b912c1f0ad17396c0962b9d533fa27d1"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTg5NjIzOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/EeaJsonRpcMethods.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMDozNToyMlrOH6m5LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwMDowODo1OVrOH6pdPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxNjY4NA==", "bodyText": "It would be good to have a unit test checking that we instantiate the correct rpc method based on the onchain flag.", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r531216684", "createdAt": "2020-11-26T20:35:22Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/EeaJsonRpcMethods.java", "diffHunk": "@@ -42,13 +43,17 @@ public EeaJsonRpcMethods(\n   protected Map<String, JsonRpcMethod> create(\n       final PrivacyController privacyController,\n       final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n-    return mapOf(\n-        new EeaSendRawTransaction(\n-            getTransactionPool(),\n-            privacyController,\n-            enclavePublicKeyProvider,\n-            getPrivacyParameters().isOnchainPrivacyGroupsEnabled()),\n-        new PrivGetEeaTransactionCount(privacyController, enclavePublicKeyProvider));\n+    if (getPrivacyParameters().isOnchainPrivacyGroupsEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d254e225b912c1f0ad17396c0962b9d533fa27d1"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1ODY4Nw==", "bodyText": "This is tested in the privacy ATs. To do that in this class would be quite a bit of code ...\nI think it is enough to get that tested at the higher level ?", "url": "https://github.com/hyperledger/besu/pull/1604#discussion_r531258687", "createdAt": "2020-11-27T00:08:59Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/EeaJsonRpcMethods.java", "diffHunk": "@@ -42,13 +43,17 @@ public EeaJsonRpcMethods(\n   protected Map<String, JsonRpcMethod> create(\n       final PrivacyController privacyController,\n       final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n-    return mapOf(\n-        new EeaSendRawTransaction(\n-            getTransactionPool(),\n-            privacyController,\n-            enclavePublicKeyProvider,\n-            getPrivacyParameters().isOnchainPrivacyGroupsEnabled()),\n-        new PrivGetEeaTransactionCount(privacyController, enclavePublicKeyProvider));\n+    if (getPrivacyParameters().isOnchainPrivacyGroupsEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxNjY4NA=="}, "originalCommit": {"oid": "d254e225b912c1f0ad17396c0962b9d533fa27d1"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1369, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}