{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3Nzg4MDA2", "number": 1042, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowNDowNlrOEEwFJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo1MjozMlrOEGMUlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDE3NTExOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetchers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowNDowNlrOGikZ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowNDowNlrOGikZ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMTIwNw==", "bodyText": "We will want to add the zombie thread killer to graphql as well, so it may be worth a comment that the AtomicBoolean(true) prevents the query from self-terminating.", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r438901207", "createdAt": "2020-06-11T16:04:06Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetchers.java", "diffHunk": "@@ -238,7 +239,8 @@ public GraphQLDataFetchers(final Set<Capability> supportedCapabilities) {\n       final LogsQuery query =\n           new LogsQuery.Builder().addresses(addrs).topics(transformedTopics).build();\n \n-      final List<LogWithMetadata> logs = blockchainQuery.matchingLogs(fromBlock, toBlock, query);\n+      final List<LogWithMetadata> logs =\n+          blockchainQuery.matchingLogs(fromBlock, toBlock, query, new AtomicBoolean(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c250197a6ba84a048b440f45b8a205e1adfc072"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDE3NTk0OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/pojoadapter/BlockAdapterBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowNDoyMFrOGikaYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowNDoyMFrOGikaYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMTM0Nw==", "bodyText": "same comment as in GraphQLDataFetchers", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r438901347", "createdAt": "2020-06-11T16:04:20Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/pojoadapter/BlockAdapterBase.java", "diffHunk": "@@ -164,7 +165,8 @@\n     final BlockchainQueries blockchain = getBlockchainQueries(environment);\n \n     final Hash hash = header.getHash();\n-    final List<LogWithMetadata> logs = blockchain.matchingLogs(hash, query);\n+    final List<LogWithMetadata> logs =\n+        blockchain.matchingLogs(hash, query, new AtomicBoolean(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c250197a6ba84a048b440f45b8a205e1adfc072"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDE4NzE0OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/context/ContextKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowNzozNFrOGikiGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjowNzozNFrOGikiGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwMzMyMw==", "bodyText": "Should this be renamed to be more generic?  asAtomicBoolean or fetchAsAtomicBoolean?", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r438903323", "createdAt": "2020-06-11T16:07:34Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/context/ContextKey.java", "diffHunk": "@@ -14,15 +14,21 @@\n  */\n package org.hyperledger.besu.ethereum.api.jsonrpc.context;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Supplier;\n \n import io.vertx.ext.web.RoutingContext;\n \n public enum ContextKey {\n-  REQUEST_BODY_AS_JSON_OBJECT;\n+  REQUEST_BODY_AS_JSON_OBJECT,\n+  ALIVE;\n \n   public <T> T extractFrom(final RoutingContext ctx, final Supplier<T> defaultSupplier) {\n     final T value = ctx.get(this.name());\n     return value != null ? value : defaultSupplier.get();\n   }\n+\n+  public AtomicBoolean isAlive(final RoutingContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c250197a6ba84a048b440f45b8a205e1adfc072"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDIxNzYwOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/JsonRpcRequestContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxNTozOVrOGik2DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDo0OToyNlrOGi_nqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwODQyOQ==", "bodyText": "Would a Supplier<Boolean> also work?  we could pass in a lambda that goes () -> ctx.response().closed()  (or () -> true for always alive or when we don't have the request context) and not have to worry about keeping another variable state in sync.", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r438908429", "createdAt": "2020-06-11T16:15:39Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/JsonRpcRequestContext.java", "diffHunk": "@@ -16,25 +16,38 @@\n \n import java.util.Objects;\n import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import io.vertx.ext.auth.User;\n \n public class JsonRpcRequestContext {\n \n   private final JsonRpcRequest jsonRpcRequest;\n   private final Optional<User> user;\n+  private final AtomicBoolean alive;\n \n   public JsonRpcRequestContext(final JsonRpcRequest jsonRpcRequest) {\n-    this(jsonRpcRequest, Optional.empty());\n+    this(jsonRpcRequest, new AtomicBoolean(true));\n+  }\n+\n+  public JsonRpcRequestContext(final JsonRpcRequest jsonRpcRequest, final AtomicBoolean alive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c250197a6ba84a048b440f45b8a205e1adfc072"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NzExNQ==", "bodyText": "Changed to a Supplier<Boolean>", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r439347115", "createdAt": "2020-06-12T10:49:26Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/JsonRpcRequestContext.java", "diffHunk": "@@ -16,25 +16,38 @@\n \n import java.util.Objects;\n import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import io.vertx.ext.auth.User;\n \n public class JsonRpcRequestContext {\n \n   private final JsonRpcRequest jsonRpcRequest;\n   private final Optional<User> user;\n+  private final AtomicBoolean alive;\n \n   public JsonRpcRequestContext(final JsonRpcRequest jsonRpcRequest) {\n-    this(jsonRpcRequest, Optional.empty());\n+    this(jsonRpcRequest, new AtomicBoolean(true));\n+  }\n+\n+  public JsonRpcRequestContext(final JsonRpcRequest jsonRpcRequest, final AtomicBoolean alive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwODQyOQ=="}, "originalCommit": {"oid": "7c250197a6ba84a048b440f45b8a205e1adfc072"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDkxMTYxOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/BackendQuery.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwNToyOTo0M1rOGjjpiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0MDowMFrOGkeo4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzQxOQ==", "bodyText": "Not a fan of using an exception when we can just check a boolean and exit the method.  The real question is what does the resulting JSON response look like when we throw?  If it looks like what we want the users to see then an exception will read better than a check and return error code segment in the calling RPC method.", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r439937419", "createdAt": "2020-06-15T05:29:43Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/BackendQuery.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.query;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class BackendQuery {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  public static <T> T runIfAlive(final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    return runIfAlive(Optional.empty(), task, alive);\n+  }\n+\n+  public static <T> T runIfAlive(\n+      final String taskName, final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    return runIfAlive(Optional.ofNullable(taskName), task, alive);\n+  }\n+\n+  public static <T> T runIfAlive(\n+      final Optional<String> taskName, final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    if (!alive.get()) {\n+      LOG.warn(\n+          \"Zombie backend query detected [ {} ], aborting process.\", taskName.orElse(\"unnamed\"));\n+      throw new RuntimeException(\"Timeout expired\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133cd991e542d00f1c7f8c049593a1e8451897d6"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAzODU0OA==", "bodyText": "Well. I don't think we want to add info in the JSON response, since the HTTP timeout will be triggered first and generate the response with a 504 Gateway Timeout error.\nHowever i think using exceptions there make the integration smoother. Because basically you can wrap the wall in a lambda and it is pretty transparent. If you use boolean to check the validity of a backend query, you will add a lot of boilerplate code. For example, the matchingLogs methods triggers many backend queries and it would add numerous if blocks if we don't use exceptions.", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r440038548", "createdAt": "2020-06-15T09:14:30Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/BackendQuery.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.query;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class BackendQuery {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  public static <T> T runIfAlive(final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    return runIfAlive(Optional.empty(), task, alive);\n+  }\n+\n+  public static <T> T runIfAlive(\n+      final String taskName, final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    return runIfAlive(Optional.ofNullable(taskName), task, alive);\n+  }\n+\n+  public static <T> T runIfAlive(\n+      final Optional<String> taskName, final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    if (!alive.get()) {\n+      LOG.warn(\n+          \"Zombie backend query detected [ {} ], aborting process.\", taskName.orElse(\"unnamed\"));\n+      throw new RuntimeException(\"Timeout expired\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzQxOQ=="}, "originalCommit": {"oid": "133cd991e542d00f1c7f8c049593a1e8451897d6"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwMzkwNA==", "bodyText": "As discussed this PR will focus on JSON RPC and WebSocket. GraphQL support will come in a separate PR. Resolving discussion.", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r440903904", "createdAt": "2020-06-16T14:40:00Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/BackendQuery.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.query;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class BackendQuery {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  public static <T> T runIfAlive(final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    return runIfAlive(Optional.empty(), task, alive);\n+  }\n+\n+  public static <T> T runIfAlive(\n+      final String taskName, final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    return runIfAlive(Optional.ofNullable(taskName), task, alive);\n+  }\n+\n+  public static <T> T runIfAlive(\n+      final Optional<String> taskName, final Callable<T> task, final Supplier<Boolean> alive)\n+      throws Exception {\n+    if (!alive.get()) {\n+      LOG.warn(\n+          \"Zombie backend query detected [ {} ], aborting process.\", taskName.orElse(\"unnamed\"));\n+      throw new RuntimeException(\"Timeout expired\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkzNzQxOQ=="}, "originalCommit": {"oid": "133cd991e542d00f1c7f8c049593a1e8451897d6"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTI4Nzg4OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetcherContextDecorator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNDo1MjozMlrOGk1jCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo1NTozNlrOGk4Ehw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3OTI0Mw==", "bodyText": "Rather than a decorator perhaps a copy constructor on the old GraphQLDataContext that copies old fields but uses a passed-in isAliveHandler?  Less class files and less indirection.", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r441279243", "createdAt": "2020-06-17T04:52:32Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetcherContextDecorator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.graphql;\n+\n+import org.hyperledger.besu.ethereum.api.handlers.IsAliveHandler;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.blockcreation.MiningCoordinator;\n+import org.hyperledger.besu.ethereum.core.Synchronizer;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+\n+public class GraphQLDataFetcherContextDecorator implements GraphQLDataFetcherContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c21e4f63ead287301f9255fbc9c9ff08678d81b3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMyMDU4Mw==", "bodyText": "Done in 870eb9e", "url": "https://github.com/hyperledger/besu/pull/1042#discussion_r441320583", "createdAt": "2020-06-17T06:55:36Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/GraphQLDataFetcherContextDecorator.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.graphql;\n+\n+import org.hyperledger.besu.ethereum.api.handlers.IsAliveHandler;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.blockcreation.MiningCoordinator;\n+import org.hyperledger.besu.ethereum.core.Synchronizer;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+\n+public class GraphQLDataFetcherContextDecorator implements GraphQLDataFetcherContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI3OTI0Mw=="}, "originalCommit": {"oid": "c21e4f63ead287301f9255fbc9c9ff08678d81b3"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 921, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}