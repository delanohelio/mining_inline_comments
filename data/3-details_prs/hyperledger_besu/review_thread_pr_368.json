{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNTk3OTg1", "number": 368, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjozMToyNlrODehWDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjozMToyNlrODehWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzMwMTg4OnYy", "diffSide": "RIGHT", "path": "nat/src/main/java/org/hyperledger/besu/nat/docker/HostBasedIpDetector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjozMToyNlrOFns3kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTowNDoxNFrOFnx8MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE3MzkwNA==", "bodyText": "How does this behave if you don't supply the HOST_IP env var to the docker command?", "url": "https://github.com/hyperledger/besu/pull/368#discussion_r377173904", "createdAt": "2020-02-10T16:31:26Z", "author": {"login": "RatanRSur"}, "path": "nat/src/main/java/org/hyperledger/besu/nat/docker/HostBasedIpDetector.java", "diffHunk": "@@ -13,25 +13,22 @@\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package org.hyperledger.besu.nat.core;\n+package org.hyperledger.besu.nat.docker;\n \n-import org.hyperledger.besu.nat.NatMethod;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Optional;\n \n-public class AutoDetectionResult {\n+public class HostBasedIpDetector implements IpDetector {\n \n-  private final NatMethod natMethod;\n-  private final boolean isDetectedNatMethod;\n+  private static final String HOSTNAME = \"HOST_IP\";\n \n-  public AutoDetectionResult(final NatMethod natMethod, final boolean isDetectedNatMethod) {\n-    this.natMethod = natMethod;\n-    this.isDetectedNatMethod = isDetectedNatMethod;\n-  }\n-\n-  public NatMethod getNatMethod() {\n-    return natMethod;\n-  }\n-\n-  public boolean isDetectedNatMethod() {\n-    return isDetectedNatMethod;\n+  @Override\n+  public Optional<String> detectExternalIp() {\n+    try {\n+      return Optional.of(InetAddress.getByName(HOSTNAME).getHostAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc958ecb18d41ad61ebd75e4b9f9df70d84fa81c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1NzAwOQ==", "bodyText": "if you don't supply the HOST_IP en var the NatManager will try to retrieve the value of the p2p-host CLI parameter given when besu started. If this parameter is not given it will be the default value of p2p-host as described in the code below.\n  private String p2pHost = autoDiscoverDefaultIP().getHostAddress();\n\nTo sum up:\n\nHOST_IP env var\np2p-host CLI parameter given when besu started\ndefault value of p2p-host", "url": "https://github.com/hyperledger/besu/pull/368#discussion_r377257009", "createdAt": "2020-02-10T19:04:14Z", "author": {"login": "matkt"}, "path": "nat/src/main/java/org/hyperledger/besu/nat/docker/HostBasedIpDetector.java", "diffHunk": "@@ -13,25 +13,22 @@\n  * SPDX-License-Identifier: Apache-2.0\n  */\n \n-package org.hyperledger.besu.nat.core;\n+package org.hyperledger.besu.nat.docker;\n \n-import org.hyperledger.besu.nat.NatMethod;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.Optional;\n \n-public class AutoDetectionResult {\n+public class HostBasedIpDetector implements IpDetector {\n \n-  private final NatMethod natMethod;\n-  private final boolean isDetectedNatMethod;\n+  private static final String HOSTNAME = \"HOST_IP\";\n \n-  public AutoDetectionResult(final NatMethod natMethod, final boolean isDetectedNatMethod) {\n-    this.natMethod = natMethod;\n-    this.isDetectedNatMethod = isDetectedNatMethod;\n-  }\n-\n-  public NatMethod getNatMethod() {\n-    return natMethod;\n-  }\n-\n-  public boolean isDetectedNatMethod() {\n-    return isDetectedNatMethod;\n+  @Override\n+  public Optional<String> detectExternalIp() {\n+    try {\n+      return Optional.of(InetAddress.getByName(HOSTNAME).getHostAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE3MzkwNA=="}, "originalCommit": {"oid": "fc958ecb18d41ad61ebd75e4b9f9df70d84fa81c"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1232, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}