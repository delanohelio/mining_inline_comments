{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NDk5MTM3", "number": 1241, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowMDoyMlrOEQz-IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1MTowOFrOERqfeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDY0MTYwOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowMDoyMlrOG1LW5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjoyNTozOFrOG1QYPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxMzc5Ng==", "bodyText": "Could this somehow introduce backwards incompatibility? I'm thinking of node that will resync in a network that already has processed PMTs... Could the public state end up being different because of this change?\nIt might be worth testing this!\nWhat do you think @pinges ?", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r458413796", "createdAt": "2020-07-21T22:00:22Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -165,7 +168,7 @@ public Bytes compute(final Bytes input, final MessageFrame messageFrame) {\n           result);\n     }\n \n-    return result.getOutput();\n+    return Bytes.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09fb1e9e1f92510b5fcfba8b9df36bd4375e28c9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NjA2Mg==", "bodyText": "I changed this and meant to revert it, though I'm interested in @pinges opinion.", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r458496062", "createdAt": "2020-07-22T02:25:38Z", "author": {"login": "mark-terry"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -165,7 +168,7 @@ public Bytes compute(final Bytes input, final MessageFrame messageFrame) {\n           result);\n     }\n \n-    return result.getOutput();\n+    return Bytes.EMPTY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxMzc5Ng=="}, "originalCommit": {"oid": "09fb1e9e1f92510b5fcfba8b9df36bd4375e28c9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDY0NDc3OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionReceipt.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowMToyNVrOG1LYzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowNzoxMFrOG1LibA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNDI4NQ==", "bodyText": "NIT: we could use a switch statement here, couldn't we?", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r458414285", "createdAt": "2020-07-21T22:01:25Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionReceipt.java", "diffHunk": "@@ -64,12 +62,22 @@ public PrivateTransactionReceipt(\n \n   public PrivateTransactionReceipt(final TransactionProcessor.Result result) {\n     this(\n-        result.getStatus() == PrivateTransactionProcessor.Result.Status.SUCCESSFUL ? 1 : 0,\n+        getStatusCode(result.getStatus()),\n         result.getLogs(),\n         result.getOutput(),\n         result.getRevertReason());\n   }\n \n+  private static int getStatusCode(final TransactionProcessor.Result.Status result) {\n+    if (result.equals(PrivateTransactionProcessor.Result.Status.SUCCESSFUL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09fb1e9e1f92510b5fcfba8b9df36bd4375e28c9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNjc0OA==", "bodyText": "Also, we could introduce constants STATUS_SUCCESSFUL = 1, STATUS_FAILED = 0 and STATUS_INVALID = 2 to highlight the mapping btw status and the numbers.", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r458416748", "createdAt": "2020-07-21T22:07:10Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionReceipt.java", "diffHunk": "@@ -64,12 +62,22 @@ public PrivateTransactionReceipt(\n \n   public PrivateTransactionReceipt(final TransactionProcessor.Result result) {\n     this(\n-        result.getStatus() == PrivateTransactionProcessor.Result.Status.SUCCESSFUL ? 1 : 0,\n+        getStatusCode(result.getStatus()),\n         result.getLogs(),\n         result.getOutput(),\n         result.getRevertReason());\n   }\n \n+  private static int getStatusCode(final TransactionProcessor.Result.Status result) {\n+    if (result.equals(PrivateTransactionProcessor.Result.Status.SUCCESSFUL)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNDI4NQ=="}, "originalCommit": {"oid": "09fb1e9e1f92510b5fcfba8b9df36bd4375e28c9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDY1MDU1OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetInvalidTransactionReceiptSuccess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowMzo0MlrOG1LcWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozMzoxMFrOG1QgJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNTE5Mw==", "bodyText": "PrivGetInvalidTransactionReceiptSuccess is a bit confusing... It has Invalid and Success together :P\nMaybe if we use something like\nPrivGetExpectedInvalidTransactionReceipt or something like that?", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r458415193", "createdAt": "2020-07-21T22:03:42Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetInvalidTransactionReceiptSuccess.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.WaitUtils;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n+\n+public class PrivGetInvalidTransactionReceiptSuccess implements Condition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09fb1e9e1f92510b5fcfba8b9df36bd4375e28c9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5ODA4NQ==", "bodyText": "Good suggestion!", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r458498085", "createdAt": "2020-07-22T02:33:10Z", "author": {"login": "mark-terry"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/PrivGetInvalidTransactionReceiptSuccess.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.tests.acceptance.dsl.WaitUtils;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivGetTransactionReceiptTransaction;\n+\n+public class PrivGetInvalidTransactionReceiptSuccess implements Condition {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNTE5Mw=="}, "originalCommit": {"oid": "09fb1e9e1f92510b5fcfba8b9df36bd4375e28c9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDY1NTc3OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/PrivacyReceiptAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjowNToyMlrOG1LfWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMjozMDo0OFrOG1QdwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNTk2Mg==", "bodyText": "I can see a test for a successful private tx and for an invalid private tx. What about a failed private tx?", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r458415962", "createdAt": "2020-07-21T22:05:22Z", "author": {"login": "lucassaldanha"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/PrivacyReceiptAcceptanceTest.java", "diffHunk": "@@ -81,6 +84,37 @@ public void createPrivateTransactionReceiptFailedTransaction() {\n     alice.getBesu().verify(priv.getFailedTransactionReceipt(transactionHash));\n   }\n \n+  @Test\n+  public void createPrivateTransactionReceiptInvalidTransaction() {\n+    final CreatePrivacyGroupTransaction onlyAlice =\n+        privacyTransactions.createPrivacyGroup(\"Only Alice\", \"\", alice);\n+\n+    final String privacyGroupId = alice.execute(onlyAlice);\n+\n+    final PrivateTransaction invalidPayloadTransaction =\n+        createSignedTransaction(alice, privacyGroupId, empty());\n+    final BytesValueRLPOutput rlpOutput = getRLPOutput(invalidPayloadTransaction);\n+\n+    // Stop mining, to allow adding duplicate nonce block\n+    alice.getBesu().execute(minerTransactions.minerStop());\n+\n+    final Hash transactionHash1 =\n+        alice.execute(privacyTransactions.sendRawTransaction(rlpOutput.encoded().toHexString()));\n+    final Hash transactionHash2 =\n+        alice.execute(privacyTransactions.sendRawTransaction(rlpOutput.encoded().toHexString()));\n+\n+    // Start mining again\n+    alice.getBesu().execute(minerTransactions.minerStart());\n+\n+    // Successful PMTs\n+    alice.getBesu().verify(eth.expectSuccessfulTransactionReceipt(transactionHash1.toString()));\n+    alice.getBesu().verify(eth.expectSuccessfulTransactionReceipt(transactionHash2.toString()));\n+    // Successful first private transaction\n+    alice.getBesu().verify(priv.getSuccessfulTransactionReceipt(transactionHash1));\n+    // Invalid second private transaction\n+    alice.getBesu().verify(priv.getInvalidTransactionReceipt(transactionHash2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09fb1e9e1f92510b5fcfba8b9df36bd4375e28c9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ5NzQ3Mw==", "bodyText": "That's in the previous test.", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r458497473", "createdAt": "2020-07-22T02:30:48Z", "author": {"login": "mark-terry"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/PrivacyReceiptAcceptanceTest.java", "diffHunk": "@@ -81,6 +84,37 @@ public void createPrivateTransactionReceiptFailedTransaction() {\n     alice.getBesu().verify(priv.getFailedTransactionReceipt(transactionHash));\n   }\n \n+  @Test\n+  public void createPrivateTransactionReceiptInvalidTransaction() {\n+    final CreatePrivacyGroupTransaction onlyAlice =\n+        privacyTransactions.createPrivacyGroup(\"Only Alice\", \"\", alice);\n+\n+    final String privacyGroupId = alice.execute(onlyAlice);\n+\n+    final PrivateTransaction invalidPayloadTransaction =\n+        createSignedTransaction(alice, privacyGroupId, empty());\n+    final BytesValueRLPOutput rlpOutput = getRLPOutput(invalidPayloadTransaction);\n+\n+    // Stop mining, to allow adding duplicate nonce block\n+    alice.getBesu().execute(minerTransactions.minerStop());\n+\n+    final Hash transactionHash1 =\n+        alice.execute(privacyTransactions.sendRawTransaction(rlpOutput.encoded().toHexString()));\n+    final Hash transactionHash2 =\n+        alice.execute(privacyTransactions.sendRawTransaction(rlpOutput.encoded().toHexString()));\n+\n+    // Start mining again\n+    alice.getBesu().execute(minerTransactions.minerStart());\n+\n+    // Successful PMTs\n+    alice.getBesu().verify(eth.expectSuccessfulTransactionReceipt(transactionHash1.toString()));\n+    alice.getBesu().verify(eth.expectSuccessfulTransactionReceipt(transactionHash2.toString()));\n+    // Successful first private transaction\n+    alice.getBesu().verify(priv.getSuccessfulTransactionReceipt(transactionHash1));\n+    // Invalid second private transaction\n+    alice.getBesu().verify(priv.getInvalidTransactionReceipt(transactionHash2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxNTk2Mg=="}, "originalCommit": {"oid": "09fb1e9e1f92510b5fcfba8b9df36bd4375e28c9"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgwNTAyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionReceipt.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowMzo1OFrOG18UMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMjozMToxNVrOG3Rx7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNTkyMA==", "bodyText": "Not sure about this default. We might want to fail if there is a value that we do not expect?", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r459215920", "createdAt": "2020-07-23T05:03:58Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionReceipt.java", "diffHunk": "@@ -64,12 +66,23 @@ public PrivateTransactionReceipt(\n \n   public PrivateTransactionReceipt(final TransactionProcessor.Result result) {\n     this(\n-        result.getStatus() == PrivateTransactionProcessor.Result.Status.SUCCESSFUL ? 1 : 0,\n+        getStatusCode(result.getStatus()),\n         result.getLogs(),\n         result.getOutput(),\n         result.getRevertReason());\n   }\n \n+  private static int getStatusCode(final TransactionProcessor.Result.Status result) {\n+    switch (result) {\n+      case SUCCESSFUL:\n+        return STATUS_SUCCESSFUL;\n+      case INVALID:\n+        return STATUS_INVALID;\n+      default:\n+        return STATUS_FAILED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42faaf18f7a7942c1f336f44961cadda1ee8e1a1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgzMDYzOA==", "bodyText": "I see what you're saying, but that'd then require an additional status code, yeah? ie:\n0 = fail\n1 = success\n2 = invalid\n3 = other ?", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r459830638", "createdAt": "2020-07-24T03:00:38Z", "author": {"login": "mark-terry"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionReceipt.java", "diffHunk": "@@ -64,12 +66,23 @@ public PrivateTransactionReceipt(\n \n   public PrivateTransactionReceipt(final TransactionProcessor.Result result) {\n     this(\n-        result.getStatus() == PrivateTransactionProcessor.Result.Status.SUCCESSFUL ? 1 : 0,\n+        getStatusCode(result.getStatus()),\n         result.getLogs(),\n         result.getOutput(),\n         result.getRevertReason());\n   }\n \n+  private static int getStatusCode(final TransactionProcessor.Result.Status result) {\n+    switch (result) {\n+      case SUCCESSFUL:\n+        return STATUS_SUCCESSFUL;\n+      case INVALID:\n+        return STATUS_INVALID;\n+      default:\n+        return STATUS_FAILED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNTkyMA=="}, "originalCommit": {"oid": "42faaf18f7a7942c1f336f44961cadda1ee8e1a1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyODUyNg==", "bodyText": "It should never be anything but FAILED, SUCCESS or INVALID. I believe what Stefan suggested is that the default case should throw an exception (InvalidState maybe) or something to notify that there is something wrong.", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r460228526", "createdAt": "2020-07-24T18:47:13Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionReceipt.java", "diffHunk": "@@ -64,12 +66,23 @@ public PrivateTransactionReceipt(\n \n   public PrivateTransactionReceipt(final TransactionProcessor.Result result) {\n     this(\n-        result.getStatus() == PrivateTransactionProcessor.Result.Status.SUCCESSFUL ? 1 : 0,\n+        getStatusCode(result.getStatus()),\n         result.getLogs(),\n         result.getOutput(),\n         result.getRevertReason());\n   }\n \n+  private static int getStatusCode(final TransactionProcessor.Result.Status result) {\n+    switch (result) {\n+      case SUCCESSFUL:\n+        return STATUS_SUCCESSFUL;\n+      case INVALID:\n+        return STATUS_INVALID;\n+      default:\n+        return STATUS_FAILED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNTkyMA=="}, "originalCommit": {"oid": "42faaf18f7a7942c1f336f44961cadda1ee8e1a1"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxNjE3NQ==", "bodyText": "Updated.", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r460616175", "createdAt": "2020-07-27T02:31:15Z", "author": {"login": "mark-terry"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateTransactionReceipt.java", "diffHunk": "@@ -64,12 +66,23 @@ public PrivateTransactionReceipt(\n \n   public PrivateTransactionReceipt(final TransactionProcessor.Result result) {\n     this(\n-        result.getStatus() == PrivateTransactionProcessor.Result.Status.SUCCESSFUL ? 1 : 0,\n+        getStatusCode(result.getStatus()),\n         result.getLogs(),\n         result.getOutput(),\n         result.getRevertReason());\n   }\n \n+  private static int getStatusCode(final TransactionProcessor.Result.Status result) {\n+    switch (result) {\n+      case SUCCESSFUL:\n+        return STATUS_SUCCESSFUL;\n+      case INVALID:\n+        return STATUS_INVALID;\n+      default:\n+        return STATUS_FAILED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNTkyMA=="}, "originalCommit": {"oid": "42faaf18f7a7942c1f336f44961cadda1ee8e1a1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgwODQ0OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowNjowNlrOG18WJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTowNjowNlrOG18WJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNjQyMg==", "bodyText": "We are not really processing it, maybe storeTransactionReceipt would be better?", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r459216422", "createdAt": "2020-07-23T05:06:06Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "diffHunk": "@@ -206,17 +209,20 @@ void persistPrivateState(\n         disposablePrivateState.rootHash(),\n         privateStateUpdater);\n \n-    final int txStatus =\n-        result.getStatus() == PrivateTransactionProcessor.Result.Status.SUCCESSFUL ? 1 : 0;\n+    maybeUpdateGroupHeadBlockMap(privacyGroupId, currentBlockHash, privateStateUpdater);\n \n-    final PrivateTransactionReceipt privateTransactionReceipt =\n-        new PrivateTransactionReceipt(\n-            txStatus, result.getLogs(), result.getOutput(), result.getRevertReason());\n+    processTransactionReceipt(commitmentHash, currentBlockHash, result, privateStateUpdater);\n+  }\n \n-    privateStateUpdater.putTransactionReceipt(\n-        currentBlockHash, commitmentHash, privateTransactionReceipt);\n+  void processTransactionReceipt(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42faaf18f7a7942c1f336f44961cadda1ee8e1a1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTU3NDMyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1MTowOFrOG2gOAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwMDo1MTowOFrOG2gOAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTgwNDE2Mw==", "bodyText": "I think the code would be easier to read if you moved the commit out of this method, as there is data being committed that is not created in this method.", "url": "https://github.com/hyperledger/besu/pull/1241#discussion_r459804163", "createdAt": "2020-07-24T00:51:08Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "diffHunk": "@@ -206,17 +209,20 @@ void persistPrivateState(\n         disposablePrivateState.rootHash(),\n         privateStateUpdater);\n \n-    final int txStatus =\n-        result.getStatus() == PrivateTransactionProcessor.Result.Status.SUCCESSFUL ? 1 : 0;\n+    maybeUpdateGroupHeadBlockMap(privacyGroupId, currentBlockHash, privateStateUpdater);\n \n-    final PrivateTransactionReceipt privateTransactionReceipt =\n-        new PrivateTransactionReceipt(\n-            txStatus, result.getLogs(), result.getOutput(), result.getRevertReason());\n+    processTransactionReceipt(commitmentHash, currentBlockHash, result, privateStateUpdater);\n+  }\n \n-    privateStateUpdater.putTransactionReceipt(\n-        currentBlockHash, commitmentHash, privateTransactionReceipt);\n+  void processTransactionReceipt(\n+      final Hash pmtHash,\n+      final Hash currentBlockHash,\n+      final PrivateTransactionProcessor.Result result,\n+      final PrivateStateStorage.Updater privateStateUpdater) {\n+    final PrivateTransactionReceipt privateTransactionReceipt =\n+        new PrivateTransactionReceipt(result);\n \n-    maybeUpdateGroupHeadBlockMap(privacyGroupId, currentBlockHash, privateStateUpdater);\n+    privateStateUpdater.putTransactionReceipt(currentBlockHash, pmtHash, privateTransactionReceipt);\n \n     privateStateUpdater.commit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42faaf18f7a7942c1f336f44961cadda1ee8e1a1"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 717, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}