{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2ODc0MjEx", "number": 760, "title": "[Pruning Bugfix] Prevent race condition in key deletion.", "bodyText": "The Bug\nAccount A has storage nodes become inaccessible from any of the recent state tries that we intend to keep.\nAccount B's storage is currently being populated by the block importer and happens to have the some of the same contents of A's storage.\nNodes in A's storage are being swept while the nodes resulting from the processing of the block with B is about to be persisted to the WorldStateKeyValueStorage, which will trigger the marking listener.\nIf the thread running the method removeAllKeysUnless is taken off the cpu before it calls delete, there is an opportunity for a (higher priority) block-import thread to commit the same node that is about to be deleted. This commit will trigger the markNodes listener but at that point it's already too late. We already did the \"in use check\" when we looked at the node in markStorage and have committed to deleting the key.\nBurn-in testing\nAll (including full syncs with pruning - good for checking correctness)\nhttps://grafana-metrics-ohio.ops.pegasys.tech/d/5S-6O8VZk/besu-overview?orgId=1&from=1588263154000&to=now&var-system=dev-besu-release-mainnet-nopruning-nofix&var-system=dev-besu-release-mainnet-nopruning-nofix-fast&var-system=dev-besu-release-mainnet-pruning-bugfix&var-system=dev-besu-release-mainnet-pruning-bugfix-fast&var-system=dev-besu-release-mainnet-pruning-nofix-fast&refresh=10s\nOnly fast syncs (for real use-case performance)\nhttps://grafana-metrics-ohio.ops.pegasys.tech/d/5S-6O8VZk/besu-overview?orgId=1&from=1588262400000&to=now&var-system=dev-besu-release-mainnet-nopruning-nofix-fast&var-system=dev-besu-release-mainnet-pruning-bugfix-fast&var-system=dev-besu-release-mainnet-pruning-nofix-fast&refresh=10s\nFixed Issue(s)\nfixes #580", "createdAt": "2020-04-21T19:52:34Z", "url": "https://github.com/hyperledger/besu/pull/760", "merged": true, "mergeCommit": {"oid": "43eccbbb67b4c08baca4e51f28eccbf484ca6b78"}, "closed": true, "closedAt": "2020-05-06T22:14:21Z", "author": {"login": "RatanRSur"}, "timelineItems": {"totalCount": 76, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ5NyLABqjMyNTc2NjE4MDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceveG3AH2gAyNDA2ODc0MjExOjk0ZWFjOWVhYzViMjg1MjUxMzYwYjZiZWJhNzdjZTVkMjc4NzM3OTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66b3533526d80a014c980dfb052625f4dd0e945b", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/66b3533526d80a014c980dfb052625f4dd0e945b", "committedDate": "2020-04-21T19:48:38Z", "message": "add default lock timeout to tests\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}, "afterCommit": {"oid": "8dce603785246d2359d5007a021cdb74eeb2f670", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/8dce603785246d2359d5007a021cdb74eeb2f670", "committedDate": "2020-04-21T19:53:26Z", "message": "add default lock timeout to tests\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0108416cc04e727910be45527985626c3c6d068a", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/0108416cc04e727910be45527985626c3c6d068a", "committedDate": "2020-04-21T19:55:27Z", "message": "Revert \"rename segments\"\n\nThis reverts commit 184eefaaa0ccc857b0caff2b382f8338ff225d5d."}, "afterCommit": {"oid": "cd807d6bb4816b59d930d8308352ca544b1eede2", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/cd807d6bb4816b59d930d8308352ca544b1eede2", "committedDate": "2020-04-21T19:58:27Z", "message": "Revert \"rename segments\"\n\nThis reverts commit 184eefaaa0ccc857b0caff2b382f8338ff225d5d.\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf27537c59cc290aad5df24ba7712358ecf23566", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/cf27537c59cc290aad5df24ba7712358ecf23566", "committedDate": "2020-04-24T15:02:01Z", "message": "add doomed key check (busy-waiting for now)\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3450147d0cabe962f9ba7a35d2a016a10814036", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/d3450147d0cabe962f9ba7a35d2a016a10814036", "committedDate": "2020-04-24T15:02:01Z", "message": "optional and logging\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b6c74bb457586964648f93f3c4b9abf480d4341", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/2b6c74bb457586964648f93f3c4b9abf480d4341", "committedDate": "2020-04-24T15:02:01Z", "message": "remove logging\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "167f0a744d38817e256c0be75fa6f0843a02bb52", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/167f0a744d38817e256c0be75fa6f0843a02bb52", "committedDate": "2020-04-24T15:02:01Z", "message": "sleeping and hardening\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab5efe605e482682ae4913de3fbde7c96975a3c8", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/ab5efe605e482682ae4913de3fbde7c96975a3c8", "committedDate": "2020-04-24T15:02:01Z", "message": "rename segments\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71a8d78d87cfb605172bef3c62de29d130d51911", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/71a8d78d87cfb605172bef3c62de29d130d51911", "committedDate": "2020-04-24T15:02:01Z", "message": "move away from atomic references to regular vars\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c69237d5f3c42ab432b679e997034db3025db7a", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/6c69237d5f3c42ab432b679e997034db3025db7a", "committedDate": "2020-04-24T15:02:01Z", "message": "remove hardened segment parameter\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9881ea88ac8a7d0c66fec2bd1f53bc3025d02731", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/9881ea88ac8a7d0c66fec2bd1f53bc3025d02731", "committedDate": "2020-04-24T15:02:01Z", "message": "increase sleep\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83d7346305dd22e36cb0608d20c6f5e5d72207b5", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/83d7346305dd22e36cb0608d20c6f5e5d72207b5", "committedDate": "2020-04-24T15:02:01Z", "message": "spotless\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f304ea1bd27c8cc5392e12ffacf81205acd85d5", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/6f304ea1bd27c8cc5392e12ffacf81205acd85d5", "committedDate": "2020-04-24T15:02:01Z", "message": "remove unnecessary interface\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb6539e62c60aaa3f5024523eecde810135ab230", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/eb6539e62c60aaa3f5024523eecde810135ab230", "committedDate": "2020-04-24T15:02:01Z", "message": "rename\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36e13a6d7f70606e35ed0712ee68cf4c085556b8", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/36e13a6d7f70606e35ed0712ee68cf4c085556b8", "committedDate": "2020-04-24T15:02:01Z", "message": "move commit waiting outside of timer\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02ca0557b624da1fe44d206155961a7c97d26b0a", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/02ca0557b624da1fe44d206155961a7c97d26b0a", "committedDate": "2020-04-24T15:02:01Z", "message": "set default lock timeout to 1ms\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06fda926d34975c80aa64c76b4e47abd90e14e89", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/06fda926d34975c80aa64c76b4e47abd90e14e89", "committedDate": "2020-04-24T15:02:01Z", "message": "add default lock timeout to tests\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c529784db8d63274b4ba4f150d5d973342fdaff7", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/c529784db8d63274b4ba4f150d5d973342fdaff7", "committedDate": "2020-04-24T15:02:01Z", "message": "Revert \"rename segments\"\n\nThis reverts commit 184eefaaa0ccc857b0caff2b382f8338ff225d5d.\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87e1354ce24bb4b7cddc73f3f3be69173213e83", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/e87e1354ce24bb4b7cddc73f3f3be69173213e83", "committedDate": "2020-04-24T15:02:01Z", "message": "fix jmh compilation error\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78424b10917504274f126aef62bc70e9954b1a14", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/78424b10917504274f126aef62bc70e9954b1a14", "committedDate": "2020-04-24T15:07:23Z", "message": "add documentation\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0de0c73d1a3076e4a2dc96c0b5f4c5ced30e0b56", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/0de0c73d1a3076e4a2dc96c0b5f4c5ced30e0b56", "committedDate": "2020-04-23T22:37:03Z", "message": "Merge remote-tracking branch 'upstream' into pruning-bugfix-doomed-key"}, "afterCommit": {"oid": "78424b10917504274f126aef62bc70e9954b1a14", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/78424b10917504274f126aef62bc70e9954b1a14", "committedDate": "2020-04-24T15:07:23Z", "message": "add documentation\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90110801aebf59ad928def51822cc8ecbe74205c", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/90110801aebf59ad928def51822cc8ecbe74205c", "committedDate": "2020-04-24T15:41:57Z", "message": "bump up sleep to 1ms\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "036b27179582e061d1e6c90e14e6aaf21d232849", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/036b27179582e061d1e6c90e14e6aaf21d232849", "committedDate": "2020-04-27T14:31:31Z", "message": "Merge branch 'master' into pruning-bugfix-doomed-key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6e79be488064b44a8e0052ef670983c28dc271a", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/d6e79be488064b44a8e0052ef670983c28dc271a", "committedDate": "2020-04-27T21:30:36Z", "message": "(POC) Add lock to ensure that we don't prune while comitting\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0b2cba2830b97bf9ed5e251b2fd09ef8fb423ab", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/b0b2cba2830b97bf9ed5e251b2fd09ef8fb423ab", "committedDate": "2020-04-27T21:30:46Z", "message": "flesh out @mbaxter's idea and remove my code\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dac7da969d1a4d15619970d6868fd005c2de69f", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/8dac7da969d1a4d15619970d6868fd005c2de69f", "committedDate": "2020-04-27T21:30:46Z", "message": "remove unnecessary persist (#569)\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d48b1b68524d17b8162caaeed71737728e6adfd", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/3d48b1b68524d17b8162caaeed71737728e6adfd", "committedDate": "2020-04-27T21:30:46Z", "message": "iterator changes\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3b4af97d280f42666b6450520a1ba1199ac0fec", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/f3b4af97d280f42666b6450520a1ba1199ac0fec", "committedDate": "2020-04-27T21:30:46Z", "message": "hybridize with doomed key\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b10cc74e3fa54e823010f3f89bad36ff9e0dc2", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/80b10cc74e3fa54e823010f3f89bad36ff9e0dc2", "committedDate": "2020-04-27T21:30:46Z", "message": "comment\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dbafb9bcd16e6386daf3cf465186e62471297b7", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/6dbafb9bcd16e6386daf3cf465186e62471297b7", "committedDate": "2020-04-27T21:30:46Z", "message": "move doomed key unset to after node added listener\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "947671d873f58d471fb5f76e2972bea8d82c0a0a", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/947671d873f58d471fb5f76e2972bea8d82c0a0a", "committedDate": "2020-04-27T21:30:46Z", "message": "update instead of getting and setting doomedKeyRef in commit\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8299b1742aa08c08530050a957e36c180db73a1", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/e8299b1742aa08c08530050a957e36c180db73a1", "committedDate": "2020-04-27T21:30:46Z", "message": "comment\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaa96e8d758128d16a171b13a57303a7bd1ce057", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/eaa96e8d758128d16a171b13a57303a7bd1ce057", "committedDate": "2020-04-27T21:30:46Z", "message": "invert condition\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9e2093cd091d909736043ccc5d6edd51ab93a08", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/f9e2093cd091d909736043ccc5d6edd51ab93a08", "committedDate": "2020-04-27T21:30:46Z", "message": "remove locks\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a482905c80c9698b87b89776d6f6581a778b16c", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/1a482905c80c9698b87b89776d6f6581a778b16c", "committedDate": "2020-04-27T21:26:22Z", "message": "remove locks\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}, "afterCommit": {"oid": "f9e2093cd091d909736043ccc5d6edd51ab93a08", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/f9e2093cd091d909736043ccc5d6edd51ab93a08", "committedDate": "2020-04-27T21:30:46Z", "message": "remove locks\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea021b7c2b3f890f953200cfbd2c316cf5352614", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/ea021b7c2b3f890f953200cfbd2c316cf5352614", "committedDate": "2020-04-27T22:11:05Z", "message": "remove `removeAllKeysUnless`\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3758690dc4f521b7b614b0d824d6a6b441681a32", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/3758690dc4f521b7b614b0d824d6a6b441681a32", "committedDate": "2020-04-27T22:44:01Z", "message": "Merge remote-tracking branch 'upstream' into pruning-bugfix-doomed-key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7913cad44aa1f30d881cc1b31f5b72a0749dd944", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/7913cad44aa1f30d881cc1b31f5b72a0749dd944", "committedDate": "2020-04-27T22:53:45Z", "message": "more remove removeAllKeysUnless\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c5445deb7eee655ef6c4bc661a40ffdec4c397a", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/6c5445deb7eee655ef6c4bc661a40ffdec4c397a", "committedDate": "2020-04-27T23:11:15Z", "message": "reuse streamKeys\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dbafe91750872591f083a61d7a2af99b88b4836", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/8dbafe91750872591f083a61d7a2af99b88b4836", "committedDate": "2020-04-27T23:13:45Z", "message": "remove test\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzQxNDk4", "url": "https://github.com/hyperledger/besu/pull/760#pullrequestreview-401341498", "createdAt": "2020-04-27T21:30:30Z", "commit": {"oid": "b9a717ce1a7f56df74adb67074b3bdc0da1f49b5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTozMDozMFrOGM4jbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMDowNzoyMlrOGM80sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2MjY2OA==", "bodyText": "Static seems highly suspicious here.  What if there are two Besu's in the same process?  Probably should either pass the instance into each created Updater instance or just not make Updater a static inner class.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r416162668", "createdAt": "2020-04-27T21:30:30Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -83,12 +89,35 @@ public boolean isWorldStateAvailable(final Bytes32 rootHash) {\n \n   @Override\n   public Updater updater() {\n-    return new Updater(keyValueStorage.startTransaction(), nodeAddedListeners);\n+    return new Updater(lock, keyValueStorage.startTransaction(), nodeAddedListeners);\n   }\n \n+  static final AtomicReference<Optional<byte[]>> doomedKeyRef =\n+      new AtomicReference<>(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a717ce1a7f56df74adb67074b3bdc0da1f49b5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIzMjYyNg==", "bodyText": "I can't work out how this helps with the threading issue.  The bug would be a lot less likely to occur because there's now a second check done but I don't see what's guaranteeing the threading order to guarantee that a transaction isn't adding the key between when we do doomedKeyReft.get().ifPresent and the actual deletion of the key.\nIs there some detail of RocksDB threading and locking I'm missing?", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r416232626", "createdAt": "2020-04-28T00:07:22Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -86,9 +89,32 @@ public Updater updater() {\n     return new Updater(keyValueStorage.startTransaction(), nodeAddedListeners);\n   }\n \n+  static final AtomicReference<Optional<byte[]>> doomedKeyRef =\n+      new AtomicReference<>(Optional.empty());\n+\n   @Override\n   public long prune(final Predicate<byte[]> inUseCheck) {\n-    return keyValueStorage.removeAllKeysUnless(inUseCheck);\n+    final AtomicInteger prunedKeys = new AtomicInteger(0);\n+    try (final Stream<byte[]> keys = keyValueStorage.streamKeys()) {\n+      keys.forEach(\n+          key -> {\n+            doomedKeyRef.set(Optional.of(key));\n+            if (!inUseCheck.test(key)) {\n+              // even though we just set this above, we might unset it in commit below to prevent\n+              // thread interleaving from causing an erroneous deletion\n+              doomedKeyRef\n+                  .get()\n+                  .ifPresent(\n+                      doomedKey -> {\n+                        keyValueStorage.delete(doomedKey);\n+                        prunedKeys.incrementAndGet();\n+                      });\n+            }\n+            doomedKeyRef.set(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbafe91750872591f083a61d7a2af99b88b4836"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "267fe0a642bf9cca89d53e09830454b7137324e6", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/267fe0a642bf9cca89d53e09830454b7137324e6", "committedDate": "2020-04-28T14:36:18Z", "message": "set default lock timeout to 1ms\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aff6aa6065a02bbc7eaa313d58034de48dd1d9ce", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/aff6aa6065a02bbc7eaa313d58034de48dd1d9ce", "committedDate": "2020-04-28T14:36:18Z", "message": "add default lock timeout to tests\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b64ecf86568789583966e534685258d484987deb", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/b64ecf86568789583966e534685258d484987deb", "committedDate": "2020-04-28T14:36:18Z", "message": "fix jmh compilation error\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1356f4030378ff10978c87217a166ac4de22c547", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/1356f4030378ff10978c87217a166ac4de22c547", "committedDate": "2020-04-28T14:39:27Z", "message": "revert back to locks instead of doomedkey\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2289bb34cfe73bb34990db3b5ef3d614222b8c5b", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/2289bb34cfe73bb34990db3b5ef3d614222b8c5b", "committedDate": "2020-04-28T15:20:35Z", "message": "change delete to not guarantee deletion\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1388b9fc641ec12a3680187c413a0d64218b11fa", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/1388b9fc641ec12a3680187c413a0d64218b11fa", "committedDate": "2020-04-28T15:22:47Z", "message": "plugin hash\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fda93174ac21bbbca0652d82712d0f57a323c2d", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/2fda93174ac21bbbca0652d82712d0f57a323c2d", "committedDate": "2020-04-28T15:26:48Z", "message": "Merge remote-tracking branch 'upstream' into pruning-bugfix-doomed-key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6bef5db5fb7fa13a058ee7db18e3dd8a9a3e9be", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/c6bef5db5fb7fa13a058ee7db18e3dd8a9a3e9be", "committedDate": "2020-04-28T15:37:29Z", "message": "javadoc\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d13205800495b1be91116fd66bf334788612cac0", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/d13205800495b1be91116fd66bf334788612cac0", "committedDate": "2020-04-28T15:53:40Z", "message": "Revert \"change delete to not guarantee deletion\"\n\nThis reverts commit 2289bb34cfe73bb34990db3b5ef3d614222b8c5b.\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8876a35e8fbe7096e8826f3cd0896da3427f4ce7", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/8876a35e8fbe7096e8826f3cd0896da3427f4ce7", "committedDate": "2020-04-28T16:24:57Z", "message": "skip key deletion on timeout\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83363d833bebe9d587a297e6fac310100d5665e0", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/83363d833bebe9d587a297e6fac310100d5665e0", "committedDate": "2020-04-28T19:03:34Z", "message": "clear in rollback\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2c7a64d488ed5770b5cc78bedcf753e65a3f34b", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/c2c7a64d488ed5770b5cc78bedcf753e65a3f34b", "committedDate": "2020-04-28T19:05:54Z", "message": "Revert \"fix jmh compilation error\"\n\nThis reverts commit b64ecf86568789583966e534685258d484987deb.\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c74213e6fb21e192b4faea1f257eb825e1291b5", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/6c74213e6fb21e192b4faea1f257eb825e1291b5", "committedDate": "2020-04-28T19:06:01Z", "message": "Revert \"add default lock timeout to tests\"\n\nThis reverts commit aff6aa6065a02bbc7eaa313d58034de48dd1d9ce.\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78018048bb6f21bea886bd82810c8a512719dce2", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/78018048bb6f21bea886bd82810c8a512719dce2", "committedDate": "2020-04-28T19:06:11Z", "message": "Revert \"set default lock timeout to 1ms\"\n\nThis reverts commit 267fe0a642bf9cca89d53e09830454b7137324e6.\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e8e7f0ef5476355a969475f641c25a79b0b08ed", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/7e8e7f0ef5476355a969475f641c25a79b0b08ed", "committedDate": "2020-04-28T19:23:39Z", "message": "use noSlowDown write option instead of global timeout\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb", "committedDate": "2020-04-28T23:29:57Z", "message": "add back tests\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzM3NDgy", "url": "https://github.com/hyperledger/besu/pull/760#pullrequestreview-402737482", "createdAt": "2020-04-29T14:42:02Z", "commit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo0MjowM1rOGOCRJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNjowOVrOGODaTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3MDQwNg==", "bodyText": "(style) I'd suggest checking here if the exception indicates an immediate failure, and throwing a more specific StorageException like FailedOperationStorageException extends StorageException.  And otherwise throwing the generic StorageException.  This \"incomplete\" field is only used in one place, so I think its a lot clearer to just create a specific exception here where we need it.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417370406", "createdAt": "2020-04-29T14:42:03Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "diffHunk": "@@ -165,36 +167,25 @@ public ColumnFamilyHandle getSegmentIdentifierByName(final SegmentIdentifier seg\n   }\n \n   @Override\n-  public long removeAllKeysUnless(\n-      final ColumnFamilyHandle segmentHandle, final Predicate<byte[]> inUseCheck) {\n-    long removedNodeCounter = 0;\n-    try (final RocksIterator rocksIterator = db.newIterator(segmentHandle)) {\n-      for (rocksIterator.seekToFirst(); rocksIterator.isValid(); rocksIterator.next()) {\n-        final byte[] key = rocksIterator.key();\n-        if (!inUseCheck.test(key)) {\n-          removedNodeCounter++;\n-          db.delete(segmentHandle, key);\n-        }\n-      }\n-    } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n+  public Stream<byte[]> streamKeys(final ColumnFamilyHandle segmentHandle) {\n+    final RocksIterator rocksIterator = db.newIterator(segmentHandle);\n+    rocksIterator.seekToFirst();\n+    return RocksDbKeyIterator.create(rocksIterator).toStream();\n+  }\n+\n+  @Override\n+  public void tryDelete(final ColumnFamilyHandle segmentHandle, final byte[] key) {\n+    try {\n+      db.delete(segmentHandle, tryDeleteOptions, key);\n+    } catch (RocksDBException e) {\n+      throw RocksDBExceptionAdapter.createStorageException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3Mjg3Mg==", "bodyText": "We should add some more explanation about what \"tryDelete\" means and how it's intended to work.  I'd also suggest adding a \"@throws FailedOperationException if the delete operation cannot be immediately executed without waiting on outstanding transactions to be committed\" or similar + a good description.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417372872", "createdAt": "2020-04-29T14:45:05Z", "author": {"login": "mbaxter"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "diffHunk": "@@ -61,15 +62,18 @@\n   Optional<byte[]> get(byte[] key) throws StorageException;\n \n   /**\n-   * Performs an evaluation against each key in the store, keeping the entries that pass, removing\n-   * those that fail.\n+   * Returns a stream of all keys.\n    *\n-   * @param retainCondition predicate to evaluate each key against, unless the result is {@code\n-   *     null}, both the key and associated value must be removed.\n-   * @return the number of keys removed.\n-   * @throws StorageException problem encountered when removing data.\n+   * @return A stream of all keys in storage.\n    */\n-  long removeAllKeysUnless(Predicate<byte[]> retainCondition) throws StorageException;\n+  Stream<byte[]> streamKeys();\n+\n+  /**\n+   * Delete the value corresponding to the given key.\n+   *\n+   * @param key The key to delete.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3NjczNg==", "bodyText": "I believe you'll need to close these options inside of the close() method: tryDeleteOptions.close()", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417376736", "createdAt": "2020-04-29T14:50:02Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "diffHunk": "@@ -73,6 +75,7 @@\n   private final AtomicBoolean closed = new AtomicBoolean(false);\n   private final Map<String, ColumnFamilyHandle> columnHandlesByName;\n   private final RocksDBMetrics metrics;\n+  private final WriteOptions tryDeleteOptions = new WriteOptions().setNoSlowdown(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3NzA1NQ==", "bodyText": "I believe you'll need to close these options inside of the close() method: tryDeleteOptions.close()", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417377055", "createdAt": "2020-04-29T14:50:32Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/unsegmented/RocksDBKeyValueStorage.java", "diffHunk": "@@ -56,6 +60,7 @@\n   private final TransactionDB db;\n   private final AtomicBoolean closed = new AtomicBoolean(false);\n   private final RocksDBMetrics rocksDBMetrics;\n+  private final WriteOptions tryDeleteOptions = new WriteOptions().setNoSlowdown(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3ODEyNQ==", "bodyText": "This key wasn't actually pruned if we caught and ignored the StorageException.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417378125", "createdAt": "2020-04-29T14:51:51Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -83,12 +89,32 @@ public boolean isWorldStateAvailable(final Bytes32 rootHash) {\n \n   @Override\n   public Updater updater() {\n-    return new Updater(keyValueStorage.startTransaction(), nodeAddedListeners);\n+    return new Updater(lock, keyValueStorage.startTransaction(), nodeAddedListeners);\n   }\n \n   @Override\n   public long prune(final Predicate<byte[]> inUseCheck) {\n-    return keyValueStorage.removeAllKeysUnless(inUseCheck);\n+    final AtomicInteger prunedKeys = new AtomicInteger(0);\n+    try (final Stream<byte[]> keys = keyValueStorage.streamKeys()) {\n+      keys.forEach(\n+          key -> {\n+            lock.lock();\n+            try {\n+              if (!inUseCheck.test(key)) {\n+                try {\n+                  keyValueStorage.tryDelete(key);\n+                } catch (final StorageException se) {\n+                  if (!se.isIncomplete()) throw se;\n+                }\n+                prunedKeys.incrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4MTQ4OQ==", "bodyText": "Why has Closeable been removed?", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417381489", "createdAt": "2020-04-29T14:56:07Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "diffHunk": "@@ -58,7 +60,7 @@\n import org.rocksdb.WriteOptions;\n \n public class RocksDBColumnarKeyValueStorage\n-    implements SegmentedKeyValueStorage<ColumnFamilyHandle>, Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4Nzg5Nw==", "bodyText": "We were previously using Sets.newIdentityHashSet() to create this set, which it looks like we were doing in order to make the equality checks more efficient.  We should probably keep that.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417387897", "createdAt": "2020-04-29T15:04:21Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/unsegmented/RocksDBKeyValueStorage.java", "diffHunk": "@@ -112,39 +117,29 @@ public boolean containsKey(final byte[] key) throws StorageException {\n         rocksDBMetrics.getReadLatency().startTimer()) {\n       return Optional.ofNullable(db.get(key));\n     } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n+      throw RocksDBExceptionAdapter.createStorageException(e);\n     }\n   }\n \n   @Override\n-  public long removeAllKeysUnless(final Predicate<byte[]> retainCondition) throws StorageException {\n-    long removedNodeCounter = 0;\n-    try (final RocksIterator rocksIterator = db.newIterator()) {\n-      for (rocksIterator.seekToFirst(); rocksIterator.isValid(); rocksIterator.next()) {\n-        final byte[] key = rocksIterator.key();\n-        if (!retainCondition.test(key)) {\n-          removedNodeCounter++;\n-          db.delete(key);\n-        }\n-      }\n-    } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n-    }\n-    return removedNodeCounter;\n+  public Set<byte[]> getAllKeysThat(final Predicate<byte[]> returnCondition) {\n+    return streamKeys().filter(returnCondition).collect(toUnmodifiableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4OTEzNQ==", "bodyText": "get() already does the locking internally - I don't think you need this extra locking", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417389135", "createdAt": "2020-04-29T15:06:09Z", "author": {"login": "mbaxter"}, "path": "services/kvstore/src/main/java/org/hyperledger/besu/services/kvstore/LimitedInMemoryKeyValueStorage.java", "diffHunk": "@@ -59,7 +62,13 @@ public void clear() {\n \n   @Override\n   public boolean containsKey(final byte[] key) throws StorageException {\n-    return get(key).isPresent();\n+    final Lock lock = rwLock.readLock();\n+    lock.lock();\n+    try {\n+      return get(key).isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6768710aee5f4cff9d4ad39250b923831a913e48", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/6768710aee5f4cff9d4ad39250b923831a913e48", "committedDate": "2020-04-29T15:25:38Z", "message": "close tryDeleteOptions\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c941232af5a9acac57b2a6ba2691644950934f26", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/c941232af5a9acac57b2a6ba2691644950934f26", "committedDate": "2020-04-29T15:25:52Z", "message": "remove unnecessary lock\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70130cfa4efc473a5b557d49c45b04b94c102385", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/70130cfa4efc473a5b557d49c45b04b94c102385", "committedDate": "2020-04-29T15:28:33Z", "message": "move increment inside try\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ded1c590037f338c9f2b23d95078e65c27c58543", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/ded1c590037f338c9f2b23d95078e65c27c58543", "committedDate": "2020-04-29T15:52:27Z", "message": "use StorageException subclass instead of field\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e1daac0aa28147430d82bf1bf12a0471d12752b", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/2e1daac0aa28147430d82bf1bf12a0471d12752b", "committedDate": "2020-04-29T16:00:04Z", "message": "revert accidental deletion in javadoc\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/dbfaa911aaa0094b049ce198151814cb76b2249d", "committedDate": "2020-04-29T16:08:36Z", "message": "tryDelete javadoc\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTg0NjM0", "url": "https://github.com/hyperledger/besu/pull/760#pullrequestreview-403184634", "createdAt": "2020-04-30T03:56:31Z", "commit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo1NjozMlrOGOYyXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDowMzoxMlrOGOY3_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczOTM1Nw==", "bodyText": "We should at least have a trace log message here.\nAnd a small style nit, you could probably put this catch on the try/finally for unlocking instead of needing nested try cases.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417739357", "createdAt": "2020-04-30T03:56:32Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -83,12 +89,31 @@ public boolean isWorldStateAvailable(final Bytes32 rootHash) {\n \n   @Override\n   public Updater updater() {\n-    return new Updater(keyValueStorage.startTransaction(), nodeAddedListeners);\n+    return new Updater(lock, keyValueStorage.startTransaction(), nodeAddedListeners);\n   }\n \n   @Override\n   public long prune(final Predicate<byte[]> inUseCheck) {\n-    return keyValueStorage.removeAllKeysUnless(inUseCheck);\n+    final AtomicInteger prunedKeys = new AtomicInteger(0);\n+    try (final Stream<byte[]> keys = keyValueStorage.streamKeys()) {\n+      keys.forEach(\n+          key -> {\n+            lock.lock();\n+            try {\n+              if (!inUseCheck.test(key)) {\n+                try {\n+                  keyValueStorage.tryDelete(key);\n+                  prunedKeys.incrementAndGet();\n+                } catch (final IncompleteOperationException __) {\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczOTYzNA==", "bodyText": "It's nice that we only wind up taking the lock when we actually commit rather than on each write - guessing that dramatically reduces contention so performance would be much less likely to be affecting.  Pruning might be slower because it takes the lock on every key but that's not a problem.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417739634", "createdAt": "2020-04-30T03:57:50Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -156,12 +184,18 @@ public Updater putAccountStorageTrieNode(final Bytes32 nodeHash, final Bytes nod\n \n     @Override\n     public void commit() {\n-      nodeAddedListeners.forEach(listener -> listener.onNodesAdded(addedNodes));\n-      transaction.commit();\n+      lock.lock();\n+      try {\n+        nodeAddedListeners.forEach(listener -> listener.onNodesAdded(addedNodes));\n+        transaction.commit();\n+      } finally {\n+        lock.unlock();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MDQwMQ==", "bodyText": "We probably need to make the requirements for this method clearer - is it allowed to wait for the lock to be available or must it always immediately fail if the lock is unavailable?  Otherwise we risk pruning not working or getting deadlocks with some storage plugins because they don't exhibit the behaviour we need here.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417740401", "createdAt": "2020-04-30T04:01:22Z", "author": {"login": "ajsutton"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "diffHunk": "@@ -61,15 +63,23 @@\n   Optional<byte[]> get(byte[] key) throws StorageException;\n \n   /**\n-   * Performs an evaluation against each key in the store, keeping the entries that pass, removing\n-   * those that fail.\n+   * Returns a stream of all keys.\n    *\n-   * @param retainCondition predicate to evaluate each key against, unless the result is {@code\n-   *     null}, both the key and associated value must be removed.\n-   * @return the number of keys removed.\n-   * @throws StorageException problem encountered when removing data.\n+   * @return A stream of all keys in storage.\n+   * @throws StorageException problem encountered during the retrieval attempt.\n+   */\n+  Stream<byte[]> streamKeys() throws StorageException;\n+\n+  /**\n+   * Attempt to delete the value corresponding to the given key. For some storage mediums we want to\n+   * be able to abandon the delete under certain circumstances. For example, to abandon the attempt\n+   * if we can't acquire a lock on the underlying storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MDc5Ng==", "bodyText": "We should make this return boolean rather than throwing an exception since not completing the operation is a \"normal\" outcome, we shouldn't model it as an exception.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417740796", "createdAt": "2020-04-30T04:03:12Z", "author": {"login": "ajsutton"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "diffHunk": "@@ -61,15 +63,23 @@\n   Optional<byte[]> get(byte[] key) throws StorageException;\n \n   /**\n-   * Performs an evaluation against each key in the store, keeping the entries that pass, removing\n-   * those that fail.\n+   * Returns a stream of all keys.\n    *\n-   * @param retainCondition predicate to evaluate each key against, unless the result is {@code\n-   *     null}, both the key and associated value must be removed.\n-   * @return the number of keys removed.\n-   * @throws StorageException problem encountered when removing data.\n+   * @return A stream of all keys in storage.\n+   * @throws StorageException problem encountered during the retrieval attempt.\n+   */\n+  Stream<byte[]> streamKeys() throws StorageException;\n+\n+  /**\n+   * Attempt to delete the value corresponding to the given key. For some storage mediums we want to\n+   * be able to abandon the delete under certain circumstances. For example, to abandon the attempt\n+   * if we can't acquire a lock on the underlying storage.\n+   *\n+   * @param key The key to delete.\n+   * @throws IncompleteOperationException the operation was incomplete and the key was not deleted\n+   * @throws StorageException any other problem encountered during the deletion attempt.\n    */\n-  long removeAllKeysUnless(Predicate<byte[]> retainCondition) throws StorageException;\n+  void tryDelete(byte[] key) throws IncompleteOperationException, StorageException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "691339f8aa1d667892fbc81bee6c8b93516642e4", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/691339f8aa1d667892fbc81bee6c8b93516642e4", "committedDate": "2020-04-30T13:58:52Z", "message": "add trace for skipping key deletion\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a92a941a95e0a85d61d980584ac19c66b3c202dc", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/a92a941a95e0a85d61d980584ac19c66b3c202dc", "committedDate": "2020-04-30T13:59:54Z", "message": "merge catch and finally try blocks\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6e09ddd3c08a818f38e5f776f95324abad73a99", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/f6e09ddd3c08a818f38e5f776f95324abad73a99", "committedDate": "2020-04-30T15:06:50Z", "message": "switch from exception to boolean return value\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cf726c1b076e1360e0c020587e874ed7cbdad75", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/6cf726c1b076e1360e0c020587e874ed7cbdad75", "committedDate": "2020-04-30T15:16:56Z", "message": "Merge branch 'master' into pruning-bugfix-doomed-key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaf5f5492b22db8f8d5501b4072be9c8e85f052e", "author": {"user": {"login": "mbaxter", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/eaf5f5492b22db8f8d5501b4072be9c8e85f052e", "committedDate": "2020-05-06T18:35:41Z", "message": "Merge branch 'master' into pruning-bugfix-doomed-key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODg3MjMy", "url": "https://github.com/hyperledger/besu/pull/760#pullrequestreview-406887232", "createdAt": "2020-05-06T18:40:21Z", "commit": {"oid": "eaf5f5492b22db8f8d5501b4072be9c8e85f052e"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MDoyMVrOGRgazw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1MDozMlrOGRgy9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDEyNw==", "bodyText": "Whoops - looks like copy/pasta\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                checkState(!closed.get(), \"Attempt to update a closed transaction\");\n          \n          \n            \n                checkState(!closed.get(), \"Attempt to read from a closed \" + getClass().getSimpleName());", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r421010127", "createdAt": "2020-05-06T18:40:21Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/RocksDbKeyIterator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.plugin.services.storage.rocksdb;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+public class RocksDbKeyIterator implements Iterator<byte[]>, AutoCloseable {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final RocksIterator rocksIterator;\n+  private final AtomicBoolean closed = new AtomicBoolean(false);\n+\n+  private RocksDbKeyIterator(final RocksIterator rocksIterator) {\n+    this.rocksIterator = rocksIterator;\n+  }\n+\n+  public static RocksDbKeyIterator create(final RocksIterator rocksIterator) {\n+    return new RocksDbKeyIterator(rocksIterator);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    assertOpen();\n+    return rocksIterator.isValid();\n+  }\n+\n+  @Override\n+  public byte[] next() {\n+    assertOpen();\n+    try {\n+      rocksIterator.status();\n+    } catch (final RocksDBException e) {\n+      LOG.error(\"RocksDbEntryIterator encountered a problem while iterating.\", e);\n+    }\n+    if (!hasNext()) {\n+      throw new NoSuchElementException();\n+    }\n+    final byte[] key = rocksIterator.key();\n+    rocksIterator.next();\n+    return key;\n+  }\n+\n+  public Stream<byte[]> toStream() {\n+    assertOpen();\n+    final Spliterator<byte[]> spliterator =\n+        Spliterators.spliteratorUnknownSize(\n+            this,\n+            Spliterator.IMMUTABLE\n+                | Spliterator.DISTINCT\n+                | Spliterator.NONNULL\n+                | Spliterator.ORDERED\n+                | Spliterator.SORTED);\n+\n+    return StreamSupport.stream(spliterator, false).onClose(this::close);\n+  }\n+\n+  private void assertOpen() {\n+    checkState(!closed.get(), \"Attempt to update a closed transaction\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf5f5492b22db8f8d5501b4072be9c8e85f052e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTE3OQ==", "bodyText": "Sanity check - I assume we've thought through the implications of removing this public API?", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r421015179", "createdAt": "2020-05-06T18:48:39Z", "author": {"login": "mbaxter"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "diffHunk": "@@ -61,15 +62,23 @@\n   Optional<byte[]> get(byte[] key) throws StorageException;\n \n   /**\n-   * Performs an evaluation against each key in the store, keeping the entries that pass, removing\n-   * those that fail.\n+   * Returns a stream of all keys.\n    *\n-   * @param retainCondition predicate to evaluate each key against, unless the result is {@code\n-   *     null}, both the key and associated value must be removed.\n-   * @return the number of keys removed.\n-   * @throws StorageException problem encountered when removing data.\n+   * @return A stream of all keys in storage.\n+   * @throws StorageException problem encountered during the retrieval attempt.\n+   */\n+  Stream<byte[]> streamKeys() throws StorageException;\n+\n+  /**\n+   * Delete the value corresponding to the given key if a write lock can be instantly acquired on\n+   * the underlying storage. Do nothing otherwise.\n+   *\n+   * @param key The key to delete.\n+   * @throws StorageException any problem encountered during the deletion attempt.\n+   * @return false if the lock on the underlying storage could not be instantly acquired, true\n+   *     otherwise\n    */\n-  long removeAllKeysUnless(Predicate<byte[]> retainCondition) throws StorageException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf5f5492b22db8f8d5501b4072be9c8e85f052e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNjMxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.error(\"RocksDbEntryIterator encountered a problem while iterating.\", e);\n          \n          \n            \n                  LOG.error(getClass().getSimpleName() + \" encountered a problem while iterating.\", e);", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r421016311", "createdAt": "2020-05-06T18:50:32Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/RocksDbKeyIterator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.plugin.services.storage.rocksdb;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+public class RocksDbKeyIterator implements Iterator<byte[]>, AutoCloseable {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final RocksIterator rocksIterator;\n+  private final AtomicBoolean closed = new AtomicBoolean(false);\n+\n+  private RocksDbKeyIterator(final RocksIterator rocksIterator) {\n+    this.rocksIterator = rocksIterator;\n+  }\n+\n+  public static RocksDbKeyIterator create(final RocksIterator rocksIterator) {\n+    return new RocksDbKeyIterator(rocksIterator);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    assertOpen();\n+    return rocksIterator.isValid();\n+  }\n+\n+  @Override\n+  public byte[] next() {\n+    assertOpen();\n+    try {\n+      rocksIterator.status();\n+    } catch (final RocksDBException e) {\n+      LOG.error(\"RocksDbEntryIterator encountered a problem while iterating.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf5f5492b22db8f8d5501b4072be9c8e85f052e"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b1d2614c951f10aaad69f7d534ecc5229453b4e", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/9b1d2614c951f10aaad69f7d534ecc5229453b4e", "committedDate": "2020-05-06T19:25:09Z", "message": "tweak\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c7c43d025a2a7c495ce991bfe8b344d782b9355", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/4c7c43d025a2a7c495ce991bfe8b344d782b9355", "committedDate": "2020-05-06T19:31:50Z", "message": "changelog changes\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80f8bf1ec430c2c153e64ea9d6891599fb9e2957", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/80f8bf1ec430c2c153e64ea9d6891599fb9e2957", "committedDate": "2020-05-06T20:30:55Z", "message": "add api back\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cec87497c818480cfd51e50763c9cc29815ce08c", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/cec87497c818480cfd51e50763c9cc29815ce08c", "committedDate": "2020-05-06T20:34:41Z", "message": "add back throws javadoc\n\nSigned-off-by: Ratan Rai Sur <ratan.r.sur@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8beda58893e278679b534ee870cf619f802cf67", "author": {"user": {"login": "RatanRSur", "name": "Ratan (Rai) Sur"}}, "url": "https://github.com/hyperledger/besu/commit/b8beda58893e278679b534ee870cf619f802cf67", "committedDate": "2020-05-06T20:51:30Z", "message": "Merge branch 'master' into pruning-bugfix-doomed-key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94eac9eac5b285251360b6beba77ce5d27873797", "author": {"user": {"login": "MadelineMurray", "name": null}}, "url": "https://github.com/hyperledger/besu/commit/94eac9eac5b285251360b6beba77ce5d27873797", "committedDate": "2020-05-06T21:22:14Z", "message": "Merge branch 'master' into pruning-bugfix-doomed-key"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1587, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}