{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NzAxNjU2", "number": 1320, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDozMjowOVrOEcGSJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDozOToyOVrOEcGgOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODk4NTM0OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/FixedStack.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDozMjowOVrOHGbAkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDo0ODowMVrOHGbwsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5NjAxNw==", "bodyText": "shouldn't we check the \"top-offset\" bounds rather than just offset?", "url": "https://github.com/hyperledger/besu/pull/1320#discussion_r476496017", "createdAt": "2020-08-25T14:32:09Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/FixedStack.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.vm;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n+\n+/**\n+ * An operand stack for the Ethereum Virtual machine (EVM).\n+ *\n+ * <p>The operand stack is responsible for storing the current operands that the EVM can execute. It\n+ * is assumed to have a fixed size.\n+ */\n+public class FixedStack<T> {\n+\n+  private final T[] entries;\n+\n+  private final int maxSize;\n+\n+  private int top;\n+\n+  public static class UnderflowException extends RuntimeException {\n+    // Don't create a stack trace since these are not \"errors\" per say but are using exceptions to\n+    // throw rare control flow conditions (EVM stack overflow) that are expected to be seen in\n+    // normal\n+    // operations.\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+      return this;\n+    }\n+  }\n+\n+  public static class OverflowException extends RuntimeException {\n+    // Don't create a stack trace since these are not \"errors\" per say but are using exceptions to\n+    // throw rare control flow conditions (EVM stack overflow) that are expected to be seen in\n+    // normal\n+    // operations.\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+      return this;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public FixedStack(final int maxSize, final Class<T> klass) {\n+    checkArgument(maxSize >= 0, \"max size must be non-negative\");\n+\n+    this.entries = (T[]) Array.newInstance(klass, maxSize);\n+    this.maxSize = maxSize;\n+    this.top = -1;\n+  }\n+\n+  public T get(final int offset) {\n+    if (offset < 0 || offset >= size()) {\n+      throw new IndexOutOfBoundsException();\n+    }\n+\n+    return entries[top - offset];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ed96a6a04867ce1766cf416e612d53b60642e6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwODMzNw==", "bodyText": "offset is always positive.  size() is always top + 1.  So the index is always between zero and top, it's a check that would always pass after asserting those two boundaries on offset.", "url": "https://github.com/hyperledger/besu/pull/1320#discussion_r476508337", "createdAt": "2020-08-25T14:48:01Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/FixedStack.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.vm;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+\n+import java.lang.reflect.Array;\n+import java.util.Arrays;\n+\n+/**\n+ * An operand stack for the Ethereum Virtual machine (EVM).\n+ *\n+ * <p>The operand stack is responsible for storing the current operands that the EVM can execute. It\n+ * is assumed to have a fixed size.\n+ */\n+public class FixedStack<T> {\n+\n+  private final T[] entries;\n+\n+  private final int maxSize;\n+\n+  private int top;\n+\n+  public static class UnderflowException extends RuntimeException {\n+    // Don't create a stack trace since these are not \"errors\" per say but are using exceptions to\n+    // throw rare control flow conditions (EVM stack overflow) that are expected to be seen in\n+    // normal\n+    // operations.\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+      return this;\n+    }\n+  }\n+\n+  public static class OverflowException extends RuntimeException {\n+    // Don't create a stack trace since these are not \"errors\" per say but are using exceptions to\n+    // throw rare control flow conditions (EVM stack overflow) that are expected to be seen in\n+    // normal\n+    // operations.\n+    @Override\n+    public synchronized Throwable fillInStackTrace() {\n+      return this;\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public FixedStack(final int maxSize, final Class<T> klass) {\n+    checkArgument(maxSize >= 0, \"max size must be non-negative\");\n+\n+    this.entries = (T[]) Array.newInstance(klass, maxSize);\n+    this.maxSize = maxSize;\n+    this.top = -1;\n+  }\n+\n+  public T get(final int offset) {\n+    if (offset < 0 || offset >= size()) {\n+      throw new IndexOutOfBoundsException();\n+    }\n+\n+    return entries[top - offset];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5NjAxNw=="}, "originalCommit": {"oid": "a8ed96a6a04867ce1766cf416e612d53b60642e6"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTAyMTM5OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/vm/operations/BeginSubOperationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDozOToyOVrOHGbWoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDo0NDo1N1rOHGbnog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwMTY2NA==", "bodyText": "I don't understand why this test had to be modified \ud83e\udd14", "url": "https://github.com/hyperledger/besu/pull/1320#discussion_r476501664", "createdAt": "2020-08-25T14:39:29Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/vm/operations/BeginSubOperationTest.java", "diffHunk": "@@ -95,6 +94,6 @@ public void shouldHaltWithInvalidSubRoutineEntryWhenBeginSubIsExecuted() {\n     frame.setPC(CURRENT_PC);\n     final OperationResult result = operation.execute(frame, null);\n \n-    assertThat(result.getHaltReason()).contains(ExceptionalHaltReason.INVALID_SUB_ROUTINE_ENTRY);\n+    assertThat(result.getHaltReason()).isNotEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ed96a6a04867ce1766cf416e612d53b60642e6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwNjAxOA==", "bodyText": "The test would also fail because of out of gas, and we check gas sooner now.  I think your intent is right in that the only way this should fail is invalid subroutine entry, so I re-worked the test to provide more gas and only accept that exceptional halt.", "url": "https://github.com/hyperledger/besu/pull/1320#discussion_r476506018", "createdAt": "2020-08-25T14:44:57Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/vm/operations/BeginSubOperationTest.java", "diffHunk": "@@ -95,6 +94,6 @@ public void shouldHaltWithInvalidSubRoutineEntryWhenBeginSubIsExecuted() {\n     frame.setPC(CURRENT_PC);\n     final OperationResult result = operation.execute(frame, null);\n \n-    assertThat(result.getHaltReason()).contains(ExceptionalHaltReason.INVALID_SUB_ROUTINE_ENTRY);\n+    assertThat(result.getHaltReason()).isNotEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUwMTY2NA=="}, "originalCommit": {"oid": "a8ed96a6a04867ce1766cf416e612d53b60642e6"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 758, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}