{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTU0MTgy", "number": 327, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMTowODowNlrODar-Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMTowODowNlrODar-Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzEwMDUwOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMTowODowNlrOFhxXvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMjoyODo1NFrOFhyKtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NjIyMg==", "bodyText": "It would be worth printing a message here so that if an unexpected exception is thrown in the normal code there\u2019s some info about why.", "url": "https://github.com/hyperledger/besu/pull/327#discussion_r370956222", "createdAt": "2020-01-25T21:08:06Z", "author": {"login": "ajsutton"}, "path": "build.gradle", "diffHunk": "@@ -646,25 +646,29 @@ def calculateVersion() {\n }\n \n def getCheckedOutGitCommitHash() {\n-  def gitFolder = \"$projectDir/.git/\"\n-  if (!file(gitFolder).isDirectory()) {\n-    // We are in a submodule.  The file's contents are `gitdir: <gitFolder>\\n`.\n-    // Read the file, cut off the front, and trim the whitespace.\n-    gitFolder = file(gitFolder).text.substring(8).trim() + \"/\"\n+  try {\n+    def gitFolder = \"$projectDir/.git/\"\n+    if (!file(gitFolder).isDirectory()) {\n+      // We are in a submodule.  The file's contents are `gitdir: <gitFolder>\\n`.\n+      // Read the file, cut off the front, and trim the whitespace.\n+      gitFolder = file(gitFolder).text.substring(8).trim() + \"/\"\n+    }\n+    def takeFromHash = 8\n+    /*\n+     * '.git/HEAD' contains either\n+     *      in case of detached head: the currently checked out commit hash\n+     *      otherwise: a reference to a file containing the current commit hash\n+     */\n+    def head = new File(gitFolder + \"HEAD\").text.split(\":\") // .git/HEAD\n+    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd\n+\n+    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb\n+\n+    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master\n+    refHead.text.trim().take takeFromHash\n+  } catch (Exception e) {\n+    return \"xxxxxxxx\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7828d7904021f24031559f813808dd3c652bdd0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MTE3Mw==", "bodyText": "The stack trace is 257 lines long, so I hid the stack trace at \"info\" level, notified at \"warn\" level, and memoized the execution so you get it only twice not 20+ times.", "url": "https://github.com/hyperledger/besu/pull/327#discussion_r370961173", "createdAt": "2020-01-25T22:58:59Z", "author": {"login": "shemnon"}, "path": "build.gradle", "diffHunk": "@@ -646,25 +646,29 @@ def calculateVersion() {\n }\n \n def getCheckedOutGitCommitHash() {\n-  def gitFolder = \"$projectDir/.git/\"\n-  if (!file(gitFolder).isDirectory()) {\n-    // We are in a submodule.  The file's contents are `gitdir: <gitFolder>\\n`.\n-    // Read the file, cut off the front, and trim the whitespace.\n-    gitFolder = file(gitFolder).text.substring(8).trim() + \"/\"\n+  try {\n+    def gitFolder = \"$projectDir/.git/\"\n+    if (!file(gitFolder).isDirectory()) {\n+      // We are in a submodule.  The file's contents are `gitdir: <gitFolder>\\n`.\n+      // Read the file, cut off the front, and trim the whitespace.\n+      gitFolder = file(gitFolder).text.substring(8).trim() + \"/\"\n+    }\n+    def takeFromHash = 8\n+    /*\n+     * '.git/HEAD' contains either\n+     *      in case of detached head: the currently checked out commit hash\n+     *      otherwise: a reference to a file containing the current commit hash\n+     */\n+    def head = new File(gitFolder + \"HEAD\").text.split(\":\") // .git/HEAD\n+    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd\n+\n+    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb\n+\n+    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master\n+    refHead.text.trim().take takeFromHash\n+  } catch (Exception e) {\n+    return \"xxxxxxxx\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NjIyMg=="}, "originalCommit": {"oid": "c7828d7904021f24031559f813808dd3c652bdd0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2OTI3MQ==", "bodyText": "+1 seems like a good trade off.", "url": "https://github.com/hyperledger/besu/pull/327#discussion_r370969271", "createdAt": "2020-01-26T02:28:54Z", "author": {"login": "ajsutton"}, "path": "build.gradle", "diffHunk": "@@ -646,25 +646,29 @@ def calculateVersion() {\n }\n \n def getCheckedOutGitCommitHash() {\n-  def gitFolder = \"$projectDir/.git/\"\n-  if (!file(gitFolder).isDirectory()) {\n-    // We are in a submodule.  The file's contents are `gitdir: <gitFolder>\\n`.\n-    // Read the file, cut off the front, and trim the whitespace.\n-    gitFolder = file(gitFolder).text.substring(8).trim() + \"/\"\n+  try {\n+    def gitFolder = \"$projectDir/.git/\"\n+    if (!file(gitFolder).isDirectory()) {\n+      // We are in a submodule.  The file's contents are `gitdir: <gitFolder>\\n`.\n+      // Read the file, cut off the front, and trim the whitespace.\n+      gitFolder = file(gitFolder).text.substring(8).trim() + \"/\"\n+    }\n+    def takeFromHash = 8\n+    /*\n+     * '.git/HEAD' contains either\n+     *      in case of detached head: the currently checked out commit hash\n+     *      otherwise: a reference to a file containing the current commit hash\n+     */\n+    def head = new File(gitFolder + \"HEAD\").text.split(\":\") // .git/HEAD\n+    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd\n+\n+    if (isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb\n+\n+    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master\n+    refHead.text.trim().take takeFromHash\n+  } catch (Exception e) {\n+    return \"xxxxxxxx\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk1NjIyMg=="}, "originalCommit": {"oid": "c7828d7904021f24031559f813808dd3c652bdd0"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1205, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}