{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDg5MTk2", "number": 1281, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NjozOFrOEW23jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozODoyMFrOEYSiAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDAzMDg1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/RpcMethod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1NjozOFrOG-VEnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTo0MzoyMVrOG_dhIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMDE0MA==", "bodyText": "Unless this is a standard (or standards track) API I think we should either take it out of the eth_ namespace (debug_ or an new one) or make it obviously bogus, like  eth_x_batchSendRawTransaction", "url": "https://github.com/hyperledger/besu/pull/1281#discussion_r468010140", "createdAt": "2020-08-10T15:56:38Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/RpcMethod.java", "diffHunk": "@@ -94,6 +94,7 @@\n   ETH_NEW_PENDING_TRANSACTION_FILTER(\"eth_newPendingTransactionFilter\"),\n   ETH_PROTOCOL_VERSION(\"eth_protocolVersion\"),\n   ETH_SEND_RAW_TRANSACTION(\"eth_sendRawTransaction\"),\n+  ETH_BATCH_RAW_TRANSACTION(\"eth_batchSendRawTransaction\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b92959900d1cb64230064985decd829ade2b6f2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5NzA4OQ==", "bodyText": "Removed from this PR\ncc - @abdelhamidbakhta", "url": "https://github.com/hyperledger/besu/pull/1281#discussion_r469197089", "createdAt": "2020-08-12T11:43:21Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/RpcMethod.java", "diffHunk": "@@ -94,6 +94,7 @@\n   ETH_NEW_PENDING_TRANSACTION_FILTER(\"eth_newPendingTransactionFilter\"),\n   ETH_PROTOCOL_VERSION(\"eth_protocolVersion\"),\n   ETH_SEND_RAW_TRANSACTION(\"eth_sendRawTransaction\"),\n+  ETH_BATCH_RAW_TRANSACTION(\"eth_batchSendRawTransaction\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMDE0MA=="}, "originalCommit": {"oid": "2b92959900d1cb64230064985decd829ade2b6f2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDAzNzU1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthBatchSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNTo1ODoyM1rOG-VIsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMTo0MzozMFrOG_dhYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMTE4Nw==", "bodyText": "What happens when one transaction in the middle would fail the addLocalTransaction call? Or the decode call? Did the TXes all before get processed OK?  Do the TXes after it it still get added?  Should we return success count and failure count?  Return errors with indexes?  A black hole concerns me.\nPerhaps we stop at the first error.  All prior TXes are submitted and we send an error response including the index of the error and the error.  This may involve changing this to a traditional for loop.", "url": "https://github.com/hyperledger/besu/pull/1281#discussion_r468011187", "createdAt": "2020-08-10T15:58:23Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthBatchSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.util.DomainObjectDecodeUtils;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+\n+import java.util.function.Supplier;\n+import java.util.stream.IntStream;\n+\n+import com.google.common.base.Suppliers;\n+\n+public class EthBatchSendRawTransaction implements JsonRpcMethod {\n+\n+  private final Supplier<TransactionPool> transactionPool;\n+\n+  public EthBatchSendRawTransaction(final TransactionPool transactionPool) {\n+    this(Suppliers.ofInstance(transactionPool));\n+  }\n+\n+  public EthBatchSendRawTransaction(final Supplier<TransactionPool> transactionPool) {\n+    this.transactionPool = transactionPool;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ETH_BATCH_RAW_TRANSACTION.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    IntStream.range(0, requestContext.getRequest().getParamLength())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b92959900d1cb64230064985decd829ade2b6f2"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE5NzE1Mw==", "bodyText": "Removed from this PR\ncc - @abdelhamidbakhta", "url": "https://github.com/hyperledger/besu/pull/1281#discussion_r469197153", "createdAt": "2020-08-12T11:43:30Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthBatchSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.util.DomainObjectDecodeUtils;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+\n+import java.util.function.Supplier;\n+import java.util.stream.IntStream;\n+\n+import com.google.common.base.Suppliers;\n+\n+public class EthBatchSendRawTransaction implements JsonRpcMethod {\n+\n+  private final Supplier<TransactionPool> transactionPool;\n+\n+  public EthBatchSendRawTransaction(final TransactionPool transactionPool) {\n+    this(Suppliers.ofInstance(transactionPool));\n+  }\n+\n+  public EthBatchSendRawTransaction(final Supplier<TransactionPool> transactionPool) {\n+    this.transactionPool = transactionPool;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ETH_BATCH_RAW_TRANSACTION.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    IntStream.range(0, requestContext.getRequest().getParamLength())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAxMTE4Nw=="}, "originalCommit": {"oid": "2b92959900d1cb64230064985decd829ade2b6f2"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA0NzU2OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/core/fees/EIP1559BaseFeeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNzo1OFrOHAi-OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMToxNzoyMVrOHAw82A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNTAzMw==", "bodyText": "Let's stick with just @Parameters", "url": "https://github.com/hyperledger/besu/pull/1281#discussion_r470335033", "createdAt": "2020-08-14T00:37:58Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/core/fees/EIP1559BaseFeeTest.java", "diffHunk": "@@ -14,60 +14,69 @@\n  */\n package org.hyperledger.besu.ethereum.core.fees;\n \n+import static com.google.common.base.Preconditions.checkState;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import org.hyperledger.besu.config.experimental.ExperimentalEIPs;\n \n-import java.util.Arrays;\n+import java.net.URL;\n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Resources;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n \n @RunWith(Parameterized.class)\n public class EIP1559BaseFeeTest {\n \n-  private static final long MARKER_BASE_FEE = 1049238967;\n-  private final EIP1559 eip1559 = new EIP1559(0L);\n-  private static final FeeMarket FEE_MARKET = FeeMarket.eip1559();\n+  private final EIP1559 eip1559 = new EIP1559(0);\n \n-  @Parameters\n+  @Parameterized.Parameters", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d6205ab7f121cb65cba2335d472d9e768653a8c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDA1Ng==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1281#discussion_r470564056", "createdAt": "2020-08-14T11:17:21Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/core/fees/EIP1559BaseFeeTest.java", "diffHunk": "@@ -14,60 +14,69 @@\n  */\n package org.hyperledger.besu.ethereum.core.fees;\n \n+import static com.google.common.base.Preconditions.checkState;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import org.hyperledger.besu.config.experimental.ExperimentalEIPs;\n \n-import java.util.Arrays;\n+import java.net.URL;\n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Resources;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n \n @RunWith(Parameterized.class)\n public class EIP1559BaseFeeTest {\n \n-  private static final long MARKER_BASE_FEE = 1049238967;\n-  private final EIP1559 eip1559 = new EIP1559(0L);\n-  private static final FeeMarket FEE_MARKET = FeeMarket.eip1559();\n+  private final EIP1559 eip1559 = new EIP1559(0);\n \n-  @Parameters\n+  @Parameterized.Parameters", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNTAzMw=="}, "originalCommit": {"oid": "0d6205ab7f121cb65cba2335d472d9e768653a8c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA0ODk4OnYy", "diffSide": "LEFT", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/core/fees/EIP1559BaseFeeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozODoyMFrOHAi_Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMToxNzoxNVrOHAw8qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNTI1MA==", "bodyText": "This import should be restored. for the below comment", "url": "https://github.com/hyperledger/besu/pull/1281#discussion_r470335250", "createdAt": "2020-08-14T00:38:20Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/core/fees/EIP1559BaseFeeTest.java", "diffHunk": "@@ -14,60 +14,69 @@\n  */\n package org.hyperledger.besu.ethereum.core.fees;\n \n+import static com.google.common.base.Preconditions.checkState;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import org.hyperledger.besu.config.experimental.ExperimentalEIPs;\n \n-import java.util.Arrays;\n+import java.net.URL;\n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Resources;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d6205ab7f121cb65cba2335d472d9e768653a8c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2NDAwOQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1281#discussion_r470564009", "createdAt": "2020-08-14T11:17:15Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/core/fees/EIP1559BaseFeeTest.java", "diffHunk": "@@ -14,60 +14,69 @@\n  */\n package org.hyperledger.besu.ethereum.core.fees;\n \n+import static com.google.common.base.Preconditions.checkState;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import org.hyperledger.besu.config.experimental.ExperimentalEIPs;\n \n-import java.util.Arrays;\n+import java.net.URL;\n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Resources;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNTI1MA=="}, "originalCommit": {"oid": "0d6205ab7f121cb65cba2335d472d9e768653a8c"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 743, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}