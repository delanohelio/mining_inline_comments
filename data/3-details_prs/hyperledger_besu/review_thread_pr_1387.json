{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwNTM5NTgy", "number": 1387, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToyMDoyM1rOEoI0Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjowMToyMlrOEoJ--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTIyOTgzOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToyMDoyM1rOHZDdZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToyOToyMFrOHZD99Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzMzEyNQ==", "bodyText": "Why are we redefining these?", "url": "https://github.com/hyperledger/besu/pull/1387#discussion_r496033125", "createdAt": "2020-09-28T15:20:23Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+import static org.hyperledger.besu.ethereum.core.Address.BLS12_MAP_FP2_TO_G2;\n+\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+\n+import org.apache.tuweni.units.bigints.UInt256;\n+\n+public class BerlinGasCalculator extends IstanbulGasCalculator {\n+\n+  // new constants for EIP-2929\n+  private static final Gas COLD_SLOAD_COST = Gas.of(2100);\n+  private static final Gas COLD_ACCOUNT_ACCESS_COST = Gas.of(2600);\n+  private static final Gas WARM_STORAGE_READ_COST = Gas.of(100);\n+\n+  // redefinitions for EIP-2929\n+  private static final Gas SLOAD_GAS = WARM_STORAGE_READ_COST;\n+  private static final Gas SSTORE_RESET_GAS = Gas.of(5000L).minus(COLD_SLOAD_COST);\n+\n+  // unchanged from Istanbul", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c3f5b13e12f9dfbceaa32ad765cb4775e37605"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0MTQ2MQ==", "bodyText": "We are copying in some formulas that require them.  The formulas we are bringing in are a mix of new values and old values, and the old values are private static.  I'm copying instead of upping the visibility to make it explicit what we are using and also to prevent accidental shadowing in future forks.", "url": "https://github.com/hyperledger/besu/pull/1387#discussion_r496041461", "createdAt": "2020-09-28T15:29:20Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+import static org.hyperledger.besu.ethereum.core.Address.BLS12_MAP_FP2_TO_G2;\n+\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+\n+import org.apache.tuweni.units.bigints.UInt256;\n+\n+public class BerlinGasCalculator extends IstanbulGasCalculator {\n+\n+  // new constants for EIP-2929\n+  private static final Gas COLD_SLOAD_COST = Gas.of(2100);\n+  private static final Gas COLD_ACCOUNT_ACCESS_COST = Gas.of(2600);\n+  private static final Gas WARM_STORAGE_READ_COST = Gas.of(100);\n+\n+  // redefinitions for EIP-2929\n+  private static final Gas SLOAD_GAS = WARM_STORAGE_READ_COST;\n+  private static final Gas SSTORE_RESET_GAS = Gas.of(5000L).minus(COLD_SLOAD_COST);\n+\n+  // unchanged from Istanbul", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzMzEyNQ=="}, "originalCommit": {"oid": "25c3f5b13e12f9dfbceaa32ad765cb4775e37605"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTIzMjM4OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToyMDo0MlrOHZDe1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozMDowN1rOHZEAbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzMzQ5NA==", "bodyText": "dittto from above", "url": "https://github.com/hyperledger/besu/pull/1387#discussion_r496033494", "createdAt": "2020-09-28T15:20:42Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+import static org.hyperledger.besu.ethereum.core.Address.BLS12_MAP_FP2_TO_G2;\n+\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+\n+import org.apache.tuweni.units.bigints.UInt256;\n+\n+public class BerlinGasCalculator extends IstanbulGasCalculator {\n+\n+  // new constants for EIP-2929\n+  private static final Gas COLD_SLOAD_COST = Gas.of(2100);\n+  private static final Gas COLD_ACCOUNT_ACCESS_COST = Gas.of(2600);\n+  private static final Gas WARM_STORAGE_READ_COST = Gas.of(100);\n+\n+  // redefinitions for EIP-2929\n+  private static final Gas SLOAD_GAS = WARM_STORAGE_READ_COST;\n+  private static final Gas SSTORE_RESET_GAS = Gas.of(5000L).minus(COLD_SLOAD_COST);\n+\n+  // unchanged from Istanbul\n+  private static final Gas SSTORE_SET_GAS = Gas.of(20_000);\n+  private static final Gas SSTORE_CLEARS_SCHEDULE = Gas.of(15_000);\n+\n+  private static final Gas SSTORE_SET_GAS_LESS_SLOAD_GAS = SSTORE_SET_GAS.minus(SLOAD_GAS);\n+  private static final Gas SSTORE_RESET_GAS_LESS_SLOAD_GAS = SSTORE_RESET_GAS.minus(SLOAD_GAS);\n+  private static final Gas NEGATIVE_SSTORE_CLEARS_SCHEDULE = Gas.ZERO.minus(SSTORE_CLEARS_SCHEDULE);\n+\n+  // unchanged from Frontier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c3f5b13e12f9dfbceaa32ad765cb4775e37605"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0MjA5NQ==", "bodyText": "Again, I chose to redefine over escalating visibility to prevent future accidental shadowing. A form of this issue caused one of the Geth failures in early testing.", "url": "https://github.com/hyperledger/besu/pull/1387#discussion_r496042095", "createdAt": "2020-09-28T15:30:07Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BerlinGasCalculator.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.mainnet;\n+\n+import static org.hyperledger.besu.ethereum.core.Address.BLS12_MAP_FP2_TO_G2;\n+\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+\n+import org.apache.tuweni.units.bigints.UInt256;\n+\n+public class BerlinGasCalculator extends IstanbulGasCalculator {\n+\n+  // new constants for EIP-2929\n+  private static final Gas COLD_SLOAD_COST = Gas.of(2100);\n+  private static final Gas COLD_ACCOUNT_ACCESS_COST = Gas.of(2600);\n+  private static final Gas WARM_STORAGE_READ_COST = Gas.of(100);\n+\n+  // redefinitions for EIP-2929\n+  private static final Gas SLOAD_GAS = WARM_STORAGE_READ_COST;\n+  private static final Gas SSTORE_RESET_GAS = Gas.of(5000L).minus(COLD_SLOAD_COST);\n+\n+  // unchanged from Istanbul\n+  private static final Gas SSTORE_SET_GAS = Gas.of(20_000);\n+  private static final Gas SSTORE_CLEARS_SCHEDULE = Gas.of(15_000);\n+\n+  private static final Gas SSTORE_SET_GAS_LESS_SLOAD_GAS = SSTORE_SET_GAS.minus(SLOAD_GAS);\n+  private static final Gas SSTORE_RESET_GAS_LESS_SLOAD_GAS = SSTORE_RESET_GAS.minus(SLOAD_GAS);\n+  private static final Gas NEGATIVE_SSTORE_CLEARS_SCHEDULE = Gas.ZERO.minus(SSTORE_CLEARS_SCHEDULE);\n+\n+  // unchanged from Frontier", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAzMzQ5NA=="}, "originalCommit": {"oid": "25c3f5b13e12f9dfbceaa32ad765cb4775e37605"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTQyMDcyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/SLoadOperation.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjowMToyMlrOHZFT5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToyMDoyNFrOHZMUVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MzQ2Mg==", "bodyText": "This might be related to a question I asked in a previous pr but I can't remember. Do these need to be optional everywhere? For example, isn't the warmCost and coldCost always present here?", "url": "https://github.com/hyperledger/besu/pull/1387#discussion_r496063462", "createdAt": "2020-09-28T16:01:22Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/SLoadOperation.java", "diffHunk": "@@ -15,27 +15,60 @@\n package org.hyperledger.besu.ethereum.vm.operations;\n \n import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.vm.AbstractOperation;\n import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.FixedStack.OverflowException;\n+import org.hyperledger.besu.ethereum.vm.FixedStack.UnderflowException;\n import org.hyperledger.besu.ethereum.vm.GasCalculator;\n import org.hyperledger.besu.ethereum.vm.MessageFrame;\n \n+import java.util.Optional;\n+\n import org.apache.tuweni.bytes.Bytes32;\n import org.apache.tuweni.units.bigints.UInt256;\n \n-public class SLoadOperation extends AbstractFixedCostOperation {\n+public class SLoadOperation extends AbstractOperation {\n+\n+  private final Optional<Gas> warmCost;\n+  private final Optional<Gas> coldCost;\n+\n+  private final OperationResult warmSuccess;\n+  private final OperationResult coldSuccess;\n \n   public SLoadOperation(final GasCalculator gasCalculator) {\n-    super(0x54, \"SLOAD\", 1, 1, false, 1, gasCalculator, gasCalculator.getSloadOperationGasCost());\n+    super(0x54, \"SLOAD\", 1, 1, false, 1, gasCalculator);\n+    final Gas baseCost = gasCalculator.getSloadOperationGasCost();\n+    warmCost = Optional.of(baseCost.plus(gasCalculator.getWarmStorageReadCost()));\n+    coldCost = Optional.of(baseCost.plus(gasCalculator.getColdSloadCost()));\n+\n+    warmSuccess = new OperationResult(warmCost, Optional.empty());\n+    coldSuccess = new OperationResult(coldCost, Optional.empty());\n   }\n \n   @Override\n-  public OperationResult executeFixedCostOperation(final MessageFrame frame, final EVM evm) {\n-    final Bytes32 key = frame.popStackItem();\n-\n-    final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n-\n-    frame.pushStackItem(account.getStorageValue(UInt256.fromBytes(key)).toBytes());\n+  public OperationResult execute(final MessageFrame frame, final EVM evm) {\n+    try {\n+      final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n+      final Address address = account.getAddress();\n+      final Bytes32 key = frame.popStackItem();\n+      final boolean slotIsWarm = frame.warmUpStorage(address, key);\n+      final Optional<Gas> optionalCost = slotIsWarm ? warmCost : coldCost;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d07795cc4e7593145bb0cee91012464f2785379"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NTY3OA==", "bodyText": "It's a mix.  We need the optional for the return value but we need the value during gas calculations.  The gas cost is not optional within the method but on the return, for some errors we return an empty cost (such as when we can't know because of a stack underflow).", "url": "https://github.com/hyperledger/besu/pull/1387#discussion_r496075678", "createdAt": "2020-09-28T16:20:26Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/SLoadOperation.java", "diffHunk": "@@ -15,27 +15,60 @@\n package org.hyperledger.besu.ethereum.vm.operations;\n \n import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.vm.AbstractOperation;\n import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.FixedStack.OverflowException;\n+import org.hyperledger.besu.ethereum.vm.FixedStack.UnderflowException;\n import org.hyperledger.besu.ethereum.vm.GasCalculator;\n import org.hyperledger.besu.ethereum.vm.MessageFrame;\n \n+import java.util.Optional;\n+\n import org.apache.tuweni.bytes.Bytes32;\n import org.apache.tuweni.units.bigints.UInt256;\n \n-public class SLoadOperation extends AbstractFixedCostOperation {\n+public class SLoadOperation extends AbstractOperation {\n+\n+  private final Optional<Gas> warmCost;\n+  private final Optional<Gas> coldCost;\n+\n+  private final OperationResult warmSuccess;\n+  private final OperationResult coldSuccess;\n \n   public SLoadOperation(final GasCalculator gasCalculator) {\n-    super(0x54, \"SLOAD\", 1, 1, false, 1, gasCalculator, gasCalculator.getSloadOperationGasCost());\n+    super(0x54, \"SLOAD\", 1, 1, false, 1, gasCalculator);\n+    final Gas baseCost = gasCalculator.getSloadOperationGasCost();\n+    warmCost = Optional.of(baseCost.plus(gasCalculator.getWarmStorageReadCost()));\n+    coldCost = Optional.of(baseCost.plus(gasCalculator.getColdSloadCost()));\n+\n+    warmSuccess = new OperationResult(warmCost, Optional.empty());\n+    coldSuccess = new OperationResult(coldCost, Optional.empty());\n   }\n \n   @Override\n-  public OperationResult executeFixedCostOperation(final MessageFrame frame, final EVM evm) {\n-    final Bytes32 key = frame.popStackItem();\n-\n-    final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n-\n-    frame.pushStackItem(account.getStorageValue(UInt256.fromBytes(key)).toBytes());\n+  public OperationResult execute(final MessageFrame frame, final EVM evm) {\n+    try {\n+      final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n+      final Address address = account.getAddress();\n+      final Bytes32 key = frame.popStackItem();\n+      final boolean slotIsWarm = frame.warmUpStorage(address, key);\n+      final Optional<Gas> optionalCost = slotIsWarm ? warmCost : coldCost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MzQ2Mg=="}, "originalCommit": {"oid": "1d07795cc4e7593145bb0cee91012464f2785379"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3ODM5OQ==", "bodyText": "Ah, I see, could we push the optional wrapping to as late as possible? I think it makes it clearer for which sections it is guaranteed to be defined. The intent is a bit unclear when the warmCost and coldCost fields are Optional.", "url": "https://github.com/hyperledger/besu/pull/1387#discussion_r496078399", "createdAt": "2020-09-28T16:24:37Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/SLoadOperation.java", "diffHunk": "@@ -15,27 +15,60 @@\n package org.hyperledger.besu.ethereum.vm.operations;\n \n import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.vm.AbstractOperation;\n import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.FixedStack.OverflowException;\n+import org.hyperledger.besu.ethereum.vm.FixedStack.UnderflowException;\n import org.hyperledger.besu.ethereum.vm.GasCalculator;\n import org.hyperledger.besu.ethereum.vm.MessageFrame;\n \n+import java.util.Optional;\n+\n import org.apache.tuweni.bytes.Bytes32;\n import org.apache.tuweni.units.bigints.UInt256;\n \n-public class SLoadOperation extends AbstractFixedCostOperation {\n+public class SLoadOperation extends AbstractOperation {\n+\n+  private final Optional<Gas> warmCost;\n+  private final Optional<Gas> coldCost;\n+\n+  private final OperationResult warmSuccess;\n+  private final OperationResult coldSuccess;\n \n   public SLoadOperation(final GasCalculator gasCalculator) {\n-    super(0x54, \"SLOAD\", 1, 1, false, 1, gasCalculator, gasCalculator.getSloadOperationGasCost());\n+    super(0x54, \"SLOAD\", 1, 1, false, 1, gasCalculator);\n+    final Gas baseCost = gasCalculator.getSloadOperationGasCost();\n+    warmCost = Optional.of(baseCost.plus(gasCalculator.getWarmStorageReadCost()));\n+    coldCost = Optional.of(baseCost.plus(gasCalculator.getColdSloadCost()));\n+\n+    warmSuccess = new OperationResult(warmCost, Optional.empty());\n+    coldSuccess = new OperationResult(coldCost, Optional.empty());\n   }\n \n   @Override\n-  public OperationResult executeFixedCostOperation(final MessageFrame frame, final EVM evm) {\n-    final Bytes32 key = frame.popStackItem();\n-\n-    final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n-\n-    frame.pushStackItem(account.getStorageValue(UInt256.fromBytes(key)).toBytes());\n+  public OperationResult execute(final MessageFrame frame, final EVM evm) {\n+    try {\n+      final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n+      final Address address = account.getAddress();\n+      final Bytes32 key = frame.popStackItem();\n+      final boolean slotIsWarm = frame.warmUpStorage(address, key);\n+      final Optional<Gas> optionalCost = slotIsWarm ? warmCost : coldCost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MzQ2Mg=="}, "originalCommit": {"oid": "1d07795cc4e7593145bb0cee91012464f2785379"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE3ODI2Mg==", "bodyText": "The optionals are re-used across requests.  If we wrapped in the execute method it would result in object churn.", "url": "https://github.com/hyperledger/besu/pull/1387#discussion_r496178262", "createdAt": "2020-09-28T19:20:24Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/operations/SLoadOperation.java", "diffHunk": "@@ -15,27 +15,60 @@\n package org.hyperledger.besu.ethereum.vm.operations;\n \n import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.vm.AbstractOperation;\n import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.FixedStack.OverflowException;\n+import org.hyperledger.besu.ethereum.vm.FixedStack.UnderflowException;\n import org.hyperledger.besu.ethereum.vm.GasCalculator;\n import org.hyperledger.besu.ethereum.vm.MessageFrame;\n \n+import java.util.Optional;\n+\n import org.apache.tuweni.bytes.Bytes32;\n import org.apache.tuweni.units.bigints.UInt256;\n \n-public class SLoadOperation extends AbstractFixedCostOperation {\n+public class SLoadOperation extends AbstractOperation {\n+\n+  private final Optional<Gas> warmCost;\n+  private final Optional<Gas> coldCost;\n+\n+  private final OperationResult warmSuccess;\n+  private final OperationResult coldSuccess;\n \n   public SLoadOperation(final GasCalculator gasCalculator) {\n-    super(0x54, \"SLOAD\", 1, 1, false, 1, gasCalculator, gasCalculator.getSloadOperationGasCost());\n+    super(0x54, \"SLOAD\", 1, 1, false, 1, gasCalculator);\n+    final Gas baseCost = gasCalculator.getSloadOperationGasCost();\n+    warmCost = Optional.of(baseCost.plus(gasCalculator.getWarmStorageReadCost()));\n+    coldCost = Optional.of(baseCost.plus(gasCalculator.getColdSloadCost()));\n+\n+    warmSuccess = new OperationResult(warmCost, Optional.empty());\n+    coldSuccess = new OperationResult(coldCost, Optional.empty());\n   }\n \n   @Override\n-  public OperationResult executeFixedCostOperation(final MessageFrame frame, final EVM evm) {\n-    final Bytes32 key = frame.popStackItem();\n-\n-    final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n-\n-    frame.pushStackItem(account.getStorageValue(UInt256.fromBytes(key)).toBytes());\n+  public OperationResult execute(final MessageFrame frame, final EVM evm) {\n+    try {\n+      final Account account = frame.getWorldState().get(frame.getRecipientAddress());\n+      final Address address = account.getAddress();\n+      final Bytes32 key = frame.popStackItem();\n+      final boolean slotIsWarm = frame.warmUpStorage(address, key);\n+      final Optional<Gas> optionalCost = slotIsWarm ? warmCost : coldCost;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MzQ2Mg=="}, "originalCommit": {"oid": "1d07795cc4e7593145bb0cee91012464f2785379"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1393, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}