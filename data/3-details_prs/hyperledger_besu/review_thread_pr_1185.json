{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTAzMTA5", "number": 1185, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMToyOFrOEKs8eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMToyOFrOEKs8eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjU3NTk0OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/integration-test/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/DebugTraceTransactionIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMToyOFrOGr5WaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDoyMToyOFrOGr5WaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4MTU3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(debugTraceTransactionResult.getStructLogs().size()).isEqualTo(106);\n          \n          \n            \n                assertThat(debugTraceTransactionResult.getStructLogs()).hasSize(106);", "url": "https://github.com/hyperledger/besu/pull/1185#discussion_r448681576", "createdAt": "2020-07-02T00:21:28Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/integration-test/java/org/hyperledger/besu/ethereum/api/jsonrpc/methods/DebugTraceTransactionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.methods;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.BlockchainImporter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.JsonRpcTestMethodsFactory;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods.JsonRpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponseType;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.DebugTraceTransactionResult;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.testutil.BlockTestUtil;\n+\n+import java.util.Map;\n+\n+import com.google.common.base.Charsets;\n+import com.google.common.io.Resources;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class DebugTraceTransactionIntegrationTest {\n+  private static final String DEBUG_TRACE_TRANSACTION = \"debug_traceTransaction\";\n+  private static JsonRpcTestMethodsFactory blockchain;\n+  private JsonRpcMethod method;\n+\n+  @BeforeClass\n+  public static void setUpOnce() throws Exception {\n+    final String genesisJson =\n+        Resources.toString(BlockTestUtil.getTestGenesisUrl(), Charsets.UTF_8);\n+\n+    blockchain =\n+        new JsonRpcTestMethodsFactory(\n+            new BlockchainImporter(BlockTestUtil.getTestBlockchainUrl(), genesisJson));\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    final Map<String, JsonRpcMethod> methods = blockchain.methods();\n+    method = methods.get(DEBUG_TRACE_TRANSACTION);\n+  }\n+\n+  @Test\n+  public void debugTraceTransactionSuccessTest() {\n+    final Map<String, Boolean> map = Map.of(\"disableStorage\", true);\n+    final Object[] params =\n+        new Object[] {\n+          Hash.fromHexString(\"0xcef53f2311d7c80e9086d661e69ac11a5f3d081e28e02a9ba9b66749407ac310\"),\n+          map\n+        };\n+    final JsonRpcRequestContext request =\n+        new JsonRpcRequestContext(new JsonRpcRequest(\"2.0\", DEBUG_TRACE_TRANSACTION, params));\n+\n+    final JsonRpcResponse response = method.response(request);\n+    assertThat(response.getType()).isEqualTo(JsonRpcResponseType.SUCCESS);\n+    DebugTraceTransactionResult debugTraceTransactionResult =\n+        (DebugTraceTransactionResult) ((JsonRpcSuccessResponse) response).getResult();\n+    assertThat(debugTraceTransactionResult.getGas()).isEqualTo(23705L);\n+    assertThat(debugTraceTransactionResult.getReturnValue()).isEmpty();\n+    assertThat(debugTraceTransactionResult.failed()).isFalse();\n+    assertThat(debugTraceTransactionResult.getStructLogs().size()).isEqualTo(106);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e3ffe5d50226d1b01b4fe682ead08af876273f1"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 847, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}