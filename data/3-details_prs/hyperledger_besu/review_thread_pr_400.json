{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0OTM3NTY2", "number": 400, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo0MTozNVrODfuSgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxMzo0N1rODfuuDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTkwODUxOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/MultiTenancyValidationFail.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo0MTozNVrOFpmG0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo0MTozNVrOFpmG0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MDI3Mg==", "bodyText": "Can this have a more generic name as this is not specific to multitenancy. Perhaps something like ExpectJsonRpcError?", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379160272", "createdAt": "2020-02-13T22:41:35Z", "author": {"login": "jframe"}, "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/condition/priv/MultiTenancyValidationFail.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.dsl.condition.priv;\n+\n+import static org.assertj.core.api.Assertions.failBecauseExceptionWasNotThrown;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.tests.acceptance.dsl.condition.Condition;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.Node;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import org.assertj.core.api.Assertions;\n+import org.web3j.protocol.exceptions.ClientConnectionException;\n+\n+public class MultiTenancyValidationFail implements Condition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTkxNTgzOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo0NDo1MVrOFpmLZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzo1OToxM1rOFpnsAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MTQ0Nw==", "bodyText": "Can this port be made dynamic? Otherwise will probably have problems with port conflicts at some point with multiple ATs running in parallel.", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379161447", "createdAt": "2020-02-13T22:44:51Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE4NjE3Ng==", "bodyText": "Good idea.  Changed other AT class as well.", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379186176", "createdAt": "2020-02-13T23:59:13Z", "author": {"login": "mark-terry"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MTQ0Nw=="}, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTkxODg5OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo0NjowMFrOFpmNMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMjo0NjowMFrOFpmNMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2MTkwNA==", "bodyText": "Can use Transaction<Hash> instead of the raw type here and for the other tests", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379161904", "createdAt": "2020-02-13T22:46:00Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String OTHER_ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenantedPrivacy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+\n+    final String token =\n+        node.execute(permissioningTransactions.createSuccessfulLogin(\"failUser\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    multiTenancyCluster.close();\n+  }\n+\n+  @Test\n+  public void sendTransactionShouldFailWhenPrivateFromNotMatchEnclaveKey()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress, OTHER_ENCLAVE_KEY);\n+    retrievePrivacyGroupEnclaveStub();\n+    final Transaction transaction =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTk2NzkxOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzowODoyNlrOFpmr_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzowODoyNlrOFpmr_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2OTc5MQ==", "bodyText": "Suggest using ENCLAVE_PUBLIC_KEY as enclave key can also refer to the key we get back after sending data to the enclave.", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379169791", "createdAt": "2020-02-13T23:08:26Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTk2ODcxOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzowODo1MVrOFpmsgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzowODo1MVrOFpmsgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2OTkyMg==", "bodyText": "Suggest using OTHER_ENCLAVE_PUBLIC_KEY to avoid confusing with enclave key", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379169922", "createdAt": "2020-02-13T23:08:51Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String OTHER_ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTk3OTAwOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMzoxMzo0N1rOFpmy5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNDoxMToxMVrOFprJ1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MTU1OQ==", "bodyText": "Also need tests for privDistributeRawTransaction", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379171559", "createdAt": "2020-02-13T23:13:47Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String OTHER_ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenantedPrivacy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+\n+    final String token =\n+        node.execute(permissioningTransactions.createSuccessfulLogin(\"failUser\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    multiTenancyCluster.close();\n+  }\n+\n+  @Test\n+  public void sendTransactionShouldFailWhenPrivateFromNotMatchEnclaveKey()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress, OTHER_ENCLAVE_KEY);\n+    retrievePrivacyGroupEnclaveStub();\n+    final Transaction transaction =\n+        privacyTransactions.sendRawTransaction(\n+            getRLPOutput(validSignedPrivateTransaction).encoded().toHexString());\n+    node.verify(priv.multiTenancyValidationFail(transaction, JsonRpcError.ENCLAVE_ERROR));\n+  }\n+\n+  @Test\n+  public void sendTransactionShouldFailWhenPrivacyGroupDoesNotContainEnclaveKey()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress, ENCLAVE_KEY);\n+    retrievePrivacyGroupEnclaveStub();\n+    final Transaction transaction =\n+        privacyTransactions.sendRawTransaction(\n+            getRLPOutput(validSignedPrivateTransaction).encoded().toHexString());\n+    node.verify(priv.multiTenancyValidationFail(transaction, JsonRpcError.ENCLAVE_ERROR));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3ODgxNQ==", "bodyText": "Is that required?  I'm just testing the fail paths through MultiTenancyPrivacyController.", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379178815", "createdAt": "2020-02-13T23:35:31Z", "author": {"login": "mark-terry"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String OTHER_ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenantedPrivacy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+\n+    final String token =\n+        node.execute(permissioningTransactions.createSuccessfulLogin(\"failUser\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    multiTenancyCluster.close();\n+  }\n+\n+  @Test\n+  public void sendTransactionShouldFailWhenPrivateFromNotMatchEnclaveKey()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress, OTHER_ENCLAVE_KEY);\n+    retrievePrivacyGroupEnclaveStub();\n+    final Transaction transaction =\n+        privacyTransactions.sendRawTransaction(\n+            getRLPOutput(validSignedPrivateTransaction).encoded().toHexString());\n+    node.verify(priv.multiTenancyValidationFail(transaction, JsonRpcError.ENCLAVE_ERROR));\n+  }\n+\n+  @Test\n+  public void sendTransactionShouldFailWhenPrivacyGroupDoesNotContainEnclaveKey()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress, ENCLAVE_KEY);\n+    retrievePrivacyGroupEnclaveStub();\n+    final Transaction transaction =\n+        privacyTransactions.sendRawTransaction(\n+            getRLPOutput(validSignedPrivateTransaction).encoded().toHexString());\n+    node.verify(priv.multiTenancyValidationFail(transaction, JsonRpcError.ENCLAVE_ERROR));\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MTU1OQ=="}, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI0Mjk2Nw==", "bodyText": "Yeah I think so as we can't test the MultiTenancyPrivacyController directly. It's possible that privDistributeRawTransaction could change at some point to just call into the enclave and bypass the validation", "url": "https://github.com/hyperledger/besu/pull/400#discussion_r379242967", "createdAt": "2020-02-14T04:11:11Z", "author": {"login": "jframe"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/multitenancy/MultiTenancyValidationFailAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy.multitenancy;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.ok;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+\n+import org.hyperledger.besu.crypto.SECP256K1;\n+import org.hyperledger.besu.enclave.types.PrivacyGroup;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransaction;\n+import org.hyperledger.besu.ethereum.privacy.Restriction;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.tests.acceptance.dsl.AcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.BesuNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.Cluster;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfiguration;\n+import org.hyperledger.besu.tests.acceptance.dsl.node.cluster.ClusterConfigurationBuilder;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.Transaction;\n+\n+import java.math.BigInteger;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class MultiTenancyValidationFailAcceptanceTest extends AcceptanceTestBase {\n+  private BesuNode node;\n+  private final ObjectMapper mapper = new ObjectMapper();\n+  private Cluster multiTenancyCluster;\n+\n+  private static final int ENCLAVE_PORT = 1080;\n+  private static final String PRIVACY_GROUP_ID = \"Z3JvdXBJZA==\";\n+  private static final String ENCLAVE_KEY = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private static final String OTHER_ENCLAVE_KEY = \"A1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+  private final Address senderAddress =\n+      Address.wrap(Bytes.fromHexString(accounts.getPrimaryBenefactor().getAddress()));\n+\n+  @Rule public WireMockRule wireMockRule = new WireMockRule(options().port(ENCLAVE_PORT));\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    final ClusterConfiguration clusterConfiguration =\n+        new ClusterConfigurationBuilder().awaitPeerDiscovery(false).build();\n+    multiTenancyCluster = new Cluster(clusterConfiguration, net);\n+    node =\n+        besu.createNodeWithMultiTenantedPrivacy(\n+            \"node1\",\n+            \"http://127.0.0.1:\" + ENCLAVE_PORT,\n+            \"authentication/auth_priv.toml\",\n+            \"authentication/auth_priv_key\");\n+    multiTenancyCluster.start(node);\n+\n+    final String token =\n+        node.execute(permissioningTransactions.createSuccessfulLogin(\"failUser\", \"pegasys\"));\n+    node.useAuthenticationTokenInHeaderForJsonRpc(token);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    multiTenancyCluster.close();\n+  }\n+\n+  @Test\n+  public void sendTransactionShouldFailWhenPrivateFromNotMatchEnclaveKey()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress, OTHER_ENCLAVE_KEY);\n+    retrievePrivacyGroupEnclaveStub();\n+    final Transaction transaction =\n+        privacyTransactions.sendRawTransaction(\n+            getRLPOutput(validSignedPrivateTransaction).encoded().toHexString());\n+    node.verify(priv.multiTenancyValidationFail(transaction, JsonRpcError.ENCLAVE_ERROR));\n+  }\n+\n+  @Test\n+  public void sendTransactionShouldFailWhenPrivacyGroupDoesNotContainEnclaveKey()\n+      throws JsonProcessingException {\n+    final PrivateTransaction validSignedPrivateTransaction =\n+        getValidSignedPrivateTransaction(senderAddress, ENCLAVE_KEY);\n+    retrievePrivacyGroupEnclaveStub();\n+    final Transaction transaction =\n+        privacyTransactions.sendRawTransaction(\n+            getRLPOutput(validSignedPrivateTransaction).encoded().toHexString());\n+    node.verify(priv.multiTenancyValidationFail(transaction, JsonRpcError.ENCLAVE_ERROR));\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE3MTU1OQ=="}, "originalCommit": {"oid": "c2cc6f9fce1c89fcf419b3160409bf6c3537146c"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1094, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}