{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMTY2NzQ3", "number": 1057, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowMDoyMFrOEDfknQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowMDoyMFrOEDfknQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDk4NDYxOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/Scalars.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowMDoyMFrOGgitTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOTowNjoxNVrOGg_50g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NjI3MQ==", "bodyText": "Just for the sake of keeping things logically co-located, I'd like to see this functionality in Quantity.java which has a lot of utility methods related to this. Maybe a static method like Quantity.isValid(String string)?", "url": "https://github.com/hyperledger/besu/pull/1057#discussion_r436776271", "createdAt": "2020-06-08T15:00:20Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/Scalars.java", "diffHunk": "@@ -55,8 +55,13 @@ public Address parseLiteral(final Object input) throws CoercingParseLiteralExcep\n           if (!(input instanceof StringValue)) {\n             throw new CoercingParseLiteralException(\"Value is not any Address : '\" + input + \"'\");\n           }\n+          String inputValue = ((StringValue) input).getValue();\n+          if (!inputValue.startsWith(\"0x\")) {\n+            throw new CoercingParseLiteralException(\n+                \"Address value '\" + inputValue + \"' is not prefixed with 0x\");\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b6fafd2394f496273c8c6662b136c4bedb79ed"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI1NDYxMA==", "bodyText": "@RatanRSur thanks for the suggestion, I moved this check to Qunatitiy.java but as I read jdoc of class (...Quantity fields are represented as minimal length hex strings with no zero-padding...) I think this Quantity.isValid(String string) function should do additional checks\n\nis provided string valid hex string (just check that characters are valid)\nthat provided hex string is not padded with 0\n\nor I could rename function to something that reflects what exactly is tested.\nWhat do you think ?", "url": "https://github.com/hyperledger/besu/pull/1057#discussion_r437254610", "createdAt": "2020-06-09T09:06:15Z", "author": {"login": "MakMuftic"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/graphql/internal/Scalars.java", "diffHunk": "@@ -55,8 +55,13 @@ public Address parseLiteral(final Object input) throws CoercingParseLiteralExcep\n           if (!(input instanceof StringValue)) {\n             throw new CoercingParseLiteralException(\"Value is not any Address : '\" + input + \"'\");\n           }\n+          String inputValue = ((StringValue) input).getValue();\n+          if (!inputValue.startsWith(\"0x\")) {\n+            throw new CoercingParseLiteralException(\n+                \"Address value '\" + inputValue + \"' is not prefixed with 0x\");\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NjI3MQ=="}, "originalCommit": {"oid": "67b6fafd2394f496273c8c6662b136c4bedb79ed"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 786, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}