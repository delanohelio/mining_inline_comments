{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDEyMTQw", "number": 786, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowMDo1OFrOD3RHrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToyNjozNFrOD3rhZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mjc4NzY3OnYy", "diffSide": "RIGHT", "path": "ethereum/evmtool/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowMDo1OFrOGNbbcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoxMjozMFrOGNb74A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczNDA2Ng==", "bodyText": "Maybe we need to change pantheon by Besu here", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r416734066", "createdAt": "2020-04-28T16:00:58Z", "author": {"login": "matkt"}, "path": "ethereum/evmtool/build.gradle", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+\n+apply plugin: 'java-library'\n+apply plugin: 'application'\n+apply plugin: 'idea'\n+\n+jar {\n+  baseName 'pantheon-evmtool'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fededec64101861ef823cb3530e651685e3eb35f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0MjM2OA==", "bodyText": "Yep.  The code for this was sitting in my old pushes that long ago.  Fixed.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r416742368", "createdAt": "2020-04-28T16:12:30Z", "author": {"login": "shemnon"}, "path": "ethereum/evmtool/build.gradle", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+\n+apply plugin: 'java-library'\n+apply plugin: 'application'\n+apply plugin: 'idea'\n+\n+jar {\n+  baseName 'pantheon-evmtool'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczNDA2Ng=="}, "originalCommit": {"oid": "fededec64101861ef823cb3530e651685e3eb35f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Mjc4OTA4OnYy", "diffSide": "RIGHT", "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjowMToxNVrOGNbcSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNjoxMjozNVrOGNb8Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczNDI4MQ==", "bodyText": "Maybe we need to change pantheon by Besu here", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r416734281", "createdAt": "2020-04-28T16:01:15Z", "author": {"login": "matkt"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.evmtool;\n+\n+import org.hyperledger.besu.cli.config.NetworkName;\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.BlockHeaderBuilder;\n+import org.hyperledger.besu.ethereum.core.Difficulty;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogsBloomFilter;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MainnetBlockHeaderFunctions;\n+import org.hyperledger.besu.ethereum.vm.BlockHashLookup;\n+import org.hyperledger.besu.ethereum.vm.Code;\n+import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.List;\n+\n+import com.google.common.base.Stopwatch;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.units.bigints.UInt256;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+@Command(\n+    description = \"This command evaluates EVM transactions.\",\n+    abbreviateSynopsis = true,\n+    name = \"evm\",\n+    mixinStandardHelpOptions = true,\n+    sortOptions = false,\n+    header = \"Usage:\",\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Pantheon is licensed under the Apache License 2.0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fededec64101861ef823cb3530e651685e3eb35f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjc0MjQ0Ng==", "bodyText": "fixed", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r416742446", "createdAt": "2020-04-28T16:12:35Z", "author": {"login": "shemnon"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.evmtool;\n+\n+import org.hyperledger.besu.cli.config.NetworkName;\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.BlockHeaderBuilder;\n+import org.hyperledger.besu.ethereum.core.Difficulty;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogsBloomFilter;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MainnetBlockHeaderFunctions;\n+import org.hyperledger.besu.ethereum.vm.BlockHashLookup;\n+import org.hyperledger.besu.ethereum.vm.Code;\n+import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.List;\n+\n+import com.google.common.base.Stopwatch;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.units.bigints.UInt256;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+@Command(\n+    description = \"This command evaluates EVM transactions.\",\n+    abbreviateSynopsis = true,\n+    name = \"evm\",\n+    mixinStandardHelpOptions = true,\n+    sortOptions = false,\n+    header = \"Usage:\",\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Pantheon is licensed under the Apache License 2.0\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczNDI4MQ=="}, "originalCommit": {"oid": "fededec64101861ef823cb3530e651685e3eb35f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzA5MTY1OnYy", "diffSide": "RIGHT", "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmTool.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToyMTo0N1rOGOEIbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozNzowNVrOGOE2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMDk0Mg==", "bodyText": "Why do we need a separate main class ? I thought it was a classical subcommand.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417400942", "createdAt": "2020-04-29T15:21:47Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmTool.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.evmtool;\n+\n+import static picocli.CommandLine.defaultExceptionHandler;\n+\n+import picocli.CommandLine;\n+\n+public final class EvmTool {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMjEzMg==", "bodyText": "For now this is not meant for general consumption, this tool doesn't get added to the distribution.  If that changes it will be moved in or some other policy set in place.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417412132", "createdAt": "2020-04-29T15:36:22Z", "author": {"login": "shemnon"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmTool.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.evmtool;\n+\n+import static picocli.CommandLine.defaultExceptionHandler;\n+\n+import picocli.CommandLine;\n+\n+public final class EvmTool {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMDk0Mg=="}, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMjcwMQ==", "bodyText": "Sounds good.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417412701", "createdAt": "2020-04-29T15:37:05Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmTool.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.evmtool;\n+\n+import static picocli.CommandLine.defaultExceptionHandler;\n+\n+import picocli.CommandLine;\n+\n+public final class EvmTool {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMDk0Mg=="}, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzA5ODA2OnYy", "diffSide": "RIGHT", "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToyMzoxM1rOGOEMkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozMjowOFrOGOEn_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjAwMg==", "bodyText": "gasUser ? Typo ?", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417402002", "createdAt": "2020-04-29T15:23:13Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.evmtool;\n+\n+import org.hyperledger.besu.cli.config.NetworkName;\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.BlockHeaderBuilder;\n+import org.hyperledger.besu.ethereum.core.Difficulty;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogsBloomFilter;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MainnetBlockHeaderFunctions;\n+import org.hyperledger.besu.ethereum.vm.BlockHashLookup;\n+import org.hyperledger.besu.ethereum.vm.Code;\n+import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.List;\n+\n+import com.google.common.base.Stopwatch;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.units.bigints.UInt256;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+@Command(\n+    description = \"This command evaluates EVM transactions.\",\n+    abbreviateSynopsis = true,\n+    name = \"evm\",\n+    mixinStandardHelpOptions = true,\n+    sortOptions = false,\n+    header = \"Usage:\",\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Hyperledger Besu is licensed under the Apache License 2.0\")\n+public class EvmToolCommand implements Runnable {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Option(\n+      names = {\"--code\"},\n+      paramLabel = \"<code>\",\n+      description = \"code to be executed\")\n+  Bytes codeHexString = Bytes.EMPTY;\n+\n+  @Option(\n+      names = {\"--codefile\"},\n+      paramLabel = \"<file>\",\n+      description = \"file containing code to be executed\")\n+  File codeFile;\n+\n+  @Option(\n+      names = {\"--gas\"},\n+      paramLabel = \"<int>\")\n+  Gas gas = Gas.of(10_000_000_000L);\n+\n+  @Option(\n+      names = {\"--price\"},\n+      paramLabel = \"<int>\")\n+  Wei gasPriceGWei = Wei.ZERO;\n+\n+  @Option(\n+      names = {\"--sender\"},\n+      paramLabel = \"<address>\",\n+      description = \"address of ORIGIN\")\n+  Address sender = Address.fromHexString(\"0x00\");\n+\n+  @Option(\n+      names = {\"--receiver\"},\n+      paramLabel = \"<address>\",\n+      description = \"address of ADDRESS\")\n+  Address receiver = Address.fromHexString(\"0x00\");\n+\n+  @Option(\n+      names = {\"--input\"},\n+      paramLabel = \"<code>\",\n+      description = \"CALLDATA\")\n+  Bytes callData = Bytes.EMPTY;\n+\n+  @Option(\n+      names = {\"--value\"},\n+      paramLabel = \"<int>\")\n+  Wei ethValue = Wei.ZERO;\n+\n+  @Option(\n+      names = {\"--json\"},\n+      description = \"output json output for each opcode\")\n+  boolean showJsonResults = false;\n+\n+  @Option(\n+      names = {\"--nomemory\"},\n+      description = \"disable showing the full memory output for each op\")\n+  boolean showMemory = true;\n+\n+  @Option(\n+      names = {\"--create\"},\n+      description = \"initcode to execute\")\n+  Bytes createCode = Bytes.of();\n+\n+  @Option(\n+      names = {\"--prestate\", \"--genesis\"},\n+      description = \"a chain specification, the same one that the client normally would use\")\n+  File genesisFile;\n+\n+  @Option(\n+      names = {\"--chain\"},\n+      description = \"Name of a well know chain\")\n+  NetworkName network;\n+\n+  @Option(\n+      names = {\"--repeat\"},\n+      description = \"Number of times to repeat before gathering timing\")\n+  int repeat = 0;\n+\n+  private final EvmToolCommandOptionsModule daggerOptions = new EvmToolCommandOptionsModule();\n+\n+  void parse(\n+      final CommandLine.AbstractParseResultHandler<List<Object>> resultHandler,\n+      final CommandLine.DefaultExceptionHandler<List<Object>> exceptionHandler,\n+      final String[] args) {\n+\n+    final CommandLine commandLine = new CommandLine(this);\n+    commandLine.addMixin(\"Dagger Options\", daggerOptions);\n+\n+    // add sub commands here\n+\n+    commandLine.registerConverter(Address.class, Address::fromHexString);\n+    commandLine.registerConverter(Bytes.class, Bytes::fromHexString);\n+    commandLine.registerConverter(Gas.class, (arg) -> Gas.of(Long.parseUnsignedLong(arg)));\n+    commandLine.registerConverter(Wei.class, (arg) -> Wei.of(Long.parseUnsignedLong(arg)));\n+\n+    commandLine.parseWithHandlers(resultHandler, exceptionHandler, args);\n+  }\n+\n+  @Override\n+  public void run() {\n+    try {\n+      final EvmToolComponent component =\n+          DaggerEvmToolComponent.builder()\n+              .dataStoreModule(new InMemoryDataStoreModule())\n+              .genesisFileModule(\n+                  network == null\n+                      ? genesisFile == null\n+                          ? GenesisFileModule.createGenesisModule(NetworkName.DEV)\n+                          : GenesisFileModule.createGenesisModule(genesisFile)\n+                      : GenesisFileModule.createGenesisModule(network))\n+              .evmToolCommandOptionsModule(daggerOptions)\n+              .metricsSystemModule(new PrometheusMetricsSystemModule())\n+              .build();\n+\n+      final BlockHeader blockHeader =\n+          BlockHeaderBuilder.create()\n+              .parentHash(Hash.EMPTY)\n+              .coinbase(Address.ZERO)\n+              .difficulty(Difficulty.ONE)\n+              .number(1)\n+              .gasLimit(5000)\n+              .timestamp(Instant.now().toEpochMilli())\n+              .ommersHash(Hash.EMPTY_LIST_HASH)\n+              .stateRoot(Hash.EMPTY_TRIE_HASH)\n+              .transactionsRoot(Hash.EMPTY)\n+              .receiptsRoot(Hash.EMPTY)\n+              .logsBloom(LogsBloomFilter.empty())\n+              .gasUsed(0)\n+              .extraData(Bytes.EMPTY)\n+              .mixHash(Hash.EMPTY)\n+              .nonce(0)\n+              .blockHeaderFunctions(new MainnetBlockHeaderFunctions())\n+              .buildBlockHeader();\n+\n+      Configurator.setAllLevels(\"\", repeat == 0 ? Level.INFO : Level.OFF);\n+      do {\n+        final MessageFrame messageFrame =\n+            MessageFrame.builder()\n+                .type(MessageFrame.Type.MESSAGE_CALL)\n+                .messageFrameStack(new ArrayDeque<>())\n+                .blockchain(component.getBlockchain())\n+                .worldState(component.getWorldUpdater())\n+                .initialGas(gas)\n+                .contract(Address.ZERO)\n+                .address(receiver)\n+                .originator(sender)\n+                .gasPrice(gasPriceGWei)\n+                .inputData(callData)\n+                .sender(Address.ZERO)\n+                .value(ethValue)\n+                .apparentValue(ethValue)\n+                .code(new Code(codeHexString))\n+                .blockHeader(blockHeader)\n+                .depth(0)\n+                .completer(c -> {})\n+                .miningBeneficiary(blockHeader.getCoinbase())\n+                .blockHashLookup(new BlockHashLookup(blockHeader, component.getBlockchain()))\n+                .contractAccountVersion(Account.DEFAULT_VERSION)\n+                .build();\n+\n+        messageFrame.setState(MessageFrame.State.CODE_EXECUTING);\n+        final EVM evm = component.getEvmAtBlock().apply(0);\n+\n+        final Stopwatch stopwatch = Stopwatch.createStarted();\n+        evm.runToHalt(\n+            messageFrame,\n+            (frame, currentGasCost, executeOperation) -> {\n+              if (showJsonResults && repeat == 0) {\n+                System.out.println(createEvmTraceOperation(messageFrame));\n+              }\n+              executeOperation.execute();\n+            });\n+        stopwatch.stop();\n+\n+        if (repeat == 0) {\n+          System.out.println(\n+              new JsonObject()\n+                  .put(\n+                      \"gasUser\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNzMyMA==", "bodyText": "This output is matching existing outputs from other clients.  My understanding is that it was used for cross-client fuzzing at one point and I want to maintain maximum compatibility.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417407320", "createdAt": "2020-04-29T15:30:00Z", "author": {"login": "shemnon"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.evmtool;\n+\n+import org.hyperledger.besu.cli.config.NetworkName;\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.BlockHeaderBuilder;\n+import org.hyperledger.besu.ethereum.core.Difficulty;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogsBloomFilter;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MainnetBlockHeaderFunctions;\n+import org.hyperledger.besu.ethereum.vm.BlockHashLookup;\n+import org.hyperledger.besu.ethereum.vm.Code;\n+import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.List;\n+\n+import com.google.common.base.Stopwatch;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.units.bigints.UInt256;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+@Command(\n+    description = \"This command evaluates EVM transactions.\",\n+    abbreviateSynopsis = true,\n+    name = \"evm\",\n+    mixinStandardHelpOptions = true,\n+    sortOptions = false,\n+    header = \"Usage:\",\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Hyperledger Besu is licensed under the Apache License 2.0\")\n+public class EvmToolCommand implements Runnable {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Option(\n+      names = {\"--code\"},\n+      paramLabel = \"<code>\",\n+      description = \"code to be executed\")\n+  Bytes codeHexString = Bytes.EMPTY;\n+\n+  @Option(\n+      names = {\"--codefile\"},\n+      paramLabel = \"<file>\",\n+      description = \"file containing code to be executed\")\n+  File codeFile;\n+\n+  @Option(\n+      names = {\"--gas\"},\n+      paramLabel = \"<int>\")\n+  Gas gas = Gas.of(10_000_000_000L);\n+\n+  @Option(\n+      names = {\"--price\"},\n+      paramLabel = \"<int>\")\n+  Wei gasPriceGWei = Wei.ZERO;\n+\n+  @Option(\n+      names = {\"--sender\"},\n+      paramLabel = \"<address>\",\n+      description = \"address of ORIGIN\")\n+  Address sender = Address.fromHexString(\"0x00\");\n+\n+  @Option(\n+      names = {\"--receiver\"},\n+      paramLabel = \"<address>\",\n+      description = \"address of ADDRESS\")\n+  Address receiver = Address.fromHexString(\"0x00\");\n+\n+  @Option(\n+      names = {\"--input\"},\n+      paramLabel = \"<code>\",\n+      description = \"CALLDATA\")\n+  Bytes callData = Bytes.EMPTY;\n+\n+  @Option(\n+      names = {\"--value\"},\n+      paramLabel = \"<int>\")\n+  Wei ethValue = Wei.ZERO;\n+\n+  @Option(\n+      names = {\"--json\"},\n+      description = \"output json output for each opcode\")\n+  boolean showJsonResults = false;\n+\n+  @Option(\n+      names = {\"--nomemory\"},\n+      description = \"disable showing the full memory output for each op\")\n+  boolean showMemory = true;\n+\n+  @Option(\n+      names = {\"--create\"},\n+      description = \"initcode to execute\")\n+  Bytes createCode = Bytes.of();\n+\n+  @Option(\n+      names = {\"--prestate\", \"--genesis\"},\n+      description = \"a chain specification, the same one that the client normally would use\")\n+  File genesisFile;\n+\n+  @Option(\n+      names = {\"--chain\"},\n+      description = \"Name of a well know chain\")\n+  NetworkName network;\n+\n+  @Option(\n+      names = {\"--repeat\"},\n+      description = \"Number of times to repeat before gathering timing\")\n+  int repeat = 0;\n+\n+  private final EvmToolCommandOptionsModule daggerOptions = new EvmToolCommandOptionsModule();\n+\n+  void parse(\n+      final CommandLine.AbstractParseResultHandler<List<Object>> resultHandler,\n+      final CommandLine.DefaultExceptionHandler<List<Object>> exceptionHandler,\n+      final String[] args) {\n+\n+    final CommandLine commandLine = new CommandLine(this);\n+    commandLine.addMixin(\"Dagger Options\", daggerOptions);\n+\n+    // add sub commands here\n+\n+    commandLine.registerConverter(Address.class, Address::fromHexString);\n+    commandLine.registerConverter(Bytes.class, Bytes::fromHexString);\n+    commandLine.registerConverter(Gas.class, (arg) -> Gas.of(Long.parseUnsignedLong(arg)));\n+    commandLine.registerConverter(Wei.class, (arg) -> Wei.of(Long.parseUnsignedLong(arg)));\n+\n+    commandLine.parseWithHandlers(resultHandler, exceptionHandler, args);\n+  }\n+\n+  @Override\n+  public void run() {\n+    try {\n+      final EvmToolComponent component =\n+          DaggerEvmToolComponent.builder()\n+              .dataStoreModule(new InMemoryDataStoreModule())\n+              .genesisFileModule(\n+                  network == null\n+                      ? genesisFile == null\n+                          ? GenesisFileModule.createGenesisModule(NetworkName.DEV)\n+                          : GenesisFileModule.createGenesisModule(genesisFile)\n+                      : GenesisFileModule.createGenesisModule(network))\n+              .evmToolCommandOptionsModule(daggerOptions)\n+              .metricsSystemModule(new PrometheusMetricsSystemModule())\n+              .build();\n+\n+      final BlockHeader blockHeader =\n+          BlockHeaderBuilder.create()\n+              .parentHash(Hash.EMPTY)\n+              .coinbase(Address.ZERO)\n+              .difficulty(Difficulty.ONE)\n+              .number(1)\n+              .gasLimit(5000)\n+              .timestamp(Instant.now().toEpochMilli())\n+              .ommersHash(Hash.EMPTY_LIST_HASH)\n+              .stateRoot(Hash.EMPTY_TRIE_HASH)\n+              .transactionsRoot(Hash.EMPTY)\n+              .receiptsRoot(Hash.EMPTY)\n+              .logsBloom(LogsBloomFilter.empty())\n+              .gasUsed(0)\n+              .extraData(Bytes.EMPTY)\n+              .mixHash(Hash.EMPTY)\n+              .nonce(0)\n+              .blockHeaderFunctions(new MainnetBlockHeaderFunctions())\n+              .buildBlockHeader();\n+\n+      Configurator.setAllLevels(\"\", repeat == 0 ? Level.INFO : Level.OFF);\n+      do {\n+        final MessageFrame messageFrame =\n+            MessageFrame.builder()\n+                .type(MessageFrame.Type.MESSAGE_CALL)\n+                .messageFrameStack(new ArrayDeque<>())\n+                .blockchain(component.getBlockchain())\n+                .worldState(component.getWorldUpdater())\n+                .initialGas(gas)\n+                .contract(Address.ZERO)\n+                .address(receiver)\n+                .originator(sender)\n+                .gasPrice(gasPriceGWei)\n+                .inputData(callData)\n+                .sender(Address.ZERO)\n+                .value(ethValue)\n+                .apparentValue(ethValue)\n+                .code(new Code(codeHexString))\n+                .blockHeader(blockHeader)\n+                .depth(0)\n+                .completer(c -> {})\n+                .miningBeneficiary(blockHeader.getCoinbase())\n+                .blockHashLookup(new BlockHashLookup(blockHeader, component.getBlockchain()))\n+                .contractAccountVersion(Account.DEFAULT_VERSION)\n+                .build();\n+\n+        messageFrame.setState(MessageFrame.State.CODE_EXECUTING);\n+        final EVM evm = component.getEvmAtBlock().apply(0);\n+\n+        final Stopwatch stopwatch = Stopwatch.createStarted();\n+        evm.runToHalt(\n+            messageFrame,\n+            (frame, currentGasCost, executeOperation) -> {\n+              if (showJsonResults && repeat == 0) {\n+                System.out.println(createEvmTraceOperation(messageFrame));\n+              }\n+              executeOperation.execute();\n+            });\n+        stopwatch.stop();\n+\n+        if (repeat == 0) {\n+          System.out.println(\n+              new JsonObject()\n+                  .put(\n+                      \"gasUser\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjAwMg=="}, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwOTAyMg==", "bodyText": "Ok.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417409022", "createdAt": "2020-04-29T15:32:08Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.evmtool;\n+\n+import org.hyperledger.besu.cli.config.NetworkName;\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.BlockHeaderBuilder;\n+import org.hyperledger.besu.ethereum.core.Difficulty;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogsBloomFilter;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MainnetBlockHeaderFunctions;\n+import org.hyperledger.besu.ethereum.vm.BlockHashLookup;\n+import org.hyperledger.besu.ethereum.vm.Code;\n+import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.List;\n+\n+import com.google.common.base.Stopwatch;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.units.bigints.UInt256;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+@Command(\n+    description = \"This command evaluates EVM transactions.\",\n+    abbreviateSynopsis = true,\n+    name = \"evm\",\n+    mixinStandardHelpOptions = true,\n+    sortOptions = false,\n+    header = \"Usage:\",\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Hyperledger Besu is licensed under the Apache License 2.0\")\n+public class EvmToolCommand implements Runnable {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Option(\n+      names = {\"--code\"},\n+      paramLabel = \"<code>\",\n+      description = \"code to be executed\")\n+  Bytes codeHexString = Bytes.EMPTY;\n+\n+  @Option(\n+      names = {\"--codefile\"},\n+      paramLabel = \"<file>\",\n+      description = \"file containing code to be executed\")\n+  File codeFile;\n+\n+  @Option(\n+      names = {\"--gas\"},\n+      paramLabel = \"<int>\")\n+  Gas gas = Gas.of(10_000_000_000L);\n+\n+  @Option(\n+      names = {\"--price\"},\n+      paramLabel = \"<int>\")\n+  Wei gasPriceGWei = Wei.ZERO;\n+\n+  @Option(\n+      names = {\"--sender\"},\n+      paramLabel = \"<address>\",\n+      description = \"address of ORIGIN\")\n+  Address sender = Address.fromHexString(\"0x00\");\n+\n+  @Option(\n+      names = {\"--receiver\"},\n+      paramLabel = \"<address>\",\n+      description = \"address of ADDRESS\")\n+  Address receiver = Address.fromHexString(\"0x00\");\n+\n+  @Option(\n+      names = {\"--input\"},\n+      paramLabel = \"<code>\",\n+      description = \"CALLDATA\")\n+  Bytes callData = Bytes.EMPTY;\n+\n+  @Option(\n+      names = {\"--value\"},\n+      paramLabel = \"<int>\")\n+  Wei ethValue = Wei.ZERO;\n+\n+  @Option(\n+      names = {\"--json\"},\n+      description = \"output json output for each opcode\")\n+  boolean showJsonResults = false;\n+\n+  @Option(\n+      names = {\"--nomemory\"},\n+      description = \"disable showing the full memory output for each op\")\n+  boolean showMemory = true;\n+\n+  @Option(\n+      names = {\"--create\"},\n+      description = \"initcode to execute\")\n+  Bytes createCode = Bytes.of();\n+\n+  @Option(\n+      names = {\"--prestate\", \"--genesis\"},\n+      description = \"a chain specification, the same one that the client normally would use\")\n+  File genesisFile;\n+\n+  @Option(\n+      names = {\"--chain\"},\n+      description = \"Name of a well know chain\")\n+  NetworkName network;\n+\n+  @Option(\n+      names = {\"--repeat\"},\n+      description = \"Number of times to repeat before gathering timing\")\n+  int repeat = 0;\n+\n+  private final EvmToolCommandOptionsModule daggerOptions = new EvmToolCommandOptionsModule();\n+\n+  void parse(\n+      final CommandLine.AbstractParseResultHandler<List<Object>> resultHandler,\n+      final CommandLine.DefaultExceptionHandler<List<Object>> exceptionHandler,\n+      final String[] args) {\n+\n+    final CommandLine commandLine = new CommandLine(this);\n+    commandLine.addMixin(\"Dagger Options\", daggerOptions);\n+\n+    // add sub commands here\n+\n+    commandLine.registerConverter(Address.class, Address::fromHexString);\n+    commandLine.registerConverter(Bytes.class, Bytes::fromHexString);\n+    commandLine.registerConverter(Gas.class, (arg) -> Gas.of(Long.parseUnsignedLong(arg)));\n+    commandLine.registerConverter(Wei.class, (arg) -> Wei.of(Long.parseUnsignedLong(arg)));\n+\n+    commandLine.parseWithHandlers(resultHandler, exceptionHandler, args);\n+  }\n+\n+  @Override\n+  public void run() {\n+    try {\n+      final EvmToolComponent component =\n+          DaggerEvmToolComponent.builder()\n+              .dataStoreModule(new InMemoryDataStoreModule())\n+              .genesisFileModule(\n+                  network == null\n+                      ? genesisFile == null\n+                          ? GenesisFileModule.createGenesisModule(NetworkName.DEV)\n+                          : GenesisFileModule.createGenesisModule(genesisFile)\n+                      : GenesisFileModule.createGenesisModule(network))\n+              .evmToolCommandOptionsModule(daggerOptions)\n+              .metricsSystemModule(new PrometheusMetricsSystemModule())\n+              .build();\n+\n+      final BlockHeader blockHeader =\n+          BlockHeaderBuilder.create()\n+              .parentHash(Hash.EMPTY)\n+              .coinbase(Address.ZERO)\n+              .difficulty(Difficulty.ONE)\n+              .number(1)\n+              .gasLimit(5000)\n+              .timestamp(Instant.now().toEpochMilli())\n+              .ommersHash(Hash.EMPTY_LIST_HASH)\n+              .stateRoot(Hash.EMPTY_TRIE_HASH)\n+              .transactionsRoot(Hash.EMPTY)\n+              .receiptsRoot(Hash.EMPTY)\n+              .logsBloom(LogsBloomFilter.empty())\n+              .gasUsed(0)\n+              .extraData(Bytes.EMPTY)\n+              .mixHash(Hash.EMPTY)\n+              .nonce(0)\n+              .blockHeaderFunctions(new MainnetBlockHeaderFunctions())\n+              .buildBlockHeader();\n+\n+      Configurator.setAllLevels(\"\", repeat == 0 ? Level.INFO : Level.OFF);\n+      do {\n+        final MessageFrame messageFrame =\n+            MessageFrame.builder()\n+                .type(MessageFrame.Type.MESSAGE_CALL)\n+                .messageFrameStack(new ArrayDeque<>())\n+                .blockchain(component.getBlockchain())\n+                .worldState(component.getWorldUpdater())\n+                .initialGas(gas)\n+                .contract(Address.ZERO)\n+                .address(receiver)\n+                .originator(sender)\n+                .gasPrice(gasPriceGWei)\n+                .inputData(callData)\n+                .sender(Address.ZERO)\n+                .value(ethValue)\n+                .apparentValue(ethValue)\n+                .code(new Code(codeHexString))\n+                .blockHeader(blockHeader)\n+                .depth(0)\n+                .completer(c -> {})\n+                .miningBeneficiary(blockHeader.getCoinbase())\n+                .blockHashLookup(new BlockHashLookup(blockHeader, component.getBlockchain()))\n+                .contractAccountVersion(Account.DEFAULT_VERSION)\n+                .build();\n+\n+        messageFrame.setState(MessageFrame.State.CODE_EXECUTING);\n+        final EVM evm = component.getEvmAtBlock().apply(0);\n+\n+        final Stopwatch stopwatch = Stopwatch.createStarted();\n+        evm.runToHalt(\n+            messageFrame,\n+            (frame, currentGasCost, executeOperation) -> {\n+              if (showJsonResults && repeat == 0) {\n+                System.out.println(createEvmTraceOperation(messageFrame));\n+              }\n+              executeOperation.execute();\n+            });\n+        stopwatch.stop();\n+\n+        if (repeat == 0) {\n+          System.out.println(\n+              new JsonObject()\n+                  .put(\n+                      \"gasUser\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjAwMg=="}, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzEwMTQyOnYy", "diffSide": "RIGHT", "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommandOptionsModule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToyMzo1NlrOGOEOzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozMjoyM1rOGOEopQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjU3NQ==", "bodyText": "Why it is needed ?", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417402575", "createdAt": "2020-04-29T15:23:56Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommandOptionsModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+\n+package org.hyperledger.besu.evmtool;\n+\n+import javax.inject.Named;\n+\n+import dagger.Module;\n+import dagger.Provides;\n+import picocli.CommandLine.Option;\n+\n+@SuppressWarnings(\"WeakerAccess\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwODI5Nw==", "bodyText": "IntelliJ wants it package private, but Dagger complains when it is not public.  This keeps future development from accidentally running into that wall.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417408297", "createdAt": "2020-04-29T15:31:15Z", "author": {"login": "shemnon"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommandOptionsModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+\n+package org.hyperledger.besu.evmtool;\n+\n+import javax.inject.Named;\n+\n+import dagger.Module;\n+import dagger.Provides;\n+import picocli.CommandLine.Option;\n+\n+@SuppressWarnings(\"WeakerAccess\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjU3NQ=="}, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwOTE4OQ==", "bodyText": "Sounds good.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417409189", "createdAt": "2020-04-29T15:32:23Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommandOptionsModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+\n+package org.hyperledger.besu.evmtool;\n+\n+import javax.inject.Named;\n+\n+import dagger.Module;\n+import dagger.Provides;\n+import picocli.CommandLine.Option;\n+\n+@SuppressWarnings(\"WeakerAccess\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjU3NQ=="}, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzEwMzc0OnYy", "diffSide": "RIGHT", "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToyNDoyNVrOGOEQPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo0MjowM1rOGOFExg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjk0Mw==", "bodyText": "Why fields don't have  private visibility ?", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417402943", "createdAt": "2020-04-29T15:24:25Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.evmtool;\n+\n+import org.hyperledger.besu.cli.config.NetworkName;\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.BlockHeaderBuilder;\n+import org.hyperledger.besu.ethereum.core.Difficulty;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogsBloomFilter;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MainnetBlockHeaderFunctions;\n+import org.hyperledger.besu.ethereum.vm.BlockHashLookup;\n+import org.hyperledger.besu.ethereum.vm.Code;\n+import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.List;\n+\n+import com.google.common.base.Stopwatch;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.units.bigints.UInt256;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+@Command(\n+    description = \"This command evaluates EVM transactions.\",\n+    abbreviateSynopsis = true,\n+    name = \"evm\",\n+    mixinStandardHelpOptions = true,\n+    sortOptions = false,\n+    header = \"Usage:\",\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Hyperledger Besu is licensed under the Apache License 2.0\")\n+public class EvmToolCommand implements Runnable {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Option(\n+      names = {\"--code\"},\n+      paramLabel = \"<code>\",\n+      description = \"code to be executed\")\n+  Bytes codeHexString = Bytes.EMPTY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNjM5MA==", "bodyText": "It should be.  I'm surprised my intellij didn't complain.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417416390", "createdAt": "2020-04-29T15:42:03Z", "author": {"login": "shemnon"}, "path": "ethereum/evmtool/src/main/java/org/hyperledger/besu/evmtool/EvmToolCommand.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+package org.hyperledger.besu.evmtool;\n+\n+import org.hyperledger.besu.cli.config.NetworkName;\n+import org.hyperledger.besu.ethereum.core.Account;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.BlockHeaderBuilder;\n+import org.hyperledger.besu.ethereum.core.Difficulty;\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogsBloomFilter;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.MainnetBlockHeaderFunctions;\n+import org.hyperledger.besu.ethereum.vm.BlockHashLookup;\n+import org.hyperledger.besu.ethereum.vm.Code;\n+import org.hyperledger.besu.ethereum.vm.EVM;\n+import org.hyperledger.besu.ethereum.vm.ExceptionalHaltReason;\n+import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.ArrayDeque;\n+import java.util.List;\n+\n+import com.google.common.base.Stopwatch;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.config.Configurator;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.units.bigints.UInt256;\n+import picocli.CommandLine;\n+import picocli.CommandLine.Command;\n+import picocli.CommandLine.Option;\n+\n+@Command(\n+    description = \"This command evaluates EVM transactions.\",\n+    abbreviateSynopsis = true,\n+    name = \"evm\",\n+    mixinStandardHelpOptions = true,\n+    sortOptions = false,\n+    header = \"Usage:\",\n+    synopsisHeading = \"%n\",\n+    descriptionHeading = \"%nDescription:%n%n\",\n+    optionListHeading = \"%nOptions:%n\",\n+    footerHeading = \"%n\",\n+    footer = \"Hyperledger Besu is licensed under the Apache License 2.0\")\n+public class EvmToolCommand implements Runnable {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Option(\n+      names = {\"--code\"},\n+      paramLabel = \"<code>\",\n+      description = \"code to be executed\")\n+  Bytes codeHexString = Bytes.EMPTY;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMjk0Mw=="}, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzExMzM1OnYy", "diffSide": "RIGHT", "path": "gradle/versions.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToyNjozNFrOGOEWmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo1NToxNFrOGOFqDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDU2OQ==", "bodyText": "We don't need the annotationProcessor ? com.google.dagger:dagger-compiler", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417404569", "createdAt": "2020-04-29T15:26:34Z", "author": {"login": "abdelhamidbakhta"}, "path": "gradle/versions.gradle", "diffHunk": "@@ -17,10 +17,14 @@ dependencyManagement {\n   dependencies {\n     dependency 'com.fasterxml.jackson.core:jackson-databind:2.10.1'\n     dependency 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.10.1'\n+\n     dependency 'com.github.tomakehurst:wiremock-jre8:2.25.1'\n \n     dependency 'com.google.auto.service:auto-service:1.0-rc6'\n \n+    dependency 'com.google.dagger:dagger:2.27'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNDY5OA==", "bodyText": "It's the next line. This file just sets library versions.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417424698", "createdAt": "2020-04-29T15:53:37Z", "author": {"login": "shemnon"}, "path": "gradle/versions.gradle", "diffHunk": "@@ -17,10 +17,14 @@ dependencyManagement {\n   dependencies {\n     dependency 'com.fasterxml.jackson.core:jackson-databind:2.10.1'\n     dependency 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.10.1'\n+\n     dependency 'com.github.tomakehurst:wiremock-jre8:2.25.1'\n \n     dependency 'com.google.auto.service:auto-service:1.0-rc6'\n \n+    dependency 'com.google.dagger:dagger:2.27'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDU2OQ=="}, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNTkzMw==", "bodyText": "Ok.", "url": "https://github.com/hyperledger/besu/pull/786#discussion_r417425933", "createdAt": "2020-04-29T15:55:14Z", "author": {"login": "abdelhamidbakhta"}, "path": "gradle/versions.gradle", "diffHunk": "@@ -17,10 +17,14 @@ dependencyManagement {\n   dependencies {\n     dependency 'com.fasterxml.jackson.core:jackson-databind:2.10.1'\n     dependency 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.10.1'\n+\n     dependency 'com.github.tomakehurst:wiremock-jre8:2.25.1'\n \n     dependency 'com.google.auto.service:auto-service:1.0-rc6'\n \n+    dependency 'com.google.dagger:dagger:2.27'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNDU2OQ=="}, "originalCommit": {"oid": "bcfcc2830dd1d168b5d49601ed281a6f10f4c7b9"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 955, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}