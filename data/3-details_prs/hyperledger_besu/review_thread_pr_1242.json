{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0Njk2MzYy", "number": 1242, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyNDo0MFrOEQyHsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDo0NzozMlrOERe9NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMzODQwOnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/Runner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyNDo0MFrOG1IcYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyNDo0MFrOG1IcYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NjA1MA==", "bodyText": "Is this change just to make it more functional style? I'd be careful doing that as it requires testing and doesn't actually improve anything.", "url": "https://github.com/hyperledger/besu/pull/1242#discussion_r458366050", "createdAt": "2020-07-21T20:24:40Z", "author": {"login": "davemec"}, "path": "besu/src/main/java/org/hyperledger/besu/Runner.java", "diffHunk": "@@ -215,14 +215,16 @@ private void writeBesuPortsToFile() {\n           .getLocalEnode()\n           .ifPresent(\n               enode -> {\n-                if (enode.getDiscoveryPort().isPresent()) {\n-                  properties.setProperty(\n-                      \"discovery\", String.valueOf(enode.getDiscoveryPort().getAsInt()));\n-                }\n-                if (enode.getListeningPort().isPresent()) {\n-                  properties.setProperty(\n-                      \"p2p\", String.valueOf(enode.getListeningPort().getAsInt()));\n-                }\n+                enode\n+                    .getDiscoveryPort()\n+                    .ifPresent(\n+                        discoveryPort ->\n+                            properties.setProperty(\"discovery\", String.valueOf(discoveryPort)));\n+                enode\n+                    .getDiscoveryPort()\n+                    .ifPresent(\n+                        listeningPort ->\n+                            properties.setProperty(\"p2p\", String.valueOf(listeningPort)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f01d43c024f4990556fa7e8c06b27285f7a2f5e"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzY3MjE2OnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/PeerDiscoveryAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDo0NDo1N1rOG2N7PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDo0NDo1N1rOG2N7PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwNDQ0NA==", "bodyText": "This is a concise argument as to why OptionalInt should be avoided.", "url": "https://github.com/hyperledger/besu/pull/1242#discussion_r459504444", "createdAt": "2020-07-23T14:44:57Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/PeerDiscoveryAgent.java", "diffHunk": "@@ -187,13 +186,7 @@ protected void handleIncomingPacket(final Endpoint sourceEndpoint, final Packet\n         packet\n             .getPacketData(PingPacketData.class)\n             .flatMap(PingPacketData::getFrom)\n-            .flatMap(\n-                fromEndpoint -> {\n-                  final OptionalInt maybePort = fromEndpoint.getTcpPort();\n-                  return maybePort.isPresent()\n-                      ? Optional.of(maybePort.getAsInt())\n-                      : Optional.empty();\n-                })\n+            .flatMap(Endpoint::getTcpPort)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5720fdcbcfb887e4255de37add482f0c3ef4fa0b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzY4NDM2OnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/peers/EnodeURL.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDo0NzozMlrOG2OC3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTowNzoyMVrOG2O9EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwNjM5OQ==", "bodyText": "Will exceptions be thrown out of this lambda construct?  We should have a unit test to validate, all the unit tests I reviewed are all within UInt16.", "url": "https://github.com/hyperledger/besu/pull/1242#discussion_r459506399", "createdAt": "2020-07-23T14:47:32Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/peers/EnodeURL.java", "diffHunk": "@@ -40,22 +41,18 @@\n \n   private final Bytes nodeId;\n   private final InetAddress ip;\n-  private final OptionalInt listeningPort;\n-  private final OptionalInt discoveryPort;\n+  private final Optional<Integer> listeningPort;\n+  private final Optional<Integer> discoveryPort;\n \n   private EnodeURL(\n       final Bytes nodeId,\n       final InetAddress address,\n-      final OptionalInt listeningPort,\n-      final OptionalInt discoveryPort) {\n+      final Optional<Integer> listeningPort,\n+      final Optional<Integer> discoveryPort) {\n     checkArgument(\n         nodeId.size() == NODE_ID_SIZE, \"Invalid node id.  Expected id of length: 64 bytes.\");\n-    checkArgument(\n-        !listeningPort.isPresent() || NetworkUtility.isValidPort(listeningPort.getAsInt()),\n-        \"Invalid listening port.  Port should be between 1 - 65535.\");\n-    checkArgument(\n-        !discoveryPort.isPresent() || NetworkUtility.isValidPort(discoveryPort.getAsInt()),\n-        \"Invalid discovery port.  Port should be between 1 - 65535.\");\n+    listeningPort.ifPresent(port -> NetworkUtility.checkPort(port, \"listening\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5720fdcbcfb887e4255de37add482f0c3ef4fa0b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUxODg5MQ==", "bodyText": "Is it not higher here?\nhttps://github.com/RatanRSur/besu/blob/5720fdcbcfb887e4255de37add482f0c3ef4fa0b/ethereum/p2p/src/test/java/org/hyperledger/besu/ethereum/p2p/peers/EnodeURLTest.java#L276", "url": "https://github.com/hyperledger/besu/pull/1242#discussion_r459518891", "createdAt": "2020-07-23T15:04:02Z", "author": {"login": "RatanRSur"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/peers/EnodeURL.java", "diffHunk": "@@ -40,22 +41,18 @@\n \n   private final Bytes nodeId;\n   private final InetAddress ip;\n-  private final OptionalInt listeningPort;\n-  private final OptionalInt discoveryPort;\n+  private final Optional<Integer> listeningPort;\n+  private final Optional<Integer> discoveryPort;\n \n   private EnodeURL(\n       final Bytes nodeId,\n       final InetAddress address,\n-      final OptionalInt listeningPort,\n-      final OptionalInt discoveryPort) {\n+      final Optional<Integer> listeningPort,\n+      final Optional<Integer> discoveryPort) {\n     checkArgument(\n         nodeId.size() == NODE_ID_SIZE, \"Invalid node id.  Expected id of length: 64 bytes.\");\n-    checkArgument(\n-        !listeningPort.isPresent() || NetworkUtility.isValidPort(listeningPort.getAsInt()),\n-        \"Invalid listening port.  Port should be between 1 - 65535.\");\n-    checkArgument(\n-        !discoveryPort.isPresent() || NetworkUtility.isValidPort(discoveryPort.getAsInt()),\n-        \"Invalid discovery port.  Port should be between 1 - 65535.\");\n+    listeningPort.ifPresent(port -> NetworkUtility.checkPort(port, \"listening\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwNjM5OQ=="}, "originalCommit": {"oid": "5720fdcbcfb887e4255de37add482f0c3ef4fa0b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUyMTI5Ng==", "bodyText": "I was scanning for the builder variants (.discoveryPort(int) and .listeningPort(int).)  Are there negative port tests?  We should test those too.  Possibly via the builders.", "url": "https://github.com/hyperledger/besu/pull/1242#discussion_r459521296", "createdAt": "2020-07-23T15:07:21Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/peers/EnodeURL.java", "diffHunk": "@@ -40,22 +41,18 @@\n \n   private final Bytes nodeId;\n   private final InetAddress ip;\n-  private final OptionalInt listeningPort;\n-  private final OptionalInt discoveryPort;\n+  private final Optional<Integer> listeningPort;\n+  private final Optional<Integer> discoveryPort;\n \n   private EnodeURL(\n       final Bytes nodeId,\n       final InetAddress address,\n-      final OptionalInt listeningPort,\n-      final OptionalInt discoveryPort) {\n+      final Optional<Integer> listeningPort,\n+      final Optional<Integer> discoveryPort) {\n     checkArgument(\n         nodeId.size() == NODE_ID_SIZE, \"Invalid node id.  Expected id of length: 64 bytes.\");\n-    checkArgument(\n-        !listeningPort.isPresent() || NetworkUtility.isValidPort(listeningPort.getAsInt()),\n-        \"Invalid listening port.  Port should be between 1 - 65535.\");\n-    checkArgument(\n-        !discoveryPort.isPresent() || NetworkUtility.isValidPort(discoveryPort.getAsInt()),\n-        \"Invalid discovery port.  Port should be between 1 - 65535.\");\n+    listeningPort.ifPresent(port -> NetworkUtility.checkPort(port, \"listening\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUwNjM5OQ=="}, "originalCommit": {"oid": "5720fdcbcfb887e4255de37add482f0c3ef4fa0b"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 719, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}