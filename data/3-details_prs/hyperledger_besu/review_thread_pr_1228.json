{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMzQ1NjU2", "number": 1228, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTowNzoxOFrOEPQ7Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyMDozM1rOEQPzGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDQxNDA2OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTowNzoxOFrOGy4ozQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTowNzoxOFrOGy4ozQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAwOTkzMw==", "bodyText": "Since the user could actually see this exception, we should put a message in the orElseThrow that explains that this method can't do anything without t a log cacher.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456009933", "createdAt": "2020-07-16T19:07:18Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private static final String STATUS = \"Status\";\n+\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found\")));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries.getTransactionLogBloomCacher().orElseThrow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a2d6fb0c5596fc72631fce7d7063dc6c29a57c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDQ0NTMzOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToxNjozN1rOGy48OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToxNjozN1rOGy48OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxNDkwNA==", "bodyText": "Since we have it anyways we can put the block the user tried to put in the string and specifically call out that it's too high of a number.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456014904", "createdAt": "2020-07-16T19:16:37Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private static final String STATUS = \"Status\";\n+\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a2d6fb0c5596fc72631fce7d7063dc6c29a57c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDQ2OTY4OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToyMjo1M1rOGy5Lfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNzoxNDowMFrOGzaz_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODgxNA==", "bodyText": "Is it possible that this won't actually force the repair of that segment? My quick reading makes it seem like we wouldn't do it if we had the right bloom file size:\n\n  \n    \n      besu/ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogBloomCacher.java\n    \n    \n         Line 220\n      in\n      e301b49\n    \n    \n    \n    \n\n        \n          \n           if (!cacheFile.isFile() || cacheFile.length() != EXPECTED_BLOOM_FILE_SIZE) { \n        \n    \n  \n\n\nWhat if the size is right but the user wants to force the recalculation because of corruption?", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456018814", "createdAt": "2020-07-16T19:22:53Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private static final String STATUS = \"Status\";\n+\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found\")));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries.getTransactionLogBloomCacher().orElseThrow();\n+\n+    transactionLogBloomCacher.ensurePreviousSegmentsArePresent(\n+        blockNumber.orElse(blockchainQueries.headBlockNumber()), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a2d6fb0c5596fc72631fce7d7063dc6c29a57c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzNzU1OA==", "bodyText": "The idea of the end point was to re-do if missing or the wrong size. What you are asking for is additional logic to let the user do it whenever they want. Not sure we want to add that ability to this end point.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456037558", "createdAt": "2020-07-16T19:49:06Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private static final String STATUS = \"Status\";\n+\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found\")));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries.getTransactionLogBloomCacher().orElseThrow();\n+\n+    transactionLogBloomCacher.ensurePreviousSegmentsArePresent(\n+        blockNumber.orElse(blockchainQueries.headBlockNumber()), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODgxNA=="}, "originalCommit": {"oid": "99a2d6fb0c5596fc72631fce7d7063dc6c29a57c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU2OTg1Mg==", "bodyText": "This has been updated to always force regeneration when called from the end point.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456569852", "createdAt": "2020-07-17T17:14:00Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private static final String STATUS = \"Status\";\n+\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found\")));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries.getTransactionLogBloomCacher().orElseThrow();\n+\n+    transactionLogBloomCacher.ensurePreviousSegmentsArePresent(\n+        blockNumber.orElse(blockchainQueries.headBlockNumber()), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxODgxNA=="}, "originalCommit": {"oid": "99a2d6fb0c5596fc72631fce7d7063dc6c29a57c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDQ5NTU2OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogBloomCacher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToyOTowMFrOGy5bvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTo1MDo0N1rOGy6ZJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAyMjk3Mg==", "bodyText": "Connected to my point above about forcing regeneration, why can't we use cacheLogsBloomForBlockHeader?", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456022972", "createdAt": "2020-07-16T19:29:00Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogBloomCacher.java", "diffHunk": "@@ -202,14 +206,15 @@ private boolean populateLatestSegment(final long eventBlockNumber) {\n     return false;\n   }\n \n-  private void ensurePreviousSegmentsArePresent(final long blockNumber) {\n+  public void ensurePreviousSegmentsArePresent(\n+      final long blockNumber, final boolean overrideCacheCheck) {\n     if (!cachingStatus.isCaching()) {\n       scheduler.scheduleFutureTask(\n           () -> {\n             long currentSegment = (blockNumber / BLOCKS_PER_BLOOM_CACHE) - 1;\n             while (currentSegment > 0) {\n               try {\n-                if (!cachedSegments.getOrDefault(currentSegment, false)) {\n+                if (overrideCacheCheck || !cachedSegments.getOrDefault(currentSegment, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a2d6fb0c5596fc72631fce7d7063dc6c29a57c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAzODY5NA==", "bodyText": "Not sure we want to force generation in any case, will verify.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456038694", "createdAt": "2020-07-16T19:50:47Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogBloomCacher.java", "diffHunk": "@@ -202,14 +206,15 @@ private boolean populateLatestSegment(final long eventBlockNumber) {\n     return false;\n   }\n \n-  private void ensurePreviousSegmentsArePresent(final long blockNumber) {\n+  public void ensurePreviousSegmentsArePresent(\n+      final long blockNumber, final boolean overrideCacheCheck) {\n     if (!cachingStatus.isCaching()) {\n       scheduler.scheduleFutureTask(\n           () -> {\n             long currentSegment = (blockNumber / BLOCKS_PER_BLOOM_CACHE) - 1;\n             while (currentSegment > 0) {\n               try {\n-                if (!cachedSegments.getOrDefault(currentSegment, false)) {\n+                if (overrideCacheCheck || !cachedSegments.getOrDefault(currentSegment, false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAyMjk3Mg=="}, "originalCommit": {"oid": "99a2d6fb0c5596fc72631fce7d7063dc6c29a57c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDUyMzc4OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOTozNTozMFrOGy5t1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoxNDozMVrOGy7IBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAyNzYwNg==", "bodyText": "I think we want some sort of thread-safe object that can track this. We might be able to get away with an AtomicBoolean", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456027606", "createdAt": "2020-07-16T19:35:30Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private static final String STATUS = \"Status\";\n+\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found\")));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries.getTransactionLogBloomCacher().orElseThrow();\n+\n+    transactionLogBloomCacher.ensurePreviousSegmentsArePresent(\n+        blockNumber.orElse(blockchainQueries.headBlockNumber()), true);\n+\n+    final Map<String, Object> response = new HashMap<>();\n+    response.put(STATUS, \"Started\");\n+\n+    if (transactionLogBloomCacher.getCachingStatus().isCaching()) {\n+      response.put(STATUS, \"Already running\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a2d6fb0c5596fc72631fce7d7063dc6c29a57c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0MDQzNA==", "bodyText": "I don't follow, CachingStatus is a static final class where the isCaching method uses an AtomicInteger to keep track of status. Are you speaking about the status message in the response?", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456040434", "createdAt": "2020-07-16T19:54:07Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private static final String STATUS = \"Status\";\n+\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found\")));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries.getTransactionLogBloomCacher().orElseThrow();\n+\n+    transactionLogBloomCacher.ensurePreviousSegmentsArePresent(\n+        blockNumber.orElse(blockchainQueries.headBlockNumber()), true);\n+\n+    final Map<String, Object> response = new HashMap<>();\n+    response.put(STATUS, \"Started\");\n+\n+    if (transactionLogBloomCacher.getCachingStatus().isCaching()) {\n+      response.put(STATUS, \"Already running\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAyNzYwNg=="}, "originalCommit": {"oid": "99a2d6fb0c5596fc72631fce7d7063dc6c29a57c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1MDY5NQ==", "bodyText": "Ah! I missed that.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456050695", "createdAt": "2020-07-16T20:14:31Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private static final String STATUS = \"Status\";\n+\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found\")));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries.getTransactionLogBloomCacher().orElseThrow();\n+\n+    transactionLogBloomCacher.ensurePreviousSegmentsArePresent(\n+        blockNumber.orElse(blockchainQueries.headBlockNumber()), true);\n+\n+    final Map<String, Object> response = new HashMap<>();\n+    response.put(STATUS, \"Started\");\n+\n+    if (transactionLogBloomCacher.getCachingStatus().isCaching()) {\n+      response.put(STATUS, \"Already running\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAyNzYwNg=="}, "originalCommit": {"oid": "99a2d6fb0c5596fc72631fce7d7063dc6c29a57c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDg5NDk3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMToyMzo0NFrOGy9SZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMDozODo0OVrOGzBcTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NjExNg==", "bodyText": "Why is the value type Object?\n(optional) Since we're always going to have a STATUS key and are never going to mutate the Map, we could make the map immutable\n    final Map<String, String> response =\n        Map.of(\n            STATUS,\n            transactionLogBloomCacher.getCachingStatus().isCaching()\n                ? \"Already running\"\n                : \"Started\");", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456086116", "createdAt": "2020-07-16T21:23:44Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private static final String STATUS = \"Status\";\n+\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found, \" + bn)));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries\n+            .getTransactionLogBloomCacher()\n+            .orElseThrow(\n+                () -> new InternalError(\"Error attempting to get TransactionLogBloomCacher\"));\n+\n+    transactionLogBloomCacher.ensurePreviousSegmentsArePresent(\n+        blockNumber.orElse(blockchainQueries.headBlockNumber()), true);\n+\n+    final Map<String, Object> response = new HashMap<>();\n+    response.put(STATUS, \"Started\");\n+\n+    if (transactionLogBloomCacher.getCachingStatus().isCaching()) {\n+      response.put(STATUS, \"Already running\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b70082c6dd14ce51dd6bd63d96a875126795390"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NDE5MQ==", "bodyText": "Thanks, good catch, not sure why I had it as Object.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456154191", "createdAt": "2020-07-17T00:38:49Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private static final String STATUS = \"Status\";\n+\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found, \" + bn)));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries\n+            .getTransactionLogBloomCacher()\n+            .orElseThrow(\n+                () -> new InternalError(\"Error attempting to get TransactionLogBloomCacher\"));\n+\n+    transactionLogBloomCacher.ensurePreviousSegmentsArePresent(\n+        blockNumber.orElse(blockchainQueries.headBlockNumber()), true);\n+\n+    final Map<String, Object> response = new HashMap<>();\n+    response.put(STATUS, \"Started\");\n+\n+    if (transactionLogBloomCacher.getCachingStatus().isCaching()) {\n+      response.put(STATUS, \"Already running\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NjExNg=="}, "originalCommit": {"oid": "2b70082c6dd14ce51dd6bd63d96a875126795390"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQwNTk3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogBloomCacher.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOTowNToyNlrOGzeIHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMzo0MjowM1rOGzjwZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNDE1OA==", "bodyText": "@shemnon Would it be alright to change cachedSegments into a TreeSet? Couldn't see anywhere we need the model the ternary of <true, false, not present>", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456624158", "createdAt": "2020-07-17T19:05:26Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogBloomCacher.java", "diffHunk": "@@ -202,17 +206,20 @@ private boolean populateLatestSegment(final long eventBlockNumber) {\n     return false;\n   }\n \n-  private void ensurePreviousSegmentsArePresent(final long blockNumber) {\n+  public void ensurePreviousSegmentsArePresent(\n+      final long blockNumber, final boolean overrideCacheCheck) {\n     if (!cachingStatus.isCaching()) {\n       scheduler.scheduleFutureTask(\n           () -> {\n             long currentSegment = (blockNumber / BLOCKS_PER_BLOOM_CACHE) - 1;\n             while (currentSegment > 0) {\n               try {\n-                if (!cachedSegments.getOrDefault(currentSegment, false)) {\n+                if (overrideCacheCheck || !cachedSegments.getOrDefault(currentSegment, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2Njc5OA==", "bodyText": "@RatanRSur This may be an option but let's leave refactoring to another story.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456666798", "createdAt": "2020-07-17T20:46:59Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogBloomCacher.java", "diffHunk": "@@ -202,17 +206,20 @@ private boolean populateLatestSegment(final long eventBlockNumber) {\n     return false;\n   }\n \n-  private void ensurePreviousSegmentsArePresent(final long blockNumber) {\n+  public void ensurePreviousSegmentsArePresent(\n+      final long blockNumber, final boolean overrideCacheCheck) {\n     if (!cachingStatus.isCaching()) {\n       scheduler.scheduleFutureTask(\n           () -> {\n             long currentSegment = (blockNumber / BLOCKS_PER_BLOOM_CACHE) - 1;\n             while (currentSegment > 0) {\n               try {\n-                if (!cachedSegments.getOrDefault(currentSegment, false)) {\n+                if (overrideCacheCheck || !cachedSegments.getOrDefault(currentSegment, false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNDE1OA=="}, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5MDQ2Ng==", "bodyText": "In another PR is fine.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456690466", "createdAt": "2020-07-17T21:55:14Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogBloomCacher.java", "diffHunk": "@@ -202,17 +206,20 @@ private boolean populateLatestSegment(final long eventBlockNumber) {\n     return false;\n   }\n \n-  private void ensurePreviousSegmentsArePresent(final long blockNumber) {\n+  public void ensurePreviousSegmentsArePresent(\n+      final long blockNumber, final boolean overrideCacheCheck) {\n     if (!cachingStatus.isCaching()) {\n       scheduler.scheduleFutureTask(\n           () -> {\n             long currentSegment = (blockNumber / BLOCKS_PER_BLOOM_CACHE) - 1;\n             while (currentSegment > 0) {\n               try {\n-                if (!cachedSegments.getOrDefault(currentSegment, false)) {\n+                if (overrideCacheCheck || !cachedSegments.getOrDefault(currentSegment, false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNDE1OA=="}, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxNjM5MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456716390", "createdAt": "2020-07-17T23:42:03Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/TransactionLogBloomCacher.java", "diffHunk": "@@ -202,17 +206,20 @@ private boolean populateLatestSegment(final long eventBlockNumber) {\n     return false;\n   }\n \n-  private void ensurePreviousSegmentsArePresent(final long blockNumber) {\n+  public void ensurePreviousSegmentsArePresent(\n+      final long blockNumber, final boolean overrideCacheCheck) {\n     if (!cachingStatus.isCaching()) {\n       scheduler.scheduleFutureTask(\n           () -> {\n             long currentSegment = (blockNumber / BLOCKS_PER_BLOOM_CACHE) - 1;\n             while (currentSegment > 0) {\n               try {\n-                if (!cachedSegments.getOrDefault(currentSegment, false)) {\n+                if (overrideCacheCheck || !cachedSegments.getOrDefault(currentSegment, false)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYyNDE1OA=="}, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0ODQ0NjMxOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxOToyMDoxMVrOGzehGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyNDoyOFrOG0TCVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDU1NQ==", "bodyText": "We should make this actionable since this is inscrutable to anyone who doesn't know our architecture. If there isn't a TransactionLogBloomCacher, that means the associated option must be disabled. We should tell them that this rpc method doesn't do anything unless they have the cacher enabled.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456630555", "createdAt": "2020-07-17T19:20:11Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found, \" + bn)));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries\n+            .getTransactionLogBloomCacher()\n+            .orElseThrow(\n+                () -> new InternalError(\"Error attempting to get TransactionLogBloomCacher\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY2NzU3Ng==", "bodyText": "I can update this message, but don't follow what you mean by actionable. I will update the message to state more info about the need for the TransactionLogBloomCacher but aside from that I don't think there is much more this end point should do for them.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456667576", "createdAt": "2020-07-17T20:49:02Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found, \" + bn)));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries\n+            .getTransactionLogBloomCacher()\n+            .orElseThrow(\n+                () -> new InternalError(\"Error attempting to get TransactionLogBloomCacher\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDU1NQ=="}, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxNzA3Ng==", "bodyText": "It's the difference between the user seeing \"Error something didn't work...\", which might make them think it's our problem, vs \"Can't repair caches because the transaction log bloom cacher isn't enabled. Try enabling it with insert option name here\"", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456717076", "createdAt": "2020-07-17T23:45:10Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found, \" + bn)));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries\n+            .getTransactionLogBloomCacher()\n+            .orElseThrow(\n+                () -> new InternalError(\"Error attempting to get TransactionLogBloomCacher\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDU1NQ=="}, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcxODMyMA==", "bodyText": "Basically what I mean by actionable is that it empowers them to understand and fix the issue since the reason they're trying to access this method is because things are going wrong.\nI can easily imagine this happening:\nlogs are innacurate -> they turn log caching off -> they forget to turn it back on -> they try to repair it -> we give them another error that they don't understand\nWe want to change that last step so it's instead:\n\"oh, I didn't know I needed to enable the caching going forward to be able to repair it, I'll go do that now.\"", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r456718320", "createdAt": "2020-07-17T23:51:50Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found, \" + bn)));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries\n+            .getTransactionLogBloomCacher()\n+            .orElseThrow(\n+                () -> new InternalError(\"Error attempting to get TransactionLogBloomCacher\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDU1NQ=="}, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzM0Mjc5OA==", "bodyText": "I will make the update but this is possibly our issue. When something like this goes wrong it is not always just the user entering the wrong command, it can also be a major issue within the software itself.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r457342798", "createdAt": "2020-07-20T12:36:32Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found, \" + bn)));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries\n+            .getTransactionLogBloomCacher()\n+            .orElseThrow(\n+                () -> new InternalError(\"Error attempting to get TransactionLogBloomCacher\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDU1NQ=="}, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4NjAwMg==", "bodyText": "You're right that there's one other case. If we had an empty optional even though the user had the log cacher enabled that means that we have a bug in our configuration code. Even this eventuality can be handled with a sentence like \"If this message persists, create an issue.\"\nI guess what I'm having a hard time understanding is what is the argument for terse and opaque error messages. We don't have word limits on these. As we improve the software and have more people relying on us, we want to create as painless of an experience for them as possible. Like I said before working with this endpoint at all is a result of instability in the log cacher, so things are already going wrong. I'm on linux so I know how it feels to hit error after error in software someone else wrote ;) It's pretty frustrating.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r457486002", "createdAt": "2020-07-20T15:19:19Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found, \" + bn)));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries\n+            .getTransactionLogBloomCacher()\n+            .orElseThrow(\n+                () -> new InternalError(\"Error attempting to get TransactionLogBloomCacher\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDU1NQ=="}, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ5MTAyOQ==", "bodyText": "Agreed, my initial message was really not helpful. I think this is something we can improve as you mention as we go forward.", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r457491029", "createdAt": "2020-07-20T15:24:28Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRepairCache implements JsonRpcMethod {\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRepairCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REPAIR_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<Long> blockNumber = requestContext.getOptionalParameter(0, Long.class);\n+\n+    blockNumber.ifPresent(\n+        bn ->\n+            blockchainQueries\n+                .getBlockchain()\n+                .getBlockByNumber(bn)\n+                .orElseThrow(() -> new IllegalStateException(\"Block not found, \" + bn)));\n+\n+    final TransactionLogBloomCacher transactionLogBloomCacher =\n+        blockchainQueries\n+            .getTransactionLogBloomCacher()\n+            .orElseThrow(\n+                () -> new InternalError(\"Error attempting to get TransactionLogBloomCacher\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMDU1NQ=="}, "originalCommit": {"oid": "0a9c73d8c69750635a0ccbcac69a347e8b4c3949"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDcxNTE1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyMDozM1rOG0Sz3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToyMDozM1rOG0Sz3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ4NzMyNw==", "bodyText": "This is good! It covers the case where we have an error while also addressing the most likely case", "url": "https://github.com/hyperledger/besu/pull/1228#discussion_r457487327", "createdAt": "2020-07-20T15:20:33Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRepairCache.java", "diffHunk": "@@ -51,7 +51,9 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n         blockchainQueries\n             .getTransactionLogBloomCacher()\n             .orElseThrow(\n-                () -> new InternalError(\"Error attempting to get TransactionLogBloomCacher\"));\n+                () ->\n+                    new InternalError(\n+                        \"Error attempting to get TransactionLogBloomCacher. Please ensure that the TransactionLogBloomCacher is enabled.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "462ef6f3358e3be9df7757a796ed6fe5387bad43"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 705, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}