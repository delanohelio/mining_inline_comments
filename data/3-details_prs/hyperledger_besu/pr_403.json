{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NTQxMzcw", "number": 403, "title": "Updates made to send notifications for new fork headers when the chai\u2026", "bodyText": "\u2026n reorgs\n\n\nPR description\nFixed Issue(s)", "createdAt": "2020-02-14T19:32:50Z", "url": "https://github.com/hyperledger/besu/pull/403", "merged": true, "mergeCommit": {"oid": "4d198eb909ec639fb05548a60d47130ec99f8568"}, "closed": true, "closedAt": "2020-03-02T15:49:52Z", "author": {"login": "davemec"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEU6D_AH2gAyMzc1NTQxMzcwOmMzZDViZmIwMjE4MjRiNGVhMDc5YjJlNDU4MmQ2ZmVlYjYwZmJiMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJvKgigH2gAyMzc1NTQxMzcwOjhlZTZhMjY3YWE0ZWY0OTU1ZTMwZmNlNWMyNjg0ZDUzNTEzZDY4MTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c3d5bfb021824b4ea079b2e4582d6feeb60fbb04", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/c3d5bfb021824b4ea079b2e4582d6feeb60fbb04", "committedDate": "2020-02-14T19:43:18Z", "message": "Updates made to send notifications for new fork headers when the chain reorgs\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a66f8934dcea35a72fd730a844fc4e71c44d638", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/3a66f8934dcea35a72fd730a844fc4e71c44d638", "committedDate": "2020-02-14T19:43:18Z", "message": "Fixed traversing of chain.\n\nSigne-off-by: David Mechler <david.mechler@consensys.net>\nSigned-off-by: David Mechler <david.mechler@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9be6afd4bd22cba386c28105b0b348a8bb3e8a00", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/9be6afd4bd22cba386c28105b0b348a8bb3e8a00", "committedDate": "2020-02-14T20:09:41Z", "message": "Merge branch 'master' into PIE-1632"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5fcbf57d34db262c71c257ec40ea65d0b6b4571", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/f5fcbf57d34db262c71c257ec40ea65d0b6b4571", "committedDate": "2020-02-17T16:54:53Z", "message": "Merge branch 'master' into PIE-1632"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5OTQzMTk5", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-359943199", "createdAt": "2020-02-17T19:58:30Z", "commit": {"oid": "f5fcbf57d34db262c71c257ec40ea65d0b6b4571"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo1ODozMFrOFqumbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxOTo1ODozMFrOFqumbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0ODAxNQ==", "bodyText": "Whenever possible, use Optional instead of null.", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r380348015", "createdAt": "2020-02-17T19:58:30Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/chain/BlockAddedEvent.java", "diffHunk": "@@ -73,7 +83,8 @@ public static BlockAddedEvent createForFork(final Block block) {\n         block,\n         Collections.emptyList(),\n         Collections.emptyList(),\n-        Collections.emptyList());\n+        Collections.emptyList(),\n+        null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fcbf57d34db262c71c257ec40ea65d0b6b4571"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5OTQzNzU0", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-359943754", "createdAt": "2020-02-17T20:00:06Z", "commit": {"oid": "f5fcbf57d34db262c71c257ec40ea65d0b6b4571"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDowMDowNlrOFquoIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDowMDowNlrOFquoIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0ODQ1MQ==", "bodyText": "reorgBlock is a bit ambiguous with block above. I suggest renaming the first one to newChainHead and the second to commonAncestorWithOldHead", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r380348451", "createdAt": "2020-02-17T20:00:06Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/chain/BlockAddedEvent.java", "diffHunk": "@@ -55,16 +58,23 @@ public static BlockAddedEvent createForHeadAdvancement(\n         block,\n         block.getBody().getTransactions(),\n         Collections.emptyList(),\n-        logsWithMetadata);\n+        logsWithMetadata,\n+        null);\n   }\n \n   public static BlockAddedEvent createForChainReorg(\n       final Block block,\n       final List<Transaction> addedTransactions,\n       final List<Transaction> removedTransactions,\n-      final List<LogWithMetadata> logsWithMetadata) {\n+      final List<LogWithMetadata> logsWithMetadata,\n+      final Block reorgBlock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5fcbf57d34db262c71c257ec40ea65d0b6b4571"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39098c26d032cb5a58df955c483e33eec3eaba34", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/39098c26d032cb5a58df955c483e33eec3eaba34", "committedDate": "2020-02-20T21:27:09Z", "message": "Added test\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca91f906dd4413483483d83185b3cb49660eadd5", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/ca91f906dd4413483483d83185b3cb49660eadd5", "committedDate": "2020-02-20T21:32:52Z", "message": "Merge branch 'master' into PIE-1632"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4061482e18f930ab191089e600e79881f8127659", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/4061482e18f930ab191089e600e79881f8127659", "committedDate": "2020-02-21T20:43:17Z", "message": "Updates made from PR comments regarding aways having a common ancestor node.\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDgxNzgw", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-363081780", "createdAt": "2020-02-23T09:32:43Z", "commit": {"oid": "4061482e18f930ab191089e600e79881f8127659"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwOTozMjo0M1rOFtPs0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QwOTozMjo0M1rOFtPs0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk4NzQ3Mw==", "bodyText": "we need to add the final keyword whenever possible", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r382987473", "createdAt": "2020-02-23T09:32:43Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -63,76 +73,116 @@\n   @Captor ArgumentCaptor<JsonRpcResult> responseCaptor;\n \n   @Mock private SubscriptionManager subscriptionManager;\n-  @Mock private BlockchainQueries blockchainQueries;\n \n   private final BlockHeaderTestFixture blockHeaderTestFixture = new BlockHeaderTestFixture();\n   private final TransactionTestFixture txTestFixture = new TransactionTestFixture();\n   private final BlockHeader blockHeader = blockHeaderTestFixture.buildHeader();\n   private final BlockResultFactory blockResultFactory = new BlockResultFactory();\n+  private final BlockDataGenerator gen = new BlockDataGenerator();\n+  private final BlockchainStorage blockchainStorage =\n+      new KeyValueStoragePrefixedKeyBlockchainStorage(\n+          new InMemoryKeyValueStorage(), new MainnetBlockHeaderFunctions());\n+  private final Block genesisBlock = gen.genesisBlock();\n+  private final DefaultBlockchain blockchain =\n+      (DefaultBlockchain)\n+          DefaultBlockchain.createMutable(genesisBlock, blockchainStorage, new NoOpMetricsSystem());\n+\n+  @Spy\n+  private BlockchainQueries blockchainQueriesSpy =\n+      Mockito.spy(new BlockchainQueries(blockchain, createInMemoryWorldStateArchive()));\n \n   @Before\n   public void before() {\n     newBlockHeadersSubscriptionService =\n-        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueries);\n+        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueriesSpy);\n   }\n \n   @Test\n   public void shouldSendMessageWhenBlockAddedOnCanonicalChain() {\n     final NewBlockHeadersSubscription subscription = createSubscription(false);\n     mockSubscriptionManagerNotifyMethod(subscription);\n-    final BlockResult expectedNewBlock = expectedBlockWithTransactions(Collections.emptyList());\n \n-    simulateAddingBlockOnCanonicalChain();\n+    final Block testBlock = appendBlockWithParent(blockchain, blockchain.getChainHeadBlock());\n+    simulateAddingBlockOnCanonicalChain(testBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(testBlock.getHash()).orElse(null));\n \n     verify(subscriptionManager)\n         .sendMessage(subscriptionIdCaptor.capture(), responseCaptor.capture());\n     assertThat(subscriptionIdCaptor.getValue()).isEqualTo(subscription.getSubscriptionId());\n-    assertThat(responseCaptor.getValue())\n-        .isEqualToComparingFieldByFieldRecursively(expectedNewBlock);\n+    assertThat(responseCaptor.getValue()).usingRecursiveComparison().isEqualTo(expectedNewBlock);\n   }\n \n   @Test\n   public void shouldNotSendMessageWhenBlockAddedIsNotOnCanonicalChain() {\n     simulateAddingBlockOnNonCanonicalChain();\n \n-    verifyZeroInteractions(subscriptionManager);\n+    verifyNoMoreInteractions(subscriptionManager);\n+  }\n+\n+  @Test\n+  public void shouldSendMessagesWhenReorgBlockAdded() {\n+    final NewBlockHeadersSubscription subscription = createSubscription(false);\n+    mockSubscriptionManagerNotifyMethod(subscription);\n+\n+    appendBlockWithParent(blockchain, genesisBlock);\n+    final Block forkBlock = appendBlockWithParent(blockchain, genesisBlock);\n+    final Block forkBlock1 = appendBlockWithParent(blockchain, forkBlock);\n+    final Block forkBlock2 = appendBlockWithParent(blockchain, forkBlock1);\n+    simulateAddingReorgBlock(forkBlock2, genesisBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(forkBlock2.getHash()).orElse(null));\n+\n+    verify(subscriptionManager, times(3)).notifySubscribersOnWorkerThread(any(), any(), any());\n+    verify(subscriptionManager, times(3))\n+        .sendMessage(subscriptionIdCaptor.capture(), responseCaptor.capture());\n+    assertThat(subscriptionIdCaptor.getValue()).isEqualTo(subscription.getSubscriptionId());\n+    assertThat(responseCaptor.getValue()).usingRecursiveComparison().isEqualTo(expectedNewBlock);\n   }\n \n   @Test\n   public void shouldReturnTxHashesWhenIncludeTransactionsFalse() {\n     final NewBlockHeadersSubscription subscription = createSubscription(false);\n     mockSubscriptionManagerNotifyMethod(subscription);\n-    final List<Hash> txHashList = transactionsWithHashOnly();\n-    final BlockResult expectedNewBlock = expectedBlockWithTransactions(txHashList);\n+    final List<Transaction> transactions = transactions();\n \n-    simulateAddingBlockOnCanonicalChain();\n+    final Block testBlock =\n+        appendBlockWithParent(blockchain, blockchain.getChainHeadBlock(), transactions);\n+    simulateAddingBlockOnCanonicalChain(testBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(testBlock.getHash()).orElse(null));\n \n     verify(subscriptionManager)\n         .sendMessage(subscriptionIdCaptor.capture(), responseCaptor.capture());\n     assertThat(subscriptionIdCaptor.getValue()).isEqualTo(subscription.getSubscriptionId());\n     final Object actualBlock = responseCaptor.getValue();\n     assertThat(actualBlock).isInstanceOf(BlockResult.class);\n-    assertThat(((BlockResult) actualBlock).getTransactions()).hasSize(txHashList.size());\n-    assertThat(actualBlock).isEqualToComparingFieldByFieldRecursively(expectedNewBlock);\n+    assertThat(((BlockResult) actualBlock).getTransactions()).hasSize(transactions.size());\n+    assertThat(actualBlock).usingRecursiveComparison().isEqualTo(expectedNewBlock);\n \n-    verify(blockchainQueries, times(1)).blockByHashWithTxHashes(any());\n-    verify(blockchainQueries, times(0)).blockByHash(any());\n+    verify(blockchainQueriesSpy, times(2)).blockByHashWithTxHashes(any());\n+    verify(blockchainQueriesSpy, times(0)).blockByHash(any());\n   }\n \n   @Test\n   public void shouldReturnCompleteTxWhenParameterTrue() {\n     final NewBlockHeadersSubscription subscription = createSubscription(true);\n     mockSubscriptionManagerNotifyMethod(subscription);\n-    final List<TransactionWithMetadata> txHashList = transactionsWithMetadata();\n-    final BlockWithMetadata<TransactionWithMetadata, Hash> testBlockWithMetadata =\n-        new BlockWithMetadata<>(\n-            blockHeader, txHashList, Collections.emptyList(), blockHeader.getDifficulty(), 0);\n+    final List<TransactionWithMetadata> transactionsWithMetadata = transactionsWithMetadata();\n+\n+    List<Transaction> transactions =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4061482e18f930ab191089e600e79881f8127659"}, "originalPosition": 180}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c", "committedDate": "2020-02-24T13:42:40Z", "message": "Make variable final per PR comment\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTg2MDA0", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-363586004", "createdAt": "2020-02-24T17:57:57Z", "commit": {"oid": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo1Nzo1N1rOFtqMuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo1Nzo1N1rOFtqMuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyMTYyNw==", "bodyText": "What happens if this cast isn't here?", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383421627", "createdAt": "2020-02-24T17:57:57Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -63,76 +73,116 @@\n   @Captor ArgumentCaptor<JsonRpcResult> responseCaptor;\n \n   @Mock private SubscriptionManager subscriptionManager;\n-  @Mock private BlockchainQueries blockchainQueries;\n \n   private final BlockHeaderTestFixture blockHeaderTestFixture = new BlockHeaderTestFixture();\n   private final TransactionTestFixture txTestFixture = new TransactionTestFixture();\n   private final BlockHeader blockHeader = blockHeaderTestFixture.buildHeader();\n   private final BlockResultFactory blockResultFactory = new BlockResultFactory();\n+  private final BlockDataGenerator gen = new BlockDataGenerator();\n+  private final BlockchainStorage blockchainStorage =\n+      new KeyValueStoragePrefixedKeyBlockchainStorage(\n+          new InMemoryKeyValueStorage(), new MainnetBlockHeaderFunctions());\n+  private final Block genesisBlock = gen.genesisBlock();\n+  private final DefaultBlockchain blockchain =\n+      (DefaultBlockchain)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTg5MzEx", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-363589311", "createdAt": "2020-02-24T18:03:18Z", "commit": {"oid": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowMzoxOFrOFtqXdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODowMzoxOFrOFtqXdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNDM3NA==", "bodyText": "Why did you choose VerifyNoMoreInteractions over VerifyNoInteractions?", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383424374", "createdAt": "2020-02-24T18:03:18Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -63,76 +73,116 @@\n   @Captor ArgumentCaptor<JsonRpcResult> responseCaptor;\n \n   @Mock private SubscriptionManager subscriptionManager;\n-  @Mock private BlockchainQueries blockchainQueries;\n \n   private final BlockHeaderTestFixture blockHeaderTestFixture = new BlockHeaderTestFixture();\n   private final TransactionTestFixture txTestFixture = new TransactionTestFixture();\n   private final BlockHeader blockHeader = blockHeaderTestFixture.buildHeader();\n   private final BlockResultFactory blockResultFactory = new BlockResultFactory();\n+  private final BlockDataGenerator gen = new BlockDataGenerator();\n+  private final BlockchainStorage blockchainStorage =\n+      new KeyValueStoragePrefixedKeyBlockchainStorage(\n+          new InMemoryKeyValueStorage(), new MainnetBlockHeaderFunctions());\n+  private final Block genesisBlock = gen.genesisBlock();\n+  private final DefaultBlockchain blockchain =\n+      (DefaultBlockchain)\n+          DefaultBlockchain.createMutable(genesisBlock, blockchainStorage, new NoOpMetricsSystem());\n+\n+  @Spy\n+  private BlockchainQueries blockchainQueriesSpy =\n+      Mockito.spy(new BlockchainQueries(blockchain, createInMemoryWorldStateArchive()));\n \n   @Before\n   public void before() {\n     newBlockHeadersSubscriptionService =\n-        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueries);\n+        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueriesSpy);\n   }\n \n   @Test\n   public void shouldSendMessageWhenBlockAddedOnCanonicalChain() {\n     final NewBlockHeadersSubscription subscription = createSubscription(false);\n     mockSubscriptionManagerNotifyMethod(subscription);\n-    final BlockResult expectedNewBlock = expectedBlockWithTransactions(Collections.emptyList());\n \n-    simulateAddingBlockOnCanonicalChain();\n+    final Block testBlock = appendBlockWithParent(blockchain, blockchain.getChainHeadBlock());\n+    simulateAddingBlockOnCanonicalChain(testBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(testBlock.getHash()).orElse(null));\n \n     verify(subscriptionManager)\n         .sendMessage(subscriptionIdCaptor.capture(), responseCaptor.capture());\n     assertThat(subscriptionIdCaptor.getValue()).isEqualTo(subscription.getSubscriptionId());\n-    assertThat(responseCaptor.getValue())\n-        .isEqualToComparingFieldByFieldRecursively(expectedNewBlock);\n+    assertThat(responseCaptor.getValue()).usingRecursiveComparison().isEqualTo(expectedNewBlock);\n   }\n \n   @Test\n   public void shouldNotSendMessageWhenBlockAddedIsNotOnCanonicalChain() {\n     simulateAddingBlockOnNonCanonicalChain();\n \n-    verifyZeroInteractions(subscriptionManager);\n+    verifyNoMoreInteractions(subscriptionManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTkzNzM2", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-363593736", "createdAt": "2020-02-24T18:10:45Z", "commit": {"oid": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxMDo0NVrOFtqlWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxMDo0NVrOFtqlWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNzkyOQ==", "bodyText": "Might as well streamline this using java streams while we're here.", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383427929", "createdAt": "2020-02-24T18:10:45Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -221,15 +273,35 @@ private void simulateAddingBlockOnNonCanonicalChain() {\n     return Lists.newArrayList(t1, t2);\n   }\n \n-  private List<Hash> transactionsWithHashOnly() {\n-    final List<Hash> hashes = new ArrayList<>();\n+  private List<Transaction> transactions() {\n+    final List<Transaction> transactions = new ArrayList<>();\n     for (final TransactionWithMetadata transactionWithMetadata : transactionsWithMetadata()) {\n-      hashes.add(transactionWithMetadata.getTransaction().getHash());\n+      transactions.add(transactionWithMetadata.getTransaction());\n     }\n-    return hashes;\n+    return transactions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c"}, "originalPosition": 300}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNTk4OTg5", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-363598989", "createdAt": "2020-02-24T18:19:35Z", "commit": {"oid": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxOTozNVrOFtq1rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoxOTozNVrOFtq1rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzMjEwOA==", "bodyText": "I see this is just copied over from the existing code but I think we can get rid of the times(1)", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383432108", "createdAt": "2020-02-24T18:19:35Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -194,21 +236,31 @@ private void mockSubscriptionManagerNotifyMethod(\n         .notifySubscribersOnWorkerThread(any(), any(), any());\n   }\n \n-  private void simulateAddingBlockOnCanonicalChain() {\n-    final BlockBody blockBody = new BlockBody(Collections.emptyList(), Collections.emptyList());\n-    final Block testBlock = new Block(blockHeader, blockBody);\n+  private void simulateAddingBlockOnCanonicalChain(final Block block) {\n     newBlockHeadersSubscriptionService.onBlockAdded(\n-        BlockAddedEvent.createForHeadAdvancement(testBlock, Collections.emptyList()),\n-        blockchainQueries.getBlockchain());\n-    verify(blockchainQueries, times(1)).getBlockchain();\n+        BlockAddedEvent.createForHeadAdvancement(block, Collections.emptyList()),\n+        blockchainQueriesSpy.getBlockchain());\n+    verify(blockchainQueriesSpy, times(1)).getBlockchain();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfdca5b87bbeca1d71a9a9a359f7c4da6bde6c9c"}, "originalPosition": 261}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b511b941be0b56330100a7356063377daf7c361a", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/b511b941be0b56330100a7356063377daf7c361a", "committedDate": "2020-02-24T20:36:35Z", "message": "Cleanup from PR comments\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bfd94a85da02d10db166cda0ce169bc3ed78c05", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/8bfd94a85da02d10db166cda0ce169bc3ed78c05", "committedDate": "2020-02-24T20:37:50Z", "message": "Merge branch 'master' into PIE-1632"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjIzMDYz", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-364223063", "createdAt": "2020-02-25T15:16:59Z", "commit": {"oid": "8bfd94a85da02d10db166cda0ce169bc3ed78c05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNToxNzowMFrOFuKE-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNToxNzowMFrOFuKE-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MzkzMQ==", "bodyText": "Does this make sure the reorg blocks are sent in the right order?", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r383943931", "createdAt": "2020-02-25T15:17:00Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -63,76 +73,115 @@\n   @Captor ArgumentCaptor<JsonRpcResult> responseCaptor;\n \n   @Mock private SubscriptionManager subscriptionManager;\n-  @Mock private BlockchainQueries blockchainQueries;\n \n   private final BlockHeaderTestFixture blockHeaderTestFixture = new BlockHeaderTestFixture();\n   private final TransactionTestFixture txTestFixture = new TransactionTestFixture();\n   private final BlockHeader blockHeader = blockHeaderTestFixture.buildHeader();\n   private final BlockResultFactory blockResultFactory = new BlockResultFactory();\n+  private final BlockDataGenerator gen = new BlockDataGenerator();\n+  private final BlockchainStorage blockchainStorage =\n+      new KeyValueStoragePrefixedKeyBlockchainStorage(\n+          new InMemoryKeyValueStorage(), new MainnetBlockHeaderFunctions());\n+  private final Block genesisBlock = gen.genesisBlock();\n+  private final MutableBlockchain blockchain =\n+      DefaultBlockchain.createMutable(genesisBlock, blockchainStorage, new NoOpMetricsSystem());\n+\n+  @Spy\n+  private BlockchainQueries blockchainQueriesSpy =\n+      Mockito.spy(new BlockchainQueries(blockchain, createInMemoryWorldStateArchive()));\n \n   @Before\n   public void before() {\n     newBlockHeadersSubscriptionService =\n-        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueries);\n+        new NewBlockHeadersSubscriptionService(subscriptionManager, blockchainQueriesSpy);\n   }\n \n   @Test\n   public void shouldSendMessageWhenBlockAddedOnCanonicalChain() {\n     final NewBlockHeadersSubscription subscription = createSubscription(false);\n     mockSubscriptionManagerNotifyMethod(subscription);\n-    final BlockResult expectedNewBlock = expectedBlockWithTransactions(Collections.emptyList());\n \n-    simulateAddingBlockOnCanonicalChain();\n+    final Block testBlock = appendBlockWithParent(blockchain, blockchain.getChainHeadBlock());\n+    simulateAddingBlockOnCanonicalChain(testBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(testBlock.getHash()).orElse(null));\n \n     verify(subscriptionManager)\n         .sendMessage(subscriptionIdCaptor.capture(), responseCaptor.capture());\n     assertThat(subscriptionIdCaptor.getValue()).isEqualTo(subscription.getSubscriptionId());\n-    assertThat(responseCaptor.getValue())\n-        .isEqualToComparingFieldByFieldRecursively(expectedNewBlock);\n+    assertThat(responseCaptor.getValue()).usingRecursiveComparison().isEqualTo(expectedNewBlock);\n   }\n \n   @Test\n   public void shouldNotSendMessageWhenBlockAddedIsNotOnCanonicalChain() {\n     simulateAddingBlockOnNonCanonicalChain();\n \n-    verifyZeroInteractions(subscriptionManager);\n+    verifyNoInteractions(subscriptionManager);\n+  }\n+\n+  @Test\n+  public void shouldSendMessagesWhenReorgBlockAdded() {\n+    final NewBlockHeadersSubscription subscription = createSubscription(false);\n+    mockSubscriptionManagerNotifyMethod(subscription);\n+\n+    appendBlockWithParent(blockchain, genesisBlock);\n+    final Block forkBlock = appendBlockWithParent(blockchain, genesisBlock);\n+    final Block forkBlock1 = appendBlockWithParent(blockchain, forkBlock);\n+    final Block forkBlock2 = appendBlockWithParent(blockchain, forkBlock1);\n+    simulateAddingReorgBlock(forkBlock2, genesisBlock);\n+    final BlockResult expectedNewBlock =\n+        blockResultFactory.transactionHash(\n+            blockchainQueriesSpy.blockByHashWithTxHashes(forkBlock2.getHash()).orElse(null));\n+\n+    verify(subscriptionManager, times(3)).notifySubscribersOnWorkerThread(any(), any(), any());\n+    verify(subscriptionManager, times(3))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bfd94a85da02d10db166cda0ce169bc3ed78c05"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2fbb0e10da1fa1b09cf50a30e79ce902a2d92c1", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/e2fbb0e10da1fa1b09cf50a30e79ce902a2d92c1", "committedDate": "2020-02-25T16:21:40Z", "message": "Merge branch 'master' into PIE-1632"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0db1a81ac6eef34ac631107676c5d1695d888266", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/0db1a81ac6eef34ac631107676c5d1695d888266", "committedDate": "2020-02-25T20:56:16Z", "message": "Update test to ensure correct order\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc4e4b049a9f047396e3086d7a39291c3f35d0ac", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/bc4e4b049a9f047396e3086d7a39291c3f35d0ac", "committedDate": "2020-02-26T20:04:55Z", "message": "Merge branch 'master' into PIE-1632"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjE0Mjc4", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-365214278", "createdAt": "2020-02-26T20:22:05Z", "commit": {"oid": "bc4e4b049a9f047396e3086d7a39291c3f35d0ac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoyMjowNVrOFu62VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoyMjowNVrOFu62VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0Mjk5Nw==", "bodyText": "Now that we use block data generator, can we get rid of all the old fixtures and use the generator instead?", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r384742997", "createdAt": "2020-02-26T20:22:05Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -194,21 +244,31 @@ private void mockSubscriptionManagerNotifyMethod(\n         .notifySubscribersOnWorkerThread(any(), any(), any());\n   }\n \n-  private void simulateAddingBlockOnCanonicalChain() {\n-    final BlockBody blockBody = new BlockBody(Collections.emptyList(), Collections.emptyList());\n-    final Block testBlock = new Block(blockHeader, blockBody);\n+  private void simulateAddingBlockOnCanonicalChain(final Block block) {\n     newBlockHeadersSubscriptionService.onBlockAdded(\n-        BlockAddedEvent.createForHeadAdvancement(testBlock, Collections.emptyList()),\n-        blockchainQueries.getBlockchain());\n-    verify(blockchainQueries, times(1)).getBlockchain();\n+        BlockAddedEvent.createForHeadAdvancement(block, Collections.emptyList()),\n+        blockchainQueriesSpy.getBlockchain());\n+    verify(blockchainQueriesSpy, times(1)).getBlockchain();\n   }\n \n   private void simulateAddingBlockOnNonCanonicalChain() {\n     final BlockBody blockBody = new BlockBody(Collections.emptyList(), Collections.emptyList());\n     final Block testBlock = new Block(blockHeader, blockBody);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc4e4b049a9f047396e3086d7a39291c3f35d0ac"}, "originalPosition": 275}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea8784e5a8919f438929895601bb48d52e32be29", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/ea8784e5a8919f438929895601bb48d52e32be29", "committedDate": "2020-02-27T13:07:32Z", "message": "Remove test fixtures and use BlockDataGenerator\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b6d6bc5181e57ebcbc59661423daab1e2d1e5d3", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/7b6d6bc5181e57ebcbc59661423daab1e2d1e5d3", "committedDate": "2020-02-27T13:07:42Z", "message": "Merge branch 'PIE-1632' of github.com:davemec/besu into PIE-1632"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fce6d316dee59fffd2e4b4acd108956c8dc90b6", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/9fce6d316dee59fffd2e4b4acd108956c8dc90b6", "committedDate": "2020-02-27T13:08:56Z", "message": "Merge branch 'master' into PIE-1632"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzMwMjY0", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-365730264", "createdAt": "2020-02-27T14:34:58Z", "commit": {"oid": "9fce6d316dee59fffd2e4b4acd108956c8dc90b6"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDozNDo1OVrOFvUntQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDozNToxNFrOFvUoUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NTIzNw==", "bodyText": "Now the simulate method forces the call of onBlockAdded but since you have the blockchain, these should automatically be called when you subscribe to NewHeaders.\nBasically, the tests could look like:\n\nCreate blockchain\nSubscribe to BlockHeaders\nAdd blocks\nCheck what queries were made\n\nAll without ever calling onBlockAdded manually.", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r385165237", "createdAt": "2020-02-27T14:34:59Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -251,11 +232,9 @@ private void simulateAddingBlockOnCanonicalChain(final Block block) {\n     verify(blockchainQueriesSpy, times(1)).getBlockchain();\n   }\n \n-  private void simulateAddingBlockOnNonCanonicalChain() {\n-    final BlockBody blockBody = new BlockBody(Collections.emptyList(), Collections.emptyList());\n-    final Block testBlock = new Block(blockHeader, blockBody);\n+  private void simulateAddingBlockOnNonCanonicalChain(final Block block) {\n     newBlockHeadersSubscriptionService.onBlockAdded(\n-        BlockAddedEvent.createForFork(testBlock), blockchainQueriesSpy.getBlockchain());\n+        BlockAddedEvent.createForFork(block), blockchainQueriesSpy.getBlockchain());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fce6d316dee59fffd2e4b4acd108956c8dc90b6"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE2NTM5NA==", "bodyText": "Now the simulate method forces the call of onBlockAdded but since you have the blockchain, these should automatically be called when you subscribe to NewHeaders.\nBasically, the tests could look like:\n\nCreate blockchain\nSubscribe to BlockHeaders\nAdd blocks\nCheck what queries were made\n\nAll without ever calling onBlockAdded manually.", "url": "https://github.com/hyperledger/besu/pull/403#discussion_r385165394", "createdAt": "2020-02-27T14:35:14Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/websocket/subscription/blockheaders/NewBlockHeadersSubscriptionServiceTest.java", "diffHunk": "@@ -251,11 +232,9 @@ private void simulateAddingBlockOnCanonicalChain(final Block block) {\n     verify(blockchainQueriesSpy, times(1)).getBlockchain();\n   }\n \n-  private void simulateAddingBlockOnNonCanonicalChain() {\n-    final BlockBody blockBody = new BlockBody(Collections.emptyList(), Collections.emptyList());\n-    final Block testBlock = new Block(blockHeader, blockBody);\n+  private void simulateAddingBlockOnNonCanonicalChain(final Block block) {\n     newBlockHeadersSubscriptionService.onBlockAdded(\n-        BlockAddedEvent.createForFork(testBlock), blockchainQueriesSpy.getBlockchain());\n+        BlockAddedEvent.createForFork(block), blockchainQueriesSpy.getBlockchain());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fce6d316dee59fffd2e4b4acd108956c8dc90b6"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dfc47015119c4ee11edf8f3c4986ecbd1472ea7", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/7dfc47015119c4ee11edf8f3c4986ecbd1472ea7", "committedDate": "2020-02-28T20:17:32Z", "message": "Update tests\n\nSigned-off-by: David Mechler <david.mechler@consensys.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc24ead0c1250db72846621efbd7fcac4cb8b822", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/bc24ead0c1250db72846621efbd7fcac4cb8b822", "committedDate": "2020-02-28T20:17:37Z", "message": "Merge branch 'PIE-1632' of github.com:davemec/besu into PIE-1632"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25f06ba87a1a4e1df8c4f36b46f29c9076487dcb", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/25f06ba87a1a4e1df8c4f36b46f29c9076487dcb", "committedDate": "2020-02-28T20:18:58Z", "message": "Merge branch 'master' into PIE-1632"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MjQwMjMz", "url": "https://github.com/hyperledger/besu/pull/403#pullrequestreview-367240233", "createdAt": "2020-03-02T14:29:53Z", "commit": {"oid": "25f06ba87a1a4e1df8c4f36b46f29c9076487dcb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ee6a267aa4ef4955e30fce5c2684d53513d6810", "author": {"user": {"login": "davemec", "name": "David Mechler"}}, "url": "https://github.com/hyperledger/besu/commit/8ee6a267aa4ef4955e30fce5c2684d53513d6810", "committedDate": "2020-03-02T15:08:25Z", "message": "Merge branch 'master' into PIE-1632"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1775, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}