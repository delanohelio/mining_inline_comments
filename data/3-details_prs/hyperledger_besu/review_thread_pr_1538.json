{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzI5ODUy", "number": 1538, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoxMjo1OFrOE2Oa5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDozMDoxMFrOE2Osqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk0ODIzOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockNumberTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoxMjo1OFrOHu8LEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoxMjo1OFrOHu8LEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4MjQxOQ==", "bodyText": "Optional Style: Most of our mocking uses static import of .when() and (when not using the junit annotations) .mock().  Similarly for most of the Assertsions.* series to.  This tends to make a more \"readable\" test at the expense of making it clear this is a Mockito method.", "url": "https://github.com/hyperledger/besu/pull/1538#discussion_r518982419", "createdAt": "2020-11-06T20:12:58Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockNumberTest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError.WORLD_STATE_UNAVAILABLE;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.exception.InvalidJsonRpcParameters;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionWithMetadata;\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.BlockHeaderTestFixture;\n+import org.hyperledger.besu.ethereum.core.Difficulty;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+import org.hyperledger.besu.ethereum.worldstate.WorldStateArchive;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+\n+import org.assertj.core.api.Assertions;\n+import org.assertj.core.util.Arrays;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class EthGetMinerDataByBlockNumberTest {\n+  @Mock private BlockchainQueries blockchainQueries;\n+  @Mock private ProtocolSchedule protocolSchedule;\n+  @Mock private WorldStateArchive worldStateArchive;\n+  @Mock private ProtocolSpec protocolSpec;\n+  @Mock private Blockchain blockChain;\n+  private EthGetMinerDataByBlockNumber method;\n+  private final String ETH_METHOD = \"eth_getMinerDataByBlockNumber\";\n+  private final BlockHeaderTestFixture blockHeaderTestFixture = new BlockHeaderTestFixture();\n+\n+  @Before\n+  public void before() {\n+    this.method = new EthGetMinerDataByBlockNumber(blockchainQueries, protocolSchedule);\n+  }\n+\n+  @Test\n+  public void shouldReturnExpectedMethodNameTest() {\n+    assertThat(method.getName()).isEqualTo(ETH_METHOD);\n+  }\n+\n+  @Test\n+  public void successTest() {\n+    final BlockHeader header = blockHeaderTestFixture.buildHeader();\n+    final BlockWithMetadata<TransactionWithMetadata, Hash> blockWithMetadata =\n+        new BlockWithMetadata<>(\n+            header, Collections.emptyList(), Collections.emptyList(), Difficulty.of(100L), 5);\n+\n+    Mockito.when(blockchainQueries.blockByNumber(Mockito.anyLong()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de96919b44f7ddb9098771a6ea8fd1d5c69f4bf1"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk1OTMyOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockHash.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoxNjo1M1rOHu8RrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTozODo1MlrOHu-WwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDEwOA==", "bodyText": "I'm surprised the google formatter didn't ask you to star indent this block.", "url": "https://github.com/hyperledger/besu/pull/1538#discussion_r518984108", "createdAt": "2020-11-06T20:16:53Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockHash.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.MinerDataResult;\n+import org.hyperledger.besu.ethereum.api.query.BlockWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionReceiptWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.TransactionWithMetadata;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.base.Suppliers;\n+import org.apache.tuweni.units.bigints.BaseUInt256Value;\n+\n+public class EthGetMinerDataByBlockHash implements JsonRpcMethod {\n+  private final Supplier<BlockchainQueries> blockchain;\n+  private final ProtocolSchedule protocolSchedule;\n+\n+  public EthGetMinerDataByBlockHash(\n+      final BlockchainQueries blockchain, final ProtocolSchedule protocolSchedule) {\n+    this(Suppliers.ofInstance(blockchain), protocolSchedule);\n+  }\n+\n+  public EthGetMinerDataByBlockHash(\n+      final Supplier<BlockchainQueries> blockchain, final ProtocolSchedule protocolSchedule) {\n+    this.blockchain = blockchain;\n+    this.protocolSchedule = protocolSchedule;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ETH_GET_MINER_DATA_BY_BLOCK_HASH.getMethodName();\n+  }\n+\n+  /*\n+  Getting static block reward", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de96919b44f7ddb9098771a6ea8fd1d5c69f4bf1"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxODE3Ng==", "bodyText": "Comment removed as this is no longer relevant.", "url": "https://github.com/hyperledger/besu/pull/1538#discussion_r519018176", "createdAt": "2020-11-06T21:38:52Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockHash.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.MinerDataResult;\n+import org.hyperledger.besu.ethereum.api.query.BlockWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionReceiptWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.TransactionWithMetadata;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.base.Suppliers;\n+import org.apache.tuweni.units.bigints.BaseUInt256Value;\n+\n+public class EthGetMinerDataByBlockHash implements JsonRpcMethod {\n+  private final Supplier<BlockchainQueries> blockchain;\n+  private final ProtocolSchedule protocolSchedule;\n+\n+  public EthGetMinerDataByBlockHash(\n+      final BlockchainQueries blockchain, final ProtocolSchedule protocolSchedule) {\n+    this(Suppliers.ofInstance(blockchain), protocolSchedule);\n+  }\n+\n+  public EthGetMinerDataByBlockHash(\n+      final Supplier<BlockchainQueries> blockchain, final ProtocolSchedule protocolSchedule) {\n+    this.blockchain = blockchain;\n+    this.protocolSchedule = protocolSchedule;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ETH_GET_MINER_DATA_BY_BLOCK_HASH.getMethodName();\n+  }\n+\n+  /*\n+  Getting static block reward", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NDEwOA=="}, "originalCommit": {"oid": "de96919b44f7ddb9098771a6ea8fd1d5c69f4bf1"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk2NTczOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockHash.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoxOTozNFrOHu8VwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTozODowNVrOHu-VqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NTE1Mg==", "bodyText": "Even though this is a slack quote it should be in a documentary tone.  I'd also move it around 108-111 where the uncle reward calculation is calculated as it is a code relevant comment not a quasi-javadoc comment.", "url": "https://github.com/hyperledger/besu/pull/1538#discussion_r518985152", "createdAt": "2020-11-06T20:19:34Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockHash.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.MinerDataResult;\n+import org.hyperledger.besu.ethereum.api.query.BlockWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionReceiptWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.TransactionWithMetadata;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.base.Suppliers;\n+import org.apache.tuweni.units.bigints.BaseUInt256Value;\n+\n+public class EthGetMinerDataByBlockHash implements JsonRpcMethod {\n+  private final Supplier<BlockchainQueries> blockchain;\n+  private final ProtocolSchedule protocolSchedule;\n+\n+  public EthGetMinerDataByBlockHash(\n+      final BlockchainQueries blockchain, final ProtocolSchedule protocolSchedule) {\n+    this(Suppliers.ofInstance(blockchain), protocolSchedule);\n+  }\n+\n+  public EthGetMinerDataByBlockHash(\n+      final Supplier<BlockchainQueries> blockchain, final ProtocolSchedule protocolSchedule) {\n+    this.blockchain = blockchain;\n+    this.protocolSchedule = protocolSchedule;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ETH_GET_MINER_DATA_BY_BLOCK_HASH.getMethodName();\n+  }\n+\n+  /*\n+  Getting static block reward\n+  pass in the block height (as a long) get the block reward (as wei)\n+  each block spec has it.  but it\u2019s only meaningful w/in 6 blocks of the fork.\n+\n+  Didn\u2019t happen at the two places we reduced block reward on mainnet.  I say leave a comment but write no code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de96919b44f7ddb9098771a6ea8fd1d5c69f4bf1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNzg5Nw==", "bodyText": "Comment removed as this is no longer relevant.", "url": "https://github.com/hyperledger/besu/pull/1538#discussion_r519017897", "createdAt": "2020-11-06T21:38:05Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockHash.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.MinerDataResult;\n+import org.hyperledger.besu.ethereum.api.query.BlockWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionReceiptWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.TransactionWithMetadata;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.base.Suppliers;\n+import org.apache.tuweni.units.bigints.BaseUInt256Value;\n+\n+public class EthGetMinerDataByBlockHash implements JsonRpcMethod {\n+  private final Supplier<BlockchainQueries> blockchain;\n+  private final ProtocolSchedule protocolSchedule;\n+\n+  public EthGetMinerDataByBlockHash(\n+      final BlockchainQueries blockchain, final ProtocolSchedule protocolSchedule) {\n+    this(Suppliers.ofInstance(blockchain), protocolSchedule);\n+  }\n+\n+  public EthGetMinerDataByBlockHash(\n+      final Supplier<BlockchainQueries> blockchain, final ProtocolSchedule protocolSchedule) {\n+    this.blockchain = blockchain;\n+    this.protocolSchedule = protocolSchedule;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ETH_GET_MINER_DATA_BY_BLOCK_HASH.getMethodName();\n+  }\n+\n+  /*\n+  Getting static block reward\n+  pass in the block height (as a long) get the block reward (as wei)\n+  each block spec has it.  but it\u2019s only meaningful w/in 6 blocks of the fork.\n+\n+  Didn\u2019t happen at the two places we reduced block reward on mainnet.  I say leave a comment but write no code.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NTE1Mg=="}, "originalCommit": {"oid": "de96919b44f7ddb9098771a6ea8fd1d5c69f4bf1"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk3NTI5OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockNumber.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyMzoxN1rOHu8buA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTozNToyMlrOHu-Rlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NjY4MA==", "bodyText": "This looks duplicated from what is in EthGetMinerDataByBlockHash.  This will burn us one day if we don't call a shared method.  I'd recommend an AbstractMinerDataCall  super class where this method is present and the two subclasses marshal the block by either hash or number.\nIf there are differences between the two then we need code comments pointing out the differences as the subtlety will be missed when we come back in the future,", "url": "https://github.com/hyperledger/besu/pull/1538#discussion_r518986680", "createdAt": "2020-11-06T20:23:17Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockNumber.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.parameters.BlockParameter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.MinerDataResult;\n+import org.hyperledger.besu.ethereum.api.query.BlockWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionReceiptWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.TransactionWithMetadata;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.tuweni.units.bigints.BaseUInt256Value;\n+\n+public class EthGetMinerDataByBlockNumber extends AbstractBlockParameterMethod {\n+  private final ProtocolSchedule protocolSchedule;\n+\n+  public EthGetMinerDataByBlockNumber(\n+      final BlockchainQueries blockchain, final ProtocolSchedule protocolSchedule) {\n+    super(blockchain);\n+    this.protocolSchedule = protocolSchedule;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ETH_GET_MINER_DATA_BY_BLOCK_NUMBER.getMethodName();\n+  }\n+\n+  @Override\n+  protected BlockParameter blockParameter(final JsonRpcRequestContext request) {\n+    return request.getRequiredParameter(0, BlockParameter.class);\n+  }\n+\n+  @Override\n+  protected Object resultByBlockNumber(\n+      final JsonRpcRequestContext request, final long blockNumber) {\n+    BlockWithMetadata<TransactionWithMetadata, Hash> block =\n+        getBlockchainQueries().blockByNumber(blockNumber).orElse(null);\n+\n+    MinerDataResult minerDataResult = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de96919b44f7ddb9098771a6ea8fd1d5c69f4bf1"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNjg1NQ==", "bodyText": "Added static method in EthGetMinerDataByBlockHash for both classes to call since EthGetMinerDataByBlockNumber has a parent.", "url": "https://github.com/hyperledger/besu/pull/1538#discussion_r519016855", "createdAt": "2020-11-06T21:35:22Z", "author": {"login": "davemec"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthGetMinerDataByBlockNumber.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.parameters.BlockParameter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.MinerDataResult;\n+import org.hyperledger.besu.ethereum.api.query.BlockWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionReceiptWithMetadata;\n+import org.hyperledger.besu.ethereum.api.query.TransactionWithMetadata;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.core.Wei;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSchedule;\n+import org.hyperledger.besu.ethereum.mainnet.ProtocolSpec;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.tuweni.units.bigints.BaseUInt256Value;\n+\n+public class EthGetMinerDataByBlockNumber extends AbstractBlockParameterMethod {\n+  private final ProtocolSchedule protocolSchedule;\n+\n+  public EthGetMinerDataByBlockNumber(\n+      final BlockchainQueries blockchain, final ProtocolSchedule protocolSchedule) {\n+    super(blockchain);\n+    this.protocolSchedule = protocolSchedule;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ETH_GET_MINER_DATA_BY_BLOCK_NUMBER.getMethodName();\n+  }\n+\n+  @Override\n+  protected BlockParameter blockParameter(final JsonRpcRequestContext request) {\n+    return request.getRequiredParameter(0, BlockParameter.class);\n+  }\n+\n+  @Override\n+  protected Object resultByBlockNumber(\n+      final JsonRpcRequestContext request, final long blockNumber) {\n+    BlockWithMetadata<TransactionWithMetadata, Hash> block =\n+        getBlockchainQueries().blockByNumber(blockNumber).orElse(null);\n+\n+    MinerDataResult minerDataResult = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NjY4MA=="}, "originalCommit": {"oid": "de96919b44f7ddb9098771a6ea8fd1d5c69f4bf1"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk3OTQ0OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/TransactionReceipt.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyNDo1NFrOHu8ePQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDoyNDo1NFrOHu8ePQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4NzMyNQ==", "bodyText": "I had a comment written out about using out.writeNull if not present but when I looked at RLPOutput the impl is just to write empty bytes.  Might be worth a comment pointing out that writing Bytes.EMPTY is the same as calling RLPOutput.writeNull", "url": "https://github.com/hyperledger/besu/pull/1538#discussion_r518987325", "createdAt": "2020-11-06T20:24:54Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/TransactionReceipt.java", "diffHunk": "@@ -154,8 +165,9 @@ private void writeTo(final RLPOutput out, final boolean withRevertReason) {\n     out.writeLongScalar(cumulativeGasUsed);\n     out.writeBytes(bloomFilter);\n     out.writeList(logs, Log::writeTo);\n-    if (withRevertReason && revertReason.isPresent()) {\n-      out.writeBytes(revertReason.get());\n+    if (withMetadata) {\n+      out.writeBytes(revertReason.orElse(Bytes.EMPTY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de96919b44f7ddb9098771a6ea8fd1d5c69f4bf1"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mjk5MzcxOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/TransactionReceipt.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMDozMDoxMFrOHu8m-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQyMTozMToyMVrOHu-K6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTU2MA==", "bodyText": "What about when we do a migration?  What if we have an old DB with revert reason but not miner data and start extracting it?  gasRemaining may not always be there.\nI would wrap everything read after the metadataAllowed check in if (!input.isEndOfCurrentList()) { ... } individually as a safety measure.  So two times in this case.", "url": "https://github.com/hyperledger/besu/pull/1538#discussion_r518989560", "createdAt": "2020-11-06T20:30:10Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/TransactionReceipt.java", "diffHunk": "@@ -191,23 +202,27 @@ public static TransactionReceipt readFrom(\n       final LogsBloomFilter bloomFilter = LogsBloomFilter.readFrom(input);\n       final List<Log> logs = input.readList(Log::readFrom);\n       final Optional<Bytes> revertReason;\n+      long gasRemaining = -1L;\n       if (input.isEndOfCurrentList()) {\n         revertReason = Optional.empty();\n       } else {\n-        if (!revertReasonAllowed) {\n+        if (!metadataAllowed) {\n           throw new RLPException(\"Unexpected value at end of TransactionReceipt\");\n         }\n         revertReason = Optional.of(input.readBytes());\n+        gasRemaining = input.readLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de96919b44f7ddb9098771a6ea8fd1d5c69f4bf1"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAxNTE0Ng==", "bodyText": "Will wrap the gasRemaining read but the block starts with the check so the revertReason read is safe.", "url": "https://github.com/hyperledger/besu/pull/1538#discussion_r519015146", "createdAt": "2020-11-06T21:31:21Z", "author": {"login": "davemec"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/TransactionReceipt.java", "diffHunk": "@@ -191,23 +202,27 @@ public static TransactionReceipt readFrom(\n       final LogsBloomFilter bloomFilter = LogsBloomFilter.readFrom(input);\n       final List<Log> logs = input.readList(Log::readFrom);\n       final Optional<Bytes> revertReason;\n+      long gasRemaining = -1L;\n       if (input.isEndOfCurrentList()) {\n         revertReason = Optional.empty();\n       } else {\n-        if (!revertReasonAllowed) {\n+        if (!metadataAllowed) {\n           throw new RLPException(\"Unexpected value at end of TransactionReceipt\");\n         }\n         revertReason = Optional.of(input.readBytes());\n+        gasRemaining = input.readLong();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTU2MA=="}, "originalCommit": {"oid": "de96919b44f7ddb9098771a6ea8fd1d5c69f4bf1"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1321, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}