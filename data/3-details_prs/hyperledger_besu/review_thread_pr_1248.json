{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODM0NjA1", "number": 1248, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDozMDo1NVrOERxlvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDozNjowM1rOERxrFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDczNzI3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/filter/FilterManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDozMDo1NVrOG2qnaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDozMDo1NVrOG2qnaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3NDUwNA==", "bodyText": "It's optional but I wonder if reducing this line like that would not be interesting.\nfilter(\n     // Only keep filters where the \"to\" block could include the block in the event\n     filter -> filter.getToBlock().getNumber().filter(number ->\n              number>= event.getBlock().getHeader().getNumber()\n     ).isPresent())\n.forEach(...", "url": "https://github.com/hyperledger/besu/pull/1248#discussion_r459974504", "createdAt": "2020-07-24T10:30:55Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/filter/FilterManager.java", "diffHunk": "@@ -168,9 +167,9 @@ public void recordBlockEvent(final BlockAddedEvent event) {\n         .filter(\n             // Only keep filters where the \"to\" block could include the block in the event\n             filter -> {\n-              final OptionalLong maybeToBlockNumber = filter.getToBlock().getNumber();\n+              final Optional<Long> maybeToBlockNumber = filter.getToBlock().getNumber();\n               return maybeToBlockNumber.isEmpty()\n-                  || maybeToBlockNumber.getAsLong() >= event.getBlock().getHeader().getNumber();\n+                  || maybeToBlockNumber.get() >= event.getBlock().getHeader().getNumber();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d28e31ce0b454997c3a35ff6a2753b5752fa466"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDc1MDk0OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRemoveCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDozNjowM1rOG2qvug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDozNjowM1rOG2qvug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk3NjYzNA==", "bodyText": "it seems to me that you can use that BlockHeader.GENESIS_BLOCK_NUMBER here", "url": "https://github.com/hyperledger/besu/pull/1248#discussion_r459976634", "createdAt": "2020-07-24T10:36:03Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/AdminLogsRemoveCache.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.parameters.BlockParameter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.TransactionLogBloomCacher;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+public class AdminLogsRemoveCache implements JsonRpcMethod {\n+  private final BlockchainQueries blockchainQueries;\n+\n+  public AdminLogsRemoveCache(final BlockchainQueries blockchainQueries) {\n+    this.blockchainQueries = blockchainQueries;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.ADMIN_LOGS_REMOVE_CACHE.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final Optional<BlockParameter> startBlockParameter =\n+        requestContext.getOptionalParameter(0, BlockParameter.class);\n+    final Optional<BlockParameter> stopBlockParameter =\n+        requestContext.getOptionalParameter(1, BlockParameter.class);\n+\n+    final long startBlock;\n+    if (startBlockParameter.isEmpty() || startBlockParameter.get().isEarliest()) {\n+      startBlock = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d28e31ce0b454997c3a35ff6a2753b5752fa466"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 726, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}