{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMDQyMzU3", "number": 1236, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODozMToxM1rOEP4OuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1MDozMVrOEQtgOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDg1MzY4OnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/PeerDiscoveryAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODozMToxM1rOGzxaFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQyMzoyNToyOFrOGzzKRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDA1NA==", "bodyText": "perhaps map instead of isPresent ? otherOptional : empty\nActually OptionalInt doesn't have map.  That's why I hate it and use Optional<Integer>", "url": "https://github.com/hyperledger/besu/pull/1236#discussion_r456940054", "createdAt": "2020-07-19T18:31:13Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/PeerDiscoveryAgent.java", "diffHunk": "@@ -182,23 +182,28 @@ protected boolean validatePacketSize(final int packetSize) {\n   }\n \n   protected void handleIncomingPacket(final Endpoint sourceEndpoint, final Packet packet) {\n-    OptionalInt tcpPort = OptionalInt.empty();\n-    if (packet.getPacketData(PingPacketData.class).isPresent()) {\n-      final PingPacketData ping = packet.getPacketData(PingPacketData.class).orElseGet(null);\n-      if (ping != null && ping.getFrom() != null && ping.getFrom().getTcpPort().isPresent()) {\n-        tcpPort = ping.getFrom().getTcpPort();\n-      }\n-    }\n+    final int port = sourceEndpoint.getUdpPort();\n+    final int tcpPort =\n+        packet\n+            .getPacketData(PingPacketData.class)\n+            .flatMap(PingPacketData::getFrom)\n+            .flatMap(\n+                fromEndpoint -> {\n+                  final OptionalInt maybePort = fromEndpoint.getTcpPort();\n+                  return maybePort.isPresent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9c6e46fa05bf907ad197254fde0b35c1904d50"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk2ODc3NQ==", "bodyText": "Totally agree, I already have a separate PR that I'll put up after this that includes the change.", "url": "https://github.com/hyperledger/besu/pull/1236#discussion_r456968775", "createdAt": "2020-07-19T23:25:28Z", "author": {"login": "RatanRSur"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/PeerDiscoveryAgent.java", "diffHunk": "@@ -182,23 +182,28 @@ protected boolean validatePacketSize(final int packetSize) {\n   }\n \n   protected void handleIncomingPacket(final Endpoint sourceEndpoint, final Packet packet) {\n-    OptionalInt tcpPort = OptionalInt.empty();\n-    if (packet.getPacketData(PingPacketData.class).isPresent()) {\n-      final PingPacketData ping = packet.getPacketData(PingPacketData.class).orElseGet(null);\n-      if (ping != null && ping.getFrom() != null && ping.getFrom().getTcpPort().isPresent()) {\n-        tcpPort = ping.getFrom().getTcpPort();\n-      }\n-    }\n+    final int port = sourceEndpoint.getUdpPort();\n+    final int tcpPort =\n+        packet\n+            .getPacketData(PingPacketData.class)\n+            .flatMap(PingPacketData::getFrom)\n+            .flatMap(\n+                fromEndpoint -> {\n+                  final OptionalInt maybePort = fromEndpoint.getTcpPort();\n+                  return maybePort.isPresent()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDA1NA=="}, "originalCommit": {"oid": "be9c6e46fa05bf907ad197254fde0b35c1904d50"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDg1NTE2OnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/PeerDiscoveryAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODozMzoxM1rOGzxazg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODozMzoxM1rOGzxazg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDIzOA==", "bodyText": "rename to udpPort for clarity.", "url": "https://github.com/hyperledger/besu/pull/1236#discussion_r456940238", "createdAt": "2020-07-19T18:33:13Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/PeerDiscoveryAgent.java", "diffHunk": "@@ -182,23 +182,28 @@ protected boolean validatePacketSize(final int packetSize) {\n   }\n \n   protected void handleIncomingPacket(final Endpoint sourceEndpoint, final Packet packet) {\n-    OptionalInt tcpPort = OptionalInt.empty();\n-    if (packet.getPacketData(PingPacketData.class).isPresent()) {\n-      final PingPacketData ping = packet.getPacketData(PingPacketData.class).orElseGet(null);\n-      if (ping != null && ping.getFrom() != null && ping.getFrom().getTcpPort().isPresent()) {\n-        tcpPort = ping.getFrom().getTcpPort();\n-      }\n-    }\n+    final int port = sourceEndpoint.getUdpPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9c6e46fa05bf907ad197254fde0b35c1904d50"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDg1NTg1OnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODozNDoyMlrOGzxbIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODozNDoyMlrOGzxbIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDMyMw==", "bodyText": "Would this comment look better before?  So it formats w/o breaking up the sender.getEndPoint()", "url": "https://github.com/hyperledger/besu/pull/1236#discussion_r456940323", "createdAt": "2020-07-19T18:34:22Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PeerDiscoveryController.java", "diffHunk": "@@ -541,7 +541,12 @@ private void respondToPing(\n     if (packetData.getExpiration() < Instant.now().getEpochSecond()) {\n       return;\n     }\n-    final PongPacketData data = PongPacketData.create(packetData.getFrom(), pingHash);\n+    final PongPacketData data =\n+        PongPacketData.create(\n+            sender\n+                .getEndpoint() /* We don't care about the `from` field of the ping, we pong to the `sender` */,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9c6e46fa05bf907ad197254fde0b35c1904d50"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDg1Njc5OnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PingPacketData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODozNToxNVrOGzxbkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODozNToxNVrOGzxbkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDQzMw==", "bodyText": "Is this correct?  Is it seconds?", "url": "https://github.com/hyperledger/besu/pull/1236#discussion_r456940433", "createdAt": "2020-07-19T18:35:15Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/PingPacketData.java", "diffHunk": "@@ -20,26 +20,28 @@\n import org.hyperledger.besu.ethereum.rlp.RLPInput;\n import org.hyperledger.besu.ethereum.rlp.RLPOutput;\n \n+import java.util.Optional;\n+\n public class PingPacketData implements PacketData {\n \n   /* Fixed value that represents we're using v5 of the P2P discovery protocol. */\n   private static final int VERSION = 5;\n \n-  /* Source. */\n-  private final Endpoint from;\n+  /* Source. If the field is garbage this is empty and we might need to recover it another way. From our bonded peers, for example. */\n+  private final Optional<Endpoint> maybeFrom;\n \n   /* Destination. */\n   private final Endpoint to;\n \n   /* In millis after epoch. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be9c6e46fa05bf907ad197254fde0b35c1904d50"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTU4MjAxOnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/Endpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjo1MDozMVrOG1BAaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyOToxM1rOG1Cdiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NDIwMA==", "bodyText": "cosmetic", "url": "https://github.com/hyperledger/besu/pull/1236#discussion_r458244200", "createdAt": "2020-07-21T16:50:31Z", "author": {"login": "RatanRSur"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/Endpoint.java", "diffHunk": "@@ -38,26 +39,39 @@\n   private final int udpPort;\n   private final OptionalInt tcpPort;\n \n+  private static class IllegalPortException extends IllegalArgumentException {\n+    IllegalPortException(final String message) {\n+      super(message);\n+    }\n+  }\n+\n+  private static void checkPort(final int port, final String portTypeName) {\n+    if (!NetworkUtility.isValidPort(port)) {\n+      throw new IllegalPortException(\n+          String.format(\n+              \"%s port requires a value between 1 and 65535. Got %d.\", portTypeName, port));\n+    }\n+  }\n+\n   public Endpoint(final String host, final int udpPort, final OptionalInt tcpPort) {\n     checkArgument(\n         host != null && InetAddresses.isInetAddress(host), \"host requires a valid IP address\");\n-    checkArgument(\n-        NetworkUtility.isValidPort(udpPort), \"UDP port requires a value between 1 and 65535\");\n-    tcpPort.ifPresent(\n-        p ->\n-            checkArgument(\n-                NetworkUtility.isValidPort(p), \"TCP port requires a value between 1 and 65535\"));\n+    checkPort(udpPort, \"UDP\");\n+    tcpPort.ifPresent(port -> checkPort(port, \"TCP\"));\n \n     this.host = host;\n     this.udpPort = udpPort;\n     this.tcpPort = tcpPort;\n   }\n \n   public static Endpoint fromEnode(final EnodeURL enode) {\n-    checkArgument(\n-        enode.getDiscoveryPort().isPresent(),\n-        \"Attempt to create a discovery endpoint for an enode with discovery disabled.\");\n-    final int discoveryPort = enode.getDiscoveryPort().getAsInt();\n+    final int discoveryPort =\n+        enode\n+            .getDiscoveryPort()\n+            .orElseThrow(\n+                () ->\n+                    new IllegalArgumentException(\n+                        \"Attempt to create a discovery endpoint for an enode with discovery disabled.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0aff700d0e13e4c8e5acb5d5da0a1aa84ac57d1e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2ODA0Mw==", "bodyText": "I think the guard block reads better.", "url": "https://github.com/hyperledger/besu/pull/1236#discussion_r458268043", "createdAt": "2020-07-21T17:29:13Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/Endpoint.java", "diffHunk": "@@ -38,26 +39,39 @@\n   private final int udpPort;\n   private final OptionalInt tcpPort;\n \n+  private static class IllegalPortException extends IllegalArgumentException {\n+    IllegalPortException(final String message) {\n+      super(message);\n+    }\n+  }\n+\n+  private static void checkPort(final int port, final String portTypeName) {\n+    if (!NetworkUtility.isValidPort(port)) {\n+      throw new IllegalPortException(\n+          String.format(\n+              \"%s port requires a value between 1 and 65535. Got %d.\", portTypeName, port));\n+    }\n+  }\n+\n   public Endpoint(final String host, final int udpPort, final OptionalInt tcpPort) {\n     checkArgument(\n         host != null && InetAddresses.isInetAddress(host), \"host requires a valid IP address\");\n-    checkArgument(\n-        NetworkUtility.isValidPort(udpPort), \"UDP port requires a value between 1 and 65535\");\n-    tcpPort.ifPresent(\n-        p ->\n-            checkArgument(\n-                NetworkUtility.isValidPort(p), \"TCP port requires a value between 1 and 65535\"));\n+    checkPort(udpPort, \"UDP\");\n+    tcpPort.ifPresent(port -> checkPort(port, \"TCP\"));\n \n     this.host = host;\n     this.udpPort = udpPort;\n     this.tcpPort = tcpPort;\n   }\n \n   public static Endpoint fromEnode(final EnodeURL enode) {\n-    checkArgument(\n-        enode.getDiscoveryPort().isPresent(),\n-        \"Attempt to create a discovery endpoint for an enode with discovery disabled.\");\n-    final int discoveryPort = enode.getDiscoveryPort().getAsInt();\n+    final int discoveryPort =\n+        enode\n+            .getDiscoveryPort()\n+            .orElseThrow(\n+                () ->\n+                    new IllegalArgumentException(\n+                        \"Attempt to create a discovery endpoint for an enode with discovery disabled.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI0NDIwMA=="}, "originalCommit": {"oid": "0aff700d0e13e4c8e5acb5d5da0a1aa84ac57d1e"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 711, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}