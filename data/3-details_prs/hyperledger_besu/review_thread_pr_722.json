{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNzI5MDUy", "number": 722, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTowMDowNlrODyTBuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTowMjowNVrODyTC6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDY3MTI4OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/headervalidationrules/ProofOfWorkValidationRule.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTowMDowNlrOGGQxyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMDo1OVrOGGgolg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxOTUyOQ==", "bodyText": "If we are to include the basefee shouldn't we require the header have the base fee?  Or does the spec allow it to be absent?  i.e. if we include base fee should an absent base fee be marked as invalid?", "url": "https://github.com/hyperledger/besu/pull/722#discussion_r409219529", "createdAt": "2020-04-16T01:00:06Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/headervalidationrules/ProofOfWorkValidationRule.java", "diffHunk": "@@ -95,6 +106,10 @@ Hash hashHeader(final BlockHeader header) {\n     out.writeLongScalar(header.getGasUsed());\n     out.writeLongScalar(header.getTimestamp());\n     out.writeBytes(header.getExtraData());\n+    if (includeBaseFee && header.getBaseFee().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df457cea4d99ed09586d12c125661f3ff64ca289"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2ODk1MA==", "bodyText": "Yes you are right. The spec does not allow it to be absent. So i will do the change to make it required if the boolean is set to true.", "url": "https://github.com/hyperledger/besu/pull/722#discussion_r409468950", "createdAt": "2020-04-16T11:00:43Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/headervalidationrules/ProofOfWorkValidationRule.java", "diffHunk": "@@ -95,6 +106,10 @@ Hash hashHeader(final BlockHeader header) {\n     out.writeLongScalar(header.getGasUsed());\n     out.writeLongScalar(header.getTimestamp());\n     out.writeBytes(header.getExtraData());\n+    if (includeBaseFee && header.getBaseFee().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxOTUyOQ=="}, "originalCommit": {"oid": "df457cea4d99ed09586d12c125661f3ff64ca289"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3OTMxOA==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/722#discussion_r409479318", "createdAt": "2020-04-16T11:20:59Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/headervalidationrules/ProofOfWorkValidationRule.java", "diffHunk": "@@ -95,6 +106,10 @@ Hash hashHeader(final BlockHeader header) {\n     out.writeLongScalar(header.getGasUsed());\n     out.writeLongScalar(header.getTimestamp());\n     out.writeBytes(header.getExtraData());\n+    if (includeBaseFee && header.getBaseFee().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxOTUyOQ=="}, "originalCommit": {"oid": "df457cea4d99ed09586d12c125661f3ff64ca289"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MDY3NDMyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/core/fees/EIP1559BaseFeeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwMTowMjowNVrOGGQzug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMToyMTowOFrOGGgo4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMDAyNg==", "bodyText": "Does the basefee increase always at an increment or does it scale per the over/under?  I think a test case where we have the same parent fee but 5 gas used (way more, more, same, less, way less) would be good here to show that whatever the case is.", "url": "https://github.com/hyperledger/besu/pull/722#discussion_r409220026", "createdAt": "2020-04-16T01:02:05Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/core/fees/EIP1559BaseFeeTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.core.fees;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.config.experimental.ExperimentalEIPs;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP1559BaseFeeTest {\n+\n+  private static final long FORK_BLOCK = 783L;\n+  private final EIP1559 eip1559 = new EIP1559(FORK_BLOCK);\n+\n+  @Parameters\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          {1000000000, 10000000, 1000000000},\n+          {1000000000, 7000000, 962500000},\n+          {1100000000, 10000000, 1100000000},\n+          {1100000000, 9000000, 1086250000},\n+          {1086250000, 9000000, 1072671875},\n+          {1072671875, 9000000, 1059263476},\n+          {1059263476, 10001000, 1059276716},\n+          {1059276716, 16000000, 1138722469},\n+          {1049238967, 0, 918084097}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df457cea4d99ed09586d12c125661f3ff64ca289"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ2OTI0Mg==", "bodyText": "Ok sounds good", "url": "https://github.com/hyperledger/besu/pull/722#discussion_r409469242", "createdAt": "2020-04-16T11:01:19Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/core/fees/EIP1559BaseFeeTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.core.fees;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.config.experimental.ExperimentalEIPs;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP1559BaseFeeTest {\n+\n+  private static final long FORK_BLOCK = 783L;\n+  private final EIP1559 eip1559 = new EIP1559(FORK_BLOCK);\n+\n+  @Parameters\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          {1000000000, 10000000, 1000000000},\n+          {1000000000, 7000000, 962500000},\n+          {1100000000, 10000000, 1100000000},\n+          {1100000000, 9000000, 1086250000},\n+          {1086250000, 9000000, 1072671875},\n+          {1072671875, 9000000, 1059263476},\n+          {1059263476, 10001000, 1059276716},\n+          {1059276716, 16000000, 1138722469},\n+          {1049238967, 0, 918084097}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMDAyNg=="}, "originalCommit": {"oid": "df457cea4d99ed09586d12c125661f3ff64ca289"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQ3OTM5Mw==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/722#discussion_r409479393", "createdAt": "2020-04-16T11:21:08Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/core/fees/EIP1559BaseFeeTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.core.fees;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.config.experimental.ExperimentalEIPs;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP1559BaseFeeTest {\n+\n+  private static final long FORK_BLOCK = 783L;\n+  private final EIP1559 eip1559 = new EIP1559(FORK_BLOCK);\n+\n+  @Parameters\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          {1000000000, 10000000, 1000000000},\n+          {1000000000, 7000000, 962500000},\n+          {1100000000, 10000000, 1100000000},\n+          {1100000000, 9000000, 1086250000},\n+          {1086250000, 9000000, 1072671875},\n+          {1072671875, 9000000, 1059263476},\n+          {1059263476, 10001000, 1059276716},\n+          {1059276716, 16000000, 1138722469},\n+          {1049238967, 0, 918084097}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIyMDAyNg=="}, "originalCommit": {"oid": "df457cea4d99ed09586d12c125661f3ff64ca289"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1067, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}