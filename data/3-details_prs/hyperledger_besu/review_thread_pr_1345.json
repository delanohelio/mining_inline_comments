{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTQ2MDk4", "number": 1345, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozNzoyMVrOEdZY9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozOTo0N1rOEdZb8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjYwMTQ5OnYy", "diffSide": "RIGHT", "path": "metrics/core/src/test/java/org/hyperledger/besu/metrics/prometheus/MetricsHttpServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozNzoyMVrOHIiIeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTo1NTo0NlrOHIioGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwOTg4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                  // Assert we still get the Content-Type Prometheus likes\n          \n          \n            \n                  assertThat(resp.header(\"Content-Type\")).isEqualTo(TextFormat.CONTENT_TYPE_004);\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nYou will also need import io.prometheus.client.exporter.common.TextFormat; but GitHub won't let me suggest that far our of the code diff.", "url": "https://github.com/hyperledger/besu/pull/1345#discussion_r478709881", "createdAt": "2020-08-27T21:37:21Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/test/java/org/hyperledger/besu/metrics/prometheus/MetricsHttpServiceTest.java", "diffHunk": "@@ -174,6 +174,22 @@ public void metricsAreAbsentWhenFiltered() throws Exception {\n     }\n   }\n \n+  @Test\n+  // There is only one available representation so content negotiation should not be used\n+  public void acceptHeaderIgnored() throws Exception {\n+    final Request metricsRequest =\n+        new Request.Builder().addHeader(\"Accept\", \"text/xml\").url(baseUrl + \"/metrics\").build();\n+    try (final Response resp = client.newCall(metricsRequest).execute()) {\n+      assertThat(resp.code()).isEqualTo(200);\n+      // Check general format of result, it maps to java.util.Properties\n+      final Properties props = new Properties();\n+      props.load(resp.body().byteStream());\n+\n+      // We should have JVM metrics already loaded, verify a simple key.\n+      assertThat(props).containsKey(\"jvm_threads_deadlocked\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2dc7e91fb81353f7d693e2758f2f979749026f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxNzk3Nw==", "bodyText": "Added.", "url": "https://github.com/hyperledger/besu/pull/1345#discussion_r478717977", "createdAt": "2020-08-27T21:55:46Z", "author": {"login": "ajsutton"}, "path": "metrics/core/src/test/java/org/hyperledger/besu/metrics/prometheus/MetricsHttpServiceTest.java", "diffHunk": "@@ -174,6 +174,22 @@ public void metricsAreAbsentWhenFiltered() throws Exception {\n     }\n   }\n \n+  @Test\n+  // There is only one available representation so content negotiation should not be used\n+  public void acceptHeaderIgnored() throws Exception {\n+    final Request metricsRequest =\n+        new Request.Builder().addHeader(\"Accept\", \"text/xml\").url(baseUrl + \"/metrics\").build();\n+    try (final Response resp = client.newCall(metricsRequest).execute()) {\n+      assertThat(resp.code()).isEqualTo(200);\n+      // Check general format of result, it maps to java.util.Properties\n+      final Properties props = new Properties();\n+      props.load(resp.body().byteStream());\n+\n+      // We should have JVM metrics already loaded, verify a simple key.\n+      assertThat(props).containsKey(\"jvm_threads_deadlocked\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcwOTg4MQ=="}, "originalCommit": {"oid": "1d2dc7e91fb81353f7d693e2758f2f979749026f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjYwOTEzOnYy", "diffSide": "RIGHT", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsHttpService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTozOTo0N1rOHIiMyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMTo1NTozOVrOHIin5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxMDk4Nw==", "bodyText": "Maybe just check for \"text/plain\" instead of completely dropping Prometheus' very specific version?", "url": "https://github.com/hyperledger/besu/pull/1345#discussion_r478710987", "createdAt": "2020-08-27T21:39:47Z", "author": {"login": "shemnon"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsHttpService.java", "diffHunk": "@@ -91,11 +91,7 @@ private void validateConfig(final MetricsConfiguration config) {\n     router.route(\"/\").method(HttpMethod.GET).handler(this::handleEmptyRequest);\n \n     // Endpoint for Prometheus metrics monitoring.\n-    router\n-        .route(\"/metrics\")\n-        .method(HttpMethod.GET)\n-        .produces(TextFormat.CONTENT_TYPE_004)\n-        .handler(this::metricsRequest);\n+    router.route(\"/metrics\").method(HttpMethod.GET).handler(this::metricsRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2dc7e91fb81353f7d693e2758f2f979749026f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxNzkyNQ==", "bodyText": "Given we only have one representation to offer we shouldn't be doing any content negotiation (which is what the Accept header is for).  If we had multiple representations, then yes filtering to a particular Accept makes sense but if there's a default version, it should just be returned even if it doesn't match Accept.\nFor example this works fine:\ncurl --fail -v -H 'Accept: foo/foo' https://www.google.com/\n\nThe caller can then decide if they want to process the response based on the Content-Type header.", "url": "https://github.com/hyperledger/besu/pull/1345#discussion_r478717925", "createdAt": "2020-08-27T21:55:39Z", "author": {"login": "ajsutton"}, "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/prometheus/MetricsHttpService.java", "diffHunk": "@@ -91,11 +91,7 @@ private void validateConfig(final MetricsConfiguration config) {\n     router.route(\"/\").method(HttpMethod.GET).handler(this::handleEmptyRequest);\n \n     // Endpoint for Prometheus metrics monitoring.\n-    router\n-        .route(\"/metrics\")\n-        .method(HttpMethod.GET)\n-        .produces(TextFormat.CONTENT_TYPE_004)\n-        .handler(this::metricsRequest);\n+    router.route(\"/metrics\").method(HttpMethod.GET).handler(this::metricsRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODcxMDk4Nw=="}, "originalCommit": {"oid": "1d2dc7e91fb81353f7d693e2758f2f979749026f"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 765, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}