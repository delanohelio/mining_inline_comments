{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MzUxNzk5", "number": 1050, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1NzozMFrOEDFOcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozNDoyNVrOED8TkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjY2ODAzOnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/manager/EIP2124Test.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTo1NzozMFrOGf7pqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMzozMToxN1rOGhJ58Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzNjM2Mg==", "bodyText": "This feels like a lot of duplication with  org.hyperledger.besu.ethereum.eth.manager.ForkIdManagerTest - What is being tested here that is not being tested there and can these two files be merged into one?", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436136362", "createdAt": "2020-06-05T19:57:30Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/manager/EIP2124Test.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.eth.manager.ForkIdManager.ForkId;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP2124Test {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Parameters(name = \"{index}: {0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          // Mainnet test cases\n+          {\"Mainnet // First Homestead block\", Network.MAINNET, 1150000L, \"0x97c2c34c\", 1920000L},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4b0cecf1b18052c7b351d589084551f68ec1062"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NTI0Ng==", "bodyText": "They don't exactly test the same things. The new test class EIP2124Test is focused on testing the fork id sent in P2P status messages. It also performs the assertions on multiple combinations of chain heights. The ForkIdManagerTest is focus on testing the intermediate fork hashes generated to perform the peer check. I think they have different scopes of responsibilities. I would keep them both. Moreover, the new test class cases are aligned with some tests in the EIP specification and also the implementation of other clients.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436495246", "createdAt": "2020-06-08T07:09:21Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/manager/EIP2124Test.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.eth.manager.ForkIdManager.ForkId;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP2124Test {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Parameters(name = \"{index}: {0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          // Mainnet test cases\n+          {\"Mainnet // First Homestead block\", Network.MAINNET, 1150000L, \"0x97c2c34c\", 1920000L},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzNjM2Mg=="}, "originalCommit": {"oid": "e4b0cecf1b18052c7b351d589084551f68ec1062"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NjA1Mg==", "bodyText": "Simply put: ForkIdManagerTest tests the behaviour of peerCheck method whereas EIP2124Test tests the behaviour of computeForkId method used by EthProtocolManager.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436496052", "createdAt": "2020-06-08T07:11:23Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/manager/EIP2124Test.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.eth.manager.ForkIdManager.ForkId;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP2124Test {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Parameters(name = \"{index}: {0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          // Mainnet test cases\n+          {\"Mainnet // First Homestead block\", Network.MAINNET, 1150000L, \"0x97c2c34c\", 1920000L},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzNjM2Mg=="}, "originalCommit": {"oid": "e4b0cecf1b18052c7b351d589084551f68ec1062"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5NjIxNA==", "bodyText": "Are you ok if i keep both files ?", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436496214", "createdAt": "2020-06-08T07:11:49Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/manager/EIP2124Test.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.eth.manager.ForkIdManager.ForkId;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP2124Test {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Parameters(name = \"{index}: {0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          // Mainnet test cases\n+          {\"Mainnet // First Homestead block\", Network.MAINNET, 1150000L, \"0x97c2c34c\", 1920000L},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzNjM2Mg=="}, "originalCommit": {"oid": "e4b0cecf1b18052c7b351d589084551f68ec1062"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5MjQ3OA==", "bodyText": "There's too much duplication.  They are testing two things in the same java file, so they should at least be in the same file.  Also, the data sets (what the fork IDs of the well known networks are) should be normalized into one data set.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436792478", "createdAt": "2020-06-08T15:23:44Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/manager/EIP2124Test.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.eth.manager.ForkIdManager.ForkId;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP2124Test {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Parameters(name = \"{index}: {0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          // Mainnet test cases\n+          {\"Mainnet // First Homestead block\", Network.MAINNET, 1150000L, \"0x97c2c34c\", 1920000L},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzNjM2Mg=="}, "originalCommit": {"oid": "e4b0cecf1b18052c7b351d589084551f68ec1062"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxNTY2OQ==", "bodyText": "It is not a well-documented feature in the genesis configuration that this can occur. Esp. with EthProtocolManager handshake as that has been a worry for us.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r437415669", "createdAt": "2020-06-09T13:27:20Z", "author": {"login": "sambacha"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/manager/EIP2124Test.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.eth.manager.ForkIdManager.ForkId;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP2124Test {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Parameters(name = \"{index}: {0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          // Mainnet test cases\n+          {\"Mainnet // First Homestead block\", Network.MAINNET, 1150000L, \"0x97c2c34c\", 1920000L},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzNjM2Mg=="}, "originalCommit": {"oid": "e4b0cecf1b18052c7b351d589084551f68ec1062"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxODE0OA==", "bodyText": "I refactored both the implementation and the testing.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r437418148", "createdAt": "2020-06-09T13:30:49Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/manager/EIP2124Test.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.eth.manager.ForkIdManager.ForkId;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP2124Test {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Parameters(name = \"{index}: {0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          // Mainnet test cases\n+          {\"Mainnet // First Homestead block\", Network.MAINNET, 1150000L, \"0x97c2c34c\", 1920000L},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzNjM2Mg=="}, "originalCommit": {"oid": "e4b0cecf1b18052c7b351d589084551f68ec1062"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQxODQ4MQ==", "bodyText": "And tested on almost all Ethereum networks, including consortium networks.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r437418481", "createdAt": "2020-06-09T13:31:17Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/test/java/org/hyperledger/besu/ethereum/eth/manager/EIP2124Test.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.Block;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.eth.manager.ForkIdManager.ForkId;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class EIP2124Test {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  @Parameters(name = \"{index}: {0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          // Mainnet test cases\n+          {\"Mainnet // First Homestead block\", Network.MAINNET, 1150000L, \"0x97c2c34c\", 1920000L},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEzNjM2Mg=="}, "originalCommit": {"oid": "e4b0cecf1b18052c7b351d589084551f68ec1062"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTMwOTQ5OnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoxNDo0NFrOGgl38w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoxMzozOFrOGgoFtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyODE0Nw==", "bodyText": "Is this just for testing?", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436828147", "createdAt": "2020-06-08T16:14:44Z", "author": {"login": "RatanRSur"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -66,12 +69,41 @@ public ForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n               blockchain,\n               genesisHash,\n               forks,\n-              fs -> fs.stream().distinct().collect(Collectors.toUnmodifiableList()),\n+              fs -> fs.stream().distinct().sorted().collect(Collectors.toUnmodifiableList()),\n               new ArrayList<>());\n       this.forkIDCheckers = Arrays.asList(newForkIdChecker, legacyForkIdChecker);\n     }\n   }\n \n+  public ForkId computeForkId() {\n+    final long head = chainHeadSupplier.getAsLong();\n+    if (lastHead != 0 && head == lastHead && lastComputedForkId != null) {\n+      return lastComputedForkId;\n+    }\n+    lastHead = head;\n+\n+    final CRC32 crc = new CRC32();\n+    long next = 0;\n+    crc.update(genesisHash.toArray());\n+    for (final Long fork : forks) {\n+      if (fork <= head) {\n+        updateCrc(crc, fork);\n+        continue;\n+      }\n+      next = fork;\n+      break;\n+    }\n+    lastComputedForkId = new ForkId(getCurrentCrcHash(crc), next);\n+    return lastComputedForkId;\n+  }\n+\n+  ForkId getLatestForkId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NDQzOA==", "bodyText": "Yes. Added @VisibleForTesting annotation.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436864438", "createdAt": "2020-06-08T17:13:38Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -66,12 +69,41 @@ public ForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n               blockchain,\n               genesisHash,\n               forks,\n-              fs -> fs.stream().distinct().collect(Collectors.toUnmodifiableList()),\n+              fs -> fs.stream().distinct().sorted().collect(Collectors.toUnmodifiableList()),\n               new ArrayList<>());\n       this.forkIDCheckers = Arrays.asList(newForkIdChecker, legacyForkIdChecker);\n     }\n   }\n \n+  public ForkId computeForkId() {\n+    final long head = chainHeadSupplier.getAsLong();\n+    if (lastHead != 0 && head == lastHead && lastComputedForkId != null) {\n+      return lastComputedForkId;\n+    }\n+    lastHead = head;\n+\n+    final CRC32 crc = new CRC32();\n+    long next = 0;\n+    crc.update(genesisHash.toArray());\n+    for (final Long fork : forks) {\n+      if (fork <= head) {\n+        updateCrc(crc, fork);\n+        continue;\n+      }\n+      next = fork;\n+      break;\n+    }\n+    lastComputedForkId = new ForkId(getCurrentCrcHash(crc), next);\n+    return lastComputedForkId;\n+  }\n+\n+  ForkId getLatestForkId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyODE0Nw=="}, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTM0MzA4OnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoyMjo0NVrOGgmMgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoxMzo1NVrOGgoGYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzMzQxMA==", "bodyText": "Since forks doesn't include 0, onlyZerosForkBlocks is not doing what it looks like it's doing. As it happens, it will be true because allMatch is true for empty but it's pretty misleading right now.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436833410", "createdAt": "2020-06-08T16:22:45Z", "author": {"login": "RatanRSur"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -40,23 +41,25 @@\n   private final List<ForkId> forkAndHashList;\n \n   private final List<Predicate<ForkId>> forkIDCheckers;\n+  private final List<Long> forks;\n+  private final LongSupplier chainHeadSupplier;\n+  private long lastHead;\n+  private ForkId lastComputedForkId;\n \n   public ForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n     checkNotNull(blockchain);\n     checkNotNull(forks);\n+    this.chainHeadSupplier = blockchain::getChainHeadBlockNumber;\n     this.genesisHash = blockchain.getGenesisBlock().getHash();\n     this.forkAndHashList = new ArrayList<>();\n+    this.forks =\n+        forks.stream()\n+            .filter(fork -> fork > 0)\n+            .distinct()\n+            .sorted()\n+            .collect(Collectors.toUnmodifiableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NDYwOQ==", "bodyText": "Fixed.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436864609", "createdAt": "2020-06-08T17:13:55Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -40,23 +41,25 @@\n   private final List<ForkId> forkAndHashList;\n \n   private final List<Predicate<ForkId>> forkIDCheckers;\n+  private final List<Long> forks;\n+  private final LongSupplier chainHeadSupplier;\n+  private long lastHead;\n+  private ForkId lastComputedForkId;\n \n   public ForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n     checkNotNull(blockchain);\n     checkNotNull(forks);\n+    this.chainHeadSupplier = blockchain::getChainHeadBlockNumber;\n     this.genesisHash = blockchain.getGenesisBlock().getHash();\n     this.forkAndHashList = new ArrayList<>();\n+    this.forks =\n+        forks.stream()\n+            .filter(fork -> fork > 0)\n+            .distinct()\n+            .sorted()\n+            .collect(Collectors.toUnmodifiableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzMzQxMA=="}, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTM0NjcyOnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoyMzo0NFrOGgmOyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoxNToxOFrOGgoKCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzMzk5NA==", "bodyText": "If this isn't used anywhere else, we should probably move it into the else clause.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436833994", "createdAt": "2020-06-08T16:23:44Z", "author": {"login": "RatanRSur"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -40,23 +41,25 @@\n   private final List<ForkId> forkAndHashList;\n \n   private final List<Predicate<ForkId>> forkIDCheckers;\n+  private final List<Long> forks;\n+  private final LongSupplier chainHeadSupplier;\n+  private long lastHead;\n+  private ForkId lastComputedForkId;\n \n   public ForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n     checkNotNull(blockchain);\n     checkNotNull(forks);\n+    this.chainHeadSupplier = blockchain::getChainHeadBlockNumber;\n     this.genesisHash = blockchain.getGenesisBlock().getHash();\n     this.forkAndHashList = new ArrayList<>();\n+    this.forks =\n+        forks.stream()\n+            .filter(fork -> fork > 0)\n+            .distinct()\n+            .sorted()\n+            .collect(Collectors.toUnmodifiableList());\n     final Predicate<ForkId> legacyForkIdChecker =\n-        createForkIDChecker(\n-            blockchain,\n-            genesisHash,\n-            forks,\n-            fs ->\n-                fs.stream()\n-                    .filter(fork -> fork > 0)\n-                    .distinct()\n-                    .collect(Collectors.toUnmodifiableList()),\n-            forkAndHashList);\n+        createForkIDChecker(blockchain, genesisHash, forks, fs -> forks, forkAndHashList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NTU0NA==", "bodyText": "Non relevant anymore.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436865544", "createdAt": "2020-06-08T17:15:18Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -40,23 +41,25 @@\n   private final List<ForkId> forkAndHashList;\n \n   private final List<Predicate<ForkId>> forkIDCheckers;\n+  private final List<Long> forks;\n+  private final LongSupplier chainHeadSupplier;\n+  private long lastHead;\n+  private ForkId lastComputedForkId;\n \n   public ForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n     checkNotNull(blockchain);\n     checkNotNull(forks);\n+    this.chainHeadSupplier = blockchain::getChainHeadBlockNumber;\n     this.genesisHash = blockchain.getGenesisBlock().getHash();\n     this.forkAndHashList = new ArrayList<>();\n+    this.forks =\n+        forks.stream()\n+            .filter(fork -> fork > 0)\n+            .distinct()\n+            .sorted()\n+            .collect(Collectors.toUnmodifiableList());\n     final Predicate<ForkId> legacyForkIdChecker =\n-        createForkIDChecker(\n-            blockchain,\n-            genesisHash,\n-            forks,\n-            fs ->\n-                fs.stream()\n-                    .filter(fork -> fork > 0)\n-                    .distinct()\n-                    .collect(Collectors.toUnmodifiableList()),\n-            forkAndHashList);\n+        createForkIDChecker(blockchain, genesisHash, forks, fs -> forks, forkAndHashList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzMzk5NA=="}, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTQwNTAxOnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjozODoyOFrOGgmyhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoxNTowNlrOGgoJiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0MzE0Mw==", "bodyText": "Do we need this filter as well? I thought we already got rid of the 0's above. If it does break when this is removed, I wonder if there's a way we can do this filter in only one place.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436843143", "createdAt": "2020-06-08T16:38:28Z", "author": {"login": "RatanRSur"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -205,16 +230,20 @@ private static long createForkIds(\n     final CRC32 crc = new CRC32();\n     crc.update(genesisHash.toArray());\n     final List<Bytes> forkHashes = new ArrayList<>(List.of(getCurrentCrcHash(crc)));\n-    for (final Long fork : forks) {\n-      updateCrc(crc, fork);\n-      forkHashes.add(getCurrentCrcHash(crc));\n-    }\n+    final List<Long> filteredForks =\n+        forks.stream().filter(v -> v > 0).distinct().collect(Collectors.toUnmodifiableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NTQxOQ==", "bodyText": "Fixed.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436865419", "createdAt": "2020-06-08T17:15:06Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -205,16 +230,20 @@ private static long createForkIds(\n     final CRC32 crc = new CRC32();\n     crc.update(genesisHash.toArray());\n     final List<Bytes> forkHashes = new ArrayList<>(List.of(getCurrentCrcHash(crc)));\n-    for (final Long fork : forks) {\n-      updateCrc(crc, fork);\n-      forkHashes.add(getCurrentCrcHash(crc));\n-    }\n+    final List<Long> filteredForks =\n+        forks.stream().filter(v -> v > 0).distinct().collect(Collectors.toUnmodifiableList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0MzE0Mw=="}, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTQxNTM0OnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0MToxNFrOGgm44w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoxNDozNFrOGgoICQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NDc3MQ==", "bodyText": "Can we reuse the getLatestForkId here?", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436844771", "createdAt": "2020-06-08T16:41:14Z", "author": {"login": "RatanRSur"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -205,16 +230,20 @@ private static long createForkIds(\n     final CRC32 crc = new CRC32();\n     crc.update(genesisHash.toArray());\n     final List<Bytes> forkHashes = new ArrayList<>(List.of(getCurrentCrcHash(crc)));\n-    for (final Long fork : forks) {\n-      updateCrc(crc, fork);\n-      forkHashes.add(getCurrentCrcHash(crc));\n-    }\n+    final List<Long> filteredForks =\n+        forks.stream().filter(v -> v > 0).distinct().collect(Collectors.toUnmodifiableList());\n+    filteredForks.forEach(\n+        fork -> {\n+          updateCrc(crc, fork);\n+          forkHashes.add(getCurrentCrcHash(crc));\n+        });\n+\n     // This loop is for all the fork hashes that have an associated \"next fork\"\n-    for (int i = 0; i < forks.size(); i++) {\n-      forkIds.add(new ForkId(forkHashes.get(i), forks.get(i)));\n+    for (int i = 0; i < filteredForks.size(); i++) {\n+      forkIds.add(new ForkId(forkHashes.get(i), filteredForks.get(i)));\n     }\n     long forkNext = 0;\n-    if (!forks.isEmpty()) {\n+    if (!filteredForks.isEmpty()) {\n       forkNext = forkIds.get(forkIds.size() - 1).getNext();\n       forkIds.add(new ForkId(forkHashes.get(forkHashes.size() - 1), 0));\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NDAxOA==", "bodyText": "Can't really unless i move everything from static methods to instance methods", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436864018", "createdAt": "2020-06-08T17:13:01Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -205,16 +230,20 @@ private static long createForkIds(\n     final CRC32 crc = new CRC32();\n     crc.update(genesisHash.toArray());\n     final List<Bytes> forkHashes = new ArrayList<>(List.of(getCurrentCrcHash(crc)));\n-    for (final Long fork : forks) {\n-      updateCrc(crc, fork);\n-      forkHashes.add(getCurrentCrcHash(crc));\n-    }\n+    final List<Long> filteredForks =\n+        forks.stream().filter(v -> v > 0).distinct().collect(Collectors.toUnmodifiableList());\n+    filteredForks.forEach(\n+        fork -> {\n+          updateCrc(crc, fork);\n+          forkHashes.add(getCurrentCrcHash(crc));\n+        });\n+\n     // This loop is for all the fork hashes that have an associated \"next fork\"\n-    for (int i = 0; i < forks.size(); i++) {\n-      forkIds.add(new ForkId(forkHashes.get(i), forks.get(i)));\n+    for (int i = 0; i < filteredForks.size(); i++) {\n+      forkIds.add(new ForkId(forkHashes.get(i), filteredForks.get(i)));\n     }\n     long forkNext = 0;\n-    if (!forks.isEmpty()) {\n+    if (!filteredForks.isEmpty()) {\n       forkNext = forkIds.get(forkIds.size() - 1).getNext();\n       forkIds.add(new ForkId(forkHashes.get(forkHashes.size() - 1), 0));\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NDc3MQ=="}, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2NTAzMw==", "bodyText": "ahh ok", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r436865033", "createdAt": "2020-06-08T17:14:34Z", "author": {"login": "RatanRSur"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -205,16 +230,20 @@ private static long createForkIds(\n     final CRC32 crc = new CRC32();\n     crc.update(genesisHash.toArray());\n     final List<Bytes> forkHashes = new ArrayList<>(List.of(getCurrentCrcHash(crc)));\n-    for (final Long fork : forks) {\n-      updateCrc(crc, fork);\n-      forkHashes.add(getCurrentCrcHash(crc));\n-    }\n+    final List<Long> filteredForks =\n+        forks.stream().filter(v -> v > 0).distinct().collect(Collectors.toUnmodifiableList());\n+    filteredForks.forEach(\n+        fork -> {\n+          updateCrc(crc, fork);\n+          forkHashes.add(getCurrentCrcHash(crc));\n+        });\n+\n     // This loop is for all the fork hashes that have an associated \"next fork\"\n-    for (int i = 0; i < forks.size(); i++) {\n-      forkIds.add(new ForkId(forkHashes.get(i), forks.get(i)));\n+    for (int i = 0; i < filteredForks.size(); i++) {\n+      forkIds.add(new ForkId(forkHashes.get(i), filteredForks.get(i)));\n     }\n     long forkNext = 0;\n-    if (!forks.isEmpty()) {\n+    if (!filteredForks.isEmpty()) {\n       forkNext = forkIds.get(forkIds.size() - 1).getNext();\n       forkIds.add(new ForkId(forkHashes.get(forkHashes.size() - 1), 0));\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0NDc3MQ=="}, "originalCommit": {"oid": "991c1d6c96bf23074b7c5e21534e2a5f2b424127"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTQzOTA4OnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo1MToyMFrOGhN-JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToxMjowOFrOGhPCbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NTA5Mg==", "bodyText": "Is there a way to get this from the forkAndHashList? If I understand correctly we just need to filter out the hashes that are for forks past the chain head, right?", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r437485092", "createdAt": "2020-06-09T14:51:20Z", "author": {"login": "RatanRSur"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -39,69 +36,58 @@\n   private final Hash genesisHash;\n   private final List<ForkId> forkAndHashList;\n \n-  private final List<Predicate<ForkId>> forkIDCheckers;\n+  private final List<Long> forks;\n+  private final LongSupplier chainHeadSupplier;\n+  private long lastHead;\n+  private ForkId lastComputedForkId;\n+  private final long forkNext;\n+  private final boolean onlyZerosForkBlocks;\n+  private final long highestKnownFork;\n \n-  public ForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n+  public ForkIdManager(final Blockchain blockchain, final List<Long> nonFilteredForks) {\n     checkNotNull(blockchain);\n-    checkNotNull(forks);\n+    checkNotNull(nonFilteredForks);\n+    this.chainHeadSupplier = blockchain::getChainHeadBlockNumber;\n     this.genesisHash = blockchain.getGenesisBlock().getHash();\n     this.forkAndHashList = new ArrayList<>();\n-    final Predicate<ForkId> legacyForkIdChecker =\n-        createForkIDChecker(\n-            blockchain,\n-            genesisHash,\n-            forks,\n-            fs ->\n-                fs.stream()\n-                    .filter(fork -> fork > 0)\n-                    .distinct()\n-                    .collect(Collectors.toUnmodifiableList()),\n-            forkAndHashList);\n-    // if the fork list contains only zeros then we may be in a consortium/dev network\n-    if (onlyZerosForkBlocks(forks)) {\n-      this.forkIDCheckers = singletonList(forkId -> true);\n-    } else {\n-      final Predicate<ForkId> newForkIdChecker =\n-          createForkIDChecker(\n-              blockchain,\n-              genesisHash,\n-              forks,\n-              fs -> fs.stream().distinct().collect(Collectors.toUnmodifiableList()),\n-              new ArrayList<>());\n-      this.forkIDCheckers = Arrays.asList(newForkIdChecker, legacyForkIdChecker);\n-    }\n-  }\n-\n-  private static Predicate<ForkId> createForkIDChecker(\n-      final Blockchain blockchain,\n-      final Hash genesisHash,\n-      final List<Long> forks,\n-      final Function<List<Long>, List<Long>> sanitizer,\n-      final List<ForkId> forkIds) {\n-    final List<Long> sanitizedForks = sanitizer.apply(forks);\n-    final long forkNext = createForkIds(genesisHash, sanitizedForks, forkIds);\n-    return eip2124(blockchain, forkNext, forkIds, highestKnownFork(sanitizedForks));\n+    this.forks =\n+        nonFilteredForks.stream()\n+            .filter(fork -> fork > 0)\n+            .distinct()\n+            .sorted()\n+            .collect(Collectors.toUnmodifiableList());\n+    this.onlyZerosForkBlocks = nonFilteredForks.stream().allMatch(value -> 0L == value);\n+    this.forkNext = createForkIds();\n+    this.highestKnownFork = !forks.isEmpty() ? forks.get(forks.size() - 1) : 0L;\n   }\n \n-  private static boolean onlyZerosForkBlocks(final List<Long> forks) {\n-    return forks.stream().allMatch(value -> 0L == value);\n-  }\n+  public ForkId computeForkId() {\n+    final long head = chainHeadSupplier.getAsLong();\n+    if (lastHead != 0 && head == lastHead && lastComputedForkId != null) {\n+      return lastComputedForkId;\n+    }\n+    lastHead = head;\n \n-  private static long highestKnownFork(final List<Long> forks) {\n-    return !forks.isEmpty() ? forks.get(forks.size() - 1) : 0L;\n+    final CRC32 crc = new CRC32();\n+    long next = 0;\n+    crc.update(genesisHash.toArray());\n+    for (final Long fork : forks) {\n+      if (fork <= head) {\n+        updateCrc(crc, fork);\n+        continue;\n+      }\n+      next = fork;\n+      break;\n+    }\n+    lastComputedForkId = new ForkId(getCurrentCrcHash(crc), next);\n+    return lastComputedForkId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c5cf8151b6e27bfbde25c4e41f50e831241a8ae"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4OTQxNg==", "bodyText": "Maybe we can. Let me check.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r437489416", "createdAt": "2020-06-09T14:56:55Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -39,69 +36,58 @@\n   private final Hash genesisHash;\n   private final List<ForkId> forkAndHashList;\n \n-  private final List<Predicate<ForkId>> forkIDCheckers;\n+  private final List<Long> forks;\n+  private final LongSupplier chainHeadSupplier;\n+  private long lastHead;\n+  private ForkId lastComputedForkId;\n+  private final long forkNext;\n+  private final boolean onlyZerosForkBlocks;\n+  private final long highestKnownFork;\n \n-  public ForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n+  public ForkIdManager(final Blockchain blockchain, final List<Long> nonFilteredForks) {\n     checkNotNull(blockchain);\n-    checkNotNull(forks);\n+    checkNotNull(nonFilteredForks);\n+    this.chainHeadSupplier = blockchain::getChainHeadBlockNumber;\n     this.genesisHash = blockchain.getGenesisBlock().getHash();\n     this.forkAndHashList = new ArrayList<>();\n-    final Predicate<ForkId> legacyForkIdChecker =\n-        createForkIDChecker(\n-            blockchain,\n-            genesisHash,\n-            forks,\n-            fs ->\n-                fs.stream()\n-                    .filter(fork -> fork > 0)\n-                    .distinct()\n-                    .collect(Collectors.toUnmodifiableList()),\n-            forkAndHashList);\n-    // if the fork list contains only zeros then we may be in a consortium/dev network\n-    if (onlyZerosForkBlocks(forks)) {\n-      this.forkIDCheckers = singletonList(forkId -> true);\n-    } else {\n-      final Predicate<ForkId> newForkIdChecker =\n-          createForkIDChecker(\n-              blockchain,\n-              genesisHash,\n-              forks,\n-              fs -> fs.stream().distinct().collect(Collectors.toUnmodifiableList()),\n-              new ArrayList<>());\n-      this.forkIDCheckers = Arrays.asList(newForkIdChecker, legacyForkIdChecker);\n-    }\n-  }\n-\n-  private static Predicate<ForkId> createForkIDChecker(\n-      final Blockchain blockchain,\n-      final Hash genesisHash,\n-      final List<Long> forks,\n-      final Function<List<Long>, List<Long>> sanitizer,\n-      final List<ForkId> forkIds) {\n-    final List<Long> sanitizedForks = sanitizer.apply(forks);\n-    final long forkNext = createForkIds(genesisHash, sanitizedForks, forkIds);\n-    return eip2124(blockchain, forkNext, forkIds, highestKnownFork(sanitizedForks));\n+    this.forks =\n+        nonFilteredForks.stream()\n+            .filter(fork -> fork > 0)\n+            .distinct()\n+            .sorted()\n+            .collect(Collectors.toUnmodifiableList());\n+    this.onlyZerosForkBlocks = nonFilteredForks.stream().allMatch(value -> 0L == value);\n+    this.forkNext = createForkIds();\n+    this.highestKnownFork = !forks.isEmpty() ? forks.get(forks.size() - 1) : 0L;\n   }\n \n-  private static boolean onlyZerosForkBlocks(final List<Long> forks) {\n-    return forks.stream().allMatch(value -> 0L == value);\n-  }\n+  public ForkId computeForkId() {\n+    final long head = chainHeadSupplier.getAsLong();\n+    if (lastHead != 0 && head == lastHead && lastComputedForkId != null) {\n+      return lastComputedForkId;\n+    }\n+    lastHead = head;\n \n-  private static long highestKnownFork(final List<Long> forks) {\n-    return !forks.isEmpty() ? forks.get(forks.size() - 1) : 0L;\n+    final CRC32 crc = new CRC32();\n+    long next = 0;\n+    crc.update(genesisHash.toArray());\n+    for (final Long fork : forks) {\n+      if (fork <= head) {\n+        updateCrc(crc, fork);\n+        continue;\n+      }\n+      next = fork;\n+      break;\n+    }\n+    lastComputedForkId = new ForkId(getCurrentCrcHash(crc), next);\n+    return lastComputedForkId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NTA5Mg=="}, "originalCommit": {"oid": "0c5cf8151b6e27bfbde25c4e41f50e831241a8ae"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwMDA3Ng==", "bodyText": "Well. We can", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r437500076", "createdAt": "2020-06-09T15:10:09Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -39,69 +36,58 @@\n   private final Hash genesisHash;\n   private final List<ForkId> forkAndHashList;\n \n-  private final List<Predicate<ForkId>> forkIDCheckers;\n+  private final List<Long> forks;\n+  private final LongSupplier chainHeadSupplier;\n+  private long lastHead;\n+  private ForkId lastComputedForkId;\n+  private final long forkNext;\n+  private final boolean onlyZerosForkBlocks;\n+  private final long highestKnownFork;\n \n-  public ForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n+  public ForkIdManager(final Blockchain blockchain, final List<Long> nonFilteredForks) {\n     checkNotNull(blockchain);\n-    checkNotNull(forks);\n+    checkNotNull(nonFilteredForks);\n+    this.chainHeadSupplier = blockchain::getChainHeadBlockNumber;\n     this.genesisHash = blockchain.getGenesisBlock().getHash();\n     this.forkAndHashList = new ArrayList<>();\n-    final Predicate<ForkId> legacyForkIdChecker =\n-        createForkIDChecker(\n-            blockchain,\n-            genesisHash,\n-            forks,\n-            fs ->\n-                fs.stream()\n-                    .filter(fork -> fork > 0)\n-                    .distinct()\n-                    .collect(Collectors.toUnmodifiableList()),\n-            forkAndHashList);\n-    // if the fork list contains only zeros then we may be in a consortium/dev network\n-    if (onlyZerosForkBlocks(forks)) {\n-      this.forkIDCheckers = singletonList(forkId -> true);\n-    } else {\n-      final Predicate<ForkId> newForkIdChecker =\n-          createForkIDChecker(\n-              blockchain,\n-              genesisHash,\n-              forks,\n-              fs -> fs.stream().distinct().collect(Collectors.toUnmodifiableList()),\n-              new ArrayList<>());\n-      this.forkIDCheckers = Arrays.asList(newForkIdChecker, legacyForkIdChecker);\n-    }\n-  }\n-\n-  private static Predicate<ForkId> createForkIDChecker(\n-      final Blockchain blockchain,\n-      final Hash genesisHash,\n-      final List<Long> forks,\n-      final Function<List<Long>, List<Long>> sanitizer,\n-      final List<ForkId> forkIds) {\n-    final List<Long> sanitizedForks = sanitizer.apply(forks);\n-    final long forkNext = createForkIds(genesisHash, sanitizedForks, forkIds);\n-    return eip2124(blockchain, forkNext, forkIds, highestKnownFork(sanitizedForks));\n+    this.forks =\n+        nonFilteredForks.stream()\n+            .filter(fork -> fork > 0)\n+            .distinct()\n+            .sorted()\n+            .collect(Collectors.toUnmodifiableList());\n+    this.onlyZerosForkBlocks = nonFilteredForks.stream().allMatch(value -> 0L == value);\n+    this.forkNext = createForkIds();\n+    this.highestKnownFork = !forks.isEmpty() ? forks.get(forks.size() - 1) : 0L;\n   }\n \n-  private static boolean onlyZerosForkBlocks(final List<Long> forks) {\n-    return forks.stream().allMatch(value -> 0L == value);\n-  }\n+  public ForkId computeForkId() {\n+    final long head = chainHeadSupplier.getAsLong();\n+    if (lastHead != 0 && head == lastHead && lastComputedForkId != null) {\n+      return lastComputedForkId;\n+    }\n+    lastHead = head;\n \n-  private static long highestKnownFork(final List<Long> forks) {\n-    return !forks.isEmpty() ? forks.get(forks.size() - 1) : 0L;\n+    final CRC32 crc = new CRC32();\n+    long next = 0;\n+    crc.update(genesisHash.toArray());\n+    for (final Long fork : forks) {\n+      if (fork <= head) {\n+        updateCrc(crc, fork);\n+        continue;\n+      }\n+      next = fork;\n+      break;\n+    }\n+    lastComputedForkId = new ForkId(getCurrentCrcHash(crc), next);\n+    return lastComputedForkId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NTA5Mg=="}, "originalCommit": {"oid": "0c5cf8151b6e27bfbde25c4e41f50e831241a8ae"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUwMjU3Mg==", "bodyText": "Fixed here db09f76", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r437502572", "createdAt": "2020-06-09T15:12:08Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkIdManager.java", "diffHunk": "@@ -39,69 +36,58 @@\n   private final Hash genesisHash;\n   private final List<ForkId> forkAndHashList;\n \n-  private final List<Predicate<ForkId>> forkIDCheckers;\n+  private final List<Long> forks;\n+  private final LongSupplier chainHeadSupplier;\n+  private long lastHead;\n+  private ForkId lastComputedForkId;\n+  private final long forkNext;\n+  private final boolean onlyZerosForkBlocks;\n+  private final long highestKnownFork;\n \n-  public ForkIdManager(final Blockchain blockchain, final List<Long> forks) {\n+  public ForkIdManager(final Blockchain blockchain, final List<Long> nonFilteredForks) {\n     checkNotNull(blockchain);\n-    checkNotNull(forks);\n+    checkNotNull(nonFilteredForks);\n+    this.chainHeadSupplier = blockchain::getChainHeadBlockNumber;\n     this.genesisHash = blockchain.getGenesisBlock().getHash();\n     this.forkAndHashList = new ArrayList<>();\n-    final Predicate<ForkId> legacyForkIdChecker =\n-        createForkIDChecker(\n-            blockchain,\n-            genesisHash,\n-            forks,\n-            fs ->\n-                fs.stream()\n-                    .filter(fork -> fork > 0)\n-                    .distinct()\n-                    .collect(Collectors.toUnmodifiableList()),\n-            forkAndHashList);\n-    // if the fork list contains only zeros then we may be in a consortium/dev network\n-    if (onlyZerosForkBlocks(forks)) {\n-      this.forkIDCheckers = singletonList(forkId -> true);\n-    } else {\n-      final Predicate<ForkId> newForkIdChecker =\n-          createForkIDChecker(\n-              blockchain,\n-              genesisHash,\n-              forks,\n-              fs -> fs.stream().distinct().collect(Collectors.toUnmodifiableList()),\n-              new ArrayList<>());\n-      this.forkIDCheckers = Arrays.asList(newForkIdChecker, legacyForkIdChecker);\n-    }\n-  }\n-\n-  private static Predicate<ForkId> createForkIDChecker(\n-      final Blockchain blockchain,\n-      final Hash genesisHash,\n-      final List<Long> forks,\n-      final Function<List<Long>, List<Long>> sanitizer,\n-      final List<ForkId> forkIds) {\n-    final List<Long> sanitizedForks = sanitizer.apply(forks);\n-    final long forkNext = createForkIds(genesisHash, sanitizedForks, forkIds);\n-    return eip2124(blockchain, forkNext, forkIds, highestKnownFork(sanitizedForks));\n+    this.forks =\n+        nonFilteredForks.stream()\n+            .filter(fork -> fork > 0)\n+            .distinct()\n+            .sorted()\n+            .collect(Collectors.toUnmodifiableList());\n+    this.onlyZerosForkBlocks = nonFilteredForks.stream().allMatch(value -> 0L == value);\n+    this.forkNext = createForkIds();\n+    this.highestKnownFork = !forks.isEmpty() ? forks.get(forks.size() - 1) : 0L;\n   }\n \n-  private static boolean onlyZerosForkBlocks(final List<Long> forks) {\n-    return forks.stream().allMatch(value -> 0L == value);\n-  }\n+  public ForkId computeForkId() {\n+    final long head = chainHeadSupplier.getAsLong();\n+    if (lastHead != 0 && head == lastHead && lastComputedForkId != null) {\n+      return lastComputedForkId;\n+    }\n+    lastHead = head;\n \n-  private static long highestKnownFork(final List<Long> forks) {\n-    return !forks.isEmpty() ? forks.get(forks.size() - 1) : 0L;\n+    final CRC32 crc = new CRC32();\n+    long next = 0;\n+    crc.update(genesisHash.toArray());\n+    for (final Long fork : forks) {\n+      if (fork <= head) {\n+        updateCrc(crc, fork);\n+        continue;\n+      }\n+      next = fork;\n+      break;\n+    }\n+    lastComputedForkId = new ForkId(getCurrentCrcHash(crc), next);\n+    return lastComputedForkId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NTA5Mg=="}, "originalCommit": {"oid": "0c5cf8151b6e27bfbde25c4e41f50e831241a8ae"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTY4MzAwOnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkId.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozMjoxN1rOGhQXBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozMjoxN1rOGhQXBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyNDIyOQ==", "bodyText": "nit: java.lang.Long#reverseBytes is quicker and hotspot compiles faster.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r437524229", "createdAt": "2020-06-09T15:32:17Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/ForkId.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager;\n+\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+import org.hyperledger.besu.ethereum.rlp.RLPOutput;\n+import org.hyperledger.besu.util.EndianUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class ForkId {\n+  final Bytes hash;\n+  final Bytes next;\n+  Bytes forkIdRLP;\n+\n+  protected ForkId(final Bytes hash, final Bytes next) {\n+    this.hash = hash;\n+    this.next = next;\n+    createForkIdRLP();\n+  }\n+\n+  public ForkId(final Bytes hash, final long next) {\n+    this(hash, Bytes.wrap(EndianUtils.longToBigEndian(next)).trimLeadingZeros());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db09f7677652d3ad561b2f78746b98e796f277ad"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNTY5MjMzOnYy", "diffSide": "RIGHT", "path": "util/src/main/java/org/hyperledger/besu/util/EndianUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozNDoyNVrOGhQdCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTozNDoyNVrOGhQdCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyNTc2OQ==", "bodyText": "nit: we don't need this.  Integer and Long both have reerseBytes that can do this as HotSpot 'Intrinsic' methods, which means it goes straight to ASM when JITed.", "url": "https://github.com/hyperledger/besu/pull/1050#discussion_r437525769", "createdAt": "2020-06-09T15:34:25Z", "author": {"login": "shemnon"}, "path": "util/src/main/java/org/hyperledger/besu/util/EndianUtils.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.util;\n+\n+public class EndianUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db09f7677652d3ad561b2f78746b98e796f277ad"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 927, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}