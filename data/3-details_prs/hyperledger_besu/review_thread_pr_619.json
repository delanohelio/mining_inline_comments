{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MzUxNzU5", "number": 619, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMToyM1rODtqmLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowNDo0OFrODtqq4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjEwNDEzOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/BlockHeader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMToyM1rOF_OeOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDozMTozOVrOF_uFKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MTcyMQ==", "bodyText": "Should this be guarded with the feature flag?  Either on the parameter or the constructor.", "url": "https://github.com/hyperledger/besu/pull/619#discussion_r401841721", "createdAt": "2020-04-01T19:01:23Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/BlockHeader.java", "diffHunk": "@@ -142,33 +144,50 @@ public void writeTo(final RLPOutput out) {\n     out.writeBytes(extraData);\n     out.writeBytes(mixHash);\n     out.writeLong(nonce);\n-\n+    if (baseFee != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06ed3260754bada09462fa99892622c2eff119f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NjkyMw==", "bodyText": "Sure. I will do that when step 0 gets merged.", "url": "https://github.com/hyperledger/besu/pull/619#discussion_r402266923", "createdAt": "2020-04-02T12:16:57Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/BlockHeader.java", "diffHunk": "@@ -142,33 +144,50 @@ public void writeTo(final RLPOutput out) {\n     out.writeBytes(extraData);\n     out.writeBytes(mixHash);\n     out.writeLong(nonce);\n-\n+    if (baseFee != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MTcyMQ=="}, "originalCommit": {"oid": "c06ed3260754bada09462fa99892622c2eff119f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1OTU5NA==", "bodyText": "Done in 7d7f59b", "url": "https://github.com/hyperledger/besu/pull/619#discussion_r402359594", "createdAt": "2020-04-02T14:31:39Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/BlockHeader.java", "diffHunk": "@@ -142,33 +144,50 @@ public void writeTo(final RLPOutput out) {\n     out.writeBytes(extraData);\n     out.writeBytes(mixHash);\n     out.writeLong(nonce);\n-\n+    if (baseFee != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MTcyMQ=="}, "originalCommit": {"oid": "c06ed3260754bada09462fa99892622c2eff119f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjEwNjczOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/BlockHeader.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMTo1OVrOF_Ofug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDozMTo1MFrOF_uFyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MjEwNg==", "bodyText": "This too should be feature flag guarded.  So it it isn't enabled we will get RLP errors if they try to use it w/o the flag.", "url": "https://github.com/hyperledger/besu/pull/619#discussion_r401842106", "createdAt": "2020-04-01T19:01:59Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/BlockHeader.java", "diffHunk": "@@ -142,33 +144,50 @@ public void writeTo(final RLPOutput out) {\n     out.writeBytes(extraData);\n     out.writeBytes(mixHash);\n     out.writeLong(nonce);\n-\n+    if (baseFee != null) {\n+      out.writeLongScalar(baseFee);\n+    }\n     out.endList();\n   }\n \n   public static BlockHeader readFrom(\n       final RLPInput input, final BlockHeaderFunctions blockHeaderFunctions) {\n     input.enterList();\n-    final BlockHeader blockHeader =\n-        new BlockHeader(\n-            Hash.wrap(input.readBytes32()),\n-            Hash.wrap(input.readBytes32()),\n-            Address.readFrom(input),\n-            Hash.wrap(input.readBytes32()),\n-            Hash.wrap(input.readBytes32()),\n-            Hash.wrap(input.readBytes32()),\n-            LogsBloomFilter.readFrom(input),\n-            Difficulty.of(input.readUInt256Scalar()),\n-            input.readLongScalar(),\n-            input.readLongScalar(),\n-            input.readLongScalar(),\n-            input.readLongScalar(),\n-            input.readBytes(),\n-            Hash.wrap(input.readBytes32()),\n-            input.readLong(),\n-            blockHeaderFunctions);\n+    final Hash parentHash = Hash.wrap(input.readBytes32());\n+    final Hash ommersHash = Hash.wrap(input.readBytes32());\n+    final Address coinbase = Address.readFrom(input);\n+    final Hash stateRoot = Hash.wrap(input.readBytes32());\n+    final Hash transactionsRoot = Hash.wrap(input.readBytes32());\n+    final Hash receiptsRoot = Hash.wrap(input.readBytes32());\n+    final LogsBloomFilter logsBloom = LogsBloomFilter.readFrom(input);\n+    final Difficulty difficulty = Difficulty.of(input.readUInt256Scalar());\n+    final long number = input.readLongScalar();\n+    final long gasLimit = input.readLongScalar();\n+    final long gasUsed = input.readLongScalar();\n+    final long timestamp = input.readLongScalar();\n+    final Bytes extraData = input.readBytes();\n+    final Hash mixHash = Hash.wrap(input.readBytes32());\n+    final long nonce = input.readLong();\n+    final Long baseFee = input.isEndOfCurrentList() ? null : input.readLongScalar();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06ed3260754bada09462fa99892622c2eff119f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2Njk2Mw==", "bodyText": "Sure. I will do that when step 0 gets merged.", "url": "https://github.com/hyperledger/besu/pull/619#discussion_r402266963", "createdAt": "2020-04-02T12:17:02Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/BlockHeader.java", "diffHunk": "@@ -142,33 +144,50 @@ public void writeTo(final RLPOutput out) {\n     out.writeBytes(extraData);\n     out.writeBytes(mixHash);\n     out.writeLong(nonce);\n-\n+    if (baseFee != null) {\n+      out.writeLongScalar(baseFee);\n+    }\n     out.endList();\n   }\n \n   public static BlockHeader readFrom(\n       final RLPInput input, final BlockHeaderFunctions blockHeaderFunctions) {\n     input.enterList();\n-    final BlockHeader blockHeader =\n-        new BlockHeader(\n-            Hash.wrap(input.readBytes32()),\n-            Hash.wrap(input.readBytes32()),\n-            Address.readFrom(input),\n-            Hash.wrap(input.readBytes32()),\n-            Hash.wrap(input.readBytes32()),\n-            Hash.wrap(input.readBytes32()),\n-            LogsBloomFilter.readFrom(input),\n-            Difficulty.of(input.readUInt256Scalar()),\n-            input.readLongScalar(),\n-            input.readLongScalar(),\n-            input.readLongScalar(),\n-            input.readLongScalar(),\n-            input.readBytes(),\n-            Hash.wrap(input.readBytes32()),\n-            input.readLong(),\n-            blockHeaderFunctions);\n+    final Hash parentHash = Hash.wrap(input.readBytes32());\n+    final Hash ommersHash = Hash.wrap(input.readBytes32());\n+    final Address coinbase = Address.readFrom(input);\n+    final Hash stateRoot = Hash.wrap(input.readBytes32());\n+    final Hash transactionsRoot = Hash.wrap(input.readBytes32());\n+    final Hash receiptsRoot = Hash.wrap(input.readBytes32());\n+    final LogsBloomFilter logsBloom = LogsBloomFilter.readFrom(input);\n+    final Difficulty difficulty = Difficulty.of(input.readUInt256Scalar());\n+    final long number = input.readLongScalar();\n+    final long gasLimit = input.readLongScalar();\n+    final long gasUsed = input.readLongScalar();\n+    final long timestamp = input.readLongScalar();\n+    final Bytes extraData = input.readBytes();\n+    final Hash mixHash = Hash.wrap(input.readBytes32());\n+    final long nonce = input.readLong();\n+    final Long baseFee = input.isEndOfCurrentList() ? null : input.readLongScalar();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MjEwNg=="}, "originalCommit": {"oid": "c06ed3260754bada09462fa99892622c2eff119f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1OTc1NA==", "bodyText": "Done in 7d7f59b", "url": "https://github.com/hyperledger/besu/pull/619#discussion_r402359754", "createdAt": "2020-04-02T14:31:50Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/BlockHeader.java", "diffHunk": "@@ -142,33 +144,50 @@ public void writeTo(final RLPOutput out) {\n     out.writeBytes(extraData);\n     out.writeBytes(mixHash);\n     out.writeLong(nonce);\n-\n+    if (baseFee != null) {\n+      out.writeLongScalar(baseFee);\n+    }\n     out.endList();\n   }\n \n   public static BlockHeader readFrom(\n       final RLPInput input, final BlockHeaderFunctions blockHeaderFunctions) {\n     input.enterList();\n-    final BlockHeader blockHeader =\n-        new BlockHeader(\n-            Hash.wrap(input.readBytes32()),\n-            Hash.wrap(input.readBytes32()),\n-            Address.readFrom(input),\n-            Hash.wrap(input.readBytes32()),\n-            Hash.wrap(input.readBytes32()),\n-            Hash.wrap(input.readBytes32()),\n-            LogsBloomFilter.readFrom(input),\n-            Difficulty.of(input.readUInt256Scalar()),\n-            input.readLongScalar(),\n-            input.readLongScalar(),\n-            input.readLongScalar(),\n-            input.readLongScalar(),\n-            input.readBytes(),\n-            Hash.wrap(input.readBytes32()),\n-            input.readLong(),\n-            blockHeaderFunctions);\n+    final Hash parentHash = Hash.wrap(input.readBytes32());\n+    final Hash ommersHash = Hash.wrap(input.readBytes32());\n+    final Address coinbase = Address.readFrom(input);\n+    final Hash stateRoot = Hash.wrap(input.readBytes32());\n+    final Hash transactionsRoot = Hash.wrap(input.readBytes32());\n+    final Hash receiptsRoot = Hash.wrap(input.readBytes32());\n+    final LogsBloomFilter logsBloom = LogsBloomFilter.readFrom(input);\n+    final Difficulty difficulty = Difficulty.of(input.readUInt256Scalar());\n+    final long number = input.readLongScalar();\n+    final long gasLimit = input.readLongScalar();\n+    final long gasUsed = input.readLongScalar();\n+    final long timestamp = input.readLongScalar();\n+    final Bytes extraData = input.readBytes();\n+    final Hash mixHash = Hash.wrap(input.readBytes32());\n+    final long nonce = input.readLong();\n+    final Long baseFee = input.isEndOfCurrentList() ? null : input.readLongScalar();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MjEwNg=="}, "originalCommit": {"oid": "c06ed3260754bada09462fa99892622c2eff119f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjExNjE5OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/data/BlockHeader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowNDo0OFrOF_OlyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMjoxMTo1NlrOF_oQWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MzY1Ng==", "bodyText": "Should be tagged @Unstable\nShould be a default method, returning null\nAlso, perhaps Optional<Long> instead of just Long?  Always empty when the BASEFEE isn't relevant?  If so the default is Optional.empty()", "url": "https://github.com/hyperledger/besu/pull/619#discussion_r401843656", "createdAt": "2020-04-01T19:04:48Z", "author": {"login": "shemnon"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/data/BlockHeader.java", "diffHunk": "@@ -154,4 +154,11 @@\n    * @return The Keccak 256-bit hash of this header.\n    */\n   Hash getBlockHash();\n+\n+  /**\n+   * The BASEFEE of this header.\n+   *\n+   * @return TheBASEFEE of this header.\n+   */\n+  Long getBaseFee();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c06ed3260754bada09462fa99892622c2eff119f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI2NDE1NA==", "bodyText": "Done. Added Unstable annotation and moved to Optional<Long>with default Optional.empty()", "url": "https://github.com/hyperledger/besu/pull/619#discussion_r402264154", "createdAt": "2020-04-02T12:11:56Z", "author": {"login": "abdelhamidbakhta"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/data/BlockHeader.java", "diffHunk": "@@ -154,4 +154,11 @@\n    * @return The Keccak 256-bit hash of this header.\n    */\n   Hash getBlockHash();\n+\n+  /**\n+   * The BASEFEE of this header.\n+   *\n+   * @return TheBASEFEE of this header.\n+   */\n+  Long getBaseFee();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MzY1Ng=="}, "originalCommit": {"oid": "c06ed3260754bada09462fa99892622c2eff119f"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1005, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}