{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjIxMzgw", "number": 1156, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyMzoxM1rOEJMO4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyOTozNFrOEJMWmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDczMDU5OnYy", "diffSide": "RIGHT", "path": "nat/src/main/java/org/hyperledger/besu/nat/NatService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyMzoxM1rOGpm_Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjo0MjozMVrOGpnl5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MzU3MQ==", "bodyText": "Don't use String.format, use standard logging placeholder instead.", "url": "https://github.com/hyperledger/besu/pull/1156#discussion_r446283571", "createdAt": "2020-06-26T16:23:13Z", "author": {"login": "abdelhamidbakhta"}, "path": "nat/src/main/java/org/hyperledger/besu/nat/NatService.java", "diffHunk": "@@ -88,10 +96,14 @@ public void start() {\n         getNatManager().orElseThrow().start();\n       } catch (Exception e) {\n         LOG.debug(\n-            \"Nat manager failed to configure itself automatically due to the following reason \"\n-                + e.getMessage()\n-                + \". NONE mode will be used\");\n-        disableNatManager();\n+            String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53387c169c72b5ffb2b545cebbf971b4376a8320"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5MzQ3OA==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1156#discussion_r446293478", "createdAt": "2020-06-26T16:42:31Z", "author": {"login": "matkt"}, "path": "nat/src/main/java/org/hyperledger/besu/nat/NatService.java", "diffHunk": "@@ -88,10 +96,14 @@ public void start() {\n         getNatManager().orElseThrow().start();\n       } catch (Exception e) {\n         LOG.debug(\n-            \"Nat manager failed to configure itself automatically due to the following reason \"\n-                + e.getMessage()\n-                + \". NONE mode will be used\");\n-        disableNatManager();\n+            String.format(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4MzU3MQ=="}, "originalCommit": {"oid": "53387c169c72b5ffb2b545cebbf971b4376a8320"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDc0MDE0OnYy", "diffSide": "RIGHT", "path": "nat/src/main/java/org/hyperledger/besu/nat/kubernetes/service/ClusterIpBasedDetector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyNjoxNlrOGpnFUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjo0MzoxNVrOGpnnWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NTEzNg==", "bodyText": "Not worth creating a class for such a simple implementation IMO. You can inject the code as a lambda directly.", "url": "https://github.com/hyperledger/besu/pull/1156#discussion_r446285136", "createdAt": "2020-06-26T16:26:16Z", "author": {"login": "abdelhamidbakhta"}, "path": "nat/src/main/java/org/hyperledger/besu/nat/kubernetes/service/ClusterIpBasedDetector.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.nat.kubernetes.service;\n+\n+import org.hyperledger.besu.nat.core.IpDetector;\n+\n+import java.util.Optional;\n+\n+import io.kubernetes.client.models.V1Service;\n+\n+public class ClusterIpBasedDetector implements IpDetector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53387c169c72b5ffb2b545cebbf971b4376a8320"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5Mzg0OA==", "bodyText": "Good catch", "url": "https://github.com/hyperledger/besu/pull/1156#discussion_r446293848", "createdAt": "2020-06-26T16:43:15Z", "author": {"login": "matkt"}, "path": "nat/src/main/java/org/hyperledger/besu/nat/kubernetes/service/ClusterIpBasedDetector.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.nat.kubernetes.service;\n+\n+import org.hyperledger.besu.nat.core.IpDetector;\n+\n+import java.util.Optional;\n+\n+import io.kubernetes.client.models.V1Service;\n+\n+public class ClusterIpBasedDetector implements IpDetector {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NTEzNg=="}, "originalCommit": {"oid": "53387c169c72b5ffb2b545cebbf971b4376a8320"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDc0MTM5OnYy", "diffSide": "RIGHT", "path": "nat/src/main/java/org/hyperledger/besu/nat/kubernetes/KubernetesNatManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyNjozNVrOGpnGAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjo0MzoyMVrOGpnniw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NTMxNQ==", "bodyText": "Return a lambda instead IMO", "url": "https://github.com/hyperledger/besu/pull/1156#discussion_r446285315", "createdAt": "2020-06-26T16:26:35Z", "author": {"login": "abdelhamidbakhta"}, "path": "nat/src/main/java/org/hyperledger/besu/nat/kubernetes/KubernetesNatManager.java", "diffHunk": "@@ -152,4 +144,16 @@ protected void doStop() {\n   public CompletableFuture<List<NatPortMapping>> getPortMappings() {\n     return CompletableFuture.completedFuture(forwardedPorts);\n   }\n+\n+  private IpDetector getIpDetector(final V1Service v1Service) throws NatInitializationException {\n+    final String serviceType = v1Service.getSpec().getType();\n+    switch (KubernetesServiceType.fromName(serviceType)) {\n+      case CLUSTER_IP:\n+        return new ClusterIpBasedDetector(v1Service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53387c169c72b5ffb2b545cebbf971b4376a8320"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5Mzg5OQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1156#discussion_r446293899", "createdAt": "2020-06-26T16:43:21Z", "author": {"login": "matkt"}, "path": "nat/src/main/java/org/hyperledger/besu/nat/kubernetes/KubernetesNatManager.java", "diffHunk": "@@ -152,4 +144,16 @@ protected void doStop() {\n   public CompletableFuture<List<NatPortMapping>> getPortMappings() {\n     return CompletableFuture.completedFuture(forwardedPorts);\n   }\n+\n+  private IpDetector getIpDetector(final V1Service v1Service) throws NatInitializationException {\n+    final String serviceType = v1Service.getSpec().getType();\n+    switch (KubernetesServiceType.fromName(serviceType)) {\n+      case CLUSTER_IP:\n+        return new ClusterIpBasedDetector(v1Service);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NTMxNQ=="}, "originalCommit": {"oid": "53387c169c72b5ffb2b545cebbf971b4376a8320"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDc0OTQyOnYy", "diffSide": "RIGHT", "path": "nat/src/test/java/org/hyperledger/besu/nat/NatServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyOToxN1rOGpnLPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjo0NTo1M1rOGpns7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NjY1Mw==", "bodyText": "Use assertThatThrownBy instead.\nExample here: \n  \n    \n      besu/besu/src/test/java/org/hyperledger/besu/chainexport/RlpBlockExporterTest.java\n    \n    \n         Line 213\n      in\n      71f2872\n    \n    \n    \n    \n\n        \n          \n           assertThatThrownBy(() -> exporter.exportBlocks(outputPath, Optional.of(-1L), Optional.empty()))", "url": "https://github.com/hyperledger/besu/pull/1156#discussion_r446286653", "createdAt": "2020-06-26T16:29:17Z", "author": {"login": "abdelhamidbakhta"}, "path": "nat/src/test/java/org/hyperledger/besu/nat/NatServiceTest.java", "diffHunk": "@@ -197,6 +197,24 @@ public void assertThatManagerSwitchToNoneForInvalidNatEnvironment()\n     assertThat(natService.queryLocalIPAddress(fallbackLocalIp)).isEqualTo(fallbackLocalIp);\n   }\n \n+  @Test(expected = RuntimeException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53387c169c72b5ffb2b545cebbf971b4376a8320"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5NTI3Ng==", "bodyText": "Updated", "url": "https://github.com/hyperledger/besu/pull/1156#discussion_r446295276", "createdAt": "2020-06-26T16:45:53Z", "author": {"login": "matkt"}, "path": "nat/src/test/java/org/hyperledger/besu/nat/NatServiceTest.java", "diffHunk": "@@ -197,6 +197,24 @@ public void assertThatManagerSwitchToNoneForInvalidNatEnvironment()\n     assertThat(natService.queryLocalIPAddress(fallbackLocalIp)).isEqualTo(fallbackLocalIp);\n   }\n \n+  @Test(expected = RuntimeException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NjY1Mw=="}, "originalCommit": {"oid": "53387c169c72b5ffb2b545cebbf971b4376a8320"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDc1MDM1OnYy", "diffSide": "RIGHT", "path": "nat/src/test/java/org/hyperledger/besu/nat/docker/DockerNatManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjoyOTozNFrOGpnL2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNjo0NjoyN1rOGpnuFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NjgwOA==", "bodyText": "final ?", "url": "https://github.com/hyperledger/besu/pull/1156#discussion_r446286808", "createdAt": "2020-06-26T16:29:34Z", "author": {"login": "abdelhamidbakhta"}, "path": "nat/src/test/java/org/hyperledger/besu/nat/docker/DockerNatManagerTest.java", "diffHunk": "@@ -61,7 +63,14 @@ public void assertThatExternalIPIsEqualToRemoteHost()\n   @Test\n   public void assertThatExternalIPIsEqualToDefaultHostIfIpDetectorCannotRetrieveIP()\n       throws ExecutionException, InterruptedException {\n-    when(hostBasedIpDetector.detectExternalIp()).thenReturn(Optional.empty());\n+    NatManager natManager =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53387c169c72b5ffb2b545cebbf971b4376a8320"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI5NTU3NQ==", "bodyText": "You right . Done", "url": "https://github.com/hyperledger/besu/pull/1156#discussion_r446295575", "createdAt": "2020-06-26T16:46:27Z", "author": {"login": "matkt"}, "path": "nat/src/test/java/org/hyperledger/besu/nat/docker/DockerNatManagerTest.java", "diffHunk": "@@ -61,7 +63,14 @@ public void assertThatExternalIPIsEqualToRemoteHost()\n   @Test\n   public void assertThatExternalIPIsEqualToDefaultHostIfIpDetectorCannotRetrieveIP()\n       throws ExecutionException, InterruptedException {\n-    when(hostBasedIpDetector.detectExternalIp()).thenReturn(Optional.empty());\n+    NatManager natManager =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI4NjgwOA=="}, "originalCommit": {"oid": "53387c169c72b5ffb2b545cebbf971b4376a8320"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 832, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}