{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNDIxMjI5", "number": 1712, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMTo1NzoxN1rOFT24yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxNzoyOTo1M1rOFYgQCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MzY2NTM5OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/query/BlockchainQueriesTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMTo1NzoxN1rOIbjuLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMTo1NzoxN1rOIbjuLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc2NzcyNQ==", "bodyText": "Since BlockDataGenerator changed, the blocks these tests tested had an empty ommer list. I bumped up the number of blocks to get a block with a non empty ommer list.", "url": "https://github.com/hyperledger/besu/pull/1712#discussion_r565767725", "createdAt": "2021-01-28T01:57:17Z", "author": {"login": "RatanRSur"}, "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/query/BlockchainQueriesTest.java", "diffHunk": "@@ -400,7 +400,7 @@ public void getOmmerByBlockHashAndIndexShouldReturnEmptyWhenIndexIsOutOfRange()\n \n   @Test\n   public void getOmmerByBlockHashAndIndexShouldReturnExpectedOmmerHeader() {\n-    final BlockchainWithData data = setupBlockchain(3);\n+    final BlockchainWithData data = setupBlockchain(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "221bf03f08fa8bd749b7525b79e17c39e644edb9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MzY3ODU5OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BodyValidation.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMjowMzo1MVrOIbj2Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMjowMzo1MVrOIbj2Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc2OTczMQ==", "bodyText": "Because i had to be final", "url": "https://github.com/hyperledger/besu/pull/1712#discussion_r565769731", "createdAt": "2021-01-28T02:03:51Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/BodyValidation.java", "diffHunk": "@@ -54,9 +56,15 @@ private static Bytes indexKey(final int i) {\n   public static Hash transactionsRoot(final List<Transaction> transactions) {\n     final MerklePatriciaTrie<Bytes, Bytes> trie = trie();\n \n-    for (int i = 0; i < transactions.size(); ++i) {\n-      trie.put(indexKey(i), RLP.encode(transactions.get(i)::writeTo));\n-    }\n+    IntStream.range(0, transactions.size())\n+        .forEach(\n+            i ->\n+                trie.put(\n+                    indexKey(i),\n+                    RLP.encode(\n+                        rlpOutput ->\n+                            TransactionRLPEncoder.encodeForTransactionTrie(\n+                                transactions.get(i), rlpOutput))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "221bf03f08fa8bd749b7525b79e17c39e644edb9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU2MzY5Mzk1OnYy", "diffSide": "LEFT", "path": "besu/src/test/java/org/hyperledger/besu/PrivacyReorgTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwMjoxMDo0OVrOIbj-vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxNjo0NjowNFrOIeaJkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc3MTk2Nw==", "bodyText": "@lucassaldanha does this make sense? We're testing that the state root hash is EMPTY_ROOT_HASH still.", "url": "https://github.com/hyperledger/besu/pull/1712#discussion_r565771967", "createdAt": "2021-01-28T02:10:49Z", "author": {"login": "RatanRSur"}, "path": "besu/src/test/java/org/hyperledger/besu/PrivacyReorgTest.java", "diffHunk": "@@ -368,8 +367,7 @@ public void reorgToLongerChain() {\n     appendBlock(besuController, blockchain, protocolContext, thirdForkBlock);\n \n     // Check that the private state did change after reorg\n-    assertPrivateStateRoot(\n-        privateStateRootResolver, blockchain, STATE_ROOT_AFTER_TRANSACTION_APPENDED_TO_EMPTY_STATE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f76d513ae4c946153defd64cf58ea96dbdd928c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODE2NzM2Ng==", "bodyText": "I think we might need to take a look at this. My understanding is that at the end, we are adding a 3rd block to the new chain, and that the block contains a PMT.Therefore, I would expect the private state root hash to be different from the empty state root hash (assuming this private tx in the 3rd block was processed and altered the state).\nI'll ask someone from the team to take a look at it.", "url": "https://github.com/hyperledger/besu/pull/1712#discussion_r568167366", "createdAt": "2021-02-01T21:56:17Z", "author": {"login": "lucassaldanha"}, "path": "besu/src/test/java/org/hyperledger/besu/PrivacyReorgTest.java", "diffHunk": "@@ -368,8 +367,7 @@ public void reorgToLongerChain() {\n     appendBlock(besuController, blockchain, protocolContext, thirdForkBlock);\n \n     // Check that the private state did change after reorg\n-    assertPrivateStateRoot(\n-        privateStateRootResolver, blockchain, STATE_ROOT_AFTER_TRANSACTION_APPENDED_TO_EMPTY_STATE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc3MTk2Nw=="}, "originalCommit": {"oid": "3f76d513ae4c946153defd64cf58ea96dbdd928c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODc1NjYyNQ==", "bodyText": "Ok cool, I merged because it had bugfixes important for 1559 but let me know if there's anything more that needs to be done with the test.", "url": "https://github.com/hyperledger/besu/pull/1712#discussion_r568756625", "createdAt": "2021-02-02T16:46:04Z", "author": {"login": "RatanRSur"}, "path": "besu/src/test/java/org/hyperledger/besu/PrivacyReorgTest.java", "diffHunk": "@@ -368,8 +367,7 @@ public void reorgToLongerChain() {\n     appendBlock(besuController, blockchain, protocolContext, thirdForkBlock);\n \n     // Check that the private state did change after reorg\n-    assertPrivateStateRoot(\n-        privateStateRootResolver, blockchain, STATE_ROOT_AFTER_TRANSACTION_APPENDED_TO_EMPTY_STATE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTc3MTk2Nw=="}, "originalCommit": {"oid": "3f76d513ae4c946153defd64cf58ea96dbdd928c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3Nzk3NTg2OnYy", "diffSide": "LEFT", "path": "besu/src/test/java/org/hyperledger/besu/PrivacyReorgTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNDozNzozN1rOIdkK-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNDo0NDowOFrOIdkeYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg3MjI1MQ==", "bodyText": "did you get some feedback ?", "url": "https://github.com/hyperledger/besu/pull/1712#discussion_r567872251", "createdAt": "2021-02-01T14:37:37Z", "author": {"login": "abdelhamidbakhta"}, "path": "besu/src/test/java/org/hyperledger/besu/PrivacyReorgTest.java", "diffHunk": "@@ -80,7 +80,6 @@\n import org.junit.rules.TemporaryFolder;\n \n @SuppressWarnings(\"rawtypes\")\n-// todo request lucas look at this pr", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f76d513ae4c946153defd64cf58ea96dbdd928c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg3NzIxOA==", "bodyText": "I did on that iteration. I'll ping him again for this one. \ud83d\udc4d", "url": "https://github.com/hyperledger/besu/pull/1712#discussion_r567877218", "createdAt": "2021-02-01T14:44:08Z", "author": {"login": "RatanRSur"}, "path": "besu/src/test/java/org/hyperledger/besu/PrivacyReorgTest.java", "diffHunk": "@@ -80,7 +80,6 @@\n import org.junit.rules.TemporaryFolder;\n \n @SuppressWarnings(\"rawtypes\")\n-// todo request lucas look at this pr", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg3MjI1MQ=="}, "originalCommit": {"oid": "3f76d513ae4c946153defd64cf58ea96dbdd928c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU3Nzk4NjEzOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/AccessList.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQxNDozOTo0MVrOIdkRBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMVQyMDoxMTowNFrOIdyk1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg3Mzc5OA==", "bodyText": "Do we have some practices guidelines around using inheritance rather than composition/aggregation ?", "url": "https://github.com/hyperledger/besu/pull/1712#discussion_r567873798", "createdAt": "2021-02-01T14:39:41Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/AccessList.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *\n+ *  * Copyright ConsenSys AG.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  *\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *  *\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+\n+package org.hyperledger.besu.ethereum.core;\n+\n+import static java.util.Collections.emptyList;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class AccessList extends ArrayList<Map.Entry<Address, List<Bytes32>>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f76d513ae4c946153defd64cf58ea96dbdd928c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODEwODI0Ng==", "bodyText": "The reason I did it this way was because I was really looking to do a type alias but java doesn't have them. This was the closest analog.", "url": "https://github.com/hyperledger/besu/pull/1712#discussion_r568108246", "createdAt": "2021-02-01T20:11:04Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/core/AccessList.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *\n+ *  * Copyright ConsenSys AG.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ *  * the License. You may obtain a copy of the License at\n+ *  *\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ *  * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations under the License.\n+ *  *\n+ *  * SPDX-License-Identifier: Apache-2.0\n+ *\n+ */\n+\n+package org.hyperledger.besu.ethereum.core;\n+\n+import static java.util.Collections.emptyList;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+public class AccessList extends ArrayList<Map.Entry<Address, List<Bytes32>>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Nzg3Mzc5OA=="}, "originalCommit": {"oid": "3f76d513ae4c946153defd64cf58ea96dbdd928c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYxMjM4NTM5OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/MessageFrame.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxNzoyOTo1M1rOIiiSrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOVQxNzoyOTo1M1rOIiiSrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzA4NDMzMw==", "bodyText": "@shemnon What are your thoughts on this? Pure rocksdb caching. Should we consider explicit caching for just the access list entries?", "url": "https://github.com/hyperledger/besu/pull/1712#discussion_r573084333", "createdAt": "2021-02-09T17:29:53Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/MessageFrame.java", "diffHunk": "@@ -320,10 +323,27 @@ private MessageFrame(\n     this.transactionHash = transactionHash;\n     this.revertReason = revertReason;\n \n-    this.warmedUpAddresses = new HashSet<>();\n-    warmedUpAddresses.add(sender);\n-    warmedUpAddresses.add(contract);\n-    this.warmedUpStorage = HashMultimap.create();\n+    this.warmedUpAddresses = new HashSet<>(accessListWarmAddresses);\n+    this.warmedUpAddresses.add(sender);\n+    this.warmedUpAddresses.add(contract);\n+    this.warmedUpStorage = HashMultimap.create(accessListWarmStorage);\n+\n+    // the warmed up addresses will always be a superset of the address keys in the warmed up\n+    // storage so we can do both warm ups in one pass\n+    accessListWarmAddresses\n+        .parallelStream()\n+        .forEach(\n+            address ->\n+                Optional.ofNullable(worldState.get(address))\n+                    .ifPresent(\n+                        account ->\n+                            warmedUpStorage\n+                                .get(address)\n+                                .parallelStream()\n+                                .forEach(\n+                                    storageKeyBytes ->\n+                                        account.getStorageValue(\n+                                            UInt256.fromBytes(storageKeyBytes)))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8885d82ee426a628b2102701d81bf482b27083c"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1269, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}