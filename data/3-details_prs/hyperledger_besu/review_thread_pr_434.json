{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTI0OTI4", "number": 434, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjowMjo0OVrODlqDtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjowMjo0OVrODlqDtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwODEyOTgyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMjowMjo0OVrOFyq8ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDo1NDo1NlrOFy7ibA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY3NjcwOQ==", "bodyText": "This appears to be identical to the definition already inherited from Atlantis. Am I missing something, should something have changed or is this just not required?", "url": "https://github.com/hyperledger/besu/pull/434#discussion_r388676709", "createdAt": "2020-03-06T02:02:49Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java", "diffHunk": "@@ -149,19 +149,29 @@\n         .name(\"Agharta\");\n   }\n \n-  public static ProtocolSpecBuilder<Void> aztlanDefinition(\n+  public static ProtocolSpecBuilder<Void> phoenixDefinition(\n       final Optional<BigInteger> chainId,\n       final OptionalInt configContractSizeLimit,\n       final OptionalInt configStackSizeLimit,\n       final boolean enableRevertReason) {\n+    final int contractSizeLimit =\n+        configContractSizeLimit.orElse(MainnetProtocolSpecs.SPURIOUS_DRAGON_CONTRACT_SIZE_LIMIT);\n     return aghartaDefinition(\n             chainId, configContractSizeLimit, configStackSizeLimit, enableRevertReason)\n-        .gasCalculator(AztlanGasCalculator::new)\n+        .gasCalculator(IstanbulGasCalculator::new)\n         .evmBuilder(\n             gasCalculator ->\n-                MainnetEvmRegistries.aztlan(gasCalculator, chainId.orElse(BigInteger.ZERO)))\n+                MainnetEvmRegistries.istanbul(gasCalculator, chainId.orElse(BigInteger.ZERO)))\n         .precompileContractRegistryBuilder(MainnetPrecompiledContractRegistries::istanbul)\n-        .name(\"Aztlan\");\n+        .contractCreationProcessorBuilder(\n+            (gasCalculator, evm) ->\n+                new MainnetContractCreationProcessor(\n+                    gasCalculator,\n+                    evm,\n+                    true,\n+                    Collections.singletonList(MaxCodeSizeRule.of(contractSizeLimit)),\n+                    1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d75e8b0b3ca7ecfff423ed4509e1e24f596097f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4MzM0Nw==", "bodyText": "This is indeed the same as Atlantis. If this isn't specified here, will it automatically use the previous one defined?", "url": "https://github.com/hyperledger/besu/pull/434#discussion_r388683347", "createdAt": "2020-03-06T02:29:41Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java", "diffHunk": "@@ -149,19 +149,29 @@\n         .name(\"Agharta\");\n   }\n \n-  public static ProtocolSpecBuilder<Void> aztlanDefinition(\n+  public static ProtocolSpecBuilder<Void> phoenixDefinition(\n       final Optional<BigInteger> chainId,\n       final OptionalInt configContractSizeLimit,\n       final OptionalInt configStackSizeLimit,\n       final boolean enableRevertReason) {\n+    final int contractSizeLimit =\n+        configContractSizeLimit.orElse(MainnetProtocolSpecs.SPURIOUS_DRAGON_CONTRACT_SIZE_LIMIT);\n     return aghartaDefinition(\n             chainId, configContractSizeLimit, configStackSizeLimit, enableRevertReason)\n-        .gasCalculator(AztlanGasCalculator::new)\n+        .gasCalculator(IstanbulGasCalculator::new)\n         .evmBuilder(\n             gasCalculator ->\n-                MainnetEvmRegistries.aztlan(gasCalculator, chainId.orElse(BigInteger.ZERO)))\n+                MainnetEvmRegistries.istanbul(gasCalculator, chainId.orElse(BigInteger.ZERO)))\n         .precompileContractRegistryBuilder(MainnetPrecompiledContractRegistries::istanbul)\n-        .name(\"Aztlan\");\n+        .contractCreationProcessorBuilder(\n+            (gasCalculator, evm) ->\n+                new MainnetContractCreationProcessor(\n+                    gasCalculator,\n+                    evm,\n+                    true,\n+                    Collections.singletonList(MaxCodeSizeRule.of(contractSizeLimit)),\n+                    1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY3NjcwOQ=="}, "originalCommit": {"oid": "8d75e8b0b3ca7ecfff423ed4509e1e24f596097f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY4Mzk4MQ==", "bodyText": "Yes.  You should only need to specify the changes between each milestone.  So the only time you'd have two milestones with the same declaration is if something changed and then changed back (you'd have to override the changed version back to the original).", "url": "https://github.com/hyperledger/besu/pull/434#discussion_r388683981", "createdAt": "2020-03-06T02:32:22Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java", "diffHunk": "@@ -149,19 +149,29 @@\n         .name(\"Agharta\");\n   }\n \n-  public static ProtocolSpecBuilder<Void> aztlanDefinition(\n+  public static ProtocolSpecBuilder<Void> phoenixDefinition(\n       final Optional<BigInteger> chainId,\n       final OptionalInt configContractSizeLimit,\n       final OptionalInt configStackSizeLimit,\n       final boolean enableRevertReason) {\n+    final int contractSizeLimit =\n+        configContractSizeLimit.orElse(MainnetProtocolSpecs.SPURIOUS_DRAGON_CONTRACT_SIZE_LIMIT);\n     return aghartaDefinition(\n             chainId, configContractSizeLimit, configStackSizeLimit, enableRevertReason)\n-        .gasCalculator(AztlanGasCalculator::new)\n+        .gasCalculator(IstanbulGasCalculator::new)\n         .evmBuilder(\n             gasCalculator ->\n-                MainnetEvmRegistries.aztlan(gasCalculator, chainId.orElse(BigInteger.ZERO)))\n+                MainnetEvmRegistries.istanbul(gasCalculator, chainId.orElse(BigInteger.ZERO)))\n         .precompileContractRegistryBuilder(MainnetPrecompiledContractRegistries::istanbul)\n-        .name(\"Aztlan\");\n+        .contractCreationProcessorBuilder(\n+            (gasCalculator, evm) ->\n+                new MainnetContractCreationProcessor(\n+                    gasCalculator,\n+                    evm,\n+                    true,\n+                    Collections.singletonList(MaxCodeSizeRule.of(contractSizeLimit)),\n+                    1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY3NjcwOQ=="}, "originalCommit": {"oid": "8d75e8b0b3ca7ecfff423ed4509e1e24f596097f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0ODU4OA==", "bodyText": "Ok, this makes sense, I didn't think in was required, but I was following the pattern in MainnetProtocolSpec where contractCreationProcessBuilder is defined for SpuriouDragon then with the same definition for Istanbul without any changes is between.  I wasn't sure why that was done, but I followed that pattern.  I'll remove it from Phoenix since it has already been defined.", "url": "https://github.com/hyperledger/besu/pull/434#discussion_r388948588", "createdAt": "2020-03-06T14:54:56Z", "author": {"login": "edwardmack"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/ClassicProtocolSpecs.java", "diffHunk": "@@ -149,19 +149,29 @@\n         .name(\"Agharta\");\n   }\n \n-  public static ProtocolSpecBuilder<Void> aztlanDefinition(\n+  public static ProtocolSpecBuilder<Void> phoenixDefinition(\n       final Optional<BigInteger> chainId,\n       final OptionalInt configContractSizeLimit,\n       final OptionalInt configStackSizeLimit,\n       final boolean enableRevertReason) {\n+    final int contractSizeLimit =\n+        configContractSizeLimit.orElse(MainnetProtocolSpecs.SPURIOUS_DRAGON_CONTRACT_SIZE_LIMIT);\n     return aghartaDefinition(\n             chainId, configContractSizeLimit, configStackSizeLimit, enableRevertReason)\n-        .gasCalculator(AztlanGasCalculator::new)\n+        .gasCalculator(IstanbulGasCalculator::new)\n         .evmBuilder(\n             gasCalculator ->\n-                MainnetEvmRegistries.aztlan(gasCalculator, chainId.orElse(BigInteger.ZERO)))\n+                MainnetEvmRegistries.istanbul(gasCalculator, chainId.orElse(BigInteger.ZERO)))\n         .precompileContractRegistryBuilder(MainnetPrecompiledContractRegistries::istanbul)\n-        .name(\"Aztlan\");\n+        .contractCreationProcessorBuilder(\n+            (gasCalculator, evm) ->\n+                new MainnetContractCreationProcessor(\n+                    gasCalculator,\n+                    evm,\n+                    true,\n+                    Collections.singletonList(MaxCodeSizeRule.of(contractSizeLimit)),\n+                    1))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY3NjcwOQ=="}, "originalCommit": {"oid": "8d75e8b0b3ca7ecfff423ed4509e1e24f596097f"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1141, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}