{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NDU1MDcw", "number": 1691, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDoxNjo0NlrOFLGNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMToxMDoxOVrOFLG2_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTgwMzkxOnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/messagedata/QbftV1.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDoxNjo0NlrOIOFumw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDo0OToyMlrOIOGTyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0NDgyNw==", "bodyText": "doco .... refers to iBFT v2. Is that intentional?", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551644827", "createdAt": "2021-01-05T00:16:46Z", "author": {"login": "usmansaleem"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/messagedata/QbftV1.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.messagedata;\n+\n+/** Message codes for iBFT v2 messages */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NDM0Nw==", "bodyText": "oops - updated to say QBFT V1", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551654347", "createdAt": "2021-01-05T00:49:22Z", "author": {"login": "rain-on"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/messagedata/QbftV1.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.messagedata;\n+\n+/** Message codes for iBFT v2 messages */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0NDgyNw=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTgwNTMwOnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/messagedata/QbftV1.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDoxNzoyN1rOIOFvaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMTowNToyMlrOIOGldw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0NTAzNQ==", "bodyText": "nit: unnecessary space.", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551645035", "createdAt": "2021-01-05T00:17:27Z", "author": {"login": "usmansaleem"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/messagedata/QbftV1.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.messagedata;\n+\n+/** Message codes for iBFT v2 messages */\n+public class QbftV1 {\n+  public static final int PROPOSAL = 0;\n+  public static final int PREPARE = 1;\n+  public static final int COMMIT = 2;\n+  public static final int ROUND_CHANGE = 3;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NDQzNw==", "bodyText": "kinda like the space - the numbers above are the msgs we use, the MESSAGE_SPACE is a slightly different concept.", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551654437", "createdAt": "2021-01-05T00:49:44Z", "author": {"login": "rain-on"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/messagedata/QbftV1.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.messagedata;\n+\n+/** Message codes for iBFT v2 messages */\n+public class QbftV1 {\n+  public static final int PROPOSAL = 0;\n+  public static final int PREPARE = 1;\n+  public static final int COMMIT = 2;\n+  public static final int ROUND_CHANGE = 3;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0NTAzNQ=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1ODg3MQ==", "bodyText": "in that case, its alright.", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551658871", "createdAt": "2021-01-05T01:05:22Z", "author": {"login": "usmansaleem"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/messagedata/QbftV1.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.messagedata;\n+\n+/** Message codes for iBFT v2 messages */\n+public class QbftV1 {\n+  public static final int PROPOSAL = 0;\n+  public static final int PREPARE = 1;\n+  public static final int COMMIT = 2;\n+  public static final int ROUND_CHANGE = 3;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0NTAzNQ=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTgxMTk2OnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/CommitPayload.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDoyMDoyNVrOIOFzGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDoyMToyM1rOIOF0RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0NTk3OQ==", "bodyText": "does it make sense to wrap these in try/finally block (where finally block contains rlpInput.leaveList())? Or this area is meant to be exception free always.", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551645979", "createdAt": "2021-01-05T00:20:25Z", "author": {"login": "usmansaleem"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/CommitPayload.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.ConsensusRoundIdentifier;\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.qbft.messagedata.QbftV1;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+import org.hyperledger.besu.ethereum.rlp.RLPOutput;\n+\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+public class CommitPayload implements Payload {\n+  private static final int TYPE = QbftV1.COMMIT;\n+  private final ConsensusRoundIdentifier roundIdentifier;\n+  private final Hash digest;\n+  private final Signature commitSeal;\n+\n+  public CommitPayload(\n+      final ConsensusRoundIdentifier roundIdentifier,\n+      final Hash digest,\n+      final Signature commitSeal) {\n+    this.roundIdentifier = roundIdentifier;\n+    this.digest = digest;\n+    this.commitSeal = commitSeal;\n+  }\n+\n+  public static CommitPayload readFrom(final RLPInput rlpInput) {\n+    rlpInput.enterList();\n+    final ConsensusRoundIdentifier roundIdentifier = ConsensusRoundIdentifier.readFrom(rlpInput);\n+    final Hash digest = Payload.readDigest(rlpInput);\n+    final Signature commitSeal = rlpInput.readBytes(Signature::decode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0NjI3Ng==", "bodyText": "nvm ... I misread the method ... its readFrom the rlpInput.", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551646276", "createdAt": "2021-01-05T00:21:23Z", "author": {"login": "usmansaleem"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/CommitPayload.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.ConsensusRoundIdentifier;\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.qbft.messagedata.QbftV1;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+import org.hyperledger.besu.ethereum.rlp.RLPOutput;\n+\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+public class CommitPayload implements Payload {\n+  private static final int TYPE = QbftV1.COMMIT;\n+  private final ConsensusRoundIdentifier roundIdentifier;\n+  private final Hash digest;\n+  private final Signature commitSeal;\n+\n+  public CommitPayload(\n+      final ConsensusRoundIdentifier roundIdentifier,\n+      final Hash digest,\n+      final Signature commitSeal) {\n+    this.roundIdentifier = roundIdentifier;\n+    this.digest = digest;\n+    this.commitSeal = commitSeal;\n+  }\n+\n+  public static CommitPayload readFrom(final RLPInput rlpInput) {\n+    rlpInput.enterList();\n+    final ConsensusRoundIdentifier roundIdentifier = ConsensusRoundIdentifier.readFrom(rlpInput);\n+    final Hash digest = Payload.readDigest(rlpInput);\n+    final Signature commitSeal = rlpInput.readBytes(Signature::decode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0NTk3OQ=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTg3NzM3OnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/MessageFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDo1MzowOVrOIOGYDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMToxMTo1MVrOIOGsYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTQzOQ==", "bodyText": "nit: some unnecessary extra blank lines", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551655439", "createdAt": "2021-01-05T00:53:09Z", "author": {"login": "jframe"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/MessageFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.ConsensusRoundIdentifier;\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.consensus.qbft.messagewrappers.Commit;\n+import org.hyperledger.besu.consensus.qbft.messagewrappers.Prepare;\n+import org.hyperledger.besu.crypto.NodeKey;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Util;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class MessageFactory {\n+\n+  private final NodeKey nodeKey;\n+\n+  public MessageFactory(final NodeKey nodeKey) {\n+    this.nodeKey = nodeKey;\n+  }\n+\n+  public Prepare createPrepare(final ConsensusRoundIdentifier roundIdentifier, final Hash digest) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MDY0Mw==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551660643", "createdAt": "2021-01-05T01:11:51Z", "author": {"login": "rain-on"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/MessageFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.ConsensusRoundIdentifier;\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.consensus.qbft.messagewrappers.Commit;\n+import org.hyperledger.besu.consensus.qbft.messagewrappers.Prepare;\n+import org.hyperledger.besu.crypto.NodeKey;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Util;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class MessageFactory {\n+\n+  private final NodeKey nodeKey;\n+\n+  public MessageFactory(final NodeKey nodeKey) {\n+    this.nodeKey = nodeKey;\n+  }\n+\n+  public Prepare createPrepare(final ConsensusRoundIdentifier roundIdentifier, final Hash digest) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTQzOQ=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTg3NzU2OnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/MessageFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDo1MzoxNlrOIOGYLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMToxMTo1NlrOIOGsdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTQ2OA==", "bodyText": "nit: some unnecessary extra blank lines", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551655468", "createdAt": "2021-01-05T00:53:16Z", "author": {"login": "jframe"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/MessageFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.ConsensusRoundIdentifier;\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.consensus.qbft.messagewrappers.Commit;\n+import org.hyperledger.besu.consensus.qbft.messagewrappers.Prepare;\n+import org.hyperledger.besu.crypto.NodeKey;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Util;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class MessageFactory {\n+\n+  private final NodeKey nodeKey;\n+\n+  public MessageFactory(final NodeKey nodeKey) {\n+    this.nodeKey = nodeKey;\n+  }\n+\n+  public Prepare createPrepare(final ConsensusRoundIdentifier roundIdentifier, final Hash digest) {\n+\n+    final PreparePayload payload = new PreparePayload(roundIdentifier, digest);\n+\n+    return new Prepare(createSignedMessage(payload));\n+  }\n+\n+  public Commit createCommit(\n+      final ConsensusRoundIdentifier roundIdentifier,\n+      final Hash digest,\n+      final Signature commitSeal) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MDY2MQ==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551660661", "createdAt": "2021-01-05T01:11:56Z", "author": {"login": "rain-on"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/MessageFactory.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.ConsensusRoundIdentifier;\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.consensus.qbft.messagewrappers.Commit;\n+import org.hyperledger.besu.consensus.qbft.messagewrappers.Prepare;\n+import org.hyperledger.besu.crypto.NodeKey;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Util;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public class MessageFactory {\n+\n+  private final NodeKey nodeKey;\n+\n+  public MessageFactory(final NodeKey nodeKey) {\n+    this.nodeKey = nodeKey;\n+  }\n+\n+  public Prepare createPrepare(final ConsensusRoundIdentifier roundIdentifier, final Hash digest) {\n+\n+    final PreparePayload payload = new PreparePayload(roundIdentifier, digest);\n+\n+    return new Prepare(createSignedMessage(payload));\n+  }\n+\n+  public Commit createCommit(\n+      final ConsensusRoundIdentifier roundIdentifier,\n+      final Hash digest,\n+      final Signature commitSeal) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTQ2OA=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTg3Nzg2OnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDo1MzoyM1rOIOGYVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMToxMjozMlrOIOGtHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTUwOQ==", "bodyText": "nit: some unnecessary extra blank lines", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551655509", "createdAt": "2021-01-05T00:53:23Z", "author": {"login": "jframe"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Util;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+\n+public class PayloadDeserializers {\n+\n+  public static SignedData<PreparePayload> readSignedPreparePayloadFrom(final RLPInput rlpInput) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MDgzMA==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551660830", "createdAt": "2021-01-05T01:12:32Z", "author": {"login": "rain-on"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Util;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+\n+public class PayloadDeserializers {\n+\n+  public static SignedData<PreparePayload> readSignedPreparePayloadFrom(final RLPInput rlpInput) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTUwOQ=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTg3ODA5OnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDo1MzoyN1rOIOGYcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMToxMjo0MFrOIOGtQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTUzOQ==", "bodyText": "nit: some unnecessary extra blank lines", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551655539", "createdAt": "2021-01-05T00:53:27Z", "author": {"login": "jframe"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Util;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+\n+public class PayloadDeserializers {\n+\n+  public static SignedData<PreparePayload> readSignedPreparePayloadFrom(final RLPInput rlpInput) {\n+\n+    rlpInput.enterList();\n+    final PreparePayload unsignedMessageData = PreparePayload.readFrom(rlpInput);\n+    final Signature signature = readSignature(rlpInput);\n+    rlpInput.leaveList();\n+\n+    return from(unsignedMessageData, signature);\n+  }\n+\n+  public static SignedData<CommitPayload> readSignedCommitPayloadFrom(final RLPInput rlpInput) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MDg2NQ==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551660865", "createdAt": "2021-01-05T01:12:40Z", "author": {"login": "rain-on"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Util;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+\n+public class PayloadDeserializers {\n+\n+  public static SignedData<PreparePayload> readSignedPreparePayloadFrom(final RLPInput rlpInput) {\n+\n+    rlpInput.enterList();\n+    final PreparePayload unsignedMessageData = PreparePayload.readFrom(rlpInput);\n+    final Signature signature = readSignature(rlpInput);\n+    rlpInput.leaveList();\n+\n+    return from(unsignedMessageData, signature);\n+  }\n+\n+  public static SignedData<CommitPayload> readSignedCommitPayloadFrom(final RLPInput rlpInput) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTUzOQ=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTg3ODI2OnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDo1MzozM1rOIOGYjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDo1MzozM1rOIOGYjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTU2NQ==", "bodyText": "nit: some unnecessary extra blank lines", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551655565", "createdAt": "2021-01-05T00:53:33Z", "author": {"login": "jframe"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Util;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+\n+public class PayloadDeserializers {\n+\n+  public static SignedData<PreparePayload> readSignedPreparePayloadFrom(final RLPInput rlpInput) {\n+\n+    rlpInput.enterList();\n+    final PreparePayload unsignedMessageData = PreparePayload.readFrom(rlpInput);\n+    final Signature signature = readSignature(rlpInput);\n+    rlpInput.leaveList();\n+\n+    return from(unsignedMessageData, signature);\n+  }\n+\n+  public static SignedData<CommitPayload> readSignedCommitPayloadFrom(final RLPInput rlpInput) {\n+\n+    rlpInput.enterList();\n+    final CommitPayload unsignedMessageData = CommitPayload.readFrom(rlpInput);\n+    final Signature signature = readSignature(rlpInput);\n+    rlpInput.leaveList();\n+\n+    return from(unsignedMessageData, signature);\n+  }\n+\n+  protected static <M extends Payload> SignedData<M> from(\n+      final M unsignedMessageData, final Signature signature) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTg3ODQ5OnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDo1MzozOFrOIOGYrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMToxMjo0N1rOIOGtWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTU5OA==", "bodyText": "nit: some unnecessary extra blank lines", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551655598", "createdAt": "2021-01-05T00:53:38Z", "author": {"login": "jframe"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Util;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+\n+public class PayloadDeserializers {\n+\n+  public static SignedData<PreparePayload> readSignedPreparePayloadFrom(final RLPInput rlpInput) {\n+\n+    rlpInput.enterList();\n+    final PreparePayload unsignedMessageData = PreparePayload.readFrom(rlpInput);\n+    final Signature signature = readSignature(rlpInput);\n+    rlpInput.leaveList();\n+\n+    return from(unsignedMessageData, signature);\n+  }\n+\n+  public static SignedData<CommitPayload> readSignedCommitPayloadFrom(final RLPInput rlpInput) {\n+\n+    rlpInput.enterList();\n+    final CommitPayload unsignedMessageData = CommitPayload.readFrom(rlpInput);\n+    final Signature signature = readSignature(rlpInput);\n+    rlpInput.leaveList();\n+\n+    return from(unsignedMessageData, signature);\n+  }\n+\n+  protected static <M extends Payload> SignedData<M> from(\n+      final M unsignedMessageData, final Signature signature) {\n+\n+    final Address sender = recoverSender(unsignedMessageData, signature);\n+\n+    return new SignedData<>(unsignedMessageData, sender, signature);\n+  }\n+\n+  protected static Signature readSignature(final RLPInput signedMessage) {\n+    return signedMessage.readBytes(Signature::decode);\n+  }\n+\n+  protected static Address recoverSender(\n+      final Payload unsignedMessageData, final Signature signature) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MDg4OA==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551660888", "createdAt": "2021-01-05T01:12:47Z", "author": {"login": "rain-on"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PayloadDeserializers.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.common.bft.payload.SignedData;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Util;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+\n+public class PayloadDeserializers {\n+\n+  public static SignedData<PreparePayload> readSignedPreparePayloadFrom(final RLPInput rlpInput) {\n+\n+    rlpInput.enterList();\n+    final PreparePayload unsignedMessageData = PreparePayload.readFrom(rlpInput);\n+    final Signature signature = readSignature(rlpInput);\n+    rlpInput.leaveList();\n+\n+    return from(unsignedMessageData, signature);\n+  }\n+\n+  public static SignedData<CommitPayload> readSignedCommitPayloadFrom(final RLPInput rlpInput) {\n+\n+    rlpInput.enterList();\n+    final CommitPayload unsignedMessageData = CommitPayload.readFrom(rlpInput);\n+    final Signature signature = readSignature(rlpInput);\n+    rlpInput.leaveList();\n+\n+    return from(unsignedMessageData, signature);\n+  }\n+\n+  protected static <M extends Payload> SignedData<M> from(\n+      final M unsignedMessageData, final Signature signature) {\n+\n+    final Address sender = recoverSender(unsignedMessageData, signature);\n+\n+    return new SignedData<>(unsignedMessageData, sender, signature);\n+  }\n+\n+  protected static Signature readSignature(final RLPInput signedMessage) {\n+    return signedMessage.readBytes(Signature::decode);\n+  }\n+\n+  protected static Address recoverSender(\n+      final Payload unsignedMessageData, final Signature signature) {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY1NTU5OA=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTkwODk1OnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PreparePayload.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMTowOToyNVrOIOGqIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMToxMzozN1rOIOGuKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MDA2NA==", "bodyText": "Leaving sender out for now? We can always add it in easily I guess it becomes a required field", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551660064", "createdAt": "2021-01-05T01:09:25Z", "author": {"login": "jframe"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PreparePayload.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.ConsensusRoundIdentifier;\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.qbft.messagedata.QbftV1;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+import org.hyperledger.besu.ethereum.rlp.RLPOutput;\n+\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+public class PreparePayload implements Payload {\n+  private static final int TYPE = QbftV1.PREPARE;\n+  private final ConsensusRoundIdentifier roundIdentifier;\n+  private final Hash digest;\n+\n+  public PreparePayload(final ConsensusRoundIdentifier roundIdentifier, final Hash digest) {\n+    this.roundIdentifier = roundIdentifier;\n+    this.digest = digest;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MTA5OA==", "bodyText": "I'd like to leave it out - i.e. it shouldn't need to go \"on the line\" - it can be derived from the signature.", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551661098", "createdAt": "2021-01-05T01:13:37Z", "author": {"login": "rain-on"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/PreparePayload.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.ConsensusRoundIdentifier;\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.qbft.messagedata.QbftV1;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+import org.hyperledger.besu.ethereum.rlp.RLPOutput;\n+\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+public class PreparePayload implements Payload {\n+  private static final int TYPE = QbftV1.PREPARE;\n+  private final ConsensusRoundIdentifier roundIdentifier;\n+  private final Hash digest;\n+\n+  public PreparePayload(final ConsensusRoundIdentifier roundIdentifier, final Hash digest) {\n+    this.roundIdentifier = roundIdentifier;\n+    this.digest = digest;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MDA2NA=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTkxMDM4OnYy", "diffSide": "RIGHT", "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/CommitPayload.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMToxMDoxOVrOIOGq-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMToxMzo0MlrOIOGuPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MDI4Mw==", "bodyText": "Leaving sender out for now?", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551660283", "createdAt": "2021-01-05T01:10:19Z", "author": {"login": "jframe"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/CommitPayload.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.ConsensusRoundIdentifier;\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.qbft.messagedata.QbftV1;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+import org.hyperledger.besu.ethereum.rlp.RLPOutput;\n+\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+public class CommitPayload implements Payload {\n+  private static final int TYPE = QbftV1.COMMIT;\n+  private final ConsensusRoundIdentifier roundIdentifier;\n+  private final Hash digest;\n+  private final Signature commitSeal;\n+\n+  public CommitPayload(\n+      final ConsensusRoundIdentifier roundIdentifier,\n+      final Hash digest,\n+      final Signature commitSeal) {\n+    this.roundIdentifier = roundIdentifier;\n+    this.digest = digest;\n+    this.commitSeal = commitSeal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MTExNg==", "bodyText": "see above.", "url": "https://github.com/hyperledger/besu/pull/1691#discussion_r551661116", "createdAt": "2021-01-05T01:13:42Z", "author": {"login": "rain-on"}, "path": "consensus/qbft/src/main/java/org/hyperledger/besu/consensus/qbft/payload/CommitPayload.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.consensus.qbft.payload;\n+\n+import org.hyperledger.besu.consensus.common.bft.ConsensusRoundIdentifier;\n+import org.hyperledger.besu.consensus.common.bft.payload.Payload;\n+import org.hyperledger.besu.consensus.qbft.messagedata.QbftV1;\n+import org.hyperledger.besu.crypto.SECP256K1.Signature;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.RLPInput;\n+import org.hyperledger.besu.ethereum.rlp.RLPOutput;\n+\n+import java.util.Objects;\n+import java.util.StringJoiner;\n+\n+public class CommitPayload implements Payload {\n+  private static final int TYPE = QbftV1.COMMIT;\n+  private final ConsensusRoundIdentifier roundIdentifier;\n+  private final Hash digest;\n+  private final Signature commitSeal;\n+\n+  public CommitPayload(\n+      final ConsensusRoundIdentifier roundIdentifier,\n+      final Hash digest,\n+      final Signature commitSeal) {\n+    this.roundIdentifier = roundIdentifier;\n+    this.digest = digest;\n+    this.commitSeal = commitSeal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY2MDI4Mw=="}, "originalCommit": {"oid": "f81a38bd8a283968474acb608eeec30266a45d9a"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1256, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}