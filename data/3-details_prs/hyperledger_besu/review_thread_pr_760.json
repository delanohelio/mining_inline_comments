{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2ODc0MjEx", "number": 760, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTozMDozMFrOD25_Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1MDozMlrOD580Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODk5NzgyOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTozMDozMFrOGM4jbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTozMDozMFrOGM4jbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE2MjY2OA==", "bodyText": "Static seems highly suspicious here.  What if there are two Besu's in the same process?  Probably should either pass the instance into each created Updater instance or just not make Updater a static inner class.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r416162668", "createdAt": "2020-04-27T21:30:30Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -83,12 +89,35 @@ public boolean isWorldStateAvailable(final Bytes32 rootHash) {\n \n   @Override\n   public Updater updater() {\n-    return new Updater(keyValueStorage.startTransaction(), nodeAddedListeners);\n+    return new Updater(lock, keyValueStorage.startTransaction(), nodeAddedListeners);\n   }\n \n+  static final AtomicReference<Optional<byte[]>> doomedKeyRef =\n+      new AtomicReference<>(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a717ce1a7f56df74adb67074b3bdc0da1f49b5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4OTQ4ODYxOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMDowNzoyMlrOGM80sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMzozMjoyMVrOGNUMPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIzMjYyNg==", "bodyText": "I can't work out how this helps with the threading issue.  The bug would be a lot less likely to occur because there's now a second check done but I don't see what's guaranteeing the threading order to guarantee that a transaction isn't adding the key between when we do doomedKeyReft.get().ifPresent and the actual deletion of the key.\nIs there some detail of RocksDB threading and locking I'm missing?", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r416232626", "createdAt": "2020-04-28T00:07:22Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -86,9 +89,32 @@ public Updater updater() {\n     return new Updater(keyValueStorage.startTransaction(), nodeAddedListeners);\n   }\n \n+  static final AtomicReference<Optional<byte[]>> doomedKeyRef =\n+      new AtomicReference<>(Optional.empty());\n+\n   @Override\n   public long prune(final Predicate<byte[]> inUseCheck) {\n-    return keyValueStorage.removeAllKeysUnless(inUseCheck);\n+    final AtomicInteger prunedKeys = new AtomicInteger(0);\n+    try (final Stream<byte[]> keys = keyValueStorage.streamKeys()) {\n+      keys.forEach(\n+          key -> {\n+            doomedKeyRef.set(Optional.of(key));\n+            if (!inUseCheck.test(key)) {\n+              // even though we just set this above, we might unset it in commit below to prevent\n+              // thread interleaving from causing an erroneous deletion\n+              doomedKeyRef\n+                  .get()\n+                  .ifPresent(\n+                      doomedKey -> {\n+                        keyValueStorage.delete(doomedKey);\n+                        prunedKeys.incrementAndGet();\n+                      });\n+            }\n+            doomedKeyRef.set(Optional.empty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dbafe91750872591f083a61d7a2af99b88b4836"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYxNTQ4NA==", "bodyText": "Nope, you're right. I just brain farted.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r416615484", "createdAt": "2020-04-28T13:32:21Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -86,9 +89,32 @@ public Updater updater() {\n     return new Updater(keyValueStorage.startTransaction(), nodeAddedListeners);\n   }\n \n+  static final AtomicReference<Optional<byte[]>> doomedKeyRef =\n+      new AtomicReference<>(Optional.empty());\n+\n   @Override\n   public long prune(final Predicate<byte[]> inUseCheck) {\n-    return keyValueStorage.removeAllKeysUnless(inUseCheck);\n+    final AtomicInteger prunedKeys = new AtomicInteger(0);\n+    try (final Stream<byte[]> keys = keyValueStorage.streamKeys()) {\n+      keys.forEach(\n+          key -> {\n+            doomedKeyRef.set(Optional.of(key));\n+            if (!inUseCheck.test(key)) {\n+              // even though we just set this above, we might unset it in commit below to prevent\n+              // thread interleaving from causing an erroneous deletion\n+              doomedKeyRef\n+                  .get()\n+                  .ifPresent(\n+                      doomedKey -> {\n+                        keyValueStorage.delete(doomedKey);\n+                        prunedKeys.incrementAndGet();\n+                      });\n+            }\n+            doomedKeyRef.set(Optional.empty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIzMjYyNg=="}, "originalCommit": {"oid": "8dbafe91750872591f083a61d7a2af99b88b4836"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjkwNDgwOnYy", "diffSide": "RIGHT", "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo0MjowM1rOGOCRJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo1MjowMlrOGOFg_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3MDQwNg==", "bodyText": "(style) I'd suggest checking here if the exception indicates an immediate failure, and throwing a more specific StorageException like FailedOperationStorageException extends StorageException.  And otherwise throwing the generic StorageException.  This \"incomplete\" field is only used in one place, so I think its a lot clearer to just create a specific exception here where we need it.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417370406", "createdAt": "2020-04-29T14:42:03Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "diffHunk": "@@ -165,36 +167,25 @@ public ColumnFamilyHandle getSegmentIdentifierByName(final SegmentIdentifier seg\n   }\n \n   @Override\n-  public long removeAllKeysUnless(\n-      final ColumnFamilyHandle segmentHandle, final Predicate<byte[]> inUseCheck) {\n-    long removedNodeCounter = 0;\n-    try (final RocksIterator rocksIterator = db.newIterator(segmentHandle)) {\n-      for (rocksIterator.seekToFirst(); rocksIterator.isValid(); rocksIterator.next()) {\n-        final byte[] key = rocksIterator.key();\n-        if (!inUseCheck.test(key)) {\n-          removedNodeCounter++;\n-          db.delete(segmentHandle, key);\n-        }\n-      }\n-    } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n+  public Stream<byte[]> streamKeys(final ColumnFamilyHandle segmentHandle) {\n+    final RocksIterator rocksIterator = db.newIterator(segmentHandle);\n+    rocksIterator.seekToFirst();\n+    return RocksDbKeyIterator.create(rocksIterator).toStream();\n+  }\n+\n+  @Override\n+  public void tryDelete(final ColumnFamilyHandle segmentHandle, final byte[] key) {\n+    try {\n+      db.delete(segmentHandle, tryDeleteOptions, key);\n+    } catch (RocksDBException e) {\n+      throw RocksDBExceptionAdapter.createStorageException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyMzYxNA==", "bodyText": "You're right, that would be a lot cleaner.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417423614", "createdAt": "2020-04-29T15:52:02Z", "author": {"login": "RatanRSur"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "diffHunk": "@@ -165,36 +167,25 @@ public ColumnFamilyHandle getSegmentIdentifierByName(final SegmentIdentifier seg\n   }\n \n   @Override\n-  public long removeAllKeysUnless(\n-      final ColumnFamilyHandle segmentHandle, final Predicate<byte[]> inUseCheck) {\n-    long removedNodeCounter = 0;\n-    try (final RocksIterator rocksIterator = db.newIterator(segmentHandle)) {\n-      for (rocksIterator.seekToFirst(); rocksIterator.isValid(); rocksIterator.next()) {\n-        final byte[] key = rocksIterator.key();\n-        if (!inUseCheck.test(key)) {\n-          removedNodeCounter++;\n-          db.delete(segmentHandle, key);\n-        }\n-      }\n-    } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n+  public Stream<byte[]> streamKeys(final ColumnFamilyHandle segmentHandle) {\n+    final RocksIterator rocksIterator = db.newIterator(segmentHandle);\n+    rocksIterator.seekToFirst();\n+    return RocksDbKeyIterator.create(rocksIterator).toStream();\n+  }\n+\n+  @Override\n+  public void tryDelete(final ColumnFamilyHandle segmentHandle, final byte[] key) {\n+    try {\n+      db.delete(segmentHandle, tryDeleteOptions, key);\n+    } catch (RocksDBException e) {\n+      throw RocksDBExceptionAdapter.createStorageException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3MDQwNg=="}, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NjkyMDA4OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo0NTowNVrOGOCayA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo0NTowNVrOGOCayA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3Mjg3Mg==", "bodyText": "We should add some more explanation about what \"tryDelete\" means and how it's intended to work.  I'd also suggest adding a \"@throws FailedOperationException if the delete operation cannot be immediately executed without waiting on outstanding transactions to be committed\" or similar + a good description.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417372872", "createdAt": "2020-04-29T14:45:05Z", "author": {"login": "mbaxter"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "diffHunk": "@@ -61,15 +62,18 @@\n   Optional<byte[]> get(byte[] key) throws StorageException;\n \n   /**\n-   * Performs an evaluation against each key in the store, keeping the entries that pass, removing\n-   * those that fail.\n+   * Returns a stream of all keys.\n    *\n-   * @param retainCondition predicate to evaluate each key against, unless the result is {@code\n-   *     null}, both the key and associated value must be removed.\n-   * @return the number of keys removed.\n-   * @throws StorageException problem encountered when removing data.\n+   * @return A stream of all keys in storage.\n    */\n-  long removeAllKeysUnless(Predicate<byte[]> retainCondition) throws StorageException;\n+  Stream<byte[]> streamKeys();\n+\n+  /**\n+   * Delete the value corresponding to the given key.\n+   *\n+   * @param key The key to delete.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Njk0MzQzOnYy", "diffSide": "RIGHT", "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1MDowMlrOGOCp4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1MDowMlrOGOCp4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3NjczNg==", "bodyText": "I believe you'll need to close these options inside of the close() method: tryDeleteOptions.close()", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417376736", "createdAt": "2020-04-29T14:50:02Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "diffHunk": "@@ -73,6 +75,7 @@\n   private final AtomicBoolean closed = new AtomicBoolean(false);\n   private final Map<String, ColumnFamilyHandle> columnHandlesByName;\n   private final RocksDBMetrics metrics;\n+  private final WriteOptions tryDeleteOptions = new WriteOptions().setNoSlowdown(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Njk0NTI1OnYy", "diffSide": "RIGHT", "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/unsegmented/RocksDBKeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1MDozMlrOGOCrHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1MDozMlrOGOCrHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3NzA1NQ==", "bodyText": "I believe you'll need to close these options inside of the close() method: tryDeleteOptions.close()", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417377055", "createdAt": "2020-04-29T14:50:32Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/unsegmented/RocksDBKeyValueStorage.java", "diffHunk": "@@ -56,6 +60,7 @@\n   private final TransactionDB db;\n   private final AtomicBoolean closed = new AtomicBoolean(false);\n   private final RocksDBMetrics rocksDBMetrics;\n+  private final WriteOptions tryDeleteOptions = new WriteOptions().setNoSlowdown(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Njk1MTkxOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1MTo1MVrOGOCvTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1MTo1MVrOGOCvTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM3ODEyNQ==", "bodyText": "This key wasn't actually pruned if we caught and ignored the StorageException.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417378125", "createdAt": "2020-04-29T14:51:51Z", "author": {"login": "mbaxter"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -83,12 +89,32 @@ public boolean isWorldStateAvailable(final Bytes32 rootHash) {\n \n   @Override\n   public Updater updater() {\n-    return new Updater(keyValueStorage.startTransaction(), nodeAddedListeners);\n+    return new Updater(lock, keyValueStorage.startTransaction(), nodeAddedListeners);\n   }\n \n   @Override\n   public long prune(final Predicate<byte[]> inUseCheck) {\n-    return keyValueStorage.removeAllKeysUnless(inUseCheck);\n+    final AtomicInteger prunedKeys = new AtomicInteger(0);\n+    try (final Stream<byte[]> keys = keyValueStorage.streamKeys()) {\n+      keys.forEach(\n+          key -> {\n+            lock.lock();\n+            try {\n+              if (!inUseCheck.test(key)) {\n+                try {\n+                  keyValueStorage.tryDelete(key);\n+                } catch (final StorageException se) {\n+                  if (!se.isIncomplete()) throw se;\n+                }\n+                prunedKeys.incrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5Njk3MTY0OnYy", "diffSide": "LEFT", "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDo1NjowN1rOGOC8cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToxMjoyOFrOGODtXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4MTQ4OQ==", "bodyText": "Why has Closeable been removed?", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417381489", "createdAt": "2020-04-29T14:56:07Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "diffHunk": "@@ -58,7 +60,7 @@\n import org.rocksdb.WriteOptions;\n \n public class RocksDBColumnarKeyValueStorage\n-    implements SegmentedKeyValueStorage<ColumnFamilyHandle>, Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5NDAxNA==", "bodyText": "It was redundant, the interface already extends it.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417394014", "createdAt": "2020-04-29T15:12:28Z", "author": {"login": "RatanRSur"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/segmented/RocksDBColumnarKeyValueStorage.java", "diffHunk": "@@ -58,7 +60,7 @@\n import org.rocksdb.WriteOptions;\n \n public class RocksDBColumnarKeyValueStorage\n-    implements SegmentedKeyValueStorage<ColumnFamilyHandle>, Closeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4MTQ4OQ=="}, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzAxMTAzOnYy", "diffSide": "RIGHT", "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/unsegmented/RocksDBKeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNDoyMVrOGODVeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozODo0M1rOGOE7AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4Nzg5Nw==", "bodyText": "We were previously using Sets.newIdentityHashSet() to create this set, which it looks like we were doing in order to make the equality checks more efficient.  We should probably keep that.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417387897", "createdAt": "2020-04-29T15:04:21Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/unsegmented/RocksDBKeyValueStorage.java", "diffHunk": "@@ -112,39 +117,29 @@ public boolean containsKey(final byte[] key) throws StorageException {\n         rocksDBMetrics.getReadLatency().startTimer()) {\n       return Optional.ofNullable(db.get(key));\n     } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n+      throw RocksDBExceptionAdapter.createStorageException(e);\n     }\n   }\n \n   @Override\n-  public long removeAllKeysUnless(final Predicate<byte[]> retainCondition) throws StorageException {\n-    long removedNodeCounter = 0;\n-    try (final RocksIterator rocksIterator = db.newIterator()) {\n-      for (rocksIterator.seekToFirst(); rocksIterator.isValid(); rocksIterator.next()) {\n-        final byte[] key = rocksIterator.key();\n-        if (!retainCondition.test(key)) {\n-          removedNodeCounter++;\n-          db.delete(key);\n-        }\n-      }\n-    } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n-    }\n-    return removedNodeCounter;\n+  public Set<byte[]> getAllKeysThat(final Predicate<byte[]> returnCondition) {\n+    return streamKeys().filter(returnCondition).collect(toUnmodifiableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwMzAxNQ==", "bodyText": "I thought that was already the case for byte[].\n ~/wrk/besu pruning-bugfix-doomed-key \u2058 jshell\n|  Welcome to JShell -- Version 11.0.6\n|  For an introduction type: /help intro\n\njshell> new HashSet<byte[]>()\n$1 ==> []\n\njshell> $1.add(new byte[] {1})\n$2 ==> true\n\njshell> $1\n$1 ==> [[B@5034c75a]\n\njshell> $1.contains(new byte[] {1})\n$4 ==> false\n\njshell>", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417403015", "createdAt": "2020-04-29T15:24:33Z", "author": {"login": "RatanRSur"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/unsegmented/RocksDBKeyValueStorage.java", "diffHunk": "@@ -112,39 +117,29 @@ public boolean containsKey(final byte[] key) throws StorageException {\n         rocksDBMetrics.getReadLatency().startTimer()) {\n       return Optional.ofNullable(db.get(key));\n     } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n+      throw RocksDBExceptionAdapter.createStorageException(e);\n     }\n   }\n \n   @Override\n-  public long removeAllKeysUnless(final Predicate<byte[]> retainCondition) throws StorageException {\n-    long removedNodeCounter = 0;\n-    try (final RocksIterator rocksIterator = db.newIterator()) {\n-      for (rocksIterator.seekToFirst(); rocksIterator.isValid(); rocksIterator.next()) {\n-        final byte[] key = rocksIterator.key();\n-        if (!retainCondition.test(key)) {\n-          removedNodeCounter++;\n-          db.delete(key);\n-        }\n-      }\n-    } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n-    }\n-    return removedNodeCounter;\n+  public Set<byte[]> getAllKeysThat(final Predicate<byte[]> returnCondition) {\n+    return streamKeys().filter(returnCondition).collect(toUnmodifiableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4Nzg5Nw=="}, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMzg4OA==", "bodyText": "Yeah - I think you're right.  Did some quick googling trying to figure out why we were using newIdentityHashSet and I misread an answer that referenced: https://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#equals%28byte%5B%5D,%20byte%5B%5D%29", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417413888", "createdAt": "2020-04-29T15:38:43Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/unsegmented/RocksDBKeyValueStorage.java", "diffHunk": "@@ -112,39 +117,29 @@ public boolean containsKey(final byte[] key) throws StorageException {\n         rocksDBMetrics.getReadLatency().startTimer()) {\n       return Optional.ofNullable(db.get(key));\n     } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n+      throw RocksDBExceptionAdapter.createStorageException(e);\n     }\n   }\n \n   @Override\n-  public long removeAllKeysUnless(final Predicate<byte[]> retainCondition) throws StorageException {\n-    long removedNodeCounter = 0;\n-    try (final RocksIterator rocksIterator = db.newIterator()) {\n-      for (rocksIterator.seekToFirst(); rocksIterator.isValid(); rocksIterator.next()) {\n-        final byte[] key = rocksIterator.key();\n-        if (!retainCondition.test(key)) {\n-          removedNodeCounter++;\n-          db.delete(key);\n-        }\n-      }\n-    } catch (final RocksDBException e) {\n-      throw new StorageException(e);\n-    }\n-    return removedNodeCounter;\n+  public Set<byte[]> getAllKeysThat(final Predicate<byte[]> returnCondition) {\n+    return streamKeys().filter(returnCondition).collect(toUnmodifiableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4Nzg5Nw=="}, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzAxODM2OnYy", "diffSide": "RIGHT", "path": "services/kvstore/src/main/java/org/hyperledger/besu/services/kvstore/LimitedInMemoryKeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNjowOVrOGODaTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowNjowOVrOGODaTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM4OTEzNQ==", "bodyText": "get() already does the locking internally - I don't think you need this extra locking", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417389135", "createdAt": "2020-04-29T15:06:09Z", "author": {"login": "mbaxter"}, "path": "services/kvstore/src/main/java/org/hyperledger/besu/services/kvstore/LimitedInMemoryKeyValueStorage.java", "diffHunk": "@@ -59,7 +62,13 @@ public void clear() {\n \n   @Override\n   public boolean containsKey(final byte[] key) throws StorageException {\n-    return get(key).isPresent();\n+    final Lock lock = rwLock.readLock();\n+    lock.lock();\n+    try {\n+      return get(key).isPresent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7c9cd9b19ecdbdfb1b602cfe096a894e39fdb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIxMzY3OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo1NjozMlrOGOYyXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo1NjozMlrOGOYyXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczOTM1Nw==", "bodyText": "We should at least have a trace log message here.\nAnd a small style nit, you could probably put this catch on the try/finally for unlocking instead of needing nested try cases.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417739357", "createdAt": "2020-04-30T03:56:32Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -83,12 +89,31 @@ public boolean isWorldStateAvailable(final Bytes32 rootHash) {\n \n   @Override\n   public Updater updater() {\n-    return new Updater(keyValueStorage.startTransaction(), nodeAddedListeners);\n+    return new Updater(lock, keyValueStorage.startTransaction(), nodeAddedListeners);\n   }\n \n   @Override\n   public long prune(final Predicate<byte[]> inUseCheck) {\n-    return keyValueStorage.removeAllKeysUnless(inUseCheck);\n+    final AtomicInteger prunedKeys = new AtomicInteger(0);\n+    try (final Stream<byte[]> keys = keyValueStorage.streamKeys()) {\n+      keys.forEach(\n+          key -> {\n+            lock.lock();\n+            try {\n+              if (!inUseCheck.test(key)) {\n+                try {\n+                  keyValueStorage.tryDelete(key);\n+                  prunedKeys.incrementAndGet();\n+                } catch (final IncompleteOperationException __) {\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIxNTU2OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzo1Nzo1MFrOGOYzcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDozOToyNFrOGO5gcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczOTYzNA==", "bodyText": "It's nice that we only wind up taking the lock when we actually commit rather than on each write - guessing that dramatically reduces contention so performance would be much less likely to be affecting.  Pruning might be slower because it takes the lock on every key but that's not a problem.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417739634", "createdAt": "2020-04-30T03:57:50Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -156,12 +184,18 @@ public Updater putAccountStorageTrieNode(final Bytes32 nodeHash, final Bytes nod\n \n     @Override\n     public void commit() {\n-      nodeAddedListeners.forEach(listener -> listener.onNodesAdded(addedNodes));\n-      transaction.commit();\n+      lock.lock();\n+      try {\n+        nodeAddedListeners.forEach(listener -> listener.onNodesAdded(addedNodes));\n+        transaction.commit();\n+      } finally {\n+        lock.unlock();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA4NzM5Mw==", "bodyText": "Not so fast :) I'm going to start some fast syncs to see what it does with the full state because a longer sweeping phase means a larger storage spike caused by the snapshot of the column while we're iterating.\nOn the other hand, keeping up with head means rare commits to the world state database so a lot less contention there.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r418087393", "createdAt": "2020-04-30T15:15:42Z", "author": {"login": "RatanRSur"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -156,12 +184,18 @@ public Updater putAccountStorageTrieNode(final Bytes32 nodeHash, final Bytes nod\n \n     @Override\n     public void commit() {\n-      nodeAddedListeners.forEach(listener -> listener.onNodesAdded(addedNodes));\n-      transaction.commit();\n+      lock.lock();\n+      try {\n+        nodeAddedListeners.forEach(listener -> listener.onNodesAdded(addedNodes));\n+        transaction.commit();\n+      } finally {\n+        lock.unlock();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczOTYzNA=="}, "originalCommit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3NTQ0MQ==", "bodyText": "Fortunately it's the mark phase that takes the vast majority of the time - the sweep phase IIRC was quite fast (it may not be so now).  Might still be an issue but it's still a much lower impact than I was first expecting when we started talking about needing a lock.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r418275441", "createdAt": "2020-04-30T20:39:24Z", "author": {"login": "ajsutton"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/storage/keyvalue/WorldStateKeyValueStorage.java", "diffHunk": "@@ -156,12 +184,18 @@ public Updater putAccountStorageTrieNode(final Bytes32 nodeHash, final Bytes nod\n \n     @Override\n     public void commit() {\n-      nodeAddedListeners.forEach(listener -> listener.onNodesAdded(addedNodes));\n-      transaction.commit();\n+      lock.lock();\n+      try {\n+        nodeAddedListeners.forEach(listener -> listener.onNodesAdded(addedNodes));\n+        transaction.commit();\n+      } finally {\n+        lock.unlock();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczOTYzNA=="}, "originalCommit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIyMDQ3OnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDowMToyMlrOGOY2cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDowMToyMlrOGOY2cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MDQwMQ==", "bodyText": "We probably need to make the requirements for this method clearer - is it allowed to wait for the lock to be available or must it always immediately fail if the lock is unavailable?  Otherwise we risk pruning not working or getting deadlocks with some storage plugins because they don't exhibit the behaviour we need here.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417740401", "createdAt": "2020-04-30T04:01:22Z", "author": {"login": "ajsutton"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "diffHunk": "@@ -61,15 +63,23 @@\n   Optional<byte[]> get(byte[] key) throws StorageException;\n \n   /**\n-   * Performs an evaluation against each key in the store, keeping the entries that pass, removing\n-   * those that fail.\n+   * Returns a stream of all keys.\n    *\n-   * @param retainCondition predicate to evaluate each key against, unless the result is {@code\n-   *     null}, both the key and associated value must be removed.\n-   * @return the number of keys removed.\n-   * @throws StorageException problem encountered when removing data.\n+   * @return A stream of all keys in storage.\n+   * @throws StorageException problem encountered during the retrieval attempt.\n+   */\n+  Stream<byte[]> streamKeys() throws StorageException;\n+\n+  /**\n+   * Attempt to delete the value corresponding to the given key. For some storage mediums we want to\n+   * be able to abandon the delete under certain circumstances. For example, to abandon the attempt\n+   * if we can't acquire a lock on the underlying storage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTIyMzAxOnYy", "diffSide": "RIGHT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDowMzoxMlrOGOY3_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDowMzoxMlrOGOY3_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MDc5Ng==", "bodyText": "We should make this return boolean rather than throwing an exception since not completing the operation is a \"normal\" outcome, we shouldn't model it as an exception.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r417740796", "createdAt": "2020-04-30T04:03:12Z", "author": {"login": "ajsutton"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "diffHunk": "@@ -61,15 +63,23 @@\n   Optional<byte[]> get(byte[] key) throws StorageException;\n \n   /**\n-   * Performs an evaluation against each key in the store, keeping the entries that pass, removing\n-   * those that fail.\n+   * Returns a stream of all keys.\n    *\n-   * @param retainCondition predicate to evaluate each key against, unless the result is {@code\n-   *     null}, both the key and associated value must be removed.\n-   * @return the number of keys removed.\n-   * @throws StorageException problem encountered when removing data.\n+   * @return A stream of all keys in storage.\n+   * @throws StorageException problem encountered during the retrieval attempt.\n+   */\n+  Stream<byte[]> streamKeys() throws StorageException;\n+\n+  /**\n+   * Attempt to delete the value corresponding to the given key. For some storage mediums we want to\n+   * be able to abandon the delete under certain circumstances. For example, to abandon the attempt\n+   * if we can't acquire a lock on the underlying storage.\n+   *\n+   * @param key The key to delete.\n+   * @throws IncompleteOperationException the operation was incomplete and the key was not deleted\n+   * @throws StorageException any other problem encountered during the deletion attempt.\n    */\n-  long removeAllKeysUnless(Predicate<byte[]> retainCondition) throws StorageException;\n+  void tryDelete(byte[] key) throws IncompleteOperationException, StorageException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbfaa911aaa0094b049ce198151814cb76b2249d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDg3OTk5OnYy", "diffSide": "RIGHT", "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/RocksDbKeyIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MDoyMVrOGRgazw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0MDoyMVrOGRgazw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxMDEyNw==", "bodyText": "Whoops - looks like copy/pasta\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                checkState(!closed.get(), \"Attempt to update a closed transaction\");\n          \n          \n            \n                checkState(!closed.get(), \"Attempt to read from a closed \" + getClass().getSimpleName());", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r421010127", "createdAt": "2020-05-06T18:40:21Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/RocksDbKeyIterator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.plugin.services.storage.rocksdb;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+public class RocksDbKeyIterator implements Iterator<byte[]>, AutoCloseable {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final RocksIterator rocksIterator;\n+  private final AtomicBoolean closed = new AtomicBoolean(false);\n+\n+  private RocksDbKeyIterator(final RocksIterator rocksIterator) {\n+    this.rocksIterator = rocksIterator;\n+  }\n+\n+  public static RocksDbKeyIterator create(final RocksIterator rocksIterator) {\n+    return new RocksDbKeyIterator(rocksIterator);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    assertOpen();\n+    return rocksIterator.isValid();\n+  }\n+\n+  @Override\n+  public byte[] next() {\n+    assertOpen();\n+    try {\n+      rocksIterator.status();\n+    } catch (final RocksDBException e) {\n+      LOG.error(\"RocksDbEntryIterator encountered a problem while iterating.\", e);\n+    }\n+    if (!hasNext()) {\n+      throw new NoSuchElementException();\n+    }\n+    final byte[] key = rocksIterator.key();\n+    rocksIterator.next();\n+    return key;\n+  }\n+\n+  public Stream<byte[]> toStream() {\n+    assertOpen();\n+    final Spliterator<byte[]> spliterator =\n+        Spliterators.spliteratorUnknownSize(\n+            this,\n+            Spliterator.IMMUTABLE\n+                | Spliterator.DISTINCT\n+                | Spliterator.NONNULL\n+                | Spliterator.ORDERED\n+                | Spliterator.SORTED);\n+\n+    return StreamSupport.stream(spliterator, false).onClose(this::close);\n+  }\n+\n+  private void assertOpen() {\n+    checkState(!closed.get(), \"Attempt to update a closed transaction\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf5f5492b22db8f8d5501b4072be9c8e85f052e"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDkxMTE1OnYy", "diffSide": "LEFT", "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo0ODozOVrOGRguiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDowODo0NFrOGRjhrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTE3OQ==", "bodyText": "Sanity check - I assume we've thought through the implications of removing this public API?", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r421015179", "createdAt": "2020-05-06T18:48:39Z", "author": {"login": "mbaxter"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "diffHunk": "@@ -61,15 +62,23 @@\n   Optional<byte[]> get(byte[] key) throws StorageException;\n \n   /**\n-   * Performs an evaluation against each key in the store, keeping the entries that pass, removing\n-   * those that fail.\n+   * Returns a stream of all keys.\n    *\n-   * @param retainCondition predicate to evaluate each key against, unless the result is {@code\n-   *     null}, both the key and associated value must be removed.\n-   * @return the number of keys removed.\n-   * @throws StorageException problem encountered when removing data.\n+   * @return A stream of all keys in storage.\n+   * @throws StorageException problem encountered during the retrieval attempt.\n+   */\n+  Stream<byte[]> streamKeys() throws StorageException;\n+\n+  /**\n+   * Delete the value corresponding to the given key if a write lock can be instantly acquired on\n+   * the underlying storage. Do nothing otherwise.\n+   *\n+   * @param key The key to delete.\n+   * @throws StorageException any problem encountered during the deletion attempt.\n+   * @return false if the lock on the underlying storage could not be instantly acquired, true\n+   *     otherwise\n    */\n-  long removeAllKeysUnless(Predicate<byte[]> retainCondition) throws StorageException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf5f5492b22db8f8d5501b4072be9c8e85f052e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMjI3Nw==", "bodyText": "We added it just for pruning and I think the only dependency for the storage plugin api is PegaSys plus. I'll ask them if they still want it around.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r421022277", "createdAt": "2020-05-06T19:00:08Z", "author": {"login": "RatanRSur"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "diffHunk": "@@ -61,15 +62,23 @@\n   Optional<byte[]> get(byte[] key) throws StorageException;\n \n   /**\n-   * Performs an evaluation against each key in the store, keeping the entries that pass, removing\n-   * those that fail.\n+   * Returns a stream of all keys.\n    *\n-   * @param retainCondition predicate to evaluate each key against, unless the result is {@code\n-   *     null}, both the key and associated value must be removed.\n-   * @return the number of keys removed.\n-   * @throws StorageException problem encountered when removing data.\n+   * @return A stream of all keys in storage.\n+   * @throws StorageException problem encountered during the retrieval attempt.\n+   */\n+  Stream<byte[]> streamKeys() throws StorageException;\n+\n+  /**\n+   * Delete the value corresponding to the given key if a write lock can be instantly acquired on\n+   * the underlying storage. Do nothing otherwise.\n+   *\n+   * @param key The key to delete.\n+   * @throws StorageException any problem encountered during the deletion attempt.\n+   * @return false if the lock on the underlying storage could not be instantly acquired, true\n+   *     otherwise\n    */\n-  long removeAllKeysUnless(Predicate<byte[]> retainCondition) throws StorageException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTE3OQ=="}, "originalCommit": {"oid": "eaf5f5492b22db8f8d5501b4072be9c8e85f052e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2MTAzNg==", "bodyText": "Since this could be a breaking change if anyone depends on this API, might be worth moving this API clean-up into a separate PR, so we can be more careful about when / how exactly we release this.", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r421061036", "createdAt": "2020-05-06T20:08:44Z", "author": {"login": "mbaxter"}, "path": "plugin-api/src/main/java/org/hyperledger/besu/plugin/services/storage/KeyValueStorage.java", "diffHunk": "@@ -61,15 +62,23 @@\n   Optional<byte[]> get(byte[] key) throws StorageException;\n \n   /**\n-   * Performs an evaluation against each key in the store, keeping the entries that pass, removing\n-   * those that fail.\n+   * Returns a stream of all keys.\n    *\n-   * @param retainCondition predicate to evaluate each key against, unless the result is {@code\n-   *     null}, both the key and associated value must be removed.\n-   * @return the number of keys removed.\n-   * @throws StorageException problem encountered when removing data.\n+   * @return A stream of all keys in storage.\n+   * @throws StorageException problem encountered during the retrieval attempt.\n+   */\n+  Stream<byte[]> streamKeys() throws StorageException;\n+\n+  /**\n+   * Delete the value corresponding to the given key if a write lock can be instantly acquired on\n+   * the underlying storage. Do nothing otherwise.\n+   *\n+   * @param key The key to delete.\n+   * @throws StorageException any problem encountered during the deletion attempt.\n+   * @return false if the lock on the underlying storage could not be instantly acquired, true\n+   *     otherwise\n    */\n-  long removeAllKeysUnless(Predicate<byte[]> retainCondition) throws StorageException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNTE3OQ=="}, "originalCommit": {"oid": "eaf5f5492b22db8f8d5501b4072be9c8e85f052e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDkxODQzOnYy", "diffSide": "RIGHT", "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/RocksDbKeyIterator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1MDozMlrOGRgy9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1MDozMlrOGRgy9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAxNjMxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.error(\"RocksDbEntryIterator encountered a problem while iterating.\", e);\n          \n          \n            \n                  LOG.error(getClass().getSimpleName() + \" encountered a problem while iterating.\", e);", "url": "https://github.com/hyperledger/besu/pull/760#discussion_r421016311", "createdAt": "2020-05-06T18:50:32Z", "author": {"login": "mbaxter"}, "path": "plugins/rocksdb/src/main/java/org/hyperledger/besu/plugin/services/storage/rocksdb/RocksDbKeyIterator.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+\n+package org.hyperledger.besu.plugin.services.storage.rocksdb;\n+\n+import static com.google.common.base.Preconditions.checkState;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.Spliterator;\n+import java.util.Spliterators;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+\n+public class RocksDbKeyIterator implements Iterator<byte[]>, AutoCloseable {\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final RocksIterator rocksIterator;\n+  private final AtomicBoolean closed = new AtomicBoolean(false);\n+\n+  private RocksDbKeyIterator(final RocksIterator rocksIterator) {\n+    this.rocksIterator = rocksIterator;\n+  }\n+\n+  public static RocksDbKeyIterator create(final RocksIterator rocksIterator) {\n+    return new RocksDbKeyIterator(rocksIterator);\n+  }\n+\n+  @Override\n+  public boolean hasNext() {\n+    assertOpen();\n+    return rocksIterator.isValid();\n+  }\n+\n+  @Override\n+  public byte[] next() {\n+    assertOpen();\n+    try {\n+      rocksIterator.status();\n+    } catch (final RocksDBException e) {\n+      LOG.error(\"RocksDbEntryIterator encountered a problem while iterating.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eaf5f5492b22db8f8d5501b4072be9c8e85f052e"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 947, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}