{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTE4Njc1", "number": 608, "title": "Add eth65 support", "bodyText": "PR description\nImplement https://eips.ethereum.org/EIPS/eip-2464", "createdAt": "2020-03-27T18:52:59Z", "url": "https://github.com/hyperledger/besu/pull/608", "merged": true, "mergeCommit": {"oid": "b9c6c4b3cc92d5aa32746e135e34e53884462d10"}, "closed": true, "closedAt": "2020-04-01T18:16:10Z", "author": {"login": "atoulme"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcR1XOiAH2gAyMzk0OTE4Njc1OmM0ZjBmMjRkMTA1ZmEzOTFjZjVhMWFmNjBjYzE3MmNhNjY5N2VlNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTbTSkgH2gAyMzk0OTE4Njc1OmFjYjA4YThiZDljMDAwZGRkNDY0MWZkZDUzODRiYjM4NjAxYjVkYWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c4f0f24d105fa391cf5a1af60cc172ca6697ee6a", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/c4f0f24d105fa391cf5a1af60cc172ca6697ee6a", "committedDate": "2020-03-27T18:53:08Z", "message": "Add eth65 support\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9af8aa1f206dc00c9a00bd0ce040c98640461984", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/9af8aa1f206dc00c9a00bd0ce040c98640461984", "committedDate": "2020-03-27T18:52:28Z", "message": "Add eth65 support"}, "afterCommit": {"oid": "c4f0f24d105fa391cf5a1af60cc172ca6697ee6a", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/c4f0f24d105fa391cf5a1af60cc172ca6697ee6a", "committedDate": "2020-03-27T18:53:08Z", "message": "Add eth65 support\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a8af02d4a66ae42e52f4f781d047d64b0ed8342", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/3a8af02d4a66ae42e52f4f781d047d64b0ed8342", "committedDate": "2020-03-27T20:59:47Z", "message": "Fix integration tests\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15e8e311e5715aab1b57077fab03458e9c348924", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/15e8e311e5715aab1b57077fab03458e9c348924", "committedDate": "2020-03-27T22:22:08Z", "message": "Fix acceptance tests\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1eb9636ae4391a81d58822340d9eb30dd8ba2bd", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/a1eb9636ae4391a81d58822340d9eb30dd8ba2bd", "committedDate": "2020-03-28T00:29:30Z", "message": "Merge branch 'master' into eth65"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/defbed1d0abf2bf326b68178cac3aba53a2832a9", "committedDate": "2020-03-28T07:06:08Z", "message": "add acceptance test that checks that transactions are gossiped between peers\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86d319ede1c6a4f04e0d083433d1c5174241edd7", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/86d319ede1c6a4f04e0d083433d1c5174241edd7", "committedDate": "2020-03-28T07:05:42Z", "message": "add acceptance test that checks that transactions are gossiped between peers"}, "afterCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/defbed1d0abf2bf326b68178cac3aba53a2832a9", "committedDate": "2020-03-28T07:06:08Z", "message": "add acceptance test that checks that transactions are gossiped between peers\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTM1OTIw", "url": "https://github.com/hyperledger/besu/pull/608#pullrequestreview-383935920", "createdAt": "2020-03-30T14:52:02Z", "commit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo1MjozNVrOF9tpYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNTo1NTo0MlrOF9wpUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI1NTMyOA==", "bodyText": "This deserves a comment.  Since Eth/65 messages operate in a \"hole\" in the Eth/64 message space (0x08->0x0a even though we add 3 messages the highest message number is still 0x10. Without this tidbit one might expect the message space to be 20.", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400255328", "createdAt": "2020-03-30T14:52:35Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java", "diffHunk": "@@ -65,6 +78,7 @@ public int messageSpace(final int protocolVersion) {\n         return 8;\n       case EthVersion.V63:\n       case EthVersion.V64:\n+      case EthVersion.V65:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NDA0MQ==", "bodyText": "Since the codes for pooled transactions are between new block (0x07) and get node data (0x0d) perhaps these should be put at line 106, so we sort by actual code value not by protocol introduced.  This would help remind maintainers of this peculiarity.", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400264041", "createdAt": "2020-03-30T15:03:40Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/EthProtocol.java", "diffHunk": "@@ -111,6 +127,12 @@ public String messageName(final int protocolVersion, final int code) {\n         return \"GetReceipts\";\n       case EthPV63.RECEIPTS:\n         return \"Receipts\";\n+      case EthPV65.GET_POOLED_TRANSACTIONS:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2NTk1Mg==", "bodyText": "Why does this need to be moved from constructor args into a bind method?", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400265952", "createdAt": "2020-03-30T15:06:11Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/EthProtocolManager.java", "diffHunk": "@@ -184,6 +176,19 @@ public String getSupportedProtocol() {\n     return supportedCapabilities;\n   }\n \n+  public void bind(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI2OTE5Mg==", "bodyText": "Why does this need it's own executor?  Why can't it re-use the sync worker?  That's the same queue we are currently sending transactions to peers on already.  I think the OS overhead of yet another executor is unwarranted in this case.", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400269192", "createdAt": "2020-03-30T15:10:15Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionSender.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.transactions;\n+\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.manager.EthContext;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool.TransactionBatchAddedListener;\n+\n+class PendingTransactionSender implements TransactionBatchAddedListener {\n+\n+  private final PeerPendingTransactionTracker transactionTracker;\n+  private final PendingTransactionsMessageSender transactionsMessageSender;\n+  private final EthContext ethContext;\n+\n+  public PendingTransactionSender(\n+      final PeerPendingTransactionTracker transactionTracker,\n+      final PendingTransactionsMessageSender transactionsMessageSender,\n+      final EthContext ethContext) {\n+    this.transactionTracker = transactionTracker;\n+    this.transactionsMessageSender = transactionsMessageSender;\n+    this.ethContext = ethContext;\n+  }\n+\n+  @Override\n+  public void onTransactionsAdded(final Iterable<Transaction> transactions) {\n+    ethContext\n+        .getEthPeers()\n+        .streamAvailablePeers()\n+        .forEach(\n+            peer ->\n+                transactions.forEach(\n+                    transaction ->\n+                        transactionTracker.addToPeerSendQueue(peer, transaction.getHash())));\n+    ethContext\n+        .getScheduler()\n+        .schedulePendingTransactionsTask(transactionsMessageSender::sendTransactionsToPeers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5MTkxMg==", "bodyText": "Per the spec a closed stream is a valid response indicating all requests were not found.\n\nA peer may respond with an empty reply iff none of the hashes match transactions in its pool. It is allowed to announce a transaction that will not be served later if it gets included in a block in between.\n\nSo it usually would be a valid response.  I think we should revise the comment so we don't accidentally come back in and try and \"optimize\" it.", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400291912", "createdAt": "2020-03-30T15:38:55Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager.task;\n+\n+import static java.util.Collections.emptyMap;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.manager.EthContext;\n+import org.hyperledger.besu.ethereum.eth.manager.EthPeer;\n+import org.hyperledger.besu.ethereum.eth.manager.PendingPeerRequest;\n+import org.hyperledger.besu.ethereum.eth.messages.EthPV65;\n+import org.hyperledger.besu.ethereum.eth.messages.PooledTransactionsMessage;\n+import org.hyperledger.besu.ethereum.p2p.rlpx.wire.MessageData;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class GetPooledTransactionsFromPeerTask\n+    extends AbstractPeerRequestTask<Map<Hash, Transaction>> {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final List<Hash> hashes;\n+\n+  private GetPooledTransactionsFromPeerTask(\n+      final EthContext ethContext, final List<Hash> hashes, final MetricsSystem metricsSystem) {\n+    super(ethContext, EthPV65.GET_POOLED_TRANSACTIONS, metricsSystem);\n+    this.hashes = new ArrayList<>(hashes);\n+  }\n+\n+  public static GetPooledTransactionsFromPeerTask forHashes(\n+      final EthContext ethContext, final List<Hash> hashes, final MetricsSystem metricsSystem) {\n+    return new GetPooledTransactionsFromPeerTask(ethContext, hashes, metricsSystem);\n+  }\n+\n+  @Override\n+  protected PendingPeerRequest sendRequest() {\n+    return sendRequestToPeer(\n+        peer -> {\n+          LOG.debug(\"Requesting {} transaction pool entries from peer {}.\", hashes.size(), peer);\n+          return peer.getPooledTransactions(hashes);\n+        },\n+        0);\n+  }\n+\n+  @Override\n+  protected Optional<Map<Hash, Transaction>> processResponse(\n+      final boolean streamClosed, final MessageData message, final EthPeer peer) {\n+    if (streamClosed) {\n+      // We don't record this as a useless response because it's impossible to know if a peer has", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NDE4Mg==", "bodyText": "Curious why we need to return a Map<Hash, Transaction>, why not just a List<Transaction>?", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400294182", "createdAt": "2020-03-30T15:41:49Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/manager/task/GetPooledTransactionsFromPeerTask.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.manager.task;\n+\n+import static java.util.Collections.emptyMap;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.Transaction;\n+import org.hyperledger.besu.ethereum.eth.manager.EthContext;\n+import org.hyperledger.besu.ethereum.eth.manager.EthPeer;\n+import org.hyperledger.besu.ethereum.eth.manager.PendingPeerRequest;\n+import org.hyperledger.besu.ethereum.eth.messages.EthPV65;\n+import org.hyperledger.besu.ethereum.eth.messages.PooledTransactionsMessage;\n+import org.hyperledger.besu.ethereum.p2p.rlpx.wire.MessageData;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class GetPooledTransactionsFromPeerTask\n+    extends AbstractPeerRequestTask<Map<Hash, Transaction>> {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final List<Hash> hashes;\n+\n+  private GetPooledTransactionsFromPeerTask(\n+      final EthContext ethContext, final List<Hash> hashes, final MetricsSystem metricsSystem) {\n+    super(ethContext, EthPV65.GET_POOLED_TRANSACTIONS, metricsSystem);\n+    this.hashes = new ArrayList<>(hashes);\n+  }\n+\n+  public static GetPooledTransactionsFromPeerTask forHashes(\n+      final EthContext ethContext, final List<Hash> hashes, final MetricsSystem metricsSystem) {\n+    return new GetPooledTransactionsFromPeerTask(ethContext, hashes, metricsSystem);\n+  }\n+\n+  @Override\n+  protected PendingPeerRequest sendRequest() {\n+    return sendRequestToPeer(\n+        peer -> {\n+          LOG.debug(\"Requesting {} transaction pool entries from peer {}.\", hashes.size(), peer);\n+          return peer.getPooledTransactions(hashes);\n+        },\n+        0);\n+  }\n+\n+  @Override\n+  protected Optional<Map<Hash, Transaction>> processResponse(\n+      final boolean streamClosed, final MessageData message, final EthPeer peer) {\n+    if (streamClosed) {\n+      // We don't record this as a useless response because it's impossible to know if a peer has\n+      // the data we're requesting.\n+      return Optional.of(emptyMap());\n+    }\n+    final PooledTransactionsMessage pooledTransactionsMessage =\n+        PooledTransactionsMessage.readFrom(message);\n+    final List<Transaction> tx = pooledTransactionsMessage.transactions();\n+    if (tx.size() > hashes.size()) {\n+      // Can't be the response to our request\n+      return Optional.empty();\n+    }\n+    return mapNodeDataByHash(tx);\n+  }\n+\n+  private Optional<Map<Hash, Transaction>> mapNodeDataByHash(final List<Transaction> transactions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI5NzA4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final int LIMIT = 1048576;\n          \n          \n            \n              static final int LIMIT = 1024 * 1024;\n          \n      \n    \n    \n  \n\nMakes it clearer it is 1MiB.", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400297081", "createdAt": "2020-03-30T15:45:44Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.messages;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public final class LimitedNewPooledTransactionHashesMessages {\n+\n+  static final int LIMIT = 1048576;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMTcxMg==", "bodyText": "readability: this should be transactionHash, txHash, or hash.  It's not the whole transaction.", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400301712", "createdAt": "2020-03-30T15:52:00Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.messages;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public final class LimitedNewPooledTransactionHashesMessages {\n+\n+  static final int LIMIT = 1048576;\n+  static final int MAX_COUNT = 4096;\n+\n+  private final NewPooledTransactionHashesMessage transactionsMessage;\n+  private final List<Hash> includedTransactions;\n+\n+  public LimitedNewPooledTransactionHashesMessages(\n+      final NewPooledTransactionHashesMessage transactionsMessage,\n+      final List<Hash> includedTransactions) {\n+    this.transactionsMessage = transactionsMessage;\n+    this.includedTransactions = includedTransactions;\n+  }\n+\n+  public static LimitedNewPooledTransactionHashesMessages createLimited(\n+      final Iterable<Hash> hashes) {\n+    final List<Hash> includedTransactions = new ArrayList<>();\n+    final BytesValueRLPOutput message = new BytesValueRLPOutput();\n+    int messageSize = 0;\n+    int count = 0;\n+    message.startList();\n+    for (final Hash transaction : hashes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwMjQyMg==", "bodyText": "Instead of breaking when done and returning just one message I think things would be cleaner if this method returned a List and we created a new message each time we went over the limit and then returned all the messages.  Then in PendingTransacitonMessageSender we won't need to iteratively clear out the list, and we won't need to track includedTransactions", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400302422", "createdAt": "2020-03-30T15:52:56Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.messages;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public final class LimitedNewPooledTransactionHashesMessages {\n+\n+  static final int LIMIT = 1048576;\n+  static final int MAX_COUNT = 4096;\n+\n+  private final NewPooledTransactionHashesMessage transactionsMessage;\n+  private final List<Hash> includedTransactions;\n+\n+  public LimitedNewPooledTransactionHashesMessages(\n+      final NewPooledTransactionHashesMessage transactionsMessage,\n+      final List<Hash> includedTransactions) {\n+    this.transactionsMessage = transactionsMessage;\n+    this.includedTransactions = includedTransactions;\n+  }\n+\n+  public static LimitedNewPooledTransactionHashesMessages createLimited(\n+      final Iterable<Hash> hashes) {\n+    final List<Hash> includedTransactions = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMwNDQ2Nw==", "bodyText": "With this logic we will always produce messages just larger than the limit.  Perhaps we check the limits earlier in the loop, and if we would exceed the limit with the new data we then produce a new message and put it in there.", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r400304467", "createdAt": "2020-03-30T15:55:42Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.eth.messages;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.rlp.BytesValueRLPOutput;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+\n+public final class LimitedNewPooledTransactionHashesMessages {\n+\n+  static final int LIMIT = 1048576;\n+  static final int MAX_COUNT = 4096;\n+\n+  private final NewPooledTransactionHashesMessage transactionsMessage;\n+  private final List<Hash> includedTransactions;\n+\n+  public LimitedNewPooledTransactionHashesMessages(\n+      final NewPooledTransactionHashesMessage transactionsMessage,\n+      final List<Hash> includedTransactions) {\n+    this.transactionsMessage = transactionsMessage;\n+    this.includedTransactions = includedTransactions;\n+  }\n+\n+  public static LimitedNewPooledTransactionHashesMessages createLimited(\n+      final Iterable<Hash> hashes) {\n+    final List<Hash> includedTransactions = new ArrayList<>();\n+    final BytesValueRLPOutput message = new BytesValueRLPOutput();\n+    int messageSize = 0;\n+    int count = 0;\n+    message.startList();\n+    for (final Hash transaction : hashes) {\n+      final BytesValueRLPOutput encodedTransaction = new BytesValueRLPOutput();\n+      encodedTransaction.writeBytes(transaction);\n+      Bytes encodedBytes = encodedTransaction.encoded();\n+      // Break if individual transaction size exceeds limit\n+      if (encodedBytes.size() > LIMIT && (messageSize != 0)) {\n+        break;\n+      }\n+      message.writeRLPUnsafe(encodedBytes);\n+      includedTransactions.add(transaction);\n+      // Check if last transaction to add to the message\n+      messageSize += encodedBytes.size();\n+      count++;\n+      if (messageSize > LIMIT || count >= MAX_COUNT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "defbed1d0abf2bf326b68178cac3aba53a2832a9"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3091dcbe06b94f62bfabbdb69002b9151a49d474", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/3091dcbe06b94f62bfabbdb69002b9151a49d474", "committedDate": "2020-03-31T04:28:47Z", "message": "code review comments\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}, "afterCommit": {"oid": "b2f5238459d4584cf14a85a7502a812f94feb17a", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/b2f5238459d4584cf14a85a7502a812f94feb17a", "committedDate": "2020-03-31T04:30:00Z", "message": "code review comments\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f6bbd982bd8024aaf968215bd000a9e5fc22152", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/7f6bbd982bd8024aaf968215bd000a9e5fc22152", "committedDate": "2020-04-01T06:12:48Z", "message": "Update ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/messages/LimitedNewPooledTransactionHashesMessages.java\n\nCo-Authored-By: Danno Ferrin <danno.ferrin@shemnon.com>\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bc510c77b1dd715e21d306ebbf2a75dc1798ab3", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/6bc510c77b1dd715e21d306ebbf2a75dc1798ab3", "committedDate": "2020-04-01T06:12:58Z", "message": "code review comments\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f6a41895ac94d5e02e1d7d8860c9a1ccbf37413", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/5f6a41895ac94d5e02e1d7d8860c9a1ccbf37413", "committedDate": "2020-04-01T06:12:58Z", "message": "Code review changes\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04e6b60eb5fa1caf256b6f99d94d4ee1e77f2cc1", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/04e6b60eb5fa1caf256b6f99d94d4ee1e77f2cc1", "committedDate": "2020-04-01T04:58:46Z", "message": "Code review changes\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}, "afterCommit": {"oid": "5f6a41895ac94d5e02e1d7d8860c9a1ccbf37413", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/5f6a41895ac94d5e02e1d7d8860c9a1ccbf37413", "committedDate": "2020-04-01T06:12:58Z", "message": "Code review changes\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fc6c6d47fab1933efc43dfe8578e597d6bcfca3", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/3fc6c6d47fab1933efc43dfe8578e597d6bcfca3", "committedDate": "2020-04-01T06:32:22Z", "message": "Reviewing diffs\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c57f42071c0b9315377d492329df76d97cc7f8f", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/8c57f42071c0b9315377d492329df76d97cc7f8f", "committedDate": "2020-04-01T06:28:07Z", "message": "Reviewing diffs\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}, "afterCommit": {"oid": "3fc6c6d47fab1933efc43dfe8578e597d6bcfca3", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/3fc6c6d47fab1933efc43dfe8578e597d6bcfca3", "committedDate": "2020-04-01T06:32:22Z", "message": "Reviewing diffs\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Nzg5NjEw", "url": "https://github.com/hyperledger/besu/pull/608#pullrequestreview-385789610", "createdAt": "2020-04-01T17:16:03Z", "commit": {"oid": "3fc6c6d47fab1933efc43dfe8578e597d6bcfca3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxNjowNFrOF_Ko8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzoxNjowNFrOF_Ko8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3ODkzMA==", "bodyText": "This also makes localTransactionHashesAdded synced when all we care about is newPooledHashes. Perhaps just synchronized (newPooledHashes) { ...  around the add and remove?", "url": "https://github.com/hyperledger/besu/pull/608#discussion_r401778930", "createdAt": "2020-04-01T17:16:04Z", "author": {"login": "shemnon"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactions.java", "diffHunk": "@@ -137,7 +137,7 @@ public boolean addRemoteTransaction(final Transaction transaction) {\n     return transactionAdded;\n   }\n \n-  boolean addTransactionHash(final Hash transactionHash) {\n+  synchronized boolean addTransactionHash(final Hash transactionHash) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fc6c6d47fab1933efc43dfe8578e597d6bcfca3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2152207598bdcefc1df9f50fad2bdc3903f9d650", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/2152207598bdcefc1df9f50fad2bdc3903f9d650", "committedDate": "2020-04-01T17:35:54Z", "message": "smaller synchronized blocks\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb08a8bd9c000ddd4641fdd5384bb38601b5daa", "author": {"user": {"login": "atoulme", "name": "Antoine Toulme"}}, "url": "https://github.com/hyperledger/besu/commit/acb08a8bd9c000ddd4641fdd5384bb38601b5daa", "committedDate": "2020-04-01T17:39:09Z", "message": "Merge branch 'master' into eth65"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1641, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}