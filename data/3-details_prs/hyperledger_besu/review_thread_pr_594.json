{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NTc2OTY1", "number": 594, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0MjoxNVrODs2IaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1NTo1OFrODs2anw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzUwODI0OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcErrorConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0MjoxNVrOF97ajg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyMToyOVrOF-Ke1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MDkxMA==", "bodyText": "NIT: If we are renaming the JsonRpcError, should we also rename this enum value to be consistent?", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400480910", "createdAt": "2020-03-30T20:42:15Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcErrorConverter.java", "diffHunk": "@@ -44,7 +44,7 @@ public static JsonRpcError convertTransactionInvalidReason(\n       case GAS_PRICE_TOO_LOW:\n         return JsonRpcError.GAS_PRICE_TOO_LOW;\n       case PRIVACY_GROUP_DOES_NOT_EXIST:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNzc2NQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400727765", "createdAt": "2020-03-31T08:21:29Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcErrorConverter.java", "diffHunk": "@@ -44,7 +44,7 @@ public static JsonRpcError convertTransactionInvalidReason(\n       case GAS_PRICE_TOO_LOW:\n         return JsonRpcError.GAS_PRICE_TOO_LOW;\n       case PRIVACY_GROUP_DOES_NOT_EXIST:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MDkxMA=="}, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzUxNTA3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/response/JsonRpcError.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0NDoxN1rOF97e1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyMTozOFrOF-KfMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MjAwNA==", "bodyText": "I believe Offchain and Onchain are the spelling we use across the board.", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400482004", "createdAt": "2020-03-30T20:44:17Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/response/JsonRpcError.java", "diffHunk": "@@ -115,10 +115,15 @@\n   VALUE_NOT_ZERO(-50100, \"We cannot transfer ether in private transaction yet.\"),\n   DECODE_ERROR(-50100, \"Unable to decode the private signed raw transaction\"),\n   GET_PRIVATE_TRANSACTION_NONCE_ERROR(-50100, \"Unable to determine nonce for account in group.\"),\n-  PRIVACY_GROUP_DOES_NOT_EXIST(-50100, \"Privacy group does not exist.\"),\n+  OFFCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST(-50100, \"OffChain Privacy group does not exist.\"),\n+  ONCCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST(-50100, \"OnChain Privacy group does not exist.\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNzg1Ng==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400727856", "createdAt": "2020-03-31T08:21:38Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/response/JsonRpcError.java", "diffHunk": "@@ -115,10 +115,15 @@\n   VALUE_NOT_ZERO(-50100, \"We cannot transfer ether in private transaction yet.\"),\n   DECODE_ERROR(-50100, \"Unable to decode the private signed raw transaction\"),\n   GET_PRIVATE_TRANSACTION_NONCE_ERROR(-50100, \"Unable to determine nonce for account in group.\"),\n-  PRIVACY_GROUP_DOES_NOT_EXIST(-50100, \"Privacy group does not exist.\"),\n+  OFFCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST(-50100, \"OffChain Privacy group does not exist.\"),\n+  ONCCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST(-50100, \"OnChain Privacy group does not exist.\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MjAwNA=="}, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzUzMjQ4OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0OToyNlrOF97p2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyMzowN1rOF-Kirg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NDgyNw==", "bodyText": "Can we change this method to return an Optional?", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400484827", "createdAt": "2020-03-30T20:49:26Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -284,16 +286,13 @@ public PrivacyGroup retrievePrivacyGroup(final String privacyGroupId, final Stri\n       final RLPInput rlpInput =\n           RLP.input(privateTransactionSimulatorResultOptional.get().getOutput());\n       if (rlpInput.nextSize() > 0) {\n-        return decodeList(rlpInput.raw());\n+        return new PrivacyGroup(\n+            privacyGroupId.toBase64String(), Type.ONCHAIN, \"\", \"\", decodeList(rlpInput.raw()));\n       } else {\n-        return Collections.emptyList();\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyODc1MA==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400728750", "createdAt": "2020-03-31T08:23:07Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -284,16 +286,13 @@ public PrivacyGroup retrievePrivacyGroup(final String privacyGroupId, final Stri\n       final RLPInput rlpInput =\n           RLP.input(privateTransactionSimulatorResultOptional.get().getOutput());\n       if (rlpInput.nextSize() > 0) {\n-        return decodeList(rlpInput.raw());\n+        return new PrivacyGroup(\n+            privacyGroupId.toBase64String(), Type.ONCHAIN, \"\", \"\", decodeList(rlpInput.raw()));\n       } else {\n-        return Collections.emptyList();\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NDgyNw=="}, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzUzMzM3OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0OTo0MlrOF97qbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNToxM1rOF-KoXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NDk3Mg==", "bodyText": "Can we change this method to return an Optional?", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400484972", "createdAt": "2020-03-30T20:49:42Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -245,7 +246,8 @@ public long determineBesuNonce(\n   }\n \n   @Override\n-  public PrivacyGroup retrievePrivacyGroup(final String privacyGroupId, final String enclaveKey) {\n+  public PrivacyGroup retrieveOffChainPrivacyGroup(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMDIwNw==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400730207", "createdAt": "2020-03-31T08:25:13Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -245,7 +246,8 @@ public long determineBesuNonce(\n   }\n \n   @Override\n-  public PrivacyGroup retrievePrivacyGroup(final String privacyGroupId, final String enclaveKey) {\n+  public PrivacyGroup retrieveOffChainPrivacyGroup(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NDk3Mg=="}, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU0MDYxOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1MTo1M1rOF97vCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyNzoyM1rOF-Ktwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NjE1Mg==", "bodyText": "Can privateTransaction.getPrivateFrom() be null? Do we need to be careful here?", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400486152", "createdAt": "2020-03-30T20:51:53Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -77,87 +72,100 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n-      final ValidationResult<TransactionInvalidReason> validationResult =\n-          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n-      if (!validationResult.isValid()) {\n-        return new JsonRpcErrorResponse(\n-            id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMTU4Ng==", "bodyText": "I think the PrivateTransaction.readFrom does not return null ..", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400731586", "createdAt": "2020-03-31T08:27:23Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -77,87 +72,100 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n-      final ValidationResult<TransactionInvalidReason> validationResult =\n-          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n-      if (!validationResult.isValid()) {\n-        return new JsonRpcErrorResponse(\n-            id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NjE1Mg=="}, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU0NTIyOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1MzoyMlrOF97x6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoxOToxOFrOF-qStQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4Njg4OQ==", "bodyText": "We probably don't need this comment. The JsonRpcError name could be a bit simpler I think:\nJsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400486889", "createdAt": "2020-03-30T20:53:22Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -77,87 +72,100 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n-      final ValidationResult<TransactionInvalidReason> validationResult =\n-          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n-      if (!validationResult.isValid()) {\n-        return new JsonRpcErrorResponse(\n-            id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, PRIVATE_FROM_DOES_NOT_MATCH_ENCLAVE_PUBLIC_KEY);\n       }\n \n-      final String enclaveKey =\n-          privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n-      final Transaction privacyMarkerTransaction;\n-      if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-        PrivacyGroup privacyGroup = null;\n-        try {\n-          privacyGroup =\n-              privacyController.retrievePrivacyGroup(\n-                  privateTransaction.getPrivacyGroupId().get().toBase64String(),\n-                  enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-        } catch (final EnclaveClientException e) {\n-          // it is an onchain group\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID\n+          return new JsonRpcErrorResponse(\n+              id, JsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE_WHILE_ON_CHAIN_PRIVACY_IS_ENABLED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0ODk0OQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r401248949", "createdAt": "2020-03-31T22:19:18Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -77,87 +72,100 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n-      final ValidationResult<TransactionInvalidReason> validationResult =\n-          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n-      if (!validationResult.isValid()) {\n-        return new JsonRpcErrorResponse(\n-            id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, PRIVATE_FROM_DOES_NOT_MATCH_ENCLAVE_PUBLIC_KEY);\n       }\n \n-      final String enclaveKey =\n-          privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n-      final Transaction privacyMarkerTransaction;\n-      if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-        PrivacyGroup privacyGroup = null;\n-        try {\n-          privacyGroup =\n-              privacyController.retrievePrivacyGroup(\n-                  privateTransaction.getPrivacyGroupId().get().toBase64String(),\n-                  enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-        } catch (final EnclaveClientException e) {\n-          // it is an onchain group\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID\n+          return new JsonRpcErrorResponse(\n+              id, JsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE_WHILE_ON_CHAIN_PRIVACY_IS_ENABLED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4Njg4OQ=="}, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU0Njk4OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1Mzo1M1rOF97y9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyMDowMlrOF-qTzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NzE1Nw==", "bodyText": "I think we can remove this comment. The code is clear on what is happening.", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400487157", "createdAt": "2020-03-30T20:53:53Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -77,87 +72,100 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n-      final ValidationResult<TransactionInvalidReason> validationResult =\n-          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n-      if (!validationResult.isValid()) {\n-        return new JsonRpcErrorResponse(\n-            id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, PRIVATE_FROM_DOES_NOT_MATCH_ENCLAVE_PUBLIC_KEY);\n       }\n \n-      final String enclaveKey =\n-          privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n-      final Transaction privacyMarkerTransaction;\n-      if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-        PrivacyGroup privacyGroup = null;\n-        try {\n-          privacyGroup =\n-              privacyController.retrievePrivacyGroup(\n-                  privateTransaction.getPrivacyGroupId().get().toBase64String(),\n-                  enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-        } catch (final EnclaveClientException e) {\n-          // it is an onchain group\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID\n+          return new JsonRpcErrorResponse(\n+              id, JsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE_WHILE_ON_CHAIN_PRIVACY_IS_ENABLED);\n         }\n+        privacyGroup =\n+            privacyController.retrieveOnChainPrivacyGroup(\n+                maybePrivacyGroupId.get(), enclavePublicKey);\n         if (privacyGroup == null\n-            || !privacyGroup\n-                .getMembers()\n-                .contains(enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()))) {\n-\n-          if (!isOnchainPrivacyGroupEnabled) {\n-            return new JsonRpcErrorResponse(id, ONCHAIN_PRIVACY_GROUP_NOT_ENABLED);\n-          }\n-\n-          final Optional<String> addPayloadEnclaveKey =\n-              privacyController.buildAndSendAddPayload(\n-                  privateTransaction,\n-                  enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-\n-          privacyMarkerTransaction =\n-              privacyController.createPrivacyMarkerTransaction(\n-                  buildCompoundKey(enclaveKey, addPayloadEnclaveKey),\n-                  privateTransaction,\n-                  Address.ONCHAIN_PRIVACY);\n-        } else {\n-          if (isOnchainPrivacyGroupEnabled) {\n-            return new JsonRpcErrorResponse(id, OFFCHAIN_PRIVACY_GROUP_NOT_ENABLED);\n-          }\n-\n-          privacyMarkerTransaction =\n-              privacyController.createPrivacyMarkerTransaction(enclaveKey, privateTransaction);\n+            && !privacyController.isGroupAdditionTransaction(privateTransaction)) {\n+          // on-chain privacy enabled, but on-chain privacy group does not exist and is not an\n+          // on-chain privacy group creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0OTIzMA==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r401249230", "createdAt": "2020-03-31T22:20:02Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -77,87 +72,100 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n-      final ValidationResult<TransactionInvalidReason> validationResult =\n-          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n-      if (!validationResult.isValid()) {\n-        return new JsonRpcErrorResponse(\n-            id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, PRIVATE_FROM_DOES_NOT_MATCH_ENCLAVE_PUBLIC_KEY);\n       }\n \n-      final String enclaveKey =\n-          privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n-      final Transaction privacyMarkerTransaction;\n-      if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-        PrivacyGroup privacyGroup = null;\n-        try {\n-          privacyGroup =\n-              privacyController.retrievePrivacyGroup(\n-                  privateTransaction.getPrivacyGroupId().get().toBase64String(),\n-                  enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-        } catch (final EnclaveClientException e) {\n-          // it is an onchain group\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID\n+          return new JsonRpcErrorResponse(\n+              id, JsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE_WHILE_ON_CHAIN_PRIVACY_IS_ENABLED);\n         }\n+        privacyGroup =\n+            privacyController.retrieveOnChainPrivacyGroup(\n+                maybePrivacyGroupId.get(), enclavePublicKey);\n         if (privacyGroup == null\n-            || !privacyGroup\n-                .getMembers()\n-                .contains(enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()))) {\n-\n-          if (!isOnchainPrivacyGroupEnabled) {\n-            return new JsonRpcErrorResponse(id, ONCHAIN_PRIVACY_GROUP_NOT_ENABLED);\n-          }\n-\n-          final Optional<String> addPayloadEnclaveKey =\n-              privacyController.buildAndSendAddPayload(\n-                  privateTransaction,\n-                  enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-\n-          privacyMarkerTransaction =\n-              privacyController.createPrivacyMarkerTransaction(\n-                  buildCompoundKey(enclaveKey, addPayloadEnclaveKey),\n-                  privateTransaction,\n-                  Address.ONCHAIN_PRIVACY);\n-        } else {\n-          if (isOnchainPrivacyGroupEnabled) {\n-            return new JsonRpcErrorResponse(id, OFFCHAIN_PRIVACY_GROUP_NOT_ENABLED);\n-          }\n-\n-          privacyMarkerTransaction =\n-              privacyController.createPrivacyMarkerTransaction(enclaveKey, privateTransaction);\n+            && !privacyController.isGroupAdditionTransaction(privateTransaction)) {\n+          // on-chain privacy enabled, but on-chain privacy group does not exist and is not an\n+          // on-chain privacy group creation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NzE1Nw=="}, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU1NDU2OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1NTo1MlrOF973dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyMDo0OFrOF-qVCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODMxMA==", "bodyText": "No need for this comment :)", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400488310", "createdAt": "2020-03-30T20:55:52Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "diffHunk": "@@ -60,15 +66,46 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, ENCLAVE_ERROR);\n+      }\n+\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0OTU0NQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r401249545", "createdAt": "2020-03-31T22:20:48Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "diffHunk": "@@ -60,15 +66,46 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, ENCLAVE_ERROR);\n+      }\n+\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODMxMA=="}, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzU1NDg3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo1NTo1OFrOF973sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjoyMDo1NVrOF-qVOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODM2OA==", "bodyText": "No need for this comment :)", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400488368", "createdAt": "2020-03-30T20:55:58Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "diffHunk": "@@ -60,15 +66,46 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, ENCLAVE_ERROR);\n+      }\n+\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID\n+          return new JsonRpcErrorResponse(\n+              id, JsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE_WHILE_ON_CHAIN_PRIVACY_IS_ENABLED);\n+        }\n+        privacyGroup =\n+            privacyController.retrieveOnChainPrivacyGroup(\n+                maybePrivacyGroupId.get(), enclavePublicKey);\n+        if (privacyGroup == null\n+            && !privacyController.isGroupAdditionTransaction(privateTransaction)) {\n+          // on-chain privacy enabled, but on-chain privacy group does not exist and is not an\n+          // on-chain privacy group creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0OTU5Mw==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r401249593", "createdAt": "2020-03-31T22:20:55Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "diffHunk": "@@ -60,15 +66,46 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, ENCLAVE_ERROR);\n+      }\n+\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID\n+          return new JsonRpcErrorResponse(\n+              id, JsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE_WHILE_ON_CHAIN_PRIVACY_IS_ENABLED);\n+        }\n+        privacyGroup =\n+            privacyController.retrieveOnChainPrivacyGroup(\n+                maybePrivacyGroupId.get(), enclavePublicKey);\n+        if (privacyGroup == null\n+            && !privacyController.isGroupAdditionTransaction(privateTransaction)) {\n+          // on-chain privacy enabled, but on-chain privacy group does not exist and is not an\n+          // on-chain privacy group creation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODM2OA=="}, "originalCommit": {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 996, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}