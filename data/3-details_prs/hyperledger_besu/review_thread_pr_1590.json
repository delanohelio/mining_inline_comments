{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNjY2MDQ4", "number": 1590, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoyMzozN1rOE7Ojlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTozMDoyMVrOE_74jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTM5OTI3OnYy", "diffSide": "RIGHT", "path": "config/src/main/java/org/hyperledger/besu/config/JsonGenesisConfigOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDoyMzozN1rOH2wL0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo0MDoyMFrOH4THsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE3NDYwOQ==", "bodyText": "is this meant to be duplicated?", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r527174609", "createdAt": "2020-11-19T20:23:37Z", "author": {"login": "macfarla"}, "path": "config/src/main/java/org/hyperledger/besu/config/JsonGenesisConfigOptions.java", "diffHunk": "@@ -419,4 +422,36 @@ private OptionalInt getOptionalInt(final String key) {\n       return JsonUtil.getBoolean(configRoot, key);\n     }\n   }\n+\n+  @Override\n+  public List<Long> getForks() {\n+    Stream<OptionalLong> forkBlockNumbers =\n+        Stream.of(\n+            getHomesteadBlockNumber(),\n+            getDaoForkBlock(),\n+            getTangerineWhistleBlockNumber(),\n+            // duplicated for EIP155 and EIP158 handling\n+            getSpuriousDragonBlockNumber(),\n+            getSpuriousDragonBlockNumber(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0554a530a3302528c431cd92ca1628b319bab24"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc5NTU2OA==", "bodyText": "It shouldn't be duplicated.  Even if it is two separate EIPs it will be the same block number, and ForkID will de-dup it.", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r528795568", "createdAt": "2020-11-23T15:40:20Z", "author": {"login": "shemnon"}, "path": "config/src/main/java/org/hyperledger/besu/config/JsonGenesisConfigOptions.java", "diffHunk": "@@ -419,4 +422,36 @@ private OptionalInt getOptionalInt(final String key) {\n       return JsonUtil.getBoolean(configRoot, key);\n     }\n   }\n+\n+  @Override\n+  public List<Long> getForks() {\n+    Stream<OptionalLong> forkBlockNumbers =\n+        Stream.of(\n+            getHomesteadBlockNumber(),\n+            getDaoForkBlock(),\n+            getTangerineWhistleBlockNumber(),\n+            // duplicated for EIP155 and EIP158 handling\n+            getSpuriousDragonBlockNumber(),\n+            getSpuriousDragonBlockNumber(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE3NDYwOQ=="}, "originalCommit": {"oid": "a0554a530a3302528c431cd92ca1628b319bab24"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDc1MTA0OnYy", "diffSide": "RIGHT", "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNToyMzoxM1rOH96Flw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMTowMTowMlrOH-zFFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3Njg4Nw==", "bodyText": "so duplicates weren't removed before? Or did it happen after this point?", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r534676887", "createdAt": "2020-12-03T05:23:13Z", "author": {"login": "macfarla"}, "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "diffHunk": "@@ -355,7 +355,43 @@ public void shouldLoadForksIgnoreClassicForkBlock() throws IOException {\n                         StandardCharsets.UTF_8)));\n     final GenesisConfigFile config = fromConfig(configNode);\n \n-    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 3L, 1035301L);\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09ea837daca3a6eed3c85e7615b42c88c8bfbaa9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwNjYwNA==", "bodyText": "It happens later at ForkIdManager.java:58\nThese tests were expecting a duplicate value for eip155Block and eip158Block (see JsonGenesisConfigOptions.java:334), which the new logic doesn't do.", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r535206604", "createdAt": "2020-12-03T12:59:06Z", "author": {"login": "mark-terry"}, "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "diffHunk": "@@ -355,7 +355,43 @@ public void shouldLoadForksIgnoreClassicForkBlock() throws IOException {\n                         StandardCharsets.UTF_8)));\n     final GenesisConfigFile config = fromConfig(configNode);\n \n-    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 3L, 1035301L);\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3Njg4Nw=="}, "originalCommit": {"oid": "09ea837daca3a6eed3c85e7615b42c88c8bfbaa9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTYxMDY0NA==", "bodyText": "We need to make sure this doesn't interfere with the legacy forkid issue with Besu 1.4 - @abdelhamidbakhta", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r535610644", "createdAt": "2020-12-03T21:01:02Z", "author": {"login": "shemnon"}, "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "diffHunk": "@@ -355,7 +355,43 @@ public void shouldLoadForksIgnoreClassicForkBlock() throws IOException {\n                         StandardCharsets.UTF_8)));\n     final GenesisConfigFile config = fromConfig(configNode);\n \n-    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 3L, 1035301L);\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3Njg4Nw=="}, "originalCommit": {"oid": "09ea837daca3a6eed3c85e7615b42c88c8bfbaa9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDc2MDYwOnYy", "diffSide": "RIGHT", "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNToyNjo0OFrOH96LFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDozODowN1rOH-7lNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3ODI5NA==", "bodyText": "Need to add back in the assertion that the result is the same as that generated from the config with no unexpected fork values", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r534678294", "createdAt": "2020-12-03T05:26:48Z", "author": {"login": "macfarla"}, "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "diffHunk": "@@ -355,7 +355,43 @@ public void shouldLoadForksIgnoreClassicForkBlock() throws IOException {\n                         StandardCharsets.UTF_8)));\n     final GenesisConfigFile config = fromConfig(configNode);\n \n-    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 3L, 1035301L);\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);\n+    assertThat(config.getConfigOptions().getChainId()).hasValue(BigInteger.valueOf(61));\n+  }\n+\n+  @Test\n+  public void shouldLoadForksIgnoreUnexpectedValues() throws IOException {\n+    final ObjectNode configNode =\n+        new ObjectMapper()\n+            .createObjectNode()\n+            .set(\n+                \"config\",\n+                JsonUtil.objectNodeFromString(\n+                    Resources.toString(\n+                        Resources.getResource(\n+                            // If you inspect this config, you should see that classicForkBlock is\n+                            // declared (which we want to ignore)\n+                            \"valid_config_with_etc_forks.json\"),\n+                        StandardCharsets.UTF_8)));\n+\n+    final ObjectNode configNodeWithUnexpectedForks =\n+        new ObjectMapper()\n+            .createObjectNode()\n+            .set(\n+                \"config\",\n+                JsonUtil.objectNodeFromString(\n+                    Resources.toString(\n+                        Resources.getResource(\n+                            // If you inspect this config, you should see that classicForkBlock is\n+                            // declared (which we want to ignore)\n+                            \"valid_config_with_unexpected_forks.json\"),\n+                        StandardCharsets.UTF_8)));\n+\n+    final GenesisConfigFile config = fromConfig(configNode);\n+    final GenesisConfigFile configWithUnexpectedForks = fromConfig(configNodeWithUnexpectedForks);\n+\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09ea837daca3a6eed3c85e7615b42c88c8bfbaa9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE4OTExNw==", "bodyText": "Are you suggesting the assertion on line 394?", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r535189117", "createdAt": "2020-12-03T12:31:18Z", "author": {"login": "mark-terry"}, "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "diffHunk": "@@ -355,7 +355,43 @@ public void shouldLoadForksIgnoreClassicForkBlock() throws IOException {\n                         StandardCharsets.UTF_8)));\n     final GenesisConfigFile config = fromConfig(configNode);\n \n-    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 3L, 1035301L);\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);\n+    assertThat(config.getConfigOptions().getChainId()).hasValue(BigInteger.valueOf(61));\n+  }\n+\n+  @Test\n+  public void shouldLoadForksIgnoreUnexpectedValues() throws IOException {\n+    final ObjectNode configNode =\n+        new ObjectMapper()\n+            .createObjectNode()\n+            .set(\n+                \"config\",\n+                JsonUtil.objectNodeFromString(\n+                    Resources.toString(\n+                        Resources.getResource(\n+                            // If you inspect this config, you should see that classicForkBlock is\n+                            // declared (which we want to ignore)\n+                            \"valid_config_with_etc_forks.json\"),\n+                        StandardCharsets.UTF_8)));\n+\n+    final ObjectNode configNodeWithUnexpectedForks =\n+        new ObjectMapper()\n+            .createObjectNode()\n+            .set(\n+                \"config\",\n+                JsonUtil.objectNodeFromString(\n+                    Resources.toString(\n+                        Resources.getResource(\n+                            // If you inspect this config, you should see that classicForkBlock is\n+                            // declared (which we want to ignore)\n+                            \"valid_config_with_unexpected_forks.json\"),\n+                        StandardCharsets.UTF_8)));\n+\n+    final GenesisConfigFile config = fromConfig(configNode);\n+    final GenesisConfigFile configWithUnexpectedForks = fromConfig(configNodeWithUnexpectedForks);\n+\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3ODI5NA=="}, "originalCommit": {"oid": "09ea837daca3a6eed3c85e7615b42c88c8bfbaa9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0OTk0MQ==", "bodyText": "Yes it is there.", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r535749941", "createdAt": "2020-12-04T00:38:07Z", "author": {"login": "macfarla"}, "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "diffHunk": "@@ -355,7 +355,43 @@ public void shouldLoadForksIgnoreClassicForkBlock() throws IOException {\n                         StandardCharsets.UTF_8)));\n     final GenesisConfigFile config = fromConfig(configNode);\n \n-    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 3L, 1035301L);\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);\n+    assertThat(config.getConfigOptions().getChainId()).hasValue(BigInteger.valueOf(61));\n+  }\n+\n+  @Test\n+  public void shouldLoadForksIgnoreUnexpectedValues() throws IOException {\n+    final ObjectNode configNode =\n+        new ObjectMapper()\n+            .createObjectNode()\n+            .set(\n+                \"config\",\n+                JsonUtil.objectNodeFromString(\n+                    Resources.toString(\n+                        Resources.getResource(\n+                            // If you inspect this config, you should see that classicForkBlock is\n+                            // declared (which we want to ignore)\n+                            \"valid_config_with_etc_forks.json\"),\n+                        StandardCharsets.UTF_8)));\n+\n+    final ObjectNode configNodeWithUnexpectedForks =\n+        new ObjectMapper()\n+            .createObjectNode()\n+            .set(\n+                \"config\",\n+                JsonUtil.objectNodeFromString(\n+                    Resources.toString(\n+                        Resources.getResource(\n+                            // If you inspect this config, you should see that classicForkBlock is\n+                            // declared (which we want to ignore)\n+                            \"valid_config_with_unexpected_forks.json\"),\n+                        StandardCharsets.UTF_8)));\n+\n+    final GenesisConfigFile config = fromConfig(configNode);\n+    final GenesisConfigFile configWithUnexpectedForks = fromConfig(configNodeWithUnexpectedForks);\n+\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3ODI5NA=="}, "originalCommit": {"oid": "09ea837daca3a6eed3c85e7615b42c88c8bfbaa9"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDc2MTY0OnYy", "diffSide": "RIGHT", "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNToyNzoxOFrOH96LsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNToyNzo1OVrOH96MlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3ODQ0OQ==", "bodyText": "I think some renaming would make things clearer", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r534678449", "createdAt": "2020-12-03T05:27:18Z", "author": {"login": "macfarla"}, "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "diffHunk": "@@ -355,7 +355,43 @@ public void shouldLoadForksIgnoreClassicForkBlock() throws IOException {\n                         StandardCharsets.UTF_8)));\n     final GenesisConfigFile config = fromConfig(configNode);\n \n-    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 3L, 1035301L);\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);\n+    assertThat(config.getConfigOptions().getChainId()).hasValue(BigInteger.valueOf(61));\n+  }\n+\n+  @Test\n+  public void shouldLoadForksIgnoreUnexpectedValues() throws IOException {\n+    final ObjectNode configNode =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09ea837daca3a6eed3c85e7615b42c88c8bfbaa9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3ODY3Ng==", "bodyText": "configWithNoUnexpectedForkBlocks\nconfigWithUnexpectedClassicForkBlock\nconfigWithMultipleUnexpectedForkBlocks", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r534678676", "createdAt": "2020-12-03T05:27:59Z", "author": {"login": "macfarla"}, "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "diffHunk": "@@ -355,7 +355,43 @@ public void shouldLoadForksIgnoreClassicForkBlock() throws IOException {\n                         StandardCharsets.UTF_8)));\n     final GenesisConfigFile config = fromConfig(configNode);\n \n-    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 3L, 1035301L);\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);\n+    assertThat(config.getConfigOptions().getChainId()).hasValue(BigInteger.valueOf(61));\n+  }\n+\n+  @Test\n+  public void shouldLoadForksIgnoreUnexpectedValues() throws IOException {\n+    final ObjectNode configNode =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3ODQ0OQ=="}, "originalCommit": {"oid": "09ea837daca3a6eed3c85e7615b42c88c8bfbaa9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDc2ODc3OnYy", "diffSide": "RIGHT", "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTozMDoyMVrOH96P3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTozMDoyMVrOH96P3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3OTUxNg==", "bodyText": "classicForkBlock doesn't get special treatment any more, but maybe it's still worth checking single vs multiple unexpected forks?", "url": "https://github.com/hyperledger/besu/pull/1590#discussion_r534679516", "createdAt": "2020-12-03T05:30:21Z", "author": {"login": "macfarla"}, "path": "config/src/test/java/org/hyperledger/besu/config/GenesisConfigFileTest.java", "diffHunk": "@@ -355,7 +355,43 @@ public void shouldLoadForksIgnoreClassicForkBlock() throws IOException {\n                         StandardCharsets.UTF_8)));\n     final GenesisConfigFile config = fromConfig(configNode);\n \n-    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 3L, 1035301L);\n+    assertThat(config.getForks()).containsExactly(1L, 2L, 3L, 1035301L);\n+    assertThat(config.getConfigOptions().getChainId()).hasValue(BigInteger.valueOf(61));\n+  }\n+\n+  @Test\n+  public void shouldLoadForksIgnoreUnexpectedValues() throws IOException {\n+    final ObjectNode configNode =\n+        new ObjectMapper()\n+            .createObjectNode()\n+            .set(\n+                \"config\",\n+                JsonUtil.objectNodeFromString(\n+                    Resources.toString(\n+                        Resources.getResource(\n+                            // If you inspect this config, you should see that classicForkBlock is\n+                            // declared (which we want to ignore)\n+                            \"valid_config_with_etc_forks.json\"),\n+                        StandardCharsets.UTF_8)));\n+\n+    final ObjectNode configNodeWithUnexpectedForks =\n+        new ObjectMapper()\n+            .createObjectNode()\n+            .set(\n+                \"config\",\n+                JsonUtil.objectNodeFromString(\n+                    Resources.toString(\n+                        Resources.getResource(\n+                            // If you inspect this config, you should see that classicForkBlock is\n+                            // declared (which we want to ignore)\n+                            \"valid_config_with_unexpected_forks.json\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09ea837daca3a6eed3c85e7615b42c88c8bfbaa9"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1358, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}