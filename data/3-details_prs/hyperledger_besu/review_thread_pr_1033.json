{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2OTMxNzUz", "number": 1033, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0MjoxNFrOECL3TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0NDo0OVrOECL7eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzI2OTg4OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0MjoxNFrOGefKvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo1ODo0MlrOGef6Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMTExNg==", "bodyText": "Would it be worth it to indicate that this is a developer mistake and ask for a bug report? I think this can only happen if there's an enumerated block format that we didn't make a case clause for here.", "url": "https://github.com/hyperledger/besu/pull/1033#discussion_r434621116", "createdAt": "2020-06-03T14:42:14Z", "author": {"login": "RatanRSur"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "diffHunk": "@@ -150,37 +159,48 @@ public void run() {\n     @Override\n     public void run() {\n       parentCommand.parentCommand.configureLogging(false);\n-      LOG.info(\"Import {} block data from {}\", format, blocksImportFile);\n \n       checkCommand(parentCommand);\n       checkNotNull(parentCommand.rlpBlockImporter);\n       checkNotNull(parentCommand.jsonBlockImporterFactory);\n-\n+      if (blockImportFileOption.isEmpty()) {\n+        throw new ParameterException(spec.commandLine(), \"No files specified to import.\");\n+      }\n+      LOG.info(\"Import {} block data from {} files\", format, blockImportFiles.size());\n       final Optional<MetricsService> metricsService = initMetrics(parentCommand);\n \n-      try {\n-        // As blocksImportFile even if initialized as null is injected by PicoCLI and param is\n-        // mandatory. So we are sure it's always not null, we can remove the warning.\n-        //noinspection ConstantConditions\n-        final Path path = blocksImportFile.toPath();\n-        final BesuController<?> controller = createController();\n-        switch (format) {\n-          case RLP:\n-            importRlpBlocks(controller, path);\n-            break;\n-          case JSON:\n-            importJsonBlocks(controller, path);\n-            break;\n-          default:\n-            throw new ParameterException(\n-                spec.commandLine(), \"Unsupported format: \" + format.toString());\n+      try (final BesuController<?> controller = createController()) {\n+        for (final Path path : blockImportFiles) {\n+          try {\n+            LOG.info(\"Importing from {}\", path);\n+\n+            switch (format) {\n+              case RLP:\n+                importRlpBlocks(controller, path);\n+                break;\n+              case JSON:\n+                importJsonBlocks(controller, path);\n+                break;\n+              default:\n+                throw new ParameterException(\n+                    spec.commandLine(), \"Unsupported format: \" + format.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b40c4f060be05d46e4d3239bd8b6b10c50c1e8b"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMjU2OQ==", "bodyText": "Despite the green text I didn't write this block, it's the beneficiary of being indented in a for loop.\nBut if the concern is developer mistake for new unenumerated formats the better approach IMHO is to remove the default block and have the build break at compile time and make the author consciously think about what they want to happen.  Being an enum Java will let us not have a default if we fully enumerate the enum.", "url": "https://github.com/hyperledger/besu/pull/1033#discussion_r434632569", "createdAt": "2020-06-03T14:57:50Z", "author": {"login": "shemnon"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "diffHunk": "@@ -150,37 +159,48 @@ public void run() {\n     @Override\n     public void run() {\n       parentCommand.parentCommand.configureLogging(false);\n-      LOG.info(\"Import {} block data from {}\", format, blocksImportFile);\n \n       checkCommand(parentCommand);\n       checkNotNull(parentCommand.rlpBlockImporter);\n       checkNotNull(parentCommand.jsonBlockImporterFactory);\n-\n+      if (blockImportFileOption.isEmpty()) {\n+        throw new ParameterException(spec.commandLine(), \"No files specified to import.\");\n+      }\n+      LOG.info(\"Import {} block data from {} files\", format, blockImportFiles.size());\n       final Optional<MetricsService> metricsService = initMetrics(parentCommand);\n \n-      try {\n-        // As blocksImportFile even if initialized as null is injected by PicoCLI and param is\n-        // mandatory. So we are sure it's always not null, we can remove the warning.\n-        //noinspection ConstantConditions\n-        final Path path = blocksImportFile.toPath();\n-        final BesuController<?> controller = createController();\n-        switch (format) {\n-          case RLP:\n-            importRlpBlocks(controller, path);\n-            break;\n-          case JSON:\n-            importJsonBlocks(controller, path);\n-            break;\n-          default:\n-            throw new ParameterException(\n-                spec.commandLine(), \"Unsupported format: \" + format.toString());\n+      try (final BesuController<?> controller = createController()) {\n+        for (final Path path : blockImportFiles) {\n+          try {\n+            LOG.info(\"Importing from {}\", path);\n+\n+            switch (format) {\n+              case RLP:\n+                importRlpBlocks(controller, path);\n+                break;\n+              case JSON:\n+                importJsonBlocks(controller, path);\n+                break;\n+              default:\n+                throw new ParameterException(\n+                    spec.commandLine(), \"Unsupported format: \" + format.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMTExNg=="}, "originalCommit": {"oid": "0b40c4f060be05d46e4d3239bd8b6b10c50c1e8b"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMzIxOA==", "bodyText": "Sounds good to me", "url": "https://github.com/hyperledger/besu/pull/1033#discussion_r434633218", "createdAt": "2020-06-03T14:58:42Z", "author": {"login": "RatanRSur"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "diffHunk": "@@ -150,37 +159,48 @@ public void run() {\n     @Override\n     public void run() {\n       parentCommand.parentCommand.configureLogging(false);\n-      LOG.info(\"Import {} block data from {}\", format, blocksImportFile);\n \n       checkCommand(parentCommand);\n       checkNotNull(parentCommand.rlpBlockImporter);\n       checkNotNull(parentCommand.jsonBlockImporterFactory);\n-\n+      if (blockImportFileOption.isEmpty()) {\n+        throw new ParameterException(spec.commandLine(), \"No files specified to import.\");\n+      }\n+      LOG.info(\"Import {} block data from {} files\", format, blockImportFiles.size());\n       final Optional<MetricsService> metricsService = initMetrics(parentCommand);\n \n-      try {\n-        // As blocksImportFile even if initialized as null is injected by PicoCLI and param is\n-        // mandatory. So we are sure it's always not null, we can remove the warning.\n-        //noinspection ConstantConditions\n-        final Path path = blocksImportFile.toPath();\n-        final BesuController<?> controller = createController();\n-        switch (format) {\n-          case RLP:\n-            importRlpBlocks(controller, path);\n-            break;\n-          case JSON:\n-            importJsonBlocks(controller, path);\n-            break;\n-          default:\n-            throw new ParameterException(\n-                spec.commandLine(), \"Unsupported format: \" + format.toString());\n+      try (final BesuController<?> controller = createController()) {\n+        for (final Path path : blockImportFiles) {\n+          try {\n+            LOG.info(\"Importing from {}\", path);\n+\n+            switch (format) {\n+              case RLP:\n+                importRlpBlocks(controller, path);\n+                break;\n+              case JSON:\n+                importJsonBlocks(controller, path);\n+                break;\n+              default:\n+                throw new ParameterException(\n+                    spec.commandLine(), \"Unsupported format: \" + format.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMTExNg=="}, "originalCommit": {"oid": "0b40c4f060be05d46e4d3239bd8b6b10c50c1e8b"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzI4MDU4OnYy", "diffSide": "RIGHT", "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo0NDo0OVrOGefRzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo1OToxOVrOGef7tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMjkyNQ==", "bodyText": "So we continue on if one of the files isn't found? If the typical use case is to supply block files that have contiguous blocks, as a user I would prefer a bail on the first indication of trouble.", "url": "https://github.com/hyperledger/besu/pull/1033#discussion_r434622925", "createdAt": "2020-06-03T14:44:49Z", "author": {"login": "RatanRSur"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "diffHunk": "@@ -150,37 +159,48 @@ public void run() {\n     @Override\n     public void run() {\n       parentCommand.parentCommand.configureLogging(false);\n-      LOG.info(\"Import {} block data from {}\", format, blocksImportFile);\n \n       checkCommand(parentCommand);\n       checkNotNull(parentCommand.rlpBlockImporter);\n       checkNotNull(parentCommand.jsonBlockImporterFactory);\n-\n+      if (blockImportFileOption.isEmpty()) {\n+        throw new ParameterException(spec.commandLine(), \"No files specified to import.\");\n+      }\n+      LOG.info(\"Import {} block data from {} files\", format, blockImportFiles.size());\n       final Optional<MetricsService> metricsService = initMetrics(parentCommand);\n \n-      try {\n-        // As blocksImportFile even if initialized as null is injected by PicoCLI and param is\n-        // mandatory. So we are sure it's always not null, we can remove the warning.\n-        //noinspection ConstantConditions\n-        final Path path = blocksImportFile.toPath();\n-        final BesuController<?> controller = createController();\n-        switch (format) {\n-          case RLP:\n-            importRlpBlocks(controller, path);\n-            break;\n-          case JSON:\n-            importJsonBlocks(controller, path);\n-            break;\n-          default:\n-            throw new ParameterException(\n-                spec.commandLine(), \"Unsupported format: \" + format.toString());\n+      try (final BesuController<?> controller = createController()) {\n+        for (final Path path : blockImportFiles) {\n+          try {\n+            LOG.info(\"Importing from {}\", path);\n+\n+            switch (format) {\n+              case RLP:\n+                importRlpBlocks(controller, path);\n+                break;\n+              case JSON:\n+                importJsonBlocks(controller, path);\n+                break;\n+              default:\n+                throw new ParameterException(\n+                    spec.commandLine(), \"Unsupported format: \" + format.toString());\n+            }\n+          } catch (final FileNotFoundException e) {\n+            if (blockImportFiles.size() == 1) {\n+              throw new ExecutionException(\n+                  spec.commandLine(), \"Could not find file to import: \" + path);\n+            } else {\n+              LOG.error(\"Could not find file to import: {}\", path);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b40c4f060be05d46e4d3239bd8b6b10c50c1e8b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyNzU3Mw==", "bodyText": "This code represents what other clients do. They only halt if one file is presented and plow through if multiple files are presented (but share every error).  It's a feature we need to run this on hive efficiently.\nOne use case is one set represents a consensus fork and the next set has overlapping block numbers, but different and correct blocks.  Or if one file would up orphaned by the end and the next file contains the live chain head.", "url": "https://github.com/hyperledger/besu/pull/1033#discussion_r434627573", "createdAt": "2020-06-03T14:50:57Z", "author": {"login": "shemnon"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "diffHunk": "@@ -150,37 +159,48 @@ public void run() {\n     @Override\n     public void run() {\n       parentCommand.parentCommand.configureLogging(false);\n-      LOG.info(\"Import {} block data from {}\", format, blocksImportFile);\n \n       checkCommand(parentCommand);\n       checkNotNull(parentCommand.rlpBlockImporter);\n       checkNotNull(parentCommand.jsonBlockImporterFactory);\n-\n+      if (blockImportFileOption.isEmpty()) {\n+        throw new ParameterException(spec.commandLine(), \"No files specified to import.\");\n+      }\n+      LOG.info(\"Import {} block data from {} files\", format, blockImportFiles.size());\n       final Optional<MetricsService> metricsService = initMetrics(parentCommand);\n \n-      try {\n-        // As blocksImportFile even if initialized as null is injected by PicoCLI and param is\n-        // mandatory. So we are sure it's always not null, we can remove the warning.\n-        //noinspection ConstantConditions\n-        final Path path = blocksImportFile.toPath();\n-        final BesuController<?> controller = createController();\n-        switch (format) {\n-          case RLP:\n-            importRlpBlocks(controller, path);\n-            break;\n-          case JSON:\n-            importJsonBlocks(controller, path);\n-            break;\n-          default:\n-            throw new ParameterException(\n-                spec.commandLine(), \"Unsupported format: \" + format.toString());\n+      try (final BesuController<?> controller = createController()) {\n+        for (final Path path : blockImportFiles) {\n+          try {\n+            LOG.info(\"Importing from {}\", path);\n+\n+            switch (format) {\n+              case RLP:\n+                importRlpBlocks(controller, path);\n+                break;\n+              case JSON:\n+                importJsonBlocks(controller, path);\n+                break;\n+              default:\n+                throw new ParameterException(\n+                    spec.commandLine(), \"Unsupported format: \" + format.toString());\n+            }\n+          } catch (final FileNotFoundException e) {\n+            if (blockImportFiles.size() == 1) {\n+              throw new ExecutionException(\n+                  spec.commandLine(), \"Could not find file to import: \" + path);\n+            } else {\n+              LOG.error(\"Could not find file to import: {}\", path);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMjkyNQ=="}, "originalCommit": {"oid": "0b40c4f060be05d46e4d3239bd8b6b10c50c1e8b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMDEyNA==", "bodyText": "Ah, ok. So we need to continue on in the case where there's an import failure but what about the FileNotFoundException? Do we need plow through that as well in order to conform?", "url": "https://github.com/hyperledger/besu/pull/1033#discussion_r434630124", "createdAt": "2020-06-03T14:54:36Z", "author": {"login": "RatanRSur"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "diffHunk": "@@ -150,37 +159,48 @@ public void run() {\n     @Override\n     public void run() {\n       parentCommand.parentCommand.configureLogging(false);\n-      LOG.info(\"Import {} block data from {}\", format, blocksImportFile);\n \n       checkCommand(parentCommand);\n       checkNotNull(parentCommand.rlpBlockImporter);\n       checkNotNull(parentCommand.jsonBlockImporterFactory);\n-\n+      if (blockImportFileOption.isEmpty()) {\n+        throw new ParameterException(spec.commandLine(), \"No files specified to import.\");\n+      }\n+      LOG.info(\"Import {} block data from {} files\", format, blockImportFiles.size());\n       final Optional<MetricsService> metricsService = initMetrics(parentCommand);\n \n-      try {\n-        // As blocksImportFile even if initialized as null is injected by PicoCLI and param is\n-        // mandatory. So we are sure it's always not null, we can remove the warning.\n-        //noinspection ConstantConditions\n-        final Path path = blocksImportFile.toPath();\n-        final BesuController<?> controller = createController();\n-        switch (format) {\n-          case RLP:\n-            importRlpBlocks(controller, path);\n-            break;\n-          case JSON:\n-            importJsonBlocks(controller, path);\n-            break;\n-          default:\n-            throw new ParameterException(\n-                spec.commandLine(), \"Unsupported format: \" + format.toString());\n+      try (final BesuController<?> controller = createController()) {\n+        for (final Path path : blockImportFiles) {\n+          try {\n+            LOG.info(\"Importing from {}\", path);\n+\n+            switch (format) {\n+              case RLP:\n+                importRlpBlocks(controller, path);\n+                break;\n+              case JSON:\n+                importJsonBlocks(controller, path);\n+                break;\n+              default:\n+                throw new ParameterException(\n+                    spec.commandLine(), \"Unsupported format: \" + format.toString());\n+            }\n+          } catch (final FileNotFoundException e) {\n+            if (blockImportFiles.size() == 1) {\n+              throw new ExecutionException(\n+                  spec.commandLine(), \"Could not find file to import: \" + path);\n+            } else {\n+              LOG.error(\"Could not find file to import: {}\", path);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMjkyNQ=="}, "originalCommit": {"oid": "0b40c4f060be05d46e4d3239bd8b6b10c50c1e8b"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMzY1Mg==", "bodyText": "Yes. An error will be logged, user error could be a buggy auto-generated scripts that used to work.", "url": "https://github.com/hyperledger/besu/pull/1033#discussion_r434633652", "createdAt": "2020-06-03T14:59:19Z", "author": {"login": "shemnon"}, "path": "besu/src/main/java/org/hyperledger/besu/cli/subcommands/blocks/BlocksSubCommand.java", "diffHunk": "@@ -150,37 +159,48 @@ public void run() {\n     @Override\n     public void run() {\n       parentCommand.parentCommand.configureLogging(false);\n-      LOG.info(\"Import {} block data from {}\", format, blocksImportFile);\n \n       checkCommand(parentCommand);\n       checkNotNull(parentCommand.rlpBlockImporter);\n       checkNotNull(parentCommand.jsonBlockImporterFactory);\n-\n+      if (blockImportFileOption.isEmpty()) {\n+        throw new ParameterException(spec.commandLine(), \"No files specified to import.\");\n+      }\n+      LOG.info(\"Import {} block data from {} files\", format, blockImportFiles.size());\n       final Optional<MetricsService> metricsService = initMetrics(parentCommand);\n \n-      try {\n-        // As blocksImportFile even if initialized as null is injected by PicoCLI and param is\n-        // mandatory. So we are sure it's always not null, we can remove the warning.\n-        //noinspection ConstantConditions\n-        final Path path = blocksImportFile.toPath();\n-        final BesuController<?> controller = createController();\n-        switch (format) {\n-          case RLP:\n-            importRlpBlocks(controller, path);\n-            break;\n-          case JSON:\n-            importJsonBlocks(controller, path);\n-            break;\n-          default:\n-            throw new ParameterException(\n-                spec.commandLine(), \"Unsupported format: \" + format.toString());\n+      try (final BesuController<?> controller = createController()) {\n+        for (final Path path : blockImportFiles) {\n+          try {\n+            LOG.info(\"Importing from {}\", path);\n+\n+            switch (format) {\n+              case RLP:\n+                importRlpBlocks(controller, path);\n+                break;\n+              case JSON:\n+                importJsonBlocks(controller, path);\n+                break;\n+              default:\n+                throw new ParameterException(\n+                    spec.commandLine(), \"Unsupported format: \" + format.toString());\n+            }\n+          } catch (final FileNotFoundException e) {\n+            if (blockImportFiles.size() == 1) {\n+              throw new ExecutionException(\n+                  spec.commandLine(), \"Could not find file to import: \" + path);\n+            } else {\n+              LOG.error(\"Could not find file to import: {}\", path);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYyMjkyNQ=="}, "originalCommit": {"oid": "0b40c4f060be05d46e4d3239bd8b6b10c50c1e8b"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 914, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}