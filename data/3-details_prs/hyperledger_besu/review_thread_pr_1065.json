{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjIwNTA3", "number": 1065, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOToyODoyN1rOEEbonA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOToyODoyN1rOEEbonA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDgyNTI0OnYy", "diffSide": "RIGHT", "path": "besu/src/test/java/org/hyperledger/besu/cli/TomlConfigFileDefaultProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOToyODoyN1rOGiDSjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOToyODoyN1rOGiDSjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1ODY3MQ==", "bodyText": "These unit tests were changed, as they relied on the errant behavior that was fixed in this PR in order to function properly.\nBecause a type was not specified in the OptionSpec Builder, picocli would treat them as boolean primitives. Previously, this would fail through to the default string handler, but would get caught and fail in the boolean handling logic after the change. As integers adequately describe these options in the test, they are explicitly cast as such.\nSingle-quoted literal strings were added to the TOML spec in 2014 by toml-lang/toml#232, however it seems as though version 4.1.4 of picocli fails to infer it is a String by default. In any case, the test is not compromised by this change, as it deals mainly with key matching and not type inference.", "url": "https://github.com/hyperledger/besu/pull/1065#discussion_r438358671", "createdAt": "2020-06-10T19:28:27Z", "author": {"login": "schroedingerscode"}, "path": "besu/src/test/java/org/hyperledger/besu/cli/TomlConfigFileDefaultProviderTest.java", "diffHunk": "@@ -72,21 +72,25 @@ public void defaultValueForMatchingKey() throws IOException {\n           new TomlConfigFileDefaultProvider(mockCommandLine, tempConfigFile);\n \n       // this option must be found in config\n-      assertThat(providerUnderTest.defaultValue(OptionSpec.builder(\"a-short-option\").build()))\n+      assertThat(\n+              providerUnderTest.defaultValue(\n+                  OptionSpec.builder(\"a-short-option\").type(Integer.class).build()))\n           .isEqualTo(\"123\");\n \n       // this option must be found in config as one of its names is present in the file.\n       // also this is the shortest one.\n       assertThat(\n               providerUnderTest.defaultValue(\n-                  OptionSpec.builder(\"a-short-option\", \"another-name-for-the-option\").build()))\n+                  OptionSpec.builder(\"a-short-option\", \"another-name-for-the-option\")\n+                      .type(Integer.class)\n+                      .build()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a78dede764d57bdc948dcd6460a62dbb44b1a240"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 791, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}