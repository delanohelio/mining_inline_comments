{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NDUzOTQx", "number": 1599, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo1NToxMlrOE8ZG8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo1OTozNVrOE8ZMog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzYxMzkzOnYy", "diffSide": "RIGHT", "path": "enclave/src/main/java/org/hyperledger/besu/enclave/GoQuorumEnclave.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo1NToxMlrOH4e_Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzoxOToxN1rOH4jNfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4OTk5OA==", "bodyText": "If this is not needed we can delete it.", "url": "https://github.com/hyperledger/besu/pull/1599#discussion_r528989998", "createdAt": "2020-11-23T20:55:12Z", "author": {"login": "lucassaldanha"}, "path": "enclave/src/main/java/org/hyperledger/besu/enclave/GoQuorumEnclave.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.enclave;\n+\n+import org.hyperledger.besu.enclave.RequestTransmitter.ResponseBodyHandler;\n+import org.hyperledger.besu.enclave.types.GoQuorumReceiveResponse;\n+import org.hyperledger.besu.enclave.types.GoQuorumSendRequest;\n+import org.hyperledger.besu.enclave.types.ReceiveRequest;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class GoQuorumEnclave {\n+\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+  private static final String JSON = \"application/json\";\n+\n+  private final RequestTransmitter requestTransmitter;\n+\n+  public GoQuorumEnclave(final RequestTransmitter requestTransmitter) {\n+    this.requestTransmitter = requestTransmitter;\n+  }\n+\n+  public boolean upCheck() {\n+    try {\n+      final String upcheckResponse =\n+          requestTransmitter.get(null, null, \"/upcheck\", this::handleRawResponse);\n+      return upcheckResponse.equals(\"I'm up!\");\n+    } catch (final Exception e) {\n+      return false;\n+    }\n+  }\n+\n+  public SendResponse send(\n+      final byte[] payload, final String privateFrom, final List<String> privateFor) {\n+    final GoQuorumSendRequest request = new GoQuorumSendRequest(payload, privateFrom, privateFor);\n+    return post(\n+        JSON,\n+        request,\n+        \"/send\",\n+        (statusCode, body) -> handleJsonResponse(statusCode, body, SendResponse.class, 201));\n+  }\n+\n+  public GoQuorumReceiveResponse receive(final String payloadKey) {\n+    final ReceiveRequest request = new ReceiveRequest(payloadKey);\n+    return get(\n+        JSON,\n+        request,\n+        \"/receive\",\n+        (statusCode, body) ->\n+            handleJsonResponse(statusCode, body, GoQuorumReceiveResponse.class, 200));\n+  }\n+\n+  //  This method is not needed for GoQuorum privacy, as we do not support multi-tenancy\n+  //  public GoQuorumReceiveResponse receive(final String payloadKey, final String to) {\n+  //    final ReceiveRequest request = new ReceiveRequest(payloadKey, to);\n+  //    return get(\n+  //        JSON,\n+  //        request,\n+  //        \"/receive\",\n+  //        (statusCode, body) ->\n+  //            handleJsonResponse(statusCode, body, GoQuorumReceiveResponse.class, 200));\n+  //  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85643072e0cca1dda4a3c12ede417109786bb1e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1OTE5Nw==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/1599#discussion_r529059197", "createdAt": "2020-11-23T23:19:17Z", "author": {"login": "pinges"}, "path": "enclave/src/main/java/org/hyperledger/besu/enclave/GoQuorumEnclave.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.enclave;\n+\n+import org.hyperledger.besu.enclave.RequestTransmitter.ResponseBodyHandler;\n+import org.hyperledger.besu.enclave.types.GoQuorumReceiveResponse;\n+import org.hyperledger.besu.enclave.types.GoQuorumSendRequest;\n+import org.hyperledger.besu.enclave.types.ReceiveRequest;\n+import org.hyperledger.besu.enclave.types.SendResponse;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class GoQuorumEnclave {\n+\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+  private static final String JSON = \"application/json\";\n+\n+  private final RequestTransmitter requestTransmitter;\n+\n+  public GoQuorumEnclave(final RequestTransmitter requestTransmitter) {\n+    this.requestTransmitter = requestTransmitter;\n+  }\n+\n+  public boolean upCheck() {\n+    try {\n+      final String upcheckResponse =\n+          requestTransmitter.get(null, null, \"/upcheck\", this::handleRawResponse);\n+      return upcheckResponse.equals(\"I'm up!\");\n+    } catch (final Exception e) {\n+      return false;\n+    }\n+  }\n+\n+  public SendResponse send(\n+      final byte[] payload, final String privateFrom, final List<String> privateFor) {\n+    final GoQuorumSendRequest request = new GoQuorumSendRequest(payload, privateFrom, privateFor);\n+    return post(\n+        JSON,\n+        request,\n+        \"/send\",\n+        (statusCode, body) -> handleJsonResponse(statusCode, body, SendResponse.class, 201));\n+  }\n+\n+  public GoQuorumReceiveResponse receive(final String payloadKey) {\n+    final ReceiveRequest request = new ReceiveRequest(payloadKey);\n+    return get(\n+        JSON,\n+        request,\n+        \"/receive\",\n+        (statusCode, body) ->\n+            handleJsonResponse(statusCode, body, GoQuorumReceiveResponse.class, 200));\n+  }\n+\n+  //  This method is not needed for GoQuorum privacy, as we do not support multi-tenancy\n+  //  public GoQuorumReceiveResponse receive(final String payloadKey, final String to) {\n+  //    final ReceiveRequest request = new ReceiveRequest(payloadKey, to);\n+  //    return get(\n+  //        JSON,\n+  //        request,\n+  //        \"/receive\",\n+  //        (statusCode, body) ->\n+  //            handleJsonResponse(statusCode, body, GoQuorumReceiveResponse.class, 200));\n+  //  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4OTk5OA=="}, "originalCommit": {"oid": "a85643072e0cca1dda4a3c12ede417109786bb1e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNzYyODUwOnYy", "diffSide": "RIGHT", "path": "enclave/src/main/java/org/hyperledger/besu/enclave/RequestTransmitter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMDo1OTozNVrOH4fHvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMDo0MDozM1rOH4k9uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MjE5MA==", "bodyText": "Why do we need the media-type and content in the interface?", "url": "https://github.com/hyperledger/besu/pull/1599#discussion_r528992190", "createdAt": "2020-11-23T20:59:35Z", "author": {"login": "lucassaldanha"}, "path": "enclave/src/main/java/org/hyperledger/besu/enclave/RequestTransmitter.java", "diffHunk": "@@ -27,5 +27,9 @@\n       String endpoint,\n       ResponseBodyHandler<T> responseBodyHandler);\n \n-  <T> T get(String endpoint, ResponseBodyHandler<T> responseBodyHandler);\n+  <T> T get(\n+      String mediaType,\n+      String content,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85643072e0cca1dda4a3c12ede417109786bb1e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA1OTIzMA==", "bodyText": "This is needed because we have to set the contentType and the content when we are doing the /receive with Tessera, but we can't set it for the /upcheck with Orion or Tessera.", "url": "https://github.com/hyperledger/besu/pull/1599#discussion_r529059230", "createdAt": "2020-11-23T23:19:22Z", "author": {"login": "pinges"}, "path": "enclave/src/main/java/org/hyperledger/besu/enclave/RequestTransmitter.java", "diffHunk": "@@ -27,5 +27,9 @@\n       String endpoint,\n       ResponseBodyHandler<T> responseBodyHandler);\n \n-  <T> T get(String endpoint, ResponseBodyHandler<T> responseBodyHandler);\n+  <T> T get(\n+      String mediaType,\n+      String content,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MjE5MA=="}, "originalCommit": {"oid": "a85643072e0cca1dda4a3c12ede417109786bb1e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4NzkzMQ==", "bodyText": "Is the content-type dynamic? Isn't this something that can be set when instantiating the implementation of RequestTransmitter?", "url": "https://github.com/hyperledger/besu/pull/1599#discussion_r529087931", "createdAt": "2020-11-24T00:40:33Z", "author": {"login": "lucassaldanha"}, "path": "enclave/src/main/java/org/hyperledger/besu/enclave/RequestTransmitter.java", "diffHunk": "@@ -27,5 +27,9 @@\n       String endpoint,\n       ResponseBodyHandler<T> responseBodyHandler);\n \n-  <T> T get(String endpoint, ResponseBodyHandler<T> responseBodyHandler);\n+  <T> T get(\n+      String mediaType,\n+      String content,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk5MjE5MA=="}, "originalCommit": {"oid": "a85643072e0cca1dda4a3c12ede417109786bb1e"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1366, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}