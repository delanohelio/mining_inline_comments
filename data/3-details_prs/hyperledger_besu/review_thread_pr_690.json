{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMjM1NTA5", "number": 690, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyNzoxNVrODwSVfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyMjozNFrODxca2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU4NjU1OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyNzoxNVrOGDMuyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoyNzozNlrOGEQyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzQ5OA==", "bodyText": "For consistency with other files in this PR, I'd recommend the Besu classes not being fully qualified (e.g. Signature) and instead having the Tuweni classes with SECP256K1 prefix instead.", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r406007498", "createdAt": "2020-04-09T07:27:15Z", "author": {"login": "CjHare"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,42 @@\n  */\n package org.hyperledger.besu.crypto;\n \n+import org.hyperledger.besu.crypto.SECP256K1.KeyPair;\n import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n import org.hyperledger.besu.crypto.SECP256K1.Signature;\n \n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n \n-  Signature sign(Bytes32 dataHash);\n+  private final SecurityModule crypto;\n \n-  PublicKey getPublicKey();\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n \n-  Bytes32 calculateECDHKeyAgreement(PublicKey publicKey);\n+  public Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81cfd3598e2ea89c3091382340ca1c57c3eaf7da"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjQ4MQ==", "bodyText": "Agreed - reads much more nicely \ud83d\udc4d", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407122481", "createdAt": "2020-04-11T23:27:36Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,42 @@\n  */\n package org.hyperledger.besu.crypto;\n \n+import org.hyperledger.besu.crypto.SECP256K1.KeyPair;\n import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n import org.hyperledger.besu.crypto.SECP256K1.Signature;\n \n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n \n-  Signature sign(Bytes32 dataHash);\n+  private final SecurityModule crypto;\n \n-  PublicKey getPublicKey();\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n \n-  Bytes32 calculateECDHKeyAgreement(PublicKey publicKey);\n+  public Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzQ5OA=="}, "originalCommit": {"oid": "81cfd3598e2ea89c3091382340ca1c57c3eaf7da"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU5MDkxOnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyODo0MFrOGDMxhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoyODowNlrOGEQyYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwODE5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * interface ensures cryptographic functions required by an Ethereum are available to the\n          \n          \n            \n             * interface ensures cryptographic functions required by Ethereum are available to the", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r406008196", "createdAt": "2020-04-09T07:28:40Z", "author": {"login": "CjHare"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Provides a generic interface for classes which wrap/hide a cryptographic private key. This\n+ * interface ensures cryptographic functions required by an Ethereum are available to the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81cfd3598e2ea89c3091382340ca1c57c3eaf7da"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjUzMQ==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407122531", "createdAt": "2020-04-11T23:28:06Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Provides a generic interface for classes which wrap/hide a cryptographic private key. This\n+ * interface ensures cryptographic functions required by an Ethereum are available to the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwODE5Ng=="}, "originalCommit": {"oid": "81cfd3598e2ea89c3091382340ca1c57c3eaf7da"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTU5OTAxOnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/Signature.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzozMToyMFrOGDM2mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoyODoyN1rOGEQyig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwOTQ5Ng==", "bodyText": "Suggestion: maybe a name like recoveryIndex would be more fitting for this variable, as recId didn't mean anything to me until I read this class.", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r406009496", "createdAt": "2020-04-09T07:31:20Z", "author": {"login": "CjHare"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/Signature.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import java.math.BigInteger;\n+\n+public final class Signature {\n+\n+  /**\n+   * The recovery id to reconstruct the public key used to create the signature.\n+   *\n+   * <p>The recId is an index from 0 to 3 which indicates which of the 4 possible keys is the\n+   * correct one. Because the key recovery operation yields multiple potential keys, the correct key\n+   * must either be stored alongside the signature, or you must be willing to try each recId in turn\n+   * until you find one that outputs the key you are expecting.\n+   */\n+  private final byte recId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81cfd3598e2ea89c3091382340ca1c57c3eaf7da"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjU3MA==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407122570", "createdAt": "2020-04-11T23:28:27Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/Signature.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import java.math.BigInteger;\n+\n+public final class Signature {\n+\n+  /**\n+   * The recovery id to reconstruct the public key used to create the signature.\n+   *\n+   * <p>The recId is an index from 0 to 3 which indicates which of the 4 possible keys is the\n+   * correct one. Because the key recovery operation yields multiple potential keys, the correct key\n+   * must either be stored alongside the signature, or you must be willing to try each recId in turn\n+   * until you find one that outputs the key you are expecting.\n+   */\n+  private final byte recId;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwOTQ5Ng=="}, "originalCommit": {"oid": "81cfd3598e2ea89c3091382340ca1c57c3eaf7da"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY4MzI0OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDo1OTo1NFrOGE6Z7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyNDoxMlrOGE60DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDM5Nw==", "bodyText": "This can be now \"non-quailfied\" as Signature signature = crypto.sign(dataHash);", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407804397", "createdAt": "2020-04-14T00:59:54Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTA4NA==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811084", "createdAt": "2020-04-14T01:24:12Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDM5Nw=="}, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY4NTAxOnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowMDo1MlrOGE6a-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyNDoxN1rOGE60IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDY2Nw==", "bodyText": "no need to use fully qualified constructor now.", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407804667", "createdAt": "2020-04-14T01:00:52Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTEwNQ==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811105", "createdAt": "2020-04-14T01:24:17Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNDY2Nw=="}, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY5MDgzOnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowNDowMVrOGE6eXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyNDozOVrOGE60iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTUzNQ==", "bodyText": "nit: final", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407805535", "createdAt": "2020-04-14T01:04:01Z", "author": {"login": "jframe"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTIxMQ==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811211", "createdAt": "2020-04-14T01:24:39Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTUzNQ=="}, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY5MzUzOnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowNTozNFrOGE6f9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyNDo0MlrOGE60ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTk0Mw==", "bodyText": "nit: final", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407805943", "createdAt": "2020-04-14T01:05:34Z", "author": {"login": "jframe"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTIzMA==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811230", "createdAt": "2020-04-14T01:24:42Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNTk0Mw=="}, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTY5NDQ0OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowNjowNVrOGE6ghA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyNDo0OFrOGE600w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjA4NA==", "bodyText": "Rename crypto to securityModule to be consistent with param type", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407806084", "createdAt": "2020-04-14T01:06:05Z", "author": {"login": "jframe"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTI4Mw==", "bodyText": "done", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811283", "createdAt": "2020-04-14T01:24:48Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjA4NA=="}, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTcwMDQ5OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowOToxNFrOGE6j_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyNTozN1rOGE61kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjk3NA==", "bodyText": "Not sure this belongs in this class, is this only ever used in testing? It looks like it is?", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407806974", "createdAt": "2020-04-14T01:09:14Z", "author": {"login": "jframe"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());\n \n-  Signature sign(Bytes32 dataHash);\n+    return crypto.calculateECDHKeyAgreement(pubKey);\n+  }\n \n-  PublicKey getPublicKey();\n+  public static NodeKey createFrom(final SECP256K1.KeyPair keyPair) {\n+    return new NodeKey(new BouncyCastleSecurityModule(keyPair));\n+  }\n \n-  Bytes32 calculateECDHKeyAgreement(PublicKey publicKey);\n+  public static NodeKey generate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTQ3NQ==", "bodyText": "yeah, its only test ... but simplifies things if its here ... what do you think?", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811475", "createdAt": "2020-04-14T01:25:37Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());\n \n-  Signature sign(Bytes32 dataHash);\n+    return crypto.calculateECDHKeyAgreement(pubKey);\n+  }\n \n-  PublicKey getPublicKey();\n+  public static NodeKey createFrom(final SECP256K1.KeyPair keyPair) {\n+    return new NodeKey(new BouncyCastleSecurityModule(keyPair));\n+  }\n \n-  Bytes32 calculateECDHKeyAgreement(PublicKey publicKey);\n+  public static NodeKey generate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNjk3NA=="}, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTcwMTY2OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMTowOTo1MVrOGE6kqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMjozNDoxN1rOGE7_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNzE0NQ==", "bodyText": "This also looks like it is only needed for test code?", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407807145", "createdAt": "2020-04-14T01:09:51Z", "author": {"login": "jframe"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());\n \n-  Signature sign(Bytes32 dataHash);\n+    return crypto.calculateECDHKeyAgreement(pubKey);\n+  }\n \n-  PublicKey getPublicKey();\n+  public static NodeKey createFrom(final SECP256K1.KeyPair keyPair) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTUyMQ==", "bodyText": "yeah, its only test ... but simplifies things if its here ... what do you think?", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811521", "createdAt": "2020-04-14T01:25:47Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());\n \n-  Signature sign(Bytes32 dataHash);\n+    return crypto.calculateECDHKeyAgreement(pubKey);\n+  }\n \n-  PublicKey getPublicKey();\n+  public static NodeKey createFrom(final SECP256K1.KeyPair keyPair) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNzE0NQ=="}, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzMDI3NA==", "bodyText": "A separation of test code from production code would probably be nicer.\nOptions are either:\n\nleave as is and annotation with @VisibleForTesting  (which has been done elsewhere)\nmove into a new NodeKeyTestUtil class that lives among the tests", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407830274", "createdAt": "2020-04-14T02:34:17Z", "author": {"login": "CjHare"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/NodeKey.java", "diffHunk": "@@ -14,16 +14,38 @@\n  */\n package org.hyperledger.besu.crypto;\n \n-import org.hyperledger.besu.crypto.SECP256K1.PublicKey;\n-import org.hyperledger.besu.crypto.SECP256K1.Signature;\n-\n import org.apache.tuweni.bytes.Bytes32;\n \n-public interface NodeKey {\n+public class NodeKey {\n+\n+  private final SecurityModule crypto;\n+\n+  public NodeKey(final SecurityModule crypto) {\n+    this.crypto = crypto;\n+  }\n+\n+  public SECP256K1.Signature sign(final Bytes32 dataHash) {\n+    org.hyperledger.besu.crypto.Signature signature = crypto.sign(dataHash);\n+    return SECP256K1.Signature.create(\n+        signature.getR(), signature.getS(), signature.getRecoveryId());\n+  }\n+\n+  public PublicKey getPublicKey() {\n+    org.hyperledger.besu.crypto.PublicKey pubKey = crypto.getPublicKey();\n+    return PublicKey.create(pubKey.getEncoded());\n+  }\n+\n+  public Bytes32 calculateECDHKeyAgreement(final SECP256K1.PublicKey partyKey) {\n+    PublicKey pubKey = new org.hyperledger.besu.crypto.PublicKey(partyKey.getEncodedBytes());\n \n-  Signature sign(Bytes32 dataHash);\n+    return crypto.calculateECDHKeyAgreement(pubKey);\n+  }\n \n-  PublicKey getPublicKey();\n+  public static NodeKey createFrom(final SECP256K1.KeyPair keyPair) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwNzE0NQ=="}, "originalCommit": {"oid": "2c26078413dc4cf85e7262ad7eb7839280444d3c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTcwNzk2OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToxMzozMFrOGE6odg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToxMzozMFrOGE6odg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODExOA==", "bodyText": "This name doesn't quite seem right as it's wrapping a private key, it's not a general security module. Not a great name either but perhaps PrivateKeySecurityModule?", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407808118", "createdAt": "2020-04-14T01:13:30Z", "author": {"login": "jframe"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Provides a generic interface for classes which wrap/hide a cryptographic private key. This\n+ * interface ensures cryptographic functions required by Ethereum are available to the application\n+ * at large, without releasing the content of the private key.\n+ */\n+public interface SecurityModule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d68afa350c7f4ee79ff1004c0d49ae6fdcef305c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTcxMzk5OnYy", "diffSide": "RIGHT", "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToxNjo1MlrOGE6r5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyNjoxOFrOGE62Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODk5Nw==", "bodyText": "Since there is only one key agreement now, we could just name this calculateKeyAgreement", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407808997", "createdAt": "2020-04-14T01:16:52Z", "author": {"login": "jframe"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Provides a generic interface for classes which wrap/hide a cryptographic private key. This\n+ * interface ensures cryptographic functions required by Ethereum are available to the application\n+ * at large, without releasing the content of the private key.\n+ */\n+public interface SecurityModule {\n+\n+  /**\n+   * @param dataHash The Keccack hash of a set of data, which is to be signed.\n+   * @return the signature (R, S, recId) generated by signing the hash with the node key\n+   */\n+  Signature sign(Bytes32 dataHash);\n+\n+  /** @return the public key associated with the key stored behind this interface. */\n+  PublicKey getPublicKey();\n+\n+  /**\n+   * @param partyKey the key with which an agreement is to be created.\n+   * @return The bytes forming the agreement\n+   */\n+  Bytes32 calculateECDHKeyAgreement(PublicKey partyKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d68afa350c7f4ee79ff1004c0d49ae6fdcef305c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTY2Ng==", "bodyText": "it is specifically for ECDH - and there other other types (at least according to Luna) - so happy to let this stick.", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407811666", "createdAt": "2020-04-14T01:26:18Z", "author": {"login": "rain-on"}, "path": "crypto/src/main/java/org/hyperledger/besu/crypto/SecurityModule.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.crypto;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+\n+/**\n+ * Provides a generic interface for classes which wrap/hide a cryptographic private key. This\n+ * interface ensures cryptographic functions required by Ethereum are available to the application\n+ * at large, without releasing the content of the private key.\n+ */\n+public interface SecurityModule {\n+\n+  /**\n+   * @param dataHash The Keccack hash of a set of data, which is to be signed.\n+   * @return the signature (R, S, recId) generated by signing the hash with the node key\n+   */\n+  Signature sign(Bytes32 dataHash);\n+\n+  /** @return the public key associated with the key stored behind this interface. */\n+  PublicKey getPublicKey();\n+\n+  /**\n+   * @param partyKey the key with which an agreement is to be created.\n+   * @return The bytes forming the agreement\n+   */\n+  Bytes32 calculateECDHKeyAgreement(PublicKey partyKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODk5Nw=="}, "originalCommit": {"oid": "d68afa350c7f4ee79ff1004c0d49ae6fdcef305c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTcyNDQyOnYy", "diffSide": "RIGHT", "path": "crypto/src/test/java/org/hyperledger/besu/crypto/SECP256K1Test.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyMjozNFrOGE6x9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMToyMjozNFrOGE6x9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMDU1MA==", "bodyText": "this wasn't there before, is that hidden character or something erroneous get copied?", "url": "https://github.com/hyperledger/besu/pull/690#discussion_r407810550", "createdAt": "2020-04-14T01:22:34Z", "author": {"login": "usmansaleem"}, "path": "crypto/src/test/java/org/hyperledger/besu/crypto/SECP256K1Test.java", "diffHunk": "@@ -280,3 +280,4 @@ public void invalidMultiLineFileThrowsInvalidIdException() throws Exception {\n     KeyPairUtil.load(tempFile);\n   }\n }\n+\u2030", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e956e731faabbe2e564efae9acb3eb33984858c6"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1046, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}