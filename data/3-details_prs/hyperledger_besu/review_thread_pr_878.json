{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MDUxNTgz", "number": 878, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzoxOToxM1rOEAY38A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDozMzo1M1rOEAiTwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODQyOTkyOnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/IndirectVertxTimerUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNzoxOToxM1rOGbonxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozMToyNVrOGb60yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzMDI3Nw==", "bodyText": "s/secheduled/scheduled", "url": "https://github.com/hyperledger/besu/pull/878#discussion_r431630277", "createdAt": "2020-05-28T07:19:13Z", "author": {"login": "lucassaldanha"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/IndirectVertxTimerUtil.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.p2p.discovery.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/*\n+ * In May of 2020 we had issues with some combination of vertx, circleci, and\n+ * the machines it was running on no respecting timer delays.  The solution was\n+ * to use JDK executors for those timer delays.\n+ *\n+ * This should be revisited at a future date to see if we still need this.\n+ */\n+public class IndirectVertxTimerUtil implements TimerUtil {\n+\n+  private final ScheduledExecutorService secheduledExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private final AtomicLong nextId = new AtomicLong(0);\n+  private final Map<Long, ScheduledFuture<?>> timers = new HashMap<>();\n+  private final Vertx vertx;\n+\n+  public IndirectVertxTimerUtil(final Vertx vertx) {\n+    this.vertx = vertx;\n+  }\n+\n+  @Override\n+  public long setPeriodic(final long delayInMs, final TimerHandler handler) {\n+    final long id = nextId.get();\n+    timers.put(\n+        id,\n+        secheduledExecutor.scheduleAtFixedRate(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e6224555753f8596f23f47dbedace73857a542"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyODUyMg==", "bodyText": "fixed.", "url": "https://github.com/hyperledger/besu/pull/878#discussion_r431928522", "createdAt": "2020-05-28T15:31:25Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/IndirectVertxTimerUtil.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.p2p.discovery.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/*\n+ * In May of 2020 we had issues with some combination of vertx, circleci, and\n+ * the machines it was running on no respecting timer delays.  The solution was\n+ * to use JDK executors for those timer delays.\n+ *\n+ * This should be revisited at a future date to see if we still need this.\n+ */\n+public class IndirectVertxTimerUtil implements TimerUtil {\n+\n+  private final ScheduledExecutorService secheduledExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private final AtomicLong nextId = new AtomicLong(0);\n+  private final Map<Long, ScheduledFuture<?>> timers = new HashMap<>();\n+  private final Vertx vertx;\n+\n+  public IndirectVertxTimerUtil(final Vertx vertx) {\n+    this.vertx = vertx;\n+  }\n+\n+  @Override\n+  public long setPeriodic(final long delayInMs, final TimerHandler handler) {\n+    final long id = nextId.get();\n+    timers.put(\n+        id,\n+        secheduledExecutor.scheduleAtFixedRate(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzMDI3Nw=="}, "originalCommit": {"oid": "77e6224555753f8596f23f47dbedace73857a542"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTcxMjI3OnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/IndirectVertxTimerUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzozODoyMFrOGb1d8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTo0NzoxMlrOGb7geA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0MDc1NA==", "bodyText": "One issue to investigate here is whether this will cause threading issues.  IIRC, VertexTimerUtil guarantees the timed callbacks happen in the calling thread, and I think we need that as the code is currently written ...", "url": "https://github.com/hyperledger/besu/pull/878#discussion_r431840754", "createdAt": "2020-05-28T13:38:20Z", "author": {"login": "mbaxter"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/IndirectVertxTimerUtil.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.p2p.discovery.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/*\n+ * In May of 2020 we had issues with some combination of vertx, circleci, and\n+ * the machines it was running on no respecting timer delays.  The solution was\n+ * to use JDK executors for those timer delays.\n+ *\n+ * This should be revisited at a future date to see if we still need this.\n+ */\n+public class IndirectVertxTimerUtil implements TimerUtil {\n+\n+  private final ScheduledExecutorService secheduledExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private final AtomicLong nextId = new AtomicLong(0);\n+  private final Map<Long, ScheduledFuture<?>> timers = new HashMap<>();\n+  private final Vertx vertx;\n+\n+  public IndirectVertxTimerUtil(final Vertx vertx) {\n+    this.vertx = vertx;\n+  }\n+\n+  @Override\n+  public long setPeriodic(final long delayInMs, final TimerHandler handler) {\n+    final long id = nextId.get();\n+    timers.put(\n+        id,\n+        secheduledExecutor.scheduleAtFixedRate(\n+            () -> vertx.executeBlocking(e -> handler.handle(), r -> {}),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e6224555753f8596f23f47dbedace73857a542"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzMTUyNA==", "bodyText": "That would be the event loop or io thread in this case.  Doing cryptography in the event loop or io thread could be a limiter to the number of concurrent peers we can service, especially when it could block on randomness.\nWhile I haven't proven it yet I think this (too much processing, like walking a 4000 entry hash table) is what's causing our eth/65 issues, so getting stuff off of the io thread looks to be a long term goal.", "url": "https://github.com/hyperledger/besu/pull/878#discussion_r431931524", "createdAt": "2020-05-28T15:35:38Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/IndirectVertxTimerUtil.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.p2p.discovery.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/*\n+ * In May of 2020 we had issues with some combination of vertx, circleci, and\n+ * the machines it was running on no respecting timer delays.  The solution was\n+ * to use JDK executors for those timer delays.\n+ *\n+ * This should be revisited at a future date to see if we still need this.\n+ */\n+public class IndirectVertxTimerUtil implements TimerUtil {\n+\n+  private final ScheduledExecutorService secheduledExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private final AtomicLong nextId = new AtomicLong(0);\n+  private final Map<Long, ScheduledFuture<?>> timers = new HashMap<>();\n+  private final Vertx vertx;\n+\n+  public IndirectVertxTimerUtil(final Vertx vertx) {\n+    this.vertx = vertx;\n+  }\n+\n+  @Override\n+  public long setPeriodic(final long delayInMs, final TimerHandler handler) {\n+    final long id = nextId.get();\n+    timers.put(\n+        id,\n+        secheduledExecutor.scheduleAtFixedRate(\n+            () -> vertx.executeBlocking(e -> handler.handle(), r -> {}),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0MDc1NA=="}, "originalCommit": {"oid": "77e6224555753f8596f23f47dbedace73857a542"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzOTcwNA==", "bodyText": "That makes sense.  We just need to make sure that the code we're executing with this timer is thread-safe.", "url": "https://github.com/hyperledger/besu/pull/878#discussion_r431939704", "createdAt": "2020-05-28T15:47:12Z", "author": {"login": "mbaxter"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/IndirectVertxTimerUtil.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.p2p.discovery.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/*\n+ * In May of 2020 we had issues with some combination of vertx, circleci, and\n+ * the machines it was running on no respecting timer delays.  The solution was\n+ * to use JDK executors for those timer delays.\n+ *\n+ * This should be revisited at a future date to see if we still need this.\n+ */\n+public class IndirectVertxTimerUtil implements TimerUtil {\n+\n+  private final ScheduledExecutorService secheduledExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private final AtomicLong nextId = new AtomicLong(0);\n+  private final Map<Long, ScheduledFuture<?>> timers = new HashMap<>();\n+  private final Vertx vertx;\n+\n+  public IndirectVertxTimerUtil(final Vertx vertx) {\n+    this.vertx = vertx;\n+  }\n+\n+  @Override\n+  public long setPeriodic(final long delayInMs, final TimerHandler handler) {\n+    final long id = nextId.get();\n+    timers.put(\n+        id,\n+        secheduledExecutor.scheduleAtFixedRate(\n+            () -> vertx.executeBlocking(e -> handler.handle(), r -> {}),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0MDc1NA=="}, "originalCommit": {"oid": "77e6224555753f8596f23f47dbedace73857a542"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTk3NTcwOnYy", "diffSide": "RIGHT", "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/IndirectVertxTimerUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDozMzo1M1rOGb4Fqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNTozMToxNVrOGb60ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4MzY5MQ==", "bodyText": "Is this supposed to get incremented somewhere?", "url": "https://github.com/hyperledger/besu/pull/878#discussion_r431883691", "createdAt": "2020-05-28T14:33:53Z", "author": {"login": "RatanRSur"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/IndirectVertxTimerUtil.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.p2p.discovery.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/*\n+ * In May of 2020 we had issues with some combination of vertx, circleci, and\n+ * the machines it was running on no respecting timer delays.  The solution was\n+ * to use JDK executors for those timer delays.\n+ *\n+ * This should be revisited at a future date to see if we still need this.\n+ */\n+public class IndirectVertxTimerUtil implements TimerUtil {\n+\n+  private final ScheduledExecutorService secheduledExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private final AtomicLong nextId = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77e6224555753f8596f23f47dbedace73857a542"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyODQyNg==", "bodyText": "Yep, missed it.", "url": "https://github.com/hyperledger/besu/pull/878#discussion_r431928426", "createdAt": "2020-05-28T15:31:15Z", "author": {"login": "shemnon"}, "path": "ethereum/p2p/src/main/java/org/hyperledger/besu/ethereum/p2p/discovery/internal/IndirectVertxTimerUtil.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.p2p.discovery.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import io.vertx.core.Vertx;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/*\n+ * In May of 2020 we had issues with some combination of vertx, circleci, and\n+ * the machines it was running on no respecting timer delays.  The solution was\n+ * to use JDK executors for those timer delays.\n+ *\n+ * This should be revisited at a future date to see if we still need this.\n+ */\n+public class IndirectVertxTimerUtil implements TimerUtil {\n+\n+  private final ScheduledExecutorService secheduledExecutor =\n+      Executors.newSingleThreadScheduledExecutor();\n+  private final AtomicLong nextId = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg4MzY5MQ=="}, "originalCommit": {"oid": "77e6224555753f8596f23f47dbedace73857a542"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 988, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}