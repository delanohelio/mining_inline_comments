{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MjEwMDIy", "number": 1511, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozNTo1NlrOE12w4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozOTo1NVrOE122Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTA3MjM1OnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionsMessageSender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozNTo1NlrOHuXlcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozNTo1NlrOHuXlcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4Mjk2MA==", "bodyText": "I guess this needs to be a constant?", "url": "https://github.com/hyperledger/besu/pull/1511#discussion_r518382960", "createdAt": "2020-11-05T21:35:56Z", "author": {"login": "atoulme"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionsMessageSender.java", "diffHunk": "@@ -37,16 +37,17 @@ public void sendTransactionsToPeers() {\n   }\n \n   private void sendTransactionsToPeer(final EthPeer peer) {\n-    final Set<Hash> allTxToSend = transactionTracker.claimTransactionsToSendToPeer(peer);\n-    while (!allTxToSend.isEmpty()) {\n-      final LimitedNewPooledTransactionHashesMessages limitedTransactionsMessages =\n-          LimitedNewPooledTransactionHashesMessages.createLimited(allTxToSend);\n-      allTxToSend.removeAll(limitedTransactionsMessages.getIncludedTransactions());\n-      try {\n-        peer.send(limitedTransactionsMessages.getTransactionsMessage());\n-      } catch (final PeerNotConnected e) {\n-        return;\n-      }\n-    }\n+    Iterables.partition(\n+            transactionTracker.claimTransactionsToSendToPeer(peer),\n+            4096 // implementation determined limit for how many hashes to send at once", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338e71750e8c9625656a01caff49cef44c9a5c21"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTA4NjI3OnYy", "diffSide": "RIGHT", "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionsMessageSender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozOTo1NVrOHuXtlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMTozOTo1NVrOHuXtlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM4NTA0NQ==", "bodyText": "the original code would return early if the peer was disconnected.\nDo we want to check if the peer is still connected before sending?", "url": "https://github.com/hyperledger/besu/pull/1511#discussion_r518385045", "createdAt": "2020-11-05T21:39:55Z", "author": {"login": "atoulme"}, "path": "ethereum/eth/src/main/java/org/hyperledger/besu/ethereum/eth/transactions/PendingTransactionsMessageSender.java", "diffHunk": "@@ -37,16 +37,17 @@ public void sendTransactionsToPeers() {\n   }\n \n   private void sendTransactionsToPeer(final EthPeer peer) {\n-    final Set<Hash> allTxToSend = transactionTracker.claimTransactionsToSendToPeer(peer);\n-    while (!allTxToSend.isEmpty()) {\n-      final LimitedNewPooledTransactionHashesMessages limitedTransactionsMessages =\n-          LimitedNewPooledTransactionHashesMessages.createLimited(allTxToSend);\n-      allTxToSend.removeAll(limitedTransactionsMessages.getIncludedTransactions());\n-      try {\n-        peer.send(limitedTransactionsMessages.getTransactionsMessage());\n-      } catch (final PeerNotConnected e) {\n-        return;\n-      }\n-    }\n+    Iterables.partition(\n+            transactionTracker.claimTransactionsToSendToPeer(peer),\n+            4096 // implementation determined limit for how many hashes to send at once\n+            )\n+        .forEach(\n+            hashes -> {\n+              try {\n+                peer.send(NewPooledTransactionHashesMessage.create(hashes));\n+              } catch (final PeerNotConnected __) {\n+                // if the peer isn't connected anymore, don't do anything", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "338e71750e8c9625656a01caff49cef44c9a5c21"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1310, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}