{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDkwNzYz", "number": 842, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDo1OTowN1rOD5_lGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOToyMDowM1rOD7kKww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTM3MTEyOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthEstimateGas.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDo1OTowN1rOGRlLsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDo1OTowN1rOGRlLsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA4ODE3OQ==", "bodyText": "I'd prefer we clone and change the object instead of introducing a single mutable field into an otherwise immutable class.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    modifiedCallParams.setGasLimit(highGasLimit);\n          \n          \n            \n            JsonCallParameter modifiedCallParams =\n          \n          \n            \n                    overrideGasLimitAndPrice(callParams, highGasLimit);", "url": "https://github.com/hyperledger/besu/pull/842#discussion_r421088179", "createdAt": "2020-05-06T20:59:07Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthEstimateGas.java", "diffHunk": "@@ -51,21 +60,94 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+\n     final JsonCallParameter callParams =\n         requestContext.getRequiredParameter(0, JsonCallParameter.class);\n \n     final BlockHeader blockHeader = blockHeader();\n     if (blockHeader == null) {\n-      return errorResponse(requestContext, JsonRpcError.INTERNAL_ERROR);\n+      return new JsonRpcErrorResponse(\n+          requestContext.getRequest().getId(), JsonRpcError.INTERNAL_ERROR);\n     }\n+    return doEstimateGas(requestContext.getRequest(), callParams, blockHeader);\n+  }\n+\n+  /**\n+   * Allows to estimate gas for a transaction\n+   *\n+   * @param request json rpc request\n+   * @param callParams call params\n+   * @param blockHeader block header\n+   * @return json rpc response with the estimate gas of the transaction, otherwise the error\n+   */\n+  private JsonRpcResponse doEstimateGas(\n+      final JsonRpcRequest request,\n+      final JsonCallParameter callParams,\n+      final BlockHeader blockHeader) {\n \n-    final JsonCallParameter modifiedCallParams =\n+    long lowGasLimit, midGasLimit, highGasLimit;\n+    int numberOfRetry = 0;\n+    boolean foundEstimateGas;\n+\n+    JsonCallParameter modifiedCallParams =\n         overrideGasLimitAndPrice(callParams, blockHeader.getGasLimit());\n \n-    return transactionSimulator\n-        .process(modifiedCallParams, blockHeader.getNumber())\n-        .map(gasEstimateResponse(requestContext))\n-        .orElse(errorResponse(requestContext, JsonRpcError.INTERNAL_ERROR));\n+    Optional<TransactionSimulatorResult> simulatorResult = Optional.empty();\n+\n+    try {\n+\n+      // make a first estimate of the necessary gasLimit\n+      simulatorResult = transactionSimulator.process(modifiedCallParams, blockHeader.getNumber());\n+      lowGasLimit =\n+          highGasLimit =\n+              simulatorResult\n+                  .filter(TransactionSimulatorResult::isSuccessful)\n+                  .map(TransactionSimulatorResult::getGasEstimate)\n+                  .orElseThrow();\n+\n+      // check that the estimate is valid and if not we increase the estimate by\n+      // GAS_ESTIMATE_CHANGE_DENOMINATOR. if after MAX_ESTIMATE_NUMBER_OF_RETRY retries you cannot\n+      // find a valid estimate. we return the error returned by the transaction\n+      do {\n+\n+        modifiedCallParams.setGasLimit(highGasLimit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "867a463c1a0c0b1226ba92b566833fca52306ace"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTM3MzI2OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/transaction/CallParameter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDo1OTozNlrOGRlM6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDo1OTozNlrOGRlM6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA4ODQ4OQ==", "bodyText": "See my comment on clone and copy.  Making this the only mutable field seems awkward.", "url": "https://github.com/hyperledger/besu/pull/842#discussion_r421088489", "createdAt": "2020-05-06T20:59:36Z", "author": {"login": "shemnon"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/transaction/CallParameter.java", "diffHunk": "@@ -28,7 +28,7 @@\n \n   private final Address to;\n \n-  private final long gasLimit;\n+  private long gasLimit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "867a463c1a0c0b1226ba92b566833fca52306ace"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzgxNjcwOnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthEstimateGas.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOToxMToxM1rOGT9d5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDoyNTowOVrOGUAJvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4MzIwNg==", "bodyText": "I would suggest to compute the 65/64 factor once and set it as a constant in this class.", "url": "https://github.com/hyperledger/besu/pull/842#discussion_r423583206", "createdAt": "2020-05-12T09:11:13Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthEstimateGas.java", "diffHunk": "@@ -85,19 +88,38 @@ private JsonCallParameter overrideGasLimitAndPrice(\n   }\n \n   private Function<TransactionSimulatorResult, JsonRpcResponse> gasEstimateResponse(\n-      final JsonRpcRequestContext request) {\n+      final JsonRpcRequestContext request, final EstimateGasOperationTracer operationTracer) {\n     return result ->\n         result.isSuccessful()\n             ? new JsonRpcSuccessResponse(\n-                request.getRequest().getId(), Quantity.create(result.getGasEstimate()))\n+                request.getRequest().getId(),\n+                Quantity.create(processEstimateGas(result, operationTracer)))\n             : errorResponse(request, result.getValidationResult());\n   }\n \n+  /**\n+   * Estimate gas by adding minimum gas remaining for some operation and the necessary gas for sub\n+   * calls\n+   *\n+   * @param result transaction simulator result\n+   * @param operationTracer estimate gas operation tracer\n+   * @return estimate gas\n+   */\n+  private long processEstimateGas(\n+      final TransactionSimulatorResult result, final EstimateGasOperationTracer operationTracer) {\n+    // no more than 63/64s of the remaining gas can be passed to the sub calls\n+    final double subCallMultiplier = Math.pow(65D / 64D, operationTracer.getMaxDepth());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98cf9753f1f5415c5105a34552836e0d8d77fc3a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNzE5Nw==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/842#discussion_r423627197", "createdAt": "2020-05-12T10:25:09Z", "author": {"login": "matkt"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/EthEstimateGas.java", "diffHunk": "@@ -85,19 +88,38 @@ private JsonCallParameter overrideGasLimitAndPrice(\n   }\n \n   private Function<TransactionSimulatorResult, JsonRpcResponse> gasEstimateResponse(\n-      final JsonRpcRequestContext request) {\n+      final JsonRpcRequestContext request, final EstimateGasOperationTracer operationTracer) {\n     return result ->\n         result.isSuccessful()\n             ? new JsonRpcSuccessResponse(\n-                request.getRequest().getId(), Quantity.create(result.getGasEstimate()))\n+                request.getRequest().getId(),\n+                Quantity.create(processEstimateGas(result, operationTracer)))\n             : errorResponse(request, result.getValidationResult());\n   }\n \n+  /**\n+   * Estimate gas by adding minimum gas remaining for some operation and the necessary gas for sub\n+   * calls\n+   *\n+   * @param result transaction simulator result\n+   * @param operationTracer estimate gas operation tracer\n+   * @return estimate gas\n+   */\n+  private long processEstimateGas(\n+      final TransactionSimulatorResult result, final EstimateGasOperationTracer operationTracer) {\n+    // no more than 63/64s of the remaining gas can be passed to the sub calls\n+    final double subCallMultiplier = Math.pow(65D / 64D, operationTracer.getMaxDepth());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4MzIwNg=="}, "originalCommit": {"oid": "98cf9753f1f5415c5105a34552836e0d8d77fc3a"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzgyNzQwOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/TransactionProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOToxNDowN1rOGT9lAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDoyNToxNlrOGUAKDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4NTAyNg==", "bodyText": "Missing Javadoc", "url": "https://github.com/hyperledger/besu/pull/842#discussion_r423585026", "createdAt": "2020-05-12T09:14:07Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/TransactionProcessor.java", "diffHunk": "@@ -105,6 +105,8 @@ default boolean isSuccessful() {\n      * @return the revert reason.\n      */\n     Optional<Bytes> getRevertReason();\n+\n+    long getEstimateGasUsedByTransaction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98cf9753f1f5415c5105a34552836e0d8d77fc3a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNzI3OA==", "bodyText": "Added", "url": "https://github.com/hyperledger/besu/pull/842#discussion_r423627278", "createdAt": "2020-05-12T10:25:16Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/TransactionProcessor.java", "diffHunk": "@@ -105,6 +105,8 @@ default boolean isSuccessful() {\n      * @return the revert reason.\n      */\n     Optional<Bytes> getRevertReason();\n+\n+    long getEstimateGasUsedByTransaction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4NTAyNg=="}, "originalCommit": {"oid": "98cf9753f1f5415c5105a34552836e0d8d77fc3a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzg0MTg2OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/EstimateGasOperationTracer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOToxNzo1MFrOGT9uMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDoyNToyOVrOGUAKgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4NzM3OQ==", "bodyText": "Rather use Gas.compareTo method to check if sStoreStipendNeeded  is equal to zero. Conversion to long is not necessary.", "url": "https://github.com/hyperledger/besu/pull/842#discussion_r423587379", "createdAt": "2020-05-12T09:17:50Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/EstimateGasOperationTracer.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.vm;\n+\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+import org.hyperledger.besu.ethereum.vm.operations.SStoreOperation;\n+\n+import java.util.Optional;\n+\n+public class EstimateGasOperationTracer implements OperationTracer {\n+\n+  private int maxDepth = 0;\n+\n+  private Gas sStoreStipendNeeded = Gas.ZERO;\n+\n+  @Override\n+  public void traceExecution(\n+      final MessageFrame frame,\n+      final Optional<Gas> currentGasCost,\n+      final OperationTracer.ExecuteOperation executeOperation)\n+      throws ExceptionalHaltException {\n+    try {\n+      executeOperation.execute();\n+    } finally {\n+      if (frame.getCurrentOperation() instanceof SStoreOperation\n+          && sStoreStipendNeeded.toLong() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98cf9753f1f5415c5105a34552836e0d8d77fc3a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNzM5NQ==", "bodyText": "Done", "url": "https://github.com/hyperledger/besu/pull/842#discussion_r423627395", "createdAt": "2020-05-12T10:25:29Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/vm/EstimateGasOperationTracer.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.vm;\n+\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+import org.hyperledger.besu.ethereum.vm.operations.SStoreOperation;\n+\n+import java.util.Optional;\n+\n+public class EstimateGasOperationTracer implements OperationTracer {\n+\n+  private int maxDepth = 0;\n+\n+  private Gas sStoreStipendNeeded = Gas.ZERO;\n+\n+  @Override\n+  public void traceExecution(\n+      final MessageFrame frame,\n+      final Optional<Gas> currentGasCost,\n+      final OperationTracer.ExecuteOperation executeOperation)\n+      throws ExceptionalHaltException {\n+    try {\n+      executeOperation.execute();\n+    } finally {\n+      if (frame.getCurrentOperation() instanceof SStoreOperation\n+          && sStoreStipendNeeded.toLong() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4NzM3OQ=="}, "originalCommit": {"oid": "98cf9753f1f5415c5105a34552836e0d8d77fc3a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzg1MTU1OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/vm/EstimateGasOperationTracerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOToyMDowM1rOGT90Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMDoyNTo1OVrOGUALpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4ODg5NA==", "bodyText": "(Suggestion): For consistency i would suggest to import statically assertThat method.", "url": "https://github.com/hyperledger/besu/pull/842#discussion_r423588894", "createdAt": "2020-05-12T09:20:03Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/vm/EstimateGasOperationTracerTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.vm;\n+\n+import static org.mockito.Mockito.mock;\n+\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.MessageFrameTestFixture;\n+import org.hyperledger.besu.ethereum.vm.OperationTracer.ExecuteOperation;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+import org.hyperledger.besu.ethereum.vm.operations.CallCodeOperation;\n+import org.hyperledger.besu.ethereum.vm.operations.SStoreOperation;\n+\n+import java.util.Optional;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class EstimateGasOperationTracerTest {\n+\n+  private EstimateGasOperationTracer operationTracer;\n+  private MessageFrameTestFixture messageFrameTestFixture;\n+\n+  @Before\n+  public void setUp() {\n+    operationTracer = new EstimateGasOperationTracer();\n+    messageFrameTestFixture = new MessageFrameTestFixture();\n+  }\n+\n+  @Test\n+  public void shouldDetectChangeInDepthDuringExecution() throws ExceptionalHaltException {\n+\n+    final ExecuteOperation noExecutionOperation = mock(ExecuteOperation.class);\n+\n+    Assertions.assertThat(operationTracer.getMaxDepth()).isEqualTo(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98cf9753f1f5415c5105a34552836e0d8d77fc3a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYyNzY4NA==", "bodyText": "yes you are right I just changed", "url": "https://github.com/hyperledger/besu/pull/842#discussion_r423627684", "createdAt": "2020-05-12T10:25:59Z", "author": {"login": "matkt"}, "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/vm/EstimateGasOperationTracerTest.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.vm;\n+\n+import static org.mockito.Mockito.mock;\n+\n+import org.hyperledger.besu.ethereum.core.Gas;\n+import org.hyperledger.besu.ethereum.core.MessageFrameTestFixture;\n+import org.hyperledger.besu.ethereum.vm.OperationTracer.ExecuteOperation;\n+import org.hyperledger.besu.ethereum.vm.ehalt.ExceptionalHaltException;\n+import org.hyperledger.besu.ethereum.vm.operations.CallCodeOperation;\n+import org.hyperledger.besu.ethereum.vm.operations.SStoreOperation;\n+\n+import java.util.Optional;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class EstimateGasOperationTracerTest {\n+\n+  private EstimateGasOperationTracer operationTracer;\n+  private MessageFrameTestFixture messageFrameTestFixture;\n+\n+  @Before\n+  public void setUp() {\n+    operationTracer = new EstimateGasOperationTracer();\n+    messageFrameTestFixture = new MessageFrameTestFixture();\n+  }\n+\n+  @Test\n+  public void shouldDetectChangeInDepthDuringExecution() throws ExceptionalHaltException {\n+\n+    final ExecuteOperation noExecutionOperation = mock(ExecuteOperation.class);\n+\n+    Assertions.assertThat(operationTracer.getMaxDepth()).isEqualTo(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU4ODg5NA=="}, "originalCommit": {"oid": "98cf9753f1f5415c5105a34552836e0d8d77fc3a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 978, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}