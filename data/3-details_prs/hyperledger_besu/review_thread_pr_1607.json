{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MTAwMzU2", "number": 1607, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNDo0ODowOVrOE9D-4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowMDoxNFrOFBnHVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNDYzODQwOnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNDo0ODowOVrOH5jGJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNDo0ODowOVrOH5jGJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEwNTg5Mg==", "bodyText": "A better name? \"findOnChainPrivacyGroupAndAddNewMembers\"?", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r530105892", "createdAt": "2020-11-25T04:48:09Z", "author": {"login": "pinges"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -312,7 +324,7 @@ public long determineBesuNonce(\n   }\n \n   @Override\n-  public Optional<PrivacyGroup> retrieveOnChainPrivacyGroupWithToBeAddedMembers(\n+  public Optional<PrivacyGroup> findOnChainPrivacyGroupWithToBeAddedMembers(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ec7c977ed2f1a76d3fd40c5ee9d4c168ed78b77"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDY4NDc0OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/PrivDebugGetStateRootOffchainGroupAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDo1MjoyOFrOH95fMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDo1MjoyOFrOH95fMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2NzA1Nw==", "bodyText": "This has the same effect as using a const hash like Hash.ZERO", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r534667057", "createdAt": "2020-12-03T04:52:28Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/PrivDebugGetStateRootOffchainGroupAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.PrivacyAcceptanceTestBase;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.PrivacyNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.account.PrivacyAccountResolver;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PrivDebugGetStateRootOffchainGroupAcceptanceTest extends PrivacyAcceptanceTestBase {\n+\n+  private PrivacyNode aliceNode;\n+  private PrivacyNode bobNode;\n+\n+  @Before\n+  public void setUp() throws IOException, URISyntaxException {\n+    aliceNode =\n+        privacyBesu.createPrivateTransactionEnabledMinerNode(\n+            \"alice-node\", PrivacyAccountResolver.ALICE);\n+    bobNode =\n+        privacyBesu.createPrivateTransactionEnabledMinerNode(\n+            \"bob-node\", PrivacyAccountResolver.BOB);\n+    privacyCluster.start(aliceNode, bobNode);\n+  }\n+\n+  @Test\n+  public void nodesInGroupShouldHaveSameStateRoot() {\n+    final String privacyGroupId =\n+        aliceNode.execute(\n+            privacyTransactions.createPrivacyGroup(\n+                \"testGroup\", \"A group for everyone\", aliceNode, bobNode));\n+\n+    final Hash aliceStateRootId =\n+        aliceNode\n+            .execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"))\n+            .getResult();\n+\n+    final Hash bobStateRootId =\n+        bobNode\n+            .execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"))\n+            .getResult();\n+\n+    assertThat(aliceStateRootId).isEqualTo(bobStateRootId);\n+  }\n+\n+  @Test\n+  public void nodeNotInGroupShouldReturnError() {\n+    final String privacyGroupId =\n+        aliceNode.execute(\n+            privacyTransactions.createPrivacyGroup(\"testGroup\", \"A group for Alice\", aliceNode));\n+\n+    final PrivacyRequestFactory.DebugGetStateRoot aliceResult =\n+        aliceNode.execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"));\n+\n+    assertThat(aliceResult.hasError()).isFalse();\n+    assertThat(aliceResult.getResult()).isNotNull();\n+    assertThat(aliceResult.getResult()).isInstanceOf(Hash.class);\n+\n+    final PrivacyRequestFactory.DebugGetStateRoot bobResult =\n+        bobNode.execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"));\n+\n+    assertThat(bobResult.getResult()).isNull();\n+    assertThat(bobResult.hasError()).isTrue();\n+    assertThat(bobResult.getError()).isNotNull();\n+    assertThat(bobResult.getError().getMessage()).contains(\"Error finding privacy group\");\n+  }\n+\n+  @Test\n+  public void unknownGroupShouldReturnError() {\n+    final PrivacyRequestFactory.DebugGetStateRoot aliceResult =\n+        aliceNode.execute(\n+            privacyTransactions.debugGetStateRoot(\n+                Hash.wrap(Bytes32.random()).toBase64String(), \"latest\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028a8ac116d17a75692bd6e52101503831fce880"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDY5NzAxOnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/PrivDebugGetStateRootOnchainGroupAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNDo1Nzo1OFrOH95mAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTozMzo0M1rOIAWqfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2ODgwMw==", "bodyText": "This is really testing that you get an error for a privacy group that does not exist (on the node where you are calling the method) You could just use a const/random privacyGroupId ...\nI think that is the same with the off chain AT ...\nThinking about it, this is really the same test as the next one (unknownGroup...)", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r534668803", "createdAt": "2020-12-03T04:57:58Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/PrivDebugGetStateRootOnchainGroupAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.PrivacyNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.account.PrivacyAccountResolver;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n+import org.hyperledger.besu.tests.web3j.privacy.OnChainPrivacyAcceptanceTestBase;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PrivDebugGetStateRootOnchainGroupAcceptanceTest\n+    extends OnChainPrivacyAcceptanceTestBase {\n+\n+  private PrivacyNode aliceNode;\n+  private PrivacyNode bobNode;\n+\n+  @Before\n+  public void setUp() throws IOException, URISyntaxException {\n+    aliceNode =\n+        privacyBesu.createOnChainPrivacyGroupEnabledMinerNode(\n+            \"alice-node\", PrivacyAccountResolver.ALICE, Address.PRIVACY, false);\n+    bobNode =\n+        privacyBesu.createOnChainPrivacyGroupEnabledMinerNode(\n+            \"bob-node\", PrivacyAccountResolver.BOB, Address.PRIVACY, false);\n+    privacyCluster.start(aliceNode, bobNode);\n+  }\n+\n+  @Test\n+  public void nodesInGroupShouldHaveSameStateRoot() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(aliceNode, bobNode);\n+\n+    final Hash aliceStateRootId =\n+        aliceNode\n+            .execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"))\n+            .getResult();\n+\n+    final Hash bobStateRootId =\n+        bobNode\n+            .execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"))\n+            .getResult();\n+\n+    assertThat(aliceStateRootId).isEqualTo(bobStateRootId);\n+  }\n+\n+  @Test\n+  public void nodesNotInGroupShouldReturnError() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028a8ac116d17a75692bd6e52101503831fce880"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI0MjIzNw==", "bodyText": "I think you're right. Will remove.", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r537242237", "createdAt": "2020-12-07T05:33:43Z", "author": {"login": "mark-terry"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/PrivDebugGetStateRootOnchainGroupAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.PrivacyNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.account.PrivacyAccountResolver;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n+import org.hyperledger.besu.tests.web3j.privacy.OnChainPrivacyAcceptanceTestBase;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PrivDebugGetStateRootOnchainGroupAcceptanceTest\n+    extends OnChainPrivacyAcceptanceTestBase {\n+\n+  private PrivacyNode aliceNode;\n+  private PrivacyNode bobNode;\n+\n+  @Before\n+  public void setUp() throws IOException, URISyntaxException {\n+    aliceNode =\n+        privacyBesu.createOnChainPrivacyGroupEnabledMinerNode(\n+            \"alice-node\", PrivacyAccountResolver.ALICE, Address.PRIVACY, false);\n+    bobNode =\n+        privacyBesu.createOnChainPrivacyGroupEnabledMinerNode(\n+            \"bob-node\", PrivacyAccountResolver.BOB, Address.PRIVACY, false);\n+    privacyCluster.start(aliceNode, bobNode);\n+  }\n+\n+  @Test\n+  public void nodesInGroupShouldHaveSameStateRoot() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(aliceNode, bobNode);\n+\n+    final Hash aliceStateRootId =\n+        aliceNode\n+            .execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"))\n+            .getResult();\n+\n+    final Hash bobStateRootId =\n+        bobNode\n+            .execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"))\n+            .getResult();\n+\n+    assertThat(aliceStateRootId).isEqualTo(bobStateRootId);\n+  }\n+\n+  @Test\n+  public void nodesNotInGroupShouldReturnError() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY2ODgwMw=="}, "originalCommit": {"oid": "028a8ac116d17a75692bd6e52101503831fce880"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDcwOTU5OnYy", "diffSide": "RIGHT", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/PrivDebugGetStateRootOnchainGroupAcceptanceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTowNDowMVrOH95tTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNTowODoxNVrOH_BDmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3MDY2OA==", "bodyText": "What does it return? I really like this test, because it makes me wonder what result we do expect for a privacyGroup that has not yet existed at that block hight ....", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r534670668", "createdAt": "2020-12-03T05:04:01Z", "author": {"login": "pinges"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/PrivDebugGetStateRootOnchainGroupAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.PrivacyNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.account.PrivacyAccountResolver;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n+import org.hyperledger.besu.tests.web3j.privacy.OnChainPrivacyAcceptanceTestBase;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PrivDebugGetStateRootOnchainGroupAcceptanceTest\n+    extends OnChainPrivacyAcceptanceTestBase {\n+\n+  private PrivacyNode aliceNode;\n+  private PrivacyNode bobNode;\n+\n+  @Before\n+  public void setUp() throws IOException, URISyntaxException {\n+    aliceNode =\n+        privacyBesu.createOnChainPrivacyGroupEnabledMinerNode(\n+            \"alice-node\", PrivacyAccountResolver.ALICE, Address.PRIVACY, false);\n+    bobNode =\n+        privacyBesu.createOnChainPrivacyGroupEnabledMinerNode(\n+            \"bob-node\", PrivacyAccountResolver.BOB, Address.PRIVACY, false);\n+    privacyCluster.start(aliceNode, bobNode);\n+  }\n+\n+  @Test\n+  public void nodesInGroupShouldHaveSameStateRoot() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(aliceNode, bobNode);\n+\n+    final Hash aliceStateRootId =\n+        aliceNode\n+            .execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"))\n+            .getResult();\n+\n+    final Hash bobStateRootId =\n+        bobNode\n+            .execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"))\n+            .getResult();\n+\n+    assertThat(aliceStateRootId).isEqualTo(bobStateRootId);\n+  }\n+\n+  @Test\n+  public void nodesNotInGroupShouldReturnError() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(aliceNode);\n+\n+    final PrivacyRequestFactory.DebugGetStateRoot aliceResult =\n+        aliceNode.execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"));\n+\n+    assertThat(aliceResult.hasError()).isFalse();\n+    assertThat(aliceResult.getResult()).isNotNull();\n+    assertThat(aliceResult.getResult()).isInstanceOf(Hash.class);\n+\n+    final PrivacyRequestFactory.DebugGetStateRoot bobResult =\n+        bobNode.execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"));\n+\n+    assertThat(bobResult.getResult()).isNull();\n+    assertThat(bobResult.hasError()).isTrue();\n+    assertThat(bobResult.getError()).isNotNull();\n+    assertThat(bobResult.getError().getMessage()).contains(\"Error finding privacy group\");\n+  }\n+\n+  @Test\n+  public void unknownGroupShouldReturnError() {\n+    final PrivacyRequestFactory.DebugGetStateRoot aliceResult =\n+        aliceNode.execute(\n+            privacyTransactions.debugGetStateRoot(\n+                Hash.wrap(Bytes32.random()).toBase64String(), \"latest\"));\n+\n+    assertThat(aliceResult.getResult()).isNull();\n+    assertThat(aliceResult.hasError()).isTrue();\n+    assertThat(aliceResult.getError()).isNotNull();\n+    assertThat(aliceResult.getError().getMessage()).contains(\"Error finding privacy group\");\n+  }\n+\n+  @Test\n+  public void blockParamShouldBeApplied() {\n+    waitForBlockHeight(aliceNode, 2);\n+    waitForBlockHeight(bobNode, 2);\n+\n+    final String privacyGroupId = createOnChainPrivacyGroup(aliceNode, bobNode);\n+\n+    waitForBlockHeight(aliceNode, 10);\n+    waitForBlockHeight(bobNode, 10);\n+\n+    final Hash aliceResult1 =\n+        aliceNode.execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"1\")).getResult();\n+    final Hash bobResultInt1 =\n+        bobNode.execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"1\")).getResult();\n+\n+    assertThat(aliceResult1).isEqualTo(bobResultInt1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028a8ac116d17a75692bd6e52101503831fce880"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgzOTY0Mg==", "bodyText": "A consistent Hash is returned until some block after the group has been created. Seems, if the requested block is before group creation, it looks back to the earliest state root.", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r535839642", "createdAt": "2020-12-04T05:08:15Z", "author": {"login": "mark-terry"}, "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/acceptance/privacy/PrivDebugGetStateRootOnchainGroupAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.tests.acceptance.privacy;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.PrivacyNode;\n+import org.hyperledger.besu.tests.acceptance.dsl.privacy.account.PrivacyAccountResolver;\n+import org.hyperledger.besu.tests.acceptance.dsl.transaction.privacy.PrivacyRequestFactory;\n+import org.hyperledger.besu.tests.web3j.privacy.OnChainPrivacyAcceptanceTestBase;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class PrivDebugGetStateRootOnchainGroupAcceptanceTest\n+    extends OnChainPrivacyAcceptanceTestBase {\n+\n+  private PrivacyNode aliceNode;\n+  private PrivacyNode bobNode;\n+\n+  @Before\n+  public void setUp() throws IOException, URISyntaxException {\n+    aliceNode =\n+        privacyBesu.createOnChainPrivacyGroupEnabledMinerNode(\n+            \"alice-node\", PrivacyAccountResolver.ALICE, Address.PRIVACY, false);\n+    bobNode =\n+        privacyBesu.createOnChainPrivacyGroupEnabledMinerNode(\n+            \"bob-node\", PrivacyAccountResolver.BOB, Address.PRIVACY, false);\n+    privacyCluster.start(aliceNode, bobNode);\n+  }\n+\n+  @Test\n+  public void nodesInGroupShouldHaveSameStateRoot() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(aliceNode, bobNode);\n+\n+    final Hash aliceStateRootId =\n+        aliceNode\n+            .execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"))\n+            .getResult();\n+\n+    final Hash bobStateRootId =\n+        bobNode\n+            .execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"))\n+            .getResult();\n+\n+    assertThat(aliceStateRootId).isEqualTo(bobStateRootId);\n+  }\n+\n+  @Test\n+  public void nodesNotInGroupShouldReturnError() {\n+    final String privacyGroupId = createOnChainPrivacyGroup(aliceNode);\n+\n+    final PrivacyRequestFactory.DebugGetStateRoot aliceResult =\n+        aliceNode.execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"));\n+\n+    assertThat(aliceResult.hasError()).isFalse();\n+    assertThat(aliceResult.getResult()).isNotNull();\n+    assertThat(aliceResult.getResult()).isInstanceOf(Hash.class);\n+\n+    final PrivacyRequestFactory.DebugGetStateRoot bobResult =\n+        bobNode.execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"latest\"));\n+\n+    assertThat(bobResult.getResult()).isNull();\n+    assertThat(bobResult.hasError()).isTrue();\n+    assertThat(bobResult.getError()).isNotNull();\n+    assertThat(bobResult.getError().getMessage()).contains(\"Error finding privacy group\");\n+  }\n+\n+  @Test\n+  public void unknownGroupShouldReturnError() {\n+    final PrivacyRequestFactory.DebugGetStateRoot aliceResult =\n+        aliceNode.execute(\n+            privacyTransactions.debugGetStateRoot(\n+                Hash.wrap(Bytes32.random()).toBase64String(), \"latest\"));\n+\n+    assertThat(aliceResult.getResult()).isNull();\n+    assertThat(aliceResult.hasError()).isTrue();\n+    assertThat(aliceResult.getError()).isNotNull();\n+    assertThat(aliceResult.getError().getMessage()).contains(\"Error finding privacy group\");\n+  }\n+\n+  @Test\n+  public void blockParamShouldBeApplied() {\n+    waitForBlockHeight(aliceNode, 2);\n+    waitForBlockHeight(bobNode, 2);\n+\n+    final String privacyGroupId = createOnChainPrivacyGroup(aliceNode, bobNode);\n+\n+    waitForBlockHeight(aliceNode, 10);\n+    waitForBlockHeight(bobNode, 10);\n+\n+    final Hash aliceResult1 =\n+        aliceNode.execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"1\")).getResult();\n+    final Hash bobResultInt1 =\n+        bobNode.execute(privacyTransactions.debugGetStateRoot(privacyGroupId, \"1\")).getResult();\n+\n+    assertThat(aliceResult1).isEqualTo(bobResultInt1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY3MDY2OA=="}, "originalCommit": {"oid": "028a8ac116d17a75692bd6e52101503831fce880"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NDgxNjk1OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDebugGetStateRoot.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNTo0Mzo0MlrOH96vFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNTowMjoxM1rOH_A8fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY4NzUxMA==", "bodyText": "Why are we doing all that findPrivacyGroup  business when we are not using the privacy group later on? Is that necessary so that we fail with the right error message?", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r534687510", "createdAt": "2020-12-03T05:43:42Z", "author": {"login": "pinges"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDebugGetStateRoot.java", "diffHunk": "@@ -68,13 +69,19 @@ protected Object resultByBlockNumber(\n         enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n     LOG.trace(\"Executing {}\", this::getName);\n \n-    final PrivacyGroup[] privacyGroups =\n-        privacyController.findPrivacyGroup(\n-            Collections.singletonList(privacyGroupId),\n-            enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n+    final Optional<PrivacyGroup> privacyGroup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028a8ac116d17a75692bd6e52101503831fce880"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTgzNzgyMA==", "bodyText": "To provide better feedback about the RPC parameters. Here we should catch: incorrect privacyGroupId, multi-tenancy validation problems, other invalid/incorrect parameter issues.\nThe error branch when the response returns will only be triggered if there's a problem retrieving the stateRoot, which, at that point, shouldn't be related to the RPC params... That return code could probably be improved.", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r535837820", "createdAt": "2020-12-04T05:02:13Z", "author": {"login": "mark-terry"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDebugGetStateRoot.java", "diffHunk": "@@ -68,13 +69,19 @@ protected Object resultByBlockNumber(\n         enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n     LOG.trace(\"Executing {}\", this::getName);\n \n-    final PrivacyGroup[] privacyGroups =\n-        privacyController.findPrivacyGroup(\n-            Collections.singletonList(privacyGroupId),\n-            enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n+    final Optional<PrivacyGroup> privacyGroup;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDY4NzUxMA=="}, "originalCommit": {"oid": "028a8ac116d17a75692bd6e52101503831fce880"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjMzMzk4OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTo1ODo0NlrOIAXKAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjozNTozN1rOIA96uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDMwNQ==", "bodyText": "should this be findOffChainPrivacyGroupByGroupId?", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r537250305", "createdAt": "2020-12-07T05:58:46Z", "author": {"login": "macfarla"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -259,13 +260,25 @@ public long determineBesuNonce(\n   }\n \n   @Override\n-  public Optional<PrivacyGroup> retrieveOffChainPrivacyGroup(\n+  public Optional<PrivacyGroup> findPrivacyGroupByGroupId(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc3cb69ac787643532966990a66247d11891336"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MzQ0MQ==", "bodyText": "This method is checking both on and off chain groups. It first checks the offchain, then tries onchain if the enclave indicates the offchain group doesn't exist (via an exception.) This is to cover the case where both offchain and flexible privacy groups are enabled.", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r537253441", "createdAt": "2020-12-07T06:08:27Z", "author": {"login": "mark-terry"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -259,13 +260,25 @@ public long determineBesuNonce(\n   }\n \n   @Override\n-  public Optional<PrivacyGroup> retrieveOffChainPrivacyGroup(\n+  public Optional<PrivacyGroup> findPrivacyGroupByGroupId(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDMwNQ=="}, "originalCommit": {"oid": "ebc3cb69ac787643532966990a66247d11891336"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NTM2OA==", "bodyText": "got it", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r537885368", "createdAt": "2020-12-07T22:35:37Z", "author": {"login": "macfarla"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -259,13 +260,25 @@ public long determineBesuNonce(\n   }\n \n   @Override\n-  public Optional<PrivacyGroup> retrieveOffChainPrivacyGroup(\n+  public Optional<PrivacyGroup> findPrivacyGroupByGroupId(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDMwNQ=="}, "originalCommit": {"oid": "ebc3cb69ac787643532966990a66247d11891336"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjMzNTg5OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivacyController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTo1OTozNVrOIAXLBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNTo1OTozNVrOIAXLBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDU2NQ==", "bodyText": "should this be findOffChainPrivacyGroupByMembers?", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r537250565", "createdAt": "2020-12-07T05:59:35Z", "author": {"login": "macfarla"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivacyController.java", "diffHunk": "@@ -47,7 +47,7 @@ PrivacyGroup createPrivacyGroup(\n \n   String deletePrivacyGroup(String privacyGroupId, String enclavePublicKey);\n \n-  PrivacyGroup[] findPrivacyGroup(List<String> addresses, String enclavePublicKey);\n+  PrivacyGroup[] findPrivacyGroupByMembers(List<String> addresses, String enclavePublicKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc3cb69ac787643532966990a66247d11891336"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjMzNzQ5OnYy", "diffSide": "RIGHT", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivacyController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowMDoxNFrOIAXL6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjozNTo1NlrOIA97XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDc5Mw==", "bodyText": "should this be findOnChainPrivacyGroupByGroupId?", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r537250793", "createdAt": "2020-12-07T06:00:14Z", "author": {"login": "macfarla"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivacyController.java", "diffHunk": "@@ -74,17 +74,21 @@ long determineEeaNonce(\n   Optional<String> buildAndSendAddPayload(\n       PrivateTransaction privateTransaction, Bytes32 privacyGroupId, String enclaveKey);\n \n-  Optional<PrivacyGroup> retrieveOffChainPrivacyGroup(String toBase64String, String enclaveKey);\n+  Optional<PrivacyGroup> findOffChainPrivacyGroupByGroupId(\n+      String toBase64String, String enclaveKey);\n \n-  List<PrivacyGroup> findOnChainPrivacyGroup(List<String> asList, String enclaveKey);\n+  Optional<PrivacyGroup> findPrivacyGroupByGroupId(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebc3cb69ac787643532966990a66247d11891336"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1NTExOQ==", "bodyText": "See reply from earlier. The findOnChainPrivacyGroupByGroupId is in the implementation, not the interface.", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r537255119", "createdAt": "2020-12-07T06:13:16Z", "author": {"login": "mark-terry"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivacyController.java", "diffHunk": "@@ -74,17 +74,21 @@ long determineEeaNonce(\n   Optional<String> buildAndSendAddPayload(\n       PrivateTransaction privateTransaction, Bytes32 privacyGroupId, String enclaveKey);\n \n-  Optional<PrivacyGroup> retrieveOffChainPrivacyGroup(String toBase64String, String enclaveKey);\n+  Optional<PrivacyGroup> findOffChainPrivacyGroupByGroupId(\n+      String toBase64String, String enclaveKey);\n \n-  List<PrivacyGroup> findOnChainPrivacyGroup(List<String> asList, String enclaveKey);\n+  Optional<PrivacyGroup> findPrivacyGroupByGroupId(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDc5Mw=="}, "originalCommit": {"oid": "ebc3cb69ac787643532966990a66247d11891336"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NTUzMw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/hyperledger/besu/pull/1607#discussion_r537885533", "createdAt": "2020-12-07T22:35:56Z", "author": {"login": "macfarla"}, "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivacyController.java", "diffHunk": "@@ -74,17 +74,21 @@ long determineEeaNonce(\n   Optional<String> buildAndSendAddPayload(\n       PrivateTransaction privateTransaction, Bytes32 privacyGroupId, String enclaveKey);\n \n-  Optional<PrivacyGroup> retrieveOffChainPrivacyGroup(String toBase64String, String enclaveKey);\n+  Optional<PrivacyGroup> findOffChainPrivacyGroupByGroupId(\n+      String toBase64String, String enclaveKey);\n \n-  List<PrivacyGroup> findOnChainPrivacyGroup(List<String> asList, String enclaveKey);\n+  Optional<PrivacyGroup> findPrivacyGroupByGroupId(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MDc5Mw=="}, "originalCommit": {"oid": "ebc3cb69ac787643532966990a66247d11891336"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1372, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}