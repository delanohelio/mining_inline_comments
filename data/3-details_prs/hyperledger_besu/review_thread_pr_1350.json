{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MjYxODg1", "number": 1350, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxNDowM1rOEeX6PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxNDowM1rOEeX6PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjg0NDc3OnYy", "diffSide": "RIGHT", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugBatchSendRawTransaction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxNDowM1rOHJ_T8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxODo1M1rOHJ_e9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNjUyOQ==", "bodyText": "So if all of the TXes fail the RPC call succeeds, but with an array of each failed TX?  That's fine, no need to throw a JSON-RPC error in that case.", "url": "https://github.com/hyperledger/besu/pull/1350#discussion_r480236529", "createdAt": "2020-08-31T16:14:03Z", "author": {"login": "shemnon"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugBatchSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.exception.InvalidJsonRpcRequestException;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.util.DomainObjectDecodeUtils;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.IntStream;\n+\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.google.common.base.Suppliers;\n+\n+public class DebugBatchSendRawTransaction implements JsonRpcMethod {\n+  private final Supplier<TransactionPool> transactionPool;\n+\n+  public DebugBatchSendRawTransaction(final TransactionPool transactionPool) {\n+    this(Suppliers.ofInstance(transactionPool));\n+  }\n+\n+  public DebugBatchSendRawTransaction(final Supplier<TransactionPool> transactionPool) {\n+    this.transactionPool = transactionPool;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.DEBUG_BATCH_RAW_TRANSACTION.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final List<ExecutionStatus> executionStatuses = new ArrayList<>();\n+    IntStream.range(0, requestContext.getRequest().getParamLength())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c6cf027f7e53e8e547aa6e21ad37e14d8afe4cc"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzOTM1MQ==", "bodyText": "Yes, the RPC call would succeed with an array of each failed TX.", "url": "https://github.com/hyperledger/besu/pull/1350#discussion_r480239351", "createdAt": "2020-08-31T16:18:53Z", "author": {"login": "abdelhamidbakhta"}, "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/methods/DebugBatchSendRawTransaction.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.exception.InvalidJsonRpcRequestException;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.util.DomainObjectDecodeUtils;\n+import org.hyperledger.besu.ethereum.eth.transactions.TransactionPool;\n+import org.hyperledger.besu.ethereum.mainnet.TransactionValidator;\n+import org.hyperledger.besu.ethereum.mainnet.ValidationResult;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.IntStream;\n+\n+import com.fasterxml.jackson.annotation.JsonGetter;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.google.common.base.Suppliers;\n+\n+public class DebugBatchSendRawTransaction implements JsonRpcMethod {\n+  private final Supplier<TransactionPool> transactionPool;\n+\n+  public DebugBatchSendRawTransaction(final TransactionPool transactionPool) {\n+    this(Suppliers.ofInstance(transactionPool));\n+  }\n+\n+  public DebugBatchSendRawTransaction(final Supplier<TransactionPool> transactionPool) {\n+    this.transactionPool = transactionPool;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.DEBUG_BATCH_RAW_TRANSACTION.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n+    final List<ExecutionStatus> executionStatuses = new ArrayList<>();\n+    IntStream.range(0, requestContext.getRequest().getParamLength())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNjUyOQ=="}, "originalCommit": {"oid": "8c6cf027f7e53e8e547aa6e21ad37e14d8afe4cc"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 769, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}