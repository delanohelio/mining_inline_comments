{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NDQ2MTky", "number": 3994, "title": "Add support for client binding API", "bodyText": "Closes #3992", "createdAt": "2020-08-31T17:57:39Z", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994", "merged": true, "mergeCommit": {"oid": "e823fecdec8e18aaade1c8fd891633d8aecaf89d"}, "closed": true, "closedAt": "2020-09-02T13:45:07Z", "author": {"login": "jameskleeh"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEWGddAH2gAyNDc2NDQ2MTkyOjczMzAzNDdjZTNmMjQ0YTJjZTMzZDNmMmU2ZDMyNjkyYWE4ODlkZDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdE4Xh5gFqTQ4MDYzMjE3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7330347ce3f244a2ce33d3f2e6d32692aa889dd4", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/7330347ce3f244a2ce33d3f2e6d32692aa889dd4", "committedDate": "2020-08-31T17:17:54Z", "message": "Add support for client binding API. Closes #3992"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/ad8290319e399a47ff8da9cde940f3e6a20315d2", "committedDate": "2020-08-31T17:37:43Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4ODc3NjAx", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#pullrequestreview-478877601", "createdAt": "2020-08-31T19:08:27Z", "commit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOTowODoyN1rOHKFG5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxOToyMTo1MFrOHKFz-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTQ5Mw==", "bodyText": "context.getParameters() should not be called repeatedly. It is an expensive operation from a performance perspective.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480331493", "createdAt": "2020-08-31T19:08:27Z", "author": {"login": "graemerocher"}, "path": "http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java", "diffHunk": "@@ -546,6 +469,33 @@ protected void doOnComplete() {\n         return context.proceed();\n     }\n \n+    private Object getValue(Argument argument, MethodInvocationContext<?, ?> context) {\n+        String argumentName = argument.getName();\n+        AnnotationMetadata argumentMetadata = argument.getAnnotationMetadata();\n+        MutableArgumentValue<?> value = context.getParameters().get(argumentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "originalPosition": 381}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzMTY4Nw==", "bodyText": "context.getParameterValueMap() should not be called repeatedly. It is an expensive operation from a performance perspective", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480331687", "createdAt": "2020-08-31T19:08:53Z", "author": {"login": "graemerocher"}, "path": "http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java", "diffHunk": "@@ -546,6 +469,33 @@ protected void doOnComplete() {\n         return context.proceed();\n     }\n \n+    private Object getValue(Argument argument, MethodInvocationContext<?, ?> context) {\n+        String argumentName = argument.getName();\n+        AnnotationMetadata argumentMetadata = argument.getAnnotationMetadata();\n+        MutableArgumentValue<?> value = context.getParameters().get(argumentName);\n+\n+        Object definedValue = value.getValue();\n+        Map<String, Object> paramMap = context.getParameterValueMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "originalPosition": 384}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzNjc4Mg==", "bodyText": "We shouldn't be introducing new behaviour that adds warnings", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480336782", "createdAt": "2020-08-31T19:15:02Z", "author": {"login": "graemerocher"}, "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.AnnotationMetadata;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.core.bind.annotation.Bindable;\n+import io.micronaut.core.convert.ConversionService;\n+import io.micronaut.core.naming.NameUtils;\n+import io.micronaut.core.reflect.ClassUtils;\n+import io.micronaut.core.reflect.ReflectionUtils;\n+import io.micronaut.core.type.Argument;\n+import io.micronaut.core.util.CollectionUtils;\n+import io.micronaut.core.util.StringUtils;\n+import io.micronaut.http.*;\n+import io.micronaut.http.annotation.Body;\n+import io.micronaut.http.annotation.CookieValue;\n+import io.micronaut.http.annotation.Header;\n+import io.micronaut.http.annotation.RequestAttribute;\n+import io.micronaut.http.cookie.Cookie;\n+import io.micronaut.http.cookie.Cookies;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.lang.annotation.Annotation;\n+import java.util.*;\n+\n+/**\n+ * Default implementation of {@link HttpClientBinderRegistry} that searches by\n+ * annotation then by type.\n+ *\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Singleton\n+@Internal\n+public class DefaultHttpClientBinderRegistry implements HttpClientBinderRegistry {\n+\n+    private final Map<Class<? extends Annotation>, ClientArgumentRequestBinder> byAnnotation = new LinkedHashMap<>();\n+    private final Map<Integer, ClientArgumentRequestBinder> byType = new LinkedHashMap<>();\n+\n+    /**\n+     * @param conversionService The conversion service\n+     * @param binders           The request argument binders\n+     */\n+    @Inject\n+    public DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,\n+                                           List<ClientArgumentRequestBinder> binders) {\n+        byType.put(Argument.of(HttpHeaders.class).typeHashCode(), (ClientArgumentRequestBinder<HttpHeaders>) (context, value, request) -> {\n+            value.forEachValue(request::header);\n+        });\n+        byType.put(Argument.of(Cookies.class).typeHashCode(), (ClientArgumentRequestBinder<Cookies>) (context, value, request) -> {\n+            request.cookies(value.getAll());\n+        });\n+        byType.put(Argument.of(Cookie.class).typeHashCode(), (ClientArgumentRequestBinder<Cookie>) (context, value, request) -> {\n+            request.cookie(value);\n+        });\n+        byType.put(Argument.of(BasicAuth.class).typeHashCode(), (ClientArgumentRequestBinder<BasicAuth>) (context, value, request) -> {\n+            request.basicAuth(value.getUsername(), value.getPassword());\n+        });\n+        byAnnotation.put(CookieValue.class, (context, value, request) -> {\n+            String cookieName = context.getAnnotationMetadata().stringValue(CookieValue.class)\n+                    .filter(StringUtils::isNotEmpty)\n+                    .orElse(context.getArgument().getName());\n+\n+            conversionService.convert(value, String.class)\n+                    .ifPresent(o -> request.cookie(Cookie.of(cookieName, o)));\n+        });\n+        byAnnotation.put(Header.class, (context, value, request) -> {\n+            AnnotationMetadata annotationMetadata = context.getAnnotationMetadata();\n+            String headerName = annotationMetadata\n+                    .stringValue(Header.class)\n+                    .filter(StringUtils::isNotEmpty)\n+                    .orElse(NameUtils.hyphenate(context.getArgument().getName()));\n+\n+            conversionService.convert(value, String.class)\n+                    .ifPresent(header -> request.getHeaders().set(headerName, header));\n+        });\n+        byAnnotation.put(RequestAttribute.class, (context, value, request) -> {\n+            AnnotationMetadata annotationMetadata = context.getAnnotationMetadata();\n+            String attributeName = annotationMetadata\n+                    .stringValue(RequestAttribute.class)\n+                    .filter(StringUtils::isNotEmpty)\n+                    .orElse(NameUtils.hyphenate(context.getArgument().getName()));\n+            request.getAttributes().put(attributeName, value);\n+        });\n+        byAnnotation.put(Body.class, (ClientArgumentRequestBinder<Object>) (context, value, request) -> {\n+            request.body(value);\n+        });\n+\n+        if (CollectionUtils.isNotEmpty(binders)) {\n+            for (ClientArgumentRequestBinder binder : binders) {\n+                addBinder(binder);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public <T> Optional<ClientArgumentRequestBinder<T>> findArgumentBinder(Argument<T> argument) {\n+        Optional<Class<? extends Annotation>> opt = argument.getAnnotationMetadata().getAnnotationTypeByStereotype(Bindable.class);\n+        if (opt.isPresent()) {\n+            Class<? extends Annotation> annotationType = opt.get();\n+            ClientArgumentRequestBinder<T> binder = byAnnotation.get(annotationType);\n+            return Optional.ofNullable(binder);\n+        } else {\n+            ClientArgumentRequestBinder<T> binder = byType.get(argument.typeHashCode());\n+            if (binder != null) {\n+                return Optional.of(binder);\n+            } else {\n+                binder = byType.get(Argument.of(argument.getType()).typeHashCode());\n+                return Optional.ofNullable(binder);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Adds a binder to the registry.\n+     *\n+     * @param binder The binder\n+     * @param <T> The type\n+     */\n+    public <T> void addBinder(ClientArgumentRequestBinder<T> binder) {\n+        if (binder instanceof AnnotatedClientArgumentRequestBinder) {\n+            AnnotatedClientArgumentRequestBinder<?, ?> annotatedRequestArgumentBinder = (AnnotatedClientArgumentRequestBinder) binder;\n+            Class<? extends Annotation> annotationType = annotatedRequestArgumentBinder.getAnnotationType();\n+            byAnnotation.put(annotationType, annotatedRequestArgumentBinder);\n+        } else if (binder instanceof TypedClientArgumentRequestBinder) {\n+            TypedClientArgumentRequestBinder<?> typedRequestArgumentBinder = (TypedClientArgumentRequestBinder) binder;\n+            byType.put(typedRequestArgumentBinder.argumentType().typeHashCode(), typedRequestArgumentBinder);\n+            List<Class<?>> superTypes = typedRequestArgumentBinder.superTypes();\n+            if (CollectionUtils.isNotEmpty(superTypes)) {\n+                for (Class<?> superType : superTypes) {\n+                    byType.put(Argument.of(superType).typeHashCode(), typedRequestArgumentBinder);\n+                }\n+            } else if (typedRequestArgumentBinder.supportsSuperTypes()) {\n+                Set<Class> allInterfaces = ReflectionUtils.getAllInterfaces(typedRequestArgumentBinder.argumentType().getType());\n+                if (ClassUtils.REFLECTION_LOGGER.isWarnEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMzODcwOA==", "bodyText": "Why use Argument.of if you are just going to call typeHashCode(). Isn't it the same as doing HttpHeaders.class.hashCode()?", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480338708", "createdAt": "2020-08-31T19:17:01Z", "author": {"login": "graemerocher"}, "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.AnnotationMetadata;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.core.bind.annotation.Bindable;\n+import io.micronaut.core.convert.ConversionService;\n+import io.micronaut.core.naming.NameUtils;\n+import io.micronaut.core.reflect.ClassUtils;\n+import io.micronaut.core.reflect.ReflectionUtils;\n+import io.micronaut.core.type.Argument;\n+import io.micronaut.core.util.CollectionUtils;\n+import io.micronaut.core.util.StringUtils;\n+import io.micronaut.http.*;\n+import io.micronaut.http.annotation.Body;\n+import io.micronaut.http.annotation.CookieValue;\n+import io.micronaut.http.annotation.Header;\n+import io.micronaut.http.annotation.RequestAttribute;\n+import io.micronaut.http.cookie.Cookie;\n+import io.micronaut.http.cookie.Cookies;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.lang.annotation.Annotation;\n+import java.util.*;\n+\n+/**\n+ * Default implementation of {@link HttpClientBinderRegistry} that searches by\n+ * annotation then by type.\n+ *\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Singleton\n+@Internal\n+public class DefaultHttpClientBinderRegistry implements HttpClientBinderRegistry {\n+\n+    private final Map<Class<? extends Annotation>, ClientArgumentRequestBinder> byAnnotation = new LinkedHashMap<>();\n+    private final Map<Integer, ClientArgumentRequestBinder> byType = new LinkedHashMap<>();\n+\n+    /**\n+     * @param conversionService The conversion service\n+     * @param binders           The request argument binders\n+     */\n+    @Inject\n+    public DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,\n+                                           List<ClientArgumentRequestBinder> binders) {\n+        byType.put(Argument.of(HttpHeaders.class).typeHashCode(), (ClientArgumentRequestBinder<HttpHeaders>) (context, value, request) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MTI0NA==", "bodyText": "Since there will be many add @Indexed(ClientArgumentRequestBinder.class)", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480341244", "createdAt": "2020-08-31T19:19:51Z", "author": {"login": "graemerocher"}, "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.Experimental;\n+import io.micronaut.core.convert.ArgumentConversionContext;\n+import io.micronaut.http.MutableHttpRequest;\n+\n+/**\n+ * A binder that binds to a {@link MutableHttpRequest}. Argument binders\n+ * are not able to modify the URI of the request.\n+ *\n+ * @param <T> A type\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Experimental\n+public interface ClientArgumentRequestBinder<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MTUxMw==", "bodyText": "Declare @NonNull on arguments that are not null", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480341513", "createdAt": "2020-08-31T19:20:08Z", "author": {"login": "graemerocher"}, "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/ClientArgumentRequestBinder.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.Experimental;\n+import io.micronaut.core.convert.ArgumentConversionContext;\n+import io.micronaut.http.MutableHttpRequest;\n+\n+/**\n+ * A binder that binds to a {@link MutableHttpRequest}. Argument binders\n+ * are not able to modify the URI of the request.\n+ *\n+ * @param <T> A type\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Experimental\n+public interface ClientArgumentRequestBinder<T> {\n+\n+    /**\n+     * Bind the given argument to the request. Argument binders\n+     * are not able to modify the URI of the request.\n+     *\n+     * @param context The {@link ArgumentConversionContext}\n+     * @param value   The argument value\n+     * @param request The request\n+     */\n+    void bind(ArgumentConversionContext<T> context, T value, MutableHttpRequest<?> request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MjEwMg==", "bodyText": "This is an internal class, make protected", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480342102", "createdAt": "2020-08-31T19:20:48Z", "author": {"login": "graemerocher"}, "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/DefaultHttpClientBinderRegistry.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.AnnotationMetadata;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.core.bind.annotation.Bindable;\n+import io.micronaut.core.convert.ConversionService;\n+import io.micronaut.core.naming.NameUtils;\n+import io.micronaut.core.reflect.ClassUtils;\n+import io.micronaut.core.reflect.ReflectionUtils;\n+import io.micronaut.core.type.Argument;\n+import io.micronaut.core.util.CollectionUtils;\n+import io.micronaut.core.util.StringUtils;\n+import io.micronaut.http.*;\n+import io.micronaut.http.annotation.Body;\n+import io.micronaut.http.annotation.CookieValue;\n+import io.micronaut.http.annotation.Header;\n+import io.micronaut.http.annotation.RequestAttribute;\n+import io.micronaut.http.cookie.Cookie;\n+import io.micronaut.http.cookie.Cookies;\n+\n+import javax.inject.Inject;\n+import javax.inject.Singleton;\n+import java.lang.annotation.Annotation;\n+import java.util.*;\n+\n+/**\n+ * Default implementation of {@link HttpClientBinderRegistry} that searches by\n+ * annotation then by type.\n+ *\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Singleton\n+@Internal\n+public class DefaultHttpClientBinderRegistry implements HttpClientBinderRegistry {\n+\n+    private final Map<Class<? extends Annotation>, ClientArgumentRequestBinder> byAnnotation = new LinkedHashMap<>();\n+    private final Map<Integer, ClientArgumentRequestBinder> byType = new LinkedHashMap<>();\n+\n+    /**\n+     * @param conversionService The conversion service\n+     * @param binders           The request argument binders\n+     */\n+    @Inject\n+    public DefaultHttpClientBinderRegistry(ConversionService<?> conversionService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MjQwOQ==", "bodyText": "Add @NotNull to argument", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480342409", "createdAt": "2020-08-31T19:21:10Z", "author": {"login": "graemerocher"}, "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/HttpClientBinderRegistry.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import io.micronaut.core.annotation.Experimental;\n+import io.micronaut.core.type.Argument;\n+\n+import java.util.Optional;\n+\n+/**\n+ * A registry of {@link ClientArgumentRequestBinder} instances.\n+ *\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Experimental\n+public interface HttpClientBinderRegistry {\n+\n+    /**\n+     * Locate an {@link ClientArgumentRequestBinder} for the given argument.\n+     *\n+     * @param argument The argument\n+     * @param <T>      The argument type\n+     * @return An {@link Optional} of {@link ClientArgumentRequestBinder}\n+     */\n+    <T> Optional<ClientArgumentRequestBinder<T>> findArgumentBinder(Argument<T> argument);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MjYyMQ==", "bodyText": "Add @NotNull to return type", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480342621", "createdAt": "2020-08-31T19:21:24Z", "author": {"login": "graemerocher"}, "path": "http-client-core/src/main/java/io/micronaut/http/client/bind/TypedClientArgumentRequestBinder.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client.bind;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.core.annotation.Experimental;\n+import io.micronaut.core.type.Argument;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * A {@link ClientArgumentRequestBinder} that is resolved based on the argument type.\n+ *\n+ * @param <T> The argument type\n+ * @author James Kleeh\n+ * @since 2.1.0\n+ */\n+@Experimental\n+public interface TypedClientArgumentRequestBinder<T> extends ClientArgumentRequestBinder<T> {\n+\n+    /**\n+     * @return The argument type.\n+     */\n+    Argument<T> argumentType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0MzAzMw==", "bodyText": "Add Locale.ENGLISH to toUpperCase()", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#discussion_r480343033", "createdAt": "2020-08-31T19:21:50Z", "author": {"login": "graemerocher"}, "path": "http-client-core/src/main/java/io/micronaut/http/client/interceptor/HttpClientIntroductionAdvice.java", "diffHunk": "@@ -149,6 +153,10 @@ public Object intercept(MethodInvocationContext<Object, Object> context) {\n             }\n \n             Class<? extends Annotation> annotationType = httpMethodMapping.get();\n+            HttpMethod httpMethod = HttpMethod.parse(annotationType.getSimpleName().toUpperCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad8290319e399a47ff8da9cde940f3e6a20315d2"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dcc493a112545321e91ce1757e92e0292044601", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/2dcc493a112545321e91ce1757e92e0292044601", "committedDate": "2020-08-31T20:56:23Z", "message": "Address PR feedback. Docs progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51114e82c98cbd0fd67d5ef782bdb322682800a9", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/51114e82c98cbd0fd67d5ef782bdb322682800a9", "committedDate": "2020-09-01T19:32:07Z", "message": "Finish docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4a44a764373c327d56be237b1b73255d3f568dc", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/b4a44a764373c327d56be237b1b73255d3f568dc", "committedDate": "2020-09-01T20:02:41Z", "message": "Fix compilation and checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "996dddead808cc5a2f7150cee3324119f6f9c07a", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/996dddead808cc5a2f7150cee3324119f6f9c07a", "committedDate": "2020-09-01T20:36:23Z", "message": "Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwNjMyMTc5", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3994#pullrequestreview-480632179", "createdAt": "2020-09-02T09:13:19Z", "commit": {"oid": "996dddead808cc5a2f7150cee3324119f6f9c07a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2756, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}