{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwODQ2NDM2", "number": 4482, "title": "re-attempt of merge of 4325", "bodyText": "Intended to close #3425 .\nLike Cindy's work on this in #3831 I am interested in input on this as I am interested in input.\nReplacing PR #4378 , which I seem to have merged some unwanted things onto.", "createdAt": "2020-11-13T20:52:20Z", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4482", "merged": true, "mergeCommit": {"oid": "45957208d7718db06a536c800f7335ad7acf4026"}, "closed": true, "closedAt": "2020-12-21T19:10:26Z", "author": {"login": "meyerinj"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcNdVHgH2gAyNTIwODQ2NDM2OmQ1NmQyMDhmODJhOTdmYThlNTUzNmE4NzYzNWIyNTkzNTg4MTBjZmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoa1KGAH2gAyNTIwODQ2NDM2OmJjNGZjNzU1MmRjNzg4NjZhZjAzY2Q0NDAzOWI3MDBiYjU5YTI0MDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d56d208f82a97fa8e5536a87635b259358810cfc", "author": {"user": {"login": "meyerinj", "name": "John Meyerin"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/d56d208f82a97fa8e5536a87635b259358810cfc", "committedDate": "2020-11-13T20:47:55Z", "message": "without extraneous changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NjM3MzAw", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4482#pullrequestreview-535637300", "createdAt": "2020-11-20T17:33:59Z", "commit": {"oid": "d56d208f82a97fa8e5536a87635b259358810cfc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzozMzo1OVrOH3Zpxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzo0MDoxMVrOH3Z-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1NDAyMw==", "bodyText": "The sentence \"In this case\" isn't necessary. The reader can assume that", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4482#discussion_r527854023", "createdAt": "2020-11-20T17:33:59Z", "author": {"login": "jameskleeh"}, "path": "src/main/docs/guide/httpServer/customArgumentBinding.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+\n+== Custom argument binding\n+\n+Micronaut uses an api:http.bind.binders.ArgumentBinderRegistry[ArgumentBinderRegistry] to look up api:core.bind.ArgumentBinder[ArgumentBinder]s\n+capable of binding to the arguments in the controller methods. The default implementation will look for an annotation on\n+the argument that is, itself, annotated with `@Bindable`. If one exists the argument binder registry will search for an\n+argument binder that supports that annotation.\n+\n+If no fitting annotation is found Micronaut will try to find an argument binder that supports the argument's type.\n+\n+An api:core.bind.ArgumentBinder[ArgumentBinder] can be registered as a bean. In this case it is only present when a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56d208f82a97fa8e5536a87635b259358810cfc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1NDgwMw==", "bodyText": "This first sentence doesn't really add value. It's not relevant what calls the logic as that isn't what is being documented", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4482#discussion_r527854803", "createdAt": "2020-11-20T17:34:53Z", "author": {"login": "jameskleeh"}, "path": "src/main/docs/guide/httpServer/customArgumentBinding.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+\n+== Custom argument binding\n+\n+Micronaut uses an api:http.bind.binders.ArgumentBinderRegistry[ArgumentBinderRegistry] to look up api:core.bind.ArgumentBinder[ArgumentBinder]s\n+capable of binding to the arguments in the controller methods. The default implementation will look for an annotation on\n+the argument that is, itself, annotated with `@Bindable`. If one exists the argument binder registry will search for an\n+argument binder that supports that annotation.\n+\n+If no fitting annotation is found Micronaut will try to find an argument binder that supports the argument's type.\n+\n+An api:core.bind.ArgumentBinder[ArgumentBinder] can be registered as a bean. In this case it is only present when a\n+api:context.BeanContext[BeanContext] is initialized.\n+\n+Binders are called by the same server logic that calls the api:io.micronaut.http.annotation.Controller[Controller]. Once", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56d208f82a97fa8e5536a87635b259358810cfc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1NjE5MA==", "bodyText": "The section about filters needs more explanation. We should say that argument binders can be called multiple times to attempt to bind an argument. That should include saying that they are called before the body is read and before any filters are executed.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4482#discussion_r527856190", "createdAt": "2020-11-20T17:36:35Z", "author": {"login": "jameskleeh"}, "path": "src/main/docs/guide/httpServer/customArgumentBinding.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+\n+== Custom argument binding\n+\n+Micronaut uses an api:http.bind.binders.ArgumentBinderRegistry[ArgumentBinderRegistry] to look up api:core.bind.ArgumentBinder[ArgumentBinder]s\n+capable of binding to the arguments in the controller methods. The default implementation will look for an annotation on\n+the argument that is, itself, annotated with `@Bindable`. If one exists the argument binder registry will search for an\n+argument binder that supports that annotation.\n+\n+If no fitting annotation is found Micronaut will try to find an argument binder that supports the argument's type.\n+\n+An api:core.bind.ArgumentBinder[ArgumentBinder] can be registered as a bean. In this case it is only present when a\n+api:context.BeanContext[BeanContext] is initialized.\n+\n+Binders are called by the same server logic that calls the api:io.micronaut.http.annotation.Controller[Controller]. Once\n+the request is received and the argument is resolved in the api:http.bind.binders.ArgumentBinderRegistry[ArgumentBinderRegistry]\n+api:io.micronaut.http.filter.HttpFilter[HttpFilter]s are called before returning results to the Controller. Your", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56d208f82a97fa8e5536a87635b259358810cfc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1NjY2MQ==", "bodyText": "It doesn't continue to find binders, it continues to execute the same binder multiple times", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4482#discussion_r527856661", "createdAt": "2020-11-20T17:37:06Z", "author": {"login": "jameskleeh"}, "path": "src/main/docs/guide/httpServer/customArgumentBinding.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+\n+== Custom argument binding\n+\n+Micronaut uses an api:http.bind.binders.ArgumentBinderRegistry[ArgumentBinderRegistry] to look up api:core.bind.ArgumentBinder[ArgumentBinder]s\n+capable of binding to the arguments in the controller methods. The default implementation will look for an annotation on\n+the argument that is, itself, annotated with `@Bindable`. If one exists the argument binder registry will search for an\n+argument binder that supports that annotation.\n+\n+If no fitting annotation is found Micronaut will try to find an argument binder that supports the argument's type.\n+\n+An api:core.bind.ArgumentBinder[ArgumentBinder] can be registered as a bean. In this case it is only present when a\n+api:context.BeanContext[BeanContext] is initialized.\n+\n+Binders are called by the same server logic that calls the api:io.micronaut.http.annotation.Controller[Controller]. Once\n+the request is received and the argument is resolved in the api:http.bind.binders.ArgumentBinderRegistry[ArgumentBinderRegistry]\n+api:io.micronaut.http.filter.HttpFilter[HttpFilter]s are called before returning results to the Controller. Your\n+api:io.micronaut.core.bind.BindingResult[BindingResult] may depend on those being initialized before returning the binding\n+result.\n+\n+A binding result of the class you are binding will be returned from the bind method in the implementation written. The\n+result will be classified as either `SATISFIED` or `UNSATISFIED`. Returning a binding of the type `EMPTY` will be considered\n+SATISFIED. If the returned binding is UNSATISFIED the registry will continue to attempt to find argument binders that match", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56d208f82a97fa8e5536a87635b259358810cfc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1ODM1MQ==", "bodyText": "In general this should be discouraged. Instead errors should be added to the conversion context through context.reject. That happens automatically for conversion errors", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4482#discussion_r527858351", "createdAt": "2020-11-20T17:39:06Z", "author": {"login": "jameskleeh"}, "path": "src/main/docs/guide/httpServer/customArgumentBinding.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+\n+== Custom argument binding\n+\n+Micronaut uses an api:http.bind.binders.ArgumentBinderRegistry[ArgumentBinderRegistry] to look up api:core.bind.ArgumentBinder[ArgumentBinder]s\n+capable of binding to the arguments in the controller methods. The default implementation will look for an annotation on\n+the argument that is, itself, annotated with `@Bindable`. If one exists the argument binder registry will search for an\n+argument binder that supports that annotation.\n+\n+If no fitting annotation is found Micronaut will try to find an argument binder that supports the argument's type.\n+\n+An api:core.bind.ArgumentBinder[ArgumentBinder] can be registered as a bean. In this case it is only present when a\n+api:context.BeanContext[BeanContext] is initialized.\n+\n+Binders are called by the same server logic that calls the api:io.micronaut.http.annotation.Controller[Controller]. Once\n+the request is received and the argument is resolved in the api:http.bind.binders.ArgumentBinderRegistry[ArgumentBinderRegistry]\n+api:io.micronaut.http.filter.HttpFilter[HttpFilter]s are called before returning results to the Controller. Your\n+api:io.micronaut.core.bind.BindingResult[BindingResult] may depend on those being initialized before returning the binding\n+result.\n+\n+A binding result of the class you are binding will be returned from the bind method in the implementation written. The\n+result will be classified as either `SATISFIED` or `UNSATISFIED`. Returning a binding of the type `EMPTY` will be considered\n+SATISFIED. If the returned binding is UNSATISFIED the registry will continue to attempt to find argument binders that match\n+the argument.\n+\n+If the binding result throws an exception that is not handled it will bubble up to the api:io.micronaut.http.annotation.Controller[Controller]\n+where it can be caught by an api:io.micronaut.http.annotation.Error[Error] handler.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56d208f82a97fa8e5536a87635b259358810cfc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg1OTMxNQ==", "bodyText": "Include a snippet of the annotation denoting that it is annotated with @Bindable", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4482#discussion_r527859315", "createdAt": "2020-11-20T17:40:11Z", "author": {"login": "jameskleeh"}, "path": "src/main/docs/guide/httpServer/customArgumentBinding.adoc", "diffHunk": "@@ -0,0 +1,59 @@\n+\n+== Custom argument binding\n+\n+Micronaut uses an api:http.bind.binders.ArgumentBinderRegistry[ArgumentBinderRegistry] to look up api:core.bind.ArgumentBinder[ArgumentBinder]s\n+capable of binding to the arguments in the controller methods. The default implementation will look for an annotation on\n+the argument that is, itself, annotated with `@Bindable`. If one exists the argument binder registry will search for an\n+argument binder that supports that annotation.\n+\n+If no fitting annotation is found Micronaut will try to find an argument binder that supports the argument's type.\n+\n+An api:core.bind.ArgumentBinder[ArgumentBinder] can be registered as a bean. In this case it is only present when a\n+api:context.BeanContext[BeanContext] is initialized.\n+\n+Binders are called by the same server logic that calls the api:io.micronaut.http.annotation.Controller[Controller]. Once\n+the request is received and the argument is resolved in the api:http.bind.binders.ArgumentBinderRegistry[ArgumentBinderRegistry]\n+api:io.micronaut.http.filter.HttpFilter[HttpFilter]s are called before returning results to the Controller. Your\n+api:io.micronaut.core.bind.BindingResult[BindingResult] may depend on those being initialized before returning the binding\n+result.\n+\n+A binding result of the class you are binding will be returned from the bind method in the implementation written. The\n+result will be classified as either `SATISFIED` or `UNSATISFIED`. Returning a binding of the type `EMPTY` will be considered\n+SATISFIED. If the returned binding is UNSATISFIED the registry will continue to attempt to find argument binders that match\n+the argument.\n+\n+If the binding result throws an exception that is not handled it will bubble up to the api:io.micronaut.http.annotation.Controller[Controller]\n+where it can be caught by an api:io.micronaut.http.annotation.Error[Error] handler.\n+\n+Key interfaces are:\n+\n+=== AnnotatedRequestArgumentBinders\n+* api:http.bind.binders.AnnotatedRequestArgumentBinder[AnnotatedRequestArgumentBinder]\n+\n+- An interface for classes that bind an api:core.type.Argument[Argument] from an api:http.HttpRequest[HttpRequest] driven\n+by an annotation.\n+\n+TIP: It is common to use api:io.micronaut.core.convert.ConversionService[ConversionService] to convert the data to the type of argument.\n+\n+=== TypedRequestArgumentBinders\n+\n+* api:http.bind.binders.TypedRequestArgumentBinder[TypedRequestArgumentBinder]\n+\n+- An interface for classes that bind an api:core.type.Argument[Argument] from an api:http.HttpRequest[HttpRequest] driven by\n+the argument's type.\n+\n+snippet::io.micronaut.docs.http.bind.binders.MyBoundBeanTypedRequestArgumentBinder[tags=\"class\", indent=0, title=\"Example of typed data binding\"]\n+<1> Override the bind method with the data type to bind, in this case MyBoundBean\n+<2> After building the bound type as desired return the api:io.micronaut.core.bind.BindingResult[BindingResult]\n+<3> Also override the argumentType method which is used by the ArgumentBinderRegistry.\n+\n+snippet::io.micronaut.docs.http.bind.binders.MyBoundBeanController[tags=\"typed\", indent=0, title=\"A controller operation with this typed binding\"]\n+<1> The parameter will be bound with no annotation.\n+\n+snippet::io.micronaut.docs.http.bind.binders.MyBoundBeanAnnotatedRequestArgumentBinder[tags=\"class\", indent=0, title=\"Example of annotated data binding\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d56d208f82a97fa8e5536a87635b259358810cfc"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "481437d71ed825b148588a8f0796287018caa148", "author": {"user": {"login": "meyerinj", "name": "John Meyerin"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/481437d71ed825b148588a8f0796287018caa148", "committedDate": "2020-11-20T22:42:14Z", "message": "added requested changes and error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e1de84f31ed822c248be5d7cf06d8c4c19c9a46", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/7e1de84f31ed822c248be5d7cf06d8c4c19c9a46", "committedDate": "2020-12-03T18:33:17Z", "message": "Reorganize and re-word part of it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55af2094b61602f3fbf05f0db6a453f79e9c5fca", "author": {"user": {"login": "ZacharyKlein", "name": "Zachary Klein"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/55af2094b61602f3fbf05f0db6a453f79e9c5fca", "committedDate": "2020-12-18T22:23:21Z", "message": "Refactored samples for custom binding via annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf1035b1b74f8c6f9eaabe874275131f8566a29c", "author": {"user": {"login": "ZacharyKlein", "name": "Zachary Klein"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/cf1035b1b74f8c6f9eaabe874275131f8566a29c", "committedDate": "2020-12-18T23:02:53Z", "message": "Refactored tests for custom binding sample"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6aed1e8e39e395f79b26ca433f96f07b67bb474", "author": {"user": {"login": "ZacharyKlein", "name": "Zachary Klein"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/c6aed1e8e39e395f79b26ca433f96f07b67bb474", "committedDate": "2020-12-19T00:35:10Z", "message": "Refactored example for type-based custom argument binding; updated tests and docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d24b0ce1d7e0e261edd7382aa685ab50b99810bc", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/d24b0ce1d7e0e261edd7382aa685ab50b99810bc", "committedDate": "2020-12-21T19:01:44Z", "message": "MyBoundBean -> ShoppingCart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc4fc7552dc78866af03cd44039b700bb59a2400", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/bc4fc7552dc78866af03cd44039b700bb59a2400", "committedDate": "2020-12-21T19:09:48Z", "message": "Minor cleanup"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2721, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}