{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzQ5MzAw", "number": 4644, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MToyN1rOE_eayg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0OTozN1rOFABg8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTk0MTIyOnYy", "diffSide": "RIGHT", "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MToyN1rOH9MtcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MToyN1rOH9MtcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzQyNA==", "bodyText": "To avoid a breaking API change please restore the no argument constructor and annotate this one with @Inject", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933424", "createdAt": "2020-12-02T06:51:27Z", "author": {"login": "graemerocher"}, "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "diffHunk": "@@ -46,14 +47,20 @@\n @Requires(classes = {ConstraintViolationException.class, ExceptionHandler.class})\n public class ConstraintExceptionHandler implements ExceptionHandler<ConstraintViolationException, HttpResponse<JsonError>> {\n \n+    private final JacksonConfiguration jacksonConfiguration;\n+\n+    public ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\n+        this.jacksonConfiguration = jacksonConfiguration;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTk0MTQ0OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MTozNFrOH9Mtkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MTozNFrOH9Mtkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzQ1OQ==", "bodyText": "To avoid a breaking API change please restore the no argument constructor and annotate this one with @Inject", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933459", "createdAt": "2020-12-02T06:51:34Z", "author": {"login": "graemerocher"}, "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "diffHunk": "@@ -35,6 +37,12 @@\n @Singleton\n public class OptionalValuesSerializer extends JsonSerializer<OptionalValues<?>> {\n \n+    private final JacksonConfiguration jacksonConfiguration;\n+\n+    public OptionalValuesSerializer(JacksonConfiguration jacksonConfiguration) {\n+        this.jacksonConfiguration = jacksonConfiguration;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTk0MjUxOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MjowMlrOH9MuPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MjowMlrOH9MuPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzYzMQ==", "bodyText": "Please assign jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList() to a final local field to avoid repeated method calls", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933631", "createdAt": "2020-12-02T06:52:02Z", "author": {"login": "graemerocher"}, "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "diffHunk": "@@ -64,4 +73,8 @@ public void serialize(OptionalValues<?> value, JsonGenerator gen, SerializerProv\n         }\n         gen.writeEndObject();\n     }\n+\n+    private boolean canSerializeElementAsObject(Class<?> type) {\n+        return type != JsonError.class || !jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTk0MzY4OnYy", "diffSide": "RIGHT", "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MjoyNlrOH9Mu4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MjoyNlrOH9Mu4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzc5NQ==", "bodyText": "Please assign jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList() to a final local field to avoid repeated method calls", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933795", "createdAt": "2020-12-02T06:52:26Z", "author": {"login": "graemerocher"}, "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "diffHunk": "@@ -46,14 +47,20 @@\n @Requires(classes = {ConstraintViolationException.class, ExceptionHandler.class})\n public class ConstraintExceptionHandler implements ExceptionHandler<ConstraintViolationException, HttpResponse<JsonError>> {\n \n+    private final JacksonConfiguration jacksonConfiguration;\n+\n+    public ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\n+        this.jacksonConfiguration = jacksonConfiguration;\n+    }\n+\n     @Override\n     public HttpResponse<JsonError> handle(HttpRequest request, ConstraintViolationException exception) {\n         Set<ConstraintViolation<?>> constraintViolations = exception.getConstraintViolations();\n         if (constraintViolations == null || constraintViolations.isEmpty()) {\n             JsonError error = new JsonError(exception.getMessage() == null ? HttpStatus.BAD_REQUEST.getReason() : exception.getMessage());\n             error.link(Link.SELF, Link.of(request.getUri()));\n             return HttpResponse.badRequest(error);\n-        } else if (constraintViolations.size() == 1) {\n+        } else if (constraintViolations.size() == 1 && !jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTk0NTUxOnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/io/micronaut/jackson/JacksonConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MzoxMlrOH9Mv6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MzoxMlrOH9Mv6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDA1Nw==", "bodyText": "I don't think we need a whole new nested config props just for this. Adding the field at the top level is fine", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533934057", "createdAt": "2020-12-02T06:53:12Z", "author": {"login": "graemerocher"}, "path": "runtime/src/main/java/io/micronaut/jackson/JacksonConfiguration.java", "diffHunk": "@@ -357,4 +379,22 @@ public void setPropertyNamingStrategy(PropertyNamingStrategy propertyNamingStrat\n         }\n         return javaTypes.toArray(new JavaType[0]);\n     }\n+\n+    @ConfigurationProperties(\"hateoas\")\n+    @Requires(\"jackson.hateoas\")\n+    public static final class Hateoas {\n+        /**\n+         * If true _embedded.errors will always be an array. When set to false, _embedded.errors will be serialized\n+         * as an object for 1 error or serialized as an array for 2 or more errors.\n+         */\n+        private boolean alwaysSerializeErrorsAsList = false;\n+\n+        public boolean isAlwaysSerializeErrorsAsList() {\n+            return alwaysSerializeErrorsAsList;\n+        }\n+\n+        public void setAlwaysSerializeErrorsAsList(boolean alwaysSerializeErrorsAsList) {\n+            this.alwaysSerializeErrorsAsList = alwaysSerializeErrorsAsList;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTY4NjY5OnYy", "diffSide": "RIGHT", "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0OToxMVrOH-EGAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0OToxMVrOH-EGAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0MDgzNA==", "bodyText": "private field injection requires reflection, please change this to a field representing the configuration and use constructor injection and then add an additional constructor to maintain compatibility. Something like:\nprivate final boolean alwaysSerializeErrorsAsList;\n\n@Inject\npublic ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\n       this. alwaysSerializeErrorsAsList = jacksonConfiguration.isAlwaysSerializeErrorsAsList();\n}\n\npublic ConstraintExceptionHandler() {\n      this.alwaysSerializeErrorsAsList = true\n}", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r534840834", "createdAt": "2020-12-03T07:49:11Z", "author": {"login": "graemerocher"}, "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "diffHunk": "@@ -46,14 +48,19 @@\n @Requires(classes = {ConstraintViolationException.class, ExceptionHandler.class})\n public class ConstraintExceptionHandler implements ExceptionHandler<ConstraintViolationException, HttpResponse<JsonError>> {\n \n+    @Inject\n+    private JacksonConfiguration jacksonConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef08864371091e4b65c2b4ffbaf357e61e1932a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NTY5MTM5OnYy", "diffSide": "RIGHT", "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0OTozN1rOH-EJNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0OTozN1rOH-EJNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0MTY1NQ==", "bodyText": "private field injection requires reflection, please change this to a field representing the configuration and use constructor injection and then add an additional constructor to maintain compatibility. Something like:\nprivate final boolean alwaysSerializeErrorsAsList;\n\n@Inject\npublic OptionalValuesSerializer(JacksonConfiguration jacksonConfiguration) {\n       this. alwaysSerializeErrorsAsList = jacksonConfiguration.isAlwaysSerializeErrorsAsList();\n}\n\npublic OptionalValuesSerializer() {\n      this.alwaysSerializeErrorsAsList = true\n}", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r534841655", "createdAt": "2020-12-03T07:49:37Z", "author": {"login": "graemerocher"}, "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "diffHunk": "@@ -35,13 +38,18 @@\n @Singleton\n public class OptionalValuesSerializer extends JsonSerializer<OptionalValues<?>> {\n \n+    @Inject\n+    private JacksonConfiguration jacksonConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef08864371091e4b65c2b4ffbaf357e61e1932a"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1218, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}