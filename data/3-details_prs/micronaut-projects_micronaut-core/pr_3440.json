{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNTg0NTA3", "number": 3440, "title": "Refactor instrumentation", "bodyText": "InvocationInstrumenter is only capturing context\nInstrumentation is setting/removing context using try-catch-resources\n@lgathy @graemerocher WDYT?", "createdAt": "2020-06-09T07:13:37Z", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3440", "merged": true, "mergeCommit": {"oid": "b3fd6cbc6624cf03ef1f1e713477cb07d3534c18"}, "closed": true, "closedAt": "2020-06-10T06:41:19Z", "author": {"login": "dstepanov"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpfmDgAH2gAyNDMxNTg0NTA3OjMxNDZjODUxOTNjOTZmYTU1YmQzZTk0ODc0MTM5OGM5ZDYyNTk2OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcprnyMgFqTQyNzUzMjcwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3146c85193c96fa55bd3e948741398c9d6259696", "author": {"user": {"login": "dstepanov", "name": "Denis Stepanov"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/3146c85193c96fa55bd3e948741398c9d6259696", "committedDate": "2020-06-09T07:05:36Z", "message": "Refactor instrumentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NTMyNzA3", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3440#pullrequestreview-427532707", "createdAt": "2020-06-09T20:46:57Z", "commit": {"oid": "3146c85193c96fa55bd3e948741398c9d6259696"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDo0Njo1OFrOGhbnfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQyMDo1Nzo0NlrOGhcKtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwODY2OQ==", "bodyText": "All anonymous Instrumentation and InvocationInstrumenter implementations could be turned to lambdas. It would make the code more compact but I am not sure if more straightforward too? Performance wise I believe it has a slight benefit.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3440#discussion_r437708669", "createdAt": "2020-06-09T20:46:58Z", "author": {"login": "lgathy"}, "path": "http-server/src/main/java/io/micronaut/http/server/context/ServerRequestContextInvocationInstrumenter.java", "diffHunk": "@@ -28,40 +30,40 @@\n class ServerRequestContextInvocationInstrumenter implements InvocationInstrumenter {\n \n     private final HttpRequest<?> invocationRequest;\n-    private HttpRequest<?> currentRequest;\n-    private boolean isSet;\n \n     /**\n      * @param invocationRequest current request\n      */\n     public ServerRequestContextInvocationInstrumenter(HttpRequest<?> invocationRequest) {\n         this.invocationRequest = invocationRequest;\n-        isSet = false;\n     }\n \n     /**\n-     * Before call.\n+     * Server context instrumentation.\n+     * @return new instance\n      */\n+    @NonNull\n     @Override\n-    public void beforeInvocation() {\n-        currentRequest = ServerRequestContext.currentRequest().orElse(null);\n+    public Instrumentation newInstrumentation() {\n+        HttpRequest<?> currentRequest = ServerRequestContext.currentRequest().orElse(null);\n+        boolean isSet;\n         if (invocationRequest != currentRequest) {\n             isSet = true;\n             ServerRequestContext.set(invocationRequest);\n-        }\n-    }\n-\n-    /**\n-     * After call.\n-     *\n-     * @param cleanup Whether to enforce cleanup\n-     */\n-    @Override\n-    public void afterInvocation(boolean cleanup) {\n-        if (isSet || cleanup) {\n-            ServerRequestContext.set(cleanup ? null : currentRequest);\n+        } else {\n             isSet = false;\n         }\n-    }\n+        return new Instrumentation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3146c85193c96fa55bd3e948741398c9d6259696"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcxNzY4NA==", "bodyText": "Just a sidenote: I still believe we would need an else branch here with MDC.clear(): if the captured contextMap is empty but the oldContextMap found here is not then we leave it unchanged, thus the instrumented code will not find MDC in a state equivalent to where the instrumenter was instantiated, because there it was empty (see: contextMap) but here it contains key-values.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3440#discussion_r437717684", "createdAt": "2020-06-09T20:57:46Z", "author": {"login": "lgathy"}, "path": "tracing/src/main/java/io/micronaut/tracing/instrument/util/MdcInstrumenter.java", "diffHunk": "@@ -47,23 +49,24 @@ public InvocationInstrumenter newInvocationInstrumenter() {\n         Map<String, String> contextMap = MDC.getCopyOfContextMap();\n         return new InvocationInstrumenter() {\n \n-            Map<String, String> oldContextMap;\n-\n+            @NonNull\n             @Override\n-            public void beforeInvocation() {\n-                oldContextMap = MDC.getCopyOfContextMap();\n+            public Instrumentation newInstrumentation() {\n+                Map<String, String> oldContextMap = MDC.getCopyOfContextMap();\n                 if (contextMap != null && !contextMap.isEmpty()) {\n                     MDC.setContextMap(contextMap);\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3146c85193c96fa55bd3e948741398c9d6259696"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2860, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}