{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzkwNzUw", "number": 4717, "title": "Locale resolver", "bodyText": "Close: #3787", "createdAt": "2020-12-15T16:42:45Z", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717", "merged": true, "mergeCommit": {"oid": "71609081093512576831125676ccf1c5fd1cfa90"}, "closed": true, "closedAt": "2020-12-18T19:02:42Z", "author": {"login": "jameskleeh"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlOjcUgH2gAyNTQwMzkwNzUwOmYyZDk4MDA0NTVlZmRjMmU5MGI5YjA0ZjZkODYzN2JjZDA2ZmViYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnchYUgH2gAyNTQwMzkwNzUwOjI1MzhiZjc2YTU5ZjllODI4MTM1NTE0YTY5NzdiMDM5NGZjOTExNTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f2d9800455efdc2e90b9b04f6d8637bcd06febac", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/f2d9800455efdc2e90b9b04f6d8637bcd06febac", "committedDate": "2020-12-11T21:09:49Z", "message": "Initial cut of locale resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/8e55e13b7a060d5359b00efed96fce1666e4bcdd", "committedDate": "2020-12-15T16:41:51Z", "message": "Checkstyle. Make interface generic. Docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjU5NTI1", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#pullrequestreview-552659525", "createdAt": "2020-12-15T16:47:55Z", "commit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo0Nzo1NVrOIGVOhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjo1NjowOVrOIGVobQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMDE1MQ==", "bodyText": "Needs javadoc and @NonNull or @Nullable on return type", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r543510151", "createdAt": "2020-12-15T16:47:55Z", "author": {"login": "graemerocher"}, "path": "core/src/main/java/io/micronaut/core/util/LocaleResolver.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.core.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.core.order.Ordered;\n+\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+/**\n+ * Responsible for determining the current locale given a context.\n+ *\n+ * @author James Kleeh\n+ * @since 2.3.0\n+ */\n+public interface LocaleResolver<T> extends Ordered {\n+\n+    /**\n+     * Resolves the locale for the given context.\n+     *\n+     * @param context The context to retrieve the locale from\n+     * @return The locale\n+     */\n+    Optional<Locale> resolve(@NonNull T context);\n+\n+    Locale resolveOrDefault(@NonNull T context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMTIzNg==", "bodyText": "Missing javadoc. Should this be public? Does it need to be an additional bean? Can it be registered programmatically in DefaultRequestBinderRegistry", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r543511236", "createdAt": "2020-12-15T16:49:23Z", "author": {"login": "graemerocher"}, "path": "http-server/src/main/java/io/micronaut/http/server/binding/LocaleArgumentBinder.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.binding;\n+\n+import io.micronaut.core.convert.ArgumentConversionContext;\n+import io.micronaut.core.type.Argument;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;\n+import io.micronaut.http.server.util.HttpLocaleResolver;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+@Singleton\n+public class LocaleArgumentBinder implements TypedRequestArgumentBinder<Locale> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMTM4NA==", "bodyText": "Missing javadoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r543511384", "createdAt": "2020-12-15T16:49:33Z", "author": {"login": "graemerocher"}, "path": "http-server/src/main/java/io/micronaut/http/server/binding/LocaleArgumentBinder.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.binding;\n+\n+import io.micronaut.core.convert.ArgumentConversionContext;\n+import io.micronaut.core.type.Argument;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.bind.binders.TypedRequestArgumentBinder;\n+import io.micronaut.http.server.util.HttpLocaleResolver;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+@Singleton\n+public class LocaleArgumentBinder implements TypedRequestArgumentBinder<Locale> {\n+\n+    private final HttpLocaleResolver localeResolver;\n+\n+    public LocaleArgumentBinder(HttpLocaleResolver localeResolver) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMzg5OQ==", "bodyText": "Should be annotated with @Indexed(HttpLocalResolver.class) since there can be multiple", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r543513899", "createdAt": "2020-12-15T16:52:28Z", "author": {"login": "graemerocher"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/HttpLocaleResolver.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import io.micronaut.core.util.LocaleResolver;\n+import io.micronaut.http.HttpRequest;\n+\n+/**\n+ * Responsible for determining the current locale from a request.\n+ *\n+ * @author James Kleeh\n+ * @since 2.3.0\n+ */\n+public interface HttpLocaleResolver extends LocaleResolver<HttpRequest<?>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNjIwMw==", "bodyText": "javadoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r543516203", "createdAt": "2020-12-15T16:55:23Z", "author": {"login": "graemerocher"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/RequestLocaleResolver.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.core.util.StringUtils;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.LocaleResolutionConfiguration.PREFIX + \".header\", notEquals = StringUtils.FALSE)\n+public class RequestLocaleResolver implements HttpLocaleResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNjI2Mg==", "bodyText": "javadoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r543516262", "createdAt": "2020-12-15T16:55:28Z", "author": {"login": "graemerocher"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/RequestLocaleResolver.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.core.util.StringUtils;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.LocaleResolutionConfiguration.PREFIX + \".header\", notEquals = StringUtils.FALSE)\n+public class RequestLocaleResolver implements HttpLocaleResolver {\n+\n+    public static final Integer ORDER = 100;\n+\n+    private final Locale defaultLocale;\n+\n+    public RequestLocaleResolver(HttpServerConfiguration serverConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNjUyMg==", "bodyText": "javadoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r543516522", "createdAt": "2020-12-15T16:55:49Z", "author": {"login": "graemerocher"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/FixedLocaleResolver.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.LocaleResolutionConfiguration.PREFIX + \".fixed\")\n+public class FixedLocaleResolver implements HttpLocaleResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNjU5OA==", "bodyText": "javadoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r543516598", "createdAt": "2020-12-15T16:55:54Z", "author": {"login": "graemerocher"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/FixedLocaleResolver.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.LocaleResolutionConfiguration.PREFIX + \".fixed\")\n+public class FixedLocaleResolver implements HttpLocaleResolver {\n+\n+    private final Locale locale;\n+\n+    public FixedLocaleResolver(HttpServerConfiguration serverConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNjY5OA==", "bodyText": "javadoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r543516698", "createdAt": "2020-12-15T16:56:02Z", "author": {"login": "graemerocher"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/CookieLocaleResolver.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.LocaleResolutionConfiguration.PREFIX + \".cookie-name\")\n+public class CookieLocaleResolver implements HttpLocaleResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxNjc4MQ==", "bodyText": "javadoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r543516781", "createdAt": "2020-12-15T16:56:09Z", "author": {"login": "graemerocher"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/CookieLocaleResolver.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.LocaleResolutionConfiguration.PREFIX + \".cookie-name\")\n+public class CookieLocaleResolver implements HttpLocaleResolver {\n+\n+    public static final Integer ORDER = RequestLocaleResolver.ORDER - 50;\n+\n+    private final String cookieName;\n+    private final Locale defaultLocale;\n+\n+    public CookieLocaleResolver(HttpServerConfiguration serverConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNzg0NjMx", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#pullrequestreview-553784631", "createdAt": "2020-12-16T15:12:34Z", "commit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNToxMjozNFrOIHKMqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwNDo1MjozOVrOIHkn6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3ODAyNg==", "bodyText": "Add @NonNull", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544378026", "createdAt": "2020-12-16T15:12:34Z", "author": {"login": "sdelamo"}, "path": "core/src/main/java/io/micronaut/core/util/LocaleResolver.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.core.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.core.order.Ordered;\n+\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+/**\n+ * Responsible for determining the current locale given a context.\n+ *\n+ * @author James Kleeh\n+ * @since 2.3.0\n+ */\n+public interface LocaleResolver<T> extends Ordered {\n+\n+    /**\n+     * Resolves the locale for the given context.\n+     *\n+     * @param context The context to retrieve the locale from\n+     * @return The locale\n+     */\n+    Optional<Locale> resolve(@NonNull T context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM3OTg1NA==", "bodyText": "I will add @NonNull to the return type.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544379854", "createdAt": "2020-12-16T15:14:48Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;\n+        private String cookieName;\n+        private boolean header = DEFAULT_HEADER_RESOLUTION;\n+        private Locale defaultLocale = Locale.getDefault();\n+\n+        /**\n+         * @return The fixed locale\n+         */\n+        public Optional<Locale> getFixed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MDE1MQ==", "bodyText": "I will annotate it with @Nullable", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544380151", "createdAt": "2020-12-16T15:15:11Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MDI2MQ==", "bodyText": "I will annotate it with @Nullable", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544380261", "createdAt": "2020-12-16T15:15:19Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MDQxMQ==", "bodyText": "I will annotate it with @Nullable", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544380411", "createdAt": "2020-12-16T15:15:29Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;\n+        private String cookieName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MTEwNQ==", "bodyText": "I would annotate the parameter with @Nullable", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544381105", "createdAt": "2020-12-16T15:16:24Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;\n+        private String cookieName;\n+        private boolean header = DEFAULT_HEADER_RESOLUTION;\n+        private Locale defaultLocale = Locale.getDefault();\n+\n+        /**\n+         * @return The fixed locale\n+         */\n+        public Optional<Locale> getFixed() {\n+            return Optional.ofNullable(fixed);\n+        }\n+\n+        /**\n+         * Set the language tag for the locale. Supports BCP 47 language\n+         * tags (e.g. \"en-US\") and ISO standard (e.g \"en_US\").\n+         *\n+         * @param fixed The fixed locale\n+         */\n+        public void setFixed(Locale fixed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MTM4OQ==", "bodyText": "I would annotate the return type with @NonNull", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544381389", "createdAt": "2020-12-16T15:16:46Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;\n+        private String cookieName;\n+        private boolean header = DEFAULT_HEADER_RESOLUTION;\n+        private Locale defaultLocale = Locale.getDefault();\n+\n+        /**\n+         * @return The fixed locale\n+         */\n+        public Optional<Locale> getFixed() {\n+            return Optional.ofNullable(fixed);\n+        }\n+\n+        /**\n+         * Set the language tag for the locale. Supports BCP 47 language\n+         * tags (e.g. \"en-US\") and ISO standard (e.g \"en_US\").\n+         *\n+         * @param fixed The fixed locale\n+         */\n+        public void setFixed(Locale fixed) {\n+            this.fixed = fixed;\n+        }\n+\n+        /**\n+         * @return The key in the session that stores the locale\n+         */\n+        public Optional<String> getSessionAttribute() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MTY1Mw==", "bodyText": "I would annotate the parameter with @Nullable", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544381653", "createdAt": "2020-12-16T15:17:03Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;\n+        private String cookieName;\n+        private boolean header = DEFAULT_HEADER_RESOLUTION;\n+        private Locale defaultLocale = Locale.getDefault();\n+\n+        /**\n+         * @return The fixed locale\n+         */\n+        public Optional<Locale> getFixed() {\n+            return Optional.ofNullable(fixed);\n+        }\n+\n+        /**\n+         * Set the language tag for the locale. Supports BCP 47 language\n+         * tags (e.g. \"en-US\") and ISO standard (e.g \"en_US\").\n+         *\n+         * @param fixed The fixed locale\n+         */\n+        public void setFixed(Locale fixed) {\n+            this.fixed = fixed;\n+        }\n+\n+        /**\n+         * @return The key in the session that stores the locale\n+         */\n+        public Optional<String> getSessionAttribute() {\n+            return Optional.ofNullable(sessionAttribute);\n+        }\n+\n+        /**\n+         * Sets the key in the session to look for the locale.\n+         *\n+         * @param sessionAttribute The session attribute key\n+         */\n+        public void setSessionAttribute(String sessionAttribute) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MTgwMA==", "bodyText": "I would annotate the return type with @NonNull", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544381800", "createdAt": "2020-12-16T15:17:13Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;\n+        private String cookieName;\n+        private boolean header = DEFAULT_HEADER_RESOLUTION;\n+        private Locale defaultLocale = Locale.getDefault();\n+\n+        /**\n+         * @return The fixed locale\n+         */\n+        public Optional<Locale> getFixed() {\n+            return Optional.ofNullable(fixed);\n+        }\n+\n+        /**\n+         * Set the language tag for the locale. Supports BCP 47 language\n+         * tags (e.g. \"en-US\") and ISO standard (e.g \"en_US\").\n+         *\n+         * @param fixed The fixed locale\n+         */\n+        public void setFixed(Locale fixed) {\n+            this.fixed = fixed;\n+        }\n+\n+        /**\n+         * @return The key in the session that stores the locale\n+         */\n+        public Optional<String> getSessionAttribute() {\n+            return Optional.ofNullable(sessionAttribute);\n+        }\n+\n+        /**\n+         * Sets the key in the session to look for the locale.\n+         *\n+         * @param sessionAttribute The session attribute key\n+         */\n+        public void setSessionAttribute(String sessionAttribute) {\n+            this.sessionAttribute = sessionAttribute;\n+        }\n+\n+        /**\n+         * @return The locale to be used if one cannot be resolved.\n+         */\n+        public Locale getDefaultLocale() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MjEyMQ==", "bodyText": "I would annotate the parameter with @NonNull", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544382121", "createdAt": "2020-12-16T15:17:34Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;\n+        private String cookieName;\n+        private boolean header = DEFAULT_HEADER_RESOLUTION;\n+        private Locale defaultLocale = Locale.getDefault();\n+\n+        /**\n+         * @return The fixed locale\n+         */\n+        public Optional<Locale> getFixed() {\n+            return Optional.ofNullable(fixed);\n+        }\n+\n+        /**\n+         * Set the language tag for the locale. Supports BCP 47 language\n+         * tags (e.g. \"en-US\") and ISO standard (e.g \"en_US\").\n+         *\n+         * @param fixed The fixed locale\n+         */\n+        public void setFixed(Locale fixed) {\n+            this.fixed = fixed;\n+        }\n+\n+        /**\n+         * @return The key in the session that stores the locale\n+         */\n+        public Optional<String> getSessionAttribute() {\n+            return Optional.ofNullable(sessionAttribute);\n+        }\n+\n+        /**\n+         * Sets the key in the session to look for the locale.\n+         *\n+         * @param sessionAttribute The session attribute key\n+         */\n+        public void setSessionAttribute(String sessionAttribute) {\n+            this.sessionAttribute = sessionAttribute;\n+        }\n+\n+        /**\n+         * @return The locale to be used if one cannot be resolved.\n+         */\n+        public Locale getDefaultLocale() {\n+            return defaultLocale;\n+        }\n+\n+        /**\n+         * Sets the locale that will be used if the locale cannot be\n+         * resolved through any means. Defaults to the system default.\n+         *\n+         * @param defaultLocale The default locale.\n+         */\n+        public void setDefaultLocale(Locale defaultLocale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MjIyMQ==", "bodyText": "I would annotate the return type with @NonNull", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544382221", "createdAt": "2020-12-16T15:17:41Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;\n+        private String cookieName;\n+        private boolean header = DEFAULT_HEADER_RESOLUTION;\n+        private Locale defaultLocale = Locale.getDefault();\n+\n+        /**\n+         * @return The fixed locale\n+         */\n+        public Optional<Locale> getFixed() {\n+            return Optional.ofNullable(fixed);\n+        }\n+\n+        /**\n+         * Set the language tag for the locale. Supports BCP 47 language\n+         * tags (e.g. \"en-US\") and ISO standard (e.g \"en_US\").\n+         *\n+         * @param fixed The fixed locale\n+         */\n+        public void setFixed(Locale fixed) {\n+            this.fixed = fixed;\n+        }\n+\n+        /**\n+         * @return The key in the session that stores the locale\n+         */\n+        public Optional<String> getSessionAttribute() {\n+            return Optional.ofNullable(sessionAttribute);\n+        }\n+\n+        /**\n+         * Sets the key in the session to look for the locale.\n+         *\n+         * @param sessionAttribute The session attribute key\n+         */\n+        public void setSessionAttribute(String sessionAttribute) {\n+            this.sessionAttribute = sessionAttribute;\n+        }\n+\n+        /**\n+         * @return The locale to be used if one cannot be resolved.\n+         */\n+        public Locale getDefaultLocale() {\n+            return defaultLocale;\n+        }\n+\n+        /**\n+         * Sets the locale that will be used if the locale cannot be\n+         * resolved through any means. Defaults to the system default.\n+         *\n+         * @param defaultLocale The default locale.\n+         */\n+        public void setDefaultLocale(Locale defaultLocale) {\n+            this.defaultLocale = defaultLocale;\n+        }\n+\n+        /**\n+         * @return The name of the cookie that contains the locale.\n+         */\n+        public Optional<String> getCookieName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MjQ1Mw==", "bodyText": "I would annotate the parameter with @Nullable", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544382453", "createdAt": "2020-12-16T15:17:59Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;\n+        private String cookieName;\n+        private boolean header = DEFAULT_HEADER_RESOLUTION;\n+        private Locale defaultLocale = Locale.getDefault();\n+\n+        /**\n+         * @return The fixed locale\n+         */\n+        public Optional<Locale> getFixed() {\n+            return Optional.ofNullable(fixed);\n+        }\n+\n+        /**\n+         * Set the language tag for the locale. Supports BCP 47 language\n+         * tags (e.g. \"en-US\") and ISO standard (e.g \"en_US\").\n+         *\n+         * @param fixed The fixed locale\n+         */\n+        public void setFixed(Locale fixed) {\n+            this.fixed = fixed;\n+        }\n+\n+        /**\n+         * @return The key in the session that stores the locale\n+         */\n+        public Optional<String> getSessionAttribute() {\n+            return Optional.ofNullable(sessionAttribute);\n+        }\n+\n+        /**\n+         * Sets the key in the session to look for the locale.\n+         *\n+         * @param sessionAttribute The session attribute key\n+         */\n+        public void setSessionAttribute(String sessionAttribute) {\n+            this.sessionAttribute = sessionAttribute;\n+        }\n+\n+        /**\n+         * @return The locale to be used if one cannot be resolved.\n+         */\n+        public Locale getDefaultLocale() {\n+            return defaultLocale;\n+        }\n+\n+        /**\n+         * Sets the locale that will be used if the locale cannot be\n+         * resolved through any means. Defaults to the system default.\n+         *\n+         * @param defaultLocale The default locale.\n+         */\n+        public void setDefaultLocale(Locale defaultLocale) {\n+            this.defaultLocale = defaultLocale;\n+        }\n+\n+        /**\n+         * @return The name of the cookie that contains the locale.\n+         */\n+        public Optional<String> getCookieName() {\n+            return Optional.ofNullable(cookieName);\n+        }\n+\n+        /**\n+         * Sets the name of the cookie that is used to store the locale.\n+         *\n+         * @param cookieName The name of the cookie used to store the locale\n+         */\n+        public void setCookieName(String cookieName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MjY1Mw==", "bodyText": "I will annotate it with @NonNull", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544382653", "createdAt": "2020-12-16T15:18:15Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -735,4 +752,103 @@ public void setPortInHost(boolean portInHost) {\n             this.portInHost = portInHost;\n         }\n     }\n+\n+    /**\n+     * Configuration for locale resolution used by {@link io.micronaut.http.server.util.HttpLocaleResolver}.\n+     */\n+    @ConfigurationProperties(\"locale-resolution\")\n+    public static class LocaleResolutionConfiguration {\n+\n+        public static final String PREFIX = HttpServerConfiguration.PREFIX + \".locale-resolution\";\n+        private static final boolean DEFAULT_HEADER_RESOLUTION = true;\n+\n+        private Locale fixed;\n+        private String sessionAttribute;\n+        private String cookieName;\n+        private boolean header = DEFAULT_HEADER_RESOLUTION;\n+        private Locale defaultLocale = Locale.getDefault();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MzAzOQ==", "bodyText": "I would annotate the parameter with @Nullable", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544383039", "createdAt": "2020-12-16T15:18:41Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/HttpServerConfiguration.java", "diffHunk": "@@ -433,6 +443,13 @@ public void setHostResolution(HostResolutionConfiguration hostResolution) {\n         this.hostResolution = hostResolution;\n     }\n \n+    /**\n+     * @param localeResolution The locale resolution configuration\n+     */\n+    public void setLocaleResolution(LocaleResolutionConfiguration localeResolution) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4MzgxOQ==", "bodyText": "Missing Java doc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544383819", "createdAt": "2020-12-16T15:19:38Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/CompositeHttpLocaleResolver.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Primary;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+@Singleton\n+@Primary\n+public class CompositeHttpLocaleResolver implements HttpLocaleResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM4Mzk1MQ==", "bodyText": "Missing javadoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544383951", "createdAt": "2020-12-16T15:19:46Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/CompositeHttpLocaleResolver.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Primary;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+@Singleton\n+@Primary\n+public class CompositeHttpLocaleResolver implements HttpLocaleResolver {\n+\n+    private final HttpLocaleResolver[] localeResolvers;\n+    private final Locale defaultLocale;\n+\n+    public CompositeHttpLocaleResolver(HttpLocaleResolver[] localeResolvers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxMDQ1Ng==", "bodyText": "I think we have to order the localeResolvers with OrderUtil.sort(localeResolvers); before assigning them.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544810456", "createdAt": "2020-12-17T04:51:04Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/CompositeHttpLocaleResolver.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Primary;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+@Singleton\n+@Primary\n+public class CompositeHttpLocaleResolver implements HttpLocaleResolver {\n+\n+    private final HttpLocaleResolver[] localeResolvers;\n+    private final Locale defaultLocale;\n+\n+    public CompositeHttpLocaleResolver(HttpLocaleResolver[] localeResolvers,\n+                                       HttpServerConfiguration serverConfiguration) {\n+        this.localeResolvers = localeResolvers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxMDY0Nw==", "bodyText": "This method is repeated in every resolver. We could create a parent abstract class.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544810647", "createdAt": "2020-12-17T04:51:39Z", "author": {"login": "sdelamo"}, "path": "http-server/src/main/java/io/micronaut/http/server/util/CompositeHttpLocaleResolver.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.server.util;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Primary;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+@Singleton\n+@Primary\n+public class CompositeHttpLocaleResolver implements HttpLocaleResolver {\n+\n+    private final HttpLocaleResolver[] localeResolvers;\n+    private final Locale defaultLocale;\n+\n+    public CompositeHttpLocaleResolver(HttpLocaleResolver[] localeResolvers,\n+                                       HttpServerConfiguration serverConfiguration) {\n+        this.localeResolvers = localeResolvers;\n+        this.defaultLocale = Optional.ofNullable(serverConfiguration.getLocaleResolution())\n+                .map(HttpServerConfiguration.LocaleResolutionConfiguration::getDefaultLocale)\n+                .orElse(Locale.getDefault());\n+    }\n+\n+    @Override\n+    public Optional<Locale> resolve(@NonNull HttpRequest<?> request) {\n+        return Arrays.stream(localeResolvers)\n+                .map(resolver -> resolver.resolve(request))\n+                .filter(Optional::isPresent)\n+                .findFirst()\n+                .orElse(Optional.empty());\n+    }\n+\n+    @Override\n+    public Locale resolveOrDefault(@NonNull HttpRequest<?> request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxMDkxMQ==", "bodyText": "Missing Java doc.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544810911", "createdAt": "2020-12-17T04:52:22Z", "author": {"login": "sdelamo"}, "path": "session/src/main/java/io/micronaut/session/http/SessionLocaleResolver.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.session.http;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+import io.micronaut.http.server.util.HttpLocaleResolver;\n+import io.micronaut.http.server.util.RequestLocaleResolver;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.LocaleResolutionConfiguration.PREFIX + \".session-attribute\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxMDkzNA==", "bodyText": "Missing JavaDoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544810934", "createdAt": "2020-12-17T04:52:30Z", "author": {"login": "sdelamo"}, "path": "session/src/main/java/io/micronaut/session/http/SessionLocaleResolver.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.session.http;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+import io.micronaut.http.server.util.HttpLocaleResolver;\n+import io.micronaut.http.server.util.RequestLocaleResolver;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.LocaleResolutionConfiguration.PREFIX + \".session-attribute\")\n+public class SessionLocaleResolver implements HttpLocaleResolver {\n+\n+    public static final Integer ORDER = RequestLocaleResolver.ORDER - 50;\n+\n+    private final String sessionAttribute;\n+    private final Locale defaultLocale;\n+\n+    public SessionLocaleResolver(HttpServerConfiguration serverConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDgxMDk4NQ==", "bodyText": "Missing a test", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r544810985", "createdAt": "2020-12-17T04:52:39Z", "author": {"login": "sdelamo"}, "path": "session/src/main/java/io/micronaut/session/http/SessionLocaleResolver.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.session.http;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+import io.micronaut.http.server.util.HttpLocaleResolver;\n+import io.micronaut.http.server.util.RequestLocaleResolver;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.LocaleResolutionConfiguration.PREFIX + \".session-attribute\")\n+public class SessionLocaleResolver implements HttpLocaleResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e55e13b7a060d5359b00efed96fce1666e4bcdd"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fde87571f5ce5e45d15df9872d412a3aec92647", "author": {"user": {"login": "sdelamo", "name": "Sergio del Amo"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/2fde87571f5ce5e45d15df9872d412a3aec92647", "committedDate": "2020-12-17T05:24:07Z", "message": "Merge branch '2.3.x' into locale_resolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b35f4436a2872a59cba338ee83f9297cddbbd39d", "author": {"user": {"login": "sdelamo", "name": "Sergio del Amo"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/b35f4436a2872a59cba338ee83f9297cddbbd39d", "committedDate": "2020-12-17T17:15:36Z", "message": "refactor: changes to locale resolver (#4727)\n\n* refactor: changes to locale resolver\r\n\r\n* :%s/DefaultLocaleResolver/AbstractLocaleResolver\r\n\r\n* add a padding to fixed locale resolver\r\n\r\n* don't sort locale resolvers they are already sorted\r\n\r\n* remove @Indexed\r\n\r\n* don't override getOrder in Composite\r\n\r\n* make test more robust for ordering\r\n\r\n* don't extend FixedLocaleResolver from AbstractLocaleResolver\r\n\r\n* Split default and fix configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d38c5ac08a36631a9a09b811293affd377a461d", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/6d38c5ac08a36631a9a09b811293affd377a461d", "committedDate": "2020-12-17T21:44:35Z", "message": "Rename package. Remove unnecessary interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9984cb59486237f6dc08c047c6a9788ba0435d01", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/9984cb59486237f6dc08c047c6a9788ba0435d01", "committedDate": "2020-12-18T17:49:56Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NzE1ODc2", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#pullrequestreview-555715876", "createdAt": "2020-12-18T18:25:43Z", "commit": {"oid": "9984cb59486237f6dc08c047c6a9788ba0435d01"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoyNTo0M1rOIIt4ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoyNTo1NlrOIIt4ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxMTIzNw==", "bodyText": "Missing javadoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r546011237", "createdAt": "2020-12-18T18:25:43Z", "author": {"login": "sdelamo"}, "path": "session/src/main/java/io/micronaut/session/http/SessionLocaleResolver.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.session.http;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+import io.micronaut.http.server.util.locale.HttpAbstractLocaleResolver;\n+import io.micronaut.http.server.util.locale.HttpLocaleResolutionConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.HttpLocaleResolutionConfigurationProperties.PREFIX + \".session-attribute\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9984cb59486237f6dc08c047c6a9788ba0435d01"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAxMTMyMg==", "bodyText": "missing javadoc", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4717#discussion_r546011322", "createdAt": "2020-12-18T18:25:56Z", "author": {"login": "sdelamo"}, "path": "session/src/main/java/io/micronaut/session/http/SessionLocaleResolver.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.session.http;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.context.annotation.Requires;\n+import io.micronaut.http.HttpRequest;\n+import io.micronaut.http.server.HttpServerConfiguration;\n+import io.micronaut.http.server.util.locale.HttpAbstractLocaleResolver;\n+import io.micronaut.http.server.util.locale.HttpLocaleResolutionConfiguration;\n+\n+import javax.inject.Singleton;\n+import java.util.Locale;\n+import java.util.Optional;\n+\n+@Singleton\n+@Requires(property = HttpServerConfiguration.HttpLocaleResolutionConfigurationProperties.PREFIX + \".session-attribute\")\n+@Requires(classes = SessionForRequest.class)\n+public class SessionLocaleResolver extends HttpAbstractLocaleResolver {\n+\n+    private final String sessionAttribute;\n+\n+    public SessionLocaleResolver(HttpLocaleResolutionConfiguration httpLocaleResolutionConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9984cb59486237f6dc08c047c6a9788ba0435d01"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc6a661fb740b483dc0b72f7dcd26d4c42d31d7e", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/bc6a661fb740b483dc0b72f7dcd26d4c42d31d7e", "committedDate": "2020-12-18T18:28:42Z", "message": "Add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2538bf76a59f9e828135514a6977b0394fc91157", "author": {"user": {"login": "jameskleeh", "name": "James Kleeh"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/2538bf76a59f9e828135514a6977b0394fc91157", "committedDate": "2020-12-18T18:34:05Z", "message": "Add more javadoc"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2710, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}