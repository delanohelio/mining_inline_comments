{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzQ5MzAw", "number": 4644, "title": "Standard behavior for ConstraintViolationException", "bodyText": "To avoid breaking changes, this PR creates a new property:\n\njackson.always-serialize-errors-as-list\n\nBy default it will be false, resulting in no changes on how ConstraintExceptionHandler and OptionalValuesSerializer serializes _embedded.errors.\nOn the other hand, if set to true, there will be a standard behavior for the _embedded.errors serialization.\nSo, when ConstraintExceptionHandler is thrown, all violation messages will be serialized in the _embedded.errors array, like this:\n{\n  \"message\": \"Bad Request\",\n  \"_links\": {\n    \"self\": {\n      \"href\": \"/users\",\n      \"templated\": false\n    }\n  },\n  \"_embedded\": {\n    \"errors\": [\n      {\n        \"message\": \"userCreateRequest.name: must not be blank\"\n      }\n    ]\n  }\n}\n{\n  \"message\": \"Bad Request\",\n  \"_links\": {\n    \"self\": {\n      \"href\": \"/users\",\n      \"templated\": false\n    }\n  },\n  \"_embedded\": {\n    \"errors\": [\n      {\n        \"message\": \"userCreateRequest.name: must not be blank\"\n      },\n      {\n        \"message\": \"userCreateRequest.email: must not be blank\"\n      }\n    ]\n  }\n}\nFor more details take a loot at #4616.\n\nFixes #4616", "createdAt": "2020-12-01T14:36:35Z", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644", "merged": true, "mergeCommit": {"oid": "8ed31d52497f6ef557dbd30209d219cef79e2957"}, "closed": true, "closedAt": "2020-12-03T16:33:38Z", "author": {"login": "rafaelrenanpacheco"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh6luRAH2gAyNTMwMzQ5MzAwOjkxZWM4N2UyYTIyN2QzZDcxZWYwMjkxZWU0ODA5ZWRiMmUyNjZkNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdilbd8gH2gAyNTMwMzQ5MzAwOjJmYTQ1MjYzMjMzZjY5NWMxYjA2Nzk1NWZlZjE2MGI5OWU1NjFlOTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "91ec87e2a227d3d71ef0291ee4809edb2e266d69", "author": {"user": {"login": "rafaelrenanpacheco", "name": "Rafael Renan Pacheco"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/91ec87e2a227d3d71ef0291ee4809edb2e266d69", "committedDate": "2020-12-01T14:12:26Z", "message": "Standard behavior for ConstraintViolationException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0cc6d3451423b3dd92426cacd0e8a81b6db90a1", "author": {"user": {"login": "rafaelrenanpacheco", "name": "Rafael Renan Pacheco"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/e0cc6d3451423b3dd92426cacd0e8a81b6db90a1", "committedDate": "2020-12-02T00:25:16Z", "message": "configuration for embedded errors serialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a48cd6102e92f1ac4b70f82d63c90455ff062c4", "author": {"user": {"login": "rafaelrenanpacheco", "name": "Rafael Renan Pacheco"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/5a48cd6102e92f1ac4b70f82d63c90455ff062c4", "committedDate": "2020-12-02T00:59:39Z", "message": "use configuration to handle embedded errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c687201e5a637160e9c533130fcb5c3dc99bbb9", "author": {"user": {"login": "rafaelrenanpacheco", "name": "Rafael Renan Pacheco"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/4c687201e5a637160e9c533130fcb5c3dc99bbb9", "committedDate": "2020-12-02T01:02:19Z", "message": "remove commented code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c519d4fe6b720df577fed73fd91127ff8266ccf1", "author": {"user": {"login": "rafaelrenanpacheco", "name": "Rafael Renan Pacheco"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/c519d4fe6b720df577fed73fd91127ff8266ccf1", "committedDate": "2020-12-02T01:40:45Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558", "author": {"user": {"login": "rafaelrenanpacheco", "name": "Rafael Renan Pacheco"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/e2b1614980be6702bf4aa295edffa3dd59154558", "committedDate": "2020-12-02T02:19:31Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNTQwNjE3", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#pullrequestreview-542540617", "createdAt": "2020-12-02T06:51:26Z", "commit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MToyN1rOH9MtcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwNjo1MzoxMlrOH9Mv6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzQyNA==", "bodyText": "To avoid a breaking API change please restore the no argument constructor and annotate this one with @Inject", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933424", "createdAt": "2020-12-02T06:51:27Z", "author": {"login": "graemerocher"}, "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "diffHunk": "@@ -46,14 +47,20 @@\n @Requires(classes = {ConstraintViolationException.class, ExceptionHandler.class})\n public class ConstraintExceptionHandler implements ExceptionHandler<ConstraintViolationException, HttpResponse<JsonError>> {\n \n+    private final JacksonConfiguration jacksonConfiguration;\n+\n+    public ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\n+        this.jacksonConfiguration = jacksonConfiguration;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzQ1OQ==", "bodyText": "To avoid a breaking API change please restore the no argument constructor and annotate this one with @Inject", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933459", "createdAt": "2020-12-02T06:51:34Z", "author": {"login": "graemerocher"}, "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "diffHunk": "@@ -35,6 +37,12 @@\n @Singleton\n public class OptionalValuesSerializer extends JsonSerializer<OptionalValues<?>> {\n \n+    private final JacksonConfiguration jacksonConfiguration;\n+\n+    public OptionalValuesSerializer(JacksonConfiguration jacksonConfiguration) {\n+        this.jacksonConfiguration = jacksonConfiguration;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzYzMQ==", "bodyText": "Please assign jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList() to a final local field to avoid repeated method calls", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933631", "createdAt": "2020-12-02T06:52:02Z", "author": {"login": "graemerocher"}, "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "diffHunk": "@@ -64,4 +73,8 @@ public void serialize(OptionalValues<?> value, JsonGenerator gen, SerializerProv\n         }\n         gen.writeEndObject();\n     }\n+\n+    private boolean canSerializeElementAsObject(Class<?> type) {\n+        return type != JsonError.class || !jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzMzc5NQ==", "bodyText": "Please assign jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList() to a final local field to avoid repeated method calls", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533933795", "createdAt": "2020-12-02T06:52:26Z", "author": {"login": "graemerocher"}, "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "diffHunk": "@@ -46,14 +47,20 @@\n @Requires(classes = {ConstraintViolationException.class, ExceptionHandler.class})\n public class ConstraintExceptionHandler implements ExceptionHandler<ConstraintViolationException, HttpResponse<JsonError>> {\n \n+    private final JacksonConfiguration jacksonConfiguration;\n+\n+    public ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\n+        this.jacksonConfiguration = jacksonConfiguration;\n+    }\n+\n     @Override\n     public HttpResponse<JsonError> handle(HttpRequest request, ConstraintViolationException exception) {\n         Set<ConstraintViolation<?>> constraintViolations = exception.getConstraintViolations();\n         if (constraintViolations == null || constraintViolations.isEmpty()) {\n             JsonError error = new JsonError(exception.getMessage() == null ? HttpStatus.BAD_REQUEST.getReason() : exception.getMessage());\n             error.link(Link.SELF, Link.of(request.getUri()));\n             return HttpResponse.badRequest(error);\n-        } else if (constraintViolations.size() == 1) {\n+        } else if (constraintViolations.size() == 1 && !jacksonConfiguration.getHateoas().isAlwaysSerializeErrorsAsList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzkzNDA1Nw==", "bodyText": "I don't think we need a whole new nested config props just for this. Adding the field at the top level is fine", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r533934057", "createdAt": "2020-12-02T06:53:12Z", "author": {"login": "graemerocher"}, "path": "runtime/src/main/java/io/micronaut/jackson/JacksonConfiguration.java", "diffHunk": "@@ -357,4 +379,22 @@ public void setPropertyNamingStrategy(PropertyNamingStrategy propertyNamingStrat\n         }\n         return javaTypes.toArray(new JavaType[0]);\n     }\n+\n+    @ConfigurationProperties(\"hateoas\")\n+    @Requires(\"jackson.hateoas\")\n+    public static final class Hateoas {\n+        /**\n+         * If true _embedded.errors will always be an array. When set to false, _embedded.errors will be serialized\n+         * as an object for 1 error or serialized as an array for 2 or more errors.\n+         */\n+        private boolean alwaysSerializeErrorsAsList = false;\n+\n+        public boolean isAlwaysSerializeErrorsAsList() {\n+            return alwaysSerializeErrorsAsList;\n+        }\n+\n+        public void setAlwaysSerializeErrorsAsList(boolean alwaysSerializeErrorsAsList) {\n+            this.alwaysSerializeErrorsAsList = alwaysSerializeErrorsAsList;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2b1614980be6702bf4aa295edffa3dd59154558"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0153c6d08c1ff02571cf39cd2bc37e8a238f8f6", "author": {"user": {"login": "rafaelrenanpacheco", "name": "Rafael Renan Pacheco"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/d0153c6d08c1ff02571cf39cd2bc37e8a238f8f6", "committedDate": "2020-12-03T00:26:37Z", "message": "simplify property name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ef08864371091e4b65c2b4ffbaf357e61e1932a", "author": {"user": {"login": "rafaelrenanpacheco", "name": "Rafael Renan Pacheco"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/1ef08864371091e4b65c2b4ffbaf357e61e1932a", "committedDate": "2020-12-03T00:30:31Z", "message": "optimize imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNjgxMjY5", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#pullrequestreview-543681269", "createdAt": "2020-12-03T07:49:11Z", "commit": {"oid": "1ef08864371091e4b65c2b4ffbaf357e61e1932a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0OToxMVrOH-EGAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwNzo0OTozN1rOH-EJNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0MDgzNA==", "bodyText": "private field injection requires reflection, please change this to a field representing the configuration and use constructor injection and then add an additional constructor to maintain compatibility. Something like:\nprivate final boolean alwaysSerializeErrorsAsList;\n\n@Inject\npublic ConstraintExceptionHandler(JacksonConfiguration jacksonConfiguration) {\n       this. alwaysSerializeErrorsAsList = jacksonConfiguration.isAlwaysSerializeErrorsAsList();\n}\n\npublic ConstraintExceptionHandler() {\n      this.alwaysSerializeErrorsAsList = true\n}", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r534840834", "createdAt": "2020-12-03T07:49:11Z", "author": {"login": "graemerocher"}, "path": "validation/src/main/java/io/micronaut/validation/exceptions/ConstraintExceptionHandler.java", "diffHunk": "@@ -46,14 +48,19 @@\n @Requires(classes = {ConstraintViolationException.class, ExceptionHandler.class})\n public class ConstraintExceptionHandler implements ExceptionHandler<ConstraintViolationException, HttpResponse<JsonError>> {\n \n+    @Inject\n+    private JacksonConfiguration jacksonConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef08864371091e4b65c2b4ffbaf357e61e1932a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0MTY1NQ==", "bodyText": "private field injection requires reflection, please change this to a field representing the configuration and use constructor injection and then add an additional constructor to maintain compatibility. Something like:\nprivate final boolean alwaysSerializeErrorsAsList;\n\n@Inject\npublic OptionalValuesSerializer(JacksonConfiguration jacksonConfiguration) {\n       this. alwaysSerializeErrorsAsList = jacksonConfiguration.isAlwaysSerializeErrorsAsList();\n}\n\npublic OptionalValuesSerializer() {\n      this.alwaysSerializeErrorsAsList = true\n}", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4644#discussion_r534841655", "createdAt": "2020-12-03T07:49:37Z", "author": {"login": "graemerocher"}, "path": "runtime/src/main/java/io/micronaut/jackson/serialize/OptionalValuesSerializer.java", "diffHunk": "@@ -35,13 +38,18 @@\n @Singleton\n public class OptionalValuesSerializer extends JsonSerializer<OptionalValues<?>> {\n \n+    @Inject\n+    private JacksonConfiguration jacksonConfiguration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ef08864371091e4b65c2b4ffbaf357e61e1932a"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fa45263233f695c1b067955fef160b99e561e96", "author": {"user": {"login": "rafaelrenanpacheco", "name": "Rafael Renan Pacheco"}}, "url": "https://github.com/micronaut-projects/micronaut-core/commit/2fa45263233f695c1b067955fef160b99e561e96", "committedDate": "2020-12-03T16:07:09Z", "message": "adds no args constructor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2700, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}