{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4Mzg0MjM2", "number": 4012, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxNjo1NFrOEf1kqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0NDo0OVrOEh4kFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODE5MDQ4OnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxNjo1NFrOHMXY4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDoyODoyN1rOHMgW3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODE2Mw==", "bodyText": "I don't like this line but I expect that Array.asList will be somehow optimised by JIT", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482728163", "createdAt": "2020-09-03T06:16:54Z", "author": {"login": "pgressa"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "diffHunk": "@@ -79,8 +90,39 @@ public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n     @Read\n     public Single<HealthResult> getHealth(@Nullable Principal principal) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n+        // due to backward comaptibility all HealthIndicators that are not qualified with Readiness\n+        // e.g. are Liveness or without qualifier are returned by this resource\n         return Single.fromPublisher(\n-                healthAggregator.aggregate(healthIndicators, detail)\n+                healthAggregator.aggregate(\n+                        Arrays.stream(healthIndicators).\n+                                filter(healthIndicator ->\n+                                        !Arrays.asList(readinessHealthIndicators).contains(healthIndicator))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNjE3Ng==", "bodyText": "You should probably at least assign the list to a local variable outside the scope. I would also move the filter to the constructor of the class as there is no need to do this calculation for each request", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482806176", "createdAt": "2020-09-03T08:36:40Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "diffHunk": "@@ -79,8 +90,39 @@ public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n     @Read\n     public Single<HealthResult> getHealth(@Nullable Principal principal) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n+        // due to backward comaptibility all HealthIndicators that are not qualified with Readiness\n+        // e.g. are Liveness or without qualifier are returned by this resource\n         return Single.fromPublisher(\n-                healthAggregator.aggregate(healthIndicators, detail)\n+                healthAggregator.aggregate(\n+                        Arrays.stream(healthIndicators).\n+                                filter(healthIndicator ->\n+                                        !Arrays.asList(readinessHealthIndicators).contains(healthIndicator))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODE2Mw=="}, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NTEwMQ==", "bodyText": "yeah, that's right", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482875101", "createdAt": "2020-09-03T10:28:27Z", "author": {"login": "pgressa"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "diffHunk": "@@ -79,8 +90,39 @@ public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n     @Read\n     public Single<HealthResult> getHealth(@Nullable Principal principal) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n+        // due to backward comaptibility all HealthIndicators that are not qualified with Readiness\n+        // e.g. are Liveness or without qualifier are returned by this resource\n         return Single.fromPublisher(\n-                healthAggregator.aggregate(healthIndicators, detail)\n+                healthAggregator.aggregate(\n+                        Arrays.stream(healthIndicators).\n+                                filter(healthIndicator ->\n+                                        !Arrays.asList(readinessHealthIndicators).contains(healthIndicator))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODE2Mw=="}, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODE5MTMwOnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxNzoxOFrOHMXZXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0Nzo1NFrOHMYOEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODI4Ng==", "bodyText": "Not sure whether using enum in selector isn't too much defensive", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482728286", "createdAt": "2020-09-03T06:17:18Z", "author": {"login": "pgressa"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "diffHunk": "@@ -79,8 +90,39 @@ public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n     @Read\n     public Single<HealthResult> getHealth(@Nullable Principal principal) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n+        // due to backward comaptibility all HealthIndicators that are not qualified with Readiness\n+        // e.g. are Liveness or without qualifier are returned by this resource\n         return Single.fromPublisher(\n-                healthAggregator.aggregate(healthIndicators, detail)\n+                healthAggregator.aggregate(\n+                        Arrays.stream(healthIndicators).\n+                                filter(healthIndicator ->\n+                                        !Arrays.asList(readinessHealthIndicators).contains(healthIndicator))\n+                                .toArray(HealthIndicator[]::new),\n+                        detail)\n+        );\n+    }\n+\n+    /**\n+     * @param principal Authenticated user\n+     * @param selector HealthEndpointSelector\n+     * @return The health information as a {@link Single}\n+     */\n+    @Read\n+    public Single<HealthResult> getHealth(@Nullable Principal principal, @Selector HealthEndpointSelector selector) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTc3Ng==", "bodyText": "I think an enum is fine.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482741776", "createdAt": "2020-09-03T06:47:54Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "diffHunk": "@@ -79,8 +90,39 @@ public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n     @Read\n     public Single<HealthResult> getHealth(@Nullable Principal principal) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n+        // due to backward comaptibility all HealthIndicators that are not qualified with Readiness\n+        // e.g. are Liveness or without qualifier are returned by this resource\n         return Single.fromPublisher(\n-                healthAggregator.aggregate(healthIndicators, detail)\n+                healthAggregator.aggregate(\n+                        Arrays.stream(healthIndicators).\n+                                filter(healthIndicator ->\n+                                        !Arrays.asList(readinessHealthIndicators).contains(healthIndicator))\n+                                .toArray(HealthIndicator[]::new),\n+                        detail)\n+        );\n+    }\n+\n+    /**\n+     * @param principal Authenticated user\n+     * @param selector HealthEndpointSelector\n+     * @return The health information as a {@link Single}\n+     */\n+    @Read\n+    public Single<HealthResult> getHealth(@Nullable Principal principal, @Selector HealthEndpointSelector selector) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODI4Ng=="}, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODE5MjQyOnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjoxNzo0N1rOHMXaDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0OTo0OVrOHMYRLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODQ2Mw==", "bodyText": "Liveness or LivenessHealthIndicator?", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482728463", "createdAt": "2020-09-03T06:17:47Z", "author": {"login": "pgressa"}, "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa\n+ * @since 2.1\n+ */\n+@Qualifier\n+@Documented\n+@Retention(RUNTIME)\n+public @interface Liveness{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjU3Mg==", "bodyText": "Liveness works", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742572", "createdAt": "2020-09-03T06:49:49Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa\n+ * @since 2.1\n+ */\n+@Qualifier\n+@Documented\n+@Retention(RUNTIME)\n+public @interface Liveness{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODQ2Mw=="}, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI4NDIwOnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpointSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0OToxNFrOHMYQLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo0OTowN1rOHMi74w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjMxNw==", "bodyText": "I would move this to the package io.micronaut.management.health.indicator and rename to HealthCheckType", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742317", "createdAt": "2020-09-03T06:49:14Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpointSelector.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.micronaut.management.endpoint.health;\n+\n+/**\n+ * Options for {@link io.micronaut.management.endpoint.health.HealthEndpoint} selector that aggregates\n+ * {@link io.micronaut.management.health.indicator.HealthIndicator} according to {@link io.micronaut.management.health.indicator.Liveness}\n+ * respectively {@link io.micronaut.management.health.indicator.Readiness} qualifiers.\n+ *\n+ * @author Pavol Gressa\n+ * @since 2.1\n+ */\n+public enum HealthEndpointSelector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxNzM0Nw==", "bodyText": "OK", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482917347", "createdAt": "2020-09-03T11:49:07Z", "author": {"login": "pgressa"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpointSelector.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.micronaut.management.endpoint.health;\n+\n+/**\n+ * Options for {@link io.micronaut.management.endpoint.health.HealthEndpoint} selector that aggregates\n+ * {@link io.micronaut.management.health.indicator.HealthIndicator} according to {@link io.micronaut.management.health.indicator.Liveness}\n+ * respectively {@link io.micronaut.management.health.indicator.Readiness} qualifiers.\n+ *\n+ * @author Pavol Gressa\n+ * @since 2.1\n+ */\n+public enum HealthEndpointSelector {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjMxNw=="}, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI4NDk3OnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpointSelector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0OTozMlrOHMYQrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo0ODo1MlrOHMi7fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjQ0NQ==", "bodyText": "Add license (can be done with ./gradlew spotlessApply", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742445", "createdAt": "2020-09-03T06:49:32Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpointSelector.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.micronaut.management.endpoint.health;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxNzI0Nw==", "bodyText": "thanks for hint, will remember that, completely forgot for licences", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482917247", "createdAt": "2020-09-03T11:48:52Z", "author": {"login": "pgressa"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpointSelector.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.micronaut.management.endpoint.health;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjQ0NQ=="}, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI4NjAwOnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0OTo1NVrOHMYRVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0OTo1NVrOHMYRVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjYxNA==", "bodyText": "add license", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742614", "createdAt": "2020-09-03T06:49:55Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI4NjYzOnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MDowM1rOHMYRqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MDowM1rOHMYRqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjY5Nw==", "bodyText": "add javadoc description", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742697", "createdAt": "2020-09-03T06:50:03Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI4NzIxOnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MDoxNFrOHMYSCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MDoxNFrOHMYSCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0Mjc5Mw==", "bodyText": "add license", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742793", "createdAt": "2020-09-03T06:50:14Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI4NzgzOnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MDoyNlrOHMYSZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MDoyNlrOHMYSZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0Mjg4NQ==", "bodyText": "Add javadoc description", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742885", "createdAt": "2020-09-03T06:50:26Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI4OTI0OnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MDo1NFrOHMYTOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MDo1NFrOHMYTOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzA5OQ==", "bodyText": "@Target should be TYPE, METHOD and ANNOTATION_TYPE", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482743099", "createdAt": "2020-09-03T06:50:54Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa\n+ * @since 2.1\n+ */\n+@Qualifier\n+@Documented\n+@Retention(RUNTIME)\n+public @interface Readiness {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI5MTA0OnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MToyOFrOHMYUWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MToyOFrOHMYUWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzM4Ng==", "bodyText": "put these in a subpackage called io.micronaut.management.health.indicator.annotation", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482743386", "createdAt": "2020-09-03T06:51:28Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI5MjAyOnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MTo0NVrOHMYU7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MTo0NVrOHMYU7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzUzMg==", "bodyText": "@Target should be TYPE, METHOD and ANNOTATION_TYPE", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482743532", "createdAt": "2020-09-03T06:51:45Z", "author": {"login": "graemerocher"}, "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa\n+ * @since 2.1\n+ */\n+@Qualifier\n+@Documented\n+@Retention(RUNTIME)\n+public @interface Liveness{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457466dc5c7822355fb0eb5e3dc6308942ac0302"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTU5MjAxOnYy", "diffSide": "RIGHT", "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjozNzo1OFrOHMkmww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0MjoyMFrOHPculg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NDcwNw==", "bodyText": "so this basically means that /health and /health/readiness returns the same payload", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482944707", "createdAt": "2020-09-03T12:37:58Z", "author": {"login": "pgressa"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "diffHunk": "@@ -72,15 +71,22 @@\n     /**\n      * @param healthAggregator            The {@link HealthAggregator}\n      * @param healthIndicators            The {@link HealthIndicator}\n+     * @param livenessHealthIndicators    The {@link HealthIndicator} qualified by {@link Liveness}\n      */\n     public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n                           HealthIndicator[] healthIndicators,\n-                          @Liveness HealthIndicator[] livenessHealthIndicators,\n-                          @Readiness HealthIndicator[] readinessHealthIndicators) {\n+                          @Liveness HealthIndicator[] livenessHealthIndicators) {\n         this.healthAggregator = healthAggregator;\n-        this.healthIndicators = healthIndicators;\n         this.livenessHealthIndicators = livenessHealthIndicators;\n-        this.readinessHealthIndicators = readinessHealthIndicators;\n+        this.readinessHealthIndicators = getReadinessHealthIndicators(healthIndicators, livenessHealthIndicators);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed1a360514334863f95f5ebcf6d68e5e76eefa56"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MTM2Ng==", "bodyText": "no it does not :) .. health returns all healthindicators, and health/readiness returns all @readiness and all not qualified health indicators", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r485961366", "createdAt": "2020-09-09T22:42:20Z", "author": {"login": "pgressa"}, "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "diffHunk": "@@ -72,15 +71,22 @@\n     /**\n      * @param healthAggregator            The {@link HealthAggregator}\n      * @param healthIndicators            The {@link HealthIndicator}\n+     * @param livenessHealthIndicators    The {@link HealthIndicator} qualified by {@link Liveness}\n      */\n     public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n                           HealthIndicator[] healthIndicators,\n-                          @Liveness HealthIndicator[] livenessHealthIndicators,\n-                          @Readiness HealthIndicator[] readinessHealthIndicators) {\n+                          @Liveness HealthIndicator[] livenessHealthIndicators) {\n         this.healthAggregator = healthAggregator;\n-        this.healthIndicators = healthIndicators;\n         this.livenessHealthIndicators = livenessHealthIndicators;\n-        this.readinessHealthIndicators = readinessHealthIndicators;\n+        this.readinessHealthIndicators = getReadinessHealthIndicators(healthIndicators, livenessHealthIndicators);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk0NDcwNw=="}, "originalCommit": {"oid": "ed1a360514334863f95f5ebcf6d68e5e76eefa56"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTY1MjA1OnYy", "diffSide": "RIGHT", "path": "src/main/docs/guide/management/providedEndpoints/healthEndpoint.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0NDo0OVrOHPcxsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMjo0NDo0OVrOHPcxsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk2MjE2MQ==", "bodyText": "This will need better phrasing.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r485962161", "createdAt": "2020-09-09T22:44:49Z", "author": {"login": "pgressa"}, "path": "src/main/docs/guide/management/providedEndpoints/healthEndpoint.adoc", "diffHunk": "@@ -69,7 +69,7 @@ The above will return api:http.HttpStatus#OK[] (200) even when the api:health.He\n \n == Customization\n \n-The health endpoint consists of a health aggregator and any number of health indicators. To add a health indicator, simply create a bean class that implements link:{api}/io/micronaut/management/health/indicator/HealthIndicator.html[HealthIndicator]. A base class link:{api}/io/micronaut/management/health/indicator/AbstractHealthIndicator.html[AbstractHealthIndicator] has been provided for you to extend to make the process easier.\n+The health endpoint consists of a health aggregator and any number of health indicators. To add a health indicator, simply create a bean class that implements link:{api}/io/micronaut/management/health/indicator/HealthIndicator.html[HealthIndicator]. It is recommended to also use either link:{api}/io/micronaut/health/indicator/annotation/Liveness.html[@Liveness] or link:{api}/io/micronaut/health/indicator/annotation/Readiness.html[@Readiness] qualifier. If no qualifier is used then the health incidator is part of /health and /health/readiness endpoints. A base class link:{api}/io/micronaut/management/health/indicator/AbstractHealthIndicator.html[AbstractHealthIndicator] has been provided for you to extend to make the process easier.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14a649b02a1a9f6034825db6aa2ebc9cd1d52fc7"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1268, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}