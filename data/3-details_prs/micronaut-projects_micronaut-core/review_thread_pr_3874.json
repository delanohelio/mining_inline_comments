{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MTAyODEw", "number": 3874, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzowNzowMVrOEYXFqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzowNzoxMVrOEYXF8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTc5NTYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzowNzowMVrOHAp4MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoxMzoyNVrOHAqBqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0ODE3Ng==", "bodyText": "Even if the class is flagged as internal. Should not we keep the method and annotate it with @Deprecated and in the java doc tell to use the new one:\n    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String className) {\nFrom the old one we can the new one.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3874#discussion_r470448176", "createdAt": "2020-08-14T07:07:01Z", "author": {"login": "sdelamo"}, "path": "core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java", "diffHunk": "@@ -44,67 +45,118 @@\n     /**\n      * Marks the given class to be initialized at build time, only if it is present.\n      *\n-     * @param access the {@link BeforeAnalysisAccess} instance\n-     * @param className the class name\n+     * @param access     The {@link BeforeAnalysisAccess} instance\n+     * @param classNames The class names\n      */\n-    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String className) {\n-        findClass(access, className).ifPresent(RuntimeClassInitialization::initializeAtBuildTime);\n+    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String... classNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10dfd662518eb7590f0029f726911ea344f48de1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MDYwMg==", "bodyText": "No, we don't. I asked about this at one engineering meeting and it's totally ok to do \"whatever\" we want with @Internal classes. Besides that, both signatures are compatible.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3874#discussion_r470450602", "createdAt": "2020-08-14T07:13:25Z", "author": {"login": "ilopmar"}, "path": "core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java", "diffHunk": "@@ -44,67 +45,118 @@\n     /**\n      * Marks the given class to be initialized at build time, only if it is present.\n      *\n-     * @param access the {@link BeforeAnalysisAccess} instance\n-     * @param className the class name\n+     * @param access     The {@link BeforeAnalysisAccess} instance\n+     * @param classNames The class names\n      */\n-    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String className) {\n-        findClass(access, className).ifPresent(RuntimeClassInitialization::initializeAtBuildTime);\n+    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String... classNames) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0ODE3Ng=="}, "originalCommit": {"oid": "10dfd662518eb7590f0029f726911ea344f48de1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTc5NjMzOnYy", "diffSide": "LEFT", "path": "core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzowNzoxMVrOHAp4kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzoxMzozMlrOHAqB1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0ODI3NQ==", "bodyText": "Even if the class is flagged as internal. Should not we keep the method and annotate it with @Deprecated and in the java doc tell to use the new one:\n    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String className) {\nFrom the old one we can the new one.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3874#discussion_r470448275", "createdAt": "2020-08-14T07:07:11Z", "author": {"login": "sdelamo"}, "path": "core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java", "diffHunk": "@@ -44,67 +45,118 @@\n     /**\n      * Marks the given class to be initialized at build time, only if it is present.\n      *\n-     * @param access the {@link BeforeAnalysisAccess} instance\n-     * @param className the class name\n+     * @param access     The {@link BeforeAnalysisAccess} instance\n+     * @param classNames The class names\n      */\n-    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String className) {\n-        findClass(access, className).ifPresent(RuntimeClassInitialization::initializeAtBuildTime);\n+    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String... classNames) {\n+        for (String className : classNames) {\n+            findClass(access, className).ifPresent(RuntimeClassInitialization::initializeAtBuildTime);\n+        }\n     }\n \n     /**\n      * Marks the given class to be initialized at runtime, only if it is present.\n      *\n-     * @param access the {@link BeforeAnalysisAccess} instance\n-     * @param className the class name\n+     * @param access     The {@link BeforeAnalysisAccess} instance\n+     * @param classNames The class names\n      */\n-    public static void initializeAtRunTime(BeforeAnalysisAccess access, String className) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10dfd662518eb7590f0029f726911ea344f48de1"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1MDY0Nw==", "bodyText": "Same as before.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3874#discussion_r470450647", "createdAt": "2020-08-14T07:13:32Z", "author": {"login": "ilopmar"}, "path": "core/src/main/java/io/micronaut/core/graal/AutomaticFeatureUtils.java", "diffHunk": "@@ -44,67 +45,118 @@\n     /**\n      * Marks the given class to be initialized at build time, only if it is present.\n      *\n-     * @param access the {@link BeforeAnalysisAccess} instance\n-     * @param className the class name\n+     * @param access     The {@link BeforeAnalysisAccess} instance\n+     * @param classNames The class names\n      */\n-    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String className) {\n-        findClass(access, className).ifPresent(RuntimeClassInitialization::initializeAtBuildTime);\n+    public static void initializeAtBuildTime(BeforeAnalysisAccess access, String... classNames) {\n+        for (String className : classNames) {\n+            findClass(access, className).ifPresent(RuntimeClassInitialization::initializeAtBuildTime);\n+        }\n     }\n \n     /**\n      * Marks the given class to be initialized at runtime, only if it is present.\n      *\n-     * @param access the {@link BeforeAnalysisAccess} instance\n-     * @param className the class name\n+     * @param access     The {@link BeforeAnalysisAccess} instance\n+     * @param classNames The class names\n      */\n-    public static void initializeAtRunTime(BeforeAnalysisAccess access, String className) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ0ODI3NQ=="}, "originalCommit": {"oid": "10dfd662518eb7590f0029f726911ea344f48de1"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1284, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}