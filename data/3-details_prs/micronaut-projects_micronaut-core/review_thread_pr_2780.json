{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMTI2MzYw", "number": 2780, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTozMDozMVrODefz8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTo0OTozOFrODegTJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzA1MDczOnYy", "diffSide": "RIGHT", "path": "http-client/src/main/java/io/micronaut/http/client/RxHttpClientRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTozMDozMVrOFnqbvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTozMDozMVrOFnqbvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEzNDAxMw==", "bodyText": "Javadoc isn't correct", "url": "https://github.com/micronaut-projects/micronaut-core/pull/2780#discussion_r377134013", "createdAt": "2020-02-10T15:30:31Z", "author": {"login": "jameskleeh"}, "path": "http-client/src/main/java/io/micronaut/http/client/RxHttpClientRegistry.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.client;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.Nullable;\n+import io.micronaut.core.annotation.AnnotationMetadata;\n+import io.micronaut.core.annotation.Internal;\n+\n+/**\n+ * Internal interface for managing the construction and lifecycle of instances of {@link RxHttpClient}.\n+ *\n+ * @author graemerocher\n+ * @since 2.0\n+ */\n+@Internal\n+public interface RxHttpClientRegistry {\n+\n+    /**\n+     * Return the client for the given annotation metadata.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67e3afaa4ea11dea4274665b4a983a47a9e9e9fe"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzEzMDYzOnYy", "diffSide": "RIGHT", "path": "http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTo0OTozOFrOFnrNmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNTo0OTozOFrOFnrNmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0Njc3OA==", "bodyText": "Does this annotation belong here?", "url": "https://github.com/micronaut-projects/micronaut-core/pull/2780#discussion_r377146778", "createdAt": "2020-02-10T15:49:38Z", "author": {"login": "jameskleeh"}, "path": "http-netty/src/main/java/io/micronaut/http/netty/channel/DefaultEventLoopGroupConfiguration.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2017-2019 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.http.netty.channel;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import edu.umd.cs.findbugs.annotations.Nullable;\n+import io.micronaut.context.annotation.ConfigurationInject;\n+import io.micronaut.context.annotation.EachProperty;\n+import io.micronaut.context.annotation.Parameter;\n+import io.micronaut.core.bind.annotation.Bindable;\n+import io.micronaut.core.util.StringUtils;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Configuration interface for event loop configuration.\n+ *\n+ * @author graemerocher\n+ * @since 2.0\n+ */\n+@EachProperty(value = EventLoopGroupConfiguration.EVENT_LOOPS, primary = \"default\")\n+public class DefaultEventLoopGroupConfiguration implements EventLoopGroupConfiguration {\n+\n+    private final int numThreads;\n+    private final Integer ioRatio;\n+    private final boolean preferNativeTransport;\n+    private final String name;\n+    private final String executor;\n+\n+    /**\n+     * Default constructor.\n+     *\n+     * @param name                  The name of the group\n+     * @param numThreads            The number of threads\n+     * @param ioRatio               The IO ratio (optional)\n+     * @param preferNativeTransport Whether native transport is to be preferred\n+     * @param executor              A named executor service to use (optional)\n+     */\n+    @ConfigurationInject\n+    public DefaultEventLoopGroupConfiguration(\n+            @Parameter String name,\n+            @Bindable(defaultValue = \"0\") int numThreads,\n+            @Nullable Integer ioRatio,\n+            @Bindable(defaultValue = StringUtils.FALSE) boolean preferNativeTransport,\n+            @Nullable String executor) {\n+        this.name = name;\n+        this.numThreads = numThreads;\n+        this.ioRatio = ioRatio;\n+        this.preferNativeTransport = preferNativeTransport;\n+        this.executor = executor;\n+    }\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public DefaultEventLoopGroupConfiguration() {\n+        this.name = DEFAULT;\n+        this.numThreads = 0;\n+        this.ioRatio = null;\n+        this.preferNativeTransport = false;\n+        this.executor = null;\n+    }\n+\n+    /**\n+     * @return The number of threads for the event loop\n+     */\n+    @Override\n+    public int getNumThreads() {\n+        return numThreads;\n+    }\n+\n+    /**\n+     * @return The I/O ratio.\n+     */\n+    @Override\n+    public Optional<Integer> getIoRatio() {\n+        return Optional.ofNullable(ioRatio);\n+    }\n+\n+    @Override\n+    public Optional<String> getExecutorName() {\n+        return Optional.ofNullable(executor);\n+    }\n+\n+    /**\n+     * @return Whether to prefer the native transport\n+     */\n+    @Override\n+    @Bindable(defaultValue = StringUtils.TRUE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67e3afaa4ea11dea4274665b4a983a47a9e9e9fe"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1393, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}