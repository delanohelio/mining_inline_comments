{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTU5MTY4", "number": 3599, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozNDoyNVrOEKLp_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozOTowOFrOEKLylw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTEyMTkwOnYy", "diffSide": "RIGHT", "path": "inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozNDoyNVrOGrE7CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0NjowMFrOGrFZwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyMjYwMQ==", "bodyText": "This doesn't seem correct", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3599#discussion_r447822601", "createdAt": "2020-06-30T16:34:25Z", "author": {"login": "jameskleeh"}, "path": "inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java", "diffHunk": "@@ -211,30 +211,23 @@ public String toString() {\n                 return mirrorToClassElement(bound, visitorContext, genericsInfo);\n             } else {\n \n-                ClassElement classElement = mirrorToClassElement(upperBound, visitorContext, genericsInfo);\n-                if (classElement != null) {\n-                    return classElement;\n-                } else {\n-                    return mirrorToClassElement(tv.getLowerBound(), visitorContext, genericsInfo);\n-                }\n+                return mirrorToClassElement(upperBound, visitorContext, genericsInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03a856f1d7fb5c4925e30fd3e62ad64fa913632"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMDQ2NA==", "bodyText": "mirrorToClassElement never returns null.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3599#discussion_r447830464", "createdAt": "2020-06-30T16:46:00Z", "author": {"login": "croudet"}, "path": "inject-java/src/main/java/io/micronaut/annotation/processing/visitor/AbstractJavaElement.java", "diffHunk": "@@ -211,30 +211,23 @@ public String toString() {\n                 return mirrorToClassElement(bound, visitorContext, genericsInfo);\n             } else {\n \n-                ClassElement classElement = mirrorToClassElement(upperBound, visitorContext, genericsInfo);\n-                if (classElement != null) {\n-                    return classElement;\n-                } else {\n-                    return mirrorToClassElement(tv.getLowerBound(), visitorContext, genericsInfo);\n-                }\n+                return mirrorToClassElement(upperBound, visitorContext, genericsInfo);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyMjYwMQ=="}, "originalCommit": {"oid": "a03a856f1d7fb5c4925e30fd3e62ad64fa913632"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTEyODc0OnYy", "diffSide": "LEFT", "path": "inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozNTo0NVrOGrE-_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozNTo0NVrOGrE-_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyMzYxNQ==", "bodyText": "Removing this check doesn't seem correct. The previous calls mirrorToClassElement could have returned null", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3599#discussion_r447823615", "createdAt": "2020-06-30T16:35:45Z", "author": {"login": "jameskleeh"}, "path": "inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java", "diffHunk": "@@ -211,37 +211,31 @@ protected void accept(DeclaredType declaringType, javax.lang.model.element.Eleme\n                         getterReturnType = mirrorToClassElement(returnType, visitorContext, JavaClassElement.this.genericTypeInfo);\n                     }\n \n-                    if (getterReturnType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03a856f1d7fb5c4925e30fd3e62ad64fa913632"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTEzMDk2OnYy", "diffSide": "LEFT", "path": "inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozNjowOVrOGrFAQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozNjowOVrOGrFAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyMzkzNg==", "bodyText": "Removing this check doesn't seem correct. The previous call to mirrorToClassElement could have returned null", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3599#discussion_r447823936", "createdAt": "2020-06-30T16:36:09Z", "author": {"login": "jameskleeh"}, "path": "inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java", "diffHunk": "@@ -211,37 +211,31 @@ protected void accept(DeclaredType declaringType, javax.lang.model.element.Eleme\n                         getterReturnType = mirrorToClassElement(returnType, visitorContext, JavaClassElement.this.genericTypeInfo);\n                     }\n \n-                    if (getterReturnType != null) {\n-\n-                        BeanPropertyData beanPropertyData = props.computeIfAbsent(propertyName, BeanPropertyData::new);\n-                        configureDeclaringType(declaringTypeElement, beanPropertyData);\n-                        beanPropertyData.type = getterReturnType;\n-                        beanPropertyData.getter = executableElement;\n-                        if (beanPropertyData.setter != null) {\n-                            TypeMirror typeMirror = beanPropertyData.setter.getParameters().get(0).asType();\n-                            ClassElement setterParameterType = mirrorToClassElement(typeMirror, visitorContext, JavaClassElement.this.genericTypeInfo);\n-                            if (setterParameterType == null || !setterParameterType.getName().equals(getterReturnType.getName())) {\n-                                beanPropertyData.setter = null; // not a compatible setter\n-                            }\n+                    BeanPropertyData beanPropertyData = props.computeIfAbsent(propertyName, BeanPropertyData::new);\n+                    configureDeclaringType(declaringTypeElement, beanPropertyData);\n+                    beanPropertyData.type = getterReturnType;\n+                    beanPropertyData.getter = executableElement;\n+                    if (beanPropertyData.setter != null) {\n+                        TypeMirror typeMirror = beanPropertyData.setter.getParameters().get(0).asType();\n+                        ClassElement setterParameterType = mirrorToClassElement(typeMirror, visitorContext, JavaClassElement.this.genericTypeInfo);\n+                        if (!setterParameterType.getName().equals(getterReturnType.getName())) {\n+                            beanPropertyData.setter = null; // not a compatible setter\n                         }\n                     }\n                 } else if (NameUtils.isSetterName(methodName) && executableElement.getParameters().size() == 1) {\n                     String propertyName = NameUtils.getPropertyNameForSetter(methodName);\n                     TypeMirror typeMirror = executableElement.getParameters().get(0).asType();\n                     ClassElement setterParameterType = mirrorToClassElement(typeMirror, visitorContext, JavaClassElement.this.genericTypeInfo);\n \n-                    if (setterParameterType != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03a856f1d7fb5c4925e30fd3e62ad64fa913632"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTEzODkxOnYy", "diffSide": "RIGHT", "path": "inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozODowMFrOGrFFOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozODowMFrOGrFFOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyNTIxMQ==", "bodyText": "This also doesn't make sense to me. If the call returns null it shouldn't be put into the map with a null value", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3599#discussion_r447825211", "createdAt": "2020-06-30T16:38:00Z", "author": {"login": "jameskleeh"}, "path": "inject-java/src/main/java/io/micronaut/annotation/processing/visitor/JavaClassElement.java", "diffHunk": "@@ -415,9 +404,7 @@ public AnnotationMetadata getAnnotationMetadata() {\n         while (tpi.hasNext()) {\n             TypeParameterElement tpe = tpi.next();\n             ClassElement classElement = mirrorToClassElement(tpe.asType(), visitorContext, this.genericTypeInfo);\n-            if (classElement != null) {\n-                map.put(tpe.toString(), classElement);\n-            }\n+            map.put(tpe.toString(), classElement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03a856f1d7fb5c4925e30fd3e62ad64fa913632"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTE0MzkxOnYy", "diffSide": "RIGHT", "path": "inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjozOTowOFrOGrFILA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoyMzowNlrOGrG3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyNTk2NA==", "bodyText": "What is the reasoning for this change?", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3599#discussion_r447825964", "createdAt": "2020-06-30T16:39:08Z", "author": {"login": "jameskleeh"}, "path": "inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java", "diffHunk": "@@ -128,7 +128,7 @@ protected AbstractBeanDefinition(Class<T> producedType,\n                                      boolean requiresReflection,\n                                      Argument... arguments) {\n \n-        AnnotationMetadata beanAnnotationMetadata = getAnnotationMetadata();\n+        getAnnotationMetadata();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a03a856f1d7fb5c4925e30fd3e62ad64fa913632"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMDk0OA==", "bodyText": "beanAnnotationMetadata  is not used.\nIs the call mandatory?", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3599#discussion_r447830948", "createdAt": "2020-06-30T16:46:43Z", "author": {"login": "croudet"}, "path": "inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java", "diffHunk": "@@ -128,7 +128,7 @@ protected AbstractBeanDefinition(Class<T> producedType,\n                                      boolean requiresReflection,\n                                      Argument... arguments) {\n \n-        AnnotationMetadata beanAnnotationMetadata = getAnnotationMetadata();\n+        getAnnotationMetadata();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyNTk2NA=="}, "originalCommit": {"oid": "a03a856f1d7fb5c4925e30fd3e62ad64fa913632"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMzk3NQ==", "bodyText": "The only thing it will do is initialize the annotation metadata, which should not need done at that point in time. You can try removing the call and see if the build passes", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3599#discussion_r447833975", "createdAt": "2020-06-30T16:51:30Z", "author": {"login": "jameskleeh"}, "path": "inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java", "diffHunk": "@@ -128,7 +128,7 @@ protected AbstractBeanDefinition(Class<T> producedType,\n                                      boolean requiresReflection,\n                                      Argument... arguments) {\n \n-        AnnotationMetadata beanAnnotationMetadata = getAnnotationMetadata();\n+        getAnnotationMetadata();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyNTk2NA=="}, "originalCommit": {"oid": "a03a856f1d7fb5c4925e30fd3e62ad64fa913632"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg1NDM5MA==", "bodyText": "Call removed.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3599#discussion_r447854390", "createdAt": "2020-06-30T17:23:06Z", "author": {"login": "croudet"}, "path": "inject/src/main/java/io/micronaut/context/AbstractBeanDefinition.java", "diffHunk": "@@ -128,7 +128,7 @@ protected AbstractBeanDefinition(Class<T> producedType,\n                                      boolean requiresReflection,\n                                      Argument... arguments) {\n \n-        AnnotationMetadata beanAnnotationMetadata = getAnnotationMetadata();\n+        getAnnotationMetadata();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgyNTk2NA=="}, "originalCommit": {"oid": "a03a856f1d7fb5c4925e30fd3e62ad64fa913632"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1330, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}