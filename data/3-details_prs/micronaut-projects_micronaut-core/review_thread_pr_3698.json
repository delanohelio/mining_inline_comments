{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2OTI2OTA1", "number": 3698, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTozMzoyNFrOEM8rTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoyMzowOFrOEM94RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDEyNDk0OnYy", "diffSide": "RIGHT", "path": "validation/src/main/java/io/micronaut/validation/executable/ExecutableVisitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTozMzoyNFrOGvWoTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNTozMzoyNFrOGvWoTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMwNzAyMw==", "bodyText": "Should declare isolating:\n    @NonNull\n    @Override\n    public VisitorKind getVisitorKind() {\n        return VisitorKind.ISOLATING;\n    }", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3698#discussion_r452307023", "createdAt": "2020-07-09T15:33:24Z", "author": {"login": "graemerocher"}, "path": "validation/src/main/java/io/micronaut/validation/executable/ExecutableVisitor.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.validation.executable;\n+\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.inject.ast.MethodElement;\n+import io.micronaut.inject.ast.ParameterElement;\n+import io.micronaut.inject.visitor.TypeElementVisitor;\n+import io.micronaut.inject.visitor.VisitorContext;\n+\n+/**\n+ * A {@link io.micronaut.inject.visitor.TypeElementVisitor} that validates primitive types can't have a Nullable annotation.\n+ *\n+ * @author Iv\u00e1n L\u00f3pez\n+ * @since 2.0.1\n+ */\n+@Internal\n+public class ExecutableVisitor implements TypeElementVisitor<Object, Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e6b77cb5bc6363d6264373d434adbcde701f60f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDMxOTA4OnYy", "diffSide": "RIGHT", "path": "validation/src/main/java/io/micronaut/validation/executable/ExecutableVisitor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoyMjoyMlrOGvYjvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwOTozODowNlrOGvw2vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzODYyMA==", "bodyText": "We need to ensure the MethodElement is annotated with @Executable. Can you look into why TypeElementVisitor<Object, Executable> is not working?", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3698#discussion_r452338620", "createdAt": "2020-07-09T16:22:22Z", "author": {"login": "jameskleeh"}, "path": "validation/src/main/java/io/micronaut/validation/executable/ExecutableVisitor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.validation.executable;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.inject.ast.MethodElement;\n+import io.micronaut.inject.ast.ParameterElement;\n+import io.micronaut.inject.visitor.TypeElementVisitor;\n+import io.micronaut.inject.visitor.VisitorContext;\n+\n+/**\n+ * A {@link io.micronaut.inject.visitor.TypeElementVisitor} that validates primitive types can't have a Nullable annotation.\n+ *\n+ * @author Iv\u00e1n L\u00f3pez\n+ * @since 2.0.1\n+ */\n+@Internal\n+public class ExecutableVisitor implements TypeElementVisitor<Object, Object> {\n+\n+    @NonNull\n+    @Override\n+    public VisitorKind getVisitorKind() {\n+        return VisitorKind.ISOLATING;\n+    }\n+\n+    @Override\n+    public void visitMethod(MethodElement element, VisitorContext context) {\n+        ParameterElement[] parameters = element.getParameters();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9b00b042eecdee09d835820a3d03c13125d456"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY2MjczOA==", "bodyText": "If we can limit this as much as possible to a pair of meta annotations it is better for incremental compilation", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3698#discussion_r452662738", "createdAt": "2020-07-10T07:10:17Z", "author": {"login": "graemerocher"}, "path": "validation/src/main/java/io/micronaut/validation/executable/ExecutableVisitor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.validation.executable;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.inject.ast.MethodElement;\n+import io.micronaut.inject.ast.ParameterElement;\n+import io.micronaut.inject.visitor.TypeElementVisitor;\n+import io.micronaut.inject.visitor.VisitorContext;\n+\n+/**\n+ * A {@link io.micronaut.inject.visitor.TypeElementVisitor} that validates primitive types can't have a Nullable annotation.\n+ *\n+ * @author Iv\u00e1n L\u00f3pez\n+ * @since 2.0.1\n+ */\n+@Internal\n+public class ExecutableVisitor implements TypeElementVisitor<Object, Object> {\n+\n+    @NonNull\n+    @Override\n+    public VisitorKind getVisitorKind() {\n+        return VisitorKind.ISOLATING;\n+    }\n+\n+    @Override\n+    public void visitMethod(MethodElement element, VisitorContext context) {\n+        ParameterElement[] parameters = element.getParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzODYyMA=="}, "originalCommit": {"oid": "cf9b00b042eecdee09d835820a3d03c13125d456"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMDczOA==", "bodyText": "@jameskleeh fixed now. See my comment: #3698 (comment) and 5197f8a.\n@graemerocher Can you please explain what do you mean? I've pushed a commit that makes it work with TypeElementVisitor<Object, Executable>. Do you mean making it for something that it's not Object? Like  TypeElementVisitor<Any-other-thing-here, Executable>?", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3698#discussion_r452720738", "createdAt": "2020-07-10T09:06:28Z", "author": {"login": "ilopmar"}, "path": "validation/src/main/java/io/micronaut/validation/executable/ExecutableVisitor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.validation.executable;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.inject.ast.MethodElement;\n+import io.micronaut.inject.ast.ParameterElement;\n+import io.micronaut.inject.visitor.TypeElementVisitor;\n+import io.micronaut.inject.visitor.VisitorContext;\n+\n+/**\n+ * A {@link io.micronaut.inject.visitor.TypeElementVisitor} that validates primitive types can't have a Nullable annotation.\n+ *\n+ * @author Iv\u00e1n L\u00f3pez\n+ * @since 2.0.1\n+ */\n+@Internal\n+public class ExecutableVisitor implements TypeElementVisitor<Object, Object> {\n+\n+    @NonNull\n+    @Override\n+    public VisitorKind getVisitorKind() {\n+        return VisitorKind.ISOLATING;\n+    }\n+\n+    @Override\n+    public void visitMethod(MethodElement element, VisitorContext context) {\n+        ParameterElement[] parameters = element.getParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzODYyMA=="}, "originalCommit": {"oid": "cf9b00b042eecdee09d835820a3d03c13125d456"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczMTgyNw==", "bodyText": "If you have been able to limit it to just @Executable that is probably ok. In general <Object, Object> is bad for incremental compilation since it has to visit every annotation which breaks the way Gradle's incremental compilation works. Currently this is only a problem with GraalTypeElementVisitor I believe, which is the only one that visits everything (really we should try and change that visitor or restructure it to visit fewer annotations)", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3698#discussion_r452731827", "createdAt": "2020-07-10T09:28:14Z", "author": {"login": "graemerocher"}, "path": "validation/src/main/java/io/micronaut/validation/executable/ExecutableVisitor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.validation.executable;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.inject.ast.MethodElement;\n+import io.micronaut.inject.ast.ParameterElement;\n+import io.micronaut.inject.visitor.TypeElementVisitor;\n+import io.micronaut.inject.visitor.VisitorContext;\n+\n+/**\n+ * A {@link io.micronaut.inject.visitor.TypeElementVisitor} that validates primitive types can't have a Nullable annotation.\n+ *\n+ * @author Iv\u00e1n L\u00f3pez\n+ * @since 2.0.1\n+ */\n+@Internal\n+public class ExecutableVisitor implements TypeElementVisitor<Object, Object> {\n+\n+    @NonNull\n+    @Override\n+    public VisitorKind getVisitorKind() {\n+        return VisitorKind.ISOLATING;\n+    }\n+\n+    @Override\n+    public void visitMethod(MethodElement element, VisitorContext context) {\n+        ParameterElement[] parameters = element.getParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzODYyMA=="}, "originalCommit": {"oid": "cf9b00b042eecdee09d835820a3d03c13125d456"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczNjcwMw==", "bodyText": "Thanks for the clarification.\nRegarding the GraalTypeElementVisitor, if you have any idea or guidance in mind, please open an issue explaining what you have in mind and I can give it a try.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3698#discussion_r452736703", "createdAt": "2020-07-10T09:38:06Z", "author": {"login": "ilopmar"}, "path": "validation/src/main/java/io/micronaut/validation/executable/ExecutableVisitor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2020 original authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.micronaut.validation.executable;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.micronaut.core.annotation.Internal;\n+import io.micronaut.inject.ast.MethodElement;\n+import io.micronaut.inject.ast.ParameterElement;\n+import io.micronaut.inject.visitor.TypeElementVisitor;\n+import io.micronaut.inject.visitor.VisitorContext;\n+\n+/**\n+ * A {@link io.micronaut.inject.visitor.TypeElementVisitor} that validates primitive types can't have a Nullable annotation.\n+ *\n+ * @author Iv\u00e1n L\u00f3pez\n+ * @since 2.0.1\n+ */\n+@Internal\n+public class ExecutableVisitor implements TypeElementVisitor<Object, Object> {\n+\n+    @NonNull\n+    @Override\n+    public VisitorKind getVisitorKind() {\n+        return VisitorKind.ISOLATING;\n+    }\n+\n+    @Override\n+    public void visitMethod(MethodElement element, VisitorContext context) {\n+        ParameterElement[] parameters = element.getParameters();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzODYyMA=="}, "originalCommit": {"oid": "cf9b00b042eecdee09d835820a3d03c13125d456"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDMyMTk3OnYy", "diffSide": "RIGHT", "path": "validation/src/test/groovy/io/micronaut/validation/executable/NullablePrimitiveSpec.groovy", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNjoyMzowOFrOGvYlhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODo1NToyOVrOGvvfrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzOTA3OA==", "bodyText": "This type of scenario should still compile because Micronaut will not be executing this method", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3698#discussion_r452339078", "createdAt": "2020-07-09T16:23:08Z", "author": {"login": "jameskleeh"}, "path": "validation/src/test/groovy/io/micronaut/validation/executable/NullablePrimitiveSpec.groovy", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.micronaut.validation.executable\n+\n+import io.micronaut.annotation.processing.test.AbstractTypeElementSpec\n+import spock.lang.Shared\n+\n+class NullablePrimitiveSpec extends AbstractTypeElementSpec {\n+\n+    @Shared\n+    String errorMsg = \"Primitive types can not be null\"\n+\n+    void 'test @Nullable is not allowed on primitive parameters'() {\n+        when:\n+        buildTypeElement(\"\"\"\n+package test;\n+\n+@javax.inject.Singleton\n+class Foo {\n+    void bar(@javax.annotation.Nullable boolean boolPrimitive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf9b00b042eecdee09d835820a3d03c13125d456"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNDQxMw==", "bodyText": "I'm sorry James, you are right. I was confused at the beginning and didn't really think about the difference on \"user calling it's own code\" vs \"Micronaut calling user code\" (like in a controller). It's fixed now.", "url": "https://github.com/micronaut-projects/micronaut-core/pull/3698#discussion_r452714413", "createdAt": "2020-07-10T08:55:29Z", "author": {"login": "ilopmar"}, "path": "validation/src/test/groovy/io/micronaut/validation/executable/NullablePrimitiveSpec.groovy", "diffHunk": "@@ -0,0 +1,83 @@\n+package io.micronaut.validation.executable\n+\n+import io.micronaut.annotation.processing.test.AbstractTypeElementSpec\n+import spock.lang.Shared\n+\n+class NullablePrimitiveSpec extends AbstractTypeElementSpec {\n+\n+    @Shared\n+    String errorMsg = \"Primitive types can not be null\"\n+\n+    void 'test @Nullable is not allowed on primitive parameters'() {\n+        when:\n+        buildTypeElement(\"\"\"\n+package test;\n+\n+@javax.inject.Singleton\n+class Foo {\n+    void bar(@javax.annotation.Nullable boolean boolPrimitive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMzOTA3OA=="}, "originalCommit": {"oid": "cf9b00b042eecdee09d835820a3d03c13125d456"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1301, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}