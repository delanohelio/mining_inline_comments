{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDI2MDQw", "number": 133, "title": "Add unit tests to the rca.framework.api.persist package", "bodyText": "Issue #, if available: 51\nDescription of changes: Add unit tests to the rca.framework.api.persist package\nTests: SQLParsingUtilTest - verifies the behavior of the SQLParsingUtil\nCode coverage percentage for this patch: 100%\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-04-07T04:12:16Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133", "merged": true, "mergeCommit": {"oid": "d0c129712d0a02b9644cfeb061685979355e3263"}, "closed": true, "closedAt": "2020-04-22T22:03:28Z", "author": {"login": "sidheart"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVLeCBgBqjMyMDgxMTgxNDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaPquCgFqTM5ODYyMjM5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "927d3aa5f5b8aac1ddabc2aefaba121e1193bf2b", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/927d3aa5f5b8aac1ddabc2aefaba121e1193bf2b", "committedDate": "2020-04-07T04:11:05Z", "message": "Add unit tests to the rca.framework.api.persist package"}, "afterCommit": {"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/cb6ec0648f2a56dc82d08f810587fc75584ed995", "committedDate": "2020-04-07T04:20:07Z", "message": "Add unit tests to the rca.framework.api.persist package"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTMyMDg3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#pullrequestreview-391132087", "createdAt": "2020-04-09T21:05:57Z", "commit": {"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTowNTo1N1rOGDpZeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMTowNTo1N1rOGDpZeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3NzE3Ng==", "bodyText": "getRecordByName() is marked VisibleForTesting but this caller is not. When the application (and not the tests) calls it, it will result in error, right ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r406477176", "createdAt": "2020-04-09T21:05:57Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -68,11 +75,11 @@ private static Record getRecordByName(Result<Record> result, Field<String> field\n    * @param dataField The field to retrieve data from\n    * @return the data read from SQL result\n    */\n-  public static double readDataFromSqlResult(Result<Record> result, Field<String> matchedField, String matchedFieldName, String dataField) {\n+  public double readDataFromSqlResult(Result<Record> result, Field<String> matchedField, String matchedFieldName, String dataField) {\n     double ret = Double.NaN;\n     if (result != null) {\n       try {\n-        Record record = SQLParsingUtil.getRecordByName(result, matchedField, matchedFieldName);\n+        Record record = getRecordByName(result, matchedField, matchedFieldName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NjgyOTA4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#pullrequestreview-397682908", "createdAt": "2020-04-21T21:18:10Z", "commit": {"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMToxODoxMFrOGJY5_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMToxODoxMFrOGJY5_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ5ODQzMQ==", "bodyText": "do we really need singleton pattern here ? I assume those are just some static utility functions which can be tested directly without singleton.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412498431", "createdAt": "2020-04-21T21:18:10Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -27,6 +28,10 @@\n public class SQLParsingUtil {\n   private static final Logger LOG = LogManager.getLogger(SQLParsingUtil.class);\n \n+  public static final SQLParsingUtil API = new SQLParsingUtil();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NjkwMTk5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#pullrequestreview-397690199", "createdAt": "2020-04-21T21:29:48Z", "commit": {"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMToyOTo0OFrOGJZUEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMToyOTo0OFrOGJZUEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwNTEwNA==", "bodyText": "I would suggest to create a dummy SQL context instead of mocking the Result object. You can use the jooq DSLcontext to create whatever Result you want and use that as input for this test.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412505104", "createdAt": "2020-04-21T21:29:48Z", "author": {"login": "rguo-aws"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtilTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.Lists;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.exception.DataTypeException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+public class SQLParsingUtilTest {\n+    private static final String FIELD_NAME = \"FIELD_NAME\";\n+    private static final String DATA_FIELD = \"DATA_FIELD\";\n+\n+    private SQLParsingUtil uut;\n+\n+    @Mock\n+    private Result<Record> result;\n+\n+    @Mock\n+    private Field<String> field;\n+\n+    @Mock\n+    private Record record;\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        uut = SQLParsingUtil.API;\n+    }\n+\n+    @Test\n+    public void testGetRecordByName() {\n+        when(result.getValues(field)).thenReturn(Lists.newArrayList(\"no\", FIELD_NAME, \"nope\"));\n+        uut.getRecordByName(result, field, FIELD_NAME);\n+        verify(result, times(1)).get(1);\n+\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetRecordByNameWithNullResult() {\n+        uut.getRecordByName(null, field, FIELD_NAME);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetRecordByNameWithNoMatch() {\n+        when(result.getValues(field)).thenReturn(Lists.newArrayList(\"no\", \"matches\", \"here\"));\n+        uut.getRecordByName(result, field, FIELD_NAME);\n+    }\n+\n+    @Test\n+    public void testReadDataFromSqlResult() {\n+        // method should return Double.NaN when result is null\n+        assertEquals(Double.NaN, uut.readDataFromSqlResult(null, field, FIELD_NAME, DATA_FIELD), 0);\n+        // method should return Double.NaN when it encounters an IllegalArgumentException\n+        when(result.getValues(field)).thenReturn(Lists.newArrayList(\"no\", \"matches\", \"here\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NjkzOTYx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#pullrequestreview-397693961", "createdAt": "2020-04-21T21:36:21Z", "commit": {"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTozNjoyMVrOGJZhzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMTozNjoyMVrOGJZhzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUwODYyMg==", "bodyText": "not sure if we really need to change the signature of this function from private to public. I assume we can still call the public API readDataFromSqlResult to test this function ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r412508622", "createdAt": "2020-04-21T21:36:21Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -36,15 +41,17 @@\n    * @return The record that contain the name string in field\n    * @throws IllegalArgumentException throws an exception if we can't find the name in the field\n    */\n-  private static Record getRecordByName(Result<Record> result, Field<String> field, String name) throws IllegalArgumentException {\n+  @VisibleForTesting\n+  Record getRecordByName(Result<Record> result, Field<String> field, String name) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb6ec0648f2a56dc82d08f810587fc75584ed995", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/cb6ec0648f2a56dc82d08f810587fc75584ed995", "committedDate": "2020-04-07T04:20:07Z", "message": "Add unit tests to the rca.framework.api.persist package"}, "afterCommit": {"oid": "44aaed27b3b8ed19078841dc4d63ff76801c3e85", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/44aaed27b3b8ed19078841dc4d63ff76801c3e85", "committedDate": "2020-04-21T22:08:17Z", "message": "Add unit tests to the rca.framework.api.persist package"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODIyMDgy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#pullrequestreview-397822082", "createdAt": "2020-04-22T03:43:58Z", "commit": {"oid": "44aaed27b3b8ed19078841dc4d63ff76801c3e85"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTg0MDYy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#pullrequestreview-398584062", "createdAt": "2020-04-22T20:58:30Z", "commit": {"oid": "44aaed27b3b8ed19078841dc4d63ff76801c3e85"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDo1ODozMVrOGKLjDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMTozNTowN1rOGKM2vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMyODE0MQ==", "bodyText": "Can we move the text in line 82 to line 81 ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r413328141", "createdAt": "2020-04-22T20:58:31Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -70,18 +71,16 @@ private static Record getRecordByName(Result<Record> result, Field<String> field\n    */\n   public static double readDataFromSqlResult(Result<Record> result, Field<String> matchedField, String matchedFieldName, String dataField) {\n     double ret = Double.NaN;\n-    if (result != null) {\n-      try {\n-        Record record = SQLParsingUtil.getRecordByName(result, matchedField, matchedFieldName);\n-        ret = record.getValue(MetricsDB.MAX, Double.class);\n-      }\n-      catch (IllegalArgumentException ie) {\n-        LOG.error(\"{} fails to match any row in field {}.\", matchedFieldName, matchedField.getName());\n-      }\n-      catch (\n-          DataTypeException de) {\n-        LOG.error(\"Fail to read {} field from SQL result\", dataField);\n-      }\n+    try {\n+      Record record = getRecordByName(result, matchedField, matchedFieldName);\n+      ret = record.getValue(MetricsDB.MAX, Double.class);\n+    }\n+    catch (IllegalArgumentException ie) {\n+      LOG.error(\"{} fails to match any row in field {}.\", matchedFieldName, matchedField.getName());\n+    }\n+    catch (\n+            DataTypeException de) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44aaed27b3b8ed19078841dc4d63ff76801c3e85"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMzMTU3Mw==", "bodyText": "If we don't expect result to be null, we should add the notnull annotation for that argument.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r413331573", "createdAt": "2020-04-22T21:04:13Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -37,14 +37,15 @@\n    * @throws IllegalArgumentException throws an exception if we can't find the name in the field\n    */\n   private static Record getRecordByName(Result<Record> result, Field<String> field, String name) throws IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44aaed27b3b8ed19078841dc4d63ff76801c3e85"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM0OTU2Ng==", "bodyText": "Can we add a test to check Illegal Argument Exception and DataTypeException is thrown ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#discussion_r413349566", "createdAt": "2020-04-22T21:35:07Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -70,18 +71,16 @@ private static Record getRecordByName(Result<Record> result, Field<String> field\n    */\n   public static double readDataFromSqlResult(Result<Record> result, Field<String> matchedField, String matchedFieldName, String dataField) {\n     double ret = Double.NaN;\n-    if (result != null) {\n-      try {\n-        Record record = SQLParsingUtil.getRecordByName(result, matchedField, matchedFieldName);\n-        ret = record.getValue(MetricsDB.MAX, Double.class);\n-      }\n-      catch (IllegalArgumentException ie) {\n-        LOG.error(\"{} fails to match any row in field {}.\", matchedFieldName, matchedField.getName());\n-      }\n-      catch (\n-          DataTypeException de) {\n-        LOG.error(\"Fail to read {} field from SQL result\", dataField);\n-      }\n+    try {\n+      Record record = getRecordByName(result, matchedField, matchedFieldName);\n+      ret = record.getValue(MetricsDB.MAX, Double.class);\n+    }\n+    catch (IllegalArgumentException ie) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44aaed27b3b8ed19078841dc4d63ff76801c3e85"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjEyNzk5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#pullrequestreview-398612799", "createdAt": "2020-04-22T21:45:18Z", "commit": {"oid": "44aaed27b3b8ed19078841dc4d63ff76801c3e85"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f472df21f483c236d03b32ed9fa32cf709a32130", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f472df21f483c236d03b32ed9fa32cf709a32130", "committedDate": "2020-04-22T21:54:22Z", "message": "Add unit tests to the rca.framework.api.persist package"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44aaed27b3b8ed19078841dc4d63ff76801c3e85", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/44aaed27b3b8ed19078841dc4d63ff76801c3e85", "committedDate": "2020-04-21T22:08:17Z", "message": "Add unit tests to the rca.framework.api.persist package"}, "afterCommit": {"oid": "f472df21f483c236d03b32ed9fa32cf709a32130", "author": {"user": null}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f472df21f483c236d03b32ed9fa32cf709a32130", "committedDate": "2020-04-22T21:54:22Z", "message": "Add unit tests to the rca.framework.api.persist package"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjIyMzk2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/133#pullrequestreview-398622396", "createdAt": "2020-04-22T22:03:21Z", "commit": {"oid": "f472df21f483c236d03b32ed9fa32cf709a32130"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1183, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}