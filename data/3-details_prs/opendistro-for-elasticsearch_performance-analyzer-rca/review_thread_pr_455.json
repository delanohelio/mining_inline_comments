{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MjI2NjY0", "number": 455, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDo0Nzo0OVrOEq6ldg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMDowMDo1NVrOEtRBuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDM1NTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryActionRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDo0Nzo0OVrOHdZWPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDowNDoyM1rOHeJo9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU4NjA0NA==", "bodyText": "This exchange.close() should be outside the else {} so that we close the object for all requests. Please change this for QueryRcaRequestHandler as well.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r500586044", "createdAt": "2020-10-06T20:47:49Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryActionRequestHandler.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rest;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors.StatExceptionCode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.Persistable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.google.gson.JsonObject;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.security.InvalidParameterException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.apache.logging.log4j.util.Supplier;\n+\n+public class QueryActionRequestHandler extends MetricsHandler implements HttpHandler {\n+\n+    private static final Logger LOG = LogManager.getLogger(QueryActionRequestHandler.class);\n+    private Persistable persistable;\n+    private AppContext appContext;\n+\n+    public QueryActionRequestHandler(final AppContext appContext) {\n+        this.appContext = appContext;\n+    }\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        String requestMethod = exchange.getRequestMethod();\n+\n+        if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+            LOG.debug(\"Action Query handler called.\");\n+            exchange.getResponseHeaders().set(\"Content-Type\", \"application/json\");\n+\n+            try {\n+                synchronized (this) {\n+                    String query = exchange.getRequestURI().getQuery();\n+                    handleActionRequest(exchange);\n+                }\n+            } catch (InvalidParameterException e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_BAD_REQUEST);\n+            } catch (Exception e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.toString() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_INTERNAL_ERROR);\n+            }\n+        } else {\n+            exchange.sendResponseHeaders(HttpURLConnection.HTTP_NOT_FOUND, -1);\n+            exchange.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2c5d2a3dac6755f5e6307c45afc1b52b9b4fb76"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3NzI2OA==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r501377268", "createdAt": "2020-10-08T00:04:23Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryActionRequestHandler.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rest;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors.StatExceptionCode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.Persistable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.google.gson.JsonObject;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.security.InvalidParameterException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.apache.logging.log4j.util.Supplier;\n+\n+public class QueryActionRequestHandler extends MetricsHandler implements HttpHandler {\n+\n+    private static final Logger LOG = LogManager.getLogger(QueryActionRequestHandler.class);\n+    private Persistable persistable;\n+    private AppContext appContext;\n+\n+    public QueryActionRequestHandler(final AppContext appContext) {\n+        this.appContext = appContext;\n+    }\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        String requestMethod = exchange.getRequestMethod();\n+\n+        if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+            LOG.debug(\"Action Query handler called.\");\n+            exchange.getResponseHeaders().set(\"Content-Type\", \"application/json\");\n+\n+            try {\n+                synchronized (this) {\n+                    String query = exchange.getRequestURI().getQuery();\n+                    handleActionRequest(exchange);\n+                }\n+            } catch (InvalidParameterException e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_BAD_REQUEST);\n+            } catch (Exception e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.toString() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_INTERNAL_ERROR);\n+            }\n+        } else {\n+            exchange.sendResponseHeaders(HttpURLConnection.HTTP_NOT_FOUND, -1);\n+            exchange.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU4NjA0NA=="}, "originalCommit": {"oid": "e2c5d2a3dac6755f5e6307c45afc1b52b9b4fb76"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTU1OTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/Persistable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMToxNTowMFrOHeKvTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDoyMzo0NVrOHevFQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5NTI3Ng==", "bodyText": "Should we change the name as readLast or latest or something indicating as such ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r501395276", "createdAt": "2020-10-08T01:15:00Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/Persistable.java", "diffHunk": "@@ -67,6 +67,22 @@\n   <T> @Nullable T read(Class<T> clz)\n       throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException;\n \n+\n+  /**\n+   * This API reads all the rows from the table for the latest timestamp corresponding to the Object.\n+   * @param clz The Class whose Object is desired.\n+   * @param <T> The generic type of the class\n+   * @return An instantiated Object of the class with the fields populated with the data from the latest row in the table and other\n+   *     referenced tables or null if the table does not exist yet.\n+   * @throws NoSuchMethodException If the expected setter does not exist.\n+   * @throws IllegalAccessException If the setter is not Public\n+   * @throws InvocationTargetException If invoking the setter by reflection threw an exception.\n+   * @throws InstantiationException Creating an Object of the class failed for some reason.\n+   * @throws DataAccessException Thrown by the DB layer.\n+   */\n+  <T> @Nullable List<T> readForTimestamp(Class<T> clz)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa15808f318e731ccd209843f72fc496e92839db"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk5MDcyMg==", "bodyText": "Changed it to readLatestGroup", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r501990722", "createdAt": "2020-10-08T20:23:45Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/Persistable.java", "diffHunk": "@@ -67,6 +67,22 @@\n   <T> @Nullable T read(Class<T> clz)\n       throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException;\n \n+\n+  /**\n+   * This API reads all the rows from the table for the latest timestamp corresponding to the Object.\n+   * @param clz The Class whose Object is desired.\n+   * @param <T> The generic type of the class\n+   * @return An instantiated Object of the class with the fields populated with the data from the latest row in the table and other\n+   *     referenced tables or null if the table does not exist yet.\n+   * @throws NoSuchMethodException If the expected setter does not exist.\n+   * @throws IllegalAccessException If the setter is not Public\n+   * @throws InvocationTargetException If invoking the setter by reflection threw an exception.\n+   * @throws InstantiationException Creating an Object of the class failed for some reason.\n+   * @throws DataAccessException Thrown by the DB layer.\n+   */\n+  <T> @Nullable List<T> readForTimestamp(Class<T> clz)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM5NTI3Ng=="}, "originalCommit": {"oid": "aa15808f318e731ccd209843f72fc496e92839db"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzgzMjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/core/Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyMTo0NFrOHfY9JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNToxMDoyN1rOHfdSXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3Njc3Mw==", "bodyText": "Can you create an issue to add this new URL to the readme with some documentation ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502676773", "createdAt": "2020-10-09T21:21:44Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/core/Util.java", "diffHunk": "@@ -27,6 +27,7 @@\n   private static final Logger LOG = LogManager.getLogger(Util.class);\n   public static final String METRICS_QUERY_URL = \"/_opendistro/_performanceanalyzer/metrics\";\n   public static final String RCA_QUERY_URL = \"/_opendistro/_performanceanalyzer/rca\";\n+  public static final String ACTIONS_QUERY_URL = \"/_opendistro/_performanceanalyzer/actions\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0Nzc0MQ==", "bodyText": "Added the Documentation.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502747741", "createdAt": "2020-10-10T05:10:27Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/core/Util.java", "diffHunk": "@@ -27,6 +27,7 @@\n   private static final Logger LOG = LogManager.getLogger(Util.class);\n   public static final String METRICS_QUERY_URL = \"/_opendistro/_performanceanalyzer/metrics\";\n   public static final String RCA_QUERY_URL = \"/_opendistro/_performanceanalyzer/rca\";\n+  public static final String ACTIONS_QUERY_URL = \"/_opendistro/_performanceanalyzer/actions\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3Njc3Mw=="}, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg0NDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMToyNjo0NlrOHfZD_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNToxMDozN1rOHfdSeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3ODUyNQ==", "bodyText": "I am thinking if we should just keep it simple and join them with comma as delimiter ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502678525", "createdAt": "2020-10-09T21:26:46Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistor.java", "diffHunk": "@@ -41,33 +42,35 @@ public PublisherEventsPersistor(final Persistable persistable) {\n         this.persistable = persistable;\n     }\n \n-    public void persistAction(final Action action) {\n+    public void persistAction(final List<Action> actionsPublished) {\n         long timestamp = Instant.now().toEpochMilli();\n-        LOG.debug(\"Action: [{}] published to persistor publisher.\", action.name());\n-        PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n-                RcaRuntimeMetrics.ACTIONS_PUBLISHED, action.name(), 1);\n-        if (action.impactedNodes() != null) {\n-            final String nodeIds = action.impactedNodes().stream()\n-                                           .map(n -> n.getNodeId().toString())\n-                                           .collect(Collectors.joining(\",\", \"{\", \"}\"));\n-            final String nodeIps = action.impactedNodes().stream()\n-                                           .map(n -> n.getHostAddress().toString())\n-                                           .collect(Collectors.joining(\",\", \"{\", \"}\"));\n-            final PersistedAction actionsSummary = new PersistedAction();\n-            actionsSummary.setActionName(action.name());\n-            actionsSummary.setNodeIds(nodeIds);\n-            actionsSummary.setNodeIps(nodeIps);\n-            actionsSummary.setActionable(action.isActionable());\n-            actionsSummary.setCoolOffPeriod(action.coolOffPeriodInMillis());\n-            actionsSummary.setMuted(action.isMuted());\n-            actionsSummary.setSummary(action.summary());\n-            actionsSummary.setTimestamp(timestamp);\n-            try {\n-                persistable.write(actionsSummary);\n-            } catch (Exception e) {\n-                LOG.error(\"Unable to write publisher events to sqlite\", e);\n-                PerformanceAnalyzerApp.ERRORS_AND_EXCEPTIONS_AGGREGATOR.updateStat(\n-                        ExceptionsAndErrors.EXCEPTION_IN_PERSIST, action.name(), 1);\n+        for (Action action : actionsPublished) {\n+            LOG.debug(\"Action: [{}] published to persistor publisher.\", action.name());\n+            PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n+                    RcaRuntimeMetrics.ACTIONS_PUBLISHED, action.name(), 1);\n+            if (action.impactedNodes() != null) {\n+                final String nodeIds = action.impactedNodes().stream()\n+                        .map(n -> n.getNodeId().toString())\n+                        .collect(Collectors.joining(\",\", \"{\", \"}\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0Nzc2OA==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502747768", "createdAt": "2020-10-10T05:10:37Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistor.java", "diffHunk": "@@ -41,33 +42,35 @@ public PublisherEventsPersistor(final Persistable persistable) {\n         this.persistable = persistable;\n     }\n \n-    public void persistAction(final Action action) {\n+    public void persistAction(final List<Action> actionsPublished) {\n         long timestamp = Instant.now().toEpochMilli();\n-        LOG.debug(\"Action: [{}] published to persistor publisher.\", action.name());\n-        PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n-                RcaRuntimeMetrics.ACTIONS_PUBLISHED, action.name(), 1);\n-        if (action.impactedNodes() != null) {\n-            final String nodeIds = action.impactedNodes().stream()\n-                                           .map(n -> n.getNodeId().toString())\n-                                           .collect(Collectors.joining(\",\", \"{\", \"}\"));\n-            final String nodeIps = action.impactedNodes().stream()\n-                                           .map(n -> n.getHostAddress().toString())\n-                                           .collect(Collectors.joining(\",\", \"{\", \"}\"));\n-            final PersistedAction actionsSummary = new PersistedAction();\n-            actionsSummary.setActionName(action.name());\n-            actionsSummary.setNodeIds(nodeIds);\n-            actionsSummary.setNodeIps(nodeIps);\n-            actionsSummary.setActionable(action.isActionable());\n-            actionsSummary.setCoolOffPeriod(action.coolOffPeriodInMillis());\n-            actionsSummary.setMuted(action.isMuted());\n-            actionsSummary.setSummary(action.summary());\n-            actionsSummary.setTimestamp(timestamp);\n-            try {\n-                persistable.write(actionsSummary);\n-            } catch (Exception e) {\n-                LOG.error(\"Unable to write publisher events to sqlite\", e);\n-                PerformanceAnalyzerApp.ERRORS_AND_EXCEPTIONS_AGGREGATOR.updateStat(\n-                        ExceptionsAndErrors.EXCEPTION_IN_PERSIST, action.name(), 1);\n+        for (Action action : actionsPublished) {\n+            LOG.debug(\"Action: [{}] published to persistor publisher.\", action.name());\n+            PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n+                    RcaRuntimeMetrics.ACTIONS_PUBLISHED, action.name(), 1);\n+            if (action.impactedNodes() != null) {\n+                final String nodeIds = action.impactedNodes().stream()\n+                        .map(n -> n.getNodeId().toString())\n+                        .collect(Collectors.joining(\",\", \"{\", \"}\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3ODUyNQ=="}, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg1NDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTozMDo0NVrOHfZJww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNToxMDo1OFrOHfdSmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MDAwMw==", "bodyText": "Should we call it action group ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502680003", "createdAt": "2020-10-09T21:30:45Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -260,7 +259,40 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n       // We always expect one row whether we query for the latest row or we query for a row by the rowID.\n       throw new IllegalStateException(\"Expected one row, found: '\" + recordList + \"'\");\n     }\n-    Record record = recordList.get(0);\n+    return readFields(clz, recordList.get(0), tableName);\n+  }\n+\n+  @Override\n+  public synchronized <T> @org.checkerframework.checker.nullness.qual.Nullable List<T> readLatestGroup(Class<T> clz)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MDIxMA==", "bodyText": "This API seems generic and not specific to actions. we could call it readLatestEntrySet ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502690210", "createdAt": "2020-10-09T22:14:23Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -260,7 +259,40 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n       // We always expect one row whether we query for the latest row or we query for a row by the rowID.\n       throw new IllegalStateException(\"Expected one row, found: '\" + recordList + \"'\");\n     }\n-    Record record = recordList.get(0);\n+    return readFields(clz, recordList.get(0), tableName);\n+  }\n+\n+  @Override\n+  public synchronized <T> @org.checkerframework.checker.nullness.qual.Nullable List<T> readLatestGroup(Class<T> clz)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MDAwMw=="}, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NzgwMA==", "bodyText": "Renamed it to readAllForMaxField; timeStamp in our case.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502747800", "createdAt": "2020-10-10T05:10:58Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -260,7 +259,40 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n       // We always expect one row whether we query for the latest row or we query for a row by the rowID.\n       throw new IllegalStateException(\"Expected one row, found: '\" + recordList + \"'\");\n     }\n-    Record record = recordList.get(0);\n+    return readFields(clz, recordList.get(0), tableName);\n+  }\n+\n+  @Override\n+  public synchronized <T> @org.checkerframework.checker.nullness.qual.Nullable List<T> readLatestGroup(Class<T> clz)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MDAwMw=="}, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg1OTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTozMzoyMFrOHfZNDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNToxMTozMVrOHfdSsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MDg0Ng==", "bodyText": "There is no order by desc clause. Can you explain how the sorting is happening ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502680846", "createdAt": "2020-10-09T21:33:20Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -260,7 +259,40 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n       // We always expect one row whether we query for the latest row or we query for a row by the rowID.\n       throw new IllegalStateException(\"Expected one row, found: '\" + recordList + \"'\");\n     }\n-    Record record = recordList.get(0);\n+    return readFields(clz, recordList.get(0), tableName);\n+  }\n+\n+  @Override\n+  public synchronized <T> @org.checkerframework.checker.nullness.qual.Nullable List<T> readLatestGroup(Class<T> clz)\n+          throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException {\n+    String tableName = getTableNameFromClassName(clz);\n+    Field<String> actionName = DSL.field(PersistedAction.SQL_SCHEMA_CONSTANTS.ACTION_COL_NAME, String.class);\n+    List<Record> maxTimeStampRecordList;\n+\n+    try {\n+      // Fetch the latest rows with the last timestamp.\n+      maxTimeStampRecordList = create.select().from(tableName).groupBy(actionName).fetch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MTUyOQ==", "bodyText": "+1, i didn't understand how this query is working - why is it doing a group by on actionName? where/how did it pick the latest TS value?\ncan you (for our understanding) provide the SQL counterpart for this query?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502691529", "createdAt": "2020-10-09T22:19:45Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -260,7 +259,40 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n       // We always expect one row whether we query for the latest row or we query for a row by the rowID.\n       throw new IllegalStateException(\"Expected one row, found: '\" + recordList + \"'\");\n     }\n-    Record record = recordList.get(0);\n+    return readFields(clz, recordList.get(0), tableName);\n+  }\n+\n+  @Override\n+  public synchronized <T> @org.checkerframework.checker.nullness.qual.Nullable List<T> readLatestGroup(Class<T> clz)\n+          throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException {\n+    String tableName = getTableNameFromClassName(clz);\n+    Field<String> actionName = DSL.field(PersistedAction.SQL_SCHEMA_CONSTANTS.ACTION_COL_NAME, String.class);\n+    List<Record> maxTimeStampRecordList;\n+\n+    try {\n+      // Fetch the latest rows with the last timestamp.\n+      maxTimeStampRecordList = create.select().from(tableName).groupBy(actionName).fetch();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MDg0Ng=="}, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NzgyNQ==", "bodyText": "Thanks folks. This query addition is a part of testing failure on multiple fronts.\nThere was a bug in UT which was not catching this. I was clearing the action set before adding the values to the table. The docker testing was also not catching this bug as while adding mock values I was adding the same set of actions with different timestamps. Therefore while grouping on actions it was returning the only set of the actions which happened to be the set for the last time stamp as well. It failed when I added a partial overlapping action set actions for different timestamps.\nModified the UT and updated the mock in the docker testing as well.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502747825", "createdAt": "2020-10-10T05:11:31Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -260,7 +259,40 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n       // We always expect one row whether we query for the latest row or we query for a row by the rowID.\n       throw new IllegalStateException(\"Expected one row, found: '\" + recordList + \"'\");\n     }\n-    Record record = recordList.get(0);\n+    return readFields(clz, recordList.get(0), tableName);\n+  }\n+\n+  @Override\n+  public synchronized <T> @org.checkerframework.checker.nullness.qual.Nullable List<T> readLatestGroup(Class<T> clz)\n+          throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException {\n+    String tableName = getTableNameFromClassName(clz);\n+    Field<String> actionName = DSL.field(PersistedAction.SQL_SCHEMA_CONSTANTS.ACTION_COL_NAME, String.class);\n+    List<Record> maxTimeStampRecordList;\n+\n+    try {\n+      // Fetch the latest rows with the last timestamp.\n+      maxTimeStampRecordList = create.select().from(tableName).groupBy(actionName).fetch();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MDg0Ng=="}, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg2NDg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryActionRequestHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTozNTozOFrOHfZQIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNTozODo1OVrOHfda8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MTYzMw==", "bodyText": "Is this still a todo ? We are taking care of it at persistence layer, right ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502681633", "createdAt": "2020-10-09T21:35:38Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryActionRequestHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rest;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors.StatExceptionCode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.Persistable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.security.InvalidParameterException;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.apache.logging.log4j.util.Supplier;\n+\n+public class QueryActionRequestHandler extends MetricsHandler implements HttpHandler {\n+\n+    private static final Logger LOG = LogManager.getLogger(QueryActionRequestHandler.class);\n+    private Persistable persistable;\n+    private AppContext appContext;\n+\n+    public QueryActionRequestHandler(final AppContext appContext) {\n+        this.appContext = appContext;\n+    }\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        String requestMethod = exchange.getRequestMethod();\n+\n+        if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+            LOG.debug(\"Action Query handler called.\");\n+            exchange.getResponseHeaders().set(\"Content-Type\", \"application/json\");\n+\n+            try {\n+                synchronized (this) {\n+                    String query = exchange.getRequestURI().getQuery();\n+                    handleActionRequest(exchange);\n+                }\n+            } catch (InvalidParameterException e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_BAD_REQUEST);\n+            } catch (Exception e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.toString() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_INTERNAL_ERROR);\n+            }\n+        } else {\n+            exchange.sendResponseHeaders(HttpURLConnection.HTTP_NOT_FOUND, -1);\n+        }\n+        exchange.close();\n+    }\n+\n+    private void handleActionRequest(HttpExchange exchange)\n+            throws IOException {\n+        //check if we are querying from elected master\n+        if (!validNodeRole()) {\n+            JsonObject errResponse = new JsonObject();\n+            errResponse.addProperty(\"error\", \"Node being queried is not elected master.\");\n+            sendResponse(exchange, errResponse.toString(),\n+                    HttpURLConnection.HTTP_BAD_REQUEST);\n+            return;\n+        }\n+\n+        String response = getActionData(persistable).toString();\n+        sendResponse(exchange, response, HttpURLConnection.HTTP_OK);\n+    }\n+\n+    private JsonObject getActionData(Persistable persistable) {\n+        LOG.debug(\"Action: in getActionData\");\n+        JsonObject result = new JsonObject();\n+        if (persistable != null) {\n+            try {\n+                // TODO: Read Last suggested Action Set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0NzgzNQ==", "bodyText": "Removed.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502747835", "createdAt": "2020-10-10T05:11:39Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryActionRequestHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rest;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors.StatExceptionCode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.Persistable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.security.InvalidParameterException;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.apache.logging.log4j.util.Supplier;\n+\n+public class QueryActionRequestHandler extends MetricsHandler implements HttpHandler {\n+\n+    private static final Logger LOG = LogManager.getLogger(QueryActionRequestHandler.class);\n+    private Persistable persistable;\n+    private AppContext appContext;\n+\n+    public QueryActionRequestHandler(final AppContext appContext) {\n+        this.appContext = appContext;\n+    }\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        String requestMethod = exchange.getRequestMethod();\n+\n+        if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+            LOG.debug(\"Action Query handler called.\");\n+            exchange.getResponseHeaders().set(\"Content-Type\", \"application/json\");\n+\n+            try {\n+                synchronized (this) {\n+                    String query = exchange.getRequestURI().getQuery();\n+                    handleActionRequest(exchange);\n+                }\n+            } catch (InvalidParameterException e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_BAD_REQUEST);\n+            } catch (Exception e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.toString() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_INTERNAL_ERROR);\n+            }\n+        } else {\n+            exchange.sendResponseHeaders(HttpURLConnection.HTTP_NOT_FOUND, -1);\n+        }\n+        exchange.close();\n+    }\n+\n+    private void handleActionRequest(HttpExchange exchange)\n+            throws IOException {\n+        //check if we are querying from elected master\n+        if (!validNodeRole()) {\n+            JsonObject errResponse = new JsonObject();\n+            errResponse.addProperty(\"error\", \"Node being queried is not elected master.\");\n+            sendResponse(exchange, errResponse.toString(),\n+                    HttpURLConnection.HTTP_BAD_REQUEST);\n+            return;\n+        }\n+\n+        String response = getActionData(persistable).toString();\n+        sendResponse(exchange, response, HttpURLConnection.HTTP_OK);\n+    }\n+\n+    private JsonObject getActionData(Persistable persistable) {\n+        LOG.debug(\"Action: in getActionData\");\n+        JsonObject result = new JsonObject();\n+        if (persistable != null) {\n+            try {\n+                // TODO: Read Last suggested Action Set", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MTYzMw=="}, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTkzOA==", "bodyText": "Thats right, removed.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502749938", "createdAt": "2020-10-10T05:38:59Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryActionRequestHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rest;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors.StatExceptionCode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.Persistable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.security.InvalidParameterException;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.apache.logging.log4j.util.Supplier;\n+\n+public class QueryActionRequestHandler extends MetricsHandler implements HttpHandler {\n+\n+    private static final Logger LOG = LogManager.getLogger(QueryActionRequestHandler.class);\n+    private Persistable persistable;\n+    private AppContext appContext;\n+\n+    public QueryActionRequestHandler(final AppContext appContext) {\n+        this.appContext = appContext;\n+    }\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        String requestMethod = exchange.getRequestMethod();\n+\n+        if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+            LOG.debug(\"Action Query handler called.\");\n+            exchange.getResponseHeaders().set(\"Content-Type\", \"application/json\");\n+\n+            try {\n+                synchronized (this) {\n+                    String query = exchange.getRequestURI().getQuery();\n+                    handleActionRequest(exchange);\n+                }\n+            } catch (InvalidParameterException e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_BAD_REQUEST);\n+            } catch (Exception e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.toString() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_INTERNAL_ERROR);\n+            }\n+        } else {\n+            exchange.sendResponseHeaders(HttpURLConnection.HTTP_NOT_FOUND, -1);\n+        }\n+        exchange.close();\n+    }\n+\n+    private void handleActionRequest(HttpExchange exchange)\n+            throws IOException {\n+        //check if we are querying from elected master\n+        if (!validNodeRole()) {\n+            JsonObject errResponse = new JsonObject();\n+            errResponse.addProperty(\"error\", \"Node being queried is not elected master.\");\n+            sendResponse(exchange, errResponse.toString(),\n+                    HttpURLConnection.HTTP_BAD_REQUEST);\n+            return;\n+        }\n+\n+        String response = getActionData(persistable).toString();\n+        sendResponse(exchange, response, HttpURLConnection.HTTP_OK);\n+    }\n+\n+    private JsonObject getActionData(Persistable persistable) {\n+        LOG.debug(\"Action: in getActionData\");\n+        JsonObject result = new JsonObject();\n+        if (persistable != null) {\n+            try {\n+                // TODO: Read Last suggested Action Set", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MTYzMw=="}, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzkzMjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryActionRequestHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjoyMjoyNVrOHfZ5Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNTozOTowOVrOHfdbAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MjE4Nw==", "bodyText": "This exchange.close() is also needed in the QueryRcaRequestHandler I think. Can you change it there as well?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502692187", "createdAt": "2020-10-09T22:22:25Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryActionRequestHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rest;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors.StatExceptionCode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.Persistable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.security.InvalidParameterException;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.apache.logging.log4j.util.Supplier;\n+\n+public class QueryActionRequestHandler extends MetricsHandler implements HttpHandler {\n+\n+    private static final Logger LOG = LogManager.getLogger(QueryActionRequestHandler.class);\n+    private Persistable persistable;\n+    private AppContext appContext;\n+\n+    public QueryActionRequestHandler(final AppContext appContext) {\n+        this.appContext = appContext;\n+    }\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        String requestMethod = exchange.getRequestMethod();\n+\n+        if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+            LOG.debug(\"Action Query handler called.\");\n+            exchange.getResponseHeaders().set(\"Content-Type\", \"application/json\");\n+\n+            try {\n+                synchronized (this) {\n+                    String query = exchange.getRequestURI().getQuery();\n+                    handleActionRequest(exchange);\n+                }\n+            } catch (InvalidParameterException e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_BAD_REQUEST);\n+            } catch (Exception e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.toString() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_INTERNAL_ERROR);\n+            }\n+        } else {\n+            exchange.sendResponseHeaders(HttpURLConnection.HTTP_NOT_FOUND, -1);\n+        }\n+        exchange.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0OTk1Mw==", "bodyText": "Right, I have added it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502749953", "createdAt": "2020-10-10T05:39:09Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryActionRequestHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rest;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors.StatExceptionCode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.Persistable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.security.InvalidParameterException;\n+import java.util.List;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.message.ParameterizedMessage;\n+import org.apache.logging.log4j.util.Supplier;\n+\n+public class QueryActionRequestHandler extends MetricsHandler implements HttpHandler {\n+\n+    private static final Logger LOG = LogManager.getLogger(QueryActionRequestHandler.class);\n+    private Persistable persistable;\n+    private AppContext appContext;\n+\n+    public QueryActionRequestHandler(final AppContext appContext) {\n+        this.appContext = appContext;\n+    }\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        String requestMethod = exchange.getRequestMethod();\n+\n+        if (requestMethod.equalsIgnoreCase(\"GET\")) {\n+            LOG.debug(\"Action Query handler called.\");\n+            exchange.getResponseHeaders().set(\"Content-Type\", \"application/json\");\n+\n+            try {\n+                synchronized (this) {\n+                    String query = exchange.getRequestURI().getQuery();\n+                    handleActionRequest(exchange);\n+                }\n+            } catch (InvalidParameterException e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.getMessage() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_BAD_REQUEST);\n+            } catch (Exception e) {\n+                LOG.error(\n+                        (Supplier<?>)\n+                                () ->\n+                                        new ParameterizedMessage(\n+                                                \"QueryException {} ExceptionCode: {}.\",\n+                                                e.toString(),\n+                                                StatExceptionCode.REQUEST_ERROR.toString()),\n+                        e);\n+                String response = \"{\\\"error\\\":\\\"\" + e.toString() + \"\\\"}\";\n+                sendResponse(exchange, response, HttpURLConnection.HTTP_INTERNAL_ERROR);\n+            }\n+        } else {\n+            exchange.sendResponseHeaders(HttpURLConnection.HTTP_NOT_FOUND, -1);\n+        }\n+        exchange.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5MjE4Nw=="}, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzk1NjIyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjozNToxOFrOHfaHAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNToyMDowOVrOHfdVaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5NTY4MQ==", "bodyText": "Can we check that the table itself had 4 action entries at this point with 2 different sets of timestamps?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502695681", "createdAt": "2020-10-09T22:35:18Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistorTest.java", "diffHunk": "@@ -47,23 +47,68 @@ public void cleanup() throws IOException {\n     }\n \n     @Test\n-    public void actionPublished() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {\n-        final MockAction mockAction = new MockAction();\n-\n-        publisherEventsPersistor.persistAction(mockAction);\n-\n-        PersistedAction actionsSummary = persistable.read(PersistedAction.class);\n+    public void actionPublished() throws Exception {\n+        final MockAction mockAction1 = new MockAction(\"MockAction1\", new ArrayList<String>() {\n+            {\n+                add(\"1\");\n+                add(\"11\");\n+            }});\n+        final MockAction mockAction2 = new MockAction(\"MockAction2\", new ArrayList<String>() {\n+            {\n+                add(\"2\");\n+                add(\"33\");\n+            }});\n+        List<Action> mockActions = new ArrayList<>();\n+        mockActions.add(mockAction1);\n+        mockActions.add(mockAction2);\n+        mockActions.clear();\n+\n+        publisherEventsPersistor.persistAction(mockActions);\n+\n+        final MockAction mockAction3 = new MockAction(\"MockAction3\",new ArrayList<String>() {\n+            {\n+                add(\"3\");\n+                add(\"33\");\n+            }});\n+        final MockAction mockAction4 = new MockAction(\"MockAction4\",new ArrayList<String>() {\n+            {\n+                add(\"4\");\n+                add(\"44\");\n+            }});\n+        mockActions.add(mockAction3);\n+        mockActions.add(mockAction4);\n+\n+        publisherEventsPersistor.persistAction(mockActions);\n+\n+        WaitFor.waitFor(() -> persistable.readLatestGroup(PersistedAction.class).size() == 2, 5,\n+                TimeUnit.SECONDS);\n+        List<PersistedAction> actionsSummary = persistable.readLatestGroup(PersistedAction.class);\n         Assert.assertNotNull(actionsSummary);\n-        Assert.assertEquals(actionsSummary.getActionName(), mockAction.name());\n-        Assert.assertEquals(actionsSummary.getNodeIds(), \"{1,2}\");\n-        Assert.assertEquals(actionsSummary.getNodeIps(), \"{1.1.1.1,2.2.2.2}\");\n-        Assert.assertEquals(actionsSummary.isActionable(), mockAction.isActionable());\n-        Assert.assertEquals(actionsSummary.getCoolOffPeriod(), mockAction.coolOffPeriodInMillis());\n-        Assert.assertEquals(actionsSummary.isMuted(), mockAction.isMuted());\n-        Assert.assertEquals(actionsSummary.getSummary(), mockAction.summary());\n+        Assert.assertEquals(actionsSummary.size(), 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0ODUyMQ==", "bodyText": "Thats right, Vigya, the bug in the UT was I was clearing the actionSummary before it was writing in the table. Updated the UT.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502748521", "createdAt": "2020-10-10T05:20:09Z", "author": {"login": "aditjind"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistorTest.java", "diffHunk": "@@ -47,23 +47,68 @@ public void cleanup() throws IOException {\n     }\n \n     @Test\n-    public void actionPublished() throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException {\n-        final MockAction mockAction = new MockAction();\n-\n-        publisherEventsPersistor.persistAction(mockAction);\n-\n-        PersistedAction actionsSummary = persistable.read(PersistedAction.class);\n+    public void actionPublished() throws Exception {\n+        final MockAction mockAction1 = new MockAction(\"MockAction1\", new ArrayList<String>() {\n+            {\n+                add(\"1\");\n+                add(\"11\");\n+            }});\n+        final MockAction mockAction2 = new MockAction(\"MockAction2\", new ArrayList<String>() {\n+            {\n+                add(\"2\");\n+                add(\"33\");\n+            }});\n+        List<Action> mockActions = new ArrayList<>();\n+        mockActions.add(mockAction1);\n+        mockActions.add(mockAction2);\n+        mockActions.clear();\n+\n+        publisherEventsPersistor.persistAction(mockActions);\n+\n+        final MockAction mockAction3 = new MockAction(\"MockAction3\",new ArrayList<String>() {\n+            {\n+                add(\"3\");\n+                add(\"33\");\n+            }});\n+        final MockAction mockAction4 = new MockAction(\"MockAction4\",new ArrayList<String>() {\n+            {\n+                add(\"4\");\n+                add(\"44\");\n+            }});\n+        mockActions.add(mockAction3);\n+        mockActions.add(mockAction4);\n+\n+        publisherEventsPersistor.persistAction(mockActions);\n+\n+        WaitFor.waitFor(() -> persistable.readLatestGroup(PersistedAction.class).size() == 2, 5,\n+                TimeUnit.SECONDS);\n+        List<PersistedAction> actionsSummary = persistable.readLatestGroup(PersistedAction.class);\n         Assert.assertNotNull(actionsSummary);\n-        Assert.assertEquals(actionsSummary.getActionName(), mockAction.name());\n-        Assert.assertEquals(actionsSummary.getNodeIds(), \"{1,2}\");\n-        Assert.assertEquals(actionsSummary.getNodeIps(), \"{1.1.1.1,2.2.2.2}\");\n-        Assert.assertEquals(actionsSummary.isActionable(), mockAction.isActionable());\n-        Assert.assertEquals(actionsSummary.getCoolOffPeriod(), mockAction.coolOffPeriodInMillis());\n-        Assert.assertEquals(actionsSummary.isMuted(), mockAction.isMuted());\n-        Assert.assertEquals(actionsSummary.getSummary(), mockAction.summary());\n+        Assert.assertEquals(actionsSummary.size(), 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY5NTY4MQ=="}, "originalCommit": {"oid": "d062b112b1e976dc872b385f5a43a78b20539e47"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDM4Mjg0OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMToyNDozOFrOHfsb1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo1MTowNVrOHgOaPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk5NTkyNg==", "bodyText": "Minor: Can you pretty-format the action body here to make it more readable in markdown?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502995926", "createdAt": "2020-10-12T01:24:38Z", "author": {"login": "vigyasharma"}, "path": "README.md", "diffHunk": "@@ -124,6 +124,25 @@ In order to get the temperature of a particular node, we can use:\n \n `curl \"localhost:9600/_opendistro/_performanceanalyzer/rca?name=AllTemperatureDimensions&local=true\"`\n \n+## Actions API\n+This API provides the last suggested action set via the Decision Maker framework. All the suggested action sets are persisted in the SQL tables. This API provides the action set which was published with the latest timestamp.\n+\n+\n+### SAMPLE REQUEST\n+\n+GET `_opendistro/_performanceanalyzer/actions`\n+\n+The sample response from above api\n+\n+```\n+{\n+    \"LastSuggestedActionSet\": \"[{\\\"nodeIps\\\":\\\"{1.1.1.1,2.2.2.2}\\\",\\\"muted\\\":false,\\\"actionName\\\":\\\"M1\\\",\\\"timestamp\\\":1602190468123,\\\"nodeIds\\\":\\\"{1,2}\\\",\\\"summary\\\":\\\"MockSummary\\\",\\\"actionable\\\":false,\\\"coolOffPeriod\\\":0},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09657b2794ffbb6e33843a2ccc05b384fba80e0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MjU3Mw==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r503552573", "createdAt": "2020-10-12T21:51:05Z", "author": {"login": "aditjind"}, "path": "README.md", "diffHunk": "@@ -124,6 +124,25 @@ In order to get the temperature of a particular node, we can use:\n \n `curl \"localhost:9600/_opendistro/_performanceanalyzer/rca?name=AllTemperatureDimensions&local=true\"`\n \n+## Actions API\n+This API provides the last suggested action set via the Decision Maker framework. All the suggested action sets are persisted in the SQL tables. This API provides the action set which was published with the latest timestamp.\n+\n+\n+### SAMPLE REQUEST\n+\n+GET `_opendistro/_performanceanalyzer/actions`\n+\n+The sample response from above api\n+\n+```\n+{\n+    \"LastSuggestedActionSet\": \"[{\\\"nodeIps\\\":\\\"{1.1.1.1,2.2.2.2}\\\",\\\"muted\\\":false,\\\"actionName\\\":\\\"M1\\\",\\\"timestamp\\\":1602190468123,\\\"nodeIds\\\":\\\"{1,2}\\\",\\\"summary\\\":\\\"MockSummary\\\",\\\"actionable\\\":false,\\\"coolOffPeriod\\\":0},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk5NTkyNg=="}, "originalCommit": {"oid": "f09657b2794ffbb6e33843a2ccc05b384fba80e0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDM4NzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMToyODoxMVrOHfseWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo1NDozNlrOHgOfWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk5NjU3MA==", "bodyText": "Since you are trying to keep this fn generic (not specific to latest timestamp), this variable should also not be timestamp specific. Maybe something on the lines of recordsWithMaxFieldValue", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502996570", "createdAt": "2020-10-12T01:28:11Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -263,15 +265,15 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n   }\n \n   @Override\n-  public synchronized <T> @org.checkerframework.checker.nullness.qual.Nullable List<T> readLatestGroup(Class<T> clz)\n+  public synchronized <T, E> @org.checkerframework.checker.nullness.qual.Nullable List<T> readAllForMaxField(Class<T> clz, Field<E> field)\n           throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException {\n     String tableName = getTableNameFromClassName(clz);\n-    Field<String> actionName = DSL.field(PersistedAction.SQL_SCHEMA_CONSTANTS.ACTION_COL_NAME, String.class);\n     List<Record> maxTimeStampRecordList;\n \n     try {\n       // Fetch the latest rows with the last timestamp.\n-      maxTimeStampRecordList = create.select().from(tableName).groupBy(actionName).fetch();\n+      maxTimeStampRecordList = create.select().from(tableName).where(DSL.field(field)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09657b2794ffbb6e33843a2ccc05b384fba80e0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk5OTI3MA==", "bodyText": "We should also test the generality by adding a UT for some other (non-timestamp) field and checking that we get all fields with max value.\nFWIW, I think it's also ok to make this function only timestamp specific and get all records with the latest timestamp value instead of a generic max-field value.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502999270", "createdAt": "2020-10-12T01:43:43Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -263,15 +265,15 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n   }\n \n   @Override\n-  public synchronized <T> @org.checkerframework.checker.nullness.qual.Nullable List<T> readLatestGroup(Class<T> clz)\n+  public synchronized <T, E> @org.checkerframework.checker.nullness.qual.Nullable List<T> readAllForMaxField(Class<T> clz, Field<E> field)\n           throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException {\n     String tableName = getTableNameFromClassName(clz);\n-    Field<String> actionName = DSL.field(PersistedAction.SQL_SCHEMA_CONSTANTS.ACTION_COL_NAME, String.class);\n     List<Record> maxTimeStampRecordList;\n \n     try {\n       // Fetch the latest rows with the last timestamp.\n-      maxTimeStampRecordList = create.select().from(tableName).groupBy(actionName).fetch();\n+      maxTimeStampRecordList = create.select().from(tableName).where(DSL.field(field)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk5NjU3MA=="}, "originalCommit": {"oid": "f09657b2794ffbb6e33843a2ccc05b384fba80e0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1Mzg4Mw==", "bodyText": "Made the API generic to address future use-cases whatsoever. Added the UTs as well.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r503553883", "createdAt": "2020-10-12T21:54:36Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -263,15 +265,15 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n   }\n \n   @Override\n-  public synchronized <T> @org.checkerframework.checker.nullness.qual.Nullable List<T> readLatestGroup(Class<T> clz)\n+  public synchronized <T, E> @org.checkerframework.checker.nullness.qual.Nullable List<T> readAllForMaxField(Class<T> clz, Field<E> field)\n           throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException {\n     String tableName = getTableNameFromClassName(clz);\n-    Field<String> actionName = DSL.field(PersistedAction.SQL_SCHEMA_CONSTANTS.ACTION_COL_NAME, String.class);\n     List<Record> maxTimeStampRecordList;\n \n     try {\n       // Fetch the latest rows with the last timestamp.\n-      maxTimeStampRecordList = create.select().from(tableName).groupBy(actionName).fetch();\n+      maxTimeStampRecordList = create.select().from(tableName).where(DSL.field(field)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk5NjU3MA=="}, "originalCommit": {"oid": "f09657b2794ffbb6e33843a2ccc05b384fba80e0"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDM5MjY3OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMTozMjoxMlrOHfshEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMTowMTo1NlrOHgR8Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk5NzI2NA==", "bodyText": "Also let's add an actual action output in this API doc instead of a mock action. The actual action is more informative and helpful, for e.g. the summary field itself is actually a json containing all the action fields for the queue and cache actions.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502997264", "createdAt": "2020-10-12T01:32:12Z", "author": {"login": "vigyasharma"}, "path": "README.md", "diffHunk": "@@ -124,6 +124,25 @@ In order to get the temperature of a particular node, we can use:\n \n `curl \"localhost:9600/_opendistro/_performanceanalyzer/rca?name=AllTemperatureDimensions&local=true\"`\n \n+## Actions API\n+This API provides the last suggested action set via the Decision Maker framework. All the suggested action sets are persisted in the SQL tables. This API provides the action set which was published with the latest timestamp.\n+\n+\n+### SAMPLE REQUEST\n+\n+GET `_opendistro/_performanceanalyzer/actions`\n+\n+The sample response from above api\n+\n+```\n+{\n+    \"LastSuggestedActionSet\": \"[{\\\"nodeIps\\\":\\\"{1.1.1.1,2.2.2.2}\\\",\\\"muted\\\":false,\\\"actionName\\\":\\\"M1\\\",\\\"timestamp\\\":1602190468123,\\\"nodeIds\\\":\\\"{1,2}\\\",\\\"summary\\\":\\\"MockSummary\\\",\\\"actionable\\\":false,\\\"coolOffPeriod\\\":0},\n+                                {\\\"nodeIps\\\":\\\"{1.1.1.1,2.2.2.2}\\\",\\\"muted\\\":false,\\\"actionName\\\":\\\"M2\\\",\\\"timestamp\\\":1602190468123,\\\"nodeIds\\\":\\\"{1,2}\\\",\\\"summary\\\":\\\"MockSummary\\\",\\\"actionable\\\":false,\\\"coolOffPeriod\\\":0}]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09657b2794ffbb6e33843a2ccc05b384fba80e0"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYxMDM4Mg==", "bodyText": "I have removed this from the README. Will do an end to end testing and update this README as a separate PR.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r503610382", "createdAt": "2020-10-13T01:01:56Z", "author": {"login": "aditjind"}, "path": "README.md", "diffHunk": "@@ -124,6 +124,25 @@ In order to get the temperature of a particular node, we can use:\n \n `curl \"localhost:9600/_opendistro/_performanceanalyzer/rca?name=AllTemperatureDimensions&local=true\"`\n \n+## Actions API\n+This API provides the last suggested action set via the Decision Maker framework. All the suggested action sets are persisted in the SQL tables. This API provides the action set which was published with the latest timestamp.\n+\n+\n+### SAMPLE REQUEST\n+\n+GET `_opendistro/_performanceanalyzer/actions`\n+\n+The sample response from above api\n+\n+```\n+{\n+    \"LastSuggestedActionSet\": \"[{\\\"nodeIps\\\":\\\"{1.1.1.1,2.2.2.2}\\\",\\\"muted\\\":false,\\\"actionName\\\":\\\"M1\\\",\\\"timestamp\\\":1602190468123,\\\"nodeIds\\\":\\\"{1,2}\\\",\\\"summary\\\":\\\"MockSummary\\\",\\\"actionable\\\":false,\\\"coolOffPeriod\\\":0},\n+                                {\\\"nodeIps\\\":\\\"{1.1.1.1,2.2.2.2}\\\",\\\"muted\\\":false,\\\"actionName\\\":\\\"M2\\\",\\\"timestamp\\\":1602190468123,\\\"nodeIds\\\":\\\"{1,2}\\\",\\\"summary\\\":\\\"MockSummary\\\",\\\"actionable\\\":false,\\\"coolOffPeriod\\\":0}]\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk5NzI2NA=="}, "originalCommit": {"oid": "f09657b2794ffbb6e33843a2ccc05b384fba80e0"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDM5OTkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMTozODoxNVrOHfslDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMTo1Mzo0NFrOHgOeKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk5ODI4Nw==", "bodyText": "For the sake of testing sql query correctness, can we also add some out of order actions, i.e. publish another set of actions with an older timestamp after this one. We don't expect the publisher code to do that right now, but since these are unit tests, it will validate the sql query against any unexpected future changes.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r502998287", "createdAt": "2020-10-12T01:38:15Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistorTest.java", "diffHunk": "@@ -78,20 +78,23 @@ public void actionPublished() throws Exception {\n         mockActions.add(mockAction3);\n         mockActions.add(mockAction4);\n \n-        publisherEventsPersistor.persistAction(mockActions);\n+        publisherEventsPersistor.persistAction(mockActions, 987654321);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f09657b2794ffbb6e33843a2ccc05b384fba80e0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU1MzU3Ng==", "bodyText": "Added UTs where we have entries with earlier timestamp with an increasing ID. Added the UTs to test the SQL query against a field other than the timestamp.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r503553576", "createdAt": "2020-10-12T21:53:44Z", "author": {"login": "aditjind"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistorTest.java", "diffHunk": "@@ -78,20 +78,23 @@ public void actionPublished() throws Exception {\n         mockActions.add(mockAction3);\n         mockActions.add(mockAction4);\n \n-        publisherEventsPersistor.persistAction(mockActions);\n+        publisherEventsPersistor.persistAction(mockActions, 987654321);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk5ODI4Nw=="}, "originalCommit": {"oid": "f09657b2794ffbb6e33843a2ccc05b384fba80e0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODc0NjM4OnYy", "diffSide": "LEFT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjowNzoxOFrOHg7L8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzo1MTo0NFrOHg9XwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4NjE5Mg==", "bodyText": "I don't have a strong opinion either way - i think the old format was also ok.\nBut this format is expected by multiple integ tests. Are they passing with your changes? Please confirm and update any breaking ITs.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r504286192", "createdAt": "2020-10-13T22:07:18Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistor.java", "diffHunk": "@@ -41,33 +41,34 @@ public PublisherEventsPersistor(final Persistable persistable) {\n         this.persistable = persistable;\n     }\n \n-    public void persistAction(final Action action) {\n-        long timestamp = Instant.now().toEpochMilli();\n-        LOG.debug(\"Action: [{}] published to persistor publisher.\", action.name());\n-        PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n-                RcaRuntimeMetrics.ACTIONS_PUBLISHED, action.name(), 1);\n-        if (action.impactedNodes() != null) {\n-            final String nodeIds = action.impactedNodes().stream()\n-                                           .map(n -> n.getNodeId().toString())\n-                                           .collect(Collectors.joining(\",\", \"{\", \"}\"));\n-            final String nodeIps = action.impactedNodes().stream()\n-                                           .map(n -> n.getHostAddress().toString())\n-                                           .collect(Collectors.joining(\",\", \"{\", \"}\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7f1e3d84c6d6460293ade9ad147f27c756601b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMTk4NA==", "bodyText": "While I agree the new format might be simpler. But reverting to old format to reduce the effort of modifying ITs and push it to prod for release purposes. Updated the local build pass message in the PR description.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r504321984", "createdAt": "2020-10-13T23:51:44Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistor.java", "diffHunk": "@@ -41,33 +41,34 @@ public PublisherEventsPersistor(final Persistable persistable) {\n         this.persistable = persistable;\n     }\n \n-    public void persistAction(final Action action) {\n-        long timestamp = Instant.now().toEpochMilli();\n-        LOG.debug(\"Action: [{}] published to persistor publisher.\", action.name());\n-        PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n-                RcaRuntimeMetrics.ACTIONS_PUBLISHED, action.name(), 1);\n-        if (action.impactedNodes() != null) {\n-            final String nodeIds = action.impactedNodes().stream()\n-                                           .map(n -> n.getNodeId().toString())\n-                                           .collect(Collectors.joining(\",\", \"{\", \"}\"));\n-            final String nodeIps = action.impactedNodes().stream()\n-                                           .map(n -> n.getHostAddress().toString())\n-                                           .collect(Collectors.joining(\",\", \"{\", \"}\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4NjE5Mg=="}, "originalCommit": {"oid": "2b7f1e3d84c6d6460293ade9ad147f27c756601b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODk5NjY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMzo1NzozOVrOHg9e3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzo1NjoxOFrOHhBSHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMzgwNQ==", "bodyText": "I am unsure if we want to write an error log with full stack trace here because jooq can throw DataAccessException if a user queries for a table that does not exist.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r504323805", "createdAt": "2020-10-13T23:57:39Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -260,7 +261,40 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n       // We always expect one row whether we query for the latest row or we query for a row by the rowID.\n       throw new IllegalStateException(\"Expected one row, found: '\" + recordList + \"'\");\n     }\n-    Record record = recordList.get(0);\n+    return readFields(clz, recordList.get(0), tableName);\n+  }\n+\n+  @Override\n+  public synchronized <T, E> @org.checkerframework.checker.nullness.qual.Nullable List<T> readAllForMaxField(Class<T> clz, Field<E> field)\n+          throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException {\n+    String tableName = getTableNameFromClassName(clz);\n+    List<Record> recordsWithMaxFieldValue;\n+\n+    try {\n+      // Fetch the latest rows with the last timestamp.\n+      recordsWithMaxFieldValue = create.select().from(tableName).where(DSL.field(field)\n+              .eq(create.select(max(field)).from(tableName))).fetch();\n+    } catch (DataAccessException dex) {\n+      LOG.error(\"Error querying table {}\", tableName, dex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9aeab5bb3c1d7ebdb09dddc5e66c56c4f9d4dab"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4NjA3OQ==", "bodyText": "I have populated the behavior of the API when the Persisted Actions table is not present in the rca.sqllite file in the PR description. We have an empty list of actions for the key LastSuggestedActionSet. I think this empty list should suffice for the purpose of this API when no table is present.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r504386079", "createdAt": "2020-10-14T03:56:18Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -260,7 +261,40 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n       // We always expect one row whether we query for the latest row or we query for a row by the rowID.\n       throw new IllegalStateException(\"Expected one row, found: '\" + recordList + \"'\");\n     }\n-    Record record = recordList.get(0);\n+    return readFields(clz, recordList.get(0), tableName);\n+  }\n+\n+  @Override\n+  public synchronized <T, E> @org.checkerframework.checker.nullness.qual.Nullable List<T> readAllForMaxField(Class<T> clz, Field<E> field)\n+          throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException {\n+    String tableName = getTableNameFromClassName(clz);\n+    List<Record> recordsWithMaxFieldValue;\n+\n+    try {\n+      // Fetch the latest rows with the last timestamp.\n+      recordsWithMaxFieldValue = create.select().from(tableName).where(DSL.field(field)\n+              .eq(create.select(max(field)).from(tableName))).fetch();\n+    } catch (DataAccessException dex) {\n+      LOG.error(\"Error querying table {}\", tableName, dex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyMzgwNQ=="}, "originalCommit": {"oid": "f9aeab5bb3c1d7ebdb09dddc5e66c56c4f9d4dab"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1OTAwMzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/Persistable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMDowMDo1NVrOHg9iuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMzo0MDo1NFrOHhBCqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyNDc5Mw==", "bodyText": "This method is called from the RestHandler class. For that class to construct a Field and send it over, couples the request handler with the schema on the persistence layer, moreover with jooq, the library. Can we have them specify the name of the field and we convert the name to Field in the implementer of this method ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r504324793", "createdAt": "2020-10-14T00:00:55Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/Persistable.java", "diffHunk": "@@ -67,6 +68,22 @@\n   <T> @Nullable T read(Class<T> clz)\n       throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException;\n \n+\n+  /**\n+   * This API reads all the rows from the table corresponding to the maximum value in the field Object.\n+   * @param clz The Class whose Object is desired.\n+   * @param <T> The generic type of the class.\n+   * @param field DSL field for which the maximum value is desired.\n+   * @return A List of instantiated Objects of the class with the fields populated with the data from the corresponding rows in the table.\n+   * @throws NoSuchMethodException If the expected setter does not exist.\n+   * @throws IllegalAccessException If the setter is not Public\n+   * @throws InvocationTargetException If invoking the setter by reflection threw an exception.\n+   * @throws InstantiationException Creating an Object of the class failed for some reason.\n+   * @throws DataAccessException Thrown by the DB layer.\n+   */\n+  <T, E> @Nullable List<T> readAllForMaxField(Class<T> clz, Field<E> field)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9aeab5bb3c1d7ebdb09dddc5e66c56c4f9d4dab"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4MjEyMQ==", "bodyText": "I have separated the Handler and the persistence layer and removed the dependency of Jooq from the Request Handler.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/455#discussion_r504382121", "createdAt": "2020-10-14T03:40:54Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/Persistable.java", "diffHunk": "@@ -67,6 +68,22 @@\n   <T> @Nullable T read(Class<T> clz)\n       throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, DataAccessException;\n \n+\n+  /**\n+   * This API reads all the rows from the table corresponding to the maximum value in the field Object.\n+   * @param clz The Class whose Object is desired.\n+   * @param <T> The generic type of the class.\n+   * @param field DSL field for which the maximum value is desired.\n+   * @return A List of instantiated Objects of the class with the fields populated with the data from the corresponding rows in the table.\n+   * @throws NoSuchMethodException If the expected setter does not exist.\n+   * @throws IllegalAccessException If the setter is not Public\n+   * @throws InvocationTargetException If invoking the setter by reflection threw an exception.\n+   * @throws InstantiationException Creating an Object of the class failed for some reason.\n+   * @throws DataAccessException Thrown by the DB layer.\n+   */\n+  <T, E> @Nullable List<T> readAllForMaxField(Class<T> clz, Field<E> field)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMyNDc5Mw=="}, "originalCommit": {"oid": "f9aeab5bb3c1d7ebdb09dddc5e66c56c4f9d4dab"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2431, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}