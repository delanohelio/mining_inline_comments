{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MzkzOTA2", "number": 108, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1MDozOFrODh-irg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo1MDo0MlrODjN6Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU0Mjg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1MDozOFrOFtBB1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozMjozOFrOFuQWVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NzA5NQ==", "bodyText": "Why do we need 5 threads?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r382747095", "createdAt": "2020-02-21T18:50:38Z", "author": {"login": "ditac"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "diffHunk": "@@ -42,36 +41,30 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.listeners.IListener;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ReaderMetricsProcessor;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rest.QueryMetricsRequestHandler;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.ThreadProvider;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.exceptions.PAThreadException;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.security.KeyStore;\n-import java.security.Security;\n-import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n-import javax.net.ssl.HostnameVerifier;\n-import javax.net.ssl.HttpsURLConnection;\n-import javax.net.ssl.KeyManagerFactory;\n-import javax.net.ssl.SSLContext;\n-import javax.net.ssl.SSLSession;\n-import javax.net.ssl.TrustManager;\n-import javax.net.ssl.X509TrustManager;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.bouncycastle.jce.provider.BouncyCastleProvider;\n \n public class PerformanceAnalyzerApp {\n+\n   private static final int WEBSERVICE_DEFAULT_PORT = 9600;\n   private static final String WEBSERVICE_PORT_CONF_NAME = \"webservice-listener-port\";\n   private static final String WEBSERVICE_BIND_HOST_NAME = \"webservice-bind-host\";\n   // Use system default for max backlog.\n   private static final int INCOMING_QUEUE_LENGTH = 1;\n+  // current number of threads spawned through the thread provider.\n+  private static final int EXCEPTION_QUEUE_LENGTH = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NjY3Ng==", "bodyText": "I've changed the queue size to one, and with ArrayBlockingQueue, we block till we process the exception.\nThe previous idea was to poll on the queue with a specific periodicity, and since we were spawning 5 threads(1 reader thread, 1 rca controller, 2 server threads) the queue length of 5 would let all of them to write to the queue without blocking within one polling interval of the exception queue.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384046676", "createdAt": "2020-02-25T18:32:38Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "diffHunk": "@@ -42,36 +41,30 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.listeners.IListener;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ReaderMetricsProcessor;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rest.QueryMetricsRequestHandler;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.ThreadProvider;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.exceptions.PAThreadException;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.security.KeyStore;\n-import java.security.Security;\n-import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n-import javax.net.ssl.HostnameVerifier;\n-import javax.net.ssl.HttpsURLConnection;\n-import javax.net.ssl.KeyManagerFactory;\n-import javax.net.ssl.SSLContext;\n-import javax.net.ssl.SSLSession;\n-import javax.net.ssl.TrustManager;\n-import javax.net.ssl.X509TrustManager;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.bouncycastle.jce.provider.BouncyCastleProvider;\n \n public class PerformanceAnalyzerApp {\n+\n   private static final int WEBSERVICE_DEFAULT_PORT = 9600;\n   private static final String WEBSERVICE_PORT_CONF_NAME = \"webservice-listener-port\";\n   private static final String WEBSERVICE_BIND_HOST_NAME = \"webservice-bind-host\";\n   // Use system default for max backlog.\n   private static final int INCOMING_QUEUE_LENGTH = 1;\n+  // current number of threads spawned through the thread provider.\n+  private static final int EXCEPTION_QUEUE_LENGTH = 5;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NzA5NQ=="}, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU0NDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1MTowOFrOFtBCwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozMzozNlrOFuQYQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NzMzMA==", "bodyText": "Why are we doing whitespace changes again? Can we add this to checkstyle?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r382747330", "createdAt": "2020-02-21T18:51:08Z", "author": {"login": "ditac"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "diffHunk": "@@ -84,244 +77,147 @@\n   private static Thread rcaNetServerThread = null;\n \n   public static final SampleAggregator RCA_GRAPH_METRICS_AGGREGATOR =\n-          new SampleAggregator(RcaGraphMetrics.values());\n-  public  static final SampleAggregator RCA_RUNTIME_METRICS_AGGREGATOR =\n-          new SampleAggregator(RcaRuntimeMetrics.values());\n+      new SampleAggregator(RcaGraphMetrics.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NzE3MQ==", "bodyText": "Looks like it was previously not (strictly) formatted according to the google style guide. Now it adheres to the style guide correctly which is enforced by the formatter in intellij. The continuation indent parameter which controls this is defined as follows:\n\n\"When line-wrapping, each line after the first (each continuation line) is indented at least +4 from the original line. When there are multiple continuation lines, indentation may be varied beyond +4 as desired.\"\n\ninstead of varying the space beyond +4, it is strictly setting it to exactly +4 now.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384047171", "createdAt": "2020-02-25T18:33:36Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "diffHunk": "@@ -84,244 +77,147 @@\n   private static Thread rcaNetServerThread = null;\n \n   public static final SampleAggregator RCA_GRAPH_METRICS_AGGREGATOR =\n-          new SampleAggregator(RcaGraphMetrics.values());\n-  public  static final SampleAggregator RCA_RUNTIME_METRICS_AGGREGATOR =\n-          new SampleAggregator(RcaRuntimeMetrics.values());\n+      new SampleAggregator(RcaGraphMetrics.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NzMzMA=="}, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU1Mzk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/tasks/ThreadProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1NDoxOFrOFtBIyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozNTo1NFrOFuQdSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0ODg3Mw==", "bodyText": "This is not threadsafe. You can just initialize this in a static block or pass this object into other constructors. Lets not use a singleton.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r382748873", "createdAt": "2020-02-21T18:54:18Z", "author": {"login": "ditac"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/tasks/ThreadProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.exceptions.PAThreadException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ThreadProvider {\n+\n+  private static final Logger LOG = LogManager.getLogger(ThreadProvider.class);\n+  private static volatile ThreadProvider _instance = null;\n+  private int numberOfThreadsSpunUp = 0;\n+\n+  /**\n+   * Empty private default ctor to prevent instantiation.\n+   */\n+  private ThreadProvider() {\n+  }\n+\n+  public static ThreadProvider instance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0ODQ1OA==", "bodyText": "Got rid of the singleton. It is initialized once and passed around now.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384048458", "createdAt": "2020-02-25T18:35:54Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/tasks/ThreadProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.exceptions.PAThreadException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ThreadProvider {\n+\n+  private static final Logger LOG = LogManager.getLogger(ThreadProvider.class);\n+  private static volatile ThreadProvider _instance = null;\n+  private int numberOfThreadsSpunUp = 0;\n+\n+  /**\n+   * Empty private default ctor to prevent instantiation.\n+   */\n+  private ThreadProvider() {\n+  }\n+\n+  public static ThreadProvider instance() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0ODg3Mw=="}, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU1NTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/tasks/ThreadProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1NDo0MFrOFtBJfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozNTo1OVrOFuQdgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0OTA1Mg==", "bodyText": "Not threasafe.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r382749052", "createdAt": "2020-02-21T18:54:40Z", "author": {"login": "ditac"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/tasks/ThreadProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.exceptions.PAThreadException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ThreadProvider {\n+\n+  private static final Logger LOG = LogManager.getLogger(ThreadProvider.class);\n+  private static volatile ThreadProvider _instance = null;\n+  private int numberOfThreadsSpunUp = 0;\n+\n+  /**\n+   * Empty private default ctor to prevent instantiation.\n+   */\n+  private ThreadProvider() {\n+  }\n+\n+  public static ThreadProvider instance() {\n+    if (_instance != null) {\n+      return _instance;\n+    }\n+\n+    _instance = new ThreadProvider();\n+    return _instance;\n+  }\n+\n+  public Thread createThreadForRunnable(final Runnable innerRunnable, final String name) {\n+    Thread t = new Thread(() -> {\n+      try {\n+        innerRunnable.run();\n+      } catch (Throwable innerThrowable) {\n+        if (!PerformanceAnalyzerApp.exceptionQueue.offer(new PAThreadException(name,\n+            innerThrowable))) {\n+          LOG.error(\"Unable to write to exception queue. Dropping exception: {}\",\n+              innerThrowable.getMessage(), innerThrowable.getCause());\n+        }\n+      }\n+    });\n+\n+    LOG.info(\"Spun up a thread with name: {}\", name);\n+    this.numberOfThreadsSpunUp++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0ODUxNA==", "bodyText": "got rid of the unused variable. Instead, made this method synchronized and emitting a metric from it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384048514", "createdAt": "2020-02-25T18:35:59Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/tasks/ThreadProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.exceptions.PAThreadException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ThreadProvider {\n+\n+  private static final Logger LOG = LogManager.getLogger(ThreadProvider.class);\n+  private static volatile ThreadProvider _instance = null;\n+  private int numberOfThreadsSpunUp = 0;\n+\n+  /**\n+   * Empty private default ctor to prevent instantiation.\n+   */\n+  private ThreadProvider() {\n+  }\n+\n+  public static ThreadProvider instance() {\n+    if (_instance != null) {\n+      return _instance;\n+    }\n+\n+    _instance = new ThreadProvider();\n+    return _instance;\n+  }\n+\n+  public Thread createThreadForRunnable(final Runnable innerRunnable, final String name) {\n+    Thread t = new Thread(() -> {\n+      try {\n+        innerRunnable.run();\n+      } catch (Throwable innerThrowable) {\n+        if (!PerformanceAnalyzerApp.exceptionQueue.offer(new PAThreadException(name,\n+            innerThrowable))) {\n+          LOG.error(\"Unable to write to exception queue. Dropping exception: {}\",\n+              innerThrowable.getMessage(), innerThrowable.getCause());\n+        }\n+      }\n+    });\n+\n+    LOG.info(\"Spun up a thread with name: {}\", name);\n+    this.numberOfThreadsSpunUp++;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0OTA1Mg=="}, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU2ODcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1OToyOFrOFtBSEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozMzo0NVrOFuQYiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MTI0OQ==", "bodyText": "We should just poll on the queue, so that we handle errors as they are generated.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r382751249", "createdAt": "2020-02-21T18:59:28Z", "author": {"login": "ditac"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "diffHunk": "@@ -84,244 +77,147 @@\n   private static Thread rcaNetServerThread = null;\n \n   public static final SampleAggregator RCA_GRAPH_METRICS_AGGREGATOR =\n-          new SampleAggregator(RcaGraphMetrics.values());\n-  public  static final SampleAggregator RCA_RUNTIME_METRICS_AGGREGATOR =\n-          new SampleAggregator(RcaRuntimeMetrics.values());\n+      new SampleAggregator(RcaGraphMetrics.values());\n+  public static final SampleAggregator RCA_RUNTIME_METRICS_AGGREGATOR =\n+      new SampleAggregator(RcaRuntimeMetrics.values());\n \n   private static final IListener MISBEHAVING_NODES_LISTENER =\n-          new MisbehavingGraphOperateMethodListener();\n+      new MisbehavingGraphOperateMethodListener();\n   public static final SampleAggregator ERRORS_AND_EXCEPTIONS_AGGREGATOR =\n-          new SampleAggregator(MISBEHAVING_NODES_LISTENER.getMeasurementsListenedTo(),\n-                  MISBEHAVING_NODES_LISTENER,\n-                  ExceptionsAndErrors.values());\n+      new SampleAggregator(MISBEHAVING_NODES_LISTENER.getMeasurementsListenedTo(),\n+          MISBEHAVING_NODES_LISTENER,\n+          ExceptionsAndErrors.values());\n \n   public static final SampleAggregator JVM_METRICS_AGGREGATOR =\n-          new SampleAggregator(JvmMetrics.values());\n+      new SampleAggregator(JvmMetrics.values());\n \n   public static final RcaStatsReporter RCA_STATS_REPORTER =\n-          new RcaStatsReporter(Arrays.asList(RCA_GRAPH_METRICS_AGGREGATOR,\n-                  RCA_RUNTIME_METRICS_AGGREGATOR, ERRORS_AND_EXCEPTIONS_AGGREGATOR,\n-                  JVM_METRICS_AGGREGATOR));\n+      new RcaStatsReporter(Arrays.asList(RCA_GRAPH_METRICS_AGGREGATOR,\n+          RCA_RUNTIME_METRICS_AGGREGATOR, ERRORS_AND_EXCEPTIONS_AGGREGATOR,\n+          JVM_METRICS_AGGREGATOR));\n   public static final PeriodicSamplers PERIODIC_SAMPLERS =\n-          new PeriodicSamplers(JVM_METRICS_AGGREGATOR, AllJvmSamplers.getJvmSamplers(),\n-                  (MetricsConfiguration.CONFIG_MAP.get(StatsCollector.class).samplingInterval) / 2,\n-                  TimeUnit.MILLISECONDS);\n+      new PeriodicSamplers(JVM_METRICS_AGGREGATOR, AllJvmSamplers.getJvmSamplers(),\n+          (MetricsConfiguration.CONFIG_MAP.get(StatsCollector.class).samplingInterval) / 2,\n+          TimeUnit.MILLISECONDS);\n+  public static final BlockingQueue<PAThreadException> exceptionQueue =\n+      new LinkedBlockingQueue<>(EXCEPTION_QUEUE_LENGTH);\n+  private static final int ERROR_HANDLING_POLLING_INTERVAL_IN_MS = 5000;\n \n   public static void main(String[] args) throws Exception {\n-    // Initialize settings before creating threads.\n     PluginSettings settings = PluginSettings.instance();\n-\n-    StatsCollector.STATS_TYPE = \"agent-stats-metadata\";\n-    METRIC_COLLECTOR_EXECUTOR.addScheduledMetricCollector(StatsCollector.instance());\n-    StatsCollector.instance().addDefaultExceptionCode(StatExceptionCode.READER_RESTART_PROCESSING);\n-    METRIC_COLLECTOR_EXECUTOR.setEnabled(true);\n-    METRIC_COLLECTOR_EXECUTOR.start();\n-\n-    Thread readerThread =\n-        new Thread(\n-            () -> {\n-              while (true) {\n-                try {\n-                  ReaderMetricsProcessor mp =\n-                      new ReaderMetricsProcessor(settings.getMetricsLocation(), true);\n-                  ReaderMetricsProcessor.setCurrentInstance(mp);\n-                  mp.run();\n-                } catch (Throwable e) {\n-                  if (TroubleshootingConfig.getEnableDevAssert()) {\n-                    break;\n-                  }\n-                  LOG.error(\n-                      \"Error in ReaderMetricsProcessor...restarting, ExceptionCode: {}\",\n-                      StatExceptionCode.READER_RESTART_PROCESSING.toString());\n-                  StatsCollector.instance()\n-                      .logException(StatExceptionCode.READER_RESTART_PROCESSING);\n-                }\n-              }\n-            });\n-    readerThread.start();\n-\n-    ClientServers clientServers = startServers();\n-    startRcaController(clientServers);\n+    final GRPCConnectionManager connectionManager = new GRPCConnectionManager(\n+        settings.getHttpsEnabled());\n+    final ClientServers clientServers = startServers(connectionManager);\n+    startErrorHandlingThread();\n+    startReaderThread();\n+    startGrpcServerThread(clientServers.getNetServer());\n+    startWebServerThread(clientServers.getHttpServer());\n+    startRcaTopLevelThread(clientServers, connectionManager);\n   }\n \n-  /**\n-   * Start all the servers and clients for request processing. We start two servers: - httpServer:\n-   * To handle the curl requests sent to the endpoint. This is human readable and also used by the\n-   * perftop. - gRPC server: This is how metrics, RCAs etc are transported between nodes. and a gRPC\n-   * client.\n-   *\n-   * @return gRPC client and the gRPC server and the httpServer wrapped in a class.\n-   */\n-  public static ClientServers startServers() {\n-    boolean useHttps = PluginSettings.instance().getHttpsEnabled();\n-\n-    GRPCConnectionManager connectionManager = new GRPCConnectionManager(useHttps);\n-    NetServer netServer = new NetServer(Util.RPC_PORT, 1, useHttps);\n-    NetClient netClient = new NetClient(connectionManager);\n-    MetricsRestUtil metricsRestUtil = new MetricsRestUtil();\n-\n-    netServer.setMetricsHandler(new MetricsServerHandler());\n-    startRpcServerThread(netServer);\n-    HttpServer httpServer = createInternalServer(PluginSettings.instance(), getPortNumber());\n-    httpServer.createContext(QUERY_URL, new QueryMetricsRequestHandler(netClient, metricsRestUtil));\n-\n-    return new ClientServers(httpServer, netServer, netClient);\n-  }\n-\n-  /** This starts the GRPC server in a thread of its own. */\n-  private static void startRpcServerThread(NetServer netServer) {\n-    rcaNetServerThread = new Thread(netServer);\n-    rcaNetServerThread.start();\n-  }\n-\n-  /**\n-   * This starts the necessary threads to facilitate the running of the RCA framework. This may or\n-   * may not cause the RCA to start. RCA is started only if enableRCA flag is set through POST\n-   * request, otherwise, this method just spins up the necessary threads to start RCA on demand\n-   * without requiring a process restart.\n-   *\n-   * @param clientServers The httpServer, the gRPC server and client wrapper.\n-   */\n-  private static void startRcaController(ClientServers clientServers) {\n-    boolean useHttps = PluginSettings.instance().getHttpsEnabled();\n-\n-    GRPCConnectionManager connectionManager = new GRPCConnectionManager(useHttps);\n+  private static void startRcaTopLevelThread(final ClientServers clientServers,\n+      final GRPCConnectionManager connectionManager) {\n     rcaController =\n         new RcaController(\n             netOperationsExecutor,\n             connectionManager,\n-            clientServers.getNetClient(),\n-            clientServers.getNetServer(),\n-            clientServers.getHttpServer(),\n+            clientServers,\n             Util.DATA_DIR,\n-            RcaConsts.RCA_CONF_MASTER_PATH,\n-            RcaConsts.RCA_CONF_IDLE_MASTER_PATH,\n-            RcaConsts.RCA_CONF_PATH,\n-            RcaConsts.rcaNannyPollerPeriodicity,\n-            RcaConsts.rcaConfPollerPeriodicity,\n-            RcaConsts.nodeRolePollerPeriodicity,\n-            RcaConsts.rcaPollerPeriodicityTimeUnit);\n-\n-    rcaController.startPollers();\n+            RcaConsts.RCA_STATE_CHECK_INTERVAL_IN_MS,\n+            RcaConsts.nodeRolePollerPeriodicityInSeconds * 1000\n+        );\n+\n+    Thread rcaControllerThread = ThreadProvider.instance()\n+                                               .createThreadForRunnable(() -> rcaController.run(),\n+                                                   \"rca-controller\");\n+    rcaControllerThread.start();\n   }\n \n-  public static HttpServer createInternalServer(PluginSettings settings, int internalPort) {\n-    try {\n-      Security.addProvider(new BouncyCastleProvider());\n-      HttpServer server;\n-      if (settings.getHttpsEnabled()) {\n-        server = createHttpsServer(internalPort);\n-      } else {\n-        server = createHttpServer(internalPort);\n+  private static void startErrorHandlingThread() {\n+    final Thread errorHandlingThread = ThreadProvider.instance().createThreadForRunnable(() -> {\n+      while (true) {\n+        try {\n+          long startTime = System.currentTimeMillis();\n+          List<PAThreadException> exceptions = new ArrayList<>();\n+          exceptionQueue.drainTo(exceptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 229}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NzI0MQ==", "bodyText": "Doing that now. Waiting on exceptions with a take().", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384047241", "createdAt": "2020-02-25T18:33:45Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "diffHunk": "@@ -84,244 +77,147 @@\n   private static Thread rcaNetServerThread = null;\n \n   public static final SampleAggregator RCA_GRAPH_METRICS_AGGREGATOR =\n-          new SampleAggregator(RcaGraphMetrics.values());\n-  public  static final SampleAggregator RCA_RUNTIME_METRICS_AGGREGATOR =\n-          new SampleAggregator(RcaRuntimeMetrics.values());\n+      new SampleAggregator(RcaGraphMetrics.values());\n+  public static final SampleAggregator RCA_RUNTIME_METRICS_AGGREGATOR =\n+      new SampleAggregator(RcaRuntimeMetrics.values());\n \n   private static final IListener MISBEHAVING_NODES_LISTENER =\n-          new MisbehavingGraphOperateMethodListener();\n+      new MisbehavingGraphOperateMethodListener();\n   public static final SampleAggregator ERRORS_AND_EXCEPTIONS_AGGREGATOR =\n-          new SampleAggregator(MISBEHAVING_NODES_LISTENER.getMeasurementsListenedTo(),\n-                  MISBEHAVING_NODES_LISTENER,\n-                  ExceptionsAndErrors.values());\n+      new SampleAggregator(MISBEHAVING_NODES_LISTENER.getMeasurementsListenedTo(),\n+          MISBEHAVING_NODES_LISTENER,\n+          ExceptionsAndErrors.values());\n \n   public static final SampleAggregator JVM_METRICS_AGGREGATOR =\n-          new SampleAggregator(JvmMetrics.values());\n+      new SampleAggregator(JvmMetrics.values());\n \n   public static final RcaStatsReporter RCA_STATS_REPORTER =\n-          new RcaStatsReporter(Arrays.asList(RCA_GRAPH_METRICS_AGGREGATOR,\n-                  RCA_RUNTIME_METRICS_AGGREGATOR, ERRORS_AND_EXCEPTIONS_AGGREGATOR,\n-                  JVM_METRICS_AGGREGATOR));\n+      new RcaStatsReporter(Arrays.asList(RCA_GRAPH_METRICS_AGGREGATOR,\n+          RCA_RUNTIME_METRICS_AGGREGATOR, ERRORS_AND_EXCEPTIONS_AGGREGATOR,\n+          JVM_METRICS_AGGREGATOR));\n   public static final PeriodicSamplers PERIODIC_SAMPLERS =\n-          new PeriodicSamplers(JVM_METRICS_AGGREGATOR, AllJvmSamplers.getJvmSamplers(),\n-                  (MetricsConfiguration.CONFIG_MAP.get(StatsCollector.class).samplingInterval) / 2,\n-                  TimeUnit.MILLISECONDS);\n+      new PeriodicSamplers(JVM_METRICS_AGGREGATOR, AllJvmSamplers.getJvmSamplers(),\n+          (MetricsConfiguration.CONFIG_MAP.get(StatsCollector.class).samplingInterval) / 2,\n+          TimeUnit.MILLISECONDS);\n+  public static final BlockingQueue<PAThreadException> exceptionQueue =\n+      new LinkedBlockingQueue<>(EXCEPTION_QUEUE_LENGTH);\n+  private static final int ERROR_HANDLING_POLLING_INTERVAL_IN_MS = 5000;\n \n   public static void main(String[] args) throws Exception {\n-    // Initialize settings before creating threads.\n     PluginSettings settings = PluginSettings.instance();\n-\n-    StatsCollector.STATS_TYPE = \"agent-stats-metadata\";\n-    METRIC_COLLECTOR_EXECUTOR.addScheduledMetricCollector(StatsCollector.instance());\n-    StatsCollector.instance().addDefaultExceptionCode(StatExceptionCode.READER_RESTART_PROCESSING);\n-    METRIC_COLLECTOR_EXECUTOR.setEnabled(true);\n-    METRIC_COLLECTOR_EXECUTOR.start();\n-\n-    Thread readerThread =\n-        new Thread(\n-            () -> {\n-              while (true) {\n-                try {\n-                  ReaderMetricsProcessor mp =\n-                      new ReaderMetricsProcessor(settings.getMetricsLocation(), true);\n-                  ReaderMetricsProcessor.setCurrentInstance(mp);\n-                  mp.run();\n-                } catch (Throwable e) {\n-                  if (TroubleshootingConfig.getEnableDevAssert()) {\n-                    break;\n-                  }\n-                  LOG.error(\n-                      \"Error in ReaderMetricsProcessor...restarting, ExceptionCode: {}\",\n-                      StatExceptionCode.READER_RESTART_PROCESSING.toString());\n-                  StatsCollector.instance()\n-                      .logException(StatExceptionCode.READER_RESTART_PROCESSING);\n-                }\n-              }\n-            });\n-    readerThread.start();\n-\n-    ClientServers clientServers = startServers();\n-    startRcaController(clientServers);\n+    final GRPCConnectionManager connectionManager = new GRPCConnectionManager(\n+        settings.getHttpsEnabled());\n+    final ClientServers clientServers = startServers(connectionManager);\n+    startErrorHandlingThread();\n+    startReaderThread();\n+    startGrpcServerThread(clientServers.getNetServer());\n+    startWebServerThread(clientServers.getHttpServer());\n+    startRcaTopLevelThread(clientServers, connectionManager);\n   }\n \n-  /**\n-   * Start all the servers and clients for request processing. We start two servers: - httpServer:\n-   * To handle the curl requests sent to the endpoint. This is human readable and also used by the\n-   * perftop. - gRPC server: This is how metrics, RCAs etc are transported between nodes. and a gRPC\n-   * client.\n-   *\n-   * @return gRPC client and the gRPC server and the httpServer wrapped in a class.\n-   */\n-  public static ClientServers startServers() {\n-    boolean useHttps = PluginSettings.instance().getHttpsEnabled();\n-\n-    GRPCConnectionManager connectionManager = new GRPCConnectionManager(useHttps);\n-    NetServer netServer = new NetServer(Util.RPC_PORT, 1, useHttps);\n-    NetClient netClient = new NetClient(connectionManager);\n-    MetricsRestUtil metricsRestUtil = new MetricsRestUtil();\n-\n-    netServer.setMetricsHandler(new MetricsServerHandler());\n-    startRpcServerThread(netServer);\n-    HttpServer httpServer = createInternalServer(PluginSettings.instance(), getPortNumber());\n-    httpServer.createContext(QUERY_URL, new QueryMetricsRequestHandler(netClient, metricsRestUtil));\n-\n-    return new ClientServers(httpServer, netServer, netClient);\n-  }\n-\n-  /** This starts the GRPC server in a thread of its own. */\n-  private static void startRpcServerThread(NetServer netServer) {\n-    rcaNetServerThread = new Thread(netServer);\n-    rcaNetServerThread.start();\n-  }\n-\n-  /**\n-   * This starts the necessary threads to facilitate the running of the RCA framework. This may or\n-   * may not cause the RCA to start. RCA is started only if enableRCA flag is set through POST\n-   * request, otherwise, this method just spins up the necessary threads to start RCA on demand\n-   * without requiring a process restart.\n-   *\n-   * @param clientServers The httpServer, the gRPC server and client wrapper.\n-   */\n-  private static void startRcaController(ClientServers clientServers) {\n-    boolean useHttps = PluginSettings.instance().getHttpsEnabled();\n-\n-    GRPCConnectionManager connectionManager = new GRPCConnectionManager(useHttps);\n+  private static void startRcaTopLevelThread(final ClientServers clientServers,\n+      final GRPCConnectionManager connectionManager) {\n     rcaController =\n         new RcaController(\n             netOperationsExecutor,\n             connectionManager,\n-            clientServers.getNetClient(),\n-            clientServers.getNetServer(),\n-            clientServers.getHttpServer(),\n+            clientServers,\n             Util.DATA_DIR,\n-            RcaConsts.RCA_CONF_MASTER_PATH,\n-            RcaConsts.RCA_CONF_IDLE_MASTER_PATH,\n-            RcaConsts.RCA_CONF_PATH,\n-            RcaConsts.rcaNannyPollerPeriodicity,\n-            RcaConsts.rcaConfPollerPeriodicity,\n-            RcaConsts.nodeRolePollerPeriodicity,\n-            RcaConsts.rcaPollerPeriodicityTimeUnit);\n-\n-    rcaController.startPollers();\n+            RcaConsts.RCA_STATE_CHECK_INTERVAL_IN_MS,\n+            RcaConsts.nodeRolePollerPeriodicityInSeconds * 1000\n+        );\n+\n+    Thread rcaControllerThread = ThreadProvider.instance()\n+                                               .createThreadForRunnable(() -> rcaController.run(),\n+                                                   \"rca-controller\");\n+    rcaControllerThread.start();\n   }\n \n-  public static HttpServer createInternalServer(PluginSettings settings, int internalPort) {\n-    try {\n-      Security.addProvider(new BouncyCastleProvider());\n-      HttpServer server;\n-      if (settings.getHttpsEnabled()) {\n-        server = createHttpsServer(internalPort);\n-      } else {\n-        server = createHttpServer(internalPort);\n+  private static void startErrorHandlingThread() {\n+    final Thread errorHandlingThread = ThreadProvider.instance().createThreadForRunnable(() -> {\n+      while (true) {\n+        try {\n+          long startTime = System.currentTimeMillis();\n+          List<PAThreadException> exceptions = new ArrayList<>();\n+          exceptionQueue.drainTo(exceptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MTI0OQ=="}, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU3MDczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowMDoxMlrOFtBTTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozMjoxOFrOFuQVdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MTU2Ng==", "bodyText": "Lets use ArrayBlockingQueue", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r382751566", "createdAt": "2020-02-21T19:00:12Z", "author": {"login": "ditac"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "diffHunk": "@@ -42,36 +41,30 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.listeners.IListener;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ReaderMetricsProcessor;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rest.QueryMetricsRequestHandler;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.ThreadProvider;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.exceptions.PAThreadException;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.security.KeyStore;\n-import java.security.Security;\n-import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NjQ1NA==", "bodyText": "Changed it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384046454", "createdAt": "2020-02-25T18:32:18Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/PerformanceAnalyzerApp.java", "diffHunk": "@@ -42,36 +41,30 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.listeners.IListener;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ReaderMetricsProcessor;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rest.QueryMetricsRequestHandler;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.ThreadProvider;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.exceptions.PAThreadException;\n import com.google.common.util.concurrent.ThreadFactoryBuilder;\n import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.security.KeyStore;\n-import java.security.Security;\n-import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1MTU2Ng=="}, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU5MTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/tasks/ThreadProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxOTowNzoxN1rOFtBgDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxODozNTo1NVrOFuQdWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NDgzMQ==", "bodyText": "We should just block if the queue is full. We should emit metrics on errors and these metrics need to be accurate. The component will be dead if it hits an exception. Should we restart the process if we run into exceptions?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r382754831", "createdAt": "2020-02-21T19:07:17Z", "author": {"login": "ditac"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/tasks/ThreadProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.exceptions.PAThreadException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ThreadProvider {\n+\n+  private static final Logger LOG = LogManager.getLogger(ThreadProvider.class);\n+  private static volatile ThreadProvider _instance = null;\n+  private int numberOfThreadsSpunUp = 0;\n+\n+  /**\n+   * Empty private default ctor to prevent instantiation.\n+   */\n+  private ThreadProvider() {\n+  }\n+\n+  public static ThreadProvider instance() {\n+    if (_instance != null) {\n+      return _instance;\n+    }\n+\n+    _instance = new ThreadProvider();\n+    return _instance;\n+  }\n+\n+  public Thread createThreadForRunnable(final Runnable innerRunnable, final String name) {\n+    Thread t = new Thread(() -> {\n+      try {\n+        innerRunnable.run();\n+      } catch (Throwable innerThrowable) {\n+        if (!PerformanceAnalyzerApp.exceptionQueue.offer(new PAThreadException(name,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0ODQ3Mw==", "bodyText": "Blocking on the queue with put().", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384048473", "createdAt": "2020-02-25T18:35:55Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/tasks/ThreadProvider.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.tasks.exceptions.PAThreadException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ThreadProvider {\n+\n+  private static final Logger LOG = LogManager.getLogger(ThreadProvider.class);\n+  private static volatile ThreadProvider _instance = null;\n+  private int numberOfThreadsSpunUp = 0;\n+\n+  /**\n+   * Empty private default ctor to prevent instantiation.\n+   */\n+  private ThreadProvider() {\n+  }\n+\n+  public static ThreadProvider instance() {\n+    if (_instance != null) {\n+      return _instance;\n+    }\n+\n+    _instance = new ThreadProvider();\n+    return _instance;\n+  }\n+\n+  public Thread createThreadForRunnable(final Runnable innerRunnable, final String name) {\n+    Thread t = new Thread(() -> {\n+      try {\n+        innerRunnable.run();\n+      } catch (Throwable innerThrowable) {\n+        if (!PerformanceAnalyzerApp.exceptionQueue.offer(new PAThreadException(name,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NDgzMQ=="}, "originalCommit": {"oid": "988aab511b55a97e203e4aab9daa8e913274dca0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODQ3MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/threads/ThreadProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTo0Nzo0MlrOFuS2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDoyNzo1OFrOFuUFwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4NzYxOQ==", "bodyText": "Doesnt look like this needs to be synchronized as its not protecting any mutable data.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384087619", "createdAt": "2020-02-25T19:47:42Z", "author": {"login": "ditac"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/threads/ThreadProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.threads;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerThreads;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors.StatsCollector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.threads.exceptions.PAThreadException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class that wraps a given runnable in a thread with exception handling capabilities.\n+ */\n+public class ThreadProvider {\n+\n+  private static final Logger LOG = LogManager.getLogger(ThreadProvider.class);\n+  private static final String PA_THREADS_STARTED_METRIC_NAME = \"NumberOfPAThreadsStarted\";\n+  private static final String PA_THREADS_ENDED_METRIC_NAME = \"NumberOfPAThreadsEnded\";\n+\n+  /**\n+   * Creates a thread which executes the given runnable when started. If the given runnable throws\n+   * an uncaught exception, it is then written to the exception queue which will be processed by the\n+   * exception handler thread.\n+   *\n+   * @param innerRunnable The runnable to execute when the thread starts.\n+   * @param paThread      The thread enum value from {@link PerformanceAnalyzerThreads}\n+   * @return The thread with the wrapped runnable.\n+   */\n+  public synchronized Thread createThreadForRunnable(final Runnable innerRunnable,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5392206b221856b8148a1d484f8922367ba3f8a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwNzk2OA==", "bodyText": "Removed it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384107968", "createdAt": "2020-02-25T20:27:58Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/threads/ThreadProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.threads;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerThreads;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors.StatsCollector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.threads.exceptions.PAThreadException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class that wraps a given runnable in a thread with exception handling capabilities.\n+ */\n+public class ThreadProvider {\n+\n+  private static final Logger LOG = LogManager.getLogger(ThreadProvider.class);\n+  private static final String PA_THREADS_STARTED_METRIC_NAME = \"NumberOfPAThreadsStarted\";\n+  private static final String PA_THREADS_ENDED_METRIC_NAME = \"NumberOfPAThreadsEnded\";\n+\n+  /**\n+   * Creates a thread which executes the given runnable when started. If the given runnable throws\n+   * an uncaught exception, it is then written to the exception queue which will be processed by the\n+   * exception handler thread.\n+   *\n+   * @param innerRunnable The runnable to execute when the thread starts.\n+   * @param paThread      The thread enum value from {@link PerformanceAnalyzerThreads}\n+   * @return The thread with the wrapped runnable.\n+   */\n+  public synchronized Thread createThreadForRunnable(final Runnable innerRunnable,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4NzYxOQ=="}, "originalCommit": {"oid": "c5392206b221856b8148a1d484f8922367ba3f8a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQ4MjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaControllerHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozNTozMFrOFu5R2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozNTozMFrOFu5R2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxNzI3NA==", "bodyText": "I was thinking that we move the entire thread creation into a helper class. The thread creators should use that to create threads using few parameters", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384717274", "createdAt": "2020-02-26T19:35:30Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaControllerHelper.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.NodeRole;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.RcaRuntimeMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class RcaControllerHelper {\n+\n+  private static final Logger LOG = LogManager.getLogger(RcaControllerHelper.class);\n+  public static final String CAT_MASTER_URL = \"http://localhost:9200/_cat/master?h=ip\";\n+  private static String ELECTED_MASTER_RCA_CONF_PATH = RcaConsts.RCA_CONF_MASTER_PATH;\n+  private static String MASTER_RCA_CONF_PATH = RcaConsts.RCA_CONF_IDLE_MASTER_PATH;\n+  private static String RCA_CONF_PATH = RcaConsts.RCA_CONF_PATH;\n+\n+  /**\n+   * Picks a configuration for RCA based on the node's role.\n+   *\n+   * @param nodeRole The role of the node(data/eligible master/elected master)\n+   * @return The configuration based on the role.\n+   */\n+  public static RcaConf pickRcaConfForRole(final NodeRole nodeRole) {\n+    if (NodeRole.ELECTED_MASTER == nodeRole) {\n+      LOG.debug(\"picking elected master conf\");\n+      return new RcaConf(ELECTED_MASTER_RCA_CONF_PATH);\n+    }\n+\n+    if (NodeRole.MASTER == nodeRole) {\n+      LOG.debug(\"picking idle master conf\");\n+      return new RcaConf(MASTER_RCA_CONF_PATH);\n+    }\n+\n+    if (NodeRole.DATA == nodeRole) {\n+      LOG.debug(\"picking data node conf\");\n+      return new RcaConf(RCA_CONF_PATH);\n+    }\n+\n+    LOG.debug(\"picking default conf\");\n+    return new RcaConf(RCA_CONF_PATH);\n+  }\n+\n+  /**\n+   * Gets the elected master's information by performing a _cat/master call.\n+   *\n+   * @return The host address of the elected master.\n+   */\n+  public static String getElectedMasterHostAddress() {\n+    try {\n+      LOG.info(\"Making _cat/master call\");\n+      PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n+          RcaRuntimeMetrics.ES_APIS_CALLED, \"catMaster\", 1);\n+\n+      final URL url = new URL(CAT_MASTER_URL);\n+      HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+      connection.setRequestMethod(\"GET\");\n+      BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n+      String inputLine = in.readLine();\n+      in.close();\n+\n+      return inputLine;\n+    } catch (IOException e) {\n+      LOG.error(\"Could not get the elected master node: {}\", e.getMessage());\n+      e.printStackTrace();\n+    }\n+\n+    return \"\";\n+  }\n+\n+  /**\n+   * Builds a thread pool used by the networking layer to pass messages and perform networking\n+   * functions.\n+   *\n+   * @param queueLength The length of the queue in the threadpool.\n+   * @return The thread pool as an executor service.\n+   */\n+  public static ExecutorService buildNetworkThreadPool(final int queueLength) {\n+    final ThreadFactory rcaNetThreadFactory =\n+        new ThreadFactoryBuilder().setNameFormat(RcaConsts.RCA_NETWORK_THREAD_NAME_FORMAT)\n+                                  .setDaemon(true)\n+                                  .build();\n+    final BlockingQueue<Runnable> threadPoolQueue = new LinkedBlockingQueue<>(queueLength);\n+    return new ThreadPoolExecutor(RcaConsts.NETWORK_CORE_THREAD_COUNT,\n+        RcaConsts.NETWORK_MAX_THREAD_COUNT, 0L, TimeUnit.MILLISECONDS, threadPoolQueue,\n+        rcaNetThreadFactory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22eb8176f601ec03e946409e1c1ee29ea73d2fe2"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQ4NTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaConsts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozNjoxMFrOFu5Tjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozNjoxMFrOFu5Tjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxNzcxMQ==", "bodyText": "screaming snake case for final ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384717711", "createdAt": "2020-02-26T19:36:10Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaConsts.java", "diffHunk": "@@ -66,7 +67,7 @@\n \n   public static final long rcaNannyPollerPeriodicity = 5;\n   public static final long rcaConfPollerPeriodicity = 5;\n-  public static final long nodeRolePollerPeriodicity = 60;\n+  public static final long nodeRolePollerPeriodicityInSeconds = 60;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22eb8176f601ec03e946409e1c1ee29ea73d2fe2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjUwOTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/scheduler/RCAScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo0MToxN1rOFu5g2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo0MToxN1rOFu5g2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyMTExMg==", "bodyText": "I see that the users of the field are deleted. we should remove this too ? Did I miss something ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384721112", "createdAt": "2020-02-26T19:41:17Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/scheduler/RCAScheduler.java", "diffHunk": "@@ -72,6 +65,7 @@\n   ThresholdMain thresholdMain;\n   Persistable persistable;\n   static final int PERIODICITY_SECONDS = 1;\n+  static final int PERIODICITY_IN_MS = PERIODICITY_SECONDS * 1000;\n   ScheduledFuture<?> futureHandle;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22eb8176f601ec03e946409e1c1ee29ea73d2fe2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjUxNjkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/scheduler/RCAScheduler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo0MzowNVrOFu5ljA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo0MzowNVrOFu5ljA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyMjMxNg==", "bodyText": "We are catching exception here. How are we reporting that a thread shutdown because of exception in the stats collector ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384722316", "createdAt": "2020-02-26T19:43:05Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/scheduler/RCAScheduler.java", "diffHunk": "@@ -99,52 +93,30 @@ public void start() {\n     createExecutorPools();\n \n     if (scheduledPool != null && role != NodeRole.UNKNOWN) {\n-      futureHandle =\n-          scheduledPool.scheduleAtFixedRate(\n-              new RCASchedulerTask(\n-                  10000, rcaSchedulerPeriodicExecutor, connectedComponents, db, persistable, rcaConf, net),\n-              1,\n-              PERIODICITY_SECONDS,\n-              TimeUnit.SECONDS);\n-      startExceptionHandlerThread();\n       schedulerState = RcaSchedulerState.STATE_STARTED;\n+\n+      final RCASchedulerTask task = new RCASchedulerTask(\n+          10000, rcaSchedulerPeriodicExecutor, connectedComponents, db, persistable, rcaConf, net);\n+      while (schedulerState == RcaSchedulerState.STATE_STARTED) {\n+        try {\n+          long startTime = System.currentTimeMillis();\n+          task.run();\n+          long duration = System.currentTimeMillis() - startTime;\n+          if (duration < PERIODICITY_IN_MS) {\n+            Thread.sleep(PERIODICITY_IN_MS - duration);\n+          }\n+        } catch (InterruptedException ie) {\n+          LOG.error(\"Rca scheduler thread sleep interrupted. Reason: {}\", ie.getMessage());\n+          LOG.error(ie);\n+          shutdown();\n+          schedulerState = RcaSchedulerState.STATE_STOPPED_DUE_TO_EXCEPTION;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22eb8176f601ec03e946409e1c1ee29ea73d2fe2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjU0NjE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/threads/ThreadProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo1MDo0MlrOFu521Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTo1MDo0MlrOFu521Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyNjc0MQ==", "bodyText": "I was also thinking that this will have a method say runningThreadCount and expectedThreadCount which will be polled by PeriodicSamplers. In normal case these should be equal but in case a thread dies we would know. It should not be a point emission (emit once and never again). It should be emitted until the problem is fixed. We should be able to see in the fleet if there are threads that are dead now and requires an Agent restart.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/108#discussion_r384726741", "createdAt": "2020-02-26T19:50:42Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/threads/ThreadProvider.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.threads;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerThreads;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors.StatsCollector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.threads.exceptions.PAThreadException;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Class that wraps a given runnable in a thread with exception handling capabilities.\n+ */\n+public class ThreadProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22eb8176f601ec03e946409e1c1ee29ea73d2fe2"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2584, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}