{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNjY0Nzk3", "number": 112, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowNjoxM1rODkYw1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowNjo1MlrODkYxsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDgxMDQ1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/HighCpuSymptomTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowNjoxM1rOFwrkHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowNjoxM1rOFwrkHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU4OTcyNg==", "bodyText": "Can we add an assert here, so that the test fails if this happens?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/112#discussion_r386589726", "createdAt": "2020-03-02T19:06:13Z", "author": {"login": "ditac"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/HighCpuSymptomTest.java", "diffHunk": "@@ -79,53 +80,39 @@ public SymptomFlowUnit operate() {\n       boolean shouldReportOperation = false;\n \n       MetricFlowUnit cpuMetric = cpuMetrics.get(0);\n-      List<List<String>> allData = cpuMetric.getData();\n-      List<String> cols = allData.get(0);\n-      int shardIDIdx = -1;\n-      int maxColIdx = -1;\n-\n-      // Get the index of the shardID column.\n-      for (int i = 0; i < cols.size(); i++) {\n-        if (cols.get(i).equals(OSMetricHelper.getDims().get(0))) {\n-          shardIDIdx = i;\n-          break;\n-        }\n-      }\n-\n-      // Get the index of the max column.\n-      for (int i = 0; i < cols.size(); i++) {\n-        if (cols.get(i).equals(MetricsDB.MAX)) {\n-          maxColIdx = i;\n-          break;\n-        }\n-      }\n-\n       Map<String, MovingAverage> averageMap = new HashMap<>();\n       final double HIGH_CPU_THRESHOLD = 90.0;\n       List<List<String>> ret = new ArrayList<>();\n-      // The first row is the column names, so we start from the row 1.\n-      for (int i = 1; i < allData.size(); i++) {\n-        List<String> row = allData.get(i);\n-        String shardId = row.get(shardIDIdx);\n-        MovingAverage entry = averageMap.get(shardId);\n-        if (null == entry) {\n-          entry = new MovingAverage(3);\n-          averageMap.put(shardId, entry);\n-        }\n-        double val = entry.next(Double.parseDouble(row.get(maxColIdx)));\n-        if (val > HIGH_CPU_THRESHOLD) {\n-          List<String> dataRow = Collections.singletonList(shardId);\n-          // context.put(\"threshold\", String.valueOf(HIGH_CPU_THRESHOLD));\n-          // context.put(\"actual\", String.valueOf(val));\n-          ret.add(dataRow);\n-          System.out.println(\n-              String.format(\n-                  \"Shard %s is hot. Average max CPU (%f) above: %f\",\n-                  shardId, val, HIGH_CPU_THRESHOLD));\n-          shouldReportOperation = true;\n+      if (cpuMetric.getData() != null) {\n+        for (Record record : cpuMetric.getData()) {\n+          try {\n+            String shardId = record.getValue(SHARD_ID.toString(), String.class);\n+            double data = record.getValue(MetricsDB.MAX, Double.class);\n+            MovingAverage entry = averageMap.get(shardId);\n+            if (null == entry) {\n+              entry = new MovingAverage(3);\n+              averageMap.put(shardId, entry);\n+            }\n+            double val = entry.next(data);\n+            if (val > HIGH_CPU_THRESHOLD) {\n+              List<String> dataRow = Collections.singletonList(shardId);\n+              // context.put(\"threshold\", String.valueOf(HIGH_CPU_THRESHOLD));\n+              // context.put(\"actual\", String.valueOf(val));\n+              ret.add(dataRow);\n+              System.out.println(\n+                  String.format(\n+                      \"Shard %s is hot. Average max CPU (%f) above: %f\",\n+                      shardId, val, HIGH_CPU_THRESHOLD));\n+              shouldReportOperation = true;\n+            }\n+          }\n+          catch (Exception e) {\n+            System.out.println(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a5d9f68ea1cb1f7fb6e96194f415d0ce86131e"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDgxMjY1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/HighCpuSymptomTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowNjo1MlrOFwrlcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTowNjo1MlrOFwrlcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjU5MDA2Nw==", "bodyText": "Good to avoid logs in test, unless the test fails.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/112#discussion_r386590067", "createdAt": "2020-03-02T19:06:52Z", "author": {"login": "ditac"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/HighCpuSymptomTest.java", "diffHunk": "@@ -79,53 +80,39 @@ public SymptomFlowUnit operate() {\n       boolean shouldReportOperation = false;\n \n       MetricFlowUnit cpuMetric = cpuMetrics.get(0);\n-      List<List<String>> allData = cpuMetric.getData();\n-      List<String> cols = allData.get(0);\n-      int shardIDIdx = -1;\n-      int maxColIdx = -1;\n-\n-      // Get the index of the shardID column.\n-      for (int i = 0; i < cols.size(); i++) {\n-        if (cols.get(i).equals(OSMetricHelper.getDims().get(0))) {\n-          shardIDIdx = i;\n-          break;\n-        }\n-      }\n-\n-      // Get the index of the max column.\n-      for (int i = 0; i < cols.size(); i++) {\n-        if (cols.get(i).equals(MetricsDB.MAX)) {\n-          maxColIdx = i;\n-          break;\n-        }\n-      }\n-\n       Map<String, MovingAverage> averageMap = new HashMap<>();\n       final double HIGH_CPU_THRESHOLD = 90.0;\n       List<List<String>> ret = new ArrayList<>();\n-      // The first row is the column names, so we start from the row 1.\n-      for (int i = 1; i < allData.size(); i++) {\n-        List<String> row = allData.get(i);\n-        String shardId = row.get(shardIDIdx);\n-        MovingAverage entry = averageMap.get(shardId);\n-        if (null == entry) {\n-          entry = new MovingAverage(3);\n-          averageMap.put(shardId, entry);\n-        }\n-        double val = entry.next(Double.parseDouble(row.get(maxColIdx)));\n-        if (val > HIGH_CPU_THRESHOLD) {\n-          List<String> dataRow = Collections.singletonList(shardId);\n-          // context.put(\"threshold\", String.valueOf(HIGH_CPU_THRESHOLD));\n-          // context.put(\"actual\", String.valueOf(val));\n-          ret.add(dataRow);\n-          System.out.println(\n-              String.format(\n-                  \"Shard %s is hot. Average max CPU (%f) above: %f\",\n-                  shardId, val, HIGH_CPU_THRESHOLD));\n-          shouldReportOperation = true;\n+      if (cpuMetric.getData() != null) {\n+        for (Record record : cpuMetric.getData()) {\n+          try {\n+            String shardId = record.getValue(SHARD_ID.toString(), String.class);\n+            double data = record.getValue(MetricsDB.MAX, Double.class);\n+            MovingAverage entry = averageMap.get(shardId);\n+            if (null == entry) {\n+              entry = new MovingAverage(3);\n+              averageMap.put(shardId, entry);\n+            }\n+            double val = entry.next(data);\n+            if (val > HIGH_CPU_THRESHOLD) {\n+              List<String> dataRow = Collections.singletonList(shardId);\n+              // context.put(\"threshold\", String.valueOf(HIGH_CPU_THRESHOLD));\n+              // context.put(\"actual\", String.valueOf(val));\n+              ret.add(dataRow);\n+              System.out.println(\n+                  String.format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8a5d9f68ea1cb1f7fb6e96194f415d0ce86131e"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2591, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}