{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNDA2MTM4", "number": 233, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNTozNToyMFrOEE7_rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzozNTo1NFrOEfwfYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjEyNzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNTozNToyMFrOGi3mlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzozODo1NVrOGj8KlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxNTc2NQ==", "bodyText": "IIUC, we consider the threadpool contended if we repeatedly see rejections for the last rejectionTimePeriodThreshold duration.\n\nWe can add a doc string to make this clear (can modify the comment in RCA)\nDo you think we should make it less aggressive - rather than demanding that each data point be a rejection, we say threadpool is contended if 80% data points in the window have rejections?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/233#discussion_r439215765", "createdAt": "2020-06-12T05:35:20Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.threadpool;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * This RCA reads ThreadPool_RejectionReqs from upstream metrics and it keeps track of\n+ * the amount of the time period(tp) when requests in the queues are continuously being rejected.\n+ * This RCA is marked as unhealthy if tp we find in write/search queue is above the threshold.\n+ */\n+public class QueueRejectionRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+  private static final Logger LOG = LogManager.getLogger(QueueRejectionRca.class);\n+  private static final long REJECTION_TIME_PERIOD_IN_MILLISECOND = TimeUnit.SECONDS.toMillis(300);\n+  private final int rcaPeriod;\n+  private final List<QueueRejectionCollector> queueRejectionCollectors;\n+  private int counter;\n+  protected Clock clock;\n+\n+  public <M extends Metric> QueueRejectionRca(final int rcaPeriod, M threadPool_RejectedReqs) {\n+    super(5);\n+    this.rcaPeriod = rcaPeriod;\n+    counter = 0;\n+    clock = Clock.systemUTC();\n+    queueRejectionCollectors = Collections.unmodifiableList(Arrays.asList(\n+        new QueueRejectionCollector(ThreadPoolEnum.WRITE_QUEUE, ThreadPoolType.WRITE,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND),\n+        new QueueRejectionCollector(ThreadPoolEnum.SEARCH_QUEUE, ThreadPoolType.SEARCH,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND)\n+    ));\n+  }\n+\n+  @VisibleForTesting\n+  public void setClock(Clock clock) {\n+    this.clock = clock;\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotNodeSummary> operate() {\n+    counter += 1;\n+    long currTimestamp = clock.millis();\n+    if (counter == rcaPeriod) {\n+      counter = 0;\n+      ClusterDetailsEventProcessor.NodeDetails currentNode = ClusterDetailsEventProcessor\n+          .getCurrentNodeDetails();\n+      HotNodeSummary nodeSummary = null;\n+      for (QueueRejectionCollector collector : queueRejectionCollectors) {\n+        collector.collect(currTimestamp);\n+        // if we've see thread pool rejection in the last 5 mins, the thread pool is considered as contended\n+        if (collector.isUnhealthy(currTimestamp)) {\n+          if (nodeSummary == null) {\n+            nodeSummary = new HotNodeSummary(currentNode.getId(), currentNode.getHostAddress());\n+          }\n+          nodeSummary.addNestedSummaryList(collector.generateSummary(currTimestamp));\n+        }\n+      }\n+      ResourceContext context;\n+      if (nodeSummary == null) {\n+        context = new ResourceContext(Resources.State.HEALTHY);\n+      }\n+      else {\n+        context = new ResourceContext(Resources.State.UNHEALTHY);\n+      }\n+      boolean isDataNode = !currentNode.getIsMasterNode();\n+      return new ResourceFlowUnit<>(currTimestamp, context, nodeSummary, isDataNode);\n+    }\n+    else {\n+      return new ResourceFlowUnit<>(currTimestamp);\n+    }\n+  }\n+\n+  //TODO: move this method back into the Rca base class\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    final List<FlowUnitMessage> flowUnitMessages =\n+        args.getWireHopper().readFromWire(args.getNode());\n+    List<ResourceFlowUnit<HotNodeSummary>> flowUnitList = new ArrayList<>();\n+    LOG.debug(\"rca: Executing fromWire: {}\", this.getClass().getSimpleName());\n+    for (FlowUnitMessage flowUnitMessage : flowUnitMessages) {\n+      flowUnitList.add(ResourceFlowUnit.buildFlowUnitFromWrapper(flowUnitMessage));\n+    }\n+    setFlowUnits(flowUnitList);\n+  }\n+\n+  /**\n+   * A collector class to collect rejection from each queue type\n+   */\n+  private static class QueueRejectionCollector {\n+    private final ResourceType threadPool;\n+    private final ThreadPoolType threadPoolMetric;\n+    private final Metric threadPool_RejectedReqs;\n+    private boolean hasRejection;\n+    private long rejectionTimestamp;\n+    private long rejectionTimePeriodThreshold;\n+\n+    public QueueRejectionCollector(final ThreadPoolEnum threadPool, final ThreadPoolType threadPoolMetric,\n+        final Metric threadPool_RejectedReqs, final long threshold) {\n+      this.threadPool = ResourceType.newBuilder().setThreadPool(threadPool).build();\n+      this.threadPoolMetric = threadPoolMetric;\n+      this.threadPool_RejectedReqs = threadPool_RejectedReqs;\n+      this.hasRejection = false;\n+      this.rejectionTimestamp = 0;\n+      this.rejectionTimePeriodThreshold = threshold;\n+    }\n+\n+    public void collect(final long currTimestamp) {\n+      for (MetricFlowUnit flowUnit : threadPool_RejectedReqs.getFlowUnits()) {\n+        if (flowUnit.isEmpty()) {\n+          continue;\n+        }\n+        double rejectCnt = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+            THREAD_POOL_TYPE.getField(), threadPoolMetric.toString(), MetricsDB.MAX);\n+        if (!Double.isNaN(rejectCnt)) {\n+          if (rejectCnt > 0) {\n+            if (!hasRejection) {\n+              rejectionTimestamp = currTimestamp;\n+            }\n+            hasRejection = true;\n+          }\n+          else {\n+            hasRejection = false;\n+          }\n+        }\n+        else {\n+          LOG.error(\"Failed to parse metric from threadpool {}\", threadPool.toString());\n+        }\n+      }\n+    }\n+\n+    public boolean isUnhealthy(final long currTimestamp) {\n+      return hasRejection && (currTimestamp - rejectionTimestamp) >= rejectionTimePeriodThreshold;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd48936ded36a2d960bc9212ac5592cb49f81cb0"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4MTI4MA==", "bodyText": "Let me add a doc for this RCA. And as per our discussion, we will go with this approach without sliding window to keep this RCA light weighted.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/233#discussion_r439681280", "createdAt": "2020-06-12T23:42:35Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.threadpool;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * This RCA reads ThreadPool_RejectionReqs from upstream metrics and it keeps track of\n+ * the amount of the time period(tp) when requests in the queues are continuously being rejected.\n+ * This RCA is marked as unhealthy if tp we find in write/search queue is above the threshold.\n+ */\n+public class QueueRejectionRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+  private static final Logger LOG = LogManager.getLogger(QueueRejectionRca.class);\n+  private static final long REJECTION_TIME_PERIOD_IN_MILLISECOND = TimeUnit.SECONDS.toMillis(300);\n+  private final int rcaPeriod;\n+  private final List<QueueRejectionCollector> queueRejectionCollectors;\n+  private int counter;\n+  protected Clock clock;\n+\n+  public <M extends Metric> QueueRejectionRca(final int rcaPeriod, M threadPool_RejectedReqs) {\n+    super(5);\n+    this.rcaPeriod = rcaPeriod;\n+    counter = 0;\n+    clock = Clock.systemUTC();\n+    queueRejectionCollectors = Collections.unmodifiableList(Arrays.asList(\n+        new QueueRejectionCollector(ThreadPoolEnum.WRITE_QUEUE, ThreadPoolType.WRITE,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND),\n+        new QueueRejectionCollector(ThreadPoolEnum.SEARCH_QUEUE, ThreadPoolType.SEARCH,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND)\n+    ));\n+  }\n+\n+  @VisibleForTesting\n+  public void setClock(Clock clock) {\n+    this.clock = clock;\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotNodeSummary> operate() {\n+    counter += 1;\n+    long currTimestamp = clock.millis();\n+    if (counter == rcaPeriod) {\n+      counter = 0;\n+      ClusterDetailsEventProcessor.NodeDetails currentNode = ClusterDetailsEventProcessor\n+          .getCurrentNodeDetails();\n+      HotNodeSummary nodeSummary = null;\n+      for (QueueRejectionCollector collector : queueRejectionCollectors) {\n+        collector.collect(currTimestamp);\n+        // if we've see thread pool rejection in the last 5 mins, the thread pool is considered as contended\n+        if (collector.isUnhealthy(currTimestamp)) {\n+          if (nodeSummary == null) {\n+            nodeSummary = new HotNodeSummary(currentNode.getId(), currentNode.getHostAddress());\n+          }\n+          nodeSummary.addNestedSummaryList(collector.generateSummary(currTimestamp));\n+        }\n+      }\n+      ResourceContext context;\n+      if (nodeSummary == null) {\n+        context = new ResourceContext(Resources.State.HEALTHY);\n+      }\n+      else {\n+        context = new ResourceContext(Resources.State.UNHEALTHY);\n+      }\n+      boolean isDataNode = !currentNode.getIsMasterNode();\n+      return new ResourceFlowUnit<>(currTimestamp, context, nodeSummary, isDataNode);\n+    }\n+    else {\n+      return new ResourceFlowUnit<>(currTimestamp);\n+    }\n+  }\n+\n+  //TODO: move this method back into the Rca base class\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    final List<FlowUnitMessage> flowUnitMessages =\n+        args.getWireHopper().readFromWire(args.getNode());\n+    List<ResourceFlowUnit<HotNodeSummary>> flowUnitList = new ArrayList<>();\n+    LOG.debug(\"rca: Executing fromWire: {}\", this.getClass().getSimpleName());\n+    for (FlowUnitMessage flowUnitMessage : flowUnitMessages) {\n+      flowUnitList.add(ResourceFlowUnit.buildFlowUnitFromWrapper(flowUnitMessage));\n+    }\n+    setFlowUnits(flowUnitList);\n+  }\n+\n+  /**\n+   * A collector class to collect rejection from each queue type\n+   */\n+  private static class QueueRejectionCollector {\n+    private final ResourceType threadPool;\n+    private final ThreadPoolType threadPoolMetric;\n+    private final Metric threadPool_RejectedReqs;\n+    private boolean hasRejection;\n+    private long rejectionTimestamp;\n+    private long rejectionTimePeriodThreshold;\n+\n+    public QueueRejectionCollector(final ThreadPoolEnum threadPool, final ThreadPoolType threadPoolMetric,\n+        final Metric threadPool_RejectedReqs, final long threshold) {\n+      this.threadPool = ResourceType.newBuilder().setThreadPool(threadPool).build();\n+      this.threadPoolMetric = threadPoolMetric;\n+      this.threadPool_RejectedReqs = threadPool_RejectedReqs;\n+      this.hasRejection = false;\n+      this.rejectionTimestamp = 0;\n+      this.rejectionTimePeriodThreshold = threshold;\n+    }\n+\n+    public void collect(final long currTimestamp) {\n+      for (MetricFlowUnit flowUnit : threadPool_RejectedReqs.getFlowUnits()) {\n+        if (flowUnit.isEmpty()) {\n+          continue;\n+        }\n+        double rejectCnt = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+            THREAD_POOL_TYPE.getField(), threadPoolMetric.toString(), MetricsDB.MAX);\n+        if (!Double.isNaN(rejectCnt)) {\n+          if (rejectCnt > 0) {\n+            if (!hasRejection) {\n+              rejectionTimestamp = currTimestamp;\n+            }\n+            hasRejection = true;\n+          }\n+          else {\n+            hasRejection = false;\n+          }\n+        }\n+        else {\n+          LOG.error(\"Failed to parse metric from threadpool {}\", threadPool.toString());\n+        }\n+      }\n+    }\n+\n+    public boolean isUnhealthy(final long currTimestamp) {\n+      return hasRejection && (currTimestamp - rejectionTimestamp) >= rejectionTimePeriodThreshold;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxNTc2NQ=="}, "originalCommit": {"oid": "bd48936ded36a2d960bc9212ac5592cb49f81cb0"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY4MjExOA==", "bodyText": "Just a doc string for the RCA would suffice. Thanks", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/233#discussion_r439682118", "createdAt": "2020-06-12T23:47:56Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.threadpool;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * This RCA reads ThreadPool_RejectionReqs from upstream metrics and it keeps track of\n+ * the amount of the time period(tp) when requests in the queues are continuously being rejected.\n+ * This RCA is marked as unhealthy if tp we find in write/search queue is above the threshold.\n+ */\n+public class QueueRejectionRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+  private static final Logger LOG = LogManager.getLogger(QueueRejectionRca.class);\n+  private static final long REJECTION_TIME_PERIOD_IN_MILLISECOND = TimeUnit.SECONDS.toMillis(300);\n+  private final int rcaPeriod;\n+  private final List<QueueRejectionCollector> queueRejectionCollectors;\n+  private int counter;\n+  protected Clock clock;\n+\n+  public <M extends Metric> QueueRejectionRca(final int rcaPeriod, M threadPool_RejectedReqs) {\n+    super(5);\n+    this.rcaPeriod = rcaPeriod;\n+    counter = 0;\n+    clock = Clock.systemUTC();\n+    queueRejectionCollectors = Collections.unmodifiableList(Arrays.asList(\n+        new QueueRejectionCollector(ThreadPoolEnum.WRITE_QUEUE, ThreadPoolType.WRITE,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND),\n+        new QueueRejectionCollector(ThreadPoolEnum.SEARCH_QUEUE, ThreadPoolType.SEARCH,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND)\n+    ));\n+  }\n+\n+  @VisibleForTesting\n+  public void setClock(Clock clock) {\n+    this.clock = clock;\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotNodeSummary> operate() {\n+    counter += 1;\n+    long currTimestamp = clock.millis();\n+    if (counter == rcaPeriod) {\n+      counter = 0;\n+      ClusterDetailsEventProcessor.NodeDetails currentNode = ClusterDetailsEventProcessor\n+          .getCurrentNodeDetails();\n+      HotNodeSummary nodeSummary = null;\n+      for (QueueRejectionCollector collector : queueRejectionCollectors) {\n+        collector.collect(currTimestamp);\n+        // if we've see thread pool rejection in the last 5 mins, the thread pool is considered as contended\n+        if (collector.isUnhealthy(currTimestamp)) {\n+          if (nodeSummary == null) {\n+            nodeSummary = new HotNodeSummary(currentNode.getId(), currentNode.getHostAddress());\n+          }\n+          nodeSummary.addNestedSummaryList(collector.generateSummary(currTimestamp));\n+        }\n+      }\n+      ResourceContext context;\n+      if (nodeSummary == null) {\n+        context = new ResourceContext(Resources.State.HEALTHY);\n+      }\n+      else {\n+        context = new ResourceContext(Resources.State.UNHEALTHY);\n+      }\n+      boolean isDataNode = !currentNode.getIsMasterNode();\n+      return new ResourceFlowUnit<>(currTimestamp, context, nodeSummary, isDataNode);\n+    }\n+    else {\n+      return new ResourceFlowUnit<>(currTimestamp);\n+    }\n+  }\n+\n+  //TODO: move this method back into the Rca base class\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    final List<FlowUnitMessage> flowUnitMessages =\n+        args.getWireHopper().readFromWire(args.getNode());\n+    List<ResourceFlowUnit<HotNodeSummary>> flowUnitList = new ArrayList<>();\n+    LOG.debug(\"rca: Executing fromWire: {}\", this.getClass().getSimpleName());\n+    for (FlowUnitMessage flowUnitMessage : flowUnitMessages) {\n+      flowUnitList.add(ResourceFlowUnit.buildFlowUnitFromWrapper(flowUnitMessage));\n+    }\n+    setFlowUnits(flowUnitList);\n+  }\n+\n+  /**\n+   * A collector class to collect rejection from each queue type\n+   */\n+  private static class QueueRejectionCollector {\n+    private final ResourceType threadPool;\n+    private final ThreadPoolType threadPoolMetric;\n+    private final Metric threadPool_RejectedReqs;\n+    private boolean hasRejection;\n+    private long rejectionTimestamp;\n+    private long rejectionTimePeriodThreshold;\n+\n+    public QueueRejectionCollector(final ThreadPoolEnum threadPool, final ThreadPoolType threadPoolMetric,\n+        final Metric threadPool_RejectedReqs, final long threshold) {\n+      this.threadPool = ResourceType.newBuilder().setThreadPool(threadPool).build();\n+      this.threadPoolMetric = threadPoolMetric;\n+      this.threadPool_RejectedReqs = threadPool_RejectedReqs;\n+      this.hasRejection = false;\n+      this.rejectionTimestamp = 0;\n+      this.rejectionTimePeriodThreshold = threshold;\n+    }\n+\n+    public void collect(final long currTimestamp) {\n+      for (MetricFlowUnit flowUnit : threadPool_RejectedReqs.getFlowUnits()) {\n+        if (flowUnit.isEmpty()) {\n+          continue;\n+        }\n+        double rejectCnt = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+            THREAD_POOL_TYPE.getField(), threadPoolMetric.toString(), MetricsDB.MAX);\n+        if (!Double.isNaN(rejectCnt)) {\n+          if (rejectCnt > 0) {\n+            if (!hasRejection) {\n+              rejectionTimestamp = currTimestamp;\n+            }\n+            hasRejection = true;\n+          }\n+          else {\n+            hasRejection = false;\n+          }\n+        }\n+        else {\n+          LOG.error(\"Failed to parse metric from threadpool {}\", threadPool.toString());\n+        }\n+      }\n+    }\n+\n+    public boolean isUnhealthy(final long currTimestamp) {\n+      return hasRejection && (currTimestamp - rejectionTimestamp) >= rejectionTimePeriodThreshold;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxNTc2NQ=="}, "originalCommit": {"oid": "bd48936ded36a2d960bc9212ac5592cb49f81cb0"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMzOTA5Mg==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/233#discussion_r440339092", "createdAt": "2020-06-15T17:38:55Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.threadpool;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * This RCA reads ThreadPool_RejectionReqs from upstream metrics and it keeps track of\n+ * the amount of the time period(tp) when requests in the queues are continuously being rejected.\n+ * This RCA is marked as unhealthy if tp we find in write/search queue is above the threshold.\n+ */\n+public class QueueRejectionRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+  private static final Logger LOG = LogManager.getLogger(QueueRejectionRca.class);\n+  private static final long REJECTION_TIME_PERIOD_IN_MILLISECOND = TimeUnit.SECONDS.toMillis(300);\n+  private final int rcaPeriod;\n+  private final List<QueueRejectionCollector> queueRejectionCollectors;\n+  private int counter;\n+  protected Clock clock;\n+\n+  public <M extends Metric> QueueRejectionRca(final int rcaPeriod, M threadPool_RejectedReqs) {\n+    super(5);\n+    this.rcaPeriod = rcaPeriod;\n+    counter = 0;\n+    clock = Clock.systemUTC();\n+    queueRejectionCollectors = Collections.unmodifiableList(Arrays.asList(\n+        new QueueRejectionCollector(ThreadPoolEnum.WRITE_QUEUE, ThreadPoolType.WRITE,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND),\n+        new QueueRejectionCollector(ThreadPoolEnum.SEARCH_QUEUE, ThreadPoolType.SEARCH,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND)\n+    ));\n+  }\n+\n+  @VisibleForTesting\n+  public void setClock(Clock clock) {\n+    this.clock = clock;\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotNodeSummary> operate() {\n+    counter += 1;\n+    long currTimestamp = clock.millis();\n+    if (counter == rcaPeriod) {\n+      counter = 0;\n+      ClusterDetailsEventProcessor.NodeDetails currentNode = ClusterDetailsEventProcessor\n+          .getCurrentNodeDetails();\n+      HotNodeSummary nodeSummary = null;\n+      for (QueueRejectionCollector collector : queueRejectionCollectors) {\n+        collector.collect(currTimestamp);\n+        // if we've see thread pool rejection in the last 5 mins, the thread pool is considered as contended\n+        if (collector.isUnhealthy(currTimestamp)) {\n+          if (nodeSummary == null) {\n+            nodeSummary = new HotNodeSummary(currentNode.getId(), currentNode.getHostAddress());\n+          }\n+          nodeSummary.addNestedSummaryList(collector.generateSummary(currTimestamp));\n+        }\n+      }\n+      ResourceContext context;\n+      if (nodeSummary == null) {\n+        context = new ResourceContext(Resources.State.HEALTHY);\n+      }\n+      else {\n+        context = new ResourceContext(Resources.State.UNHEALTHY);\n+      }\n+      boolean isDataNode = !currentNode.getIsMasterNode();\n+      return new ResourceFlowUnit<>(currTimestamp, context, nodeSummary, isDataNode);\n+    }\n+    else {\n+      return new ResourceFlowUnit<>(currTimestamp);\n+    }\n+  }\n+\n+  //TODO: move this method back into the Rca base class\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    final List<FlowUnitMessage> flowUnitMessages =\n+        args.getWireHopper().readFromWire(args.getNode());\n+    List<ResourceFlowUnit<HotNodeSummary>> flowUnitList = new ArrayList<>();\n+    LOG.debug(\"rca: Executing fromWire: {}\", this.getClass().getSimpleName());\n+    for (FlowUnitMessage flowUnitMessage : flowUnitMessages) {\n+      flowUnitList.add(ResourceFlowUnit.buildFlowUnitFromWrapper(flowUnitMessage));\n+    }\n+    setFlowUnits(flowUnitList);\n+  }\n+\n+  /**\n+   * A collector class to collect rejection from each queue type\n+   */\n+  private static class QueueRejectionCollector {\n+    private final ResourceType threadPool;\n+    private final ThreadPoolType threadPoolMetric;\n+    private final Metric threadPool_RejectedReqs;\n+    private boolean hasRejection;\n+    private long rejectionTimestamp;\n+    private long rejectionTimePeriodThreshold;\n+\n+    public QueueRejectionCollector(final ThreadPoolEnum threadPool, final ThreadPoolType threadPoolMetric,\n+        final Metric threadPool_RejectedReqs, final long threshold) {\n+      this.threadPool = ResourceType.newBuilder().setThreadPool(threadPool).build();\n+      this.threadPoolMetric = threadPoolMetric;\n+      this.threadPool_RejectedReqs = threadPool_RejectedReqs;\n+      this.hasRejection = false;\n+      this.rejectionTimestamp = 0;\n+      this.rejectionTimePeriodThreshold = threshold;\n+    }\n+\n+    public void collect(final long currTimestamp) {\n+      for (MetricFlowUnit flowUnit : threadPool_RejectedReqs.getFlowUnits()) {\n+        if (flowUnit.isEmpty()) {\n+          continue;\n+        }\n+        double rejectCnt = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+            THREAD_POOL_TYPE.getField(), threadPoolMetric.toString(), MetricsDB.MAX);\n+        if (!Double.isNaN(rejectCnt)) {\n+          if (rejectCnt > 0) {\n+            if (!hasRejection) {\n+              rejectionTimestamp = currTimestamp;\n+            }\n+            hasRejection = true;\n+          }\n+          else {\n+            hasRejection = false;\n+          }\n+        }\n+        else {\n+          LOG.error(\"Failed to parse metric from threadpool {}\", threadPool.toString());\n+        }\n+      }\n+    }\n+\n+    public boolean isUnhealthy(final long currTimestamp) {\n+      return hasRejection && (currTimestamp - rejectionTimestamp) >= rejectionTimePeriodThreshold;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxNTc2NQ=="}, "originalCommit": {"oid": "bd48936ded36a2d960bc9212ac5592cb49f81cb0"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjEyOTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNTozNzowMVrOGi3oNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNTozNzowMVrOGi3oNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTIxNjE4Mw==", "bodyText": "So this effectively resets the hasRejection status if any data point does not have rejections. Threadpool is contended only if it rejects for all data points, right?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/233#discussion_r439216183", "createdAt": "2020-06-12T05:37:01Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.threadpool;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * This RCA reads ThreadPool_RejectionReqs from upstream metrics and it keeps track of\n+ * the amount of the time period(tp) when requests in the queues are continuously being rejected.\n+ * This RCA is marked as unhealthy if tp we find in write/search queue is above the threshold.\n+ */\n+public class QueueRejectionRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+  private static final Logger LOG = LogManager.getLogger(QueueRejectionRca.class);\n+  private static final long REJECTION_TIME_PERIOD_IN_MILLISECOND = TimeUnit.SECONDS.toMillis(300);\n+  private final int rcaPeriod;\n+  private final List<QueueRejectionCollector> queueRejectionCollectors;\n+  private int counter;\n+  protected Clock clock;\n+\n+  public <M extends Metric> QueueRejectionRca(final int rcaPeriod, M threadPool_RejectedReqs) {\n+    super(5);\n+    this.rcaPeriod = rcaPeriod;\n+    counter = 0;\n+    clock = Clock.systemUTC();\n+    queueRejectionCollectors = Collections.unmodifiableList(Arrays.asList(\n+        new QueueRejectionCollector(ThreadPoolEnum.WRITE_QUEUE, ThreadPoolType.WRITE,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND),\n+        new QueueRejectionCollector(ThreadPoolEnum.SEARCH_QUEUE, ThreadPoolType.SEARCH,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND)\n+    ));\n+  }\n+\n+  @VisibleForTesting\n+  public void setClock(Clock clock) {\n+    this.clock = clock;\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotNodeSummary> operate() {\n+    counter += 1;\n+    long currTimestamp = clock.millis();\n+    if (counter == rcaPeriod) {\n+      counter = 0;\n+      ClusterDetailsEventProcessor.NodeDetails currentNode = ClusterDetailsEventProcessor\n+          .getCurrentNodeDetails();\n+      HotNodeSummary nodeSummary = null;\n+      for (QueueRejectionCollector collector : queueRejectionCollectors) {\n+        collector.collect(currTimestamp);\n+        // if we've see thread pool rejection in the last 5 mins, the thread pool is considered as contended\n+        if (collector.isUnhealthy(currTimestamp)) {\n+          if (nodeSummary == null) {\n+            nodeSummary = new HotNodeSummary(currentNode.getId(), currentNode.getHostAddress());\n+          }\n+          nodeSummary.addNestedSummaryList(collector.generateSummary(currTimestamp));\n+        }\n+      }\n+      ResourceContext context;\n+      if (nodeSummary == null) {\n+        context = new ResourceContext(Resources.State.HEALTHY);\n+      }\n+      else {\n+        context = new ResourceContext(Resources.State.UNHEALTHY);\n+      }\n+      boolean isDataNode = !currentNode.getIsMasterNode();\n+      return new ResourceFlowUnit<>(currTimestamp, context, nodeSummary, isDataNode);\n+    }\n+    else {\n+      return new ResourceFlowUnit<>(currTimestamp);\n+    }\n+  }\n+\n+  //TODO: move this method back into the Rca base class\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    final List<FlowUnitMessage> flowUnitMessages =\n+        args.getWireHopper().readFromWire(args.getNode());\n+    List<ResourceFlowUnit<HotNodeSummary>> flowUnitList = new ArrayList<>();\n+    LOG.debug(\"rca: Executing fromWire: {}\", this.getClass().getSimpleName());\n+    for (FlowUnitMessage flowUnitMessage : flowUnitMessages) {\n+      flowUnitList.add(ResourceFlowUnit.buildFlowUnitFromWrapper(flowUnitMessage));\n+    }\n+    setFlowUnits(flowUnitList);\n+  }\n+\n+  /**\n+   * A collector class to collect rejection from each queue type\n+   */\n+  private static class QueueRejectionCollector {\n+    private final ResourceType threadPool;\n+    private final ThreadPoolType threadPoolMetric;\n+    private final Metric threadPool_RejectedReqs;\n+    private boolean hasRejection;\n+    private long rejectionTimestamp;\n+    private long rejectionTimePeriodThreshold;\n+\n+    public QueueRejectionCollector(final ThreadPoolEnum threadPool, final ThreadPoolType threadPoolMetric,\n+        final Metric threadPool_RejectedReqs, final long threshold) {\n+      this.threadPool = ResourceType.newBuilder().setThreadPool(threadPool).build();\n+      this.threadPoolMetric = threadPoolMetric;\n+      this.threadPool_RejectedReqs = threadPool_RejectedReqs;\n+      this.hasRejection = false;\n+      this.rejectionTimestamp = 0;\n+      this.rejectionTimePeriodThreshold = threshold;\n+    }\n+\n+    public void collect(final long currTimestamp) {\n+      for (MetricFlowUnit flowUnit : threadPool_RejectedReqs.getFlowUnits()) {\n+        if (flowUnit.isEmpty()) {\n+          continue;\n+        }\n+        double rejectCnt = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+            THREAD_POOL_TYPE.getField(), threadPoolMetric.toString(), MetricsDB.MAX);\n+        if (!Double.isNaN(rejectCnt)) {\n+          if (rejectCnt > 0) {\n+            if (!hasRejection) {\n+              rejectionTimestamp = currTimestamp;\n+            }\n+            hasRejection = true;\n+          }\n+          else {\n+            hasRejection = false;\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd48936ded36a2d960bc9212ac5592cb49f81cb0"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzMyMzAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMjo0OFrOHMPQEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzoyMjo0OFrOHMPQEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5NDgzMg==", "bodyText": "In a dedicated master cluster, if something is not master, it maybe a standby master or a datatnode. If we are interested in data nodes only, then we should check for getRole() == NodeRole.DATA.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/233#discussion_r482594832", "createdAt": "2020-09-02T23:22:48Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.threadpool;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * This RCA reads ThreadPool_RejectionReqs from upstream metrics and maintain collectors for each\n+ * thread pool queue type(currently we only support write/search queue). Each collector keeps track of\n+ * the time window period(tp) where we repeatedly see rejections for the last tp duration.\n+ * This RCA is marked as unhealthy if tp we find tp is above the threshold(300 seconds).\n+ */\n+public class QueueRejectionRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+  private static final Logger LOG = LogManager.getLogger(QueueRejectionRca.class);\n+  private static final long REJECTION_TIME_PERIOD_IN_MILLISECOND = TimeUnit.SECONDS.toMillis(300);\n+  private final int rcaPeriod;\n+  private final List<QueueRejectionCollector> queueRejectionCollectors;\n+  private int counter;\n+  protected Clock clock;\n+\n+  public <M extends Metric> QueueRejectionRca(final int rcaPeriod, M threadPool_RejectedReqs) {\n+    super(5);\n+    this.rcaPeriod = rcaPeriod;\n+    counter = 0;\n+    clock = Clock.systemUTC();\n+    queueRejectionCollectors = Collections.unmodifiableList(Arrays.asList(\n+        new QueueRejectionCollector(ThreadPoolEnum.WRITE_QUEUE, ThreadPoolType.WRITE,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND),\n+        new QueueRejectionCollector(ThreadPoolEnum.SEARCH_QUEUE, ThreadPoolType.SEARCH,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND)\n+    ));\n+  }\n+\n+  @VisibleForTesting\n+  public void setClock(Clock clock) {\n+    this.clock = clock;\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotNodeSummary> operate() {\n+    counter += 1;\n+    long currTimestamp = clock.millis();\n+    // collect rejection metrics\n+    for (QueueRejectionCollector collector : queueRejectionCollectors) {\n+      collector.collect(currTimestamp);\n+    }\n+    if (counter == rcaPeriod) {\n+      counter = 0;\n+      ClusterDetailsEventProcessor.NodeDetails currentNode = ClusterDetailsEventProcessor\n+          .getCurrentNodeDetails();\n+      HotNodeSummary nodeSummary = null;\n+      for (QueueRejectionCollector collector : queueRejectionCollectors) {\n+        // if we've see thread pool rejection in the last 5 mins, the thread pool is considered as contended\n+        if (collector.isUnhealthy(currTimestamp)) {\n+          if (nodeSummary == null) {\n+            nodeSummary = new HotNodeSummary(currentNode.getId(), currentNode.getHostAddress());\n+          }\n+          nodeSummary.appendNestedSummary(collector.generateSummary(currTimestamp));\n+        }\n+      }\n+      ResourceContext context;\n+      if (nodeSummary == null) {\n+        context = new ResourceContext(Resources.State.HEALTHY);\n+      }\n+      else {\n+        context = new ResourceContext(Resources.State.UNHEALTHY);\n+      }\n+      boolean isDataNode = !currentNode.getIsMasterNode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cb1034da3c0ccc5b413c3e00794d807748bf528"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNzM1Nzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzozNTo1NFrOHMPlWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzozNTo1NFrOHMPlWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYwMDI4MQ==", "bodyText": "If we fail to parse metrics from the threadpool, should we be safe and reset hasrejection ? Or else, in case, if the rejection was reported and then all subsequent values are Nan for the rest of the 5 minutes, we will still change the queue size.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/233#discussion_r482600281", "createdAt": "2020-09-02T23:35:54Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/threadpool/QueueRejectionRca.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.threadpool;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * This RCA reads ThreadPool_RejectionReqs from upstream metrics and maintain collectors for each\n+ * thread pool queue type(currently we only support write/search queue). Each collector keeps track of\n+ * the time window period(tp) where we repeatedly see rejections for the last tp duration.\n+ * This RCA is marked as unhealthy if tp we find tp is above the threshold(300 seconds).\n+ */\n+public class QueueRejectionRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+  private static final Logger LOG = LogManager.getLogger(QueueRejectionRca.class);\n+  private static final long REJECTION_TIME_PERIOD_IN_MILLISECOND = TimeUnit.SECONDS.toMillis(300);\n+  private final int rcaPeriod;\n+  private final List<QueueRejectionCollector> queueRejectionCollectors;\n+  private int counter;\n+  protected Clock clock;\n+\n+  public <M extends Metric> QueueRejectionRca(final int rcaPeriod, M threadPool_RejectedReqs) {\n+    super(5);\n+    this.rcaPeriod = rcaPeriod;\n+    counter = 0;\n+    clock = Clock.systemUTC();\n+    queueRejectionCollectors = Collections.unmodifiableList(Arrays.asList(\n+        new QueueRejectionCollector(ThreadPoolEnum.WRITE_QUEUE, ThreadPoolType.WRITE,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND),\n+        new QueueRejectionCollector(ThreadPoolEnum.SEARCH_QUEUE, ThreadPoolType.SEARCH,\n+            threadPool_RejectedReqs, REJECTION_TIME_PERIOD_IN_MILLISECOND)\n+    ));\n+  }\n+\n+  @VisibleForTesting\n+  public void setClock(Clock clock) {\n+    this.clock = clock;\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotNodeSummary> operate() {\n+    counter += 1;\n+    long currTimestamp = clock.millis();\n+    // collect rejection metrics\n+    for (QueueRejectionCollector collector : queueRejectionCollectors) {\n+      collector.collect(currTimestamp);\n+    }\n+    if (counter == rcaPeriod) {\n+      counter = 0;\n+      ClusterDetailsEventProcessor.NodeDetails currentNode = ClusterDetailsEventProcessor\n+          .getCurrentNodeDetails();\n+      HotNodeSummary nodeSummary = null;\n+      for (QueueRejectionCollector collector : queueRejectionCollectors) {\n+        // if we've see thread pool rejection in the last 5 mins, the thread pool is considered as contended\n+        if (collector.isUnhealthy(currTimestamp)) {\n+          if (nodeSummary == null) {\n+            nodeSummary = new HotNodeSummary(currentNode.getId(), currentNode.getHostAddress());\n+          }\n+          nodeSummary.appendNestedSummary(collector.generateSummary(currTimestamp));\n+        }\n+      }\n+      ResourceContext context;\n+      if (nodeSummary == null) {\n+        context = new ResourceContext(Resources.State.HEALTHY);\n+      }\n+      else {\n+        context = new ResourceContext(Resources.State.UNHEALTHY);\n+      }\n+      boolean isDataNode = !currentNode.getIsMasterNode();\n+      return new ResourceFlowUnit<>(currTimestamp, context, nodeSummary, isDataNode);\n+    }\n+    else {\n+      return new ResourceFlowUnit<>(currTimestamp);\n+    }\n+  }\n+\n+  // TODO: move this method back into the Rca base class\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    final List<FlowUnitMessage> flowUnitMessages =\n+        args.getWireHopper().readFromWire(args.getNode());\n+    List<ResourceFlowUnit<HotNodeSummary>> flowUnitList = new ArrayList<>();\n+    LOG.debug(\"rca: Executing fromWire: {}\", this.getClass().getSimpleName());\n+    for (FlowUnitMessage flowUnitMessage : flowUnitMessages) {\n+      flowUnitList.add(ResourceFlowUnit.buildFlowUnitFromWrapper(flowUnitMessage));\n+    }\n+    setFlowUnits(flowUnitList);\n+  }\n+\n+  /**\n+   * A collector class to collect rejection from each queue type\n+   */\n+  private static class QueueRejectionCollector {\n+    private final ResourceType threadPool;\n+    private final ThreadPoolType threadPoolMetric;\n+    private final Metric threadPool_RejectedReqs;\n+    private boolean hasRejection;\n+    private long rejectionTimestamp;\n+    private long rejectionTimePeriodThreshold;\n+\n+    public QueueRejectionCollector(final ThreadPoolEnum threadPool, final ThreadPoolType threadPoolMetric,\n+        final Metric threadPool_RejectedReqs, final long threshold) {\n+      this.threadPool = ResourceType.newBuilder().setThreadPool(threadPool).build();\n+      this.threadPoolMetric = threadPoolMetric;\n+      this.threadPool_RejectedReqs = threadPool_RejectedReqs;\n+      this.hasRejection = false;\n+      this.rejectionTimestamp = 0;\n+      this.rejectionTimePeriodThreshold = threshold;\n+    }\n+\n+    public void collect(final long currTimestamp) {\n+      for (MetricFlowUnit flowUnit : threadPool_RejectedReqs.getFlowUnits()) {\n+        if (flowUnit.isEmpty()) {\n+          continue;\n+        }\n+        double rejectCnt = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+            THREAD_POOL_TYPE.getField(), threadPoolMetric.toString(), MetricsDB.MAX);\n+        if (!Double.isNaN(rejectCnt)) {\n+          if (rejectCnt > 0) {\n+            if (!hasRejection) {\n+              rejectionTimestamp = currTimestamp;\n+            }\n+            hasRejection = true;\n+          }\n+          else {\n+            hasRejection = false;\n+          }\n+        }\n+        else {\n+          LOG.error(\"Failed to parse metric from threadpool {}\", threadPool.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cb1034da3c0ccc5b413c3e00794d807748bf528"}, "originalPosition": 168}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2495, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}