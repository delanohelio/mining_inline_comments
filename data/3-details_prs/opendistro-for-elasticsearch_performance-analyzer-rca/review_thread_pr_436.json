{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODYxMTU3", "number": 436, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoxMTo0MFrOEnicLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTozNjo1N1rOEvg4Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODk0MTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoxMTo0MFrOHYL8dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoxMTo0MFrOHYL8dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyMzU3NA==", "bodyText": "Because the writer only emits the node local metrics, the node name is implicit. This is the reason we don't have it here. When we gather the metrics from all the nodes, it can be added. Because it is the same for all the metrics, we don't want to store it as it will save us bytes on the disk (as not having the SQLIte column) and bytes on the heap when we read the table into memory.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r495123574", "createdAt": "2020-09-25T17:11:40Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "diffHunk": "@@ -1100,4 +1100,50 @@ public String toString() {\n       public static final String PACKET_PER_SEC_VALUE = \"packets/s\";\n     }\n   }\n+\n+  public enum ShardStateDimension implements MetricDimension {\n+    SHARD_ID(CommonDimension.SHARD_ID.toString()),\n+    INDEX_NAME(CommonDimension.INDEX_NAME.toString()),\n+    SHARD_TYPE(Constants.SHARD_TYPE),\n+    NODE_NAME(Constants.NODE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODk1MzY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoxNTozNFrOHYMDzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNToxNzo0NlrOHgVt_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyNTQ1Mw==", "bodyText": "Although we are pretty bad at it as you can see from here :) , but in case it is possible, we try to follow this convention -\n<ResourceName(capitalized camel case)>_<stat name in Capitalized camel case>. SO for example, Shard_State_Unassigned->Shard_StateUnassigned`.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r495125453", "createdAt": "2020-09-25T17:15:34Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "diffHunk": "@@ -1100,4 +1100,50 @@ public String toString() {\n       public static final String PACKET_PER_SEC_VALUE = \"packets/s\";\n     }\n   }\n+\n+  public enum ShardStateDimension implements MetricDimension {\n+    SHARD_ID(CommonDimension.SHARD_ID.toString()),\n+    INDEX_NAME(CommonDimension.INDEX_NAME.toString()),\n+    SHARD_TYPE(Constants.SHARD_TYPE),\n+    NODE_NAME(Constants.NODE_NAME);\n+\n+    private final String value;\n+\n+    ShardStateDimension(String value) {\n+      this.value = value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return value;\n+    }\n+\n+    public static class Constants {\n+      public static final String NODE_NAME = \"NodeName\";\n+      public static final String SHARD_TYPE = \"ShardType\";\n+    }\n+  }\n+\n+  public enum ShardStateValue implements MetricValue {\n+    SHARD_STATE_UNASSIGNED(Constants.SHARD_STATE_UNASSIGNED),\n+    SHARD_STATE_ACTIVE(Constants.SHARD_STATE_ACTIVE),\n+    SHARD_STATE_INITIALIZING(Constants.SHARD_STATE_INITIALIZING);\n+\n+    private final String value;\n+\n+    ShardStateValue(String value) {\n+      this.value = value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return value;\n+    }\n+\n+    public static class Constants {\n+      public static final String SHARD_STATE_UNASSIGNED = \"Shard_State_Unassigned\";\n+      public static final String SHARD_STATE_ACTIVE = \"Shard_State_Active\";\n+      public static final String SHARD_STATE_INITIALIZING = \"Shard_State_Initializing\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3MjMxNg==", "bodyText": "Changed name to Shard_State", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r503672316", "createdAt": "2020-10-13T05:17:46Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "diffHunk": "@@ -1100,4 +1100,50 @@ public String toString() {\n       public static final String PACKET_PER_SEC_VALUE = \"packets/s\";\n     }\n   }\n+\n+  public enum ShardStateDimension implements MetricDimension {\n+    SHARD_ID(CommonDimension.SHARD_ID.toString()),\n+    INDEX_NAME(CommonDimension.INDEX_NAME.toString()),\n+    SHARD_TYPE(Constants.SHARD_TYPE),\n+    NODE_NAME(Constants.NODE_NAME);\n+\n+    private final String value;\n+\n+    ShardStateDimension(String value) {\n+      this.value = value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return value;\n+    }\n+\n+    public static class Constants {\n+      public static final String NODE_NAME = \"NodeName\";\n+      public static final String SHARD_TYPE = \"ShardType\";\n+    }\n+  }\n+\n+  public enum ShardStateValue implements MetricValue {\n+    SHARD_STATE_UNASSIGNED(Constants.SHARD_STATE_UNASSIGNED),\n+    SHARD_STATE_ACTIVE(Constants.SHARD_STATE_ACTIVE),\n+    SHARD_STATE_INITIALIZING(Constants.SHARD_STATE_INITIALIZING);\n+\n+    private final String value;\n+\n+    ShardStateValue(String value) {\n+      this.value = value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return value;\n+    }\n+\n+    public static class Constants {\n+      public static final String SHARD_STATE_UNASSIGNED = \"Shard_State_Unassigned\";\n+      public static final String SHARD_STATE_ACTIVE = \"Shard_State_Active\";\n+      public static final String SHARD_STATE_INITIALIZING = \"Shard_State_Initializing\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyNTQ1Mw=="}, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODk2MTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoxNzo1NFrOHYMIjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNToyODo1NFrOHgV6RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyNjY2OQ==", "bodyText": "It might be good to add a javadoc comment with a sample metric emitted in the writer files.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r495126669", "createdAt": "2020-09-25T17:17:54Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "diffHunk": "@@ -810,4 +810,199 @@ public static void emitNodeMetrics(\n           \"Total time taken for writing {} metrics metricsdb: {}\", tableName, mFinalT - mCurrT);\n     }\n   }\n+\n+  public static void emitShardStateMetric(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NTQ2MQ==", "bodyText": "Added", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r503675461", "createdAt": "2020-10-13T05:28:54Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "diffHunk": "@@ -810,4 +810,199 @@ public static void emitNodeMetrics(\n           \"Total time taken for writing {} metrics metricsdb: {}\", tableName, mFinalT - mCurrT);\n     }\n   }\n+\n+  public static void emitShardStateMetric(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyNjY2OQ=="}, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODk3ODM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ReaderMetricsProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoyMzoyMVrOHYMTSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNToyOToxN1rOHgV6sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyOTQxOQ==", "bodyText": "We will consume a lot of bytes on heap if we keep 4 snapshots around. Maybe 2 is good enough.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r495129419", "createdAt": "2020-09-25T17:23:21Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ReaderMetricsProcessor.java", "diffHunk": "@@ -71,8 +71,10 @@\n   private NavigableMap<Long, HttpRequestMetricsSnapshot> httpRqMetricsMap;\n   private NavigableMap<Long, MasterEventMetricsSnapshot> masterEventMetricsMap;\n   private Map<AllMetrics.MetricName, NavigableMap<Long, MemoryDBSnapshot>> nodeMetricsMap;\n+  private NavigableMap<Long, ShardStateMetricsSnapshot> shardStateMetricsMap;\n   private static final int MAX_DATABASES = 2;\n   private static final int OS_SNAPSHOTS = 4;\n+  private static final int SHARD_STATE_SNAPSHOTS = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NTU3MQ==", "bodyText": "Changed the value to 2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r503675571", "createdAt": "2020-10-13T05:29:17Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ReaderMetricsProcessor.java", "diffHunk": "@@ -71,8 +71,10 @@\n   private NavigableMap<Long, HttpRequestMetricsSnapshot> httpRqMetricsMap;\n   private NavigableMap<Long, MasterEventMetricsSnapshot> masterEventMetricsMap;\n   private Map<AllMetrics.MetricName, NavigableMap<Long, MemoryDBSnapshot>> nodeMetricsMap;\n+  private NavigableMap<Long, ShardStateMetricsSnapshot> shardStateMetricsMap;\n   private static final int MAX_DATABASES = 2;\n   private static final int OS_SNAPSHOTS = 4;\n+  private static final int SHARD_STATE_SNAPSHOTS = 4;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyOTQxOQ=="}, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODk4NDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoyNToxNVrOHYMXFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNToyODo0NVrOHgV6Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMDM4OQ==", "bodyText": "I am thinking if we can save on bytes by only accounting for unassigned and initializing shards (leaving out the active shards). What remains are the active shards and the happy case.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r495130389", "createdAt": "2020-09-25T17:25:15Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "diffHunk": "@@ -810,4 +810,199 @@ public static void emitNodeMetrics(\n           \"Total time taken for writing {} metrics metricsdb: {}\", tableName, mFinalT - mCurrT);\n     }\n   }\n+\n+  public static void emitShardStateMetric(\n+          MetricsDB metricsDB, ShardStateMetricsSnapshot shardStateMetricsSnapshot) {\n+    long mCurrT = System.currentTimeMillis();\n+    Result<Record> shardStateMetrics = shardStateMetricsSnapshot.fetchAggregatedShardStateMetrics();\n+\n+    List<String> dims =\n+            new ArrayList<String>() {\n+              {\n+                this.add(AllMetrics.ShardStateDimension.INDEX_NAME.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_ID.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_TYPE.toString());\n+                this.add(AllMetrics.ShardStateDimension.NODE_NAME.toString());\n+              }\n+            };\n+\n+    emitActiveShardStateMetric(metricsDB, shardStateMetrics, dims);\n+    emitInitializingShardStateMetric(metricsDB, shardStateMetrics, dims);\n+    emitUnassignedShardStateMetric(metricsDB, shardStateMetrics, dims);\n+\n+    long mFinalT = System.currentTimeMillis();\n+    LOG.debug(\n+            \"Total time taken for writing shard state event queue metrics metricsdb: {}\", mFinalT - mCurrT);\n+  }\n+\n+  public static void emitActiveShardStateMetric(MetricsDB metricsDB, Result<Record> res, List<String> dims) {\n+    metricsDB.createMetric(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NTQxNA==", "bodyText": "Published all shard states except Active", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r503675414", "createdAt": "2020-10-13T05:28:45Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "diffHunk": "@@ -810,4 +810,199 @@ public static void emitNodeMetrics(\n           \"Total time taken for writing {} metrics metricsdb: {}\", tableName, mFinalT - mCurrT);\n     }\n   }\n+\n+  public static void emitShardStateMetric(\n+          MetricsDB metricsDB, ShardStateMetricsSnapshot shardStateMetricsSnapshot) {\n+    long mCurrT = System.currentTimeMillis();\n+    Result<Record> shardStateMetrics = shardStateMetricsSnapshot.fetchAggregatedShardStateMetrics();\n+\n+    List<String> dims =\n+            new ArrayList<String>() {\n+              {\n+                this.add(AllMetrics.ShardStateDimension.INDEX_NAME.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_ID.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_TYPE.toString());\n+                this.add(AllMetrics.ShardStateDimension.NODE_NAME.toString());\n+              }\n+            };\n+\n+    emitActiveShardStateMetric(metricsDB, shardStateMetrics, dims);\n+    emitInitializingShardStateMetric(metricsDB, shardStateMetrics, dims);\n+    emitUnassignedShardStateMetric(metricsDB, shardStateMetrics, dims);\n+\n+    long mFinalT = System.currentTimeMillis();\n+    LOG.debug(\n+            \"Total time taken for writing shard state event queue metrics metricsdb: {}\", mFinalT - mCurrT);\n+  }\n+\n+  public static void emitActiveShardStateMetric(MetricsDB metricsDB, Result<Record> res, List<String> dims) {\n+    metricsDB.createMetric(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMDM4OQ=="}, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODk5ODUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzoyOTo0MFrOHYMgCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNToyOTozNFrOHgV7Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMjY4Mw==", "bodyText": "We can add a doc comment stating how a sample line looks like, what values we are expecting and so on ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r495132683", "createdAt": "2020-09-25T17:29:40Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class ShardStateMetricsProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(ShardStateMetricsProcessor.class);\n+    private ShardStateMetricsSnapshot shardStateMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private ShardStateMetricsProcessor(ShardStateMetricsSnapshot snapshot) {\n+        this.shardStateMetricsSnapshot = snapshot;\n+    }\n+\n+    static ShardStateMetricsProcessor buildShardStateMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, ShardStateMetricsSnapshot> shardStateEventMetricsMap) {\n+        ShardStateMetricsSnapshot shardStateSnap = shardStateEventMetricsMap.get(currWindowStartTime);\n+        if (shardStateSnap == null) {\n+            shardStateSnap = new ShardStateMetricsSnapshot(conn, currWindowStartTime);\n+            shardStateEventMetricsMap.put(currWindowStartTime, shardStateSnap);\n+        }\n+        return new ShardStateMetricsProcessor(shardStateSnap);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {\n+        this.handle = shardStateMetricsSnapshot.startBatchPut();\n+    }\n+\n+    @Override\n+    public void finalizeProcessing() {\n+        if (handle.size() > 0) {\n+            handle.execute();\n+        }\n+        LOG.debug(\"Final ShardStateEvents metrics {}\", shardStateMetricsSnapshot.fetchAll());\n+    }\n+\n+    @Override\n+    public void processEvent(Event event) {\n+        String[] lines = event.value.split(System.lineSeparator());\n+        for (String line : lines) {\n+            Map<String, String> shardStateMap = extractEntryData(line);\n+            if (!shardStateMap.containsKey(PerformanceAnalyzerMetrics.METRIC_CURRENT_TIME)) {\n+                handle.bind(\n+                        shardStateMap.get(AllMetrics.ShardStateDimension.INDEX_NAME.toString()),\n+                        shardStateMap.get(AllMetrics.ShardStateDimension.SHARD_ID.toString()),\n+                        shardStateMap.get(AllMetrics.ShardStateDimension.SHARD_TYPE.toString()),\n+                        shardStateMap.get(AllMetrics.ShardStateDimension.NODE_NAME.toString()),\n+                        Integer.parseInt(shardStateMap.get(AllMetrics.ShardStateValue.SHARD_STATE_ACTIVE.toString())),\n+                        Integer.parseInt(shardStateMap.get(AllMetrics.ShardStateValue.SHARD_STATE_INITIALIZING.toString())),\n+                        Integer.parseInt(shardStateMap.get(AllMetrics.ShardStateValue.SHARD_STATE_UNASSIGNED.toString())));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean shouldProcessEvent(Event event) {\n+        return event.key.contains(PerformanceAnalyzerMetrics.sShardStatePath);\n+    }\n+\n+    @Override\n+    public void commitBatchIfRequired() {\n+        if (handle.size() > BATCH_LIMIT) {\n+            handle.execute();\n+            handle = shardStateMetricsSnapshot.startBatchPut();\n+        }\n+    }\n+\n+    static Map<String, String> extractEntryData(String line) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NTY2Nw==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r503675667", "createdAt": "2020-10-13T05:29:34Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class ShardStateMetricsProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(ShardStateMetricsProcessor.class);\n+    private ShardStateMetricsSnapshot shardStateMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private ShardStateMetricsProcessor(ShardStateMetricsSnapshot snapshot) {\n+        this.shardStateMetricsSnapshot = snapshot;\n+    }\n+\n+    static ShardStateMetricsProcessor buildShardStateMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, ShardStateMetricsSnapshot> shardStateEventMetricsMap) {\n+        ShardStateMetricsSnapshot shardStateSnap = shardStateEventMetricsMap.get(currWindowStartTime);\n+        if (shardStateSnap == null) {\n+            shardStateSnap = new ShardStateMetricsSnapshot(conn, currWindowStartTime);\n+            shardStateEventMetricsMap.put(currWindowStartTime, shardStateSnap);\n+        }\n+        return new ShardStateMetricsProcessor(shardStateSnap);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {\n+        this.handle = shardStateMetricsSnapshot.startBatchPut();\n+    }\n+\n+    @Override\n+    public void finalizeProcessing() {\n+        if (handle.size() > 0) {\n+            handle.execute();\n+        }\n+        LOG.debug(\"Final ShardStateEvents metrics {}\", shardStateMetricsSnapshot.fetchAll());\n+    }\n+\n+    @Override\n+    public void processEvent(Event event) {\n+        String[] lines = event.value.split(System.lineSeparator());\n+        for (String line : lines) {\n+            Map<String, String> shardStateMap = extractEntryData(line);\n+            if (!shardStateMap.containsKey(PerformanceAnalyzerMetrics.METRIC_CURRENT_TIME)) {\n+                handle.bind(\n+                        shardStateMap.get(AllMetrics.ShardStateDimension.INDEX_NAME.toString()),\n+                        shardStateMap.get(AllMetrics.ShardStateDimension.SHARD_ID.toString()),\n+                        shardStateMap.get(AllMetrics.ShardStateDimension.SHARD_TYPE.toString()),\n+                        shardStateMap.get(AllMetrics.ShardStateDimension.NODE_NAME.toString()),\n+                        Integer.parseInt(shardStateMap.get(AllMetrics.ShardStateValue.SHARD_STATE_ACTIVE.toString())),\n+                        Integer.parseInt(shardStateMap.get(AllMetrics.ShardStateValue.SHARD_STATE_INITIALIZING.toString())),\n+                        Integer.parseInt(shardStateMap.get(AllMetrics.ShardStateValue.SHARD_STATE_UNASSIGNED.toString())));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean shouldProcessEvent(Event event) {\n+        return event.key.contains(PerformanceAnalyzerMetrics.sShardStatePath);\n+    }\n+\n+    @Override\n+    public void commitBatchIfRequired() {\n+        if (handle.size() > BATCH_LIMIT) {\n+            handle.execute();\n+            handle = shardStateMetricsSnapshot.startBatchPut();\n+        }\n+    }\n+\n+    static Map<String, String> extractEntryData(String line) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMjY4Mw=="}, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTAwMzAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzozMDo1MVrOHYMipA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTozMDoxOVrOHgV75g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMzM0OA==", "bodyText": "I am thinking, maybe we can statically load this as it is all constants ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r495133348", "createdAt": "2020-09-25T17:30:51Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshot.java", "diffHunk": "@@ -0,0 +1,286 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.DBUtils;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.sql.Connection;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.SQLDialect;\n+import org.jooq.SelectField;\n+import org.jooq.impl.DSL;\n+\n+public class ShardStateMetricsSnapshot implements Removable {\n+    private static final Logger LOG = LogManager.getLogger(ShardStateMetricsSnapshot.class);\n+    private final DSLContext create;\n+    private final String tableName;\n+    private static final Long EXPIRE_AFTER = 1200000L;\n+    private List<Field<?>> columns;\n+\n+    public ShardStateMetricsSnapshot(Connection conn, Long windowStartTime) {\n+        this.create = DSL.using(conn, SQLDialect.SQLITE);\n+        this.tableName = \"shard_state_\" + windowStartTime;\n+\n+        this.columns =\n+                new ArrayList<Field<?>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3NTg3OA==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r503675878", "createdAt": "2020-10-13T05:30:19Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshot.java", "diffHunk": "@@ -0,0 +1,286 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.DBUtils;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.sql.Connection;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.SQLDialect;\n+import org.jooq.SelectField;\n+import org.jooq.impl.DSL;\n+\n+public class ShardStateMetricsSnapshot implements Removable {\n+    private static final Logger LOG = LogManager.getLogger(ShardStateMetricsSnapshot.class);\n+    private final DSLContext create;\n+    private final String tableName;\n+    private static final Long EXPIRE_AFTER = 1200000L;\n+    private List<Field<?>> columns;\n+\n+    public ShardStateMetricsSnapshot(Connection conn, Long windowStartTime) {\n+        this.create = DSL.using(conn, SQLDialect.SQLITE);\n+        this.tableName = \"shard_state_\" + windowStartTime;\n+\n+        this.columns =\n+                new ArrayList<Field<?>>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMzM0OA=="}, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTAwNzY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshotTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzozMjoyMVrOHYMlrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzozMjoyMVrOHYMlrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNDEyNw==", "bodyText": "nit: new line in the end ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r495134127", "createdAt": "2020-09-25T17:32:21Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshotTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import org.jooq.BatchBindStep;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ShardStateMetricsSnapshotTest {\n+    private static final String DB_URL = \"jdbc:sqlite:\";\n+    private Connection conn;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        Class.forName(\"org.sqlite.JDBC\");\n+        System.setProperty(\"java.io.tmpdir\", \"/tmp\");\n+        conn = DriverManager.getConnection(DB_URL);\n+    }\n+\n+    @Test\n+    public void testPutMetrics() {\n+        ShardStateMetricsSnapshot shardStateMetricsSnapshot =\n+                new ShardStateMetricsSnapshot(conn, 1535065195000L);\n+        BatchBindStep handle = shardStateMetricsSnapshot.startBatchPut();\n+\n+        handle.bind(\"indexName\", \"shardId\", \"primary\",\"nodeName\", 1, 0, 0);\n+        handle.execute();\n+        Result<Record> rt = shardStateMetricsSnapshot.fetchAggregatedShardStateMetrics();\n+\n+        assertEquals(1, rt.size());\n+        Double shard_active = Double.parseDouble(rt.get(0).get(\"sum_\" + AllMetrics.ShardStateValue.SHARD_STATE_ACTIVE\n+                .toString()).toString());\n+        assertEquals(\n+                1.0, shard_active.doubleValue(),0);\n+        assertEquals(\n+                \"indexName\", rt.get(0).get(AllMetrics.ShardStateDimension.INDEX_NAME.toString()));\n+        assertEquals(\n+                \"shardId\",\n+                rt.get(0).get(AllMetrics.ShardStateDimension.SHARD_ID.toString()));\n+        assertEquals(\n+                \"primary\",\n+                rt.get(0).get(AllMetrics.ShardStateDimension.SHARD_TYPE.toString()));\n+        assertEquals(\n+                \"nodeName\",\n+                rt.get(0).get(AllMetrics.ShardStateDimension.NODE_NAME.toString()));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTAxNjMwOnYy", "diffSide": "RIGHT", "path": "src/test/resources/reader/1566413960000", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzozNToxN1rOHYMrGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjo1NTozMlrOHf9juQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNTUxNQ==", "bodyText": "Given a shard can only be in one of the three states, can we use a key like shard_state and the value can be the state it is in ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r495135515", "createdAt": "2020-09-25T17:35:17Z", "author": {"login": "yojs"}, "path": "src/test/resources/reader/1566413960000", "diffHunk": "@@ -5,6 +5,14 @@\n {\"DestAddr\":\"00000000000000000000000000000000\",\"Net_TCP_NumFlows\":4,\"Net_TCP_TxQ\":0.0,\"Net_TCP_RxQ\":0.0,\"Net_TCP_Lost\":0.0,\"Net_TCP_SendCWND\":10.0,\"Net_TCP_SSThresh\":0.0}\n {\"DestAddr\":\"0000000000000000FFFF0000534ED40A\",\"Net_TCP_NumFlows\":26,\"Net_TCP_TxQ\":0.0,\"Net_TCP_RxQ\":0.0,\"Net_TCP_Lost\":0.0,\"Net_TCP_SendCWND\":14.461538461538462,\"Net_TCP_SSThresh\":13.153846153846153}\n $\n+^shard_state_metrics\n+{\"current_time\":1566413936488}\n+{\"IndexName\":\"pmc\",\"ShardID\":2,\"ShardType\":\"primary\",\"NodeName\":\"elasticsearch2\",\"Shard_State_Active\":1,\"Shard_State_Initializing\":0,\"Shard_State_Unassigned\":0}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNTI3NQ==", "bodyText": "This was done to make it more clear and remove ambiguity of the possible values of Shard State.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r495735275", "createdAt": "2020-09-28T07:20:01Z", "author": {"login": "amathur1893"}, "path": "src/test/resources/reader/1566413960000", "diffHunk": "@@ -5,6 +5,14 @@\n {\"DestAddr\":\"00000000000000000000000000000000\",\"Net_TCP_NumFlows\":4,\"Net_TCP_TxQ\":0.0,\"Net_TCP_RxQ\":0.0,\"Net_TCP_Lost\":0.0,\"Net_TCP_SendCWND\":10.0,\"Net_TCP_SSThresh\":0.0}\n {\"DestAddr\":\"0000000000000000FFFF0000534ED40A\",\"Net_TCP_NumFlows\":26,\"Net_TCP_TxQ\":0.0,\"Net_TCP_RxQ\":0.0,\"Net_TCP_Lost\":0.0,\"Net_TCP_SendCWND\":14.461538461538462,\"Net_TCP_SSThresh\":13.153846153846153}\n $\n+^shard_state_metrics\n+{\"current_time\":1566413936488}\n+{\"IndexName\":\"pmc\",\"ShardID\":2,\"ShardType\":\"primary\",\"NodeName\":\"elasticsearch2\",\"Shard_State_Active\":1,\"Shard_State_Initializing\":0,\"Shard_State_Unassigned\":0}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNTUxNQ=="}, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI3NjQ3Mw==", "bodyText": "Changed the whole structure.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r503276473", "createdAt": "2020-10-12T12:55:32Z", "author": {"login": "amathur1893"}, "path": "src/test/resources/reader/1566413960000", "diffHunk": "@@ -5,6 +5,14 @@\n {\"DestAddr\":\"00000000000000000000000000000000\",\"Net_TCP_NumFlows\":4,\"Net_TCP_TxQ\":0.0,\"Net_TCP_RxQ\":0.0,\"Net_TCP_Lost\":0.0,\"Net_TCP_SendCWND\":10.0,\"Net_TCP_SSThresh\":0.0}\n {\"DestAddr\":\"0000000000000000FFFF0000534ED40A\",\"Net_TCP_NumFlows\":26,\"Net_TCP_TxQ\":0.0,\"Net_TCP_RxQ\":0.0,\"Net_TCP_Lost\":0.0,\"Net_TCP_SendCWND\":14.461538461538462,\"Net_TCP_SSThresh\":13.153846153846153}\n $\n+^shard_state_metrics\n+{\"current_time\":1566413936488}\n+{\"IndexName\":\"pmc\",\"ShardID\":2,\"ShardType\":\"primary\",\"NodeName\":\"elasticsearch2\",\"Shard_State_Active\":1,\"Shard_State_Initializing\":0,\"Shard_State_Unassigned\":0}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzNTUxNQ=="}, "originalCommit": {"oid": "b67a6b49949d64c82c80e92b4f5487a626e7290d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQyODIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collectors/PerformanceAnalyzerMetricsCollector.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMDo1Mjo0OFrOHkhOVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNToyMTowM1rOHkrCfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NTEyNg==", "bodyText": "can we change this to a metric ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508055126", "createdAt": "2020-10-19T20:52:48Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collectors/PerformanceAnalyzerMetricsCollector.java", "diffHunk": "@@ -65,6 +66,7 @@ public void run() {\n           () -> StatExceptionCode.OTHER_COLLECTION_ERROR.toString());\n       StatsCollector.instance().logException(StatExceptionCode.OTHER_COLLECTION_ERROR);\n     } finally {\n+      LOG.debug(\"{} took {} time to execute\", collectorName, System.nanoTime() - startTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MDA5MA==", "bodyText": "+1, it would be good to have a \"timetook\" metric to indicate the time taken for metric collection.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508060090", "createdAt": "2020-10-19T21:02:10Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collectors/PerformanceAnalyzerMetricsCollector.java", "diffHunk": "@@ -65,6 +66,7 @@ public void run() {\n           () -> StatExceptionCode.OTHER_COLLECTION_ERROR.toString());\n       StatsCollector.instance().logException(StatExceptionCode.OTHER_COLLECTION_ERROR);\n     } finally {\n+      LOG.debug(\"{} took {} time to execute\", collectorName, System.nanoTime() - startTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NTEyNg=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxNTkzNQ==", "bodyText": "Already made the change in PA PR - opendistro-for-elasticsearch/performance-analyzer#212", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508215935", "createdAt": "2020-10-20T05:21:03Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collectors/PerformanceAnalyzerMetricsCollector.java", "diffHunk": "@@ -65,6 +66,7 @@ public void run() {\n           () -> StatExceptionCode.OTHER_COLLECTION_ERROR.toString());\n       StatsCollector.instance().logException(StatExceptionCode.OTHER_COLLECTION_ERROR);\n     } finally {\n+      LOG.debug(\"{} took {} time to execute\", collectorName, System.nanoTime() - startTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA1NTEyNg=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQ3MzU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTowNjowNVrOHkhptQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNTo0MTo0MFrOHkrcAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MjEzMw==", "bodyText": "Can we add some documentation here? For example CacheConfigDimension :\n  /*\n   * column names of Cache_MaxSize table\n   * cache type | sum | avg | max | min |\n   *\n   * <p>Example:\n   * Field Data Cache|26214400.0|26214400.0|26214400.0|26214400.0\n   * Shard Request Cache|80181985.0|80181985.0|80181985.0|80181985.0\n   */", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508062133", "createdAt": "2020-10-19T21:06:05Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "diffHunk": "@@ -1154,6 +1154,50 @@ public String toString() {\n     }\n   }\n \n+  public enum ShardStateDimension implements MetricDimension {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIyMjQ2Ng==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508222466", "createdAt": "2020-10-20T05:41:40Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "diffHunk": "@@ -1154,6 +1154,50 @@ public String toString() {\n     }\n   }\n \n+  public enum ShardStateDimension implements MetricDimension {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2MjEzMw=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQ4NDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/PerformanceAnalyzerMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTowOTozOFrOHkhweQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxOTozMVrOHksPBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2Mzg2NQ==", "bodyText": "I am wondering if a better place for these constants will be an enum within AllMetrics.java", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508063865", "createdAt": "2020-10-19T21:09:38Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/PerformanceAnalyzerMetrics.java", "diffHunk": "@@ -60,6 +61,8 @@\n   public static final String MASTER_CURRENT = \"current\";\n   public static final String MASTER_META_DATA = \"metadata\";\n   public static final String METRIC_CURRENT_TIME = \"current_time\";\n+  public static final String SHARD_PRIMARY = \"p\";\n+  public static final String SHARD_REPLICA = \"r\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNTUyNQ==", "bodyText": "Changed it to AllMetrics", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508235525", "createdAt": "2020-10-20T06:19:31Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/PerformanceAnalyzerMetrics.java", "diffHunk": "@@ -60,6 +61,8 @@\n   public static final String MASTER_CURRENT = \"current\";\n   public static final String MASTER_META_DATA = \"metadata\";\n   public static final String METRIC_CURRENT_TIME = \"current_time\";\n+  public static final String SHARD_PRIMARY = \"p\";\n+  public static final String SHARD_REPLICA = \"r\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2Mzg2NQ=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjQ4NjcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/model/MetricsModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToxMDoxNlrOHkhxwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoyMjowOFrOHksTFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2NDE5NA==", "bodyText": "Indentation looks off from line 344", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508064194", "createdAt": "2020-10-19T21:10:16Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/model/MetricsModel.java", "diffHunk": "@@ -340,6 +340,11 @@\n         new MetricAttributes(\n             MetricUnits.MILLISECOND.toString(), AllMetrics.MasterMetricDimensions.values()));\n \n+    allMetricsInitializer.put(\n+            AllMetrics.ShardStateValue.SHARD_STATE.toString(),\n+            new MetricAttributes(\n+                    MetricUnits.COUNT.toString(), AllMetrics.ShardStateDimension.values()));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjU2Nw==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508236567", "createdAt": "2020-10-20T06:22:08Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/model/MetricsModel.java", "diffHunk": "@@ -340,6 +340,11 @@\n         new MetricAttributes(\n             MetricUnits.MILLISECOND.toString(), AllMetrics.MasterMetricDimensions.values()));\n \n+    allMetricsInitializer.put(\n+            AllMetrics.ShardStateValue.SHARD_STATE.toString(),\n+            new MetricAttributes(\n+                    MetricUnits.COUNT.toString(), AllMetrics.ShardStateDimension.values()));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2NDE5NA=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjUxNDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToxODoyNlrOHkiCHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoyMzo0OVrOHksVew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2ODM4MA==", "bodyText": "dims can be made a static variable rather than initializing an array list on each emitShardStateMetric execution.\nRefer this", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508068380", "createdAt": "2020-10-19T21:18:26Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "diffHunk": "@@ -847,4 +847,79 @@ public static void emitNodeMetrics(\n           \"Total time taken for writing {} metrics metricsdb: {}\", tableName, mFinalT - mCurrT);\n     }\n   }\n+\n+\n+  public static void emitShardStateMetric(\n+          MetricsDB metricsDB, ShardStateMetricsSnapshot shardStateMetricsSnapshot) {\n+    long mCurrT = System.currentTimeMillis();\n+    Result<Record> shardStateMetrics = shardStateMetricsSnapshot.fetchAggregatedShardStateMetrics();\n+    List<String> dims =\n+            new ArrayList<String>() {\n+              {\n+                this.add(AllMetrics.ShardStateDimension.INDEX_NAME.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_ID.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_TYPE.toString());\n+                this.add(AllMetrics.ShardStateDimension.NODE_NAME.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_STATE.toString());\n+              }\n+            };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNzE3OQ==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508237179", "createdAt": "2020-10-20T06:23:49Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "diffHunk": "@@ -847,4 +847,79 @@ public static void emitNodeMetrics(\n           \"Total time taken for writing {} metrics metricsdb: {}\", tableName, mFinalT - mCurrT);\n     }\n   }\n+\n+\n+  public static void emitShardStateMetric(\n+          MetricsDB metricsDB, ShardStateMetricsSnapshot shardStateMetricsSnapshot) {\n+    long mCurrT = System.currentTimeMillis();\n+    Result<Record> shardStateMetrics = shardStateMetricsSnapshot.fetchAggregatedShardStateMetrics();\n+    List<String> dims =\n+            new ArrayList<String>() {\n+              {\n+                this.add(AllMetrics.ShardStateDimension.INDEX_NAME.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_ID.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_TYPE.toString());\n+                this.add(AllMetrics.ShardStateDimension.NODE_NAME.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_STATE.toString());\n+              }\n+            };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA2ODM4MA=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjUyNTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyMjoxMFrOHkiJUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyMjoxMFrOHkiJUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MDIyNg==", "bodyText": "Trying to understand why this is relevant or required. The shard states as I understand are enum/string values and we are trying to find an sum/avg/min/max over this string values ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508070226", "createdAt": "2020-10-19T21:22:10Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "diffHunk": "@@ -847,4 +847,79 @@ public static void emitNodeMetrics(\n           \"Total time taken for writing {} metrics metricsdb: {}\", tableName, mFinalT - mCurrT);\n     }\n   }\n+\n+\n+  public static void emitShardStateMetric(\n+          MetricsDB metricsDB, ShardStateMetricsSnapshot shardStateMetricsSnapshot) {\n+    long mCurrT = System.currentTimeMillis();\n+    Result<Record> shardStateMetrics = shardStateMetricsSnapshot.fetchAggregatedShardStateMetrics();\n+    List<String> dims =\n+            new ArrayList<String>() {\n+              {\n+                this.add(AllMetrics.ShardStateDimension.INDEX_NAME.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_ID.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_TYPE.toString());\n+                this.add(AllMetrics.ShardStateDimension.NODE_NAME.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_STATE.toString());\n+              }\n+            };\n+    metricsDB.createMetric(\n+            new Metric<Double>(AllMetrics.ShardStateValue.SHARD_STATE.toString(), 0d),\n+            dims);\n+\n+    BatchBindStep handle =\n+            metricsDB.startBatchPut(\n+                    new Metric<Double>(AllMetrics.ShardStateValue.SHARD_STATE.toString(), 0d),\n+                    dims);\n+\n+    for (Record r : shardStateMetrics) {\n+\n+      Double sumShardState =\n+              Double.parseDouble(\n+                      r.get(\n+                              DBUtils.getAggFieldName(\n+                                      AllMetrics.ShardStateValue.SHARD_STATE.toString(),\n+                                      MetricsDB.SUM))\n+                              .toString());\n+\n+      Double avgShardState =\n+              Double.parseDouble(\n+                      r.get(\n+                              DBUtils.getAggFieldName(\n+                                      AllMetrics.ShardStateValue.SHARD_STATE.toString(),\n+                                      MetricsDB.AVG))\n+                              .toString());\n+\n+      Double minShardState =\n+              Double.parseDouble(\n+                      r.get(\n+                              DBUtils.getAggFieldName(\n+                                      AllMetrics.ShardStateValue.SHARD_STATE.toString(),\n+                                      MetricsDB.MIN))\n+                              .toString());\n+\n+      Double maxShardState =\n+              Double.parseDouble(\n+                      r.get(\n+                              DBUtils.getAggFieldName(\n+                                      AllMetrics.ShardStateValue.SHARD_STATE.toString(),\n+                                      MetricsDB.MAX))\n+                              .toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjUyNzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyMjo1M1rOHkiKcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyMjo1M1rOHkiKcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MDUxNA==", "bodyText": "Let's add a metric here.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508070514", "createdAt": "2020-10-19T21:22:53Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MetricsEmitter.java", "diffHunk": "@@ -847,4 +847,79 @@ public static void emitNodeMetrics(\n           \"Total time taken for writing {} metrics metricsdb: {}\", tableName, mFinalT - mCurrT);\n     }\n   }\n+\n+\n+  public static void emitShardStateMetric(\n+          MetricsDB metricsDB, ShardStateMetricsSnapshot shardStateMetricsSnapshot) {\n+    long mCurrT = System.currentTimeMillis();\n+    Result<Record> shardStateMetrics = shardStateMetricsSnapshot.fetchAggregatedShardStateMetrics();\n+    List<String> dims =\n+            new ArrayList<String>() {\n+              {\n+                this.add(AllMetrics.ShardStateDimension.INDEX_NAME.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_ID.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_TYPE.toString());\n+                this.add(AllMetrics.ShardStateDimension.NODE_NAME.toString());\n+                this.add(AllMetrics.ShardStateDimension.SHARD_STATE.toString());\n+              }\n+            };\n+    metricsDB.createMetric(\n+            new Metric<Double>(AllMetrics.ShardStateValue.SHARD_STATE.toString(), 0d),\n+            dims);\n+\n+    BatchBindStep handle =\n+            metricsDB.startBatchPut(\n+                    new Metric<Double>(AllMetrics.ShardStateValue.SHARD_STATE.toString(), 0d),\n+                    dims);\n+\n+    for (Record r : shardStateMetrics) {\n+\n+      Double sumShardState =\n+              Double.parseDouble(\n+                      r.get(\n+                              DBUtils.getAggFieldName(\n+                                      AllMetrics.ShardStateValue.SHARD_STATE.toString(),\n+                                      MetricsDB.SUM))\n+                              .toString());\n+\n+      Double avgShardState =\n+              Double.parseDouble(\n+                      r.get(\n+                              DBUtils.getAggFieldName(\n+                                      AllMetrics.ShardStateValue.SHARD_STATE.toString(),\n+                                      MetricsDB.AVG))\n+                              .toString());\n+\n+      Double minShardState =\n+              Double.parseDouble(\n+                      r.get(\n+                              DBUtils.getAggFieldName(\n+                                      AllMetrics.ShardStateValue.SHARD_STATE.toString(),\n+                                      MetricsDB.MIN))\n+                              .toString());\n+\n+      Double maxShardState =\n+              Double.parseDouble(\n+                      r.get(\n+                              DBUtils.getAggFieldName(\n+                                      AllMetrics.ShardStateValue.SHARD_STATE.toString(),\n+                                      MetricsDB.MAX))\n+                              .toString());\n+\n+      handle.bind(\n+              r.get(AllMetrics.ShardStateDimension.INDEX_NAME.toString()).toString(),\n+              r.get(AllMetrics.ShardStateDimension.SHARD_ID.toString()).toString(),\n+              r.get(AllMetrics.ShardStateDimension.SHARD_TYPE.toString()).toString(),\n+              r.get(AllMetrics.ShardStateDimension.NODE_NAME.toString()).toString(),\n+              r.get(AllMetrics.ShardStateDimension.SHARD_STATE.toString()).toString(),\n+              sumShardState,\n+              avgShardState,\n+              minShardState,\n+              maxShardState);\n+    }\n+    handle.execute();\n+    long mFinalT = System.currentTimeMillis();\n+    LOG.debug(\n+            \"Total time taken for writing shard state event queue metrics metricsdb: {}\", mFinalT - mCurrT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjUzNDYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/metrics/WriterMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNTowMFrOHkiOeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNTowMFrOHkiOeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MTU0Ng==", "bodyText": "Missing License information from beginning of file.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508071546", "createdAt": "2020-10-19T21:25:00Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/metrics/WriterMetrics.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjUzNTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNToxMFrOHkiO2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNToxMFrOHkiO2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MTY0Mg==", "bodyText": "Missing License information from beginning of file.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508071642", "createdAt": "2020-10-19T21:25:10Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjUzNjkyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshotTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNTo0MVrOHkiP4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowOToxOFrOHkyYuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MTkwNg==", "bodyText": "Missing License information from beginning of file.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508071906", "createdAt": "2020-10-19T21:25:41Z", "author": {"login": "khushbr"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshotTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNjMxNQ==", "bodyText": "Added", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508336315", "createdAt": "2020-10-20T09:09:18Z", "author": {"login": "amathur1893"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshotTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MTkwNg=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjUzOTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNjoxOFrOHkiRHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowOToyNVrOHkyZFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjIyMw==", "bodyText": "Missing License information from beginning of file.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508072223", "createdAt": "2020-10-19T21:26:18Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshot.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNjQwNg==", "bodyText": "Added", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508336406", "createdAt": "2020-10-20T09:09:25Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshot.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MjIyMw=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjU0MjM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyNzoyN1rOHkiTKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowOTozMVrOHkyZSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3Mjc0NQ==", "bodyText": "unused variable ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508072745", "createdAt": "2020-10-19T21:27:27Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshot.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.DBUtils;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.sql.Connection;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.SQLDialect;\n+import org.jooq.SelectField;\n+import org.jooq.impl.DSL;\n+\n+public class ShardStateMetricsSnapshot implements Removable {\n+    private static final Logger LOG = LogManager.getLogger(ShardStateMetricsSnapshot.class);\n+    private final DSLContext create;\n+    private final String tableName;\n+    private static final Long EXPIRE_AFTER = 1200000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNjQ1Ng==", "bodyText": "Removed", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508336456", "createdAt": "2020-10-20T09:09:31Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsSnapshot.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.DBUtils;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.sql.Connection;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.SQLDialect;\n+import org.jooq.SelectField;\n+import org.jooq.impl.DSL;\n+\n+public class ShardStateMetricsSnapshot implements Removable {\n+    private static final Logger LOG = LogManager.getLogger(ShardStateMetricsSnapshot.class);\n+    private final DSLContext create;\n+    private final String tableName;\n+    private static final Long EXPIRE_AFTER = 1200000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3Mjc0NQ=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjU1ODkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTozMjo0MlrOHkidDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowOTozN1rOHkyZfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NTI3OA==", "bodyText": "nit: Move ShardStateMetricsSnapshot> shardStateEventMetricsMap) to next line.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508075278", "createdAt": "2020-10-19T21:32:42Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.tools.StringUtils;\n+\n+public class ShardStateMetricsProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(ShardStateMetricsProcessor.class);\n+    private ShardStateMetricsSnapshot shardStateMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private ShardStateMetricsProcessor(ShardStateMetricsSnapshot snapshot) {\n+        this.shardStateMetricsSnapshot = snapshot;\n+    }\n+\n+    static ShardStateMetricsProcessor buildShardStateMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, ShardStateMetricsSnapshot> shardStateEventMetricsMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNjUxMA==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508336510", "createdAt": "2020-10-20T09:09:37Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.tools.StringUtils;\n+\n+public class ShardStateMetricsProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(ShardStateMetricsProcessor.class);\n+    private ShardStateMetricsSnapshot shardStateMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private ShardStateMetricsProcessor(ShardStateMetricsSnapshot snapshot) {\n+        this.shardStateMetricsSnapshot = snapshot;\n+    }\n+\n+    static ShardStateMetricsProcessor buildShardStateMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, ShardStateMetricsSnapshot> shardStateEventMetricsMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NTI3OA=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjU3MTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTozNjo1N1rOHkik4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwOTowOTo0N1rOHkyZ-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NzI4Mw==", "bodyText": "The function arguments startTime and endTime arent used anywhere in the function. We can do 2 things here:\n\nAdd a new method public void initializeProcessing() within EventProcessor\nInitialize startTime and endTime  within this function.\n\nLet's go with 2 for now.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508077283", "createdAt": "2020-10-19T21:36:57Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.tools.StringUtils;\n+\n+public class ShardStateMetricsProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(ShardStateMetricsProcessor.class);\n+    private ShardStateMetricsSnapshot shardStateMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private ShardStateMetricsProcessor(ShardStateMetricsSnapshot snapshot) {\n+        this.shardStateMetricsSnapshot = snapshot;\n+    }\n+\n+    static ShardStateMetricsProcessor buildShardStateMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, ShardStateMetricsSnapshot> shardStateEventMetricsMap) {\n+        ShardStateMetricsSnapshot shardStateSnap = shardStateEventMetricsMap.get(currWindowStartTime);\n+        if (shardStateSnap == null) {\n+            shardStateSnap = new ShardStateMetricsSnapshot(conn, currWindowStartTime);\n+            shardStateEventMetricsMap.put(currWindowStartTime, shardStateSnap);\n+        }\n+        return new ShardStateMetricsProcessor(shardStateSnap);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODMzNjYzMw==", "bodyText": "Initialised", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/436#discussion_r508336633", "createdAt": "2020-10-20T09:09:47Z", "author": {"login": "amathur1893"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ShardStateMetricsProcessor.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.tools.StringUtils;\n+\n+public class ShardStateMetricsProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(ShardStateMetricsProcessor.class);\n+    private ShardStateMetricsSnapshot shardStateMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private ShardStateMetricsProcessor(ShardStateMetricsSnapshot snapshot) {\n+        this.shardStateMetricsSnapshot = snapshot;\n+    }\n+\n+    static ShardStateMetricsProcessor buildShardStateMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, ShardStateMetricsSnapshot> shardStateEventMetricsMap) {\n+        ShardStateMetricsSnapshot shardStateSnap = shardStateEventMetricsMap.get(currWindowStartTime);\n+        if (shardStateSnap == null) {\n+            shardStateSnap = new ShardStateMetricsSnapshot(conn, currWindowStartTime);\n+            shardStateEventMetricsMap.put(currWindowStartTime, shardStateSnap);\n+        }\n+        return new ShardStateMetricsProcessor(shardStateSnap);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NzI4Mw=="}, "originalCommit": {"oid": "d59004072522d90f307aebf1bf0b4df4619b5744"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2402, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}