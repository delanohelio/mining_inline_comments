{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4Mzg5NjE4", "number": 78, "title": "Add AggregateMetric and top k consumer summary", "bodyText": "Issue #, if available:\nDescription of changes:\n\nAdd AggregateMetric to group the sqlite metric to one or more columns and perform sum aggregation and sorting on top.\nAdd Top consumer summary to store the top k consumers of hot resource and persist the top k in SQL.\n\nTests:\ncreate a unit test for AggregateMetric\nCode coverage percentage for this patch:\n92%\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-01-29T06:11:31Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/78", "merged": true, "mergeCommit": {"oid": "4697832d20a70ebcd5d38413c81c40f6fec6526f"}, "closed": true, "closedAt": "2020-02-11T01:19:56Z", "author": {"login": "rguo-aws"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-_h21AH2gAyMzY4Mzg5NjE4OmIyNzNiY2Q3NzAzNDIyNDYxZGY3NTkyNTkxOWY0NTZmMTI1NDUyMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDHUsyAFqTM1NjM3NTU2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b273bcd7703422461df75925919f456f12545225", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b273bcd7703422461df75925919f456f12545225", "committedDate": "2020-01-29T05:59:14Z", "message": "Add AggregateMetric and TopConsumerSummary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a00d6734a2a48031d002f6e58527486699450f2d", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a00d6734a2a48031d002f6e58527486699450f2d", "committedDate": "2020-01-29T06:03:57Z", "message": "add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzMyMTU3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/78#pullrequestreview-350332157", "createdAt": "2020-01-29T18:33:44Z", "commit": {"oid": "a00d6734a2a48031d002f6e58527486699450f2d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODozMzo0NFrOFjTG9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxODozMzo0NFrOFjTG9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1NzU1Ng==", "bodyText": "This is always doing sum. We can support other aggregations as well like min, max, avg, percentile etc", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/78#discussion_r372557556", "createdAt": "2020-01-29T18:33:44Z", "author": {"login": "ditac"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/AggregateMetric.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.Queryable;\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.impl.DSL;\n+\n+\n+/**\n+ * AggregateMetric can be used to group the sqlite to one or more columns\n+ * and perform sum aggregation and sorting function on the result\n+ * For example, we can get the sum of cpu usage for each operation and sort them in descending\n+ * order by constructing this Metric as follows:\n+ * <p>\n+ * new AggregateMetric(5, CPU_Utilization.NAME, CommonDimension.OPERATION.toString());\n+ * </p>\n+ */\n+public class AggregateMetric extends Metric {\n+\n+  private static final Logger LOG = LogManager.getLogger(AggregateMetric.class);\n+  public static final String NAME = AggregateMetric.class.getSimpleName();\n+  private final String tableName;\n+  private final List<String> groupByFieldsName;\n+\n+  public AggregateMetric(final long evaluationIntervalSeconds, final String tableName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00d6734a2a48031d002f6e58527486699450f2d"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzY3NDEw", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/78#pullrequestreview-350367410", "createdAt": "2020-01-29T19:29:29Z", "commit": {"oid": "a00d6734a2a48031d002f6e58527486699450f2d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOToyOToyOVrOFjU1PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTozNTo0NVrOFjVBeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4NTc4OA==", "bodyText": "can we use Screaming snake case here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/78#discussion_r372585788", "createdAt": "2020-01-29T19:29:29Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotResourceSummary.java", "diffHunk": "@@ -81,6 +74,10 @@ public String getResourceTypeName() {\n         resourceName = this.resourceType.getJVM().getValueDescriptor()\n             .getOptions().getExtension(PANetworking.resourceTypeName);\n       }\n+      else if (this.resourceType.getResourceTypeOneofCase() == ResourceTypeOneofCase.HARDWARERESOURCETYPE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00d6734a2a48031d002f6e58527486699450f2d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4ODAyNg==", "bodyText": "Can we use a local variable here instead of message.getConsumers().getConsumerCount() two method calls per loop iteration ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/78#discussion_r372588026", "createdAt": "2020-01-29T19:33:56Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotResourceSummary.java", "diffHunk": "@@ -124,17 +125,18 @@ public static HotResourceSummary buildHotResourceSummaryFromMessage(\n     newSummary\n         .setValueDistribution(message.getMinValue(), message.getMaxValue(), message.getAvgValue());\n     if (message.hasConsumers() && message.getConsumers().getConsumerCount() > 0) {\n-      newSummary.addConsumers(IntStream.range(0, message.getConsumers().getConsumerCount())\n-          .mapToObj(i -> message.getConsumers().getConsumer(i))\n-          .collect(Collectors.toList()));\n+      for (int i = 0; i < message.getConsumers().getConsumerCount(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00d6734a2a48031d002f6e58527486699450f2d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4ODI0OA==", "bodyText": "we should use String builder here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/78#discussion_r372588248", "createdAt": "2020-01-29T19:34:26Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotResourceSummary.java", "diffHunk": "@@ -124,17 +125,18 @@ public static HotResourceSummary buildHotResourceSummaryFromMessage(\n     newSummary\n         .setValueDistribution(message.getMinValue(), message.getMaxValue(), message.getAvgValue());\n     if (message.hasConsumers() && message.getConsumers().getConsumerCount() > 0) {\n-      newSummary.addConsumers(IntStream.range(0, message.getConsumers().getConsumerCount())\n-          .mapToObj(i -> message.getConsumers().getConsumer(i))\n-          .collect(Collectors.toList()));\n+      for (int i = 0; i < message.getConsumers().getConsumerCount(); i++) {\n+        newSummary.addNestedSummaryList(TopConsumerSummary.buildTopConsumerSummaryFromMessage(\n+            message.getConsumers().getConsumer(i)));\n+      }\n     }\n     return newSummary;\n   }\n \n   @Override\n   public String toString() {\n-    return this.getResourceTypeName() + \" \" + this.consumers + \" \" + this.threshold + \" \"\n-        + this.value + \" \" + this.unitType;\n+    return this.getResourceTypeName() + \" \"  + this.threshold + \" \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00d6734a2a48031d002f6e58527486699450f2d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU4ODkyMg==", "bodyText": "We should probably add a comment why this method is empty", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/78#discussion_r372588922", "createdAt": "2020-01-29T19:35:45Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/TopConsumerSummary.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.TopConsumerSummaryMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericSummary;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.jooq.Field;\n+import org.jooq.impl.DSL;\n+\n+/**\n+ * TopConsumerSummary contains the name and usage of a resource consumer.\n+ */\n+public class TopConsumerSummary extends GenericSummary {\n+\n+  private final String name;\n+  private final double value;\n+\n+  public TopConsumerSummary(final String name, final double value) {\n+    super();\n+    this.name = name;\n+    this.value = value;\n+  }\n+\n+  public String getName() {\n+    return this.name;\n+  }\n+\n+  public double getValue() {\n+    return this.value;\n+  }\n+\n+  @Override\n+  public TopConsumerSummaryMessage buildSummaryMessage() {\n+    final TopConsumerSummaryMessage.Builder summaryMessageBuilder = TopConsumerSummaryMessage.newBuilder();\n+    summaryMessageBuilder.setName(this.name);\n+    summaryMessageBuilder.setValue(this.value);\n+    return summaryMessageBuilder.build();\n+  }\n+\n+  @Override\n+  public void buildSummaryMessageAndAddToFlowUnit(FlowUnitMessage.Builder messageBuilder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a00d6734a2a48031d002f6e58527486699450f2d"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc45801c80a92c20144014e686e129012ca709d1", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/dc45801c80a92c20144014e686e129012ca709d1", "committedDate": "2020-02-06T20:37:51Z", "message": "made changes for PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e945c187b836866372861a1fced797a1e4843720", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e945c187b836866372861a1fced797a1e4843720", "committedDate": "2020-02-06T20:42:15Z", "message": "add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf01462905ec136d76d4c2d5fbcf363b5afe283b", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/bf01462905ec136d76d4c2d5fbcf363b5afe283b", "committedDate": "2020-02-06T20:51:24Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Mzc1NTY2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/78#pullrequestreview-356375566", "createdAt": "2020-02-11T01:19:48Z", "commit": {"oid": "bf01462905ec136d76d4c2d5fbcf363b5afe283b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1134, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}