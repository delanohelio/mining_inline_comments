{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2Nzk5MTg4", "number": 252, "title": "Add NodeConfigCollector to collect node configs(threadpool capacity etc.) from ES", "bodyText": "Issue #, if available:\n#293\nDescription of changes:\nAdd a base class EsConfigNode as node level config collector\nCreate derived class NodeConfigCollector to collect threadpool config settings from each node and wrap it as flowunit to send to cluster RCA node.\nCreate unit test for this collector\nTests:\nCode coverage percentage for this patch:\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-06-18T22:48:07Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252", "merged": true, "mergeCommit": {"oid": "9137257765c9a7384d00ce2c0451d12d7f862e58"}, "closed": true, "closedAt": "2020-07-20T23:59:17Z", "author": {"login": "rguo-aws"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsmIpLgH2gAyNDM2Nzk5MTg4OjAyNjQ5OGQzMTc1NzcyOTVkMTVlNjIyOTc5MmYwOTY3YjUyMGYyNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc26mDXgFqTQ1MjAzNDk2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "026498d317577295d15e6229792f0967b520f26f", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/026498d317577295d15e6229792f0967b520f26f", "committedDate": "2020-06-18T22:24:35Z", "message": "Add NodeConfigurationRca to collect threadpool config settings from each node"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NzQ4ODc0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#pullrequestreview-437748874", "createdAt": "2020-06-25T18:23:11Z", "commit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoyMzoxMlrOGpGj_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoyNjo1M1rOGpGr2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MjMxOA==", "bodyText": "Please add a javadoc for this class", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r445752318", "createdAt": "2020-06-25T18:23:12Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.remediation;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeConfiguration;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NodeConfigurationRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1Mjc2MQ==", "bodyText": "Let's add a javadoc stating how we are operating on the FlowUnits", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r445752761", "createdAt": "2020-06-25T18:24:02Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.remediation;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeConfiguration;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NodeConfigurationRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeConfigurationRca.class);\n+  private final Metric threadPool_queueCapacity;\n+  private final int rcaPeriod;\n+  private int counter;\n+  private int writeQueueCapacity;\n+  private int searchQueueCapacity;\n+\n+  public <M extends Metric> NodeConfigurationRca(int rcaPeriod, M threadPool_queueCapacity) {\n+    super(5);\n+    this.threadPool_queueCapacity = threadPool_queueCapacity;\n+    this.rcaPeriod = rcaPeriod;\n+    this.counter = 0;\n+    this.writeQueueCapacity = -1;\n+    this.searchQueueCapacity = -1;\n+  }\n+\n+  private void collectQueueCapacity(MetricFlowUnit flowUnit) {\n+    double writeQueueCapacity = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+        THREAD_POOL_TYPE.getField(), ThreadPoolType.WRITE.toString(), MetricsDB.MAX);\n+    if (!Double.isNaN(writeQueueCapacity)) {\n+      this.writeQueueCapacity = (int) writeQueueCapacity;\n+    }\n+    double searchQueueCapacity = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+        THREAD_POOL_TYPE.getField(), ThreadPoolType.SEARCH.toString(), MetricsDB.MAX);\n+    if (!Double.isNaN(searchQueueCapacity)) {\n+      this.searchQueueCapacity = (int) searchQueueCapacity;\n+    }\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotNodeSummary> operate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1NDMzMQ==", "bodyText": "Can you briefly describe the rationale of using an RCA node for this ? Do you think it would be cleaner if we add a new node type called ESConfigNode ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r445754331", "createdAt": "2020-06-25T18:26:53Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.remediation;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeConfiguration;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NodeConfigurationRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeConfigurationRca.class);\n+  private final Metric threadPool_queueCapacity;\n+  private final int rcaPeriod;\n+  private int counter;\n+  private int writeQueueCapacity;\n+  private int searchQueueCapacity;\n+\n+  public <M extends Metric> NodeConfigurationRca(int rcaPeriod, M threadPool_queueCapacity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52bc51a25c562b1a5d574bd8e65508dd1f6665d3", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/52bc51a25c562b1a5d574bd8e65508dd1f6665d3", "committedDate": "2020-06-30T00:52:28Z", "message": "Create a separate node type EsConfigNode to collect ES config settings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTAwNTM1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#pullrequestreview-440500535", "createdAt": "2020-07-01T02:08:18Z", "commit": {"oid": "52bc51a25c562b1a5d574bd8e65508dd1f6665d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjowODoxOFrOGrUYpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjowODoxOFrOGrUYpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NTk0Mw==", "bodyText": "I was actually thinking of having a custom flow unit for this type of node. It doesn't really fit into the nested HotNodeSummary and HotResourceSummary lists - the terms healthy/unhealthy do not apply to a given queue capacity conf. The new flow unit could be simply have resource and values for those resources (for each node).", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r448075943", "createdAt": "2020-07-01T02:08:18Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/EsConfigNode.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ExceptionsAndErrors;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.RcaGraphMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * this is a base class for node(vertex) in RCA graph that reads configuration settings from ES.\n+ */\n+public abstract class EsConfigNode extends NonLeafNode<ResourceFlowUnit<HotNodeSummary>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52bc51a25c562b1a5d574bd8e65508dd1f6665d3"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "310f0c019cbc4b9058861bda809862cd6b416bfb", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/310f0c019cbc4b9058861bda809862cd6b416bfb", "committedDate": "2020-07-02T00:06:10Z", "message": "Merge remote-tracking branch 'origin' into rguo-capacity-rca"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1eb04d53e292e7062b5eaad98f0b9063c2f883c", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b1eb04d53e292e7062b5eaad98f0b9063c2f883c", "committedDate": "2020-07-17T20:01:53Z", "message": "Add NodeConfigFlowunit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9334886a81a116a676e0eac7b548acb199580e57", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/9334886a81a116a676e0eac7b548acb199580e57", "committedDate": "2020-07-17T20:02:38Z", "message": "Merge remote-tracking branch 'origin' into rguo-capacity-rca"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6505ff79fabbfec9163474908e654faedadf1714", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6505ff79fabbfec9163474908e654faedadf1714", "committedDate": "2020-07-17T23:30:27Z", "message": "Fix bugs and add UTs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97238e9b2a76c53df8f0b9b44a608006abac0f45", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/97238e9b2a76c53df8f0b9b44a608006abac0f45", "committedDate": "2020-07-19T19:01:13Z", "message": "remove unnecessary code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODQ1MjQx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#pullrequestreview-451845241", "createdAt": "2020-07-20T18:13:17Z", "commit": {"oid": "97238e9b2a76c53df8f0b9b44a608006abac0f45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoxMzoxOFrOG0Zt2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoxMzoxOFrOG0Zt2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwMDQ3Mg==", "bodyText": "Shouldn't the NodeConfig use its own summary such as NodeConfigSummary ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r457600472", "createdAt": "2020-07-20T18:13:18Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/NodeConfigFlowUnit.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage.SummaryOneofCase;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HotNodeSummaryMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+\n+/**\n+ * a flowunit type to carry ES node configurations (queue/cache capacities, etc.)\n+ */\n+public class NodeConfigFlowUnit extends ResourceFlowUnit<HotNodeSummary> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97238e9b2a76c53df8f0b9b44a608006abac0f45"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTUxMTE4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#pullrequestreview-451951118", "createdAt": "2020-07-20T20:53:10Z", "commit": {"oid": "97238e9b2a76c53df8f0b9b44a608006abac0f45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTUxNzc3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#pullrequestreview-451951777", "createdAt": "2020-07-20T20:54:12Z", "commit": {"oid": "97238e9b2a76c53df8f0b9b44a608006abac0f45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDM0OTY3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#pullrequestreview-452034967", "createdAt": "2020-07-20T23:54:03Z", "commit": {"oid": "97238e9b2a76c53df8f0b9b44a608006abac0f45"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1052, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}