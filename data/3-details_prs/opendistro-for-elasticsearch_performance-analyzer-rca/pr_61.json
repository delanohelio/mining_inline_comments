{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MzcxNDA2", "number": 61, "title": "Add api for rca", "bodyText": "Add an api for rca.\ncurl --url \"localhost:9650/_opendistro/_performanceanalyzer/rca\" -XGET\ncurl --url \"localhost:9650/_opendistro/_performanceanalyzer/rca?name=HighHeapUsageClusterRca\" -XGET\nSample Response:\n[{\n\"RcaName\": \"HighHeapUsageClusterRca\",\n\"State\": \"unhealthy\",\n\"NumOfNodes\": 6,\n\"NumOfUnhealthyNodes\": 2,\n\"TimeStamp\": \"1579290434997\",\n\"Data\": [{\n\"NodeId\": \"fJ3FeBfpTaOZyNLnrmiQhA\",\n\"IpAddress\": \"10.212.53.194\",\n\"ResourceContext\": [{\n\"ResourceType\": \"garbage collector\",\n\"UnitType\": \"heap usage in percentage\",\n\"Threshold\": 0.65,\n\"Actual\": 0.025977069185433865,\n\"Average\": null,\n\"Minimum\": null,\n\"Maximum\": null\n}]\n}, {\n\"NodeId\": \"lpgNv3VlSQGfuqMz8CmzUg\",\n\"IpAddress\": \"10.212.48.118\",\n\"ResourceContext\": [{\n\"ResourceType\": \"garbage collector\",\n\"UnitType\": \"heap usage in percentage\",\n\"Threshold\": 0.65,\n\"Actual\": 0.06412984400781067,\n\"Average\": null,\n\"Minimum\": null,\n\"Maximum\": null\n}]\n}]\n}]", "createdAt": "2020-01-18T00:44:13Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61", "merged": true, "mergeCommit": {"oid": "cbf823229639c2f8f3a4f0e9241c7596cfbcf00f"}, "closed": true, "closedAt": "2020-01-28T00:14:34Z", "author": {"login": "spardeepsingh"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8pNQFAFqTM0NjI0NDQyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-l_q8AFqTM0OTA2MjUxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjQ0NDI3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#pullrequestreview-346244427", "createdAt": "2020-01-21T22:45:21Z", "commit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjo0NToyMVrOFgLVYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjo1MDowNVrOFgLcJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NDQ0OQ==", "bodyText": "Please add a javadoc comment for the class", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369284449", "createdAt": "2020-01-21T22:45:21Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.jooq.DSLContext;\n+import org.jooq.Record;\n+import org.jooq.SelectJoinStep;\n+import org.jooq.impl.DSL;\n+\n+\n+public class QueryUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NDU4Mg==", "bodyText": "Please add a javadoc comment for every public method.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369284582", "createdAt": "2020-01-21T22:45:43Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.jooq.DSLContext;\n+import org.jooq.Record;\n+import org.jooq.SelectJoinStep;\n+import org.jooq.impl.DSL;\n+\n+\n+public class QueryUtils {\n+\n+  public static List<Record> getRcaRecordList(DSLContext ctx,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NTUwMw==", "bodyText": "we can just have the return here without the variable name ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369285503", "createdAt": "2020-01-21T22:48:02Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -97,6 +99,11 @@ public synchronized String read() {\n     return jsonResponse;\n   }\n \n+  public synchronized String readRca(String rca) {\n+    String jsonResponse = readRcaTable(rca);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NTY3MQ==", "bodyText": "javadoc comments", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369285671", "createdAt": "2020-01-21T22:48:31Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class NodeSummaryResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NjE4Mg==", "bodyText": "please use a JSONObject or something to create json.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369286182", "createdAt": "2020-01-21T22:50:05Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/RcaResponse.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class RcaResponse {\n+  private String rcaName;\n+  private String state;\n+  private Integer numOfNodes;\n+  private Integer numOfUnhealthyNodes;\n+  private String timeStamp;\n+  private List<NodeSummaryResponse> nodeSummaryResponseList;\n+\n+  public RcaResponse(String rcaName, String state, String timeStamp) {\n+    this.rcaName = rcaName;\n+    this.state = state;\n+    this.timeStamp = timeStamp;\n+  }\n+\n+  public RcaResponse(String rcaName,\n+                     String state,\n+                     int numOfNodes,\n+                     int numOfUnhealthyNodes,\n+                     String timeStamp) {\n+    this.rcaName = rcaName;\n+    this.state = state;\n+    this.numOfNodes = numOfNodes;\n+    this.numOfUnhealthyNodes = numOfUnhealthyNodes;\n+    this.timeStamp = timeStamp;\n+    this.nodeSummaryResponseList = new ArrayList<>();\n+  }\n+\n+  public String getRcaName() {\n+    return rcaName;\n+  }\n+\n+  public String getState() {\n+    return state;\n+  }\n+\n+  public Integer getNumOfNodes() {\n+    return numOfNodes;\n+  }\n+\n+  public Integer getNumOfUnhealthyNodes() {\n+    return numOfUnhealthyNodes;\n+  }\n+\n+  public String getTimeStamp() {\n+    return timeStamp;\n+  }\n+\n+  public void addNodeSummaryResponse(NodeSummaryResponse nodeSummaryResponse) {\n+    this.nodeSummaryResponseList.add(nodeSummaryResponse);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"{\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzAyNzA3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#pullrequestreview-346302707", "createdAt": "2020-01-22T01:41:17Z", "commit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMTo0MToxN1rOFgOVMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMTo0MToyOFrOFgOVWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzMzU1Mg==", "bodyText": "Same comment as what @yojs said. Use a JSON library to simplify this.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369333552", "createdAt": "2020-01-22T01:41:17Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class NodeSummaryResponse {\n+  private String nodeId;\n+  private String ipAddress;\n+  private List<ResourceSummaryResponse> resourceList;\n+\n+  public NodeSummaryResponse(String nodeId, String ipAddress) {\n+    this.nodeId = nodeId;\n+    this.ipAddress = ipAddress;\n+    this.resourceList = new ArrayList<>();\n+  }\n+\n+  public String getNodeId() {\n+    return nodeId;\n+  }\n+\n+  public String getIpAddress() {\n+    return ipAddress;\n+  }\n+\n+  public List<ResourceSummaryResponse> getResourceList() {\n+    return resourceList;\n+  }\n+\n+  public void addResource(ResourceSummaryResponse resource) {\n+    this.resourceList.add(resource);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"{\"\n+            + \"\\\"NodeId\\\" : \\\"\" + nodeId + \"\\\",\"\n+            + \"\\\"IpAddress\\\" : \\\"\" + ipAddress + \"\\\",\"\n+            + \"\\\"ResourceContext\\\" : \" + getResourceSummary()\n+            + '}';\n+  }\n+\n+  private String getResourceSummary() {\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(\"[\");\n+    if (resourceList != null && !resourceList.isEmpty()) {\n+      for (ResourceSummaryResponse resourceSummaryResponse : resourceList) {\n+        builder.append(resourceSummaryResponse.toString()).append(\",\");\n+      }\n+      builder.deleteCharAt(builder.length() - 1);\n+    }\n+    builder.append(\"]\");\n+    return builder.toString();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzMzU5Mg==", "bodyText": "make \"{}\" a constant as well.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369333592", "createdAt": "2020-01-22T01:41:28Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_CLUSTER_SUMMARY_TABLE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_NODE_SUMMARY_TABLE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_RESOURCE_SUMMARY_TABLE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.NodeSummaryResponse;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.RcaResponse;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.ResourceSummaryResponse;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.jooq.Record;\n+\n+public class RcaResponseUtil {\n+\n+  private static final String NULL = \"null\";\n+\n+  public static String convertRcaRecordListIntoJson(String rcaName, List<Record> recordList, Set<String> tableNames) {\n+    com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.RcaResponse rcaResponse = null;\n+    Map<String, NodeSummaryResponse> nodeSummaryResponseMap = new HashMap<>();\n+    for (Record record : recordList) {\n+      if (rcaResponse == null) {\n+        rcaResponse = getRcaResponse(rcaName, record, tableNames);\n+      }\n+      if (tableNames.contains(HOT_NODE_SUMMARY_TABLE)) {\n+        String nodeId = getStringFieldValue(record, HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME);\n+        NodeSummaryResponse nodeSummaryResponse = nodeSummaryResponseMap.getOrDefault(nodeId,\n+                getNodeSummary(nodeId, record));\n+        if (!nodeSummaryResponseMap.containsKey(nodeId)) {\n+          nodeSummaryResponseMap.put(nodeId, nodeSummaryResponse);\n+          rcaResponse.addNodeSummaryResponse(nodeSummaryResponse);\n+        }\n+        if (tableNames.contains(HOT_RESOURCE_SUMMARY_TABLE)) {\n+          nodeSummaryResponse.addResource(getResourceSummaryResponse(record));\n+        }\n+      }\n+    }\n+    return rcaResponse == null ? \"{}\" : rcaResponse.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzE1NjU2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#pullrequestreview-346315656", "createdAt": "2020-01-22T02:33:11Z", "commit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjozMzoxMVrOFgPAWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMjozMzoxMVrOFgPAWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NDYwMg==", "bodyText": "I think it would make things a lot more clear if we move those constant strings into each Rca/Summary class itself instead of adding it here.  Maybe we can create a static member variable in each RCA/summary class ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369344602", "createdAt": "2020-01-22T02:33:11Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaConsts.java", "diffHunk": "@@ -53,4 +57,9 @@\n   public static final long rcaConfPollerPeriodicity = 5;\n   public static final long nodeRolePollerPeriodicity = 60;\n   public static final TimeUnit rcaPollerPeriodicityTimeUnit = TimeUnit.SECONDS;\n+\n+  public static final String HOT_NODE_SUMMARY_TABLE = HotNodeSummary.class.getSimpleName();\n+  public static final String HOT_CLUSTER_SUMMARY_TABLE = HotClusterSummary.class.getSimpleName();\n+  public static final String HOT_RESOURCE_SUMMARY_TABLE = HotResourceSummary.class.getSimpleName();\n+  public static final String HIGH_HEAP_USAGE_CLUSTER_RCA_TABLE = HighHeapUsageClusterRca.class.getSimpleName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzI4Mzcx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#pullrequestreview-346328371", "createdAt": "2020-01-22T03:29:11Z", "commit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzQ1OTQ3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#pullrequestreview-346345947", "createdAt": "2020-01-22T04:59:39Z", "commit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNDo1OTo0MFrOFgQlGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNDo1OTo0MFrOFgQlGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MDM5NA==", "bodyText": "We don't have to create a method for each data type. Can we use this API in JOOQ record instead ?\nget\u200b(String\u00a0fieldName,\u00a0Class<? extends T>\u00a0type). And as I mentioned below, there seems no need to create an additional object to store the value of the HotSummary record. We can use the Record directly.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369370394", "createdAt": "2020-01-22T04:59:40Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_CLUSTER_SUMMARY_TABLE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_NODE_SUMMARY_TABLE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_RESOURCE_SUMMARY_TABLE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.NodeSummaryResponse;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.RcaResponse;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.ResourceSummaryResponse;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.jooq.Record;\n+\n+public class RcaResponseUtil {\n+\n+  private static final String NULL = \"null\";\n+\n+  public static String convertRcaRecordListIntoJson(String rcaName, List<Record> recordList, Set<String> tableNames) {\n+    com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.RcaResponse rcaResponse = null;\n+    Map<String, NodeSummaryResponse> nodeSummaryResponseMap = new HashMap<>();\n+    for (Record record : recordList) {\n+      if (rcaResponse == null) {\n+        rcaResponse = getRcaResponse(rcaName, record, tableNames);\n+      }\n+      if (tableNames.contains(HOT_NODE_SUMMARY_TABLE)) {\n+        String nodeId = getStringFieldValue(record, HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME);\n+        NodeSummaryResponse nodeSummaryResponse = nodeSummaryResponseMap.getOrDefault(nodeId,\n+                getNodeSummary(nodeId, record));\n+        if (!nodeSummaryResponseMap.containsKey(nodeId)) {\n+          nodeSummaryResponseMap.put(nodeId, nodeSummaryResponse);\n+          rcaResponse.addNodeSummaryResponse(nodeSummaryResponse);\n+        }\n+        if (tableNames.contains(HOT_RESOURCE_SUMMARY_TABLE)) {\n+          nodeSummaryResponse.addResource(getResourceSummaryResponse(record));\n+        }\n+      }\n+    }\n+    return rcaResponse == null ? \"{}\" : rcaResponse.toString();\n+  }\n+\n+  private static ResourceSummaryResponse getResourceSummaryResponse(Record record) {\n+    String resourceName = getStringFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.RESOURCE_TYPE_COL_NAME);\n+    String unitType = getStringFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.UNIT_TYPE_COL_NAME);\n+    Double threshold = getDoubleFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.THRESHOLD_COL_NAME);\n+    Double average = getDoubleFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.AVG_VALUE_COL_NAME);\n+    Double actual = getDoubleFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.VALUE_COL_NAME);\n+    Double maximum = getDoubleFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.MAX_VALUE_COL_NAME);\n+    Double minimum = getDoubleFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.MIN_VALUE_COL_NAME);\n+\n+    return new ResourceSummaryResponse(resourceName, unitType, threshold, actual, average, minimum, maximum);\n+  }\n+\n+  private static String getStringFieldValue(Record record, String fieldName) {\n+    Object value = record.getValue(fieldName);\n+    return value == null ? NULL : value.toString();\n+  }\n+\n+  private static Double getDoubleFieldValue(Record record, String fieldName) {\n+    String value = getStringFieldValue(record, fieldName);\n+    return value.equals(NULL) ? null : Double.parseDouble(value);\n+  }\n+\n+  private static Integer getIntegerFieldValue(Record record, String fieldName) {\n+    String value = getStringFieldValue(record, fieldName);\n+    return value.equals(NULL) ? null : Integer.parseInt(value);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MzUxODE2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#pullrequestreview-346351816", "createdAt": "2020-01-22T05:26:08Z", "commit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNToyNjowOFrOFgQ4Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNToyNjowOFrOFgQ4Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3NTI1NQ==", "bodyText": "Can we just use List of Record here instead of converting it to another object ResourceSummaryResponse ? Record contains all information we need (name of each field / value of each field) and we simply need to add a function to serialize the Record to String.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369375255", "createdAt": "2020-01-22T05:26:08Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class NodeSummaryResponse {\n+  private String nodeId;\n+  private String ipAddress;\n+  private List<ResourceSummaryResponse> resourceList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2ODY1MTQy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#pullrequestreview-346865142", "createdAt": "2020-01-22T20:02:01Z", "commit": {"oid": "abde9d16cc5795e541e4cbebbf63f06e095de184"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca4b934c68d452a180d807f751a3681b0c20b52", "author": {"user": {"login": "spardeepsingh", "name": "Pardeep Singh"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6ca4b934c68d452a180d807f751a3681b0c20b52", "committedDate": "2020-01-27T23:22:21Z", "message": "Add api for rca"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "author": {"user": {"login": "spardeepsingh", "name": "Pardeep Singh"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8ad0da4a276a2da92e8f528baedb35dc619fd752", "committedDate": "2020-01-27T23:24:13Z", "message": "Add unit tests and do some refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f660686f068a5563fade6bc5ce10e9358fd5f30", "author": {"user": {"login": "spardeepsingh", "name": "Pardeep Singh"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2f660686f068a5563fade6bc5ce10e9358fd5f30", "committedDate": "2020-01-27T23:24:13Z", "message": "Fix Readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41e1d0bfb5420f8eae9b526674fc7ab7316bcca7", "author": {"user": {"login": "spardeepsingh", "name": "Pardeep Singh"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/41e1d0bfb5420f8eae9b526674fc7ab7316bcca7", "committedDate": "2020-01-27T23:24:13Z", "message": "Add sample Response in Readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1a1b29036a423c7afb664ccb8770e2a1a6d7b3b", "author": {"user": {"login": "spardeepsingh", "name": "Pardeep Singh"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e1a1b29036a423c7afb664ccb8770e2a1a6d7b3b", "committedDate": "2020-01-27T23:24:13Z", "message": "Change ThresholdValue to Threshold in rca API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3442e5b1b33c7fa32c2cc20f71e87374e3b7496f", "author": {"user": {"login": "spardeepsingh", "name": "Pardeep Singh"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3442e5b1b33c7fa32c2cc20f71e87374e3b7496f", "committedDate": "2020-01-27T23:24:13Z", "message": "Do left join instead of inner join as healthy state rca donot have summaries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a82e2a3f53f5647fd1b50015fea4ff4fbe27ccb1", "author": {"user": {"login": "spardeepsingh", "name": "Pardeep Singh"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a82e2a3f53f5647fd1b50015fea4ff4fbe27ccb1", "committedDate": "2020-01-27T23:27:15Z", "message": "Fix checkstyle issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5085f4412f15f3a070e7f9f877359dc430926c2e", "author": {"user": {"login": "spardeepsingh", "name": "Pardeep Singh"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/5085f4412f15f3a070e7f9f877359dc430926c2e", "committedDate": "2020-01-24T00:58:42Z", "message": "Do left join instead of inner join as healthy state rca donot have summaries"}, "afterCommit": {"oid": "a82e2a3f53f5647fd1b50015fea4ff4fbe27ccb1", "author": {"user": {"login": "spardeepsingh", "name": "Pardeep Singh"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a82e2a3f53f5647fd1b50015fea4ff4fbe27ccb1", "committedDate": "2020-01-27T23:27:15Z", "message": "Fix checkstyle issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67cc5c9440d216d6853469b6f3b78a89237650f8", "author": {"user": {"login": "spardeepsingh", "name": "Pardeep Singh"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/67cc5c9440d216d6853469b6f3b78a89237650f8", "committedDate": "2020-01-28T00:01:34Z", "message": "Move constant to summary classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDYyNTE1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#pullrequestreview-349062515", "createdAt": "2020-01-28T00:14:16Z", "commit": {"oid": "67cc5c9440d216d6853469b6f3b78a89237650f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1129, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}