{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjE1NDk4", "number": 181, "title": "Allow retrieving temperature profile RCAs from all nodes.", "bodyText": "Issue #, if available:\n#151\nDescription of changes:\nThis change adds the ability to get temperature profile RCAs from the data node. Currently only compact node temperature can be retrieved from any data node.\nSupport for retrieving temperature profiles with higher fidelity will be added in the next PR.\nThis PR also mutes the temperature profile RCAs while allowing them to be constructed.\nTests:\n\nTested on the docker environment for RCA output.\nTested for muting and unmuting of temperature profile RCA and metric nodes.\n\nCode coverage percentage for this patch:\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-05-04T22:19:47Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181", "merged": true, "mergeCommit": {"oid": "902bf87761ba174dd887ce73e5fac724a7d19bec"}, "closed": true, "closedAt": "2020-05-14T03:03:58Z", "author": {"login": "ktkrg"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceF3bugH2gAyNDEzMjE1NDk4OjgwY2NiZjZkNTY4ZmYxZTZkODYzNjhiMjBmMDRhMDUxOWQ0ZDQ5ZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgWd0AAFqTQwOTUwNDE3Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "80ccbf6d568ff1e6d86368b20f04a0519d4d49dd", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/80ccbf6d568ff1e6d86368b20f04a0519d4d49dd", "committedDate": "2020-05-04T20:53:53Z", "message": "Turn off Temperature profile components in RCA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc7696ac00dff0168a833cb7f84a5aa8cfc036c0", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/cc7696ac00dff0168a833cb7f84a5aa8cfc036c0", "committedDate": "2020-05-04T21:40:44Z", "message": "Allow data nodes to be queried for temperature profile RCAs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/c15d33e9b21050d5d499a4e83f0b4d1884db4565", "committedDate": "2020-05-04T22:15:52Z", "message": "Mute temperature profile RCAs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDUxMDM4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#pullrequestreview-405451038", "createdAt": "2020-05-05T01:37:31Z", "commit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTozNzozMVrOGQX5Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo1NTowNlrOGQYIWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyMTg4Ng==", "bodyText": "Should we also add to the log, what they were ? Basically add records object to the log ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r419821886", "createdAt": "2020-05-05T01:37:31Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +74,69 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTEzMQ==", "bodyText": "Let's do `LOG.error(\"\", dex ); ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r419825131", "createdAt": "2020-05-05T01:52:08Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n+        Field<Integer> foreignKeyField = DSL.field(\n+            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n+            Integer.class);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils\n+            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n+                mostRecentRecord.get(primaryKeyField),\n+                foreignKeyField);\n+        Result<Record> temperatureSummary = query.fetch();\n+        GenericSummary summary =\n+            ClusterTemperatureSummary.buildSummaryFromDatabase(temperatureSummary, create);\n+        response.addNestedSummaryList(summary);\n+      } else if (rca.equalsIgnoreCase(NodeTemperatureRca.TABLE_NAME)) {\n+        SelectJoinStep<Record> query = SQLiteQueryUtils.buildSummaryQuery(create,\n+            \"CompactNodeSummary\", mostRecentRecord.get(primaryKeyField), primaryKeyField);\n+        Result<Record> nodeTemperatureCompactSummary = query.fetch();\n+        GenericSummary summary =\n+            CompactNodeSummary.buildSummaryFromDatabase(nodeTemperatureCompactSummary, create);\n+        response.addNestedSummaryList(summary);\n+      }\n+    } catch (DataAccessException dex) {\n+      dex.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTM4OQ==", "bodyText": "Can we make it FullNodeTemperatureSummary.buildSummaryFromDatabase() ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r419825389", "createdAt": "2020-05-05T01:53:30Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n+        Field<Integer> foreignKeyField = DSL.field(\n+            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n+            Integer.class);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils\n+            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n+                mostRecentRecord.get(primaryKeyField),\n+                foreignKeyField);\n+        Result<Record> temperatureSummary = query.fetch();\n+        GenericSummary summary =\n+            ClusterTemperatureSummary.buildSummaryFromDatabase(temperatureSummary, create);\n+        response.addNestedSummaryList(summary);\n+      } else if (rca.equalsIgnoreCase(NodeTemperatureRca.TABLE_NAME)) {\n+        SelectJoinStep<Record> query = SQLiteQueryUtils.buildSummaryQuery(create,\n+            \"CompactNodeSummary\", mostRecentRecord.get(primaryKeyField), primaryKeyField);\n+        Result<Record> nodeTemperatureCompactSummary = query.fetch();\n+        GenericSummary summary =\n+            CompactNodeSummary.buildSummaryFromDatabase(nodeTemperatureCompactSummary, create);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTY4MA==", "bodyText": "Should we also check for the node Role and ensure it is a data node we are making a query to ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r419825680", "createdAt": "2020-05-05T01:54:42Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n+        Field<Integer> foreignKeyField = DSL.field(\n+            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n+            Integer.class);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils\n+            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n+                mostRecentRecord.get(primaryKeyField),\n+                foreignKeyField);\n+        Result<Record> temperatureSummary = query.fetch();\n+        GenericSummary summary =\n+            ClusterTemperatureSummary.buildSummaryFromDatabase(temperatureSummary, create);\n+        response.addNestedSummaryList(summary);\n+      } else if (rca.equalsIgnoreCase(NodeTemperatureRca.TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTc1NQ==", "bodyText": "Can we make sure that this is the elected master we are making the query to ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r419825755", "createdAt": "2020-05-05T01:55:06Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/5c4928c9f35ed814f6df446da0d31af6055cd0e6", "committedDate": "2020-05-07T19:18:41Z", "message": "Added more information to the error logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODk3NzMw", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#pullrequestreview-407897730", "createdAt": "2020-05-07T23:12:53Z", "commit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTc3ODY3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#pullrequestreview-408577867", "createdAt": "2020-05-08T23:27:44Z", "commit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyNzo0NVrOGS2W4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyOTozN1rOGS2YfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODE0Ng==", "bodyText": "do we need to handle the DataTypeException here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r422418146", "createdAt": "2020-05-08T23:27:45Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +78,71 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODIyMQ==", "bodyText": "same as above", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r422418221", "createdAt": "2020-05-08T23:28:05Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +78,71 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),\n+                String.class));\n+        final String hostAddress =\n+            record.get(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME)), String.class);\n+\n+        CompactNodeSummary summary = new CompactNodeSummary(nodeId, hostAddress);\n+\n+        readAndSetTotalConsumedPerDimension(record, summary);\n+        readAndSetNumShardsPerDimension(record, summary);\n+        readAndSetTemperatureVector(record, summary);\n+\n+        return summary;\n+    }\n+\n+    private static void readAndSetTemperatureVector(Record record, CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String normalizedMeanUsageForDimension = record\n+                .get((DSL.field(DSL.name(dimension.NAME + MEAN_SUFFIX_KEY),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODU1Ng==", "bodyText": "can we simple cast the return type as Double.class here ?\nrecord.get((DSL.field(DSL.name(dimension.NAME + TOTAL_SUFFIX_KEY), Double.class)));", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r422418556", "createdAt": "2020-05-08T23:29:37Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +78,71 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),\n+                String.class));\n+        final String hostAddress =\n+            record.get(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME)), String.class);\n+\n+        CompactNodeSummary summary = new CompactNodeSummary(nodeId, hostAddress);\n+\n+        readAndSetTotalConsumedPerDimension(record, summary);\n+        readAndSetNumShardsPerDimension(record, summary);\n+        readAndSetTemperatureVector(record, summary);\n+\n+        return summary;\n+    }\n+\n+    private static void readAndSetTemperatureVector(Record record, CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String normalizedMeanUsageForDimension = record\n+                .get((DSL.field(DSL.name(dimension.NAME + MEAN_SUFFIX_KEY),\n+                    String.class)));\n+            short value = 0;\n+            if (normalizedMeanUsageForDimension != null && !normalizedMeanUsageForDimension.isEmpty()) {\n+                value = Short.parseShort(normalizedMeanUsageForDimension);\n+            }\n+            summary.setTemperatureForDimension(dimension,\n+                new NormalizedValue(value));\n+        }\n+    }\n+\n+    private static void readAndSetNumShardsPerDimension(Record record, CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String numShardsForDimension = record\n+                .get((DSL.field(DSL.name(dimension.NAME + NUM_SHARDS_SUFFIX_KEY),\n+                    String.class)));\n+            int value = 0;\n+            if (numShardsForDimension != null && !numShardsForDimension.isEmpty()) {\n+                value = Integer.parseInt(numShardsForDimension);\n+            }\n+            summary.setNumOfShards(dimension, value);\n+        }\n+    }\n+\n+    private static void readAndSetTotalConsumedPerDimension(Record record,\n+        CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String totalConsumedForDimension =\n+                record.get((DSL.field(DSL.name(dimension.NAME + TOTAL_SUFFIX_KEY), String.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69d2ac5ebe997322fa1c62a09bff63e56c0f6d94", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/69d2ac5ebe997322fa1c62a09bff63e56c0f6d94", "committedDate": "2020-05-09T00:48:32Z", "message": "Merging from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40c077bbf26468e8349fb576c6dc9b7e64de90e8", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/40c077bbf26468e8349fb576c6dc9b7e64de90e8", "committedDate": "2020-05-09T00:52:00Z", "message": "Add a try-catch block for handling DataTypeException from Jooq"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/191520336d6d63fe905d55495d4e0ba44617fdd5", "committedDate": "2020-05-09T03:09:12Z", "message": "Added clarifying comment around ClusterTemperatureRca retrieval"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MzM2Njg2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#pullrequestreview-409336686", "createdAt": "2020-05-11T16:32:09Z", "commit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NTAzMDk4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#pullrequestreview-409503098", "createdAt": "2020-05-11T20:25:09Z", "commit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyNTowOVrOGTsDAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyNTowOVrOGTsDAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5Nzc5NA==", "bodyText": "Can this be converted into a static import ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423297794", "createdAt": "2020-05-11T20:25:09Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -19,15 +19,24 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeTemperatureSummaryMessage;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceTemperatureMessage;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary.SQL_SCHEMA_CONSTANTS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NTA0MTc3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#pullrequestreview-409504177", "createdAt": "2020-05-11T20:26:41Z", "commit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyNjo0MVrOGTsGRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo0ODoxMFrOGTsy8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5ODYyOA==", "bodyText": "Is this a candidate for a metric?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423298628", "createdAt": "2020-05-11T20:26:41Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +79,88 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMDQxOA==", "bodyText": "For my understanding, is there a relevance to the ordering of these calls ? Just from function name, it looks that readAndSetNumShardsPerDimension() should be invoked before readAndSetTotalConsumedPerDimension()", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423300418", "createdAt": "2020-05-11T20:29:53Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +79,88 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),\n+                String.class));\n+        final String hostAddress =\n+            record.get(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME)), String.class);\n+\n+        CompactNodeSummary summary = new CompactNodeSummary(nodeId, hostAddress);\n+\n+        readAndSetTotalConsumedPerDimension(record, summary);\n+        readAndSetNumShardsPerDimension(record, summary);\n+        readAndSetTemperatureVector(record, summary);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwNTc3OA==", "bodyText": "nit: Can use\nLOG.error(\"Couldn't convert to the right data type while reading temperature vector from the DB.\", dte);", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423305778", "createdAt": "2020-05-11T20:40:02Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +79,88 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),\n+                String.class));\n+        final String hostAddress =\n+            record.get(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME)), String.class);\n+\n+        CompactNodeSummary summary = new CompactNodeSummary(nodeId, hostAddress);\n+\n+        readAndSetTotalConsumedPerDimension(record, summary);\n+        readAndSetNumShardsPerDimension(record, summary);\n+        readAndSetTemperatureVector(record, summary);\n+\n+        return summary;\n+    }\n+\n+    private static void readAndSetTemperatureVector(Record record, CompactNodeSummary summary) {\n+        try {\n+            for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+                String normalizedMeanUsageForDimension = record\n+                    .get((DSL.field(DSL.name(dimension.NAME + MEAN_SUFFIX_KEY),\n+                        String.class)));\n+                short value = 0;\n+                if (normalizedMeanUsageForDimension != null && !normalizedMeanUsageForDimension\n+                    .isEmpty()) {\n+                    value = Short.parseShort(normalizedMeanUsageForDimension);\n+                }\n+                summary.setTemperatureForDimension(dimension,\n+                    new NormalizedValue(value));\n+            }\n+        } catch (final DataTypeException dte) {\n+            LOG.error(\"Couldn't convert to the right data type while reading temperature vector \"\n+                + \"from the DB. {}\", dte.getMessage(), dte);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwODQzNA==", "bodyText": "Can you add a java doc here explaining what the key, value represent and map usage.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423308434", "createdAt": "2020-05-11T20:45:05Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java", "diffHunk": "@@ -45,13 +49,14 @@\n  */\n public class SQLiteQueryUtils {\n   private static final Map<String, String> nestedTableMap;\n+  private static final Map<String, String> temperatureProfileNestedSummaryMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxMDA2NA==", "bodyText": "Why use an unmodifiableMap instead of an immutableMap ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423310064", "createdAt": "2020-05-11T20:48:10Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java", "diffHunk": "@@ -61,6 +66,18 @@\n     nestedTableMap = Collections.unmodifiableMap(tableMap);\n   }\n \n+  static {\n+    Map<String, String> temperatureSummaryMap = new HashMap<>();\n+    temperatureSummaryMap.put(ResourceFlowUnit.RCA_TABLE_NAME,\n+        NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME);\n+    temperatureSummaryMap.put(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME,\n+        NodeLevelDimensionalSummary.ZONE_SUMMARY_TABLE_NAME);\n+    temperatureSummaryMap.put(NodeLevelDimensionalSummary.ZONE_SUMMARY_TABLE_NAME,\n+        ShardProfileSummary.SUMMARY_TABLE_NAME);\n+\n+    temperatureProfileNestedSummaryMap = Collections.unmodifiableMap(temperatureSummaryMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 987, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}