{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTcxMTE3", "number": 434, "title": "Read from sqlite in IT and add cache decider IT", "bodyText": "Fixes #:\nDescription of changes:\nRead from sqlite in IT and add cache decider IT\nsqlite> .tables\nHotClusterSummary   HotResourceSummary  RCA               \nHotNodeSummary      PersistedAction   \nsqlite> select * from PersistedAction\n   ...> ;\nPersistedAction_ID  nodeIps      muted       actionName          timestamp      nodeIds     summary                                                                       actionable  coolOffPeriod\n------------------  -----------  ----------  ------------------  -------------  ----------  ----------------------------------------------------------------------------  ----------  -------------\n1                   {127.0.0.1}  0           ModifyCacheMaxSize  1600883515101  {DATA_0}    Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]  1           300000       \n\ncom.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master.FieldDataCacheDeciderDedicatedMasterITest\n\n  Test testFieldDataCacheAction PASSED (5m 5s)\n\ncom.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master.CacheRcaDedicatedMasterITest\n\n  Test testShardRequestCacheRca PASSED (1m 59s)\n  Test testFieldDataCacheRca PASSED (1m 59s)\n\ncom.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master.ShardRequestCacheDeciderDedicatedMasterITest\n\n  Test testShardRequestCacheAction PASSED (5m 5s)\n\ncom.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.multi_node.CacheRcaMultiNodeITest\n\n  Test testShardRequestCacheRca PASSED (1m 59s)\n  Test testFieldDataCacheRca PASSED (59.2s)\n\ncom.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.multi_node.FieldDataCacheDeciderMultiNodeITest\n\n  Test testFieldDataCacheAction PASSED (5m 5s)\n\ncom.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.multi_node.ShardRequestCacheDeciderMultiNodeITest\n\n  Test testShardRequestCacheAction PASSED (5m 3s)\n\nTests:\nIT\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-09-23T18:42:12Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434", "merged": true, "mergeCommit": {"oid": "145d0b008f5fb5dc9244d2e3330f40ba972f5479"}, "closed": true, "closedAt": "2020-10-02T17:37:08Z", "author": {"login": "sruti1312"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLxEMiAH2gAyNDkxOTcxMTE3OmQzNDY2ZTBkNWE3Y2I4OTY3NTgxNzlkZDlmODBhZmM5OWVjNzU1YTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOpT3hgFqTUwMTMxMzQ1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d3466e0d5a7cb896758179dd9f80afc99ec755a4", "author": {"user": {"login": "sruti1312", "name": "Sruti Parthiban"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/d3466e0d5a7cb896758179dd9f80afc99ec755a4", "committedDate": "2020-09-23T18:40:20Z", "message": "Read from sqlite in IT and add cache decider IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96", "author": {"user": {"login": "sruti1312", "name": "Sruti Parthiban"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/5595d8219887252fddb68540708331d1e4a33b96", "committedDate": "2020-09-23T18:46:12Z", "message": "Fix comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODE2MTU0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#pullrequestreview-495816154", "createdAt": "2020-09-24T17:56:09Z", "commit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1NjowOVrOHXmP8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MDo0MlrOHXn_3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNTk2OQ==", "bodyText": "Do we not want to do anything with the thrown exception ? If not, we might want to add a code comment as why", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494505969", "createdAt": "2020-09-24T17:56:09Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/Host.java", "diffHunk": "@@ -368,6 +368,14 @@ public JsonElement getDataForRca(String rcaName) {\n     return obj;\n   }\n \n+  public <T> T constructObjectFromDB(Class<T> className) {\n+    try {\n+      return this.rcaController.getPersistenceProvider().read(className);\n+    } catch (Exception e) {\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMDEwOQ==", "bodyText": "we might want to say DB_QUERY.\nI hope our persistence layer is pluggable enough that we can swap out sqlite for anything quite easily :)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494510109", "createdAt": "2020-09-24T18:03:26Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AExpect.java", "diffHunk": "@@ -53,7 +53,8 @@\n    * Currently supported places to look for RCA outputs are the SQLite file or by hitting the rest endpoint.\n    */\n   enum Type {\n-    REST_API\n+    REST_API,\n+    SQLITE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNDYyMA==", "bodyText": "If we have to type-cast then this is not the right case of generics.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494534620", "createdAt": "2020-09-24T18:40:42Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class FieldDataCacheDeciderValidator implements IValidator {\n+    long startTime;\n+\n+    public FieldDataCacheDeciderValidator() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":{node1},\n+     * \"nodeIp\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    @Override\n+    public <T> boolean check(T response) {\n+        if (response == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODU1Njgx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#pullrequestreview-495855681", "createdAt": "2020-09-24T18:42:10Z", "commit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MjoxMFrOHXoDBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MjoxMFrOHXoDBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNTQzMQ==", "bodyText": "same here as well", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494535431", "createdAt": "2020-09-24T18:42:10Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/queue_tuning/validator/QueueRejectionValidator.java", "diffHunk": "@@ -46,7 +46,8 @@ public QueueRejectionValidator() {\n    * ]}\n    */\n   @Override\n-  public boolean check(JsonElement response) {\n+  public <T> boolean check(T responseObject) {\n+    JsonElement response = (JsonElement) responseObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27", "author": {"user": {"login": "sruti1312", "name": "Sruti Parthiban"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27", "committedDate": "2020-09-24T23:47:57Z", "message": "Modify IValidator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDQ2NDkw", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#pullrequestreview-496046490", "createdAt": "2020-09-25T01:06:17Z", "commit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTI5NjU3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#pullrequestreview-497929657", "createdAt": "2020-09-28T21:59:24Z", "commit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMTo1OToyNFrOHZRT6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1ODo0OVrOHZUqMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDA3NA==", "bodyText": "Do we need these in a FieldData cache test IT?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496260074", "createdAt": "2020-09-28T21:59:24Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDUyMA==", "bodyText": "Same as above, is this needed for fielddata cache it", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496260520", "createdAt": "2020-09-28T22:00:25Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMjc4Mw==", "bodyText": "If we add the relevant metric values for them, will these caches get populated. By skipping this error in integ tests we expose ourselves to these failures in actual clusters.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496312783", "createdAt": "2020-09-29T00:50:36Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Hit.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Max_Size.class,\n+        dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Heap_Max.class,\n+        dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        })\n+        })\n+\n+public class FieldDataCacheDeciderITest {\n+    public static final String CACHE_TUNING_RESOURCES_DIR = Consts.INTEG_TESTS_SRC_DIR + \"./tests/cache_tuning/resource/\";\n+    public static final String INDEX_NAME = \"MockIndex\";\n+    public static final String SHARD_ID = \"1\";\n+\n+    // Test CacheDecider for ModifyCacheAction (field data cache).\n+    // The cache decider should emit modify cache size action as field data rca is unhealthy.\n+    @Test\n+    @AExpect(\n+            what = AExpect.Type.DB_QUERY,\n+            on = HostTag.ELECTED_MASTER,\n+            validator = FieldDataCacheDeciderValidator.class,\n+            forRca = PersistedAction.class,\n+            timeoutSeconds = 1000)\n+    @AErrorPatternIgnored(\n+            pattern = \"AggregateMetric:gather()\",\n+            reason = \"CPU metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"Metric:gather()\",\n+            reason = \"Metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"NodeConfigCacheReaderUtil\",\n+            reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"CacheUtil:getCacheMaxSize()\",\n+            reason = \"Node Config Cache is expected to be missing during startup.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzI2NA==", "bodyText": "Why is this error expected in CacheHealthDecider rca?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496313264", "createdAt": "2020-09-29T00:52:22Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Hit.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Max_Size.class,\n+        dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Heap_Max.class,\n+        dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        })\n+        })\n+\n+public class FieldDataCacheDeciderITest {\n+    public static final String CACHE_TUNING_RESOURCES_DIR = Consts.INTEG_TESTS_SRC_DIR + \"./tests/cache_tuning/resource/\";\n+    public static final String INDEX_NAME = \"MockIndex\";\n+    public static final String SHARD_ID = \"1\";\n+\n+    // Test CacheDecider for ModifyCacheAction (field data cache).\n+    // The cache decider should emit modify cache size action as field data rca is unhealthy.\n+    @Test\n+    @AExpect(\n+            what = AExpect.Type.DB_QUERY,\n+            on = HostTag.ELECTED_MASTER,\n+            validator = FieldDataCacheDeciderValidator.class,\n+            forRca = PersistedAction.class,\n+            timeoutSeconds = 1000)\n+    @AErrorPatternIgnored(\n+            pattern = \"AggregateMetric:gather()\",\n+            reason = \"CPU metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"Metric:gather()\",\n+            reason = \"Metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"NodeConfigCacheReaderUtil\",\n+            reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"CacheUtil:getCacheMaxSize()\",\n+            reason = \"Node Config Cache is expected to be missing during startup.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SubscribeResponseHandler:onError()\",\n+            reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+            reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"HighHeapUsageOldGenRca:operate()\",\n+            reason = \"Old gen rca is expected to be missing in this integ test.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzM2NQ==", "bodyText": "Can we make the Node Config cache available in IT?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496313365", "createdAt": "2020-09-29T00:52:45Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Hit.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Max_Size.class,\n+        dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Heap_Max.class,\n+        dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        })\n+        })\n+\n+public class FieldDataCacheDeciderITest {\n+    public static final String CACHE_TUNING_RESOURCES_DIR = Consts.INTEG_TESTS_SRC_DIR + \"./tests/cache_tuning/resource/\";\n+    public static final String INDEX_NAME = \"MockIndex\";\n+    public static final String SHARD_ID = \"1\";\n+\n+    // Test CacheDecider for ModifyCacheAction (field data cache).\n+    // The cache decider should emit modify cache size action as field data rca is unhealthy.\n+    @Test\n+    @AExpect(\n+            what = AExpect.Type.DB_QUERY,\n+            on = HostTag.ELECTED_MASTER,\n+            validator = FieldDataCacheDeciderValidator.class,\n+            forRca = PersistedAction.class,\n+            timeoutSeconds = 1000)\n+    @AErrorPatternIgnored(\n+            pattern = \"AggregateMetric:gather()\",\n+            reason = \"CPU metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"Metric:gather()\",\n+            reason = \"Metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"NodeConfigCacheReaderUtil\",\n+            reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"CacheUtil:getCacheMaxSize()\",\n+            reason = \"Node Config Cache is expected to be missing during startup.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SubscribeResponseHandler:onError()\",\n+            reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+            reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"HighHeapUsageOldGenRca:operate()\",\n+            reason = \"Old gen rca is expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"ModifyCacheMaxSizeAction:build()\",\n+            reason = \"Node Config Cache metrics is expected to be missing during startup\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDA2NQ==", "bodyText": "Instead of this, we should write the ModifyCacheMaxSizeAction.from_summar() method, and validate that action here.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496314065", "createdAt": "2020-09-29T00:55:20Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class FieldDataCacheDeciderValidator implements IValidator {\n+    long startTime;\n+\n+    public FieldDataCacheDeciderValidator() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":{node1},\n+     * \"nodeIp\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    @Override\n+    public boolean checkDbObj(Object object) {\n+        if (object == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) object;\n+        return checkPersistedAction(persistedAction);\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeIds\":{node1},\n+     * \"nodeIps\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     *\n+     */\n+    private boolean checkPersistedAction(final PersistedAction persistedAction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDE0Nw==", "bodyText": "Same as FD cache", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496314147", "createdAt": "2020-09-29T00:55:40Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/ShardRequestCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class ShardRequestCacheDeciderValidator implements IValidator {\n+    long startTime;\n+\n+    public ShardRequestCacheDeciderValidator() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":11,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":\"node1\",\n+     * \"nodeIp\":1.1.1.1,\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000,\n+     * \"muted\": 1,\n+     * \"summary\": Update [SHARD_REQUEST_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    @Override\n+    public boolean checkDbObj(Object object) {\n+        if (object == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) object;\n+        return checkPersistedAction(persistedAction);\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":11,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":\"node1\",\n+     * \"nodeIp\":1.1.1.1,\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000,\n+     * \"muted\": 1\n+     * \"summary\": Update [SHARD_REQUEST_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    private boolean checkPersistedAction(final PersistedAction persistedAction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDM3NQ==", "bodyText": "We should also add tests for the other two cluster types - SINGLE_NODE and MULTI_NODE_DEDICATED_MASTER.\nMULTI_NODE_DEDICATED_MASTER is particularly important.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496314375", "createdAt": "2020-09-29T00:56:35Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/ShardRequestCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.ShardRequestCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.ShardRequestCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDkzMQ==", "bodyText": "Why are we making it a generic DB_QUERY? Can we instead make it an Action since that is what we persist in the table. And use from_summary() methods to create actions from summary.\nThe summary will contain entire details of the action which may create some redundancy with existing columns in the persisted action table, but that should be fine.\nI think this IT PR should also include the change to create actions from summary strings, and use them for validation.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496314931", "createdAt": "2020-09-29T00:58:49Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AExpect.java", "diffHunk": "@@ -53,7 +53,8 @@\n    * Currently supported places to look for RCA outputs are the SQLite file or by hitting the rest endpoint.\n    */\n   enum Type {\n-    REST_API\n+    REST_API,\n+    DB_QUERY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b19b7a02ebc386f4d1c27d41fb29129bfda365e8", "author": {"user": {"login": "sruti1312", "name": "Sruti Parthiban"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b19b7a02ebc386f4d1c27d41fb29129bfda365e8", "committedDate": "2020-09-30T15:34:49Z", "message": "Add cache IT for dedicated master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f8d6d881af2425ba47ba3d2293a191bca8998a4", "author": {"user": {"login": "sruti1312", "name": "Sruti Parthiban"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4f8d6d881af2425ba47ba3d2293a191bca8998a4", "committedDate": "2020-09-30T17:23:45Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449", "author": {"user": {"login": "sruti1312", "name": "Sruti Parthiban"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/11b349a8530fec2faf974117bb0a9e079a81c449", "committedDate": "2020-09-30T18:22:35Z", "message": "Remove unnecessary metrics from IT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NzQ0NTg2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#pullrequestreview-499744586", "createdAt": "2020-09-30T19:27:19Z", "commit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "state": "DISMISSED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyNzoxOVrOHasKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTozMjoyNlrOHasVTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0ODUxNg==", "bodyText": "Does master node emit this metric for given dimensions, if you don't have any shards on the master node?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497748516", "createdAt": "2020-09-30T19:27:19Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.FieldDataCacheClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.ShardRequestCacheClusterRca;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0OTQ4Mg==", "bodyText": "Same as above, please confirm and remove if this metric is missing from dedicated master scenarios. We want to make sure the integ tests simulate actual cluster scenarios, and that there are no NPEs due to missing shards.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497749482", "createdAt": "2020-09-30T19:29:00Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.FieldDataCacheClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.ShardRequestCacheClusterRca;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0OTcwNA==", "bodyText": "Same as above, pls confirm metric is present on dedicated masters.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497749704", "createdAt": "2020-09-30T19:29:20Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.FieldDataCacheClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.ShardRequestCacheClusterRca;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0OTgzNA==", "bodyText": "Same as above, pls confirm metric is present on dedicated masters.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497749834", "createdAt": "2020-09-30T19:29:30Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.FieldDataCacheClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.ShardRequestCacheClusterRca;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1MDY0Mg==", "bodyText": "Same as above, pls confirm metric is present on dedicated masters.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497750642", "createdAt": "2020-09-30T19:30:59Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/FieldDataCacheDeciderDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1MTM3Mg==", "bodyText": "Nice, thanks for making this change.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497751372", "createdAt": "2020-09-30T19:32:26Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class FieldDataCacheDeciderValidator implements IValidator {\n+    AppContext appContext;\n+    long startTime;\n+\n+    public FieldDataCacheDeciderValidator() {\n+        appContext = new AppContext();\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":{node1},\n+     * \"nodeIp\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": \"Id\":\"DATA_0\",\"Ip\":\"127.0.0.1\",\"resource\":10,\"desiredCacheMaxSizeInBytes\":100000,\n+     *            \"currentCacheMaxSizeInBytes\":10000,\"coolOffPeriodInMillis\":300000,\"canUpdate\":true}\n+     */\n+    @Override\n+    public boolean checkDbObj(Object object) {\n+        if (object == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) object;\n+        return checkPersistedAction(persistedAction);\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeIds\":{node1},\n+     * \"nodeIps\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": \"Id\":\"DATA_0\",\"Ip\":\"127.0.0.1\",\"resource\":10,\"desiredCacheMaxSizeInBytes\":100000,\n+     *            \"currentCacheMaxSizeInBytes\":10000,\"coolOffPeriodInMillis\":300000,\"canUpdate\":true}\n+     *\n+     */\n+    private boolean checkPersistedAction(final PersistedAction persistedAction) {\n+        ModifyCacheMaxSizeAction modifyCacheMaxSizeAction =\n+                ModifyCacheMaxSizeAction.fromSummary(persistedAction.getSummary(), appContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0278f8434aeacff14717efd20c69ef653a4bdc8", "author": {"user": {"login": "sruti1312", "name": "Sruti Parthiban"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/c0278f8434aeacff14717efd20c69ef653a4bdc8", "committedDate": "2020-10-01T17:18:31Z", "message": "Remove unnecessary metrics from IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30e54668ee969eb71b09ba057db210ae76a2263c", "author": {"user": {"login": "sruti1312", "name": "Sruti Parthiban"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/30e54668ee969eb71b09ba057db210ae76a2263c", "committedDate": "2020-10-01T17:27:13Z", "message": "Remove cache metrics in elected master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjkzMzg2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#pullrequestreview-501293386", "createdAt": "2020-10-02T16:49:28Z", "commit": {"oid": "30e54668ee969eb71b09ba057db210ae76a2263c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzEzNDU0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#pullrequestreview-501313454", "createdAt": "2020-10-02T17:19:59Z", "commit": {"oid": "30e54668ee969eb71b09ba057db210ae76a2263c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 924, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}