{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjcxNTEx", "number": 298, "title": "Add a cluster level collector for node config settings", "bodyText": "Issue #:\n#300\nDescription of changes:\n\nAdd a cluster level collector for node config settings\ncreate a thread-safe node config cache in AppContect to store node config settings and share them among different RCA vertices in RCA graph\n\nTests:\ntested on docker\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-07-22T18:02:16Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298", "merged": true, "mergeCommit": {"oid": "531b034f2a67e6ef80ebb8311398968ff46bd985"}, "closed": true, "closedAt": "2020-07-24T19:38:05Z", "author": {"login": "rguo-aws"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3epjDgH2gAyNDU1MjcxNTExOjE4MTZlNDc5MmYxZjVjZWY5ZGEyOWVmZjA2ZjcyMWRlZTk0NTkwMmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4JHF6AFqTQ1NTEzMTE4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1816e4792f1f5cef9da29eff06f721dee945902d", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1816e4792f1f5cef9da29eff06f721dee945902d", "committedDate": "2020-07-22T17:54:27Z", "message": "Add a cluster level collector for node config settings. Create a node config cache in AppContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/9de4cd26f6671cf255ea4d6554a49879f10bda2c", "committedDate": "2020-07-22T18:12:17Z", "message": "Add more comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzODEwMDYy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#pullrequestreview-453810062", "createdAt": "2020-07-23T03:00:05Z", "commit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzowMDowNVrOG16xqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwMzowMDowNVrOG16xqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTE5MDY5Nw==", "bodyText": "Since this is not going to sql db, I don't think we need NaN value and check. Let's instead throw a checked exception here for consumer code safety? (anyway the check has to be handled by the caller; exception will help protect against cases where callers forget the NaN check).", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#discussion_r459190697", "createdAt": "2020-07-23T03:00:05Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.collector;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+/**\n+ * we create a thread-safe unbounded cache instance in {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext}\n+ * to store the node config settings from each node. Any RCA vertex in RCA graph can read the node config directly from\n+ * this cache instance. The key of this cache is NodeKey + Resource and value is the actual value of the config setting\n+ * (i.e. size of write queue capacity)\n+ */\n+public class NodeConfigCache {\n+\n+  private static final int LOADING_CACHE_EVICTION_TIMEOUT = 10;\n+  private final Cache<NodeConfigKey, Double> nodeConfigCache;\n+\n+  //unbounded cache with eviction timeout set to 10 mins\n+  public NodeConfigCache() {\n+    nodeConfigCache =\n+        CacheBuilder.newBuilder()\n+            .expireAfterWrite(LOADING_CACHE_EVICTION_TIMEOUT, TimeUnit.MINUTES)\n+            .build();\n+  }\n+\n+  public void put(NodeKey nodeKey, Resource config, double value) {\n+    nodeConfigCache.put(new NodeConfigKey(nodeKey, config), value);\n+  }\n+\n+  public double get(NodeKey nodeKey, Resource config) {\n+    Double ret = nodeConfigCache.getIfPresent(new NodeConfigKey(nodeKey, config));\n+    if (ret == null) {\n+      return Double.NaN;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzY3NjI5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#pullrequestreview-454367629", "createdAt": "2020-07-23T17:54:49Z", "commit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1NDo0OVrOG2VaHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowNTozNlrOG2VyTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyNzAzOA==", "bodyText": "nit: Can we replace the TIMEOUT in LOADING_CACHE_EVICTION_TIMEOUT with TTL?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#discussion_r459627038", "createdAt": "2020-07-23T17:54:49Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.collector;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+/**\n+ * we create a thread-safe unbounded cache instance in {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext}\n+ * to store the node config settings from each node. Any RCA vertex in RCA graph can read the node config directly from\n+ * this cache instance. The key of this cache is NodeKey + Resource and value is the actual value of the config setting\n+ * (i.e. size of write queue capacity)\n+ */\n+public class NodeConfigCache {\n+\n+  private static final int LOADING_CACHE_EVICTION_TIMEOUT = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyODczNQ==", "bodyText": "Do we want to check here for Non-Null, Non-Negative values before putting them in HashMap?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#discussion_r459628735", "createdAt": "2020-07-23T17:57:38Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.collector;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+/**\n+ * we create a thread-safe unbounded cache instance in {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext}\n+ * to store the node config settings from each node. Any RCA vertex in RCA graph can read the node config directly from\n+ * this cache instance. The key of this cache is NodeKey + Resource and value is the actual value of the config setting\n+ * (i.e. size of write queue capacity)\n+ */\n+public class NodeConfigCache {\n+\n+  private static final int LOADING_CACHE_EVICTION_TIMEOUT = 10;\n+  private final Cache<NodeConfigKey, Double> nodeConfigCache;\n+\n+  //unbounded cache with eviction timeout set to 10 mins\n+  public NodeConfigCache() {\n+    nodeConfigCache =\n+        CacheBuilder.newBuilder()\n+            .expireAfterWrite(LOADING_CACHE_EVICTION_TIMEOUT, TimeUnit.MINUTES)\n+            .build();\n+  }\n+\n+  public void put(NodeKey nodeKey, Resource config, double value) {\n+    nodeConfigCache.put(new NodeConfigKey(nodeKey, config), value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMDA2NA==", "bodyText": "How do we handle stale entries in  Node Config cache? Do we need a check in get() for stale data ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#discussion_r459630064", "createdAt": "2020-07-23T17:59:53Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.collector;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+/**\n+ * we create a thread-safe unbounded cache instance in {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext}\n+ * to store the node config settings from each node. Any RCA vertex in RCA graph can read the node config directly from\n+ * this cache instance. The key of this cache is NodeKey + Resource and value is the actual value of the config setting\n+ * (i.e. size of write queue capacity)\n+ */\n+public class NodeConfigCache {\n+\n+  private static final int LOADING_CACHE_EVICTION_TIMEOUT = 10;\n+  private final Cache<NodeConfigKey, Double> nodeConfigCache;\n+\n+  //unbounded cache with eviction timeout set to 10 mins\n+  public NodeConfigCache() {\n+    nodeConfigCache =\n+        CacheBuilder.newBuilder()\n+            .expireAfterWrite(LOADING_CACHE_EVICTION_TIMEOUT, TimeUnit.MINUTES)\n+            .build();\n+  }\n+\n+  public void put(NodeKey nodeKey, Resource config, double value) {\n+    nodeConfigCache.put(new NodeConfigKey(nodeKey, config), value);\n+  }\n+\n+  public double get(NodeKey nodeKey, Resource config) {\n+    Double ret = nodeConfigCache.getIfPresent(new NodeConfigKey(nodeKey, config));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMjI5Mg==", "bodyText": "The constants here make the code unreadable, if we can add a variable with name suggesting what the constant represents, it is helpful.\nAdditionally, later we should refactor to introduce a defaultIntervalPeriod and use is across all collector and similarly for RCAs as well.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#discussion_r459632292", "createdAt": "2020-07-23T18:03:58Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigClusterCollector.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.collector;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.EmptyFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.NodeConfigFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ExceptionsAndErrors;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.RcaGraphMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Cluster level node config collector that collect node config settings from each node and\n+ * store them into the {@link NodeConfigCache}\n+ */\n+public class NodeConfigClusterCollector extends NonLeafNode<EmptyFlowUnit> {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeConfigClusterCollector.class);\n+  private final NodeConfigCollector nodeConfigCollector;\n+\n+  public NodeConfigClusterCollector(final NodeConfigCollector nodeConfigCollector) {\n+    super(0, 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzMzIyOQ==", "bodyText": "nit:  Javadoc explaining what addNodeLevelConfigs() is doing.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#discussion_r459633229", "createdAt": "2020-07-23T18:05:36Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigClusterCollector.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.collector;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.EmptyFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.NodeConfigFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ExceptionsAndErrors;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.RcaGraphMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Cluster level node config collector that collect node config settings from each node and\n+ * store them into the {@link NodeConfigCache}\n+ */\n+public class NodeConfigClusterCollector extends NonLeafNode<EmptyFlowUnit> {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeConfigClusterCollector.class);\n+  private final NodeConfigCollector nodeConfigCollector;\n+\n+  public NodeConfigClusterCollector(final NodeConfigCollector nodeConfigCollector) {\n+    super(0, 5);\n+    this.nodeConfigCollector = nodeConfigCollector;\n+  }\n+\n+  private void addNodeLevelConfigs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0Mzc3Mzkx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#pullrequestreview-454377391", "createdAt": "2020-07-23T18:08:13Z", "commit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowODoxM1rOG2V3xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxODowOTozM1rOG2V6ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNDYzMA==", "bodyText": "Just Curious: Any particular reason we picked the unbounded cache? We may not be having fixed number of entries we want to put in the cache. So wouldn't leaving it unbounded might cause out of memory errors? It should be fine, If we are sure the number of entries are less.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#discussion_r459634630", "createdAt": "2020-07-23T18:08:13Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCache.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.collector;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+/**\n+ * we create a thread-safe unbounded cache instance in {@link com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext}\n+ * to store the node config settings from each node. Any RCA vertex in RCA graph can read the node config directly from\n+ * this cache instance. The key of this cache is NodeKey + Resource and value is the actual value of the config setting\n+ * (i.e. size of write queue capacity)\n+ */\n+public class NodeConfigCache {\n+\n+  private static final int LOADING_CACHE_EVICTION_TIMEOUT = 10;\n+  private final Cache<NodeConfigKey, Double> nodeConfigCache;\n+\n+  //unbounded cache with eviction timeout set to 10 mins\n+  public NodeConfigCache() {\n+    nodeConfigCache =\n+        CacheBuilder.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYzNTM5NQ==", "bodyText": "Maybe 1 UT for updating the value of the key and asserting if the updated value is returned.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#discussion_r459635395", "createdAt": "2020-07-23T18:09:33Z", "author": {"login": "aditjind"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigCacheTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.store.collector;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.GradleTaskForRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.collector.NodeConfigCache;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(GradleTaskForRca.class)\n+public class NodeConfigCacheTest {\n+\n+  private NodeConfigCache nodeConfigCache;\n+  private NodeKey nodeKey1;\n+  private NodeKey nodeKey2;\n+\n+  @Before\n+  public void init() {\n+    this.nodeConfigCache = new NodeConfigCache();\n+    this.nodeKey1 = new NodeKey(\"node1\", \"127.0.0.1\");\n+    this.nodeKey2 = new NodeKey(\"node2\", \"127.0.0.2\");\n+  }\n+\n+  @Test\n+  public void testNonExistentKey() {\n+    double val = nodeConfigCache.get(nodeKey1, ResourceUtil.WRITE_QUEUE_CAPACITY);\n+    Assert.assertTrue(Double.isNaN(val));\n+\n+    nodeConfigCache.put(nodeKey1, ResourceUtil.WRITE_QUEUE_CAPACITY, 2.0);\n+    val = nodeConfigCache.get(nodeKey1, ResourceUtil.WRITE_QUEUE_REJECTION);\n+    Assert.assertTrue(Double.isNaN(val));\n+\n+    val = nodeConfigCache.get(nodeKey2, ResourceUtil.WRITE_QUEUE_CAPACITY);\n+    Assert.assertTrue(Double.isNaN(val));\n+  }\n+\n+  @Test\n+  public void testSetAndGetValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9de4cd26f6671cf255ea4d6554a49879f10bda2c"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "193f2bb3358fe7b5c9ac9d134f2af938a3ff7927", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/193f2bb3358fe7b5c9ac9d134f2af938a3ff7927", "committedDate": "2020-07-23T22:43:35Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faa0667f55880b6739444c88dff281be2d3c8f4e", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/faa0667f55880b6739444c88dff281be2d3c8f4e", "committedDate": "2020-07-23T22:47:12Z", "message": "add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3363e16c216674429b7aa088d63ad1fc2ec315a7", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3363e16c216674429b7aa088d63ad1fc2ec315a7", "committedDate": "2020-07-23T23:02:25Z", "message": "Fix UTs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MDkwOTM5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#pullrequestreview-455090939", "createdAt": "2020-07-24T18:13:18Z", "commit": {"oid": "3363e16c216674429b7aa088d63ad1fc2ec315a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTMxMTg0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/298#pullrequestreview-455131184", "createdAt": "2020-07-24T19:22:44Z", "commit": {"oid": "3363e16c216674429b7aa088d63ad1fc2ec315a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1104, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}