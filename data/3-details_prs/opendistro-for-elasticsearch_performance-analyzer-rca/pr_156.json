{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDc5ODI2", "number": 156, "title": "Collect node stats as top consumers for JVM RCA", "bodyText": "Issue #, if available:\nDescription of changes:\n\nadd NodeStatAggregator to collect and aggregate shard based node stats from each data node and calculate its sum.\nAttach top k node stats to the RCA API as top consumers when JVM RCA is triggered\nfix a bug in JVM cluster RCA found when both hot node and JVM RCA are enabled.\nadd unit test for those newly created classes.\n\nTests:\ntested on docker\nCode coverage percentage for this patch:\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-04-22T19:03:57Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156", "merged": true, "mergeCommit": {"oid": "ded726b0e3e143369408f240b660595f19e06552"}, "closed": true, "closedAt": "2020-04-28T17:49:11Z", "author": {"login": "rguo-aws"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZipdpgH2gAyNDA3NDc5ODI2OmZkYmRiODRmZjc0YThkYmI5YzAwNmIwNzNlMGJlOTk4ZmQyMzJmODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccHiRiAH2gAyNDA3NDc5ODI2OjFlODgzMGY4ZmMxMDk0NWQ4YTZiNmNjNWQwNmRlZDZkYzM2NjBjNTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fdbdb84ff74a8dbb9c006b073e0be998fd232f82", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/fdbdb84ff74a8dbb9c006b073e0be998fd232f82", "committedDate": "2020-04-20T17:36:15Z", "message": "Add node stats as top consumers for JVM RCA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9e693ea2a733a6431db92d13bded645ddf708f2", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a9e693ea2a733a6431db92d13bded645ddf708f2", "committedDate": "2020-04-20T23:15:22Z", "message": "fix a bug in JVM cluster RCA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45ba5eac59165b14a5b95909d5b233a9f76db8c9", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/45ba5eac59165b14a5b95909d5b233a9f76db8c9", "committedDate": "2020-04-22T18:58:08Z", "message": "Add unit test for NodeStatAggregator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/915f207bc781a95cb7def885d2f41c99af9d5a2b", "committedDate": "2020-04-22T19:18:59Z", "message": "update README.md to show the latest RCA API response"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTEyNzgw", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#pullrequestreview-399512780", "createdAt": "2020-04-23T22:10:35Z", "commit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjoxMDozNVrOGK-LnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjoyNTo0M1rOGK-mAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NzcyNA==", "bodyText": "Should we make it an rca.conf param ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414157724", "createdAt": "2020-04-23T22:10:35Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageOldGenRca.java", "diffHunk": "@@ -80,11 +92,12 @@\n   // minimum\n   private static final double OLD_GEN_GC_THRESHOLD = 1;\n   private static final double CONVERT_BYTES_TO_MEGABYTES = Math.pow(1024, 3);\n+  private static final int TOP_K = 3;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2MDM0Nw==", "bodyText": "We should make that change where this is no longer required to be specified and it becomes a constant in the Node class", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414160347", "createdAt": "2020-04-23T22:16:08Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageOldGenRca.java", "diffHunk": "@@ -80,11 +92,12 @@\n   // minimum\n   private static final double OLD_GEN_GC_THRESHOLD = 1;\n   private static final double CONVERT_BYTES_TO_MEGABYTES = Math.pow(1024, 3);\n+  private static final int TOP_K = 3;\n   protected Clock clock;\n \n \n   public <M extends Metric> HighHeapUsageOldGenRca(final int rcaPeriod, final double lowerBoundThreshold,\n-      final M heap_Used, final M gc_event, final M heap_Max) {\n+      final M heap_Used, final M gc_event, final M heap_Max, final List<Metric> consumers) {\n     super(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2MjAyNw==", "bodyText": "we can remove this ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414162027", "createdAt": "2020-04-23T22:19:53Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/NodeStatAggregator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotshard.IndexShardKey;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+\n+/**\n+ * We've seen huge performance impact if collecting node stats across all shards on data node.\n+ * So Performance Analyzer writer will only try to collect node stats from a small portion of\n+ * shards at a time to reduce performance impact. This class on reader side will allow us to\n+ * keep track of node stat from all previous batches and calculate its sum.\n+ */\n+public class NodeStatAggregator {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeStatAggregator.class);\n+  private Metric nodeStatMetric;\n+  private int sum;\n+  private final HashMap<IndexShardKey, NodeStatValue> shardKeyMap;\n+  private long lastPurgeTimestamp;\n+  //purge the hash table every 30 mins\n+  private static final int PURGE_HASH_TABLE_INTERVAL_IN_MINS = 30;\n+\n+\n+  public NodeStatAggregator(Metric nodeStatMetric) {\n+    this.nodeStatMetric = nodeStatMetric;\n+    this.sum = 0;\n+    this.lastPurgeTimestamp = 0L;\n+    this.shardKeyMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * Whether this NodeStatAggregator contains valid node stats from writer\n+   * This is to avoid reading stale data when the node stats has already been\n+   * disabled from writer side\n+   * @return if it has valid node stats\n+   */\n+  public boolean isEmpty() {\n+    return this.shardKeyMap.isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NDAxNg==", "bodyText": "Can we use the hascode builder from Apache commons as here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414164016", "createdAt": "2020-04-23T22:24:37Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/IndexShardKey.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotshard;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+import org.jooq.exception.DataTypeException;\n+\n+public class IndexShardKey {\n+\n+  private static final Logger LOG = LogManager.getLogger(IndexShardKey.class);\n+  private final String indexName;\n+  private final int shardId;\n+\n+  public IndexShardKey(String indexName, int shardId) {\n+    this.indexName = indexName;\n+    this.shardId = shardId;\n+  }\n+\n+  public String getIndexName() {\n+    return this.indexName;\n+  }\n+\n+  public int getShardId() {\n+    return this.shardId;\n+  }\n+\n+  public static IndexShardKey buildIndexShardKey(Record record) throws IllegalArgumentException {\n+    if (record == null) {\n+      throw new IllegalArgumentException(\"record is null\");\n+    }\n+    try {\n+      String indexName = record.getValue(CommonDimension.INDEX_NAME.toString(), String.class);\n+      Integer shardId = record.getValue(CommonDimension.SHARD_ID.toString(), Integer.class);\n+      return new IndexShardKey(indexName, shardId);\n+    }\n+    catch (DataTypeException de) {\n+      LOG.error(\"Fail to read field from SQL record, message {}\", de.getMessage());\n+      throw new IllegalArgumentException(\"failed to read field from record\");\n+    }\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (obj != null && obj instanceof IndexShardKey) {\n+      IndexShardKey key = (IndexShardKey)obj;\n+      return indexName.equals(key.indexName) && shardId == key.shardId;\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return indexName.hashCode() * 31 + shardId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NDQ4MA==", "bodyText": "Maybe we can remove additional empty lines ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414164480", "createdAt": "2020-04-23T22:25:43Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/rca/hotheap/NodeStatAggregatorTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.store.rca.hotheap;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.GradleTaskForRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.MetricTestHelper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.NodeStatAggregator;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(GradleTaskForRca.class)\n+public class NodeStatAggregatorTest {\n+\n+  private MetricTestHelper nodeStat;\n+  private NodeStatAggregator nodeStatAggregator;\n+\n+  @Before\n+  public void setup() {\n+    this.nodeStat = new MetricTestHelper(5);\n+    this.nodeStatAggregator = new NodeStatAggregator(nodeStat);\n+  }\n+\n+  @Test\n+  public void testCollect() {\n+    List<String> columnName = Arrays.asList(CommonDimension.INDEX_NAME.toString(), CommonDimension.SHARD_ID.toString(), MetricsDB.MAX);\n+\n+    nodeStat.createTestFlowUnits(columnName, Arrays.asList(\"index1\", \"1\", \"5\"));\n+    nodeStatAggregator.collect(0);\n+    Assert.assertEquals(5, nodeStatAggregator.getSum());\n+\n+    nodeStat.createTestFlowUnits(columnName, Arrays.asList(\"index1\", \"2\", \"3\"));\n+    nodeStatAggregator.collect(TimeUnit.MINUTES.toMillis(3));\n+    Assert.assertEquals(8, nodeStatAggregator.getSum());\n+\n+    nodeStat.createTestFlowUnits(columnName, Arrays.asList(\"index2\", \"1\", \"10\"));\n+    nodeStatAggregator.collect(TimeUnit.MINUTES.toMillis(8));\n+    Assert.assertEquals(18, nodeStatAggregator.getSum());\n+\n+    nodeStat.createTestFlowUnits(columnName, Arrays.asList(\"index1\", \"2\", \"1\"));\n+    nodeStatAggregator.collect(TimeUnit.MINUTES.toMillis(12));\n+    Assert.assertEquals(16, nodeStatAggregator.getSum());\n+\n+    //purge the hash after 30min\n+    nodeStat.createTestFlowUnits(columnName, Arrays.asList(\"index2\", \"2\", \"10\"));\n+    nodeStatAggregator.collect(TimeUnit.MINUTES.toMillis(32));\n+    Assert.assertEquals(21, nodeStatAggregator.getSum());\n+  }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTIzMjc2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#pullrequestreview-399523276", "createdAt": "2020-04-23T22:33:11Z", "commit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjozMzoxMVrOGK-zdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMDowNjo1MFrOGLBCJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE2NzkyNw==", "bodyText": "Should we also catch DataAccessException as well ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414167927", "createdAt": "2020-04-23T22:33:11Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/persist/SQLParsingUtil.java", "diffHunk": "@@ -73,7 +73,7 @@ public static double readDataFromSqlResult(Result<Record> result, Field<String>\n     if (result != null) {\n       try {\n         Record record = SQLParsingUtil.getRecordByName(result, matchedField, matchedFieldName);\n-        ret = record.getValue(MetricsDB.MAX, Double.class);\n+        ret = record.getValue(dataField, Double.class);\n       }\n       catch (IllegalArgumentException ie) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MDQ2Mg==", "bodyText": "Can we just typecast if required instead of creating new ArrayList ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414170462", "createdAt": "2020-04-23T22:39:03Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/DummyGraph.java", "diffHunk": "@@ -65,10 +81,19 @@ public void construct() {\n     addLeaf(gc_Collection_Time);\n     addLeaf(cpuUtilizationGroupByOperation);\n \n+    //add node stats metrics\n+    List<Metric> nodeStatsMetrics = constructNodeStatsMetrics();\n+    for (Metric metric : nodeStatsMetrics) {\n+      metric.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+      addLeaf(metric);\n+    }\n+\n     Rca<ResourceFlowUnit> highHeapUsageOldGenRca = new HighHeapUsageOldGenRca(12, heapUsed, gcEvent,\n-        heapMax);\n+        heapMax, nodeStatsMetrics);\n     highHeapUsageOldGenRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n-    highHeapUsageOldGenRca.addAllUpstreams(Arrays.asList(heapUsed, gcEvent, heapMax));\n+    List<Node<?>> upstream = new ArrayList<>(Arrays.asList(heapUsed, gcEvent, heapMax));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MDg3MA==", "bodyText": "We should consider extracting parts out of this method. Its growing in size :)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414170870", "createdAt": "2020-04-23T22:39:59Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/DummyGraph.java", "diffHunk": "@@ -65,10 +81,19 @@ public void construct() {\n     addLeaf(gc_Collection_Time);\n     addLeaf(cpuUtilizationGroupByOperation);\n \n+    //add node stats metrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MTMxMg==", "bodyText": "It would help to make the runPeriod constant so that we don't have to use the redundant 5 everywhere.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414171312", "createdAt": "2020-04-23T22:41:02Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/DummyGraph.java", "diffHunk": "@@ -95,4 +120,23 @@ public void construct() {\n     hotNodeClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n     hotNodeClusterRca.addAllUpstreams(Collections.singletonList(hotJVMNodeRca));\n   }\n+\n+  private List<Metric> constructNodeStatsMetrics() {\n+    List<Metric> nodeStatsMetrics = new ArrayList<Metric>() {{\n+      add(new Cache_FieldData_Size(5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NzIzNA==", "bodyText": "It might make sense to typecast and keep it into a variable instead of typecasting it for each method call ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414197234", "createdAt": "2020-04-23T23:46:34Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/HighHeapUsageClusterRca.java", "diffHunk": "@@ -86,20 +86,18 @@\n         .getDataNodesDetails()) {\n       ImmutableList<ResourceFlowUnit> nodeStateList = currentMap.get(nodeDetails.getId());\n       if (nodeStateList != null) {\n-        int unhealthyOldGenCnt = 0;\n-        int unhealthyYoungGenCnt = 0;\n+        List<HotResourceSummary> oldGenSummaries = new ArrayList<>();\n+        List<HotResourceSummary> youngGenSummaries = new ArrayList<>();\n         for (ResourceFlowUnit flowUnit : nodeStateList) {\n           if (flowUnit.getResourceContext().getState() == Resources.State.UNHEALTHY) {\n             HotNodeSummary currentNodSummary = (HotNodeSummary) flowUnit.getResourceSummary();\n             for (GenericSummary resourceSummary : currentNodSummary.getNestedSummaryList()) {\n               if (resourceSummary instanceof HotResourceSummary) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwMTQzNg==", "bodyText": "If we only expect youngGenSummaries to have just one element, should we throw an IllegalStateException for that ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414201436", "createdAt": "2020-04-23T23:58:02Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/HighHeapUsageClusterRca.java", "diffHunk": "@@ -108,8 +106,15 @@ else if (((HotResourceSummary) resourceSummary).getResourceType().getJVM() == Jv\n             }\n           }\n         }\n-        if (unhealthyYoungGenCnt >= UNHEALTHY_FLOWUNIT_THRESHOLD || unhealthyOldGenCnt >= UNHEALTHY_FLOWUNIT_THRESHOLD) {\n-          unhealthyNodeList.add(nodeStateList.get(0).getResourceSummary());\n+        if (youngGenSummaries.size() >= UNHEALTHY_FLOWUNIT_THRESHOLD || oldGenSummaries.size() >= UNHEALTHY_FLOWUNIT_THRESHOLD) {\n+          HotNodeSummary nodeSummary = new HotNodeSummary(nodeDetails.getId(), nodeDetails.getHostAddress());\n+          if (youngGenSummaries.size() >= UNHEALTHY_FLOWUNIT_THRESHOLD) {\n+            nodeSummary.addNestedSummaryList(youngGenSummaries.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwNDQ1Mg==", "bodyText": "I am thinking we throw an exception and capture the stacktrace if this is unexpected ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r414204452", "createdAt": "2020-04-24T00:06:50Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/HighHeapUsageClusterRca.java", "diffHunk": "@@ -170,15 +175,12 @@ public ResourceFlowUnit operate() {\n     }\n   }\n \n+  /**\n+   * This is a cluster level RCA vertex which by definition can not be serialize/de-serialized\n+   * over gRPC.\n+   */\n   @Override\n   public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n-    final List<FlowUnitMessage> flowUnitMessages =\n-        args.getWireHopper().readFromWire(args.getNode());\n-    List<ResourceFlowUnit> flowUnitList = new ArrayList<>();\n-    LOG.debug(\"rca: Executing fromWire: {}\", this.getClass().getSimpleName());\n-    for (FlowUnitMessage flowUnitMessage : flowUnitMessages) {\n-      flowUnitList.add(ResourceFlowUnit.buildFlowUnitFromWrapper(flowUnitMessage));\n-    }\n-    setFlowUnits(flowUnitList);\n+    LOG.error(\"RCA: {} should not be send over from network\", this.getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f87df926c8b8c706f306c96b9fa35cb77251e2d4", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f87df926c8b8c706f306c96b9fa35cb77251e2d4", "committedDate": "2020-04-27T23:34:52Z", "message": "Add rca settings into rca.conf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21bddab473614668f65dae0a6b232f10db66abf1", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/21bddab473614668f65dae0a6b232f10db66abf1", "committedDate": "2020-04-27T23:45:45Z", "message": "Merge branch 'master' into rguo-node-stat"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNDQyMjA0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#pullrequestreview-401442204", "createdAt": "2020-04-28T01:45:43Z", "commit": {"oid": "21bddab473614668f65dae0a6b232f10db66abf1"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMTo0NTo0M1rOGM-5zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMTo0NTo0M1rOGM-5zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2NjcwMg==", "bodyText": "Can we use a class instead of hashmap?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r416266702", "createdAt": "2020-04-28T01:45:43Z", "author": {"login": "aadithya"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/ConfJsonWrapper.java", "diffHunk": "@@ -36,6 +36,7 @@\n   private final String analysisGraphEntryPoint;\n   private final int networkQueueLength;\n   private final int perVertexBufferLength;\n+  private final Map<String, String> highHeapUsageOldGenRcaSettings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21bddab473614668f65dae0a6b232f10db66abf1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxOTcyNzcy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#pullrequestreview-401972772", "createdAt": "2020-04-28T15:47:28Z", "commit": {"oid": "21bddab473614668f65dae0a6b232f10db66abf1"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTo0NzoyOFrOGNay_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxNTo1ODo1MFrOGNbVCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyMzcwOA==", "bodyText": "Is there any way to include the units here, bytes I suppose ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r416723708", "createdAt": "2020-04-28T15:47:28Z", "author": {"login": "yojs"}, "path": "README.md", "diffHunk": "@@ -59,29 +59,53 @@ curl --url \"localhost:9650/_opendistro/_performanceanalyzer/rca?name=HighHeapUsa\n ```\n The sample RCA response from above api\n ```\n-[\n-  {\n-    \"Name\": \"HighHeapUsageClusterRca\",\n-    \"State\": \"unhealthy\",\n-    \"NumOfNodes\": 6,\n-    \"NumOfUnhealthyNodes\": 1,\n-    \"TimeStamp\": \"1579809393944\",\n-    \"Summary\": [\n-      {\n-        \"NodeId\": \"lpgNv3VlSQGfuqMz8CmzUg\",\n-        \"IpAddress\": \"10.212.48.118\",\n-        \"ResourceContext\": [\n-          {\n-            \"ResourceName\": \"garbage collector\",\n-            \"UnitType\": \"heap usage in percentage\",\n-            \"Threshold\": 0.65,\n-            \"Actual\": 0.0710642990279853\n-          }\n-        ]\n-      }\n+{\n+    \"HighHeapUsageClusterRca\": [\n+        {\n+            \"rca_name\": \"HighHeapUsageClusterRca\",\n+            \"state\": \"unhealthy\",\n+            \"timestamp\": 1587426650942,\n+            \"HotClusterSummary\": [\n+                {\n+                    \"number_of_nodes\": 2,\n+                    \"number_of_unhealthy_nodes\": 1,\n+                    \"HotNodeSummary\": [\n+                        {\n+                            \"host_address\": \"192.168.144.2\",\n+                            \"node_id\": \"JtlEoRowSI6iNpzpjlbp_Q\",\n+                            \"HotResourceSummary\": [\n+                                {\n+                                    \"resource_type\": \"old gen\",\n+                                    \"threshold\": 0.65,\n+                                    \"value\": 0.81827232588145373,\n+                                    \"avg\": NaN,\n+                                    \"max\": NaN,\n+                                    \"min\": NaN,\n+                                    \"unit_type\": \"heap usage in percentage\",\n+                                    \"time_period_seconds\": 600,\n+                                    \"TopConsumerSummary\": [\n+                                        {\n+                                            \"name\": \"CACHE_FIELDDATA_SIZE\",\n+                                            \"value\": 590702564", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21bddab473614668f65dae0a6b232f10db66abf1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyNDk1Mw==", "bodyText": "Should we make this warning ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r416724953", "createdAt": "2020-04-28T15:49:05Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/Metric.java", "diffHunk": "@@ -75,6 +75,8 @@ public MetricFlowUnit gather(Queryable queryable) {\n     } catch (DataAccessException dex) {\n       // This can happen if the RCA started querying for metrics before the Reader obtained them.\n       // This is not an error.\n+      // And node stats metrics can be enabled/disabled on writer side so we might end up being here\n+      // if RCA is trying to read node stats which are not enabled yet.\n       LOG.info(\"Looking for metric {}, when it does not exist.\", name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21bddab473614668f65dae0a6b232f10db66abf1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyNTQ4Mg==", "bodyText": "+1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r416725482", "createdAt": "2020-04-28T15:49:46Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/ConfJsonWrapper.java", "diffHunk": "@@ -36,6 +36,7 @@\n   private final String analysisGraphEntryPoint;\n   private final int networkQueueLength;\n   private final int perVertexBufferLength;\n+  private final Map<String, String> highHeapUsageOldGenRcaSettings;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2NjcwMg=="}, "originalCommit": {"oid": "21bddab473614668f65dae0a6b232f10db66abf1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjcyODM3Nw==", "bodyText": "I see. Can we put the thoughts as code comments ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r416728377", "createdAt": "2020-04-28T15:53:44Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/HighHeapUsageClusterRca.java", "diffHunk": "@@ -108,8 +106,15 @@ else if (((HotResourceSummary) resourceSummary).getResourceType().getJVM() == Jv\n             }\n           }\n         }\n-        if (unhealthyYoungGenCnt >= UNHEALTHY_FLOWUNIT_THRESHOLD || unhealthyOldGenCnt >= UNHEALTHY_FLOWUNIT_THRESHOLD) {\n-          unhealthyNodeList.add(nodeStateList.get(0).getResourceSummary());\n+        if (youngGenSummaries.size() >= UNHEALTHY_FLOWUNIT_THRESHOLD || oldGenSummaries.size() >= UNHEALTHY_FLOWUNIT_THRESHOLD) {\n+          HotNodeSummary nodeSummary = new HotNodeSummary(nodeDetails.getId(), nodeDetails.getHostAddress());\n+          if (youngGenSummaries.size() >= UNHEALTHY_FLOWUNIT_THRESHOLD) {\n+            nodeSummary.addNestedSummaryList(youngGenSummaries.get(0));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwMTQzNg=="}, "originalCommit": {"oid": "915f207bc781a95cb7def885d2f41c99af9d5a2b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjczMjQyNQ==", "bodyText": "Fail to read parse node stats -> Failed to parse node stats ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/156#discussion_r416732425", "createdAt": "2020-04-28T15:58:50Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/NodeStatAggregator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotshard.IndexShardKey;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+\n+/**\n+ * We've seen huge performance impact if collecting node stats across all shards on data node.\n+ * So Performance Analyzer writer will only try to collect node stats from a small portion of\n+ * shards at a time to reduce performance impact. This class on reader side will allow us to\n+ * keep track of node stat from all previous batches and calculate its sum.\n+ */\n+public class NodeStatAggregator {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeStatAggregator.class);\n+  private Metric nodeStatMetric;\n+  private int sum;\n+  private final HashMap<IndexShardKey, NodeStatValue> shardKeyMap;\n+  private long lastPurgeTimestamp;\n+  //purge the hash table every 30 mins\n+  private static final int PURGE_HASH_TABLE_INTERVAL_IN_MINS = 30;\n+\n+\n+  public NodeStatAggregator(Metric nodeStatMetric) {\n+    this.nodeStatMetric = nodeStatMetric;\n+    this.sum = 0;\n+    this.lastPurgeTimestamp = 0L;\n+    this.shardKeyMap = new HashMap<>();\n+  }\n+\n+  /**\n+   * Whether this NodeStatAggregator contains valid node stats from writer\n+   * This is to avoid reading stale data when the node stats has already been\n+   * disabled from writer side\n+   * @return if it has valid node stats\n+   */\n+  public boolean isEmpty() {\n+    return shardKeyMap.isEmpty();\n+  }\n+\n+  /**\n+   * get the name of node stat metric.\n+   * i.e. Norms_Memory, Cache_FieldData_Size, etc.\n+   * @return name of node stat metric\n+   */\n+  public String getName() {\n+    return nodeStatMetric.name();\n+  }\n+\n+  /**\n+   * get the sum of node stat metric across all shards on this node\n+   * @return sum of node stat metric\n+   */\n+  public int getSum() {\n+    return this.sum;\n+  }\n+\n+  /**\n+   * call this method to collect node stats of each shard from node stat metric\n+   * and calculate its sum.\n+   * @param timestamp current timestamp when collecting from metricDB\n+   */\n+  public void collect(final long timestamp) {\n+    for (MetricFlowUnit metric : nodeStatMetric.getFlowUnits()) {\n+      if (metric.isEmpty()) {\n+        continue;\n+      }\n+      Result<Record> result = metric.getData();\n+      for (Record record : result) {\n+        try {\n+          IndexShardKey shardKey = IndexShardKey.buildIndexShardKey(record);\n+          Integer value = record.getValue(MetricsDB.MAX, Integer.class);\n+          NodeStatValue oldNodeStatValue = shardKeyMap.getOrDefault(shardKey, new NodeStatValue(0, 0));\n+          shardKeyMap.put(shardKey, new NodeStatValue(value, timestamp));\n+          this.sum += (value - oldNodeStatValue.getValue());\n+        }\n+        catch (Exception e) {\n+          LOG.error(\"Fail to read parse node stats {}\", this.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21bddab473614668f65dae0a6b232f10db66abf1"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e8830f8fc10945d8a6b6cc5d06ded6dc3660c58", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1e8830f8fc10945d8a6b6cc5d06ded6dc3660c58", "committedDate": "2020-04-28T17:42:44Z", "message": "Add config object for old gen RCA"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1214, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}