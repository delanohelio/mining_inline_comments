{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3OTk1NjI5", "number": 314, "title": "Consume Queue Capacity from Node Config Cache.", "bodyText": "Issue #: #313 313\nDescription of changes: Return the updated value in the cache. In case the value is not updated in the cache, don't take any action since we don't want to update the value as we don't have the state and we can wait for the cache to have an updated value.\nTests: Manual testing.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-07-28T19:07:29Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314", "merged": true, "mergeCommit": {"oid": "435a2e9c0c7faeb458bb2d8de7b80061a36e47d9"}, "closed": true, "closedAt": "2020-07-29T22:49:48Z", "author": {"login": "aditjind"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5bCLhgH2gAyNDU3OTk1NjI5OmZmOTc1NzcxZTJmZTUxNmVlZjNlMWY5MTFjNDUzM2ExZmJmYzYzMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5zAYAAFqTQ1Nzk0OTI5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ff975771e2fe516eef3e1f911c4533a1fbfc6328", "author": {"user": {"login": "aditjind", "name": "Aditya Jindal"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/ff975771e2fe516eef3e1f911c4533a1fbfc6328", "committedDate": "2020-07-28T18:49:35Z", "message": "Consume Queue Capacity from Node Config Cache.\n\nNode Config Cache is updated from the Node Config Flow Unit.\nThis cache contains values for different Caches and Queues etc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e767cd2688e036ac9c602bd468b039a01570136", "author": {"user": {"login": "aditjind", "name": "Aditya Jindal"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/9e767cd2688e036ac9c602bd468b039a01570136", "committedDate": "2020-07-28T18:59:56Z", "message": "Checkstyle Errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2OTQwMzMw", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#pullrequestreview-456940330", "createdAt": "2020-07-28T19:27:10Z", "commit": {"oid": "9e767cd2688e036ac9c602bd468b039a01570136"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOToyNzoxMFrOG4bOsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOToyOTowM1rOG4bSqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgxOTU2OA==", "bodyText": "resource object read from QueueRejctionRca is threadpool + queue rejection. That is not the metric we want to read here. What we want to read from node config cache is threadpool + queue capacity", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#discussion_r461819568", "createdAt": "2020-07-28T19:27:10Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -91,11 +92,11 @@ private void configureActionPriority() {\n    * <p>Action relevance decided based on user configured priorities for now, this can be modified\n    * to consume better signals going forward.\n    */\n-  private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n+  private Action computeBestAction(NodeKey esNode, Resource resource) {\n     Action action = null;\n     for (String actionName : actionsByUserPriority) {\n       action =\n-          getAction(actionName, esNode, threadPool, getNodeQueueCapacity(esNode, threadPool), true);\n+        getAction(actionName, esNode, resource.getResourceEnum(), getNodeQueueCapacity(esNode, resource), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e767cd2688e036ac9c602bd468b039a01570136"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyMDE5NA==", "bodyText": "as I mentioned above, we don't have to change the input argument of this function. What we can do instead is to map queue rejection -> queue capacity", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#discussion_r461820194", "createdAt": "2020-07-28T19:28:18Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -120,11 +124,15 @@ private ModifyQueueCapacityAction configureQueueCapacity(NodeKey esNode, Resourc\n     return null;\n   }\n \n-  private int getNodeQueueCapacity(NodeKey esNode, ResourceEnum threadPool) {\n-    // TODO: use NodeConfigurationRca to return capacity, for now returning defaults\n-    if (threadPool.equals(ResourceEnum.SEARCH_THREADPOOL)) {\n-      return 1000;\n+  private int getNodeQueueCapacity(NodeKey esNode, Resource resource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e767cd2688e036ac9c602bd468b039a01570136"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyMDU4NQ==", "bodyText": "remove QueueRejectionClusterRca from the constructor as we don't consume anything directly from QueueRejectionClusterRca", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#discussion_r461820585", "createdAt": "2020-07-28T19:29:03Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -17,31 +17,32 @@\n \n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyQueueCapacityAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n-\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n \n // This is a sample decider implementation to finalize decision maker interfaces.\n // TODO: 1. Read action priorities from a configurable yml\n-// TODO: 2. Read current queue capacity from NodeConfigurationRca (PR #252)\n \n public class QueueHealthDecider extends Decider {\n \n+  private static final Logger LOG = LogManager.getLogger(Decider.class);\n   public static final String NAME = \"queue_health\";\n \n   private QueueRejectionClusterRca queueRejectionRca;\n   List<String> actionsByUserPriority = new ArrayList<>();\n   private int counter = 0;\n \n   public QueueHealthDecider(long evalIntervalSeconds, int decisionFrequency, QueueRejectionClusterRca queueRejectionClusterRca) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e767cd2688e036ac9c602bd468b039a01570136"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "693244f496b8f6de9f48fed6413fec8e866a83cc", "author": {"user": {"login": "aditjind", "name": "Aditya Jindal"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/693244f496b8f6de9f48fed6413fec8e866a83cc", "committedDate": "2020-07-28T23:21:29Z", "message": "Addressing PR Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MDk2NDMz", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#pullrequestreview-457096433", "createdAt": "2020-07-28T23:27:15Z", "commit": {"oid": "693244f496b8f6de9f48fed6413fec8e866a83cc"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzoyNzoxNVrOG4jMyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMzoyODoyMlrOG4jOWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MDE1Mg==", "bodyText": "Don't we rely on QueueRejectionClusterRca flow units to check whether a thread pool queue is healthy/unhealthy - @rguo-aws ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#discussion_r461950152", "createdAt": "2020-07-28T23:27:15Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -17,31 +17,32 @@\n \n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyQueueCapacityAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n-\n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n \n // This is a sample decider implementation to finalize decision maker interfaces.\n // TODO: 1. Read action priorities from a configurable yml\n-// TODO: 2. Read current queue capacity from NodeConfigurationRca (PR #252)\n \n public class QueueHealthDecider extends Decider {\n \n+  private static final Logger LOG = LogManager.getLogger(Decider.class);\n   public static final String NAME = \"queue_health\";\n \n   private QueueRejectionClusterRca queueRejectionRca;\n   List<String> actionsByUserPriority = new ArrayList<>();\n   private int counter = 0;\n \n   public QueueHealthDecider(long evalIntervalSeconds, int decisionFrequency, QueueRejectionClusterRca queueRejectionClusterRca) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgyMDU4NQ=="}, "originalCommit": {"oid": "9e767cd2688e036ac9c602bd468b039a01570136"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk1MDU1Mw==", "bodyText": "Minor: This is bit of a code smell. Can we raise an exception here instead and handle it gracefully at the caller? Instead of overloading the meaning of return value?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#discussion_r461950553", "createdAt": "2020-07-28T23:28:22Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -121,10 +126,16 @@ private ModifyQueueCapacityAction configureQueueCapacity(NodeKey esNode, Resourc\n   }\n \n   private int getNodeQueueCapacity(NodeKey esNode, ResourceEnum threadPool) {\n-    // TODO: use NodeConfigurationRca to return capacity, for now returning defaults\n-    if (threadPool.equals(ResourceEnum.SEARCH_THREADPOOL)) {\n-      return 1000;\n+    try {\n+      return (int) getAppContext().getNodeConfigCache().get(esNode, Resource.newBuilder()\n+              .setResourceEnum(threadPool)\n+              .setMetricEnum(MetricEnum.QUEUE_CAPACITY).build());\n+    } catch (Exception e) {\n+      LOG.error(\"Exception while reading values from Node Config Cache\", e);\n     }\n-    return 100;\n+    // No action if value not present in the cache.\n+    // Assumption here is the cache has been wiped off due to\n+    // unforeseen events and we dont want to trigger any action.\n+    return -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "693244f496b8f6de9f48fed6413fec8e866a83cc"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfeed4ce8bfdaa2e894e5c9ac95119dc0be6cab1", "author": {"user": {"login": "aditjind", "name": "Aditya Jindal"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/dfeed4ce8bfdaa2e894e5c9ac95119dc0be6cab1", "committedDate": "2020-07-28T23:39:03Z", "message": "Addressing PR Comments x2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68c11071fffab778df90ddbe7318aa50630e9ddc", "author": {"user": {"login": "aditjind", "name": "Aditya Jindal"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/68c11071fffab778df90ddbe7318aa50630e9ddc", "committedDate": "2020-07-28T23:41:04Z", "message": "Modifying Variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTM5ODE0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#pullrequestreview-457939814", "createdAt": "2020-07-29T22:23:14Z", "commit": {"oid": "68c11071fffab778df90ddbe7318aa50630e9ddc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjoyMzoxNFrOG5MWpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjoyMzoxNFrOG5MWpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYyNDQyMA==", "bodyText": "This will return an IllegalArgumentException if the NodeKey is not present. We should add handling for it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#discussion_r462624420", "createdAt": "2020-07-29T22:23:14Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -121,10 +134,8 @@ private ModifyQueueCapacityAction configureQueueCapacity(NodeKey esNode, Resourc\n   }\n \n   private int getNodeQueueCapacity(NodeKey esNode, ResourceEnum threadPool) {\n-    // TODO: use NodeConfigurationRca to return capacity, for now returning defaults\n-    if (threadPool.equals(ResourceEnum.SEARCH_THREADPOOL)) {\n-      return 1000;\n-    }\n-    return 100;\n+      return (int) getAppContext().getNodeConfigCache().get(esNode, Resource.newBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c11071fffab778df90ddbe7318aa50630e9ddc"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTQ4NDAy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#pullrequestreview-457948402", "createdAt": "2020-07-29T22:43:08Z", "commit": {"oid": "68c11071fffab778df90ddbe7318aa50630e9ddc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjo0MzowOVrOG5M0MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMjo0MzowOVrOG5M0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYzMTk4NA==", "bodyText": "nit: should we add a throws keyword here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#discussion_r462631984", "createdAt": "2020-07-29T22:43:09Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -121,10 +134,8 @@ private ModifyQueueCapacityAction configureQueueCapacity(NodeKey esNode, Resourc\n   }\n \n   private int getNodeQueueCapacity(NodeKey esNode, ResourceEnum threadPool) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68c11071fffab778df90ddbe7318aa50630e9ddc"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3OTQ5Mjk2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/314#pullrequestreview-457949296", "createdAt": "2020-07-29T22:45:20Z", "commit": {"oid": "68c11071fffab778df90ddbe7318aa50630e9ddc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 831, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}