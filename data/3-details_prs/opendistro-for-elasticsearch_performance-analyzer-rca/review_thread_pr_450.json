{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MDM5MzI3", "number": 450, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjowOToyM1rOEqlBHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoxNTozOVrOEqlGgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDgyMTQzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/neo/BucketAssignerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjowOToyNFrOHc3LPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo0MzoyN1rOHdS_Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNjE3NA==", "bodyText": "nit: new line", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500026174", "createdAt": "2020-10-06T06:09:24Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/neo/BucketAssignerTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.neo;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class BucketAssignerTest {\n+  @Test\n+  public void testCreateBucketAssigner() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"bucketization\", \"bucketize.json\").toString());\n+\n+    BucketCalculator bucketCalculatorForBase1 = rcaConf.getBucketizationSettings(\"base1\");\n+\n+    Assert.assertEquals(UsageBucket.UNDER_UTILIZED, bucketCalculatorForBase1.compute(19));\n+    Assert.assertEquals(UsageBucket.HEALTHY_WITH_BUFFER, bucketCalculatorForBase1.compute(40));\n+    Assert.assertEquals(UsageBucket.HEALTHY, bucketCalculatorForBase1.compute(80));\n+    Assert.assertEquals(UsageBucket.UNHEALTHY, bucketCalculatorForBase1.compute(81));\n+\n+    BucketCalculator bucketCalculatorForBase3 = rcaConf.getBucketizationSettings(\"base3\");\n+\n+    Assert.assertEquals(UsageBucket.UNDER_UTILIZED, bucketCalculatorForBase3.compute(30));\n+    Assert.assertEquals(UsageBucket.HEALTHY_WITH_BUFFER, bucketCalculatorForBase3.compute(40.1));\n+    Assert.assertEquals(UsageBucket.HEALTHY, bucketCalculatorForBase3.compute(75));\n+    Assert.assertEquals(UsageBucket.UNHEALTHY, bucketCalculatorForBase3.compute(76));\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testMisSpelledTunableName() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"bucketization\", \"bucketize.json\").toString());\n+    rcaConf.getBucketizationSettings(\"basa3\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testNoBucketizationSettings() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"rca.conf\").toString());\n+    rcaConf.getBucketizationSettings(\"base1\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testNoThresholds() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"bucketization\", \"bucketize_no_thresholds.json\").toString());\n+    rcaConf.getBucketizationSettings(\"base1\");\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4MTg3NQ==", "bodyText": "done !", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500481875", "createdAt": "2020-10-06T17:43:27Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/neo/BucketAssignerTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.neo;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class BucketAssignerTest {\n+  @Test\n+  public void testCreateBucketAssigner() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"bucketization\", \"bucketize.json\").toString());\n+\n+    BucketCalculator bucketCalculatorForBase1 = rcaConf.getBucketizationSettings(\"base1\");\n+\n+    Assert.assertEquals(UsageBucket.UNDER_UTILIZED, bucketCalculatorForBase1.compute(19));\n+    Assert.assertEquals(UsageBucket.HEALTHY_WITH_BUFFER, bucketCalculatorForBase1.compute(40));\n+    Assert.assertEquals(UsageBucket.HEALTHY, bucketCalculatorForBase1.compute(80));\n+    Assert.assertEquals(UsageBucket.UNHEALTHY, bucketCalculatorForBase1.compute(81));\n+\n+    BucketCalculator bucketCalculatorForBase3 = rcaConf.getBucketizationSettings(\"base3\");\n+\n+    Assert.assertEquals(UsageBucket.UNDER_UTILIZED, bucketCalculatorForBase3.compute(30));\n+    Assert.assertEquals(UsageBucket.HEALTHY_WITH_BUFFER, bucketCalculatorForBase3.compute(40.1));\n+    Assert.assertEquals(UsageBucket.HEALTHY, bucketCalculatorForBase3.compute(75));\n+    Assert.assertEquals(UsageBucket.UNHEALTHY, bucketCalculatorForBase3.compute(76));\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testMisSpelledTunableName() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"bucketization\", \"bucketize.json\").toString());\n+    rcaConf.getBucketizationSettings(\"basa3\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testNoBucketizationSettings() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"rca.conf\").toString());\n+    rcaConf.getBucketizationSettings(\"base1\");\n+  }\n+\n+  @Test(expected = IllegalArgumentException.class)\n+  public void testNoThresholds() {\n+    RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"bucketization\", \"bucketize_no_thresholds.json\").toString());\n+    rcaConf.getBucketizationSettings(\"base1\");\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNjE3NA=="}, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDgyMTYzOnYy", "diffSide": "RIGHT", "path": "src/test/resources/rca/bucketization/bucketize.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjowOTozMVrOHc3LZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo0NjowNVrOHdTFfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNjIxNA==", "bodyText": "nit: new line", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500026214", "createdAt": "2020-10-06T06:09:31Z", "author": {"login": "sruti1312"}, "path": "src/test/resources/rca/bucketization/bucketize.json", "diffHunk": "@@ -0,0 +1,19 @@\n+{\n+  \"bucketization\": {\n+    \"base1\": {\n+      \"UNDER_UTILIZED\": 20.0,\n+      \"HEALTHY_WITH_BUFFER\": 40.0,\n+      \"HEALTHY\": 80.0\n+    },\n+    \"base2\": {\n+      \"UNDER_UTILIZED\": 30.0,\n+      \"HEALTHY_WITH_BUFFER\": 40.0,\n+      \"HEALTHY\": 75.0\n+    },\n+    \"base3\": {\n+      \"UNDER_UTILIZED\": 30.1,\n+      \"HEALTHY_WITH_BUFFER\": 40.23456,\n+      \"HEALTHY\": 75.0\n+    }\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4MzQ1NQ==", "bodyText": "done !", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500483455", "createdAt": "2020-10-06T17:46:05Z", "author": {"login": "yojs"}, "path": "src/test/resources/rca/bucketization/bucketize.json", "diffHunk": "@@ -0,0 +1,19 @@\n+{\n+  \"bucketization\": {\n+    \"base1\": {\n+      \"UNDER_UTILIZED\": 20.0,\n+      \"HEALTHY_WITH_BUFFER\": 40.0,\n+      \"HEALTHY\": 80.0\n+    },\n+    \"base2\": {\n+      \"UNDER_UTILIZED\": 30.0,\n+      \"HEALTHY_WITH_BUFFER\": 40.0,\n+      \"HEALTHY\": 75.0\n+    },\n+    \"base3\": {\n+      \"UNDER_UTILIZED\": 30.1,\n+      \"HEALTHY_WITH_BUFFER\": 40.23456,\n+      \"HEALTHY\": 75.0\n+    }\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNjIxNA=="}, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDgyMTc5OnYy", "diffSide": "RIGHT", "path": "src/test/resources/rca/bucketization/bucketize_no_thresholds.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjowOTozN1rOHc3Lfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjowOTozN1rOHc3Lfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNjIzOA==", "bodyText": "nit: new line", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500026238", "createdAt": "2020-10-06T06:09:37Z", "author": {"login": "sruti1312"}, "path": "src/test/resources/rca/bucketization/bucketize_no_thresholds.json", "diffHunk": "@@ -0,0 +1,4 @@\n+{\n+  \"bucketization\": {\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDgyNjc3OnYy", "diffSide": "RIGHT", "path": "src/test/resources/rca/bucketization/bucketize_no_thresholds.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoxMjowMVrOHc3Ong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo0OTowMlrOHdTMeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNzAzOA==", "bodyText": "Can we use a string (in the same file) and pass it to rca.conf\nRef:\nhttps://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/master/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyCacheMaxSizeActionTest.java#L113", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500027038", "createdAt": "2020-10-06T06:12:01Z", "author": {"login": "sruti1312"}, "path": "src/test/resources/rca/bucketization/bucketize_no_thresholds.json", "diffHunk": "@@ -0,0 +1,4 @@\n+{\n+  \"bucketization\": {\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4NTI0MQ==", "bodyText": "Good point ! This way config changes are also on the test file.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500485241", "createdAt": "2020-10-06T17:49:02Z", "author": {"login": "yojs"}, "path": "src/test/resources/rca/bucketization/bucketize_no_thresholds.json", "diffHunk": "@@ -0,0 +1,4 @@\n+{\n+  \"bucketization\": {\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNzAzOA=="}, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDgyOTkyOnYy", "diffSide": "RIGHT", "path": "src/test/resources/rca/bucketization/bucketize.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoxMzozMFrOHc3Qjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMTowMjowOVrOHdZ0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNzUzNA==", "bodyText": "Same as below. Can we make this a string and pass to rca.conf.\nIt makes the mapping better (which test is using which input)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500027534", "createdAt": "2020-10-06T06:13:30Z", "author": {"login": "sruti1312"}, "path": "src/test/resources/rca/bucketization/bucketize.json", "diffHunk": "@@ -0,0 +1,19 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4MjQ4Mg==", "bodyText": "I didn't get this comment. Can you elaborate ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500482482", "createdAt": "2020-10-06T17:44:26Z", "author": {"login": "yojs"}, "path": "src/test/resources/rca/bucketization/bucketize.json", "diffHunk": "@@ -0,0 +1,19 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNzUzNA=="}, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5Mzc5OA==", "bodyText": "got it !", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500593798", "createdAt": "2020-10-06T21:02:09Z", "author": {"login": "yojs"}, "path": "src/test/resources/rca/bucketization/bucketize.json", "diffHunk": "@@ -0,0 +1,19 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNzUzNA=="}, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDgzMjQ0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/neo/BucketAssignerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoxNDozM1rOHc3R_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo0MDo0OFrOHdS5aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNzkwMQ==", "bodyText": "What are you thoughts on adding these to RcaConfTest.java", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500027901", "createdAt": "2020-10-06T06:14:33Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/neo/BucketAssignerTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.neo;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class BucketAssignerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4MDM2MA==", "bodyText": "This is definitely a part of Rca.conf as you pointed out. But because this is a small feature on its own, I wrapped it in a test class of its own. As we expand on this, create higher level buckets based on bucketization of lower level resources, we would add more to this class.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500480360", "createdAt": "2020-10-06T17:40:48Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/bucket/neo/BucketAssignerTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.neo;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts;\n+import java.nio.file.Paths;\n+import java.util.Map;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class BucketAssignerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyNzkwMQ=="}, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDgzNTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoxNTozOVrOHc3Tkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozNzo0MFrOHdSygg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyODMwNw==", "bodyText": "Can we use a ImmutableMap here?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500028307", "createdAt": "2020-10-06T06:15:39Z", "author": {"login": "sruti1312"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -306,4 +313,69 @@ private boolean updateRcaConf(String originalFilePath, final Set<String> mutedRc\n   public Map<String, Object> getDeciderConfigSettings() {\n     return conf.getDeciderConfigSettings();\n   }\n+\n+  /**\n+   * Given the name of the tunable, it returns the BucketCalculator. The BucketCalculator is constructed\n+   * from the thresholds provided as the rca.conf settings. An example will look like this:\n+   * \"bucketization\": {\n+   *     \"base1\": {\n+   *       \"UNDER_UTILIZED\": 20.0,\n+   *       \"HEALTHY_WITH_BUFFER\": 40.0,\n+   *       \"HEALTHY\": 80.0\n+   *     },\n+   *     \"base2\": {\n+   *       \"UNDER_UTILIZED\": 30.0,\n+   *       \"HEALTHY_WITH_BUFFER\": 40.0,\n+   *       \"HEALTHY\": 75.0\n+   *     },\n+   *     \"base3\": {\n+   *       \"UNDER_UTILIZED\": 30.1,\n+   *       \"HEALTHY_WITH_BUFFER\": 40.23456,\n+   *       \"HEALTHY\": 75.0\n+   *     }\n+   *   }\n+   * @param tunableName The name of the tunable. In the above example, base1, base2, base3 are names of tunables.\n+   * @return The BucketCalculator that can be used to bucketize values.\n+   */\n+  public BucketCalculator getBucketizationSettings(String tunableName) {\n+    if (tunableResourceToUsageBucket.isEmpty()) {\n+      constructTunableResourceToUsageBucket();\n+    }\n+    BucketCalculator bucketCalculator = tunableResourceToUsageBucket.get(tunableName);\n+    if (bucketCalculator == null) {\n+      throw new IllegalArgumentException(\"No such tunable exists with name \" + tunableName\n+          + \". Available ones: \" + tunableResourceToUsageBucket.keySet());\n+    }\n+    return bucketCalculator;\n+  }\n+\n+  private void constructTunableResourceToUsageBucket() {\n+    Map<String, Object> tunableSettingsMap = conf.getBucketizationTunings();\n+    if (tunableSettingsMap == null) {\n+      // The bucketization key does not exist in the rca.conf. So we cannot construct BucketCalculators.\n+      return;\n+    }\n+    for (Map.Entry<String, Object> entry : tunableSettingsMap.entrySet()) {\n+      String currentTunable = entry.getKey();\n+      if (entry.getValue() instanceof Map) {\n+        Map<UsageBucket, Double> usageBucketLimitMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3ODU5NA==", "bodyText": "Good point !", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/450#discussion_r500478594", "createdAt": "2020-10-06T17:37:40Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -306,4 +313,69 @@ private boolean updateRcaConf(String originalFilePath, final Set<String> mutedRc\n   public Map<String, Object> getDeciderConfigSettings() {\n     return conf.getDeciderConfigSettings();\n   }\n+\n+  /**\n+   * Given the name of the tunable, it returns the BucketCalculator. The BucketCalculator is constructed\n+   * from the thresholds provided as the rca.conf settings. An example will look like this:\n+   * \"bucketization\": {\n+   *     \"base1\": {\n+   *       \"UNDER_UTILIZED\": 20.0,\n+   *       \"HEALTHY_WITH_BUFFER\": 40.0,\n+   *       \"HEALTHY\": 80.0\n+   *     },\n+   *     \"base2\": {\n+   *       \"UNDER_UTILIZED\": 30.0,\n+   *       \"HEALTHY_WITH_BUFFER\": 40.0,\n+   *       \"HEALTHY\": 75.0\n+   *     },\n+   *     \"base3\": {\n+   *       \"UNDER_UTILIZED\": 30.1,\n+   *       \"HEALTHY_WITH_BUFFER\": 40.23456,\n+   *       \"HEALTHY\": 75.0\n+   *     }\n+   *   }\n+   * @param tunableName The name of the tunable. In the above example, base1, base2, base3 are names of tunables.\n+   * @return The BucketCalculator that can be used to bucketize values.\n+   */\n+  public BucketCalculator getBucketizationSettings(String tunableName) {\n+    if (tunableResourceToUsageBucket.isEmpty()) {\n+      constructTunableResourceToUsageBucket();\n+    }\n+    BucketCalculator bucketCalculator = tunableResourceToUsageBucket.get(tunableName);\n+    if (bucketCalculator == null) {\n+      throw new IllegalArgumentException(\"No such tunable exists with name \" + tunableName\n+          + \". Available ones: \" + tunableResourceToUsageBucket.keySet());\n+    }\n+    return bucketCalculator;\n+  }\n+\n+  private void constructTunableResourceToUsageBucket() {\n+    Map<String, Object> tunableSettingsMap = conf.getBucketizationTunings();\n+    if (tunableSettingsMap == null) {\n+      // The bucketization key does not exist in the rca.conf. So we cannot construct BucketCalculators.\n+      return;\n+    }\n+    for (Map.Entry<String, Object> entry : tunableSettingsMap.entrySet()) {\n+      String currentTunable = entry.getKey();\n+      if (entry.getValue() instanceof Map) {\n+        Map<UsageBucket, Double> usageBucketLimitMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAyODMwNw=="}, "originalCommit": {"oid": "067e99c1446ce1f2faa91cb1351838e0b5dd441a"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2422, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}