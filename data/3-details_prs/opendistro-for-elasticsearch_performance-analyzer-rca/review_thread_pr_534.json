{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NjAxMjk3", "number": 534, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoxODozM1rOFESr7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyNToxM1rOFFZw7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDQ0NzgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoxODozM1rOIEXeKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOTowMTowNVrOIGABIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0OTc3MA==", "bodyText": "nit: Add License information.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541449770", "createdAt": "2020-12-12T00:18:33Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0MDU2Mw==", "bodyText": "Sure", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r542840563", "createdAt": "2020-12-14T21:56:54Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0OTc3MA=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1MjExNQ==", "bodyText": "nit: Please update the year to 2020, instead of 2019.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543052115", "createdAt": "2020-12-15T05:13:40Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0OTc3MA=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE2MjY1OA==", "bodyText": "Sure", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543162658", "createdAt": "2020-12-15T09:01:05Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0OTc3MA=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDQ1MDM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoxOTozMFrOIEXfrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoyNDoxNlrOIEXkqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MDE1Nw==", "bodyText": "Can we make this logic into a util method that both metricsdbTarFilter and metricsdbFilter can use?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541450157", "createdAt": "2020-12-12T00:19:30Z", "author": {"login": "sruti1312"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MTQzMw==", "bodyText": "I don't think that'll work well since we want the logic to produce two variables (sizeUncompressedMetricsdbFiles and numUncompressedMetricsdbFiles). Also, the duplication here doesn't seem like too much to require factoring out the logic.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541451433", "createdAt": "2020-12-12T00:24:16Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MDE1Nw=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDQ2OTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ReaderMetricsProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoyODozNlrOIEXpSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMjowMzo1NFrOIFs0kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MjYxNg==", "bodyText": "Instead of creating a new file and getting its length, can we replace new File(metricsDB.getDBFilePath()).length() with metricsDB.getDBFilePath().length()?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541452616", "createdAt": "2020-12-12T00:28:36Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ReaderMetricsProcessor.java", "diffHunk": "@@ -406,13 +392,10 @@ private void emitMetrics(long currWindowStartTime) throws Exception {\n \n     metricsDB.commit();\n     metricsDBMap.put(prevWindowStartTime, metricsDB);\n-    long metricsDBSize = new File(metricsDB.getDBFilePath()).length();\n     PerformanceAnalyzerApp.READER_METRICS_AGGREGATOR.updateStat(\n-        ReaderMetrics.METRICSDB_FILE_SIZE, \"\", metricsDBSize);\n+        ReaderMetrics.METRICSDB_FILE_SIZE, \"\", new File(metricsDB.getDBFilePath()).length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0ODE0NA==", "bodyText": "I don't think that would work. getDBFilePath actually returns a String, not a Path. Also, a Path doesn't have a method to retrieve the size of the underlying file.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r542848144", "createdAt": "2020-12-14T22:03:54Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ReaderMetricsProcessor.java", "diffHunk": "@@ -406,13 +392,10 @@ private void emitMetrics(long currWindowStartTime) throws Exception {\n \n     metricsDB.commit();\n     metricsDBMap.put(prevWindowStartTime, metricsDB);\n-    long metricsDBSize = new File(metricsDB.getDBFilePath()).length();\n     PerformanceAnalyzerApp.READER_METRICS_AGGREGATOR.updateStat(\n-        ReaderMetrics.METRICSDB_FILE_SIZE, \"\", metricsDBSize);\n+        ReaderMetrics.METRICSDB_FILE_SIZE, \"\", new File(metricsDB.getDBFilePath()).length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MjYxNg=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDQ3ODI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDozMzowMFrOIEXt3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwMDoyNToyMlrOIFzGxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1Mzc4OA==", "bodyText": "Please add a comment here stating what this regex represents.\nAlso, we should add UT here for checking this regex behavior.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541453788", "createdAt": "2020-12-12T00:33:00Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjk1MTExMQ==", "bodyText": "Verified the correct behavior of the regex manually. The ut's can be a little more ticky for this due to the use of private variables and static methods. Will raise another separate issue to add these uts #538.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r542951111", "createdAt": "2020-12-15T00:25:22Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1Mzc4OA=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDUwMzAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo0MToyMVrOIEX8dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToxODowNFrOIF5XOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1NzUyNQ==", "bodyText": "Instead of performing a FileSystems.getDefault().getPathMatcher(metricsdbPattern);, can use a config to define the location of these files ?  We are performing something similar here : https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/master/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metricsdb/MetricsDB.java#L351", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541457525", "createdAt": "2020-12-12T00:41:21Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg1OTU5Mw==", "bodyText": "Not completely sure what you mean by \"config\" here. There currently a configurable prefix (an absolute path prefix) for these metricsdb files. We probably don't want to split this prefix into a directory and filename prefix if that's what you mean -- doesn't seem too compelling to take on this new addition just for these two uses at the moment.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r542859593", "createdAt": "2020-12-14T22:14:48Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1NzUyNQ=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1MzYyNA==", "bodyText": "I refer to using a variable like DB_FILE_PREFIX_PATH_CONF_NAME as used here and my concern was regarding the  FileSystems.getDefault().getPathMatcher(metricsdbPattern);. I see that you have addressed this in the latest code revision.\nString prefix = PluginSettings.instance().getSettingValue(DB_FILE_PREFIX_PATH_CONF_NAME, DB_FILE_PREFIX_PATH_DEFAULT);", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543053624", "createdAt": "2020-12-15T05:18:04Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1NzUyNQ=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDUxMjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo0NjoyNlrOIEYBUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToxMzoyMVrOIGAhQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1ODc2OQ==", "bodyText": "Can we avoid the nested try-catch blocks here? Let's move both the DirectoryStream  object creation to one 'try-catch' and then have inner 'try-catch' as now. Also, update the variable name from stream to metricsdbStream and metricsdbTarStream resp.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541458769", "createdAt": "2020-12-12T00:46:26Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbTarFilter)) {\n+      for (Path entry: stream) {\n+        try {\n+          sizeMetricsdbFiles += Files.size(entry);\n+          numMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg4NzU1OA==", "bodyText": "Not a huge fan of removing the nested try-catch -- I don't want issues with one or two files corrupting the whole sampling. But yes, will make the other changes.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r542887558", "createdAt": "2020-12-14T22:42:08Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbTarFilter)) {\n+      for (Path entry: stream) {\n+        try {\n+          sizeMetricsdbFiles += Files.size(entry);\n+          numMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1ODc2OQ=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NDczNQ==", "bodyText": "I still dont understand why we have nested try-catch here.  Nested try-catch should be used in case the catch or finally block throws an exception. We have only Log statements in catch block here.\nThere should be Unit Tests and Integrations Tests written to check for all failure scenarios, nested try-catch is hardly the way.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543054735", "createdAt": "2020-12-15T05:21:22Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbTarFilter)) {\n+      for (Path entry: stream) {\n+        try {\n+          sizeMetricsdbFiles += Files.size(entry);\n+          numMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1ODc2OQ=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MDg4Mg==", "bodyText": "Going to change this to use a blanket try-catch and simply return without sampling if any issues are found (say, if the stream contains a Path whose associated file is deleted in the middle of sampling).", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543170882", "createdAt": "2020-12-15T09:13:21Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbTarFilter)) {\n+      for (Path entry: stream) {\n+        try {\n+          sizeMetricsdbFiles += Files.size(entry);\n+          numMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1ODc2OQ=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDUxNjc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo0ODozNFrOIEYDcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzowMjo0MVrOIFweag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1OTMxMg==", "bodyText": "Will this error log overwhelm the log file in any case? Can we somehow reduce the frequency, maybe club all the failures and put a single log message?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541459312", "createdAt": "2020-12-12T00:48:34Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkwODAxMA==", "bodyText": "Sure, will try something like that.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r542908010", "createdAt": "2020-12-14T23:02:41Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1OTMxMg=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwMDUyNjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo1MzoxNlrOIEYICA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMzoxNzowOFrOIFw_DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2MDQ4OA==", "bodyText": "Certain variables between Line 32-40 can be made class static variables, move them out of the sample() method.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541460488", "createdAt": "2020-12-12T00:53:16Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkxNjM2NQ==", "bodyText": "Sure", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r542916365", "createdAt": "2020-12-14T23:17:08Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2MDQ4OA=="}, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjA5MDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/BatchMetricsEnabledSampler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyNDowNFrOIF5fdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToxMzozMlrOIGAhtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NTczMg==", "bodyText": "nit: Make the year 2020 instead of 2019", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543055732", "createdAt": "2020-12-15T05:24:04Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/BatchMetricsEnabledSampler.java", "diffHunk": "@@ -1,3 +1,18 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99aafcde1ff74826b5a735aebbb7e7150975a30"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MDk5OA==", "bodyText": "Sure", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543170998", "createdAt": "2020-12-15T09:13:32Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/BatchMetricsEnabledSampler.java", "diffHunk": "@@ -1,3 +1,18 @@\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NTczMg=="}, "originalCommit": {"oid": "c99aafcde1ff74826b5a735aebbb7e7150975a30"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxMjA5MzI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyNToxM1rOIF5hEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwOToxMzo0NFrOIGAiRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NjE0NA==", "bodyText": "Can we add a comment here about this regex. I am not comfortable with having regex in the code without any UTs/ITs present for testing.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543056144", "createdAt": "2020-12-15T05:25:13Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ *  Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private static final Path targetDirectoryPath;\n+  private static final DirectoryStream.Filter<Path> metricsdbFilter;\n+  private static final DirectoryStream.Filter<Path> metricsdbTarFilter;\n+  private final AppContext appContext;\n+\n+  static {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+    targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99aafcde1ff74826b5a735aebbb7e7150975a30"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzE3MTE0Mw==", "bodyText": "Sure, will add a comment and UT for this.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543171143", "createdAt": "2020-12-15T09:13:44Z", "author": {"login": "ricardolstephen"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ *  Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private static final Path targetDirectoryPath;\n+  private static final DirectoryStream.Filter<Path> metricsdbFilter;\n+  private static final DirectoryStream.Filter<Path> metricsdbTarFilter;\n+  private final AppContext appContext;\n+\n+  static {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+    targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NjE0NA=="}, "originalCommit": {"oid": "c99aafcde1ff74826b5a735aebbb7e7150975a30"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2288, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}