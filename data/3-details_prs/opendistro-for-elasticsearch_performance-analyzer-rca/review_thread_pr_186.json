{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MjQzNjQ2", "number": 186, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoxNToyOVrOD58AUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzozNDo1NVrOD8lPfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDc4NTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODoxNToyOVrOGRfgcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNjowOVrOGS36-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NTE4Ng==", "bodyText": "I don't see that we are validating that there are Java classes with these names ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r420995186", "createdAt": "2020-05-06T18:15:29Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -275,6 +275,17 @@ private void readRcaEnabledFromConf() {\n         });\n   }\n \n+  private void readAndUpdateMutesRcasDuringStart() {\n+    try {\n+      Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n+      rcasForMute.forEach(mutedRca -> Stats.getInstance().addToMutedGraphNodes(mutedRca));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee2c29be66808e6afc68eaac4ae3f9b7323179a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAwMjI0Mg==", "bodyText": "Let's add a test that exercises this path. I mean when during the start of RcaController", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r421002242", "createdAt": "2020-05-06T18:27:20Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -275,6 +275,17 @@ private void readRcaEnabledFromConf() {\n         });\n   }\n \n+  private void readAndUpdateMutesRcasDuringStart() {\n+    try {\n+      Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n+      rcasForMute.forEach(mutedRca -> Stats.getInstance().addToMutedGraphNodes(mutedRca));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NTE4Ng=="}, "originalCommit": {"oid": "aee2c29be66808e6afc68eaac4ae3f9b7323179a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzYwOQ==", "bodyText": "I don't see that we are validating that there are Java classes with these names ?\n\nDone. Added check based on class name.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r422443609", "createdAt": "2020-05-09T02:34:43Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -275,6 +275,17 @@ private void readRcaEnabledFromConf() {\n         });\n   }\n \n+  private void readAndUpdateMutesRcasDuringStart() {\n+    try {\n+      Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n+      rcasForMute.forEach(mutedRca -> Stats.getInstance().addToMutedGraphNodes(mutedRca));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NTE4Ng=="}, "originalCommit": {"oid": "aee2c29be66808e6afc68eaac4ae3f9b7323179a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0Mzc2OQ==", "bodyText": "Let's add a test that exercises this path. I mean when during the start of RcaController\n\nIt is difficult to simulate this within a UT, since it relies on lastModifiedTimeInMillisInMemory, initialized at boot-up and start() being invoked. Will add an integration test to cover this.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r422443769", "createdAt": "2020-05-09T02:36:09Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -275,6 +275,17 @@ private void readRcaEnabledFromConf() {\n         });\n   }\n \n+  private void readAndUpdateMutesRcasDuringStart() {\n+    try {\n+      Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n+      rcasForMute.forEach(mutedRca -> Stats.getInstance().addToMutedGraphNodes(mutedRca));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk5NTE4Ng=="}, "originalCommit": {"oid": "aee2c29be66808e6afc68eaac4ae3f9b7323179a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMDk1MzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxODo1OTozNVrOGRhI_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMjozNDoxMFrOGS36Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTk1MA==", "bodyText": "There is an edge case where both readAndUpdateMutesRcas and readAndUpdateMutesRcasDuringStart can try to update the muted Rca list back to back. So we would try to read in rca.conf twice.\nThis will happen when rca was turned on and then off. Then between the two muted rcas update checks interval, some does both the things - adds a new muted rca and then turns on the rca.\nreadAndUpdateMutesRcasDuringStart should ever be read at the start of the process itself. That's the time when RCA graph is not constructed and we cannot validate the new new muted RCAs. For any other updated to the muted list, the periodic rca.conf update checker will take care of it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r421021950", "createdAt": "2020-05-06T18:59:35Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -150,7 +150,7 @@ private void start() {\n       List<ConnectedComponent> connectedComponents = RcaUtil.getAnalysisGraphComponents(rcaConf);\n \n       // Mute the rca nodes after the graph creation and before the scheduler start\n-      readAndUpdateMutesRcas();\n+      readAndUpdateMutesRcasDuringStart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aee2c29be66808e6afc68eaac4ae3f9b7323179a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MzU3NA==", "bodyText": "Agreed, Have also added a comment explaining this.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r422443574", "createdAt": "2020-05-09T02:34:10Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -150,7 +150,7 @@ private void start() {\n       List<ConnectedComponent> connectedComponents = RcaUtil.getAnalysisGraphComponents(rcaConf);\n \n       // Mute the rca nodes after the graph creation and before the scheduler start\n-      readAndUpdateMutesRcas();\n+      readAndUpdateMutesRcasDuringStart();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTAyMTk1MA=="}, "originalCommit": {"oid": "aee2c29be66808e6afc68eaac4ae3f9b7323179a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjU0NjI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzo0MTo1OVrOGTxHNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzo1MDozOVrOGTxR_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MDc4OA==", "bodyText": "Will it make sense to rewrite updateMutedGraphNodes as do two things:\n\nclear()\naddAll(nodeNames)\n\nAnd just call that here instead of iterating through rcasForMute ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r423380788", "createdAt": "2020-05-11T23:41:59Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -268,13 +268,35 @@ private void readRcaEnabledFromConf() {\n             String nextLine = sc.nextLine();\n             rcaEnabled = Boolean.parseBoolean(nextLine);\n           } catch (IOException e) {\n-            LOG.error(\"Error reading file '{}': {}\", filePath.toString(), e.getMessage());\n+            LOG.error(\"Error reading file '{}': {}\", filePath.toString(), e);\n             e.printStackTrace();\n             rcaEnabled = rcaEnabledDefaultValue;\n           }\n         });\n   }\n \n+  private void readAndUpdateMutesRcasDuringStart() {\n+    try {\n+      /* We have an edge case where both `readAndUpdateMutesRcas()` and `readAndUpdateMutesRcasDuringStart()`\n+       * can try to update the muted Rca list back to back, reading rca.conf twice. This will happen when rca\n+       * was turned off and then on.\n+       *\n+       * <p> `readAndUpdateMutesRcasDuringStart()` should only be read at the start of the process, when\n+       * RCA graph is not constructed and we cannot validate the new new muted RCAs. For any other update\n+       * to the muted list, the periodic rca.conf update checker will take care of it.\n+       *\n+       */\n+      if (lastModifiedTimeInMillisInMemory == 0) {\n+        Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n+        rcasForMute.forEach(mutedRca -> Stats.getInstance().addToMutedGraphNodes(mutedRca));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da1635b1a077528c885d9f063e355bb09ffebf30"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MzU0OQ==", "bodyText": "Yes, we can use the updateMutedGraphNodes() as is. Updating the code for the same.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r423383549", "createdAt": "2020-05-11T23:50:39Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -268,13 +268,35 @@ private void readRcaEnabledFromConf() {\n             String nextLine = sc.nextLine();\n             rcaEnabled = Boolean.parseBoolean(nextLine);\n           } catch (IOException e) {\n-            LOG.error(\"Error reading file '{}': {}\", filePath.toString(), e.getMessage());\n+            LOG.error(\"Error reading file '{}': {}\", filePath.toString(), e);\n             e.printStackTrace();\n             rcaEnabled = rcaEnabledDefaultValue;\n           }\n         });\n   }\n \n+  private void readAndUpdateMutesRcasDuringStart() {\n+    try {\n+      /* We have an edge case where both `readAndUpdateMutesRcas()` and `readAndUpdateMutesRcasDuringStart()`\n+       * can try to update the muted Rca list back to back, reading rca.conf twice. This will happen when rca\n+       * was turned off and then on.\n+       *\n+       * <p> `readAndUpdateMutesRcasDuringStart()` should only be read at the start of the process, when\n+       * RCA graph is not constructed and we cannot validate the new new muted RCAs. For any other update\n+       * to the muted list, the periodic rca.conf update checker will take care of it.\n+       *\n+       */\n+      if (lastModifiedTimeInMillisInMemory == 0) {\n+        Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n+        rcasForMute.forEach(mutedRca -> Stats.getInstance().addToMutedGraphNodes(mutedRca));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM4MDc4OA=="}, "originalCommit": {"oid": "da1635b1a077528c885d9f063e355bb09ffebf30"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAwNTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowNDoxM1rOGUdFJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzo1OTozMFrOGVHj2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTE1OQ==", "bodyText": "updateMutedGraphNodes retains the intersection of the elements in the original and what's provided if provided element is nonEmpty or else it adds them all.\nBecause the muted rcas in the rca.conf is the final list, we should just clear the old elements and the new ones right ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r424101159", "createdAt": "2020-05-13T00:04:13Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -288,7 +288,7 @@ private void readAndUpdateMutesRcasDuringStart() {\n        */\n       if (lastModifiedTimeInMillisInMemory == 0) {\n         Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n-        rcasForMute.forEach(mutedRca -> Stats.getInstance().addToMutedGraphNodes(mutedRca));\n+        Stats.getInstance().updateMutedGraphNodes(rcasForMute);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879fabd66b2705d78ee95d3ee86796ade59ef4f0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxNzA5MQ==", "bodyText": "The mutedGraphNodes is initialized as an empty set as part of the RCA Controller start().\nSince readAndUpdateMutesRcasDuringStart()  is only invoked during the start, the mutedGraphNodes will be an empty set and the  updateMutedGraphNodes() on finding mutedGraphNodes as empty will add all the elements in rca.conf", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r424617091", "createdAt": "2020-05-13T17:41:24Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -288,7 +288,7 @@ private void readAndUpdateMutesRcasDuringStart() {\n        */\n       if (lastModifiedTimeInMillisInMemory == 0) {\n         Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n-        rcasForMute.forEach(mutedRca -> Stats.getInstance().addToMutedGraphNodes(mutedRca));\n+        Stats.getInstance().updateMutedGraphNodes(rcasForMute);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTE1OQ=="}, "originalCommit": {"oid": "879fabd66b2705d78ee95d3ee86796ade59ef4f0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNDYxNg==", "bodyText": "Stats class is static. So, if RCA was disabled, muted rcas changed in the rca.conf and later enabled again, then based on this code, updateMutedGraphNodes will call retainAll that will be lead to an intersection of the nodes to be muted, right ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r424734616", "createdAt": "2020-05-13T21:13:46Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -288,7 +288,7 @@ private void readAndUpdateMutesRcasDuringStart() {\n        */\n       if (lastModifiedTimeInMillisInMemory == 0) {\n         Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n-        rcasForMute.forEach(mutedRca -> Stats.getInstance().addToMutedGraphNodes(mutedRca));\n+        Stats.getInstance().updateMutedGraphNodes(rcasForMute);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTE1OQ=="}, "originalCommit": {"oid": "879fabd66b2705d78ee95d3ee86796ade59ef4f0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc5NzE0NQ==", "bodyText": "Agreed, this condition was missed. Since rca.conf is our source of truth, now updateMutedGraphNodes() is clearing the older values in mutedGraphNodes and adding all from rca.conf.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r424797145", "createdAt": "2020-05-13T23:59:30Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -288,7 +288,7 @@ private void readAndUpdateMutesRcasDuringStart() {\n        */\n       if (lastModifiedTimeInMillisInMemory == 0) {\n         Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n-        rcasForMute.forEach(mutedRca -> Stats.getInstance().addToMutedGraphNodes(mutedRca));\n+        Stats.getInstance().updateMutedGraphNodes(rcasForMute);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTE1OQ=="}, "originalCommit": {"oid": "879fabd66b2705d78ee95d3ee86796ade59ef4f0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODUxMzI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzozNDo1NVrOGVnG-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNzozODozN1rOGVnPfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMxNDA0Mw==", "bodyText": "Why do we need to handle exception here ? This make it quite confusing as we are not throwing any exceptions in between I assume ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r425314043", "createdAt": "2020-05-14T17:34:55Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -268,13 +268,35 @@ private void readRcaEnabledFromConf() {\n             String nextLine = sc.nextLine();\n             rcaEnabled = Boolean.parseBoolean(nextLine);\n           } catch (IOException e) {\n-            LOG.error(\"Error reading file '{}': {}\", filePath.toString(), e.getMessage());\n+            LOG.error(\"Error reading file '{}': {}\", filePath.toString(), e);\n             e.printStackTrace();\n             rcaEnabled = rcaEnabledDefaultValue;\n           }\n         });\n   }\n \n+  private void readAndUpdateMutesRcasDuringStart() {\n+    try {\n+      /* We have an edge case where both `readAndUpdateMutesRcas()` and `readAndUpdateMutesRcasDuringStart()`\n+       * can try to update the muted Rca list back to back, reading rca.conf twice. This will happen when rca\n+       * was turned off and then on.\n+       *\n+       * <p> `readAndUpdateMutesRcasDuringStart()` should only be read at the start of the process, when\n+       * RCA graph is not constructed and we cannot validate the new new muted RCAs. For any other update\n+       * to the muted list, the periodic rca.conf update checker will take care of it.\n+       *\n+       */\n+      if (lastModifiedTimeInMillisInMemory == 0) {\n+        Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n+        Stats.getInstance().updateMutedGraphNodes(rcasForMute);\n+        LOG.info(\"Updated the muted RCA Graph to : {}\", rcaConf.getMutedRcaList());\n+      }\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afed113f18822fbe55256ee399b7d98e2bdca7bd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMxNjIyMA==", "bodyText": "We are only logging the exception with metric here and not throwing.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/186#discussion_r425316220", "createdAt": "2020-05-14T17:38:37Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/RcaController.java", "diffHunk": "@@ -268,13 +268,35 @@ private void readRcaEnabledFromConf() {\n             String nextLine = sc.nextLine();\n             rcaEnabled = Boolean.parseBoolean(nextLine);\n           } catch (IOException e) {\n-            LOG.error(\"Error reading file '{}': {}\", filePath.toString(), e.getMessage());\n+            LOG.error(\"Error reading file '{}': {}\", filePath.toString(), e);\n             e.printStackTrace();\n             rcaEnabled = rcaEnabledDefaultValue;\n           }\n         });\n   }\n \n+  private void readAndUpdateMutesRcasDuringStart() {\n+    try {\n+      /* We have an edge case where both `readAndUpdateMutesRcas()` and `readAndUpdateMutesRcasDuringStart()`\n+       * can try to update the muted Rca list back to back, reading rca.conf twice. This will happen when rca\n+       * was turned off and then on.\n+       *\n+       * <p> `readAndUpdateMutesRcasDuringStart()` should only be read at the start of the process, when\n+       * RCA graph is not constructed and we cannot validate the new new muted RCAs. For any other update\n+       * to the muted list, the periodic rca.conf update checker will take care of it.\n+       *\n+       */\n+      if (lastModifiedTimeInMillisInMemory == 0) {\n+        Set<String> rcasForMute = new HashSet<>(rcaConf.getMutedRcaList());\n+        Stats.getInstance().updateMutedGraphNodes(rcasForMute);\n+        LOG.info(\"Updated the muted RCA Graph to : {}\", rcaConf.getMutedRcaList());\n+      }\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTMxNDA0Mw=="}, "originalCommit": {"oid": "afed113f18822fbe55256ee399b7d98e2bdca7bd"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2456, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}