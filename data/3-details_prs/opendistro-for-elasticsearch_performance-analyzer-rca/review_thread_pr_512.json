{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MTUzNjAy", "number": 512, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyODozNFrOE6tTxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODozMTowMlrOE6tXxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTk1MjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyODozNFrOH18WzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyODozNFrOH18WzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNTQ1Mw==", "bodyText": "Awesome ! great comment", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r526325453", "createdAt": "2020-11-18T18:28:34Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java", "diffHunk": "@@ -60,6 +62,14 @@\n     private final NodeLevelZoneSummary[] zoneProfiles;\n     private int numberOfShards;\n \n+    // Mean Temperature is a mean of the normalized heat of the resource used across shards on the node.\n+    // e.g. if there are 10 shards on the node and the normalized sum of the resource used", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1ce26c9bc6970c8577e9e9396fb29e385e5d89"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTk1MzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyODo1NlrOH18Xkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyODo1NlrOH18Xkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNTY1MQ==", "bodyText": "typo: this -> the ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r526325651", "createdAt": "2020-11-18T18:28:56Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java", "diffHunk": "@@ -60,6 +62,14 @@\n     private final NodeLevelZoneSummary[] zoneProfiles;\n     private int numberOfShards;\n \n+    // Mean Temperature is a mean of the normalized heat of the resource used across shards on the node.\n+    // e.g. if there are 10 shards on the node and the normalized sum of the resource used\n+    // across shards is 33. The mean would be 3.3\n+    // This aim is the balance this parameter across the nodes and have as little delta", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1ce26c9bc6970c8577e9e9396fb29e385e5d89"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTk1ODg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/ShardStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODozMDoxMVrOH18a5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODozMDoxMVrOH18a5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNjUwMg==", "bodyText": "This is a good change. Thanks a lot", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r526326502", "createdAt": "2020-11-18T18:30:11Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/ShardStore.java", "diffHunk": "@@ -32,44 +31,26 @@\n     private static final Logger LOG = LogManager.getLogger(ShardStore.class);\n \n     /**\n-     * The key for the outer map is indexName. The key for inner map is the ShardID. Given an\n-     * indexName and shardId, a shard can be uniquely identified.\n-     *\n-     * <p>TODO: Try replace with 'IndexShardKey' after\n-     * https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/141\n-     * is merged.\n+     * The key for the map is indexShardKey Given an IndexShardKey a shard can be uniquely identified.\n      */\n-    Map<String, Map<Integer, ShardProfileSummary>> list;\n+    Map<IndexShardKey, ShardProfileSummary> shardToShardProfileMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1ce26c9bc6970c8577e9e9396fb29e385e5d89"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTk2MjI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODozMTowMlrOH18dBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xMFQwMDowMjozNFrOIix7eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNzA0NQ==", "bodyText": "Let's use the new Object persisting mechanism", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r526327045", "createdAt": "2020-11-18T18:31:02Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -915,13 +915,11 @@ private synchronized JsonElement readTemperatureProfileRca(String rca) {\n       // made from a data node, it returns a 400 saying it can only be queried from the elected\n       // master.\n       if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n-        Field<Integer> foreignKeyField = DSL.field(\n-            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n-            Integer.class);\n-        SelectJoinStep<Record> query = SQLiteQueryUtils\n-            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n-                mostRecentRecord.get(primaryKeyField),\n-                foreignKeyField);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils.buildSummaryQuery(\n+            create,\n+            ClusterTemperatureSummary.TABLE_NAME,\n+            mostRecentRecord.get(primaryKeyField),\n+            primaryKeyField);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1ce26c9bc6970c8577e9e9396fb29e385e5d89"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzMyNzc3Mw==", "bodyText": "@yojs  : Can you add more details here? Let's create a separate Issue and work on it given this PR is old. @yujias0706", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r573327773", "createdAt": "2021-02-09T23:33:53Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -915,13 +915,11 @@ private synchronized JsonElement readTemperatureProfileRca(String rca) {\n       // made from a data node, it returns a 400 saying it can only be queried from the elected\n       // master.\n       if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n-        Field<Integer> foreignKeyField = DSL.field(\n-            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n-            Integer.class);\n-        SelectJoinStep<Record> query = SQLiteQueryUtils\n-            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n-                mostRecentRecord.get(primaryKeyField),\n-                foreignKeyField);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils.buildSummaryQuery(\n+            create,\n+            ClusterTemperatureSummary.TABLE_NAME,\n+            mostRecentRecord.get(primaryKeyField),\n+            primaryKeyField);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNzA0NQ=="}, "originalCommit": {"oid": "3c1ce26c9bc6970c8577e9e9396fb29e385e5d89"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzM0MDUzNg==", "bodyText": "Created issue: #559", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r573340536", "createdAt": "2021-02-10T00:02:34Z", "author": {"login": "yujias0706"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -915,13 +915,11 @@ private synchronized JsonElement readTemperatureProfileRca(String rca) {\n       // made from a data node, it returns a 400 saying it can only be queried from the elected\n       // master.\n       if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n-        Field<Integer> foreignKeyField = DSL.field(\n-            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n-            Integer.class);\n-        SelectJoinStep<Record> query = SQLiteQueryUtils\n-            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n-                mostRecentRecord.get(primaryKeyField),\n-                foreignKeyField);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils.buildSummaryQuery(\n+            create,\n+            ClusterTemperatureSummary.TABLE_NAME,\n+            mostRecentRecord.get(primaryKeyField),\n+            primaryKeyField);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNzA0NQ=="}, "originalCommit": {"oid": "3c1ce26c9bc6970c8577e9e9396fb29e385e5d89"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2275, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}