{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1Nzc2NjQ1", "number": 219, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTowNzoxN1rOEBeuoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDo0ODoxOVrOEEGnrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTg3NDg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/Shard_Size_In_Bytes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTowNzoxN1rOGdWkGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTo1NDozNlrOGdbbBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzMTU3Nw==", "bodyText": "Can we make it camel case without underscores ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433431577", "createdAt": "2020-06-01T19:07:17Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/Shard_Size_In_Bytes.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+\n+public class Shard_Size_In_Bytes extends Metric {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTE3NQ==", "bodyText": "Done. I did that initially to maintain consistency with the metric, but since this is a class this makes more sense.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433511175", "createdAt": "2020-06-01T21:54:36Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/Shard_Size_In_Bytes.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+\n+public class Shard_Size_In_Bytes extends Metric {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzMTU3Nw=="}, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTkzMTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/TemperatureVector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToyNjoxM1rOGdXHnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTo1NDowNlrOGdbaRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MDY2OQ==", "bodyText": "Let's also remove the IO* dimensions are they are not used", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433440669", "createdAt": "2020-06-01T19:26:13Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/TemperatureVector.java", "diffHunk": "@@ -28,7 +28,8 @@\n         CPU_Utilization(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.CPU_Utilization.NAME),\n         Heap_AllocRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_AllocRate.NAME),\n         IO_READ_SYSCALL_RATE(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_ReadSyscallRate.NAME),\n-        IO_WriteSyscallRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_WriteSyscallRate.NAME);\n+        IO_WriteSyscallRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_WriteSyscallRate.NAME),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMDk4MQ==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433510981", "createdAt": "2020-06-01T21:54:06Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/TemperatureVector.java", "diffHunk": "@@ -28,7 +28,8 @@\n         CPU_Utilization(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.CPU_Utilization.NAME),\n         Heap_AllocRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_AllocRate.NAME),\n         IO_READ_SYSCALL_RATE(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_ReadSyscallRate.NAME),\n-        IO_WriteSyscallRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_WriteSyscallRate.NAME);\n+        IO_WriteSyscallRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_WriteSyscallRate.NAME),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MDY2OQ=="}, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTkzOTU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToyODo0OVrOGdXNEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTo1NTo1NFrOGdbc9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MjA2NQ==", "bodyText": "Unintentional ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433442065", "createdAt": "2020-06-01T19:28:49Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -158,7 +163,8 @@ private void constructShardResourceUsageGraph() {\n     addLeaf(ioTotSyscallRate);\n \n     // High CPU Utilization RCA\n-    HotShardRca hotShardRca = new HotShardRca(5, 12, cpuUtilization, ioTotThroughput, ioTotSyscallRate);\n+    HotShardRca hotShardRca = new HotShardRca(5, 12, cpuUtilization,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTY2OQ==", "bodyText": "Right changed back", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433511669", "createdAt": "2020-06-01T21:55:54Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -158,7 +163,8 @@ private void constructShardResourceUsageGraph() {\n     addLeaf(ioTotSyscallRate);\n \n     // High CPU Utilization RCA\n-    HotShardRca hotShardRca = new HotShardRca(5, 12, cpuUtilization, ioTotThroughput, ioTotSyscallRate);\n+    HotShardRca hotShardRca = new HotShardRca(5, 12, cpuUtilization,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MjA2NQ=="}, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTk4MzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/byShard/ShardSizeAvgTemperatureCalculator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo0MjoyOVrOGdXoiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzowNDoyNFrOGdc1Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0OTA5OQ==", "bodyText": "Please add a class level javadoc", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433449099", "createdAt": "2020-06-01T19:42:29Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/byShard/ShardSizeAvgTemperatureCalculator.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.calculators.AvgShardBasedTemperatureCalculator;\n+\n+public class ShardSizeAvgTemperatureCalculator extends", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNDMxMQ==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433534311", "createdAt": "2020-06-01T23:04:24Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/byShard/ShardSizeAvgTemperatureCalculator.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.calculators.AvgShardBasedTemperatureCalculator;\n+\n+public class ShardSizeAvgTemperatureCalculator extends", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0OTA5OQ=="}, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTk5MDQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo0NDo0OFrOGdXsvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDoyNzozMVrOGdePkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MDE3Mw==", "bodyText": "Let's remove this", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433450173", "createdAt": "2020-06-01T19:44:48Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.temperature.DimensionalTemperatureFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.ShardStore;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeAvgTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeByShardTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity.ShardSizePeakUsageTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.shardIndependent.DiskUsageShardIndependentTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.DimensionalTemperatureCalculator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ShardSizeDimensionTemperatureRca extends Rca<DimensionalTemperatureFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(ShardSizeDimensionTemperatureRca.class);\n+    // The threshold set here is an initial threshold only.\n+    // TODO: Update the threshold appropriately after testing so that we assign heat correctly.\n+    private static final TemperatureVector.NormalizedValue THRESHOLD = new TemperatureVector.NormalizedValue((short) 2);\n+    private static final int EVALUATION_INTERVAL_IN_S = 5;\n+    private final ShardSizeByShardTemperatureCalculator SHARD_SIZE_BY_SHARD;\n+    private final ShardSizeAvgTemperatureCalculator SHARD_SIZE_AVG;\n+    private final DiskUsageShardIndependentTemperatureCalculator DISK_USAGE;\n+    private final ShardSizePeakUsageTemperatureCalculator PEAK_SHARD_SIZE_USAGE;\n+    private final ShardStore SHARD_STORE;\n+\n+    public ShardSizeDimensionTemperatureRca(final ShardStore shardStore,\n+                                            final ShardSizeByShardTemperatureCalculator shardSizeByShard,\n+                                            final ShardSizeAvgTemperatureCalculator shardSizeAvg,\n+                                            final DiskUsageShardIndependentTemperatureCalculator diskUsageShardIndependent,\n+                                            final ShardSizePeakUsageTemperatureCalculator shardSizePeakUsage) {\n+       super(EVALUATION_INTERVAL_IN_S);\n+       this.SHARD_STORE = shardStore;\n+       this.SHARD_SIZE_BY_SHARD = shardSizeByShard;\n+       this.SHARD_SIZE_AVG = shardSizeAvg;\n+       this.DISK_USAGE = diskUsageShardIndependent;\n+       this.PEAK_SHARD_SIZE_USAGE = shardSizePeakUsage;\n+    }\n+\n+    @Override\n+    public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+        throw new IllegalStateException(\"This node: [\" + name() + \"] should not have received flow \"\n+                + \"units from remote nodes.\");\n+    }\n+\n+    @Override\n+    public DimensionalTemperatureFlowUnit operate() {\n+        LOG.debug(\"executing : {}\", name());\n+        DimensionalTemperatureFlowUnit shardSizeTemperatureFlowUnit =\n+                DimensionalTemperatureCalculator.getTemperatureForDimension(SHARD_STORE,\n+                        TemperatureVector.Dimension.Shard_Size_In_Bytes, SHARD_SIZE_BY_SHARD, SHARD_SIZE_AVG, DISK_USAGE,\n+                        PEAK_SHARD_SIZE_USAGE, THRESHOLD);\n+        LOG.info(\"Shard Size temperature calculated: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyNjI1NA==", "bodyText": "Handled the cases for Shard Size dimension.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433526254", "createdAt": "2020-06-01T22:37:57Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.temperature.DimensionalTemperatureFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.ShardStore;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeAvgTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeByShardTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity.ShardSizePeakUsageTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.shardIndependent.DiskUsageShardIndependentTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.DimensionalTemperatureCalculator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ShardSizeDimensionTemperatureRca extends Rca<DimensionalTemperatureFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(ShardSizeDimensionTemperatureRca.class);\n+    // The threshold set here is an initial threshold only.\n+    // TODO: Update the threshold appropriately after testing so that we assign heat correctly.\n+    private static final TemperatureVector.NormalizedValue THRESHOLD = new TemperatureVector.NormalizedValue((short) 2);\n+    private static final int EVALUATION_INTERVAL_IN_S = 5;\n+    private final ShardSizeByShardTemperatureCalculator SHARD_SIZE_BY_SHARD;\n+    private final ShardSizeAvgTemperatureCalculator SHARD_SIZE_AVG;\n+    private final DiskUsageShardIndependentTemperatureCalculator DISK_USAGE;\n+    private final ShardSizePeakUsageTemperatureCalculator PEAK_SHARD_SIZE_USAGE;\n+    private final ShardStore SHARD_STORE;\n+\n+    public ShardSizeDimensionTemperatureRca(final ShardStore shardStore,\n+                                            final ShardSizeByShardTemperatureCalculator shardSizeByShard,\n+                                            final ShardSizeAvgTemperatureCalculator shardSizeAvg,\n+                                            final DiskUsageShardIndependentTemperatureCalculator diskUsageShardIndependent,\n+                                            final ShardSizePeakUsageTemperatureCalculator shardSizePeakUsage) {\n+       super(EVALUATION_INTERVAL_IN_S);\n+       this.SHARD_STORE = shardStore;\n+       this.SHARD_SIZE_BY_SHARD = shardSizeByShard;\n+       this.SHARD_SIZE_AVG = shardSizeAvg;\n+       this.DISK_USAGE = diskUsageShardIndependent;\n+       this.PEAK_SHARD_SIZE_USAGE = shardSizePeakUsage;\n+    }\n+\n+    @Override\n+    public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+        throw new IllegalStateException(\"This node: [\" + name() + \"] should not have received flow \"\n+                + \"units from remote nodes.\");\n+    }\n+\n+    @Override\n+    public DimensionalTemperatureFlowUnit operate() {\n+        LOG.debug(\"executing : {}\", name());\n+        DimensionalTemperatureFlowUnit shardSizeTemperatureFlowUnit =\n+                DimensionalTemperatureCalculator.getTemperatureForDimension(SHARD_STORE,\n+                        TemperatureVector.Dimension.Shard_Size_In_Bytes, SHARD_SIZE_BY_SHARD, SHARD_SIZE_AVG, DISK_USAGE,\n+                        PEAK_SHARD_SIZE_USAGE, THRESHOLD);\n+        LOG.info(\"Shard Size temperature calculated: {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MDE3Mw=="}, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNjkwNg==", "bodyText": "I was requesting that we change the LOG.info() to debug", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433536906", "createdAt": "2020-06-01T23:13:01Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.temperature.DimensionalTemperatureFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.ShardStore;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeAvgTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeByShardTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity.ShardSizePeakUsageTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.shardIndependent.DiskUsageShardIndependentTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.DimensionalTemperatureCalculator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ShardSizeDimensionTemperatureRca extends Rca<DimensionalTemperatureFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(ShardSizeDimensionTemperatureRca.class);\n+    // The threshold set here is an initial threshold only.\n+    // TODO: Update the threshold appropriately after testing so that we assign heat correctly.\n+    private static final TemperatureVector.NormalizedValue THRESHOLD = new TemperatureVector.NormalizedValue((short) 2);\n+    private static final int EVALUATION_INTERVAL_IN_S = 5;\n+    private final ShardSizeByShardTemperatureCalculator SHARD_SIZE_BY_SHARD;\n+    private final ShardSizeAvgTemperatureCalculator SHARD_SIZE_AVG;\n+    private final DiskUsageShardIndependentTemperatureCalculator DISK_USAGE;\n+    private final ShardSizePeakUsageTemperatureCalculator PEAK_SHARD_SIZE_USAGE;\n+    private final ShardStore SHARD_STORE;\n+\n+    public ShardSizeDimensionTemperatureRca(final ShardStore shardStore,\n+                                            final ShardSizeByShardTemperatureCalculator shardSizeByShard,\n+                                            final ShardSizeAvgTemperatureCalculator shardSizeAvg,\n+                                            final DiskUsageShardIndependentTemperatureCalculator diskUsageShardIndependent,\n+                                            final ShardSizePeakUsageTemperatureCalculator shardSizePeakUsage) {\n+       super(EVALUATION_INTERVAL_IN_S);\n+       this.SHARD_STORE = shardStore;\n+       this.SHARD_SIZE_BY_SHARD = shardSizeByShard;\n+       this.SHARD_SIZE_AVG = shardSizeAvg;\n+       this.DISK_USAGE = diskUsageShardIndependent;\n+       this.PEAK_SHARD_SIZE_USAGE = shardSizePeakUsage;\n+    }\n+\n+    @Override\n+    public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+        throw new IllegalStateException(\"This node: [\" + name() + \"] should not have received flow \"\n+                + \"units from remote nodes.\");\n+    }\n+\n+    @Override\n+    public DimensionalTemperatureFlowUnit operate() {\n+        LOG.debug(\"executing : {}\", name());\n+        DimensionalTemperatureFlowUnit shardSizeTemperatureFlowUnit =\n+                DimensionalTemperatureCalculator.getTemperatureForDimension(SHARD_STORE,\n+                        TemperatureVector.Dimension.Shard_Size_In_Bytes, SHARD_SIZE_BY_SHARD, SHARD_SIZE_AVG, DISK_USAGE,\n+                        PEAK_SHARD_SIZE_USAGE, THRESHOLD);\n+        LOG.info(\"Shard Size temperature calculated: {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MDE3Mw=="}, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NzM5NQ==", "bodyText": "Oh! Did other refactoring too.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433557395", "createdAt": "2020-06-02T00:27:31Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.temperature.DimensionalTemperatureFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.ShardStore;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeAvgTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeByShardTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity.ShardSizePeakUsageTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.shardIndependent.DiskUsageShardIndependentTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.DimensionalTemperatureCalculator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ShardSizeDimensionTemperatureRca extends Rca<DimensionalTemperatureFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(ShardSizeDimensionTemperatureRca.class);\n+    // The threshold set here is an initial threshold only.\n+    // TODO: Update the threshold appropriately after testing so that we assign heat correctly.\n+    private static final TemperatureVector.NormalizedValue THRESHOLD = new TemperatureVector.NormalizedValue((short) 2);\n+    private static final int EVALUATION_INTERVAL_IN_S = 5;\n+    private final ShardSizeByShardTemperatureCalculator SHARD_SIZE_BY_SHARD;\n+    private final ShardSizeAvgTemperatureCalculator SHARD_SIZE_AVG;\n+    private final DiskUsageShardIndependentTemperatureCalculator DISK_USAGE;\n+    private final ShardSizePeakUsageTemperatureCalculator PEAK_SHARD_SIZE_USAGE;\n+    private final ShardStore SHARD_STORE;\n+\n+    public ShardSizeDimensionTemperatureRca(final ShardStore shardStore,\n+                                            final ShardSizeByShardTemperatureCalculator shardSizeByShard,\n+                                            final ShardSizeAvgTemperatureCalculator shardSizeAvg,\n+                                            final DiskUsageShardIndependentTemperatureCalculator diskUsageShardIndependent,\n+                                            final ShardSizePeakUsageTemperatureCalculator shardSizePeakUsage) {\n+       super(EVALUATION_INTERVAL_IN_S);\n+       this.SHARD_STORE = shardStore;\n+       this.SHARD_SIZE_BY_SHARD = shardSizeByShard;\n+       this.SHARD_SIZE_AVG = shardSizeAvg;\n+       this.DISK_USAGE = diskUsageShardIndependent;\n+       this.PEAK_SHARD_SIZE_USAGE = shardSizePeakUsage;\n+    }\n+\n+    @Override\n+    public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+        throw new IllegalStateException(\"This node: [\" + name() + \"] should not have received flow \"\n+                + \"units from remote nodes.\");\n+    }\n+\n+    @Override\n+    public DimensionalTemperatureFlowUnit operate() {\n+        LOG.debug(\"executing : {}\", name());\n+        DimensionalTemperatureFlowUnit shardSizeTemperatureFlowUnit =\n+                DimensionalTemperatureCalculator.getTemperatureForDimension(SHARD_STORE,\n+                        TemperatureVector.Dimension.Shard_Size_In_Bytes, SHARD_SIZE_BY_SHARD, SHARD_SIZE_AVG, DISK_USAGE,\n+                        PEAK_SHARD_SIZE_USAGE, THRESHOLD);\n+        LOG.info(\"Shard Size temperature calculated: {}\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MDE3Mw=="}, "originalCommit": {"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDUzMzEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoxNToxMFrOGddBxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDoyNzowOFrOGdePMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNzQ3Nw==", "bodyText": "Are the changes in this file required ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433537477", "createdAt": "2020-06-01T23:15:10Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java", "diffHunk": "@@ -6,6 +6,8 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_AllocRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Paging_MajfltRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Sched_Waittime;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ShardSizeInBytes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07555042b042be1516417fb2768c981cd03f1bb2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NzI5OA==", "bodyText": "Right removed", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433557298", "createdAt": "2020-06-02T00:27:08Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java", "diffHunk": "@@ -6,6 +6,8 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_AllocRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Paging_MajfltRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Sched_Waittime;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ShardSizeInBytes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNzQ3Nw=="}, "originalCommit": {"oid": "07555042b042be1516417fb2768c981cd03f1bb2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDU0NDYzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoyMjowOVrOGddI8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDoyNzowMFrOGdePDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzOTMxMg==", "bodyText": "Can we add a similar method to test shard_bytes for a cluster level RCA and the node level one ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433539312", "createdAt": "2020-06-01T23:22:09Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -506,17 +506,13 @@ private void verifyFullNodeTemperatureProfile(String resp) {\n           break;\n         case Heap_AllocRate:\n           break;\n-        case IO_WriteSyscallRate:\n-          break;\n-        case IO_READ_SYSCALL_RATE:\n-          break;\n       }\n     }\n   }\n \n   private void verifyCpuDimension(JsonObject cpuObject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07555042b042be1516417fb2768c981cd03f1bb2"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NzI2Mg==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433557262", "createdAt": "2020-06-02T00:27:00Z", "author": {"login": "aditjind"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -506,17 +506,13 @@ private void verifyFullNodeTemperatureProfile(String resp) {\n           break;\n         case Heap_AllocRate:\n           break;\n-        case IO_WriteSyscallRate:\n-          break;\n-        case IO_READ_SYSCALL_RATE:\n-          break;\n       }\n     }\n   }\n \n   private void verifyCpuDimension(JsonObject cpuObject) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzOTMxMg=="}, "originalCommit": {"oid": "07555042b042be1516417fb2768c981cd03f1bb2"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzQyNDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSizeInBytes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzo0MjozMFrOGfb4cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMTo0NzoxOFrOGfdwhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxNTg1Nw==", "bodyText": "can we follow the same naming convention and remove \"In_BYTES\" from the name of the metric", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r435615857", "createdAt": "2020-06-04T23:42:30Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSizeInBytes.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+\n+public class ShardSizeInBytes extends Metric {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e5f5b56ac3c43dd274c7b2e7919c46dd223e51"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NjU5Ng==", "bodyText": "Right done. Wanted to follow the convention with the metrics name but ShardSize is more cleaner I guess.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r435646596", "createdAt": "2020-06-05T01:47:18Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSizeInBytes.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+\n+public class ShardSizeInBytes extends Metric {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxNTg1Nw=="}, "originalCommit": {"oid": "74e5f5b56ac3c43dd274c7b2e7919c46dd223e51"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTYzNDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzozNTo1OFrOGgo-bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDozNDo1MlrOGgvbUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3ODk1Ng==", "bodyText": "Please add a javadoc for this class. What it is ? How it is calculated and if it is aggregated in some form etc.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436878956", "createdAt": "2020-06-08T17:35:58Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+\n+public class ShardSize extends Metric {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4NDY1Ng==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436984656", "createdAt": "2020-06-08T20:34:52Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+\n+public class ShardSize extends Metric {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3ODk1Ng=="}, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTYzOTg0OnYy", "diffSide": "LEFT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzozNzozMFrOGgpBxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDowNjowMlrOGgueZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3OTgxMw==", "bodyText": "Can you remove these changes ? These are from a different commit", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436879813", "createdAt": "2020-06-08T17:37:30Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java", "diffHunk": "@@ -272,37 +275,11 @@ private void buildZoneProfile(final Record record, ShardStore shardStore\n \n         void addShard(ShardProfileSummary shard) {\n             shardProfileSummaries.add(shard);\n-            if (minShard == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2OTA2Mw==", "bodyText": "This commit got merged while rebasing from the master. I have certain other commits on top of it and also the files modified by both the commits are same. So I will have to revert the commit file by file. Is it possible to ignore these changes while reviewing?  I will take care in other PRs.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436969063", "createdAt": "2020-06-08T20:06:02Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java", "diffHunk": "@@ -272,37 +275,11 @@ private void buildZoneProfile(final Record record, ShardStore shardStore\n \n         void addShard(ShardProfileSummary shard) {\n             shardProfileSummaries.add(shard);\n-            if (minShard == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3OTgxMw=="}, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY0MTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzozODowMlrOGgpC8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxOTo1Njo1M1rOGguMWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MDExNA==", "bodyText": "remove ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436880114", "createdAt": "2020-06-08T17:38:02Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java", "diffHunk": "@@ -7,6 +7,7 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Paging_MajfltRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Sched_Waittime;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2NDQ0Mg==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436964442", "createdAt": "2020-06-08T19:56:53Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java", "diffHunk": "@@ -7,6 +7,7 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Paging_MajfltRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Sched_Waittime;\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MDExNA=="}, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY1MDg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo0MDo1MFrOGgpI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxNDoyMFrOGgwqNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MTYyNw==", "bodyText": "Can we name it something else ? There are too many shards in the name here :)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436881627", "createdAt": "2020-06-08T17:40:50Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -213,6 +218,11 @@ protected void constructResourceHeatMapGraph() {\n             new ShardIndependentTemperatureCalculatorCpuUtilMetric();\n     TotalCpuUtilForTotalNodeMetric cpuUtilPeakUsage = new TotalCpuUtilForTotalNodeMetric();\n \n+    ShardSizeByShardTemperatureCalculator shardSizeByShard =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNDg1NA==", "bodyText": "Renamed it to ShardSizeMetricBasedTemperatureCalculator", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437004854", "createdAt": "2020-06-08T21:14:20Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -213,6 +218,11 @@ protected void constructResourceHeatMapGraph() {\n             new ShardIndependentTemperatureCalculatorCpuUtilMetric();\n     TotalCpuUtilForTotalNodeMetric cpuUtilPeakUsage = new TotalCpuUtilForTotalNodeMetric();\n \n+    ShardSizeByShardTemperatureCalculator shardSizeByShard =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MTYyNw=="}, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTY2OTg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo0NjozM1rOGgpVPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDoyMDo0MFrOGhgvCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NDc5Nw==", "bodyText": "Why do we not need the totalBytes over all shards ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436884797", "createdAt": "2020-06-08T17:46:33Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -234,6 +247,9 @@ protected void constructResourceHeatMapGraph() {\n     addLeaf(shardIndependentHeapAllocRate);\n     addLeaf(heapAllocRateTotal);\n \n+    addLeaf(shardSizeByShard);\n+    addLeaf(shardSizeAvg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwMjcwNQ==", "bodyText": "I was calculating the total bytes by multiplying the average shard size by the total number of shards. But we can do that calculation while fetching from the DB itself. Updated this in the latest commits.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437002705", "createdAt": "2020-06-08T21:10:00Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -234,6 +247,9 @@ protected void constructResourceHeatMapGraph() {\n     addLeaf(shardIndependentHeapAllocRate);\n     addLeaf(heapAllocRateTotal);\n \n+    addLeaf(shardSizeByShard);\n+    addLeaf(shardSizeAvg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NDc5Nw=="}, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MjUyMw==", "bodyText": "Thanks for changing this. Doing that calculation on the SQLite layer is much much faster.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437792523", "createdAt": "2020-06-10T00:20:40Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -234,6 +247,9 @@ protected void constructResourceHeatMapGraph() {\n     addLeaf(shardIndependentHeapAllocRate);\n     addLeaf(heapAllocRateTotal);\n \n+    addLeaf(shardSizeByShard);\n+    addLeaf(shardSizeAvg);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NDc5Nw=="}, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjI5MDYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDozNTo0NFrOGgvdEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxOTowOFrOGgw0Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4NTEwNg==", "bodyText": "I guess we can remove this line", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436985106", "createdAt": "2020-06-08T20:35:44Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -70,12 +74,13 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.ClusterTemperatureRca;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.NodeTemperatureRca;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension.CpuUtilDimensionTemperatureRca;\n-\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension.HeapAllocRateTemperatureRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension.ShardSizeDimensionTemperatureRca;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNzQyMw==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437007423", "createdAt": "2020-06-08T21:19:08Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -70,12 +74,13 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.ClusterTemperatureRca;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.NodeTemperatureRca;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension.CpuUtilDimensionTemperatureRca;\n-\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension.HeapAllocRateTemperatureRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension.ShardSizeDimensionTemperatureRca;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4NTEwNg=="}, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjMyNDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/NodeTemperatureRca.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDo0NTo1N1rOGgvx3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjo1ODowOFrOGhjLhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MDQzMA==", "bodyText": "Do we want to throw an exception here if shardsize flowunit is not received ? Can we simple send out an empty flowunit if some upstream flowunits are missing ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436990430", "createdAt": "2020-06-08T20:45:57Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/NodeTemperatureRca.java", "diffHunk": "@@ -85,8 +91,13 @@ public CompactNodeTemperatureFlowUnit operate() {\n       throw new IllegalStateException(\"One flow unit expected. Found: \" + heapAllocRateFlowUnits);\n     }\n \n+    if (shardSizeFlowUnits.size() != 1) {\n+      throw new IllegalArgumentException(\"One flow unit expected. Found: \" + shardSizeFlowUnits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxMDI5Ng==", "bodyText": "That would mean we are calculating the RCA with half knowledge of metrics and calculating shard heat based on that. We are going to trigger shard movement going forward with these and this should only be done when we have full knowledge of the metrics.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437010296", "createdAt": "2020-06-08T21:25:14Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/NodeTemperatureRca.java", "diffHunk": "@@ -85,8 +91,13 @@ public CompactNodeTemperatureFlowUnit operate() {\n       throw new IllegalStateException(\"One flow unit expected. Found: \" + heapAllocRateFlowUnits);\n     }\n \n+    if (shardSizeFlowUnits.size() != 1) {\n+      throw new IllegalArgumentException(\"One flow unit expected. Found: \" + shardSizeFlowUnits);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MDQzMA=="}, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjcwNA==", "bodyText": "Throwing an exception is dangerous as this will mute the node and exclude it from future runs. We should not throw an exception inside operate unless it is an un-recoverable exception.\nBut here we check for size to be one as this is intra-node aggregation and we don't expect multiple FlowUnits to show up just one and to @rguo-aws 's point, that can be an empty one.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437796704", "createdAt": "2020-06-10T00:37:17Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/NodeTemperatureRca.java", "diffHunk": "@@ -85,8 +91,13 @@ public CompactNodeTemperatureFlowUnit operate() {\n       throw new IllegalStateException(\"One flow unit expected. Found: \" + heapAllocRateFlowUnits);\n     }\n \n+    if (shardSizeFlowUnits.size() != 1) {\n+      throw new IllegalArgumentException(\"One flow unit expected. Found: \" + shardSizeFlowUnits);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MDQzMA=="}, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMjU4MQ==", "bodyText": "Right missed the point about muting the node. Added the empty flow unit in case no flow units are received. We are returning from NodeTemperatureRCA in the case of these empty flow units.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437832581", "createdAt": "2020-06-10T02:58:08Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/NodeTemperatureRca.java", "diffHunk": "@@ -85,8 +91,13 @@ public CompactNodeTemperatureFlowUnit operate() {\n       throw new IllegalStateException(\"One flow unit expected. Found: \" + heapAllocRateFlowUnits);\n     }\n \n+    if (shardSizeFlowUnits.size() != 1) {\n+      throw new IllegalArgumentException(\"One flow unit expected. Found: \" + shardSizeFlowUnits);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MDQzMA=="}, "originalCommit": {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzMzMDE5OnYy", "diffSide": "RIGHT", "path": "pa_config/rca.conf", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDoxNjo0MFrOGhgqfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDoxNjo0MFrOGhgqfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MTM1OQ==", "bodyText": "Thanks for the comments !!", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437791359", "createdAt": "2020-06-10T00:16:40Z", "author": {"login": "yojs"}, "path": "pa_config/rca.conf", "diffHunk": "@@ -60,16 +60,24 @@\n   \"muted-rcas\": [\n     \"HotShardRca\",\n     \"HotShardClusterRca\",\n+    // Calculating temperature heat along 4 parameters for Heap dimension", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0ab4a9910cb297cf1abd8aa0d1799839584162"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM1Mzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/capacity/ShardTotalDiskUsageTemperatureCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDozMDoyMlrOGhg5Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDozMDoyMlrOGhg5Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NTA5NA==", "bodyText": "Fro every new dimension we add, we have to add 4 new graph nodes that translates into multiple Java classes. It would be nice if we can merge them so that adding a new dimension is as simple as adding a new metric to a set that would be much cleaner.\nThis refactoring can be part of a separate PR. Just wanted to bring this up.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437795094", "createdAt": "2020-06-10T00:30:22Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/capacity/ShardTotalDiskUsageTemperatureCalculator.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity.calculators.TotalNodeTemperatureCalculator;\n+\n+/**\n+ * This class calculated the total disk used by shards in the node.\n+ */\n+\n+public class ShardTotalDiskUsageTemperatureCalculator extends TotalNodeTemperatureCalculator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0ab4a9910cb297cf1abd8aa0d1799839584162"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM4MDEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDo0NzowOFrOGhhI7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDo0NzowOFrOGhhI7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTE0OQ==", "bodyText": "At some point we should move them to the rca.conf as dynamic configs.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437799149", "createdAt": "2020-06-10T00:47:08Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.temperature.DimensionalTemperatureFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.ShardStore;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeAvgTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeMetricBasedTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity.ShardTotalDiskUsageTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.DimensionalTemperatureCalculator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/*\n+ *Returns the shard size based heat of an individual node.\n+ */\n+\n+public class ShardSizeDimensionTemperatureRca extends Rca<DimensionalTemperatureFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(ShardSizeDimensionTemperatureRca.class);\n+    // The threshold set here is an initial threshold only.\n+    // TODO: Update the threshold appropriately after testing so that we assign heat correctly.\n+    private static final TemperatureVector.NormalizedValue THRESHOLD = new TemperatureVector.NormalizedValue((short) 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0ab4a9910cb297cf1abd8aa0d1799839584162"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM4MTQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDo0Nzo1NVrOGhhJzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMzowMDowMlrOGhjNSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTM3Mw==", "bodyText": "Can we remove <<<<<<< HEAD ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437799373", "createdAt": "2020-06-10T00:47:55Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -337,14 +337,367 @@ public void mutedTemperatureProfile() {\n   }\n \n   /**\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0ab4a9910cb297cf1abd8aa0d1799839584162"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMzAzNQ==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437833035", "createdAt": "2020-06-10T03:00:02Z", "author": {"login": "aditjind"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -337,14 +337,367 @@ public void mutedTemperatureProfile() {\n   }\n \n   /**\n+<<<<<<< HEAD", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTM3Mw=="}, "originalCommit": {"oid": "8c0ab4a9910cb297cf1abd8aa0d1799839584162"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNzM4MjIxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMDo0ODoxOVrOGhhKQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjo1OTo1OFrOGhjNKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTQ5MA==", "bodyText": "remove ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437799490", "createdAt": "2020-06-10T00:48:19Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -337,14 +337,367 @@ public void mutedTemperatureProfile() {\n   }\n \n   /**\n+<<<<<<< HEAD\n+   [\n+   {\n+   \"NodeLevelZoneSummary\":[\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"HOT\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"WARM\"\n+   },\n+   {\n+   \"all_shards\":[\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   }\n+   ],\n+   \"max\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   \"min\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"zone\":\"LUKE_WARM\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"COLD\"\n+   }\n+   ],\n+   \"dimension\":\"CPU_Utilization\",\n+   \"mean\":1,\n+   \"numShards\":3,\n+   \"timestamp\":1591056310990,\n+   \"total\":0.113345915412554\n+   },\n+   {\n+   \"NodeLevelZoneSummary\":[\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"HOT\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"WARM\"\n+   },\n+   {\n+   \"all_shards\":[\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   }\n+   ],\n+   \"max\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   \"min\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"zone\":\"LUKE_WARM\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"COLD\"\n+   }\n+   ],\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"mean\":10,\n+   \"numShards\":3,\n+   \"timestamp\":1591056310990,\n+   \"total\":7631604.33333333\n+   },\n+   {\n+   \"NodeLevelZoneSummary\":[\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"HOT\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"WARM\"\n+   },\n+   {\n+   \"all_shards\":[\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   }\n+   ],\n+   \"max\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"min\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"zone\":\"LUKE_WARM\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"COLD\"\n+   }\n+   ],\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"mean\":1,\n+   \"numShards\":3,\n+   \"timestamp\":1591056310990,\n+   \"total\":7429635.38060667\n+   }\n+   ]\n+\n+=======", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0ab4a9910cb297cf1abd8aa0d1799839584162"}, "originalPosition": 365}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMzAwMQ==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437833001", "createdAt": "2020-06-10T02:59:58Z", "author": {"login": "aditjind"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -337,14 +337,367 @@ public void mutedTemperatureProfile() {\n   }\n \n   /**\n+<<<<<<< HEAD\n+   [\n+   {\n+   \"NodeLevelZoneSummary\":[\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"HOT\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"WARM\"\n+   },\n+   {\n+   \"all_shards\":[\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   }\n+   ],\n+   \"max\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   \"min\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"zone\":\"LUKE_WARM\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"COLD\"\n+   }\n+   ],\n+   \"dimension\":\"CPU_Utilization\",\n+   \"mean\":1,\n+   \"numShards\":3,\n+   \"timestamp\":1591056310990,\n+   \"total\":0.113345915412554\n+   },\n+   {\n+   \"NodeLevelZoneSummary\":[\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"HOT\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"WARM\"\n+   },\n+   {\n+   \"all_shards\":[\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   }\n+   ],\n+   \"max\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   \"min\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"zone\":\"LUKE_WARM\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"COLD\"\n+   }\n+   ],\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"mean\":10,\n+   \"numShards\":3,\n+   \"timestamp\":1591056310990,\n+   \"total\":7631604.33333333\n+   },\n+   {\n+   \"NodeLevelZoneSummary\":[\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"HOT\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"WARM\"\n+   },\n+   {\n+   \"all_shards\":[\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   }\n+   ],\n+   \"max\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"min\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"zone\":\"LUKE_WARM\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"COLD\"\n+   }\n+   ],\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"mean\":1,\n+   \"numShards\":3,\n+   \"timestamp\":1591056310990,\n+   \"total\":7429635.38060667\n+   }\n+   ]\n+\n+=======", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTQ5MA=="}, "originalCommit": {"oid": "8c0ab4a9910cb297cf1abd8aa0d1799839584162"}, "originalPosition": 365}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2473, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}