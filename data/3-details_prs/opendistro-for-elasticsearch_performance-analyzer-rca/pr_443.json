{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NTk4OTI3", "number": 443, "title": "Modify HighHeapUsageYoungGenRca to better detect sizing issues", "bodyText": "Now takes full GC pause time into account when making decisions\nTakes into account the amount of garbage mistakenly promoted into the\nold generation\n\nFixes #:\nDescription of changes:\nTests:\nIf new tests are added, how long do the new ones take to complete\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-10-01T23:24:41Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443", "merged": true, "mergeCommit": {"oid": "ff62a371b0d29590361e62772347e90018d32534"}, "closed": true, "closedAt": "2020-10-09T08:13:39Z", "author": {"login": "sidheart"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPor0lAFqTUwMjI4NDEyOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQnwoDAFqTUwNTE0ODIzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMjg0MTI5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#pullrequestreview-502284129", "createdAt": "2020-10-05T17:47:38Z", "commit": {"oid": "a5b8fd82a5a851d7e38459ce2f3024e3e86aa5be"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo0NzozOFrOHcneGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODo1NzozNFrOHcpv6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2ODg1OA==", "bodyText": "Please rename to something on the lines of FULL_GC_TIME_THRES_MS.\nIt has a confusing overlap with leader/follower timeouts in ES. Full gc pauses impact multiple things, in addition to failed fd checks. Naming it around what it is used for in the scope of code helps understanding your Rca logic better.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r499768858", "createdAt": "2020-10-05T17:47:38Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java", "diffHunk": "@@ -53,6 +56,7 @@\n \n   private static final Logger LOG = LogManager.getLogger(HighHeapUsageYoungGenRca.class);\n   private static final int PROMOTION_RATE_SLIDING_WINDOW_IN_MINS = 10;\n+  private static final double FOLLOWER_CHECK_TIMEOUT_MS = 10 * 1_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5b8fd82a5a851d7e38459ce2f3024e3e86aa5be"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgwNjE4Ng==", "bodyText": "Should we add metrics for which of the sub-condition was breached?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r499806186", "createdAt": "2020-10-05T18:57:34Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java", "diffHunk": "@@ -118,6 +134,103 @@ protected void remove(SlidingWindowData e) {\n     this(rcaPeriod, 1.0, heap_Used, gc_Collection_Time);\n   }\n \n+  private boolean fullGcTimeTooHigh(double avgFullGcTime) {\n+    return (!Double.isNaN(avgFullGcTime) && avgFullGcTime > FOLLOWER_CHECK_TIMEOUT_MS);\n+  }\n+\n+  private boolean promotionRateTooHigh(double avgPromotionRate, double modifier) {\n+    return (!Double.isNaN(avgPromotionRate) && avgPromotionRate > promotionRateThreshold * modifier);\n+  }\n+\n+  private boolean youngGcTimeTooHigh(double avgYoungGCTime) {\n+    return (!Double.isNaN(avgYoungGCTime) && avgYoungGCTime > youngGenGcTimeThreshold);\n+  }\n+\n+  private boolean prematurePromotionTooHigh(double avgGarbagePromoted) {\n+    return (!Double.isNaN(avgGarbagePromoted)\n+        && avgGarbagePromoted <= 1\n+        && avgGarbagePromoted > garbagePromotionPctThreshold);\n+  }\n+\n+  private double getFollowerCheckTimeoutMs() {\n+    return FOLLOWER_CHECK_TIMEOUT_MS;\n+  }\n+\n+  /**\n+   * Creates and returns a ResourceFlowUnit that reflects the health of this RCA\n+   *\n+   * @param avgPromotionRate the average rate of promotion of objects from the young generation to\n+   *                         the old generation in MB/s\n+   * @param avgYoungGCTime the average amount of time spent on GC in ms\n+   * @param avgGarbagePromoted the average amount of objects which were promoted to the old generation\n+   *                           then collected from the old generation shortly after. This is a percentage\n+   *                           from 0.0 to 1.0\n+   * @param avgFullGCTime The average amount of time spend of full GC in ms\n+   * @return A ResourceFlowUnit encapsulating the health of this RCA\n+   */\n+  private ResourceFlowUnit<HotResourceSummary> computeFlowUnit(double avgPromotionRate,\n+                                                               double avgYoungGCTime,\n+                                                               double avgGarbagePromoted,\n+                                                               double avgFullGCTime) {\n+    ResourceContext context = new ResourceContext(State.UNHEALTHY);\n+    HotResourceSummary summary = null;\n+    boolean unhealthy = true;\n+\n+    // Check if the RCA is unhealthy\n+    if (fullGcTimeTooHigh(avgFullGCTime)) {\n+      summary = new HotResourceSummary(FULL_GC_PAUSE_TIME, getFollowerCheckTimeoutMs(), avgFullGCTime,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+    } else if (promotionRateTooHigh(avgPromotionRate, this.lowerBoundThreshold)) {\n+      //check to see if the value is above lower bound thres\n+      summary = new HotResourceSummary(YOUNG_GEN_PROMOTION_RATE,\n+          promotionRateThreshold * this.lowerBoundThreshold, avgPromotionRate,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+    } else if (youngGcTimeTooHigh(avgYoungGCTime)) {\n+      summary = new HotResourceSummary(MINOR_GC_PAUSE_TIME, youngGenGcTimeThreshold, avgYoungGCTime,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+    } else if (prematurePromotionTooHigh(avgGarbagePromoted)) {\n+      summary = new HotResourceSummary(YOUNG_GEN_PROMOTION_RATE, garbagePromotionPctThreshold,\n+          avgGarbagePromoted, PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+    } else {\n+      unhealthy = false;\n+      context = new ResourceContext(State.HEALTHY);\n+    }\n+\n+    if (unhealthy) {\n+      LOG.debug(\"avgPromotionRate = {} , avgGCTime = {}, avgGarbagePromoted = {}, avgFullGcTime = {},\",\n+          avgPromotionRate, avgYoungGCTime, avgGarbagePromoted, avgFullGCTime);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5b8fd82a5a851d7e38459ce2f3024e3e86aa5be"}, "originalPosition": 142}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5b8fd82a5a851d7e38459ce2f3024e3e86aa5be", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a5b8fd82a5a851d7e38459ce2f3024e3e86aa5be", "committedDate": "2020-10-01T23:19:34Z", "message": "Modify HighHeapUsageYoungGenRca to better detect sizing issues\n\n- Now takes full GC pause time into account when making decisions\n- Takes into account the amount of garbage mistakenly promoted into the\n  old generation"}, "afterCommit": {"oid": "423cbda378e1b5a8fead34c77cda8cf94f6d6323", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/423cbda378e1b5a8fead34c77cda8cf94f6d6323", "committedDate": "2020-10-05T22:47:04Z", "message": "Modify HighHeapUsageYoungGenRca to better detect sizing issues\n\n- Now takes full GC pause time into account when making decisions\n- Takes into account the amount of garbage mistakenly promoted into the\n  old generation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNDc5MTY2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#pullrequestreview-502479166", "createdAt": "2020-10-05T23:04:10Z", "commit": {"oid": "423cbda378e1b5a8fead34c77cda8cf94f6d6323"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f440fc538fb795cc2f1e2c32ef5727a8abc0e54f", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f440fc538fb795cc2f1e2c32ef5727a8abc0e54f", "committedDate": "2020-10-06T22:02:38Z", "message": "Modify HighHeapUsageYoungGenRca to better detect sizing issues\n\n- Now takes full GC pause time into account when making decisions\n- Takes into account the amount of garbage mistakenly promoted into the\n  old generation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "423cbda378e1b5a8fead34c77cda8cf94f6d6323", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/423cbda378e1b5a8fead34c77cda8cf94f6d6323", "committedDate": "2020-10-05T22:47:04Z", "message": "Modify HighHeapUsageYoungGenRca to better detect sizing issues\n\n- Now takes full GC pause time into account when making decisions\n- Takes into account the amount of garbage mistakenly promoted into the\n  old generation"}, "afterCommit": {"oid": "f440fc538fb795cc2f1e2c32ef5727a8abc0e54f", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f440fc538fb795cc2f1e2c32ef5727a8abc0e54f", "committedDate": "2020-10-06T22:02:38Z", "message": "Modify HighHeapUsageYoungGenRca to better detect sizing issues\n\n- Now takes full GC pause time into account when making decisions\n- Takes into account the amount of garbage mistakenly promoted into the\n  old generation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNDM2NjM2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#pullrequestreview-503436636", "createdAt": "2020-10-06T23:54:02Z", "commit": {"oid": "f440fc538fb795cc2f1e2c32ef5727a8abc0e54f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMzo1NDowMlrOHdd1Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDowMDoyM1rOHdd9Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1OTUxNA==", "bodyText": "can multiple metrics be identified as \"too high\" at the same time ? Do we want to add multiple resource summaries into flowunit in that case ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r500659514", "createdAt": "2020-10-06T23:54:02Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java", "diffHunk": "@@ -118,6 +139,111 @@ protected void remove(SlidingWindowData e) {\n     this(rcaPeriod, 1.0, heap_Used, gc_Collection_Time);\n   }\n \n+  private boolean fullGcTimeTooHigh(double avgFullGcTime) {\n+    return (!Double.isNaN(avgFullGcTime) && avgFullGcTime > FULL_GC_TIME_THRES_MS);\n+  }\n+\n+  private boolean promotionRateTooHigh(double avgPromotionRate, double modifier) {\n+    return (!Double.isNaN(avgPromotionRate) && avgPromotionRate > promotionRateThreshold * modifier);\n+  }\n+\n+  private boolean youngGcTimeTooHigh(double avgYoungGCTime) {\n+    return (!Double.isNaN(avgYoungGCTime) && avgYoungGCTime > youngGenGcTimeThreshold);\n+  }\n+\n+  private boolean prematurePromotionTooHigh(double avgGarbagePromoted) {\n+    return (!Double.isNaN(avgGarbagePromoted)\n+        && avgGarbagePromoted <= 1\n+        && avgGarbagePromoted > garbagePromotionPctThreshold);\n+  }\n+\n+  private double getFollowerCheckTimeoutMs() {\n+    return FULL_GC_TIME_THRES_MS;\n+  }\n+\n+  /**\n+   * Creates and returns a ResourceFlowUnit that reflects the health of this RCA\n+   *\n+   * @param avgPromotionRate the average rate of promotion of objects from the young generation to\n+   *                         the old generation in MB/s\n+   * @param avgYoungGCTime the average amount of time spent on GC in ms\n+   * @param avgGarbagePromoted the average amount of objects which were promoted to the old generation\n+   *                           then collected from the old generation shortly after. This is a percentage\n+   *                           from 0.0 to 1.0\n+   * @param avgFullGCTime The average amount of time spend of full GC in ms\n+   * @return A ResourceFlowUnit encapsulating the health of this RCA\n+   */\n+  private ResourceFlowUnit<HotResourceSummary> computeFlowUnit(double avgPromotionRate,\n+                                                               double avgYoungGCTime,\n+                                                               double avgGarbagePromoted,\n+                                                               double avgFullGCTime) {\n+    ResourceContext context = new ResourceContext(State.UNHEALTHY);\n+    HotResourceSummary summary = null;\n+    boolean unhealthy = true;\n+\n+    // Check if the RCA is unhealthy\n+    if (fullGcTimeTooHigh(avgFullGCTime)) {\n+      summary = new HotResourceSummary(FULL_GC_PAUSE_TIME, getFollowerCheckTimeoutMs(), avgFullGCTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f440fc538fb795cc2f1e2c32ef5727a8abc0e54f"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MTUzNQ==", "bodyText": "I suggest that we should also check if full GC count > 0 in the last 5 sec time interval", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r500661535", "createdAt": "2020-10-07T00:00:23Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java", "diffHunk": "@@ -118,6 +139,111 @@ protected void remove(SlidingWindowData e) {\n     this(rcaPeriod, 1.0, heap_Used, gc_Collection_Time);\n   }\n \n+  private boolean fullGcTimeTooHigh(double avgFullGcTime) {\n+    return (!Double.isNaN(avgFullGcTime) && avgFullGcTime > FULL_GC_TIME_THRES_MS);\n+  }\n+\n+  private boolean promotionRateTooHigh(double avgPromotionRate, double modifier) {\n+    return (!Double.isNaN(avgPromotionRate) && avgPromotionRate > promotionRateThreshold * modifier);\n+  }\n+\n+  private boolean youngGcTimeTooHigh(double avgYoungGCTime) {\n+    return (!Double.isNaN(avgYoungGCTime) && avgYoungGCTime > youngGenGcTimeThreshold);\n+  }\n+\n+  private boolean prematurePromotionTooHigh(double avgGarbagePromoted) {\n+    return (!Double.isNaN(avgGarbagePromoted)\n+        && avgGarbagePromoted <= 1\n+        && avgGarbagePromoted > garbagePromotionPctThreshold);\n+  }\n+\n+  private double getFollowerCheckTimeoutMs() {\n+    return FULL_GC_TIME_THRES_MS;\n+  }\n+\n+  /**\n+   * Creates and returns a ResourceFlowUnit that reflects the health of this RCA\n+   *\n+   * @param avgPromotionRate the average rate of promotion of objects from the young generation to\n+   *                         the old generation in MB/s\n+   * @param avgYoungGCTime the average amount of time spent on GC in ms\n+   * @param avgGarbagePromoted the average amount of objects which were promoted to the old generation\n+   *                           then collected from the old generation shortly after. This is a percentage\n+   *                           from 0.0 to 1.0\n+   * @param avgFullGCTime The average amount of time spend of full GC in ms\n+   * @return A ResourceFlowUnit encapsulating the health of this RCA\n+   */\n+  private ResourceFlowUnit<HotResourceSummary> computeFlowUnit(double avgPromotionRate,\n+                                                               double avgYoungGCTime,\n+                                                               double avgGarbagePromoted,\n+                                                               double avgFullGCTime) {\n+    ResourceContext context = new ResourceContext(State.UNHEALTHY);\n+    HotResourceSummary summary = null;\n+    boolean unhealthy = true;\n+\n+    // Check if the RCA is unhealthy\n+    if (fullGcTimeTooHigh(avgFullGCTime)) {\n+      summary = new HotResourceSummary(FULL_GC_PAUSE_TIME, getFollowerCheckTimeoutMs(), avgFullGCTime,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(\n+          RcaVerticesMetrics.YOUNG_GEN_RCA_NAMED_COUNT, FULL_GC_TIME_TOO_HIGH, 1);\n+    } else if (promotionRateTooHigh(avgPromotionRate, this.lowerBoundThreshold)) {\n+      //check to see if the value is above lower bound thres\n+      summary = new HotResourceSummary(YOUNG_GEN_PROMOTION_RATE,\n+          promotionRateThreshold * this.lowerBoundThreshold, avgPromotionRate,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(\n+          RcaVerticesMetrics.YOUNG_GEN_RCA_NAMED_COUNT, PROMOTION_RATE_TOO_HIGH, 1);\n+    } else if (youngGcTimeTooHigh(avgYoungGCTime)) {\n+      summary = new HotResourceSummary(MINOR_GC_PAUSE_TIME, youngGenGcTimeThreshold, avgYoungGCTime,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(\n+          RcaVerticesMetrics.YOUNG_GEN_RCA_NAMED_COUNT, YOUNG_GC_TIME_TOO_HIGH, 1);\n+    } else if (prematurePromotionTooHigh(avgGarbagePromoted)) {\n+      summary = new HotResourceSummary(YOUNG_GEN_PROMOTION_RATE, garbagePromotionPctThreshold,\n+          avgGarbagePromoted, PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(\n+          RcaVerticesMetrics.YOUNG_GEN_RCA_NAMED_COUNT, PREMATURE_PROMOTION_TOO_HIGH, 1);\n+    } else {\n+      unhealthy = false;\n+      context = new ResourceContext(State.HEALTHY);\n+    }\n+\n+    if (unhealthy) {\n+      LOG.debug(\"avgPromotionRate = {} , avgGCTime = {}, avgGarbagePromoted = {}, avgFullGcTime = {},\",\n+          avgPromotionRate, avgYoungGCTime, avgGarbagePromoted, avgFullGCTime);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(\n+          RcaVerticesMetrics.NUM_YOUNG_GEN_RCA_TRIGGERED, \"\", 1);\n+    }\n+\n+    return new ResourceFlowUnit<>(this.clock.millis(), context, summary);\n+  }\n+\n+  /**\n+   * computes the amount of data promoted and reclaimed by the garbage collector\n+   * @param currOldGen the current occupancy of the old generation in bytes\n+   * @param currTimeStamp the current timestamp in UNIX epoch milliseconds\n+   */\n+  private void computePromotionHealth(double currOldGen, long currTimeStamp) {\n+    if (currOldGen > maxOldGen) {\n+      maxOldGen = currOldGen;\n+    }\n+    double promoted = currOldGen - prevOldGen;\n+    if (promoted >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f440fc538fb795cc2f1e2c32ef5727a8abc0e54f"}, "originalPosition": 173}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeb9fb4be7968e82632aa47d417d5e7ebb50dfe8", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/eeb9fb4be7968e82632aa47d417d5e7ebb50dfe8", "committedDate": "2020-10-07T17:26:25Z", "message": "Consider full GC events in the YoungGenRca\n\nWe used to conclude that if the old gen heap increased between\nobservations, then it meant that a full GC event occurred.\n\nWe now explicitly check if a full GC event occurred using metrics."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MjQwOTA5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#pullrequestreview-504240909", "createdAt": "2020-10-07T20:28:02Z", "commit": {"oid": "eeb9fb4be7968e82632aa47d417d5e7ebb50dfe8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MTQ4MjM4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#pullrequestreview-505148238", "createdAt": "2020-10-08T20:39:26Z", "commit": {"oid": "eeb9fb4be7968e82632aa47d417d5e7ebb50dfe8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 937, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}