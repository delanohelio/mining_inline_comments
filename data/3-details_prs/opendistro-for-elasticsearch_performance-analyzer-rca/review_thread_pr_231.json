{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTM2NTE1", "number": 231, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozNjo0MFrOEE0mDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzozNzo0OFrOEE4hZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDkxNDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozNjo0MFrOGir4Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjoxNDoyOVrOGiwlnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMzY3NQ==", "bodyText": "we should use snake case for static variables", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439023675", "createdAt": "2020-06-11T19:36:40Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -88,13 +88,16 @@\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n+  private static final int rcaPeriod = 12;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa741c5295f98901644162fddc57b3984be968d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMDgzMQ==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439100831", "createdAt": "2020-06-11T22:14:29Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -88,13 +88,16 @@\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n+  private static final int rcaPeriod = 12;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMzY3NQ=="}, "originalCommit": {"oid": "7fa741c5295f98901644162fddc57b3984be968d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDkyMDE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxOTozODoyNVrOGir7nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjoxODoxNVrOGiwqxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNDU0MA==", "bodyText": "Ideally we should remove this argument in constructor and fix the value to 5 seconds in base class. Joydeep wanted us to refactor this long time ago", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439024540", "createdAt": "2020-06-11T19:38:25Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -88,13 +88,16 @@\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n+  private static final int rcaPeriod = 12;\n+  private static final int evaluationIntervalSeconds = 5;\n+\n \n   @Override\n   public void construct() {\n-    Metric heapUsed = new Heap_Used(5);\n-    Metric gcEvent = new GC_Collection_Event(5);\n-    Metric heapMax = new Heap_Max(5);\n-    Metric gc_Collection_Time = new GC_Collection_Time(5);\n+    Metric heapUsed = new Heap_Used(evaluationIntervalSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fa741c5295f98901644162fddc57b3984be968d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5OTk4OA==", "bodyText": "I can see that this the evaluationInterval of the AggregateMetric is 1s. I dont know if there is any reason for that. If not, we should remove it altogether from here and fix its value to constant 5 seconds.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439099988", "createdAt": "2020-06-11T22:12:00Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -88,13 +88,16 @@\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n+  private static final int rcaPeriod = 12;\n+  private static final int evaluationIntervalSeconds = 5;\n+\n \n   @Override\n   public void construct() {\n-    Metric heapUsed = new Heap_Used(5);\n-    Metric gcEvent = new GC_Collection_Event(5);\n-    Metric heapMax = new Heap_Max(5);\n-    Metric gc_Collection_Time = new GC_Collection_Time(5);\n+    Metric heapUsed = new Heap_Used(evaluationIntervalSeconds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNDU0MA=="}, "originalCommit": {"oid": "7fa741c5295f98901644162fddc57b3984be968d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMjE0OA==", "bodyText": "let's create a separate issue to keep track of that.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439102148", "createdAt": "2020-06-11T22:18:15Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -88,13 +88,16 @@\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n+  private static final int rcaPeriod = 12;\n+  private static final int evaluationIntervalSeconds = 5;\n+\n \n   @Override\n   public void construct() {\n-    Metric heapUsed = new Heap_Used(5);\n-    Metric gcEvent = new GC_Collection_Event(5);\n-    Metric heapMax = new Heap_Max(5);\n-    Metric gc_Collection_Time = new GC_Collection_Time(5);\n+    Metric heapUsed = new Heap_Used(evaluationIntervalSeconds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNDU0MA=="}, "originalCommit": {"oid": "7fa741c5295f98901644162fddc57b3984be968d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTUwNjM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzowOToxNVrOGixr4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzowOToxNVrOGixr4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExODgxNw==", "bodyText": "Thank You for making this change.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439118817", "createdAt": "2020-06-11T23:09:15Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -88,13 +88,16 @@\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n+  private static final int RCA_PERIOD = 12;\n+  private static final int EVALUATION_INTERVAL_SECONDS = 5;\n+\n \n   @Override\n   public void construct() {\n-    Metric heapUsed = new Heap_Used(5);\n-    Metric gcEvent = new GC_Collection_Event(5);\n-    Metric heapMax = new Heap_Max(5);\n-    Metric gc_Collection_Time = new GC_Collection_Time(5);\n+    Metric heapUsed = new Heap_Used(EVALUATION_INTERVAL_SECONDS);\n+    Metric gcEvent = new GC_Collection_Event(EVALUATION_INTERVAL_SECONDS);\n+    Metric heapMax = new Heap_Max(EVALUATION_INTERVAL_SECONDS);\n+    Metric gc_Collection_Time = new GC_Collection_Time(EVALUATION_INTERVAL_SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a276233edc3946634767d953a872b8ae82e025ef"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNTU1ODEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/CpuUtilDimensionTemperatureRca.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzozNzo0OFrOGiyLzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMzozNzo0OFrOGiyLzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNjk5MA==", "bodyText": "nit: Consider moving this to line 79 and add the context information as well.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439126990", "createdAt": "2020-06-11T23:37:48Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/CpuUtilDimensionTemperatureRca.java", "diffHunk": "@@ -62,12 +64,18 @@ public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n \n     @Override\n     public DimensionalTemperatureFlowUnit operate() {\n-        DimensionalTemperatureFlowUnit flowUnit = DimensionalTemperatureCalculator.getTemperatureForDimension(\n+        DimensionalTemperatureFlowUnit cpuUtilTemperatureFlowUnit = DimensionalTemperatureCalculator.getTemperatureForDimension(\n                 shardStore,\n                 TemperatureVector.Dimension.CPU_Utilization,\n                 CPU_UTIL_BY_SHARD,\n                 AVG_CPU_UTIL_BY_SHARD, CPU_UTIL_SHARD_INDEPENDENT, CPU_UTIL_PEAK_USAGE,\n                 THRESHOLD_NORMALIZED_VAL_FOR_HEAT_ZONE_ASSIGNMENT);\n-        return flowUnit;\n+        LOG.info(\"CPU Utilization temperature calculated: {}\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a276233edc3946634767d953a872b8ae82e025ef"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2492, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}