{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNzE5NDYw", "number": 330, "title": "Adding Cache RCAs to Analysis Graph, using cache max size from Node Config Cache and minor fixes", "bodyText": "Description of changes:\n\nAdding the Cache Node and Cluster RCAs to Analysis graph\nEnabling query on Cache Cluster RCAs via RCA API\nMinor Re-factoring in CacheUtil\nUpdating to use Cache Max size from Node Config Cache\n\n\n[ec2-user@ip-10-212-22-125 logs]$ curl --url \"localhost:9650/_opendistro/_performanceanalyzer/rca?name=ShardRequestCacheClusterRca\" -XGET | python -m json.tool\n{\n    \"ShardRequestCacheClusterRca\": [\n        {\n            \"HotClusterSummary\": [\n                {\n                    \"HotNodeSummary\": [\n                        {\n                            \"HotResourceSummary\": [\n                                {\n                                    \"avg\": NaN,\n                                    \"max\": NaN,\n                                    \"meta_data\": \"\",\n                                    \"min\": NaN,\n                                    \"resource_metric\": \"cache eviction(cache eviction count)\",\n                                    \"resource_type\": \"shard request cache\",\n                                    \"threshold\": 300.0,\n                                    \"time_period_seconds\": 0,\n                                    \"value\": 455.0\n                                }\n                            ],\n                            \"host_address\": \"10.212.22.125\",\n                            \"node_id\": \"RtStKpfBSkqN1U8nkvDxSw\"\n                        }\n                    ],\n                    \"number_of_nodes\": 2,\n                    \"number_of_unhealthy_nodes\": 1\n                }\n            ],\n            \"rca_name\": \"ShardRequestCacheClusterRca\",\n            \"state\": \"unhealthy\",\n            \"timestamp\": 1596247532956\n        }\n    ]\n}\n\nTests: Unit Tests and Dev Stack Testing\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-08-01T02:48:47Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/330", "merged": true, "mergeCommit": {"oid": "3ea27bd2a92aa951a066a15f826937be4be87184"}, "closed": true, "closedAt": "2020-08-03T21:28:26Z", "author": {"login": "khushbr"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5iPYIAH2gAyNDYwNzE5NDYwOjViY2NmYzA2NDEzNTY1NDBkNWYxZTYzYWVkNzYxNTE0ZTM2ZDViYTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7Y36AAH2gAyNDYwNzE5NDYwOjU3ZWVmYTU0MjYzMDkxZDRkYTAwOWEzM2UyNWZhOWViMWZmOWMzNjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5bccfc0641356540d5f1e63aed761514e36d5ba7", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/5bccfc0641356540d5f1e63aed761514e36d5ba7", "committedDate": "2020-07-29T03:13:20Z", "message": "Adding FieldDataCacheRCA to ElasticSearchAnalysisGraph"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "039a843da894f2bfd6fd5f3564b153f51e254200", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/039a843da894f2bfd6fd5f3564b153f51e254200", "committedDate": "2020-07-29T03:14:37Z", "message": "Squashed commit of the following:\n\ncommit d61da520ef806b34b5f27506a9b517862ea57566\nAuthor: Joydeep Sinha <49728262+yojs@users.noreply.github.com>\nDate:   Tue Jul 28 18:46:08 2020 -0700\n\n    Grpc server can run on different ports on different nodes of the cluster (#310)\n\n    * Introducing grpcPort in the InstanceDetail and NodeDetail\n\n    * Addressing PR comments\n\n    * Fixing SpotBug errors\n\n    * adding some tests to increase coverage\n\n    * Adding a new test targetting multiple NetServers\n\n    * rebased with latest master and added a test that talks to grpc server on a different port"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dd56fc84016b09dbeecdec4079b8590d806941a", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/0dd56fc84016b09dbeecdec4079b8590d806941a", "committedDate": "2020-07-29T05:12:18Z", "message": "Fixing the UTs post the Config Cache Change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "409708432270391cc23fe8ac44a2d5541d008e65", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/409708432270391cc23fe8ac44a2d5541d008e65", "committedDate": "2020-07-31T08:12:31Z", "message": "Fixing the bugs in Cache RCA and adding the RCAs to Analysis Graph"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0344bf5f48b1d5f2fcfc54219219197557ed2de6", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/0344bf5f48b1d5f2fcfc54219219197557ed2de6", "committedDate": "2020-07-31T08:14:50Z", "message": "Merging the changes from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bd1558ffd811bf32bda3b1d9ba87ad005b37eeb", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2bd1558ffd811bf32bda3b1d9ba87ad005b37eeb", "committedDate": "2020-07-31T08:24:06Z", "message": "Fixing merge failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68dfbd34b8a94871cbd5f1ba55ecd50b0c29f52f", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/68dfbd34b8a94871cbd5f1ba55ecd50b0c29f52f", "committedDate": "2020-08-01T02:24:06Z", "message": "Enabling the Cache RCAs to be queryable via RCA APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28fb5a265ba83e61b2d57a5e048e4e4e16823c0a", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/28fb5a265ba83e61b2d57a5e048e4e4e16823c0a", "committedDate": "2020-08-01T02:30:12Z", "message": "Merge branch 'master' into khushbr-cache-rca"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19e1e06072b73b682464350bac73b42f59d1165e", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/19e1e06072b73b682464350bac73b42f59d1165e", "committedDate": "2020-08-01T02:44:29Z", "message": "Undoing one of the merge Test change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTcxNzM4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/330#pullrequestreview-460171738", "createdAt": "2020-08-03T16:33:29Z", "commit": {"oid": "19e1e06072b73b682464350bac73b42f59d1165e"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozMzozMFrOG7AcKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozODoxMFrOG7AmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyNjM3OQ==", "bodyText": "Can any of these Record values be NaN?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/330#discussion_r464526379", "createdAt": "2020-08-03T16:33:30Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/cache/CacheUtil.java", "diffHunk": "@@ -15,44 +15,64 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cache;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+import org.jooq.Result;\n \n public class CacheUtil {\n     private static final Logger LOG = LogManager.getLogger(CacheUtil.class);\n \n     public static Double getTotalSizeInKB(final Metric cacheSizeGroupByOperation) {\n-        double sizeTotalInKB = 0;\n+        double totalSizeInKB = 0;\n \n         if (cacheSizeGroupByOperation.getFlowUnits().size() > 0) {\n             // we expect the Metric to have single flow unit since it is consumed locally\n             MetricFlowUnit flowUnit = cacheSizeGroupByOperation.getFlowUnits().get(0);\n             if (flowUnit.isEmpty() || flowUnit.getData() == null) {\n-                return sizeTotalInKB;\n+                return totalSizeInKB;\n             }\n \n-            // since the flow unit data is aggregated, we should have a single value\n+            // since the flow unit data is aggregated by index, summing the size across indices\n             if (flowUnit.getData().size() > 0) {\n-                double size = flowUnit.getData().get(0).getValue(MetricsDB.SUM, Double.class);\n-                if (Double.isNaN(size)) {\n-                    LOG.error(\"Failed to parse metric in FlowUnit from {}\", cacheSizeGroupByOperation.getClass().getName());\n-                } else {\n-                    sizeTotalInKB += size / 1024.0;\n-                }\n+                Result<Record> records = flowUnit.getData();\n+                double size = records.stream().mapToDouble(\n+                        record -> record.getValue(MetricsDB.SUM, Double.class)).sum();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e1e06072b73b682464350bac73b42f59d1165e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyNzYzOQ==", "bodyText": "Can we throw an exception here instead? I try to avoid overloading return values with error codes in java. Off the top of my head, if cache size ever is less than 1KB, we cannot distinguish between that and error values.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/330#discussion_r464527639", "createdAt": "2020-08-03T16:35:51Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/cache/CacheUtil.java", "diffHunk": "@@ -15,44 +15,64 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cache;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+import org.jooq.Result;\n \n public class CacheUtil {\n     private static final Logger LOG = LogManager.getLogger(CacheUtil.class);\n \n     public static Double getTotalSizeInKB(final Metric cacheSizeGroupByOperation) {\n-        double sizeTotalInKB = 0;\n+        double totalSizeInKB = 0;\n \n         if (cacheSizeGroupByOperation.getFlowUnits().size() > 0) {\n             // we expect the Metric to have single flow unit since it is consumed locally\n             MetricFlowUnit flowUnit = cacheSizeGroupByOperation.getFlowUnits().get(0);\n             if (flowUnit.isEmpty() || flowUnit.getData() == null) {\n-                return sizeTotalInKB;\n+                return totalSizeInKB;\n             }\n \n-            // since the flow unit data is aggregated, we should have a single value\n+            // since the flow unit data is aggregated by index, summing the size across indices\n             if (flowUnit.getData().size() > 0) {\n-                double size = flowUnit.getData().get(0).getValue(MetricsDB.SUM, Double.class);\n-                if (Double.isNaN(size)) {\n-                    LOG.error(\"Failed to parse metric in FlowUnit from {}\", cacheSizeGroupByOperation.getClass().getName());\n-                } else {\n-                    sizeTotalInKB += size / 1024.0;\n-                }\n+                Result<Record> records = flowUnit.getData();\n+                double size = records.stream().mapToDouble(\n+                        record -> record.getValue(MetricsDB.SUM, Double.class)).sum();\n+                totalSizeInKB += getSizeInKB(size);\n             }\n         }\n-        return sizeTotalInKB;\n+        return totalSizeInKB;\n+    }\n+\n+    public static Double getSizeInKB(double sizeinBytes) {\n+        double sizeInKB = 0;\n+        if (Double.isNaN(sizeinBytes)) {\n+            LOG.error(\"getSizeInKB called with NaN value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e1e06072b73b682464350bac73b42f59d1165e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyODk2OQ==", "bodyText": "Again, why don't we just throw the exception and let callers handle it their way. If we want to prevent it from breaking code, we should throw a checked exception here.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/330#discussion_r464528969", "createdAt": "2020-08-03T16:38:10Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/cache/CacheUtil.java", "diffHunk": "@@ -15,44 +15,64 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cache;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+import org.jooq.Result;\n \n public class CacheUtil {\n     private static final Logger LOG = LogManager.getLogger(CacheUtil.class);\n \n     public static Double getTotalSizeInKB(final Metric cacheSizeGroupByOperation) {\n-        double sizeTotalInKB = 0;\n+        double totalSizeInKB = 0;\n \n         if (cacheSizeGroupByOperation.getFlowUnits().size() > 0) {\n             // we expect the Metric to have single flow unit since it is consumed locally\n             MetricFlowUnit flowUnit = cacheSizeGroupByOperation.getFlowUnits().get(0);\n             if (flowUnit.isEmpty() || flowUnit.getData() == null) {\n-                return sizeTotalInKB;\n+                return totalSizeInKB;\n             }\n \n-            // since the flow unit data is aggregated, we should have a single value\n+            // since the flow unit data is aggregated by index, summing the size across indices\n             if (flowUnit.getData().size() > 0) {\n-                double size = flowUnit.getData().get(0).getValue(MetricsDB.SUM, Double.class);\n-                if (Double.isNaN(size)) {\n-                    LOG.error(\"Failed to parse metric in FlowUnit from {}\", cacheSizeGroupByOperation.getClass().getName());\n-                } else {\n-                    sizeTotalInKB += size / 1024.0;\n-                }\n+                Result<Record> records = flowUnit.getData();\n+                double size = records.stream().mapToDouble(\n+                        record -> record.getValue(MetricsDB.SUM, Double.class)).sum();\n+                totalSizeInKB += getSizeInKB(size);\n             }\n         }\n-        return sizeTotalInKB;\n+        return totalSizeInKB;\n+    }\n+\n+    public static Double getSizeInKB(double sizeinBytes) {\n+        double sizeInKB = 0;\n+        if (Double.isNaN(sizeinBytes)) {\n+            LOG.error(\"getSizeInKB called with NaN value\");\n+        } else {\n+            sizeInKB = sizeinBytes / 1024.0;\n+        }\n+        return sizeInKB;\n+    }\n+\n+    public static double getCacheMaxSize(AppContext appContext, NodeKey esNode, Resource cacheResource) {\n+        try {\n+            return appContext.getNodeConfigCache().get(esNode, cacheResource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e1e06072b73b682464350bac73b42f59d1165e"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjM2NTYy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/330#pullrequestreview-460236562", "createdAt": "2020-08-03T18:07:17Z", "commit": {"oid": "19e1e06072b73b682464350bac73b42f59d1165e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowNzoxOFrOG7DnJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODowNzoxOFrOG7DnJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3ODM0MA==", "bodyText": "shardRequestCacheNodeRca needs to be connected to shardRequestCacheEvictions leaf node as well right?\nArrays.asList(All the metrics this node is consuming)?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/330#discussion_r464578340", "createdAt": "2020-08-03T18:07:18Z", "author": {"login": "sruti1312"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -203,6 +212,58 @@ public void construct() {\n     nodeConfigClusterCollector.addAllUpstreams(Collections.singletonList(nodeConfigCollector));\n     nodeConfigClusterCollector.addTag(TAG_AGGREGATE_UPSTREAM, LOCUS_DATA_NODE);\n \n+    // Field Data Cache RCA\n+    Metric fieldDataCacheEvictions = new Cache_FieldData_Eviction(EVALUATION_INTERVAL_SECONDS);\n+    fieldDataCacheEvictions.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    addLeaf(fieldDataCacheEvictions);\n+\n+    Metric fieldDataCacheSizeGroupByOperation = new AggregateMetric(EVALUATION_INTERVAL_SECONDS,\n+            Cache_FieldData_Size.NAME,\n+            AggregateFunction.SUM,\n+            MetricsDB.MAX, ShardStatsDerivedDimension.INDEX_NAME.toString());\n+    fieldDataCacheSizeGroupByOperation.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    addLeaf(fieldDataCacheSizeGroupByOperation);\n+\n+    FieldDataCacheRca fieldDataCacheNodeRca = new FieldDataCacheRca(RCA_PERIOD,\n+            fieldDataCacheEvictions,\n+            fieldDataCacheSizeGroupByOperation);\n+    fieldDataCacheNodeRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    fieldDataCacheNodeRca.addAllUpstreams(Collections.singletonList(fieldDataCacheEvictions));\n+\n+    FieldDataCacheClusterRca fieldDataCacheClusterRca = new FieldDataCacheClusterRca(RCA_PERIOD, fieldDataCacheNodeRca);\n+    fieldDataCacheClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n+    fieldDataCacheClusterRca.addAllUpstreams(Collections.singletonList(fieldDataCacheNodeRca));\n+    fieldDataCacheClusterRca.addTag(TAG_AGGREGATE_UPSTREAM, LOCUS_DATA_NODE);\n+\n+    // Shard Request Cache RCA\n+    Metric shardRequestCacheEvictions = new Cache_Request_Eviction(EVALUATION_INTERVAL_SECONDS);\n+    shardRequestCacheEvictions.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    addLeaf(shardRequestCacheEvictions);\n+    Metric shardRequestHits = new Cache_Request_Hit(EVALUATION_INTERVAL_SECONDS);\n+    shardRequestHits.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    addLeaf(shardRequestHits);\n+\n+    Metric shardRequestCacheSizeGroupByOperation = new AggregateMetric(EVALUATION_INTERVAL_SECONDS,\n+            Cache_Request_Size.NAME,\n+            AggregateFunction.SUM,\n+            MetricsDB.MAX, ShardStatsDerivedDimension.INDEX_NAME.toString());\n+    shardRequestCacheSizeGroupByOperation.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    addLeaf(shardRequestCacheSizeGroupByOperation);\n+\n+    ShardRequestCacheRca shardRequestCacheNodeRca = new ShardRequestCacheRca(RCA_PERIOD,\n+            shardRequestCacheEvictions,\n+            shardRequestHits,\n+            shardRequestCacheSizeGroupByOperation);\n+    shardRequestCacheNodeRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    shardRequestCacheNodeRca.addAllUpstreams(Collections.singletonList(shardRequestHits));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e1e06072b73b682464350bac73b42f59d1165e"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57eefa54263091d4da009a33e25fa9eb1ff9c362", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/57eefa54263091d4da009a33e25fa9eb1ff9c362", "committedDate": "2020-08-03T21:26:24Z", "message": "Addressing the PR comments:"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 851, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}