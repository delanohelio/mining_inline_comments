{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTczMjMx", "number": 272, "title": "Implement cool off handling for the Publisher", "bodyText": "Issue #, if available: N/A\nDescription of changes:\nThe Publisher shouldn't spam the same action over and over again. It\nshould wait for a specified period of time before repeating an action.\nThis commit implements this logic.\nTests: PublisherTest\nCode coverage percentage for this patch: See CodeCov Report\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-07-14T00:24:03Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272", "merged": true, "mergeCommit": {"oid": "dbd867556b0728a062234a4b5f610729b9adda06"}, "closed": true, "closedAt": "2020-07-21T17:32:48Z", "author": {"login": "sidheart"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0qx-0gH2gAyNDQ4NTczMjMxOmE4ZjE3ZjJmZGJjYmIwODk4ZDE5NWNkMGZkNDYyYzhhYjhhZjk3OWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3Jn3CAH2gAyNDQ4NTczMjMxOjRmZjhjOWU2YzMzN2FiYTc0NjhmOTViOGViYjYyNzkwNzg2MzI2YWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a8f17f2fdbcbb0898d195cd0fd462c8ab8af979d", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a8f17f2fdbcbb0898d195cd0fd462c8ab8af979d", "committedDate": "2020-07-14T00:20:45Z", "message": "Implement cool off handling for the Publisher\n\nThe Publisher shouldn't spam the same action over and over again. It\nshould wait for a specified period of time before repeating an action.\n\nThis commit implements this logic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0bbc397acadee3e8605a426d131a4493be7bbd3", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f0bbc397acadee3e8605a426d131a4493be7bbd3", "committedDate": "2020-07-14T00:34:53Z", "message": "Fixup Javadoc styling for Publisher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Nzg3NDYy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#pullrequestreview-447787462", "createdAt": "2020-07-14T05:01:47Z", "commit": {"oid": "f0bbc397acadee3e8605a426d131a4493be7bbd3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNTowMTo0N1rOGxELgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNToxOTozNFrOGxEhcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwMTg5MQ==", "bodyText": "Do you want milliseconds or microseconds?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#discussion_r454101891", "createdAt": "2020-07-14T05:01:47Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -30,7 +30,7 @@\n public class ModifyQueueCapacityAction implements Action {\n \n   public static final String NAME = \"modify_queue_capacity\";\n-  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+  public static final long COOL_OFF_PERIOD_IN_MILLIS = 300 * 1_000_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0bbc397acadee3e8605a426d131a4493be7bbd3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwMzYyMw==", "bodyText": "Minor: Let's add a debug log around time remaining for cool-off to complete.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#discussion_r454103623", "createdAt": "2020-07-14T05:06:50Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -18,33 +18,59 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Publisher extends NonLeafNode<EmptyFlowUnit> {\n \n   private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+  private final long initTime;\n \n   private Collator collator;\n   private boolean isMuted = false;\n+  private Map<String, Long> actionToExecutionTime;\n \n   public Publisher(int evalIntervalSeconds, Collator collator) {\n     super(0, evalIntervalSeconds);\n     this.collator = collator;\n+    this.actionToExecutionTime = new ConcurrentHashMap<>();\n+    initTime = Instant.now().toEpochMilli();\n+  }\n+\n+  /**\n+   * Returns true if a given {@link Action}'s last execution time was > {@link Action#coolOffPeriodInMillis()} ago\n+   *\n+   * <p>If this Publisher has never executed the action, the last execution time is defined as the time that the publisher\n+   * object was constructed.\n+   *\n+   * @param action The {@link Action} to test\n+   * @return true if a given {@link Action}'s last execution time was > {@link Action#coolOffPeriodInMillis()} ago\n+   */\n+  public boolean isCooledOff(Action action) {\n+    long lastExecution = actionToExecutionTime.getOrDefault(action.name(), initTime);\n+    long now = Instant.now().toEpochMilli();\n+    return now - lastExecution > action.coolOffPeriodInMillis();\n   }\n \n   @Override\n   public EmptyFlowUnit operate() {\n-    // TODO: Pass through implementation, need to add dampening, cool-off, action flip-flop\n+    // TODO: Pass through implementation, need to add dampening, action flip-flop\n     // avoidance, state persistence etc.\n-\n     Decision decision = collator.getFlowUnits().get(0);\n     for (Action action : decision.getActions()) {\n-      LOG.info(\"Executing action: [{}]\", action.name());\n-      action.execute();\n+      if (isCooledOff(action)) { // Only execute actions which have passed their cool off period\n+        LOG.info(\"Executing action: [{}]\", action.name());\n+        action.execute();\n+        actionToExecutionTime.put(action.name(), Instant.now().toEpochMilli());\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0bbc397acadee3e8605a426d131a4493be7bbd3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzAyNw==", "bodyText": "In its current form, the test requires (human) readers to keep a track of expectedExecutions and notice when it is not incremented, which makes impacts readability.\nWhile it is functionally correct, please consider using reset on the mock object and explicitly calling expected number of counts for each invocation verification e.g.\nMockito.verify(action, Mockito.times(0)).execute();\n...\nMockito.reset(action);\n...\nMockito.verify(action, Mockito.times(1)).execute();", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#discussion_r454107027", "createdAt": "2020-07-14T05:18:07Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/PublisherTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+\n+import com.google.common.collect.Lists;\n+\n+import java.time.Instant;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+public class PublisherTest {\n+    private static final int EVAL_INTERVAL_S = 5;\n+    private static Publisher publisher;\n+\n+    // Mock objects\n+    @Mock\n+    private Collator collator;\n+\n+    @Mock\n+    private Decision decision;\n+\n+    @Mock\n+    private Action action;\n+\n+    private static class TestDecider extends Decider {\n+        public TestDecider(long evalIntervalSeconds, int decisionFrequency) {\n+            super(evalIntervalSeconds, decisionFrequency);\n+        }\n+\n+        @Override\n+        public String name() {\n+            return getClass().getSimpleName();\n+        }\n+\n+        @Override\n+        public Decision operate() {\n+            return null;\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+    }\n+\n+    @Before\n+    public void setup() {\n+        MockitoAnnotations.initMocks(this);\n+        publisher = new Publisher(EVAL_INTERVAL_S, collator);\n+    }\n+\n+    @Test\n+    public void testIsCooledOff() throws Exception {\n+        int expectedExecutions = 0;\n+        List<Decision> decisionList = Lists.newArrayList(decision);\n+        Mockito.when(collator.getFlowUnits()).thenReturn(decisionList);\n+        Mockito.when(decision.getActions()).thenReturn(Lists.newArrayList(action));\n+        Mockito.when(action.name()).thenReturn(\"testIsCooledOffAction\");\n+        Mockito.when(action.coolOffPeriodInMillis()).thenReturn(100_000L);\n+        // Verify that a newly initialized publisher doesn't execute an action until the publisher object\n+        // has been alive for longer than the action's cool off period\n+        publisher.operate();\n+        Mockito.verify(action, Mockito.times(expectedExecutions)).execute();\n+        Mockito.when(action.coolOffPeriodInMillis()).thenReturn(Instant.now().toEpochMilli()\n+                - publisher.getInitTime() - 1000L);\n+        publisher.operate();\n+        expectedExecutions++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0bbc397acadee3e8605a426d131a4493be7bbd3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEwNzUwNg==", "bodyText": "Do we need a concurrent hash map here? Isn't it a single thread being scheduled to call it every 5 seconds?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#discussion_r454107506", "createdAt": "2020-07-14T05:19:34Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -18,33 +18,59 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Publisher extends NonLeafNode<EmptyFlowUnit> {\n \n   private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+  private final long initTime;\n \n   private Collator collator;\n   private boolean isMuted = false;\n+  private Map<String, Long> actionToExecutionTime;\n \n   public Publisher(int evalIntervalSeconds, Collator collator) {\n     super(0, evalIntervalSeconds);\n     this.collator = collator;\n+    this.actionToExecutionTime = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0bbc397acadee3e8605a426d131a4493be7bbd3"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/855611f64ba9df4ef7dda207e5fc24ecb72f4778", "committedDate": "2020-07-14T09:14:20Z", "message": "Address PR comments for Publisher cool off"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzI1MTcx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#pullrequestreview-448325171", "createdAt": "2020-07-14T17:41:03Z", "commit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzU2ODE0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#pullrequestreview-448356814", "createdAt": "2020-07-14T18:24:30Z", "commit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODoyNDozMFrOGxf7aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODoyNDozMFrOGxf7aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NjUyMA==", "bodyText": "can we set this in rca.conf and make this configurable", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#discussion_r454556520", "createdAt": "2020-07-14T18:24:30Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -30,7 +30,7 @@\n public class ModifyQueueCapacityAction implements Action {\n \n   public static final String NAME = \"modify_queue_capacity\";\n-  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+  public static final long COOL_OFF_PERIOD_IN_MILLIS = 300 * 1_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzU3NTQ5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#pullrequestreview-448357549", "createdAt": "2020-07-14T18:25:32Z", "commit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODoyNTozMlrOGxf9ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODoyNTozMlrOGxf9ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1NzA4Ng==", "bodyText": "any specific reason to replace system with Instant.now() ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#discussion_r454557086", "createdAt": "2020-07-14T18:25:32Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -18,33 +18,65 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Publisher extends NonLeafNode<EmptyFlowUnit> {\n \n   private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+  private final long initTime;\n \n   private Collator collator;\n   private boolean isMuted = false;\n+  private Map<String, Long> actionToExecutionTime;\n \n   public Publisher(int evalIntervalSeconds, Collator collator) {\n     super(0, evalIntervalSeconds);\n     this.collator = collator;\n+    this.actionToExecutionTime = new HashMap<>();\n+    initTime = Instant.now().toEpochMilli();\n+  }\n+\n+  /**\n+   * Returns true if a given {@link Action}'s last execution time was >= {@link Action#coolOffPeriodInMillis()} ago\n+   *\n+   * <p>If this Publisher has never executed the action, the last execution time is defined as the time that the publisher\n+   * object was constructed.\n+   *\n+   * @param action The {@link Action} to test\n+   * @return true if a given {@link Action}'s last execution time was >= {@link Action#coolOffPeriodInMillis()} ago\n+   */\n+  public boolean isCooledOff(Action action) {\n+    long lastExecution = actionToExecutionTime.getOrDefault(action.name(), initTime);\n+    long elapsed = Instant.now().toEpochMilli() - lastExecution;\n+    if (elapsed >= action.coolOffPeriodInMillis()) {\n+      return true;\n+    } else {\n+      LOG.debug(\"Action {} still has {} ms left in its cool off period\", action.name(),\n+              action.coolOffPeriodInMillis() - elapsed);\n+      return false;\n+    }\n   }\n \n   @Override\n   public EmptyFlowUnit operate() {\n-    // TODO: Pass through implementation, need to add dampening, cool-off, action flip-flop\n+    // TODO: Pass through implementation, need to add dampening, action flip-flop\n     // avoidance, state persistence etc.\n-\n     Decision decision = collator.getFlowUnits().get(0);\n     for (Action action : decision.getActions()) {\n-      LOG.info(\"Executing action: [{}]\", action.name());\n-      action.execute();\n+      if (isCooledOff(action)) { // Only execute actions which have passed their cool off period\n+        LOG.info(\"Executing action: [{}]\", action.name());\n+        action.execute();\n+        actionToExecutionTime.put(action.name(), Instant.now().toEpochMilli());\n+      }\n     }\n \n-    return new EmptyFlowUnit(System.currentTimeMillis());\n+    return new EmptyFlowUnit(Instant.now().toEpochMilli());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzU4NDQz", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#pullrequestreview-448358443", "createdAt": "2020-07-14T18:26:43Z", "commit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODoyNjo0M1rOGxgARA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODoyNjo0M1rOGxgARA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1Nzc2NA==", "bodyText": "Can we use Action itself as the key ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#discussion_r454557764", "createdAt": "2020-07-14T18:26:43Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -18,33 +18,65 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Publisher extends NonLeafNode<EmptyFlowUnit> {\n \n   private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+  private final long initTime;\n \n   private Collator collator;\n   private boolean isMuted = false;\n+  private Map<String, Long> actionToExecutionTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzYxODkx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#pullrequestreview-448361891", "createdAt": "2020-07-14T18:31:29Z", "commit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMToyOVrOGxgLOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMToyOVrOGxgLOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MDU3MA==", "bodyText": "Let's keep the logging format consistent within RCA package. Let's add the \"Publisher: \" at the front of this log", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#discussion_r454560570", "createdAt": "2020-07-14T18:31:29Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -18,33 +18,65 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Publisher extends NonLeafNode<EmptyFlowUnit> {\n \n   private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+  private final long initTime;\n \n   private Collator collator;\n   private boolean isMuted = false;\n+  private Map<String, Long> actionToExecutionTime;\n \n   public Publisher(int evalIntervalSeconds, Collator collator) {\n     super(0, evalIntervalSeconds);\n     this.collator = collator;\n+    this.actionToExecutionTime = new HashMap<>();\n+    initTime = Instant.now().toEpochMilli();\n+  }\n+\n+  /**\n+   * Returns true if a given {@link Action}'s last execution time was >= {@link Action#coolOffPeriodInMillis()} ago\n+   *\n+   * <p>If this Publisher has never executed the action, the last execution time is defined as the time that the publisher\n+   * object was constructed.\n+   *\n+   * @param action The {@link Action} to test\n+   * @return true if a given {@link Action}'s last execution time was >= {@link Action#coolOffPeriodInMillis()} ago\n+   */\n+  public boolean isCooledOff(Action action) {\n+    long lastExecution = actionToExecutionTime.getOrDefault(action.name(), initTime);\n+    long elapsed = Instant.now().toEpochMilli() - lastExecution;\n+    if (elapsed >= action.coolOffPeriodInMillis()) {\n+      return true;\n+    } else {\n+      LOG.debug(\"Action {} still has {} ms left in its cool off period\", action.name(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzYyMDE5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#pullrequestreview-448362019", "createdAt": "2020-07-14T18:31:39Z", "commit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMTo0MFrOGxgLsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozMTo0MFrOGxgLsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2MDY5MQ==", "bodyText": "same as above", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#discussion_r454560691", "createdAt": "2020-07-14T18:31:40Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -18,33 +18,65 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+\n+import java.time.Instant;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n public class Publisher extends NonLeafNode<EmptyFlowUnit> {\n \n   private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+  private final long initTime;\n \n   private Collator collator;\n   private boolean isMuted = false;\n+  private Map<String, Long> actionToExecutionTime;\n \n   public Publisher(int evalIntervalSeconds, Collator collator) {\n     super(0, evalIntervalSeconds);\n     this.collator = collator;\n+    this.actionToExecutionTime = new HashMap<>();\n+    initTime = Instant.now().toEpochMilli();\n+  }\n+\n+  /**\n+   * Returns true if a given {@link Action}'s last execution time was >= {@link Action#coolOffPeriodInMillis()} ago\n+   *\n+   * <p>If this Publisher has never executed the action, the last execution time is defined as the time that the publisher\n+   * object was constructed.\n+   *\n+   * @param action The {@link Action} to test\n+   * @return true if a given {@link Action}'s last execution time was >= {@link Action#coolOffPeriodInMillis()} ago\n+   */\n+  public boolean isCooledOff(Action action) {\n+    long lastExecution = actionToExecutionTime.getOrDefault(action.name(), initTime);\n+    long elapsed = Instant.now().toEpochMilli() - lastExecution;\n+    if (elapsed >= action.coolOffPeriodInMillis()) {\n+      return true;\n+    } else {\n+      LOG.debug(\"Action {} still has {} ms left in its cool off period\", action.name(),\n+              action.coolOffPeriodInMillis() - elapsed);\n+      return false;\n+    }\n   }\n \n   @Override\n   public EmptyFlowUnit operate() {\n-    // TODO: Pass through implementation, need to add dampening, cool-off, action flip-flop\n+    // TODO: Pass through implementation, need to add dampening, action flip-flop\n     // avoidance, state persistence etc.\n-\n     Decision decision = collator.getFlowUnits().get(0);\n     for (Action action : decision.getActions()) {\n-      LOG.info(\"Executing action: [{}]\", action.name());\n-      action.execute();\n+      if (isCooledOff(action)) { // Only execute actions which have passed their cool off period\n+        LOG.info(\"Executing action: [{}]\", action.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzY0ODI3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#pullrequestreview-448364827", "createdAt": "2020-07-14T18:35:40Z", "commit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozNTo0MVrOGxgUig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODozNTo0MVrOGxgUig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2Mjk1NA==", "bodyText": "remove this line ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#discussion_r454562954", "createdAt": "2020-07-14T18:35:41Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -18,33 +18,65 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "855611f64ba9df4ef7dda207e5fc24ecb72f4778"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f13f105c82b03f108507d97eaf1c4013b4f4a9ed", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f13f105c82b03f108507d97eaf1c4013b4f4a9ed", "committedDate": "2020-07-17T18:00:40Z", "message": "Respond to PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzMwMzA3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/272#pullrequestreview-451730307", "createdAt": "2020-07-20T15:42:41Z", "commit": {"oid": "f13f105c82b03f108507d97eaf1c4013b4f4a9ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ff8c9e6c337aba7468f95b8ebb62790786326aa", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4ff8c9e6c337aba7468f95b8ebb62790786326aa", "committedDate": "2020-07-21T17:24:36Z", "message": "Merge branch 'master' into publisher-cooloff"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1073, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}