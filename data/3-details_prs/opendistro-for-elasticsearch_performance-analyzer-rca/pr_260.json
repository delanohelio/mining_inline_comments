{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjk0MzQ2", "number": 260, "title": "Decision Maker Skeleton", "bodyText": "Issue #, if available: -N/A-\nDescription of changes: This PR defines the basic skeleton for the decision maker framework - a set of nodes that analyze RCA node observation data and create remediation action suggestions. Contains interfaces and base classes, along with simple pass-through implementations and analysis graph connections.\nComponents created:\n\nDecider: Analysis data from multiple RCA nodes and creates a Decision, which is a set of candidate actions.\nDecision: A set of remediation actions.\nAction: Encapsulates a remediation operation along with the nodes it should be run against, and other execution parameters.\nCollator: Subscribes to all deciders. Collates decisions from different deciders into a final set of decisions that are aligned in their impact on key resources. Prefers stability over performance.\nPublisher: Applies appropriate damping functions on actions suggestions and executes them.\n\nTests: Added unit tests. For skeleton (pass-through) classes, tests will be added when they are properly implemented.\nCode coverage percentage for this patch:\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-06-29T08:51:20Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260", "merged": true, "mergeCommit": {"oid": "46f8c15175ff660b2810839e8083c78bdd190656"}, "closed": true, "closedAt": "2020-07-07T08:47:50Z", "author": {"login": "vigyasharma"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwYkWEAFqTQ0MDIwNzgyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyZUNoAFqTQ0MzQyMTA1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjA3ODI0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-440207824", "createdAt": "2020-06-30T16:51:52Z", "commit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo1MTo1MlrOGrFoYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo1MTo1MlrOGrFoYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNDIwOA==", "bodyText": "should we rename this enum to something like \"ResourceVector\" ? we already have a Resource class defined in protobuf", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r447834208", "createdAt": "2020-06-30T16:51:52Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+    public enum Resource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjA5NTM5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-440209539", "createdAt": "2020-06-30T16:53:57Z", "commit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo1Mzo1N1rOGrFtrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo1Mzo1N1rOGrFtrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNTU2Ng==", "bodyText": "rename this variable to \"COOL_OFF_PERIOD_IN_SECOND\" ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r447835566", "createdAt": "2020-06-30T16:53:57Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Resource.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Resource.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Resource.NETWORK;\n+\n+public class QueueCapacity implements Action {\n+\n+    public static final String NAME = \"queue_capacity\";\n+    public static final int COOL_OFF_PERIOD = 300;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjE2OTIw", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-440216920", "createdAt": "2020-06-30T17:02:52Z", "commit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMjo1MlrOGrGElQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMjo1MlrOGrGElQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MTQyOQ==", "bodyText": "is there any specific reason to override this method ? The default implementation is to return getClass().getSimpleName() which will return \"QueueHealthDecider\" if called from this class.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r447841429", "createdAt": "2020-06-30T17:02:52Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// This is a sample decider implementation to finalize decision maker interfaces.\n+// TODO: 1. Get threadpool type from HotNodeSummary or HotResourceSummary\n+// TODO: 2. Read action priorities from a configurable yml\n+// TODO: 3. Read current queue capacity from NodeConfigurationRca (PR #252)\n+// TODO: 4. Add unit tests\n+\n+public class QueueHealthDecider extends Decider {\n+\n+    public static String NAME = \"queue_health\";\n+\n+    private QueueRejectionClusterRca queueRejectionRca;\n+    List<String> actionsByUserPriority = new ArrayList<>();\n+    private int counter = 0;\n+\n+    public QueueHealthDecider(long evalIntervalSeconds, int decisionFrequency, QueueRejectionClusterRca queueRejectionClusterRca) {\n+        // TODO: Also consume NodeConfigurationRca\n+        super(evalIntervalSeconds, decisionFrequency);\n+        this.queueRejectionRca = queueRejectionClusterRca;\n+        configureActionPriority();\n+    }\n+\n+    @Override\n+    public String name() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjI2OTQ2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-440226946", "createdAt": "2020-06-30T17:15:41Z", "commit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxNTo0MVrOGrGlCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxNTo0MVrOGrGlCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0OTczOQ==", "bodyText": "maybe we can create a dedicated EmptyFlowUnit for the top level vertex in graph ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r447849739", "createdAt": "2020-06-30T17:15:41Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class Publisher extends NonLeafNode<GenericFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+\n+    private Collator collator;\n+    private boolean isMuted = false;\n+\n+    public Publisher(int evalIntervalSeconds, Collator collator) {\n+        super(0, evalIntervalSeconds);\n+        this.collator = collator;\n+    }\n+\n+    @Override\n+    public GenericFlowUnit operate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDk1ODI2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-441095826", "createdAt": "2020-07-01T18:14:55Z", "commit": {"oid": "95df5fae2b561ebc7c300292e32e200cc7b4af2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODoxNDo1NVrOGrwgog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODoxNDo1NVrOGrwgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzNjczOA==", "bodyText": "let's add the copyright header on top of each newly created file", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448536738", "createdAt": "2020-07-01T18:14:55Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/Action.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95df5fae2b561ebc7c300292e32e200cc7b4af2d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMDk3MDc0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-441097074", "createdAt": "2020-07-01T18:17:02Z", "commit": {"oid": "95df5fae2b561ebc7c300292e32e200cc7b4af2d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjgxNjQ4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-441281648", "createdAt": "2020-07-02T00:52:54Z", "commit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo1Mjo1NFrOGr51Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToxNzozMFrOGr6NhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4OTUwMg==", "bodyText": "maybe we can replace the word pressure with impact ?\nBut as the enum is already named Impact, we can just remove it altogether", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448689502", "createdAt": "2020-07-02T00:52:54Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+  public enum Dimension {\n+    HEAP,\n+    CPU,\n+    RAM,\n+    DISK,\n+    NETWORK\n+  }\n+\n+  public enum Impact {\n+    NO_IMPACT,\n+    INCREASES_PRESSURE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4OTg1MA==", "bodyText": "Maybe we can return an unmodifyable map ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448689850", "createdAt": "2020-07-02T00:54:31Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+  public enum Dimension {\n+    HEAP,\n+    CPU,\n+    RAM,\n+    DISK,\n+    NETWORK\n+  }\n+\n+  public enum Impact {\n+    NO_IMPACT,\n+    INCREASES_PRESSURE,\n+    DECREASES_PRESSURE\n+  }\n+\n+  private Map<Dimension, Impact> impactMap = new HashMap<>();\n+\n+  public ImpactVector() {\n+    for (Dimension d : Dimension.values()) {\n+      impactMap.put(d, Impact.NO_IMPACT);\n+    }\n+  }\n+\n+  public Map<Dimension, Impact> getImpact() {\n+    return impactMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MTA5Ng==", "bodyText": "Do you think Action should be something like ChangeQueueCapacity ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448691096", "createdAt": "2020-07-02T00:59:01Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MTYxMQ==", "bodyText": "Do we want to make it configurable ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448691611", "createdAt": "2020-07-02T01:00:49Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {\n+\n+  public static final String NAME = \"queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NDA2Mw==", "bodyText": "Is it true that increasing the queue capacity will increase the CPU load ? You mean for CPU bound processing of queue items ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448694063", "createdAt": "2020-07-02T01:10:42Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {\n+\n+  public static final String NAME = \"queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ThreadPoolEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ThreadPoolEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ThreadPoolEnum, Integer> upperBound = new HashMap<>();\n+\n+  public QueueCapacity(NodeKey esNode, ThreadPoolEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NTY4NQ==", "bodyText": "Should we add the unit to the variable name ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448695685", "createdAt": "2020-07-02T01:17:30Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Collator.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Collator collects and prunes the candidate decisions from each decider so that their impacts are\n+ * aligned\n+ *\n+ * <p>Decisions can increase or decrease pressure on different key resources on an Elasticearch\n+ * node. This is encapsulated in each Action via the {@link ImpactVector}. Since each decider\n+ * independently evaluates its decision, it is possible to have conflicting ImpactVectors from\n+ * actions across deciders.\n+ *\n+ * <p>The collator prunes them to ensure we only take actions that either increase, or decrease\n+ * pressure on a particular node. To resolve conflicts, we prefer stability over performance.\n+ */\n+public class Collator extends Decider {\n+\n+  public static final String NAME = \"collator\";\n+\n+  /* Deciders can choose to publish decisions at different frequencies based on the\n+   * type of resources monitored and rca signals. The collator should however, not introduce any\n+   * unnecessary delays. As soon as a decision is taken, it should be evaluated and published downstream.\n+   */\n+  private static final int collatorFrequency = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4802b2baaeb1eefad7a3223e2e01ba6f88a97325", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4802b2baaeb1eefad7a3223e2e01ba6f88a97325", "committedDate": "2020-07-04T00:57:33Z", "message": "Initial action template and queue capacity action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79cf74bc3ffce51a7e89c1b5dc43966f48833d46", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/79cf74bc3ffce51a7e89c1b5dc43966f48833d46", "committedDate": "2020-07-04T00:57:33Z", "message": "Add generic decider skeleton in base class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d50a47b215ceeee0e327b7a155639dbe20e57d", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/41d50a47b215ceeee0e327b7a155639dbe20e57d", "committedDate": "2020-07-04T00:57:33Z", "message": "WIP - Queue Health Decider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80cab81892aab9638ef71ef11f988d9a6f4191d7", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/80cab81892aab9638ef71ef11f988d9a6f4191d7", "committedDate": "2020-07-04T00:57:33Z", "message": "Added queue health decider. Tests pending"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "239dee69abe1cd527ab35765f6dc74022e6fc61b", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/239dee69abe1cd527ab35765f6dc74022e6fc61b", "committedDate": "2020-07-04T00:57:33Z", "message": "Add pass-through collator implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5143f4a0208f19b0207032d2821e104ee8c7d541", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/5143f4a0208f19b0207032d2821e104ee8c7d541", "committedDate": "2020-07-04T00:57:33Z", "message": "Add pass-through publisher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c7c4666a4f814d3e756d1a8298ef32df5e2ce21", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3c7c4666a4f814d3e756d1a8298ef32df5e2ce21", "committedDate": "2020-07-04T00:57:33Z", "message": "Apply code styling guide"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2015d6925d59862a8b1efdf16b26967722245474", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2015d6925d59862a8b1efdf16b26967722245474", "committedDate": "2020-07-04T00:57:33Z", "message": "Add UTs for actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6de90a2f217c275c30cec71cab4a5af522cb27ff", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6de90a2f217c275c30cec71cab4a5af522cb27ff", "committedDate": "2020-07-04T00:57:33Z", "message": "Added queue health decider tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e289abf5e9342e876bc925f0f06067f8f84d40d", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/0e289abf5e9342e876bc925f0f06067f8f84d40d", "committedDate": "2020-07-04T00:57:33Z", "message": "Add EmptyFlowUnit for Publisher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb0b05c6d486b30a8d11ca9e2297b80f6aab6dd5", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/bb0b05c6d486b30a8d11ca9e2297b80f6aab6dd5", "committedDate": "2020-07-04T00:57:33Z", "message": "Rename resource to dimension in ImpactVector"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf83e723fb70deba535f26f83035e7977f626009", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/bf83e723fb70deba535f26f83035e7977f626009", "committedDate": "2020-07-04T00:57:33Z", "message": "Rename cool off period variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd74a2c319b3bbc95b6e2735e9c99e53b161adf", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/9bd74a2c319b3bbc95b6e2735e9c99e53b161adf", "committedDate": "2020-07-04T00:57:33Z", "message": "Styling changes as per checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0865ba6158c86521fd382a2f11871d83b094b852", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/0865ba6158c86521fd382a2f11871d83b094b852", "committedDate": "2020-07-04T00:57:33Z", "message": "Fix spotbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87e519f80f6f158fd7d0751afcc0acda89aa7ffa", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/87e519f80f6f158fd7d0751afcc0acda89aa7ffa", "committedDate": "2020-07-04T00:57:33Z", "message": "Add license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68eecf82da34cecca9e5dc057a4c7d91d139d481", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/68eecf82da34cecca9e5dc057a4c7d91d139d481", "committedDate": "2020-07-04T00:58:11Z", "message": "Update as per new proto buf changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3d19fc4b5daf0f521aa968635bd19d2acba6b2f5", "committedDate": "2020-07-04T01:19:27Z", "message": "PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a1c54029ab75c2b9603186bb1c29610192ee361", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8a1c54029ab75c2b9603186bb1c29610192ee361", "committedDate": "2020-07-02T00:40:02Z", "message": "Update as per new proto buf changes"}, "afterCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3d19fc4b5daf0f521aa968635bd19d2acba6b2f5", "committedDate": "2020-07-04T01:19:27Z", "message": "PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTg1NTE4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-442585518", "createdAt": "2020-07-04T03:58:06Z", "commit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMzo1ODowNlrOGs5tGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMzo1ODowNlrOGs5tGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNTk2MQ==", "bodyText": "it may be ok for the first cut, but we may have to make this param configurable for different actions", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449735961", "createdAt": "2020-07-04T03:58:06Z", "author": {"login": "sendkb"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTg1NTQ0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-442585544", "createdAt": "2020-07-04T03:59:10Z", "commit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMzo1OToxMFrOGs5tKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMzo1OToxMFrOGs5tKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNTk3OA==", "bodyText": "nit: 'No Queue action to take'", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449735978", "createdAt": "2020-07-04T03:59:10Z", "author": {"login": "sendkb"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);\n+    } else if (desiredCapacity < currentCapacity) {\n+      impactVector.decreasesPressure(HEAP, CPU, NETWORK);\n+    }\n+    return Collections.singletonMap(esNode, impactVector);\n+  }\n+\n+  @Override\n+  public void execute() {\n+    // Making this a no-op for now\n+    // TODO: Modify based on downstream agent API calls\n+    assert true;\n+  }\n+\n+  @Override\n+  public String summary() {\n+    if (!isActionable()) {\n+      return \"No action to take\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTg1NjI1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-442585625", "createdAt": "2020-07-04T04:01:19Z", "commit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowMToxOVrOGs5twg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowMToxOVrOGs5twg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNjEzMA==", "bodyText": "nit: all license headers should have 2020 as the year", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449736130", "createdAt": "2020-07-04T04:01:19Z", "author": {"login": "sendkb"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/Action.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTg1Njky", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-442585692", "createdAt": "2020-07-04T04:02:53Z", "commit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowMjo1M1rOGs5uIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowMjo1M1rOGs5uIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNjIyNw==", "bodyText": "we only consider increase or decrease of queue resources here. Is it safe to assume that an obj will not be created at all if there is no change in values ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449736227", "createdAt": "2020-07-04T04:02:53Z", "author": {"login": "sendkb"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTg1ODc5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-442585879", "createdAt": "2020-07-04T04:07:59Z", "commit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowNzo1OVrOGs5vTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowNzo1OVrOGs5vTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNjUyNA==", "bodyText": "minor: the two lines can be simplified into a single one. Change it if you think the readability is not affected\nMath.min(Math.max(desiredCapacity, lowerBound.get(threadPool)), upperBound.get(threadPool))", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449736524", "createdAt": "2020-07-04T04:07:59Z", "author": {"login": "sendkb"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);\n+    } else if (desiredCapacity < currentCapacity) {\n+      impactVector.decreasesPressure(HEAP, CPU, NETWORK);\n+    }\n+    return Collections.singletonMap(esNode, impactVector);\n+  }\n+\n+  @Override\n+  public void execute() {\n+    // Making this a no-op for now\n+    // TODO: Modify based on downstream agent API calls\n+    assert true;\n+  }\n+\n+  @Override\n+  public String summary() {\n+    if (!isActionable()) {\n+      return \"No action to take\";\n+    }\n+    return String.format(\"Update [%s] queue capacity from [%d] to [%d] on node [%s]\",\n+        threadPool.toString(), currentCapacity, desiredCapacity, esNode.getNodeId());\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return summary();\n+  }\n+\n+  private void setBounds() {\n+    // This is intentionally not made static because different nodes can\n+    // have different bounds based on instance types\n+    // TODO: Move configuration values to rca.conf\n+\n+    // Write thread pool for bulk write requests\n+    this.lowerBound.put(ResourceEnum.WRITE_THREADPOOL, 100);\n+    this.upperBound.put(ResourceEnum.WRITE_THREADPOOL, 1000);\n+\n+    // Search thread pool\n+    this.lowerBound.put(ResourceEnum.SEARCH_THREADPOOL, 1000);\n+    this.upperBound.put(ResourceEnum.SEARCH_THREADPOOL, 3000);\n+  }\n+\n+  private void setDesiredCapacity(int desiredCapacity) {\n+    this.desiredCapacity = Math.min(desiredCapacity, upperBound.get(threadPool));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca", "author": {"user": {"login": "vigyasharma", "name": "Vigya Sharma"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/549b3f0906567ca92a2b9aff4237dbe9dc1693ca", "committedDate": "2020-07-06T05:34:36Z", "message": "Updated year in license header and addressed other minor comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjEwMzEy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-443210312", "createdAt": "2020-07-06T16:02:45Z", "commit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNDIxMDUy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#pullrequestreview-443421052", "createdAt": "2020-07-06T21:31:55Z", "commit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozMTo1NVrOGtnx1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo1MTo1MVrOGtpgmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5MDgzOA==", "bodyText": "Do we have a particular reason for not initializing this in the constructor ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450490838", "createdAt": "2020-07-06T21:31:55Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+  public enum Dimension {\n+    HEAP,\n+    CPU,\n+    RAM,\n+    DISK,\n+    NETWORK\n+  }\n+\n+  public enum Impact {\n+    NO_IMPACT,\n+    INCREASES_PRESSURE,\n+    DECREASES_PRESSURE\n+  }\n+\n+  private Map<Dimension, Impact> impactMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5Mjg4Ng==", "bodyText": "The size of this map is fixed, it will always hold values as the elements in the Dimension enum. Do we want to make it an array and access the impact of each dimension by the ordinal of the enum ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450492886", "createdAt": "2020-07-06T21:36:40Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+  public enum Dimension {\n+    HEAP,\n+    CPU,\n+    RAM,\n+    DISK,\n+    NETWORK\n+  }\n+\n+  public enum Impact {\n+    NO_IMPACT,\n+    INCREASES_PRESSURE,\n+    DECREASES_PRESSURE\n+  }\n+\n+  private Map<Dimension, Impact> impactMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMDYwNg==", "bodyText": "It might be good to add javadoc comments for this class ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450500606", "createdAt": "2020-07-06T21:56:48Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMTYzOA==", "bodyText": "Do we want to make it a class level constant ? Also do we want to make it configurable through rca.conf ?\nWe might want to play with faster increases and decreases, right ? If you agree, we can also make it an enhancement issues to comeback to it later ..", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450501638", "createdAt": "2020-07-06T21:59:14Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMjMyMQ==", "bodyText": "These are good points. We should add them to the class level javadoc", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450502321", "createdAt": "2020-07-06T22:00:59Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNjIyNw=="}, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNDk5Ng==", "bodyText": "As stepsize is a positive integer, the creation of an action means that the desired size != currentCapacity as here:\ndesiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\nWhat are the cases when it is not actionable ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450504996", "createdAt": "2020-07-06T22:08:14Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);\n+    } else if (desiredCapacity < currentCapacity) {\n+      impactVector.decreasesPressure(HEAP, CPU, NETWORK);\n+    }\n+    return Collections.singletonMap(esNode, impactVector);\n+  }\n+\n+  @Override\n+  public void execute() {\n+    // Making this a no-op for now\n+    // TODO: Modify based on downstream agent API calls\n+    assert true;\n+  }\n+\n+  @Override\n+  public String summary() {\n+    if (!isActionable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNTg1NA==", "bodyText": "String.format uses complicated pattern matching to create the final string, do you think we can use StringBuilder ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450505854", "createdAt": "2020-07-06T22:10:38Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);\n+    } else if (desiredCapacity < currentCapacity) {\n+      impactVector.decreasesPressure(HEAP, CPU, NETWORK);\n+    }\n+    return Collections.singletonMap(esNode, impactVector);\n+  }\n+\n+  @Override\n+  public void execute() {\n+    // Making this a no-op for now\n+    // TODO: Modify based on downstream agent API calls\n+    assert true;\n+  }\n+\n+  @Override\n+  public String summary() {\n+    if (!isActionable()) {\n+      return String.format(\"No action to take for: [%s]\", NAME);\n+    }\n+    return String.format(\"Update [%s] queue capacity from [%d] to [%d] on node [%s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxMTUwNw==", "bodyText": "Do we want to send an unmodifiableList list ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450511507", "createdAt": "2020-07-06T22:26:46Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericFlowUnit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Decision extends GenericFlowUnit {\n+\n+  private List<Action> actions = new ArrayList<>();\n+  private String decider;\n+\n+  public Decision(long timeStamp, String deciderName) {\n+    super(timeStamp);\n+    setDecider(deciderName);\n+  }\n+\n+  public void addAction(Action action) {\n+    if (action != null) {\n+      actions.add(action);\n+    }\n+  }\n+\n+  public void addAllActions(List<Action> actions) {\n+    this.actions.addAll(actions);\n+  }\n+\n+  public List<Action> getActions() {\n+    return actions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxMTkzNQ==", "bodyText": "a class level javadoc comment ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450511935", "createdAt": "2020-07-06T22:28:12Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class Publisher extends NonLeafNode<EmptyFlowUnit> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxMjI3MA==", "bodyText": "Do you think we can add a debug message and a metric here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450512270", "createdAt": "2020-07-06T22:29:12Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class Publisher extends NonLeafNode<EmptyFlowUnit> {\n+\n+  private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+\n+  private Collator collator;\n+  private boolean isMuted = false;\n+\n+  public Publisher(int evalIntervalSeconds, Collator collator) {\n+    super(0, evalIntervalSeconds);\n+    this.collator = collator;\n+  }\n+\n+  @Override\n+  public EmptyFlowUnit operate() {\n+    // TODO: Pass through implementation, need to add dampening, cool-off, action flip-flop\n+    // avoidance, state persistence etc.\n+\n+    Decision decision = collator.getFlowUnits().get(0);\n+    for (Action action : decision.getActions()) {\n+      LOG.info(\"Executing action: [{}]\", action.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxMzM5Mg==", "bodyText": "We already have a camelCase and mixed snake case in namings, now this will be pure snake-case. Do we want to stick to one of the previous two or maybe camelCase ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450513392", "createdAt": "2020-07-06T22:32:37Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyQueueCapacityAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// This is a sample decider implementation to finalize decision maker interfaces.\n+// TODO: 1. Read action priorities from a configurable yml\n+// TODO: 2. Read current queue capacity from NodeConfigurationRca (PR #252)\n+\n+public class QueueHealthDecider extends Decider {\n+\n+  public static final String NAME = \"queue_health\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxNzc3Mw==", "bodyText": "queueRejectionRca can be empty in some cases, which means that the summary might be null. We might want to make an early return in that case ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450517773", "createdAt": "2020-07-06T22:47:00Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyQueueCapacityAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// This is a sample decider implementation to finalize decision maker interfaces.\n+// TODO: 1. Read action priorities from a configurable yml\n+// TODO: 2. Read current queue capacity from NodeConfigurationRca (PR #252)\n+\n+public class QueueHealthDecider extends Decider {\n+\n+  public static final String NAME = \"queue_health\";\n+\n+  private QueueRejectionClusterRca queueRejectionRca;\n+  List<String> actionsByUserPriority = new ArrayList<>();\n+  private int counter = 0;\n+\n+  public QueueHealthDecider(long evalIntervalSeconds, int decisionFrequency, QueueRejectionClusterRca queueRejectionClusterRca) {\n+    // TODO: Also consume NodeConfigurationRca\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.queueRejectionRca = queueRejectionClusterRca;\n+    configureActionPriority();\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public Decision operate() {\n+    Decision decision = new Decision(System.currentTimeMillis(), NAME);\n+    counter += 1;\n+    if (counter < decisionFrequency) {\n+      return decision;\n+    }\n+\n+    counter = 0;\n+    if (queueRejectionRca.getFlowUnits().isEmpty()) {\n+      return decision;\n+    }\n+\n+    HotClusterSummary clusterSummary = queueRejectionRca.getFlowUnits().get(0).getSummary();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxODQ2Mg==", "bodyText": "Because this method can return null, do we want to make it explicit using the annotation @nullable ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450518462", "createdAt": "2020-07-06T22:49:31Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyQueueCapacityAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// This is a sample decider implementation to finalize decision maker interfaces.\n+// TODO: 1. Read action priorities from a configurable yml\n+// TODO: 2. Read current queue capacity from NodeConfigurationRca (PR #252)\n+\n+public class QueueHealthDecider extends Decider {\n+\n+  public static final String NAME = \"queue_health\";\n+\n+  private QueueRejectionClusterRca queueRejectionRca;\n+  List<String> actionsByUserPriority = new ArrayList<>();\n+  private int counter = 0;\n+\n+  public QueueHealthDecider(long evalIntervalSeconds, int decisionFrequency, QueueRejectionClusterRca queueRejectionClusterRca) {\n+    // TODO: Also consume NodeConfigurationRca\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.queueRejectionRca = queueRejectionClusterRca;\n+    configureActionPriority();\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public Decision operate() {\n+    Decision decision = new Decision(System.currentTimeMillis(), NAME);\n+    counter += 1;\n+    if (counter < decisionFrequency) {\n+      return decision;\n+    }\n+\n+    counter = 0;\n+    if (queueRejectionRca.getFlowUnits().isEmpty()) {\n+      return decision;\n+    }\n+\n+    HotClusterSummary clusterSummary = queueRejectionRca.getFlowUnits().get(0).getSummary();\n+    for (HotNodeSummary nodeSummary : clusterSummary.getHotNodeSummaryList()) {\n+      NodeKey esNode = new NodeKey(nodeSummary.getNodeID(), nodeSummary.getHostAddress());\n+      for (HotResourceSummary resource : nodeSummary.getHotResourceSummaryList()) {\n+        decision.addAction(computeBestAction(esNode, resource.getResource().getResourceEnum()));\n+      }\n+    }\n+\n+    return decision;\n+  }\n+\n+  private void configureActionPriority() {\n+    // TODO: Input from user configured yml\n+    this.actionsByUserPriority.add(ModifyQueueCapacityAction.NAME);\n+  }\n+\n+  /**\n+   * Evaluate the most relevant action for a node\n+   *\n+   * <p>Action relevance decided based on user configured priorities for now, this can be modified\n+   * to consume better signals going forward.\n+   */\n+  private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n+    Action action = null;\n+    for (String actionName : actionsByUserPriority) {\n+      action =\n+          getAction(actionName, esNode, threadPool, getNodeQueueCapacity(esNode, threadPool), true);\n+      if (action != null) {\n+        break;\n+      }\n+    }\n+    return action;\n+  }\n+\n+  private Action getAction(String actionName, NodeKey esNode, ResourceEnum threadPool, int currCapacity, boolean increase) {\n+    switch (actionName) {\n+      case ModifyQueueCapacityAction.NAME:\n+        return configureQueueCapacity(esNode, threadPool, currCapacity, increase);\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  private ModifyQueueCapacityAction configureQueueCapacity(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxOTE5NA==", "bodyText": "can we extract out the code here in a method of its own as in constructShardResourceUsageGraph ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450519194", "createdAt": "2020-07-06T22:51:51Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -150,8 +157,40 @@ public void construct() {\n     hotNodeClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n     hotNodeClusterRca.addAllUpstreams(Collections.singletonList(hotJVMNodeRca));\n \n+    /* Queue Rejection RCAs\n+     */\n+    // TODO: Refactor this monolithic function\n+    Metric threadpool_RejectedReqs = new ThreadPool_RejectedReqs(EVALUATION_INTERVAL_SECONDS);\n+    threadpool_RejectedReqs.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    addLeaf(threadpool_RejectedReqs);\n+\n+    // Node level queue rejection RCA\n+    QueueRejectionRca queueRejectionNodeRca = new QueueRejectionRca(RCA_PERIOD, threadpool_RejectedReqs);\n+    queueRejectionNodeRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    queueRejectionNodeRca.addAllUpstreams(Collections.singletonList(threadpool_RejectedReqs));\n+\n+    // Cluster level queue rejection RCA\n+    QueueRejectionClusterRca queueRejectionClusterRca = new QueueRejectionClusterRca(RCA_PERIOD, queueRejectionNodeRca);\n+    queueRejectionClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n+    queueRejectionClusterRca.addAllUpstreams(Collections.singletonList(queueRejectionNodeRca));\n+\n+    // Queue Health Decider\n+    QueueHealthDecider queueHealthDecider = new QueueHealthDecider(EVALUATION_INTERVAL_SECONDS, 12, queueRejectionClusterRca);\n+    queueHealthDecider.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n+    queueHealthDecider.addAllUpstreams(Collections.singletonList(queueRejectionClusterRca));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1060, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}