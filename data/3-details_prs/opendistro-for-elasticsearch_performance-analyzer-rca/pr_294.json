{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNzIwMzEy", "number": 294, "title": "Common changes needed to support dynamic en/disabling of config overrides", "bodyText": "Issue #:\nFixes #290\nDescription of changes:\nThis change adds the common code needed  for supporting dynamic enabling and disabling of rcas, deciders, and actions.\nThe actual changes for applying the config overrides will be in the next PR after this gets merged. It's currently in a branch: performance-analyzer-rca/ktkrg-ed2 branch.\nTests:\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-07-20T18:35:26Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/294", "merged": true, "mergeCommit": {"oid": "f1c0f03680fdba2c06cf0774e5a630152105c5ef"}, "closed": true, "closedAt": "2020-07-29T20:23:00Z", "author": {"login": "ktkrg"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc21-NxgH2gAyNDUzNzIwMzEyOjM3YmUyNDM2MjUyMmFhZTRmZmUzYzE1ZGFlZjRiYjM2MTI2OWMxNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5w9zjgFqTQ1Nzg2ODA0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "37be24362522aae4ffe3c15daef4bb361269c156", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/37be24362522aae4ffe3c15daef4bb361269c156", "committedDate": "2020-07-20T18:30:55Z", "message": "Common changes needed to support dynamic en/disabling of config overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "570286bbdc222fbd947f7662155034df3c959be2", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/570286bbdc222fbd947f7662155034df3c959be2", "committedDate": "2020-07-24T17:26:40Z", "message": "Separate serialize/deserialize methods into own helper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTMyOTA4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/294#pullrequestreview-455132908", "createdAt": "2020-07-24T19:25:41Z", "commit": {"oid": "570286bbdc222fbd947f7662155034df3c959be2"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToyNTo0MVrOG27LyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToyNzo1MVrOG27PqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NTk2MA==", "bodyText": "nit: Missing License information.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/294#discussion_r460245960", "createdAt": "2020-07-24T19:25:41Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverrides.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570286bbdc222fbd947f7662155034df3c959be2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0Njk1Mg==", "bodyText": "nit: Would help if we add a javadoc string explaining that currently we are supporting the rcas, deciders and actions under Overrides and this is supposed to be extensible for other logical parts of graph.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/294#discussion_r460246952", "createdAt": "2020-07-24T19:27:51Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverrides.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * POJO for config overrides.\n+ */\n+public class ConfigOverrides {\n+    private Overrides enable;\n+    private Overrides disable;\n+\n+    public ConfigOverrides() {\n+        this.enable = new Overrides();\n+        this.disable = new Overrides();\n+    }\n+\n+    public Overrides getEnable() {\n+        return enable;\n+    }\n+\n+    public void setEnable(Overrides enable) {\n+        this.enable = enable;\n+    }\n+\n+    public Overrides getDisable() {\n+        return disable;\n+    }\n+\n+    public void setDisable(Overrides disable) {\n+        this.disable = disable;\n+    }\n+\n+    public static class Overrides {\n+        private List<String> rcas;\n+        private List<String> deciders;\n+        private List<String> actions;\n+\n+        public Overrides() {\n+            this.rcas = new ArrayList<>();\n+            this.deciders = new ArrayList<>();\n+            this.actions = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570286bbdc222fbd947f7662155034df3c959be2"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjAxMzkx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/294#pullrequestreview-455201391", "createdAt": "2020-07-24T21:43:54Z", "commit": {"oid": "570286bbdc222fbd947f7662155034df3c959be2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMTo0Mzo1NFrOG2-jkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMTo0Mzo1NFrOG2-jkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwMTIwMA==", "bodyText": "Do we also want to add a metric here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/294#discussion_r460301200", "createdAt": "2020-07-24T21:43:54Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesHelper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+/**\n+ * Class that helps with operations concerning {@link ConfigOverrides}s\n+ */\n+public class ConfigOverridesHelper {\n+\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+  /**\n+   * Serializes a {@link ConfigOverrides} instance to its JSON representation.\n+   *\n+   * @param overrides The {@link ConfigOverrides} instance.\n+   * @return String in JSON format representing the serialized equivalent.\n+   * @throws IOException if conversion runs into an IOException.\n+   */\n+  public static String serialize(final ConfigOverrides overrides) throws IOException {\n+    final IOException[] exception = new IOException[1];\n+    final String serializedOverrides = AccessController.doPrivileged((PrivilegedAction<String>) () -> {\n+      try {\n+        return MAPPER.writeValueAsString(overrides);\n+      } catch (IOException e) {\n+        exception[0] = e;\n+      }\n+      return \"\";\n+    });\n+\n+    if (serializedOverrides.isEmpty() && exception[0] != null) {\n+      throw exception[0];\n+    }\n+\n+    return serializedOverrides;\n+  }\n+\n+  /**\n+   * Deserializes a JSON representation of the config overrides into a {@link ConfigOverrides} instance.\n+   *\n+   * @param overrides The JSON string representing config overrides.\n+   * @return A {@link ConfigOverrides} instance if the JSON is valid.\n+   * @throws IOException if conversion runs into an IOException.\n+   */\n+  public static ConfigOverrides deserialize(final String overrides) throws IOException {\n+    final IOException[] exception = new IOException[1];\n+    final ConfigOverrides configOverrides = AccessController.doPrivileged((PrivilegedAction<ConfigOverrides>) () -> {\n+      try {\n+        return MAPPER.readValue(overrides, ConfigOverrides.class);\n+      } catch (IOException ioe) {\n+        exception[0] = ioe;\n+      }\n+      return null;\n+    });\n+\n+    if (configOverrides == null && exception[0] != null) {\n+      // re throw the exception that was consumed while deserializing.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "570286bbdc222fbd947f7662155034df3c959be2"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a795e6d8ac1063942153193341c725830956da86", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a795e6d8ac1063942153193341c725830956da86", "committedDate": "2020-07-27T16:28:11Z", "message": "Add licence header to new files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43f194e7a80b39ee8c22ec3348265974a7c99cec", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/43f194e7a80b39ee8c22ec3348265974a7c99cec", "committedDate": "2020-07-27T17:41:48Z", "message": "Merge branch 'master' into ktkrg-en-disable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0adabd76d6e3f6c50316191ce918af36c9fc9d5", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b0adabd76d6e3f6c50316191ce918af36c9fc9d5", "committedDate": "2020-07-27T18:08:09Z", "message": "Update licence year to 2020"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MDE3NzU3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/294#pullrequestreview-456017757", "createdAt": "2020-07-27T18:08:32Z", "commit": {"oid": "43f194e7a80b39ee8c22ec3348265974a7c99cec"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODowODozMlrOG3txgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODoxMjo0M1rOG3t6xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NDgxNg==", "bodyText": "Can you explain if this is a one element array, why does it needs to be an array, can't it just be a single reference ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/294#discussion_r461074816", "createdAt": "2020-07-27T18:08:32Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesHelper.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+/**\n+ * Class that helps with operations concerning {@link ConfigOverrides}s\n+ */\n+public class ConfigOverridesHelper {\n+\n+  private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+  /**\n+   * Serializes a {@link ConfigOverrides} instance to its JSON representation.\n+   *\n+   * @param overrides The {@link ConfigOverrides} instance.\n+   * @return String in JSON format representing the serialized equivalent.\n+   * @throws IOException if conversion runs into an IOException.\n+   */\n+  public static String serialize(final ConfigOverrides overrides) throws IOException {\n+    final IOException[] exception = new IOException[1];\n+    final String serializedOverrides = AccessController.doPrivileged((PrivilegedAction<String>) () -> {\n+      try {\n+        return MAPPER.writeValueAsString(overrides);\n+      } catch (IOException e) {\n+        exception[0] = e;\n+      }\n+      return \"\";\n+    });\n+\n+    if (serializedOverrides.isEmpty() && exception[0] != null) {\n+      throw exception[0];\n+    }\n+\n+    return serializedOverrides;\n+  }\n+\n+  /**\n+   * Deserializes a JSON representation of the config overrides into a {@link ConfigOverrides} instance.\n+   *\n+   * @param overrides The JSON string representing config overrides.\n+   * @return A {@link ConfigOverrides} instance if the JSON is valid.\n+   * @throws IOException if conversion runs into an IOException.\n+   */\n+  public static ConfigOverrides deserialize(final String overrides) throws IOException {\n+    final IOException[] exception = new IOException[1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f194e7a80b39ee8c22ec3348265974a7c99cec"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3NzE5MA==", "bodyText": "This is a static final object. Some of the decider actions are node level. I don't think this will work with the RCA-IT framework if we just have a static object mapper here, unless the Overrides object haves nodeId as a parameter, in my opinion.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/294#discussion_r461077190", "createdAt": "2020-07-27T18:12:43Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/overrides/ConfigOverridesHelper.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.config.overrides;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+\n+/**\n+ * Class that helps with operations concerning {@link ConfigOverrides}s\n+ */\n+public class ConfigOverridesHelper {\n+\n+  private static final ObjectMapper MAPPER = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43f194e7a80b39ee8c22ec3348265974a7c99cec"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6efceb31aa660d3c22b6c13e09701d42251a3a26", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6efceb31aa660d3c22b6c13e09701d42251a3a26", "committedDate": "2020-07-27T19:01:41Z", "message": "Add javadoc explaining one element array"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14358c49aa5ea980567185a6e6e84bbd6834003d", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/14358c49aa5ea980567185a6e6e84bbd6834003d", "committedDate": "2020-07-27T22:20:44Z", "message": "Merge branch 'master' into ktkrg-en-disable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdbf2c95de96f9d6bdb46508f829e14a656bd4a6", "author": {"user": {"login": "ktkrg", "name": "Karthik Kumarguru"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/fdbf2c95de96f9d6bdb46508f829e14a656bd4a6", "committedDate": "2020-07-28T06:13:16Z", "message": "Synchronize serialize and deserialize methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODY4MDQ5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/294#pullrequestreview-457868049", "createdAt": "2020-07-29T20:22:43Z", "commit": {"oid": "fdbf2c95de96f9d6bdb46508f829e14a656bd4a6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1096, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}