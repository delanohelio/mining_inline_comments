{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjE1NDk4", "number": 181, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTozNzozMVrOD5OV0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo0ODoxMFrOD7Zhuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzMwMzg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTozNzozMVrOGQX5Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTo1MzowMVrOGSN5WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyMTg4Ng==", "bodyText": "Should we also add to the log, what they were ? Basically add records object to the log ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r419821886", "createdAt": "2020-05-05T01:37:31Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +74,69 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NTIyNQ==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r421755225", "createdAt": "2020-05-07T19:53:01Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +74,69 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyMTg4Ng=="}, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzMyNjc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo1MjowOFrOGQYF6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOTo1MzowMFrOGSN5Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTEzMQ==", "bodyText": "Let's do `LOG.error(\"\", dex ); ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r419825131", "createdAt": "2020-05-05T01:52:08Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n+        Field<Integer> foreignKeyField = DSL.field(\n+            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n+            Integer.class);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils\n+            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n+                mostRecentRecord.get(primaryKeyField),\n+                foreignKeyField);\n+        Result<Record> temperatureSummary = query.fetch();\n+        GenericSummary summary =\n+            ClusterTemperatureSummary.buildSummaryFromDatabase(temperatureSummary, create);\n+        response.addNestedSummaryList(summary);\n+      } else if (rca.equalsIgnoreCase(NodeTemperatureRca.TABLE_NAME)) {\n+        SelectJoinStep<Record> query = SQLiteQueryUtils.buildSummaryQuery(create,\n+            \"CompactNodeSummary\", mostRecentRecord.get(primaryKeyField), primaryKeyField);\n+        Result<Record> nodeTemperatureCompactSummary = query.fetch();\n+        GenericSummary summary =\n+            CompactNodeSummary.buildSummaryFromDatabase(nodeTemperatureCompactSummary, create);\n+        response.addNestedSummaryList(summary);\n+      }\n+    } catch (DataAccessException dex) {\n+      dex.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NTIwMg==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r421755202", "createdAt": "2020-05-07T19:53:00Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n+        Field<Integer> foreignKeyField = DSL.field(\n+            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n+            Integer.class);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils\n+            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n+                mostRecentRecord.get(primaryKeyField),\n+                foreignKeyField);\n+        Result<Record> temperatureSummary = query.fetch();\n+        GenericSummary summary =\n+            ClusterTemperatureSummary.buildSummaryFromDatabase(temperatureSummary, create);\n+        response.addNestedSummaryList(summary);\n+      } else if (rca.equalsIgnoreCase(NodeTemperatureRca.TABLE_NAME)) {\n+        SelectJoinStep<Record> query = SQLiteQueryUtils.buildSummaryQuery(create,\n+            \"CompactNodeSummary\", mostRecentRecord.get(primaryKeyField), primaryKeyField);\n+        Result<Record> nodeTemperatureCompactSummary = query.fetch();\n+        GenericSummary summary =\n+            CompactNodeSummary.buildSummaryFromDatabase(nodeTemperatureCompactSummary, create);\n+        response.addNestedSummaryList(summary);\n+      }\n+    } catch (DataAccessException dex) {\n+      dex.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTEzMQ=="}, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzMyODQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo1MzozMFrOGQYG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo1MzozMFrOGQYG7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTM4OQ==", "bodyText": "Can we make it FullNodeTemperatureSummary.buildSummaryFromDatabase() ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r419825389", "createdAt": "2020-05-05T01:53:30Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n+        Field<Integer> foreignKeyField = DSL.field(\n+            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n+            Integer.class);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils\n+            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n+                mostRecentRecord.get(primaryKeyField),\n+                foreignKeyField);\n+        Result<Record> temperatureSummary = query.fetch();\n+        GenericSummary summary =\n+            ClusterTemperatureSummary.buildSummaryFromDatabase(temperatureSummary, create);\n+        response.addNestedSummaryList(summary);\n+      } else if (rca.equalsIgnoreCase(NodeTemperatureRca.TABLE_NAME)) {\n+        SelectJoinStep<Record> query = SQLiteQueryUtils.buildSummaryQuery(create,\n+            \"CompactNodeSummary\", mostRecentRecord.get(primaryKeyField), primaryKeyField);\n+        Result<Record> nodeTemperatureCompactSummary = query.fetch();\n+        GenericSummary summary =\n+            CompactNodeSummary.buildSummaryFromDatabase(nodeTemperatureCompactSummary, create);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzMzMDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo1NDo0MlrOGQYIEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzoxMToyN1rOGSTZgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTY4MA==", "bodyText": "Should we also check for the node Role and ensure it is a data node we are making a query to ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r419825680", "createdAt": "2020-05-05T01:54:42Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n+        Field<Integer> foreignKeyField = DSL.field(\n+            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n+            Integer.class);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils\n+            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n+                mostRecentRecord.get(primaryKeyField),\n+                foreignKeyField);\n+        Result<Record> temperatureSummary = query.fetch();\n+        GenericSummary summary =\n+            ClusterTemperatureSummary.buildSummaryFromDatabase(temperatureSummary, create);\n+        response.addNestedSummaryList(summary);\n+      } else if (rca.equalsIgnoreCase(NodeTemperatureRca.TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NTE0OQ==", "bodyText": "It's fine for now, but in the long run I think we may need to. This implementation assumes that when you unicast query a node for its local rcas, you know what node you're querying and what rca you need.\nWe have one case we need to handle in the way we are writing node roles now. We either write the role as a master or a data, and it becomes tricky if it's a data-master node.\nI'll create an issue for this.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r421755149", "createdAt": "2020-05-07T19:52:54Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n+        Field<Integer> foreignKeyField = DSL.field(\n+            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n+            Integer.class);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils\n+            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n+                mostRecentRecord.get(primaryKeyField),\n+                foreignKeyField);\n+        Result<Record> temperatureSummary = query.fetch();\n+        GenericSummary summary =\n+            ClusterTemperatureSummary.buildSummaryFromDatabase(temperatureSummary, create);\n+        response.addNestedSummaryList(summary);\n+      } else if (rca.equalsIgnoreCase(NodeTemperatureRca.TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTY4MA=="}, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NTM3OQ==", "bodyText": "awesome ! thanks", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r421845379", "createdAt": "2020-05-07T23:11:27Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n+        Field<Integer> foreignKeyField = DSL.field(\n+            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n+            Integer.class);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils\n+            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n+                mostRecentRecord.get(primaryKeyField),\n+                foreignKeyField);\n+        Result<Record> temperatureSummary = query.fetch();\n+        GenericSummary summary =\n+            ClusterTemperatureSummary.buildSummaryFromDatabase(temperatureSummary, create);\n+        response.addNestedSummaryList(summary);\n+      } else if (rca.equalsIgnoreCase(NodeTemperatureRca.TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTY4MA=="}, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMzMzMDk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTo1NTowNlrOGQYIWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMzowOTozOVrOGS4E8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTc1NQ==", "bodyText": "Can we make sure that this is the elected master we are making the query to ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r419825755", "createdAt": "2020-05-05T01:55:06Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1NTEwNA==", "bodyText": "This is taken care of by the RcaRequestHandler and the fact that cluster temperature rca is not a part of the rcas that can be queried with local=true param and is a part of cluster level rcas. Because it's not part of the local rca set, it by default falls back to ensuring that this is a cluster level rca and that flow checks if the current host is a master node already.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r421755104", "createdAt": "2020-05-07T19:52:48Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTc1NQ=="}, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NTA4MA==", "bodyText": "Sounds good. Can we add that as a code comment ? So that people know why they cannot get this RCA when queried from non-elected masters ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r421845080", "createdAt": "2020-05-07T23:10:33Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTc1NQ=="}, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NjMyMw==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r422446323", "createdAt": "2020-05-09T03:09:39Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -216,6 +206,46 @@ public synchronized RcaResponse readRca(String rca) {\n     return response;\n   }\n \n+  private RcaResponse readTemperatureProfileRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils.buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList == null || recordList.isEmpty()) {\n+        return null;\n+      }\n+      Record mostRecentRecord = recordList.get(0);\n+      response = RcaResponse.buildResponse(mostRecentRecord);\n+\n+      if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyNTc1NQ=="}, "originalCommit": {"oid": "c15d33e9b21050d5d499a4e83f0b4d1884db4565"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTkxMjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyNzo0NVrOGS2W4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMzowNTo0MlrOGS4D9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODE0Ng==", "bodyText": "do we need to handle the DataTypeException here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r422418146", "createdAt": "2020-05-08T23:27:45Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +78,71 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NjA2OA==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r422446068", "createdAt": "2020-05-09T03:05:42Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +78,71 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODE0Ng=="}, "originalCommit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTkxMzI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyODowNVrOGS2XLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMzowNTo0MlrOGS4D8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODIyMQ==", "bodyText": "same as above", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r422418221", "createdAt": "2020-05-08T23:28:05Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +78,71 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),\n+                String.class));\n+        final String hostAddress =\n+            record.get(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME)), String.class);\n+\n+        CompactNodeSummary summary = new CompactNodeSummary(nodeId, hostAddress);\n+\n+        readAndSetTotalConsumedPerDimension(record, summary);\n+        readAndSetNumShardsPerDimension(record, summary);\n+        readAndSetTemperatureVector(record, summary);\n+\n+        return summary;\n+    }\n+\n+    private static void readAndSetTemperatureVector(Record record, CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String normalizedMeanUsageForDimension = record\n+                .get((DSL.field(DSL.name(dimension.NAME + MEAN_SUFFIX_KEY),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0NjA2Nw==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r422446067", "createdAt": "2020-05-09T03:05:42Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +78,71 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),\n+                String.class));\n+        final String hostAddress =\n+            record.get(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME)), String.class);\n+\n+        CompactNodeSummary summary = new CompactNodeSummary(nodeId, hostAddress);\n+\n+        readAndSetTotalConsumedPerDimension(record, summary);\n+        readAndSetNumShardsPerDimension(record, summary);\n+        readAndSetTemperatureVector(record, summary);\n+\n+        return summary;\n+    }\n+\n+    private static void readAndSetTemperatureVector(Record record, CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String normalizedMeanUsageForDimension = record\n+                .get((DSL.field(DSL.name(dimension.NAME + MEAN_SUFFIX_KEY),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODIyMQ=="}, "originalCommit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTkxNTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzoyOTozN1rOGS2YfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMzozOTozOVrOGS2gQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODU1Ng==", "bodyText": "can we simple cast the return type as Double.class here ?\nrecord.get((DSL.field(DSL.name(dimension.NAME + TOTAL_SUFFIX_KEY), Double.class)));", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r422418556", "createdAt": "2020-05-08T23:29:37Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +78,71 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),\n+                String.class));\n+        final String hostAddress =\n+            record.get(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME)), String.class);\n+\n+        CompactNodeSummary summary = new CompactNodeSummary(nodeId, hostAddress);\n+\n+        readAndSetTotalConsumedPerDimension(record, summary);\n+        readAndSetNumShardsPerDimension(record, summary);\n+        readAndSetTemperatureVector(record, summary);\n+\n+        return summary;\n+    }\n+\n+    private static void readAndSetTemperatureVector(Record record, CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String normalizedMeanUsageForDimension = record\n+                .get((DSL.field(DSL.name(dimension.NAME + MEAN_SUFFIX_KEY),\n+                    String.class)));\n+            short value = 0;\n+            if (normalizedMeanUsageForDimension != null && !normalizedMeanUsageForDimension.isEmpty()) {\n+                value = Short.parseShort(normalizedMeanUsageForDimension);\n+            }\n+            summary.setTemperatureForDimension(dimension,\n+                new NormalizedValue(value));\n+        }\n+    }\n+\n+    private static void readAndSetNumShardsPerDimension(Record record, CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String numShardsForDimension = record\n+                .get((DSL.field(DSL.name(dimension.NAME + NUM_SHARDS_SUFFIX_KEY),\n+                    String.class)));\n+            int value = 0;\n+            if (numShardsForDimension != null && !numShardsForDimension.isEmpty()) {\n+                value = Integer.parseInt(numShardsForDimension);\n+            }\n+            summary.setNumOfShards(dimension, value);\n+        }\n+    }\n+\n+    private static void readAndSetTotalConsumedPerDimension(Record record,\n+        CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String totalConsumedForDimension =\n+                record.get((DSL.field(DSL.name(dimension.NAME + TOTAL_SUFFIX_KEY), String.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQyMDU0Nw==", "bodyText": "That was my first implementation. It failed with a class cast exception, so I ended up doing it this way.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r422420547", "createdAt": "2020-05-08T23:39:39Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +78,71 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),\n+                String.class));\n+        final String hostAddress =\n+            record.get(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME)), String.class);\n+\n+        CompactNodeSummary summary = new CompactNodeSummary(nodeId, hostAddress);\n+\n+        readAndSetTotalConsumedPerDimension(record, summary);\n+        readAndSetNumShardsPerDimension(record, summary);\n+        readAndSetTemperatureVector(record, summary);\n+\n+        return summary;\n+    }\n+\n+    private static void readAndSetTemperatureVector(Record record, CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String normalizedMeanUsageForDimension = record\n+                .get((DSL.field(DSL.name(dimension.NAME + MEAN_SUFFIX_KEY),\n+                    String.class)));\n+            short value = 0;\n+            if (normalizedMeanUsageForDimension != null && !normalizedMeanUsageForDimension.isEmpty()) {\n+                value = Short.parseShort(normalizedMeanUsageForDimension);\n+            }\n+            summary.setTemperatureForDimension(dimension,\n+                new NormalizedValue(value));\n+        }\n+    }\n+\n+    private static void readAndSetNumShardsPerDimension(Record record, CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String numShardsForDimension = record\n+                .get((DSL.field(DSL.name(dimension.NAME + NUM_SHARDS_SUFFIX_KEY),\n+                    String.class)));\n+            int value = 0;\n+            if (numShardsForDimension != null && !numShardsForDimension.isEmpty()) {\n+                value = Integer.parseInt(numShardsForDimension);\n+            }\n+            summary.setNumOfShards(dimension, value);\n+        }\n+    }\n+\n+    private static void readAndSetTotalConsumedPerDimension(Record record,\n+        CompactNodeSummary summary) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+            String totalConsumedForDimension =\n+                record.get((DSL.field(DSL.name(dimension.NAME + TOTAL_SUFFIX_KEY), String.class)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxODU1Ng=="}, "originalCommit": {"oid": "5c4928c9f35ed814f6df446da0d31af6055cd0e6"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjAzMjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyNTowOVrOGTsDAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyNTowOVrOGTsDAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5Nzc5NA==", "bodyText": "Can this be converted into a static import ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423297794", "createdAt": "2020-05-11T20:25:09Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -19,15 +19,24 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeTemperatureSummaryMessage;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceTemperatureMessage;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary.SQL_SCHEMA_CONSTANTS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjAzNzkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyNjo0MVrOGTsGRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyNjo0MVrOGTsGRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5ODYyOA==", "bodyText": "Is this a candidate for a metric?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423298628", "createdAt": "2020-05-11T20:26:41Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +79,88 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjA0ODg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyOTo1M1rOGTsNQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoyOTo1M1rOGTsNQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMDQxOA==", "bodyText": "For my understanding, is there a relevance to the ordering of these calls ? Just from function name, it looks that readAndSetNumShardsPerDimension() should be invoked before readAndSetTotalConsumedPerDimension()", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423300418", "createdAt": "2020-05-11T20:29:53Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +79,88 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),\n+                String.class));\n+        final String hostAddress =\n+            record.get(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME)), String.class);\n+\n+        CompactNodeSummary summary = new CompactNodeSummary(nodeId, hostAddress);\n+\n+        readAndSetTotalConsumedPerDimension(record, summary);\n+        readAndSetNumShardsPerDimension(record, summary);\n+        readAndSetTemperatureVector(record, summary);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjA4MTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo0MDowMlrOGTsiMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo0MDowMlrOGTsiMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwNTc3OA==", "bodyText": "nit: Can use\nLOG.error(\"Couldn't convert to the right data type while reading temperature vector from the DB.\", dte);", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423305778", "createdAt": "2020-05-11T20:40:02Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/CompactNodeSummary.java", "diffHunk": "@@ -68,6 +79,88 @@ public CompactNodeSummary(final String nodeId, final String hostAddress) {\n         this.numOfShards = new int[TemperatureVector.Dimension.values().length];\n     }\n \n+    public static CompactNodeSummary buildSummaryFromDatabase(Result<Record> records,\n+        DSLContext context) {\n+        if (records.size() != 1) {\n+            LOG.error(\"Expected 1 compact node summary, got {}. Summaries: {}\", records.size(),\n+                records);\n+            throw new IllegalArgumentException(\n+                \"Only 1 CompactNodeSummary expected. Found: \" + records.size());\n+        }\n+\n+        Record record = records.get(0);\n+        final String nodeId =\n+            record.get(DSL.field(DSL.name(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME),\n+                String.class));\n+        final String hostAddress =\n+            record.get(DSL.field(DSL.name(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME)), String.class);\n+\n+        CompactNodeSummary summary = new CompactNodeSummary(nodeId, hostAddress);\n+\n+        readAndSetTotalConsumedPerDimension(record, summary);\n+        readAndSetNumShardsPerDimension(record, summary);\n+        readAndSetTemperatureVector(record, summary);\n+\n+        return summary;\n+    }\n+\n+    private static void readAndSetTemperatureVector(Record record, CompactNodeSummary summary) {\n+        try {\n+            for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {\n+                String normalizedMeanUsageForDimension = record\n+                    .get((DSL.field(DSL.name(dimension.NAME + MEAN_SUFFIX_KEY),\n+                        String.class)));\n+                short value = 0;\n+                if (normalizedMeanUsageForDimension != null && !normalizedMeanUsageForDimension\n+                    .isEmpty()) {\n+                    value = Short.parseShort(normalizedMeanUsageForDimension);\n+                }\n+                summary.setTemperatureForDimension(dimension,\n+                    new NormalizedValue(value));\n+            }\n+        } catch (final DataTypeException dte) {\n+            LOG.error(\"Couldn't convert to the right data type while reading temperature vector \"\n+                + \"from the DB. {}\", dte.getMessage(), dte);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjA5ODA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo0NTowNVrOGTsskg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo0NTowNVrOGTsskg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwODQzNA==", "bodyText": "Can you add a java doc here explaining what the key, value represent and map usage.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423308434", "createdAt": "2020-05-11T20:45:05Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java", "diffHunk": "@@ -45,13 +49,14 @@\n  */\n public class SQLiteQueryUtils {\n   private static final Map<String, String> nestedTableMap;\n+  private static final Map<String, String> temperatureProfileNestedSummaryMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjEwODExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo0ODoxMFrOGTsy8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo0ODoxMFrOGTsy8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxMDA2NA==", "bodyText": "Why use an unmodifiableMap instead of an immutableMap ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/181#discussion_r423310064", "createdAt": "2020-05-11T20:48:10Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java", "diffHunk": "@@ -61,6 +66,18 @@\n     nestedTableMap = Collections.unmodifiableMap(tableMap);\n   }\n \n+  static {\n+    Map<String, String> temperatureSummaryMap = new HashMap<>();\n+    temperatureSummaryMap.put(ResourceFlowUnit.RCA_TABLE_NAME,\n+        NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME);\n+    temperatureSummaryMap.put(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME,\n+        NodeLevelDimensionalSummary.ZONE_SUMMARY_TABLE_NAME);\n+    temperatureSummaryMap.put(NodeLevelDimensionalSummary.ZONE_SUMMARY_TABLE_NAME,\n+        ShardProfileSummary.SUMMARY_TABLE_NAME);\n+\n+    temperatureProfileNestedSummaryMap = Collections.unmodifiableMap(temperatureSummaryMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "191520336d6d63fe905d55495d4e0ba44617fdd5"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2446, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}