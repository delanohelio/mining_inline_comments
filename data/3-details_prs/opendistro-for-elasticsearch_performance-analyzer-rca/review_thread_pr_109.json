{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5Nzg5MTg3", "number": 109, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToxNToyOVrODjNFDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzo1NTo1OFrODjpvoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQxMDM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToxNToyOVrOFu4mhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODo1NzozNlrOFvdSyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNjE4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  value.add(this.getTimeStamp());\n          \n          \n            \n                  value.add(getTimeStamp());", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384706183", "createdAt": "2020-02-26T19:15:29Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java", "diffHunk": "@@ -159,7 +159,7 @@ public static ResourceFlowUnit buildFlowUnitFromWrapper(final FlowUnitMessage me\n   public List<Object> getSqlValue(String rcaName) {\n     List<Object> value = new ArrayList<>();\n     if (!this.isEmpty()) {\n-      value.add(String.valueOf(this.getTimeStamp()));\n+      value.add(this.getTimeStamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNzMzOA==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385307338", "createdAt": "2020-02-27T18:57:36Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java", "diffHunk": "@@ -159,7 +159,7 @@ public static ResourceFlowUnit buildFlowUnitFromWrapper(final FlowUnitMessage me\n   public List<Object> getSqlValue(String rcaName) {\n     List<Object> value = new ArrayList<>();\n     if (!this.isEmpty()) {\n-      value.add(String.valueOf(this.getTimeStamp()));\n+      value.add(this.getTimeStamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNjE4Mw=="}, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQyNTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyMDoyNFrOFu4wSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTowMzozM1rOFvdfSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODY4Mg==", "bodyText": "In case of exception this method will return null. We should use @Nullable annotation to emphasize that", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384708682", "createdAt": "2020-02-26T19:20:24Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "diffHunk": "@@ -83,10 +95,75 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, this.numOfNodes);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME, this.numOfUnhealthyNodes);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NUM_OF_NODES_COL_NAME = \"Number of Nodes\";\n-    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"Number of Unhealthy Nodes\";\n+    public static final String NUM_OF_NODES_COL_NAME = \"number_of_nodes\";\n+    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"number_of_unhealthy_nodes\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum ClusterSummaryField implements JooqFieldValue {\n+    NUM_OF_NODES_FIELD(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class),\n+    NUM_OF_UNHEALTHY_NODES_FILELD(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME,\n+        Integer.class);\n+\n+    private String name;\n+    private Class<?> clazz;\n+\n+    ClusterSummaryField(final String name, Class<?> clazz) {\n+      this.name = name;\n+      this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public Field<?> getField() {\n+      return DSL.field(DSL.name(this.name), this.clazz);\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return this.name;\n+    }\n+  }\n+\n+  /**\n+   * parse SQL query result and fill the result into summary obj.\n+   * @param record SQLite record\n+   * @return whether parsing is successful or not\n+   */\n+  public static GenericSummary buildSummary(Record record) {\n+    GenericSummary summary = null;\n+    try {\n+      Integer numOfNodes = record.get(ClusterSummaryField.NUM_OF_NODES_FIELD.getField(), Integer.class);\n+      Integer numOfUnhealthyNodes = record.get(ClusterSummaryField.NUM_OF_UNHEALTHY_NODES_FILELD.getField(), Integer.class);\n+      summary = new HotClusterSummary(numOfNodes, numOfUnhealthyNodes);\n+    }\n+    catch (IllegalArgumentException ie) {\n+      LOG.error(\"Some field is not found in record, cause : {}\", ie.getMessage());\n+    }\n+    catch (DataTypeException de) {\n+      LOG.error(\"Fails to convert data type\");\n+    }\n+    return summary;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxMDUzOQ==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385310539", "createdAt": "2020-02-27T19:03:33Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "diffHunk": "@@ -83,10 +95,75 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, this.numOfNodes);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME, this.numOfUnhealthyNodes);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NUM_OF_NODES_COL_NAME = \"Number of Nodes\";\n-    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"Number of Unhealthy Nodes\";\n+    public static final String NUM_OF_NODES_COL_NAME = \"number_of_nodes\";\n+    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"number_of_unhealthy_nodes\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum ClusterSummaryField implements JooqFieldValue {\n+    NUM_OF_NODES_FIELD(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class),\n+    NUM_OF_UNHEALTHY_NODES_FILELD(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME,\n+        Integer.class);\n+\n+    private String name;\n+    private Class<?> clazz;\n+\n+    ClusterSummaryField(final String name, Class<?> clazz) {\n+      this.name = name;\n+      this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public Field<?> getField() {\n+      return DSL.field(DSL.name(this.name), this.clazz);\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return this.name;\n+    }\n+  }\n+\n+  /**\n+   * parse SQL query result and fill the result into summary obj.\n+   * @param record SQLite record\n+   * @return whether parsing is successful or not\n+   */\n+  public static GenericSummary buildSummary(Record record) {\n+    GenericSummary summary = null;\n+    try {\n+      Integer numOfNodes = record.get(ClusterSummaryField.NUM_OF_NODES_FIELD.getField(), Integer.class);\n+      Integer numOfUnhealthyNodes = record.get(ClusterSummaryField.NUM_OF_UNHEALTHY_NODES_FILELD.getField(), Integer.class);\n+      summary = new HotClusterSummary(numOfNodes, numOfUnhealthyNodes);\n+    }\n+    catch (IllegalArgumentException ie) {\n+      LOG.error(\"Some field is not found in record, cause : {}\", ie.getMessage());\n+    }\n+    catch (DataTypeException de) {\n+      LOG.error(\"Fails to convert data type\");\n+    }\n+    return summary;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODY4Mg=="}, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQyNzk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotNodeSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyMDo1OFrOFu4xhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxOTowMzo0MFrOFvdfhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODk5OQ==", "bodyText": "same as above", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384708999", "createdAt": "2020-02-26T19:20:58Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotNodeSummary.java", "diffHunk": "@@ -104,9 +117,74 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, this.nodeID);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME, this.hostAddress);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NODE_ID_COL_NAME = \"Node ID\";\n-    public static final String HOST_IP_ADDRESS_COL_NAME = \"Host IP\";\n+    public static final String NODE_ID_COL_NAME = \"node_id\";\n+    public static final String HOST_IP_ADDRESS_COL_NAME = \"host_address\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum NodeSummaryField implements JooqFieldValue {\n+    NODE_ID_FIELD(SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, String.class),\n+    HOST_IP_ADDRESS_FILELD(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME,\n+        String.class);\n+\n+    private String name;\n+    private Class<?> clazz;\n+\n+    NodeSummaryField(final String name, Class<?> clazz) {\n+      this.name = name;\n+      this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public Field<?> getField() {\n+      return DSL.field(DSL.name(this.name), this.clazz);\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return this.name;\n+    }\n+  }\n+\n+  /**\n+   * Re-generate the node summary object from SQL query result.\n+   * @param record SQLite record\n+   * @return node summary object\n+   */\n+  public static HotNodeSummary buildSummary(Record record) {\n+    HotNodeSummary summary = null;\n+    try {\n+      String nodeId = record.get(NodeSummaryField.NODE_ID_FIELD.getField(), String.class);\n+      String ipAddress = record.get(NodeSummaryField.HOST_IP_ADDRESS_FILELD.getField(), String.class);\n+      summary = new HotNodeSummary(nodeId, ipAddress);\n+    }\n+    catch (IllegalArgumentException ie) {\n+      LOG.error(\"Some field is not found in record, cause : {}\", ie.getMessage());\n+    }\n+    catch (DataTypeException de) {\n+      LOG.error(\"Fails to convert data type\");\n+    }\n+    return summary;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxMDU5OA==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385310598", "createdAt": "2020-02-27T19:03:40Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotNodeSummary.java", "diffHunk": "@@ -104,9 +117,74 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, this.nodeID);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME, this.hostAddress);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NODE_ID_COL_NAME = \"Node ID\";\n-    public static final String HOST_IP_ADDRESS_COL_NAME = \"Host IP\";\n+    public static final String NODE_ID_COL_NAME = \"node_id\";\n+    public static final String HOST_IP_ADDRESS_COL_NAME = \"host_address\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum NodeSummaryField implements JooqFieldValue {\n+    NODE_ID_FIELD(SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, String.class),\n+    HOST_IP_ADDRESS_FILELD(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME,\n+        String.class);\n+\n+    private String name;\n+    private Class<?> clazz;\n+\n+    NodeSummaryField(final String name, Class<?> clazz) {\n+      this.name = name;\n+      this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public Field<?> getField() {\n+      return DSL.field(DSL.name(this.name), this.clazz);\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return this.name;\n+    }\n+  }\n+\n+  /**\n+   * Re-generate the node summary object from SQL query result.\n+   * @param record SQLite record\n+   * @return node summary object\n+   */\n+  public static HotNodeSummary buildSummary(Record record) {\n+    HotNodeSummary summary = null;\n+    try {\n+      String nodeId = record.get(NodeSummaryField.NODE_ID_FIELD.getField(), String.class);\n+      String ipAddress = record.get(NodeSummaryField.HOST_IP_ADDRESS_FILELD.getField(), String.class);\n+      summary = new HotNodeSummary(nodeId, ipAddress);\n+    }\n+    catch (IllegalArgumentException ie) {\n+      LOG.error(\"Some field is not found in record, cause : {}\", ie.getMessage());\n+    }\n+    catch (DataTypeException de) {\n+      LOG.error(\"Fails to convert data type\");\n+    }\n+    return summary;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODk5OQ=="}, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQzNzE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyMzoyM1rOFu426A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzo1OToxNFrOFvlWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng==", "bodyText": "should we just fix it now ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384710376", "createdAt": "2020-02-26T19:23:23Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -123,8 +125,15 @@ public synchronized String read() {\n     return readTables();\n   }\n \n-  public synchronized RcaResponse readRca(String rca) {\n-    return readRcaTable(rca);\n+  // TODO : readRca might return a list of RcaResponse if using range query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMTA5MQ==", "bodyText": "If we intend to keep this as a todo for now, we should expand the text saying what the TODO intends to solve but why this is not required immediately", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384711091", "createdAt": "2020-02-26T19:24:35Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -123,8 +125,15 @@ public synchronized String read() {\n     return readTables();\n   }\n \n-  public synchronized RcaResponse readRca(String rca) {\n-    return readRcaTable(rca);\n+  // TODO : readRca might return a list of RcaResponse if using range query", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng=="}, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNzQ4MQ==", "bodyText": "I have expanded the TODO text to explain why we didn't add range query here.\nIt is still unclear to me what needs to be done here and how are we going to define the RESTful API to do range query. Since BeagleRock does not need this either at this moment we can revisit this function to decide what are the input arguments of the new API how are we going to do range query.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385317481", "createdAt": "2020-02-27T19:16:40Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -123,8 +125,15 @@ public synchronized String read() {\n     return readTables();\n   }\n \n-  public synchronized RcaResponse readRca(String rca) {\n-    return readRcaTable(rca);\n+  // TODO : readRca might return a list of RcaResponse if using range query", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng=="}, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzOTI0NA==", "bodyText": "Let's remove the BeagleRock in comments", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385439244", "createdAt": "2020-02-27T23:59:14Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -123,8 +125,15 @@ public synchronized String read() {\n     return readTables();\n   }\n \n-  public synchronized RcaResponse readRca(String rca) {\n-    return readRcaTable(rca);\n+  // TODO : readRca might return a list of RcaResponse if using range query", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng=="}, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQ0NTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyNTozOVrOFu48CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyNTozOVrOFu48CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMTY4OQ==", "bodyText": "@nullable here as well ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384711689", "createdAt": "2020-02-26T19:25:39Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -173,21 +172,67 @@ private synchronized String readTable(String tableName) {\n     return tableStr;\n   }\n \n+  // TODO: we only query the most recent RCA entry in this API. might need to extend this\n+  // to support range query based on timestamp.\n   @Override\n-  synchronized RcaResponse readRcaTable(String rca) {\n-    Set<String> tableNames = super.tableNames;\n-    if (!tableNames.contains(rca)) {\n-      return null;\n+  public synchronized RcaResponse readRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils\n+        .buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList.size() > 0) {\n+        Record mostRecentRecord = recordList.get(0);\n+        response = RcaResponse.buildResponse(mostRecentRecord);\n+        if (response.getState().equals(State.UNHEALTHY.toString())) {\n+          readSummary(response, mostRecentRecord.get(primaryKeyField));\n+        }\n+      }\n     }\n-    List<Record> rcaResponseRecordList = QueryUtils.getRcaRecordList(create, rca, getSummaryTableMap(rca), tableNames);\n-    return RcaResponseUtil.getRcaResponse(rca, rcaResponseRecordList, tableNames);\n+    catch (DataAccessException de) {\n+      // it is totally fine if we fail to read some certain tables.\n+      LOG.warn(\"Fail to read RCA : {}, query = {},  exceptions : {}\", rca, rcaQuery.toString(), de.getStackTrace());\n+    }\n+    return response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NzEwNjg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzo1NTo1OFrOFvlSBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwMTozNjo0NlrOFvm_YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzODIxNA==", "bodyText": "FILELD -> FIELD ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385438214", "createdAt": "2020-02-27T23:55:58Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "diffHunk": "@@ -83,10 +96,76 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, this.numOfNodes);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME, this.numOfUnhealthyNodes);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NUM_OF_NODES_COL_NAME = \"Number of Nodes\";\n-    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"Number of Unhealthy Nodes\";\n+    public static final String NUM_OF_NODES_COL_NAME = \"number_of_nodes\";\n+    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"number_of_unhealthy_nodes\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum ClusterSummaryField implements JooqFieldValue {\n+    NUM_OF_NODES_FIELD(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class),\n+    NUM_OF_UNHEALTHY_NODES_FILELD(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NjIwOQ==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385466209", "createdAt": "2020-02-28T01:36:46Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "diffHunk": "@@ -83,10 +96,76 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, this.numOfNodes);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME, this.numOfUnhealthyNodes);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NUM_OF_NODES_COL_NAME = \"Number of Nodes\";\n-    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"Number of Unhealthy Nodes\";\n+    public static final String NUM_OF_NODES_COL_NAME = \"number_of_nodes\";\n+    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"number_of_unhealthy_nodes\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum ClusterSummaryField implements JooqFieldValue {\n+    NUM_OF_NODES_FIELD(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class),\n+    NUM_OF_UNHEALTHY_NODES_FILELD(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzODIxNA=="}, "originalCommit": {"oid": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2588, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}