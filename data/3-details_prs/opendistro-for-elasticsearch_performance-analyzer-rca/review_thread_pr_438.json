{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMjc1Mjc5", "number": 438, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjozNzozMFrOEnovZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo0MDo1OVrOEno0FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTk3NDE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/GarbageCollectorInfoProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjozNzozMFrOHYV-hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjowNzoyMlrOHZFipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI4Nzk0Mg==", "bodyText": "What's the point of this statement?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/438#discussion_r495287942", "createdAt": "2020-09-25T22:37:30Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/GarbageCollectorInfoProcessor.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCInfoDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.util.JsonConverter;\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+\n+public class GarbageCollectorInfoProcessor implements EventProcessor {\n+\n+  private static final Logger LOG = LogManager.getLogger(GarbageCollectorInfoProcessor.class);\n+\n+  private GarbageCollectorInfoSnapshot gcSnap;\n+  private BatchBindStep handle;\n+  private long startTime;\n+  private long endTime;\n+\n+  private GarbageCollectorInfoProcessor(GarbageCollectorInfoSnapshot gcSnap) {\n+    this.gcSnap = gcSnap;\n+  }\n+\n+  static GarbageCollectorInfoProcessor buildGarbageCollectorInfoProcessor(\n+      long currWindowStartTime,\n+      Connection conn,\n+      NavigableMap<Long, GarbageCollectorInfoSnapshot> gcInfoMap) {\n+    if (gcInfoMap.get(currWindowStartTime) == null) {\n+      GarbageCollectorInfoSnapshot gcSnap = new GarbageCollectorInfoSnapshot(conn, currWindowStartTime);\n+      gcInfoMap.put(currWindowStartTime, gcSnap);\n+\n+      return new GarbageCollectorInfoProcessor(gcSnap);\n+    }\n+\n+    return new GarbageCollectorInfoProcessor(gcInfoMap.get(currWindowStartTime));\n+  }\n+\n+  @Override\n+  public void initializeProcessing(long startTime, long endTime) {\n+    this.startTime = startTime;\n+    this.endTime = endTime;\n+    this.handle = gcSnap.startBatchPut();\n+  }\n+\n+  @Override\n+  public void finalizeProcessing() {\n+    if (handle.size() > 0) {\n+      handle.execute();\n+\n+      Result<Record> records = gcSnap.fetchAll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a7a8e45f87f2fe57208c19e60781f7a4bc3f65"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NzIzNg==", "bodyText": "that's a debug artifact. Removed now.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/438#discussion_r496067236", "createdAt": "2020-09-28T16:07:22Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/GarbageCollectorInfoProcessor.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCInfoDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.util.JsonConverter;\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+\n+public class GarbageCollectorInfoProcessor implements EventProcessor {\n+\n+  private static final Logger LOG = LogManager.getLogger(GarbageCollectorInfoProcessor.class);\n+\n+  private GarbageCollectorInfoSnapshot gcSnap;\n+  private BatchBindStep handle;\n+  private long startTime;\n+  private long endTime;\n+\n+  private GarbageCollectorInfoProcessor(GarbageCollectorInfoSnapshot gcSnap) {\n+    this.gcSnap = gcSnap;\n+  }\n+\n+  static GarbageCollectorInfoProcessor buildGarbageCollectorInfoProcessor(\n+      long currWindowStartTime,\n+      Connection conn,\n+      NavigableMap<Long, GarbageCollectorInfoSnapshot> gcInfoMap) {\n+    if (gcInfoMap.get(currWindowStartTime) == null) {\n+      GarbageCollectorInfoSnapshot gcSnap = new GarbageCollectorInfoSnapshot(conn, currWindowStartTime);\n+      gcInfoMap.put(currWindowStartTime, gcSnap);\n+\n+      return new GarbageCollectorInfoProcessor(gcSnap);\n+    }\n+\n+    return new GarbageCollectorInfoProcessor(gcInfoMap.get(currWindowStartTime));\n+  }\n+\n+  @Override\n+  public void initializeProcessing(long startTime, long endTime) {\n+    this.startTime = startTime;\n+    this.endTime = endTime;\n+    this.handle = gcSnap.startBatchPut();\n+  }\n+\n+  @Override\n+  public void finalizeProcessing() {\n+    if (handle.size() > 0) {\n+      handle.execute();\n+\n+      Result<Record> records = gcSnap.fetchAll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI4Nzk0Mg=="}, "originalCommit": {"oid": "c8a7a8e45f87f2fe57208c19e60781f7a4bc3f65"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5OTk4NjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/GarbageCollectorInfoProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjo0MDo1OVrOHYWGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjowNzozOFrOHZFjeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI4OTkxOQ==", "bodyText": "nit: can't this just be a call to commitBatchIfRequired()?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/438#discussion_r495289919", "createdAt": "2020-09-25T22:40:59Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/GarbageCollectorInfoProcessor.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCInfoDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.util.JsonConverter;\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+\n+public class GarbageCollectorInfoProcessor implements EventProcessor {\n+\n+  private static final Logger LOG = LogManager.getLogger(GarbageCollectorInfoProcessor.class);\n+\n+  private GarbageCollectorInfoSnapshot gcSnap;\n+  private BatchBindStep handle;\n+  private long startTime;\n+  private long endTime;\n+\n+  private GarbageCollectorInfoProcessor(GarbageCollectorInfoSnapshot gcSnap) {\n+    this.gcSnap = gcSnap;\n+  }\n+\n+  static GarbageCollectorInfoProcessor buildGarbageCollectorInfoProcessor(\n+      long currWindowStartTime,\n+      Connection conn,\n+      NavigableMap<Long, GarbageCollectorInfoSnapshot> gcInfoMap) {\n+    if (gcInfoMap.get(currWindowStartTime) == null) {\n+      GarbageCollectorInfoSnapshot gcSnap = new GarbageCollectorInfoSnapshot(conn, currWindowStartTime);\n+      gcInfoMap.put(currWindowStartTime, gcSnap);\n+\n+      return new GarbageCollectorInfoProcessor(gcSnap);\n+    }\n+\n+    return new GarbageCollectorInfoProcessor(gcInfoMap.get(currWindowStartTime));\n+  }\n+\n+  @Override\n+  public void initializeProcessing(long startTime, long endTime) {\n+    this.startTime = startTime;\n+    this.endTime = endTime;\n+    this.handle = gcSnap.startBatchPut();\n+  }\n+\n+  @Override\n+  public void finalizeProcessing() {\n+    if (handle.size() > 0) {\n+      handle.execute();\n+\n+      Result<Record> records = gcSnap.fetchAll();\n+    }\n+  }\n+\n+  @Override\n+  public void processEvent(Event event) {\n+    handleGarbageCollectorInfoEvent(event);\n+    if (handle.size() >= BATCH_LIMIT) {\n+      handle.execute();\n+      handle = gcSnap.startBatchPut();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a7a8e45f87f2fe57208c19e60781f7a4bc3f65"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NzQ0OQ==", "bodyText": "yup. changed it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/438#discussion_r496067449", "createdAt": "2020-09-28T16:07:38Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/GarbageCollectorInfoProcessor.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCInfoDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.util.JsonConverter;\n+import java.sql.Connection;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+\n+public class GarbageCollectorInfoProcessor implements EventProcessor {\n+\n+  private static final Logger LOG = LogManager.getLogger(GarbageCollectorInfoProcessor.class);\n+\n+  private GarbageCollectorInfoSnapshot gcSnap;\n+  private BatchBindStep handle;\n+  private long startTime;\n+  private long endTime;\n+\n+  private GarbageCollectorInfoProcessor(GarbageCollectorInfoSnapshot gcSnap) {\n+    this.gcSnap = gcSnap;\n+  }\n+\n+  static GarbageCollectorInfoProcessor buildGarbageCollectorInfoProcessor(\n+      long currWindowStartTime,\n+      Connection conn,\n+      NavigableMap<Long, GarbageCollectorInfoSnapshot> gcInfoMap) {\n+    if (gcInfoMap.get(currWindowStartTime) == null) {\n+      GarbageCollectorInfoSnapshot gcSnap = new GarbageCollectorInfoSnapshot(conn, currWindowStartTime);\n+      gcInfoMap.put(currWindowStartTime, gcSnap);\n+\n+      return new GarbageCollectorInfoProcessor(gcSnap);\n+    }\n+\n+    return new GarbageCollectorInfoProcessor(gcInfoMap.get(currWindowStartTime));\n+  }\n+\n+  @Override\n+  public void initializeProcessing(long startTime, long endTime) {\n+    this.startTime = startTime;\n+    this.endTime = endTime;\n+    this.handle = gcSnap.startBatchPut();\n+  }\n+\n+  @Override\n+  public void finalizeProcessing() {\n+    if (handle.size() > 0) {\n+      handle.execute();\n+\n+      Result<Record> records = gcSnap.fetchAll();\n+    }\n+  }\n+\n+  @Override\n+  public void processEvent(Event event) {\n+    handleGarbageCollectorInfoEvent(event);\n+    if (handle.size() >= BATCH_LIMIT) {\n+      handle.execute();\n+      handle = gcSnap.startBatchPut();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI4OTkxOQ=="}, "originalCommit": {"oid": "c8a7a8e45f87f2fe57208c19e60781f7a4bc3f65"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2404, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}