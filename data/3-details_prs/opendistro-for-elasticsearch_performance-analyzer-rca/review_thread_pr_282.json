{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNDMwNTk2", "number": 282, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToxNDoxMVrOEPREKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToxOToxNVrOEPRKyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDQzNjkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToxNDoxMVrOGy43BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDozOTowNFrOGy77ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMzU3Mg==", "bodyText": "Shouldn't this be error ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/282#discussion_r456013572", "createdAt": "2020-07-16T19:14:11Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -211,7 +212,7 @@ private void rotateRegisterGarbageThenCreateNewDB(RotationType type) throws IOEx\n       T flowUnit, String tableName) throws SQLException, IOException {\n     try {\n         tryWriteFlowUnit(flowUnit, tableName);\n-    } catch (SQLException e) {\n+    } catch (SQLException | DataAccessException e) {\n       LOG.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20e03329b8fef61d457b21ce3bc5d5693989bc75"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2Mzg0NA==", "bodyText": "updated the error log", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/282#discussion_r456063844", "createdAt": "2020-07-16T20:39:04Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -211,7 +212,7 @@ private void rotateRegisterGarbageThenCreateNewDB(RotationType type) throws IOEx\n       T flowUnit, String tableName) throws SQLException, IOException {\n     try {\n         tryWriteFlowUnit(flowUnit, tableName);\n-    } catch (SQLException e) {\n+    } catch (SQLException | DataAccessException e) {\n       LOG.info(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxMzU3Mg=="}, "originalCommit": {"oid": "20e03329b8fef61d457b21ce3bc5d5693989bc75"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDQ1Mzg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistFlowUnitAndSummaryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxOToxOToxNVrOGy5Byg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo0MDo0MFrOGy7_Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxNjMzMA==", "bodyText": "I see that HighHeapUsageClusterRcaX node is created in the construct but it is removed from verification here. Can you add a code-comment with the reason ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/282#discussion_r456016330", "createdAt": "2020-07-16T19:19:15Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistFlowUnitAndSummaryTest.java", "diffHunk": "@@ -176,35 +176,44 @@ private AppContext createAppContextWithDataNodes(String nodeName, NodeRole role)\n     return appContext;\n   }\n \n+  /**\n+   * Add testPersistSummaryOnDataNode() and testPersistSummaryOnMasterNode() into a single UT\n+   * This will force both tests to run in sequential and can avoid access contention to the\n+   * same db file.\n+   * @throws Exception SQL exception\n+   */\n   @Test\n-  public void testPersistSummaryOnDataNode() throws Exception {\n-    AppContext appContext = createAppContextWithDataNodes(\"node1\", NodeRole.DATA);\n-\n-    AnalysisGraph graph = new DataNodeGraph();\n+  public void testPersisSummary() throws Exception {\n     RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"rca.conf\").toString());\n+    RcaConf masterRcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"rca_elected_master.conf\").toString());\n     Persistable persistable = PersistenceFactory.create(rcaConf);\n+    testPersistSummaryOnDataNode(rcaConf, persistable);\n+    testPersistSummaryOnMasterNode(masterRcaConf, persistable);\n+    persistable.close();\n+  }\n+\n+  private void testPersistSummaryOnDataNode(RcaConf rcaConf, Persistable persistable) throws Exception {\n+    AppContext appContext = createAppContextWithDataNodes(\"node1\", NodeRole.DATA, false);\n+\n+    AnalysisGraph graph = new DataNodeGraph();\n     RCAScheduler scheduler = startScheduler(rcaConf, graph, persistable, this.queryable, appContext);\n     // Wait at most 1 minute for the persisted data to show up with the correct contents\n     WaitFor.waitFor(() -> {\n       String readTableStr = persistable.read();\n       System.out.println(readTableStr);\n       if (readTableStr != null) {\n         return readTableStr.contains(\"HotResourceSummary\") && readTableStr.contains(\"DummyYoungGenRca\")\n-                && readTableStr.contains(\"HotNodeSummary\") && readTableStr.contains(\"HotNodeRcaX\")\n-                && readTableStr.contains(\"HighHeapUsageClusterRcaX\");\n+                && readTableStr.contains(\"HotNodeSummary\") && readTableStr.contains(\"HotNodeRcaX\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20e03329b8fef61d457b21ce3bc5d5693989bc75"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2NDgzNQ==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/282#discussion_r456064835", "createdAt": "2020-07-16T20:40:40Z", "author": {"login": "rguo-aws"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistFlowUnitAndSummaryTest.java", "diffHunk": "@@ -176,35 +176,44 @@ private AppContext createAppContextWithDataNodes(String nodeName, NodeRole role)\n     return appContext;\n   }\n \n+  /**\n+   * Add testPersistSummaryOnDataNode() and testPersistSummaryOnMasterNode() into a single UT\n+   * This will force both tests to run in sequential and can avoid access contention to the\n+   * same db file.\n+   * @throws Exception SQL exception\n+   */\n   @Test\n-  public void testPersistSummaryOnDataNode() throws Exception {\n-    AppContext appContext = createAppContextWithDataNodes(\"node1\", NodeRole.DATA);\n-\n-    AnalysisGraph graph = new DataNodeGraph();\n+  public void testPersisSummary() throws Exception {\n     RcaConf rcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"rca.conf\").toString());\n+    RcaConf masterRcaConf = new RcaConf(Paths.get(RcaConsts.TEST_CONFIG_PATH, \"rca_elected_master.conf\").toString());\n     Persistable persistable = PersistenceFactory.create(rcaConf);\n+    testPersistSummaryOnDataNode(rcaConf, persistable);\n+    testPersistSummaryOnMasterNode(masterRcaConf, persistable);\n+    persistable.close();\n+  }\n+\n+  private void testPersistSummaryOnDataNode(RcaConf rcaConf, Persistable persistable) throws Exception {\n+    AppContext appContext = createAppContextWithDataNodes(\"node1\", NodeRole.DATA, false);\n+\n+    AnalysisGraph graph = new DataNodeGraph();\n     RCAScheduler scheduler = startScheduler(rcaConf, graph, persistable, this.queryable, appContext);\n     // Wait at most 1 minute for the persisted data to show up with the correct contents\n     WaitFor.waitFor(() -> {\n       String readTableStr = persistable.read();\n       System.out.println(readTableStr);\n       if (readTableStr != null) {\n         return readTableStr.contains(\"HotResourceSummary\") && readTableStr.contains(\"DummyYoungGenRca\")\n-                && readTableStr.contains(\"HotNodeSummary\") && readTableStr.contains(\"HotNodeRcaX\")\n-                && readTableStr.contains(\"HighHeapUsageClusterRcaX\");\n+                && readTableStr.contains(\"HotNodeSummary\") && readTableStr.contains(\"HotNodeRcaX\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjAxNjMzMA=="}, "originalCommit": {"oid": "20e03329b8fef61d457b21ce3bc5d5693989bc75"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2526, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}