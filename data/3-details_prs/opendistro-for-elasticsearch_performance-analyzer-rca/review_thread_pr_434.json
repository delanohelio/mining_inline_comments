{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTcxMTE3", "number": 434, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1NjowOVrOEnJ-8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTozMjoyNlrOEpLKzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDkzNDkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/Host.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1NjowOVrOHXmP8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzo0OToyMlrOHXwTjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNTk2OQ==", "bodyText": "Do we not want to do anything with the thrown exception ? If not, we might want to add a code comment as why", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494505969", "createdAt": "2020-09-24T17:56:09Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/Host.java", "diffHunk": "@@ -368,6 +368,14 @@ public JsonElement getDataForRca(String rcaName) {\n     return obj;\n   }\n \n+  public <T> T constructObjectFromDB(Class<T> className) {\n+    try {\n+      return this.rcaController.getPersistenceProvider().read(className);\n+    } catch (Exception e) {\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3MDczNQ==", "bodyText": "Throwing here and added a check on RcaItRunnerBase stage. Added a code comment on why we want to ignore the exception", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494670735", "createdAt": "2020-09-24T23:49:22Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/Host.java", "diffHunk": "@@ -368,6 +368,14 @@ public JsonElement getDataForRca(String rcaName) {\n     return obj;\n   }\n \n+  public <T> T constructObjectFromDB(Class<T> className) {\n+    try {\n+      return this.rcaController.getPersistenceProvider().read(className);\n+    } catch (Exception e) {\n+      return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNTk2OQ=="}, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDk2MDM2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AExpect.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODowMzoyNlrOHXmgHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzozNjowMlrOHXwEYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMDEwOQ==", "bodyText": "we might want to say DB_QUERY.\nI hope our persistence layer is pluggable enough that we can swap out sqlite for anything quite easily :)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494510109", "createdAt": "2020-09-24T18:03:26Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AExpect.java", "diffHunk": "@@ -53,7 +53,8 @@\n    * Currently supported places to look for RCA outputs are the SQLite file or by hitting the rest endpoint.\n    */\n   enum Type {\n-    REST_API\n+    REST_API,\n+    SQLITE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2Njg0OA==", "bodyText": "Right. Modified to DB_QUERY", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494666848", "createdAt": "2020-09-24T23:36:02Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AExpect.java", "diffHunk": "@@ -53,7 +53,8 @@\n    * Currently supported places to look for RCA outputs are the SQLite file or by hitting the rest endpoint.\n    */\n   enum Type {\n-    REST_API\n+    REST_API,\n+    SQLITE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxMDEwOQ=="}, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTExMzA0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MDo0MlrOHXn_3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzozNzo1OFrOHXwGrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNDYyMA==", "bodyText": "If we have to type-cast then this is not the right case of generics.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494534620", "createdAt": "2020-09-24T18:40:42Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class FieldDataCacheDeciderValidator implements IValidator {\n+    long startTime;\n+\n+    public FieldDataCacheDeciderValidator() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":{node1},\n+     * \"nodeIp\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    @Override\n+    public <T> boolean check(T response) {\n+        if (response == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2NzQzNg==", "bodyText": "Creating two methods in IValidator, for checkJsonResponse and checkQueryResp.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494667436", "createdAt": "2020-09-24T23:37:58Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class FieldDataCacheDeciderValidator implements IValidator {\n+    long startTime;\n+\n+    public FieldDataCacheDeciderValidator() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":{node1},\n+     * \"nodeIp\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    @Override\n+    public <T> boolean check(T response) {\n+        if (response == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) response;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNDYyMA=="}, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTExODQ1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/queue_tuning/validator/QueueRejectionValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MjoxMFrOHXoDBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo0MjoxMFrOHXoDBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNTQzMQ==", "bodyText": "same here as well", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r494535431", "createdAt": "2020-09-24T18:42:10Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/queue_tuning/validator/QueueRejectionValidator.java", "diffHunk": "@@ -46,7 +46,8 @@ public QueueRejectionValidator() {\n    * ]}\n    */\n   @Override\n-  public boolean check(JsonElement response) {\n+  public <T> boolean check(T responseObject) {\n+    JsonElement response = (JsonElement) responseObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5595d8219887252fddb68540708331d1e4a33b96"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjY3MDQ5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMTo1OToyNFrOHZRT6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTo0MToyOFrOHZVWDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDA3NA==", "bodyText": "Do we need these in a FieldData cache test IT?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496260074", "createdAt": "2020-09-28T21:59:24Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNjE1OA==", "bodyText": "same as below. Removing these metrics.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496326158", "createdAt": "2020-09-29T01:41:28Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDA3NA=="}, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNjY3MzU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjowMDoyNVrOHZRVqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODowNzoxNVrOHapeWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDUyMA==", "bodyText": "Same as above, is this needed for fielddata cache it", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496260520", "createdAt": "2020-09-28T22:00:25Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwNDUzNw==", "bodyText": "We might not need this. Removing these metrics.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497704537", "createdAt": "2020-09-30T18:07:15Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDUyMA=="}, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzAyNTg1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1MDozNlrOHZUhzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoxNjoyOFrOHapx8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMjc4Mw==", "bodyText": "If we add the relevant metric values for them, will these caches get populated. By skipping this error in integ tests we expose ourselves to these failures in actual clusters.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496312783", "createdAt": "2020-09-29T00:50:36Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Hit.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Max_Size.class,\n+        dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Heap_Max.class,\n+        dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        })\n+        })\n+\n+public class FieldDataCacheDeciderITest {\n+    public static final String CACHE_TUNING_RESOURCES_DIR = Consts.INTEG_TESTS_SRC_DIR + \"./tests/cache_tuning/resource/\";\n+    public static final String INDEX_NAME = \"MockIndex\";\n+    public static final String SHARD_ID = \"1\";\n+\n+    // Test CacheDecider for ModifyCacheAction (field data cache).\n+    // The cache decider should emit modify cache size action as field data rca is unhealthy.\n+    @Test\n+    @AExpect(\n+            what = AExpect.Type.DB_QUERY,\n+            on = HostTag.ELECTED_MASTER,\n+            validator = FieldDataCacheDeciderValidator.class,\n+            forRca = PersistedAction.class,\n+            timeoutSeconds = 1000)\n+    @AErrorPatternIgnored(\n+            pattern = \"AggregateMetric:gather()\",\n+            reason = \"CPU metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"Metric:gather()\",\n+            reason = \"Metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"NodeConfigCacheReaderUtil\",\n+            reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"CacheUtil:getCacheMaxSize()\",\n+            reason = \"Node Config Cache is expected to be missing during startup.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 241}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwOTU1NA==", "bodyText": "I have removed un-wanted metrics (gives us a clearer understanding of what metrics are related to the decider). Having these errors. In case we get these errors, our validations will eventually fail.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497709554", "createdAt": "2020-09-30T18:16:28Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Hit.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Max_Size.class,\n+        dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Heap_Max.class,\n+        dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        })\n+        })\n+\n+public class FieldDataCacheDeciderITest {\n+    public static final String CACHE_TUNING_RESOURCES_DIR = Consts.INTEG_TESTS_SRC_DIR + \"./tests/cache_tuning/resource/\";\n+    public static final String INDEX_NAME = \"MockIndex\";\n+    public static final String SHARD_ID = \"1\";\n+\n+    // Test CacheDecider for ModifyCacheAction (field data cache).\n+    // The cache decider should emit modify cache size action as field data rca is unhealthy.\n+    @Test\n+    @AExpect(\n+            what = AExpect.Type.DB_QUERY,\n+            on = HostTag.ELECTED_MASTER,\n+            validator = FieldDataCacheDeciderValidator.class,\n+            forRca = PersistedAction.class,\n+            timeoutSeconds = 1000)\n+    @AErrorPatternIgnored(\n+            pattern = \"AggregateMetric:gather()\",\n+            reason = \"CPU metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"Metric:gather()\",\n+            reason = \"Metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"NodeConfigCacheReaderUtil\",\n+            reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"CacheUtil:getCacheMaxSize()\",\n+            reason = \"Node Config Cache is expected to be missing during startup.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMjc4Mw=="}, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 241}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzAyOTA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1MjoyMlrOHZUjsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTozMDozMFrOHZVKzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzI2NA==", "bodyText": "Why is this error expected in CacheHealthDecider rca?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496313264", "createdAt": "2020-09-29T00:52:22Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Hit.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Max_Size.class,\n+        dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Heap_Max.class,\n+        dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        })\n+        })\n+\n+public class FieldDataCacheDeciderITest {\n+    public static final String CACHE_TUNING_RESOURCES_DIR = Consts.INTEG_TESTS_SRC_DIR + \"./tests/cache_tuning/resource/\";\n+    public static final String INDEX_NAME = \"MockIndex\";\n+    public static final String SHARD_ID = \"1\";\n+\n+    // Test CacheDecider for ModifyCacheAction (field data cache).\n+    // The cache decider should emit modify cache size action as field data rca is unhealthy.\n+    @Test\n+    @AExpect(\n+            what = AExpect.Type.DB_QUERY,\n+            on = HostTag.ELECTED_MASTER,\n+            validator = FieldDataCacheDeciderValidator.class,\n+            forRca = PersistedAction.class,\n+            timeoutSeconds = 1000)\n+    @AErrorPatternIgnored(\n+            pattern = \"AggregateMetric:gather()\",\n+            reason = \"CPU metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"Metric:gather()\",\n+            reason = \"Metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"NodeConfigCacheReaderUtil\",\n+            reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"CacheUtil:getCacheMaxSize()\",\n+            reason = \"Node Config Cache is expected to be missing during startup.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SubscribeResponseHandler:onError()\",\n+            reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+            reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"HighHeapUsageOldGenRca:operate()\",\n+            reason = \"Old gen rca is expected to be missing in this integ test.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMzI3OQ==", "bodyText": "We have heap metrics due to which old gen rca gets triggered and throws errors during operate.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496323279", "createdAt": "2020-09-29T01:30:30Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Hit.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Max_Size.class,\n+        dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Heap_Max.class,\n+        dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        })\n+        })\n+\n+public class FieldDataCacheDeciderITest {\n+    public static final String CACHE_TUNING_RESOURCES_DIR = Consts.INTEG_TESTS_SRC_DIR + \"./tests/cache_tuning/resource/\";\n+    public static final String INDEX_NAME = \"MockIndex\";\n+    public static final String SHARD_ID = \"1\";\n+\n+    // Test CacheDecider for ModifyCacheAction (field data cache).\n+    // The cache decider should emit modify cache size action as field data rca is unhealthy.\n+    @Test\n+    @AExpect(\n+            what = AExpect.Type.DB_QUERY,\n+            on = HostTag.ELECTED_MASTER,\n+            validator = FieldDataCacheDeciderValidator.class,\n+            forRca = PersistedAction.class,\n+            timeoutSeconds = 1000)\n+    @AErrorPatternIgnored(\n+            pattern = \"AggregateMetric:gather()\",\n+            reason = \"CPU metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"Metric:gather()\",\n+            reason = \"Metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"NodeConfigCacheReaderUtil\",\n+            reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"CacheUtil:getCacheMaxSize()\",\n+            reason = \"Node Config Cache is expected to be missing during startup.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SubscribeResponseHandler:onError()\",\n+            reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+            reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"HighHeapUsageOldGenRca:operate()\",\n+            reason = \"Old gen rca is expected to be missing in this integ test.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzI2NA=="}, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzAyOTc2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1Mjo0NVrOHZUkFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoxOTowM1rOHap2_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzM2NQ==", "bodyText": "Can we make the Node Config cache available in IT?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496313365", "createdAt": "2020-09-29T00:52:45Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Hit.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Max_Size.class,\n+        dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Heap_Max.class,\n+        dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        })\n+        })\n+\n+public class FieldDataCacheDeciderITest {\n+    public static final String CACHE_TUNING_RESOURCES_DIR = Consts.INTEG_TESTS_SRC_DIR + \"./tests/cache_tuning/resource/\";\n+    public static final String INDEX_NAME = \"MockIndex\";\n+    public static final String SHARD_ID = \"1\";\n+\n+    // Test CacheDecider for ModifyCacheAction (field data cache).\n+    // The cache decider should emit modify cache size action as field data rca is unhealthy.\n+    @Test\n+    @AExpect(\n+            what = AExpect.Type.DB_QUERY,\n+            on = HostTag.ELECTED_MASTER,\n+            validator = FieldDataCacheDeciderValidator.class,\n+            forRca = PersistedAction.class,\n+            timeoutSeconds = 1000)\n+    @AErrorPatternIgnored(\n+            pattern = \"AggregateMetric:gather()\",\n+            reason = \"CPU metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"Metric:gather()\",\n+            reason = \"Metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"NodeConfigCacheReaderUtil\",\n+            reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"CacheUtil:getCacheMaxSize()\",\n+            reason = \"Node Config Cache is expected to be missing during startup.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SubscribeResponseHandler:onError()\",\n+            reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+            reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"HighHeapUsageOldGenRca:operate()\",\n+            reason = \"Old gen rca is expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"ModifyCacheMaxSizeAction:build()\",\n+            reason = \"Node Config Cache metrics is expected to be missing during startup\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxMDg0NQ==", "bodyText": "All cache metrics are available in node config cache. But during shutdown, node config cache gets cleared before stopping the deciders and hence we are seeing this error.\nRe-running the tests, makes the tests pass. Adding this to avoid flaky tests.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497710845", "createdAt": "2020-09-30T18:19:03Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/FieldDataCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.FieldDataCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = FieldDataCacheDeciderITest.CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Hit.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0),\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Max_Size.class,\n+        dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0),\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                                        sum = 10000.0, avg = 10000.0, min = 10000.0, max = 10000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Heap_Max.class,\n+        dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0),\n+                                @ATuple(\n+                                        dimensionValues = {AllMetrics.GCType.Constants.HEAP_VALUE},\n+                                        sum = 1000000.0, avg = 1000000.0, min = 1000000.0, max = 1000000.0)\n+                        })\n+        })\n+\n+public class FieldDataCacheDeciderITest {\n+    public static final String CACHE_TUNING_RESOURCES_DIR = Consts.INTEG_TESTS_SRC_DIR + \"./tests/cache_tuning/resource/\";\n+    public static final String INDEX_NAME = \"MockIndex\";\n+    public static final String SHARD_ID = \"1\";\n+\n+    // Test CacheDecider for ModifyCacheAction (field data cache).\n+    // The cache decider should emit modify cache size action as field data rca is unhealthy.\n+    @Test\n+    @AExpect(\n+            what = AExpect.Type.DB_QUERY,\n+            on = HostTag.ELECTED_MASTER,\n+            validator = FieldDataCacheDeciderValidator.class,\n+            forRca = PersistedAction.class,\n+            timeoutSeconds = 1000)\n+    @AErrorPatternIgnored(\n+            pattern = \"AggregateMetric:gather()\",\n+            reason = \"CPU metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"Metric:gather()\",\n+            reason = \"Metrics are expected to be missing in this integ test\")\n+    @AErrorPatternIgnored(\n+            pattern = \"NodeConfigCacheReaderUtil\",\n+            reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"CacheUtil:getCacheMaxSize()\",\n+            reason = \"Node Config Cache is expected to be missing during startup.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SubscribeResponseHandler:onError()\",\n+            reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+    @AErrorPatternIgnored(\n+            pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+            reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"HighHeapUsageOldGenRca:operate()\",\n+            reason = \"Old gen rca is expected to be missing in this integ test.\")\n+    @AErrorPatternIgnored(\n+            pattern = \"ModifyCacheMaxSizeAction:build()\",\n+            reason = \"Node Config Cache metrics is expected to be missing during startup\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxMzM2NQ=="}, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzAzNDY5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1NToyMFrOHZUm0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoyMDowNVrOHap5YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDA2NQ==", "bodyText": "Instead of this, we should write the ModifyCacheMaxSizeAction.from_summar() method, and validate that action here.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496314065", "createdAt": "2020-09-29T00:55:20Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class FieldDataCacheDeciderValidator implements IValidator {\n+    long startTime;\n+\n+    public FieldDataCacheDeciderValidator() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":{node1},\n+     * \"nodeIp\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    @Override\n+    public boolean checkDbObj(Object object) {\n+        if (object == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) object;\n+        return checkPersistedAction(persistedAction);\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeIds\":{node1},\n+     * \"nodeIps\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     *\n+     */\n+    private boolean checkPersistedAction(final PersistedAction persistedAction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxMTQ1Ng==", "bodyText": "Added from_summary method, and using that method for validations.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497711456", "createdAt": "2020-09-30T18:20:05Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class FieldDataCacheDeciderValidator implements IValidator {\n+    long startTime;\n+\n+    public FieldDataCacheDeciderValidator() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":{node1},\n+     * \"nodeIp\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    @Override\n+    public boolean checkDbObj(Object object) {\n+        if (object == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) object;\n+        return checkPersistedAction(persistedAction);\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeIds\":{node1},\n+     * \"nodeIps\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     *\n+     */\n+    private boolean checkPersistedAction(final PersistedAction persistedAction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDA2NQ=="}, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzAzNTE5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/ShardRequestCacheDeciderValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1NTo0MFrOHZUnIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODoyMDoyOVrOHap6KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDE0Nw==", "bodyText": "Same as FD cache", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496314147", "createdAt": "2020-09-29T00:55:40Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/ShardRequestCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class ShardRequestCacheDeciderValidator implements IValidator {\n+    long startTime;\n+\n+    public ShardRequestCacheDeciderValidator() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":11,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":\"node1\",\n+     * \"nodeIp\":1.1.1.1,\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000,\n+     * \"muted\": 1,\n+     * \"summary\": Update [SHARD_REQUEST_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    @Override\n+    public boolean checkDbObj(Object object) {\n+        if (object == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) object;\n+        return checkPersistedAction(persistedAction);\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":11,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":\"node1\",\n+     * \"nodeIp\":1.1.1.1,\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000,\n+     * \"muted\": 1\n+     * \"summary\": Update [SHARD_REQUEST_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    private boolean checkPersistedAction(final PersistedAction persistedAction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxMTY1Nw==", "bodyText": "Added from_summary method and using for validations.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497711657", "createdAt": "2020-09-30T18:20:29Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/ShardRequestCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class ShardRequestCacheDeciderValidator implements IValidator {\n+    long startTime;\n+\n+    public ShardRequestCacheDeciderValidator() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":11,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":\"node1\",\n+     * \"nodeIp\":1.1.1.1,\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000,\n+     * \"muted\": 1,\n+     * \"summary\": Update [SHARD_REQUEST_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    @Override\n+    public boolean checkDbObj(Object object) {\n+        if (object == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) object;\n+        return checkPersistedAction(persistedAction);\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":11,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":\"node1\",\n+     * \"nodeIp\":1.1.1.1,\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000,\n+     * \"muted\": 1\n+     * \"summary\": Update [SHARD_REQUEST_CACHE] capacity from [10000] to [100000] on node [DATA_0]\n+     */\n+    private boolean checkPersistedAction(final PersistedAction persistedAction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDE0Nw=="}, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzAzNjc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/ShardRequestCacheDeciderITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1NjozNVrOHZUoBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTo0MzowNVrOHZVXmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDM3NQ==", "bodyText": "We should also add tests for the other two cluster types - SINGLE_NODE and MULTI_NODE_DEDICATED_MASTER.\nMULTI_NODE_DEDICATED_MASTER is particularly important.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496314375", "createdAt": "2020-09-29T00:56:35Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/ShardRequestCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.ShardRequestCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.ShardRequestCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyNjU1Mg==", "bodyText": "Right. I have added dedicated master tests to this PR. I will create a new PR for single node clusters. I am seeing some errors with them.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496326552", "createdAt": "2020-09-29T01:43:05Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/ShardRequestCacheDeciderITest.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.ShardRequestCacheDeciderITest.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.ShardRequestCacheDeciderITest.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDM3NQ=="}, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA0MDQyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AExpect.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMDo1ODo0OVrOHZUqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTowMjoxNVrOHarVpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDkzMQ==", "bodyText": "Why are we making it a generic DB_QUERY? Can we instead make it an Action since that is what we persist in the table. And use from_summary() methods to create actions from summary.\nThe summary will contain entire details of the action which may create some redundancy with existing columns in the persisted action table, but that should be fine.\nI think this IT PR should also include the change to create actions from summary strings, and use them for validation.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r496314931", "createdAt": "2020-09-29T00:58:49Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AExpect.java", "diffHunk": "@@ -53,7 +53,8 @@\n    * Currently supported places to look for RCA outputs are the SQLite file or by hitting the rest endpoint.\n    */\n   enum Type {\n-    REST_API\n+    REST_API,\n+    DB_QUERY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzczNTA3Nw==", "bodyText": "Retaining DB_QUERY to enable querying the sqlite tables. With regard to Action, after Action API is implemented (in progress presently), we will move to use the REST_API instead (like rca's ) instead of querying the tables.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497735077", "createdAt": "2020-09-30T19:02:15Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AExpect.java", "diffHunk": "@@ -53,7 +53,8 @@\n    * Currently supported places to look for RCA outputs are the SQLite file or by hitting the rest endpoint.\n    */\n   enum Type {\n-    REST_API\n+    REST_API,\n+    DB_QUERY", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNDkzMQ=="}, "originalCommit": {"oid": "3f1f0fe941c5c958b86b2ff0f8edfb22d600ce27"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjA4MTU2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyNzoxOVrOHasKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNzoyOTo0NlrOHbUVQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0ODUxNg==", "bodyText": "Does master node emit this metric for given dimensions, if you don't have any shards on the master node?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497748516", "createdAt": "2020-09-30T19:27:19Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.FieldDataCacheClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.ShardRequestCacheClusterRca;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjcyMA==", "bodyText": "Right. cache size metric, hits and evictions will be unable in dedicated master. Removing them", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r498406720", "createdAt": "2020-10-01T17:29:46Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.FieldDataCacheClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.ShardRequestCacheClusterRca;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0ODUxNg=="}, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjA4Nzk1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyOTowMFrOHasN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyOTowMFrOHasN6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0OTQ4Mg==", "bodyText": "Same as above, please confirm and remove if this metric is missing from dedicated master scenarios. We want to make sure the integ tests simulate actual cluster scenarios, and that there are no NPEs due to missing shards.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497749482", "createdAt": "2020-09-30T19:29:00Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.FieldDataCacheClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.ShardRequestCacheClusterRca;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjA4OTUzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyOToyMFrOHasOyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyOToyMFrOHasOyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0OTcwNA==", "bodyText": "Same as above, pls confirm metric is present on dedicated masters.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497749704", "createdAt": "2020-09-30T19:29:20Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.FieldDataCacheClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.ShardRequestCacheClusterRca;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjA5MDUxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyOTozMFrOHasPSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyOTozMFrOHasPSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0OTgzNA==", "bodyText": "Same as above, pls confirm metric is present on dedicated masters.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497749834", "createdAt": "2020-09-30T19:29:30Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/CacheRcaDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,253 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Hit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Request_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.Consts;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.ShardRequestCacheValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.FieldDataCacheClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.ShardRequestCacheClusterRca;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_FieldData_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 0.0, avg = 0.0, min = 0.0, max = 0.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 100.0, avg = 100.0, min = 100.0, max = 100.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 50.0, avg = 50.0, min = 50.0, max = 50.0)\n+                        })\n+        })\n+@AMetric(\n+        name = Cache_Request_Eviction.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 1.0, avg = 1.0, min = 1.0, max = 1.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjA5NjAxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/FieldDataCacheDeciderDedicatedMasterITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTozMDo1OVrOHasScg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTozMDo1OVrOHasScg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1MDY0Mg==", "bodyText": "Same as above, pls confirm metric is present on dedicated masters.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497750642", "createdAt": "2020-09-30T19:30:59Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/dedicated_master/FieldDataCacheDeciderDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.CACHE_TUNING_RESOURCES_DIR;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.Constants.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Eviction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_FieldData_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator.FieldDataCacheDeciderValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+//specify a custom rca.conf to set the collector time periods to 5s to reduce runtime\n+@ARcaConf(dataNode = CACHE_TUNING_RESOURCES_DIR + \"rca.conf\")\n+@AMetric(\n+        name = Cache_FieldData_Size.class,\n+        dimensionNames = {\n+                AllMetrics.CommonDimension.Constants.INDEX_NAME_VALUE,\n+                AllMetrics.CommonDimension.Constants.SHARDID_VALUE\n+        },\n+        tables = {\n+                @ATable(\n+                        hostTag = HostTag.DATA_0,\n+                        tuple = {\n+                                @ATuple(\n+                                        dimensionValues = {INDEX_NAME, SHARD_ID},\n+                                        sum = 8500.0, avg = 8500.0, min = 8500.0, max = 8500.0)\n+                        }),\n+                @ATable(\n+                        hostTag = {HostTag.ELECTED_MASTER},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjEwMDYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTozMjoyNlrOHasVTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOTozMjoyNlrOHasVTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1MTM3Mg==", "bodyText": "Nice, thanks for making this change.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/434#discussion_r497751372", "createdAt": "2020-09-30T19:32:26Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/cache_tuning/validator/FieldDataCacheDeciderValidator.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.cache_tuning.validator;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyCacheMaxSizeAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import org.junit.Assert;\n+\n+public class FieldDataCacheDeciderValidator implements IValidator {\n+    AppContext appContext;\n+    long startTime;\n+\n+    public FieldDataCacheDeciderValidator() {\n+        appContext = new AppContext();\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeId\":{node1},\n+     * \"nodeIp\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": \"Id\":\"DATA_0\",\"Ip\":\"127.0.0.1\",\"resource\":10,\"desiredCacheMaxSizeInBytes\":100000,\n+     *            \"currentCacheMaxSizeInBytes\":10000,\"coolOffPeriodInMillis\":300000,\"canUpdate\":true}\n+     */\n+    @Override\n+    public boolean checkDbObj(Object object) {\n+        if (object == null) {\n+            return false;\n+        }\n+        PersistedAction persistedAction = (PersistedAction) object;\n+        return checkPersistedAction(persistedAction);\n+    }\n+\n+    /**\n+     * {\"actionName\":\"ModifyCacheMaxSize\",\n+     * \"resourceValue\":10,\n+     * \"timestamp\":\"1599257910923\",\n+     * \"nodeIds\":{node1},\n+     * \"nodeIps\":{1.1.1.1},\n+     * \"actionable\":1,\n+     * \"coolOffPeriod\": 300000\n+     * \"muted\": 1\n+     * \"summary\": \"Id\":\"DATA_0\",\"Ip\":\"127.0.0.1\",\"resource\":10,\"desiredCacheMaxSizeInBytes\":100000,\n+     *            \"currentCacheMaxSizeInBytes\":10000,\"coolOffPeriodInMillis\":300000,\"canUpdate\":true}\n+     *\n+     */\n+    private boolean checkPersistedAction(final PersistedAction persistedAction) {\n+        ModifyCacheMaxSizeAction modifyCacheMaxSizeAction =\n+                ModifyCacheMaxSizeAction.fromSummary(persistedAction.getSummary(), appContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11b349a8530fec2faf974117bb0a9e079a81c449"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2398, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}