{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MDY2NjYw", "number": 274, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0ODo1N1rOEOysVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODowMjoxNVrOEOzBCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTQ2MDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/Node.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0ODo1N1rOGyJJ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo1MDoyOFrOGyJNyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMTk1OA==", "bodyText": "do wen need to check whether appContext is null here to avoid null pointer exception ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/274#discussion_r455231958", "createdAt": "2020-07-15T17:48:57Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/Node.java", "diffHunk": "@@ -187,4 +194,20 @@ public void setLocalFlowUnit(T localFlowUnit) {\n   public void readRcaConf(RcaConf conf) {\n     return;\n   }\n+\n+  public void setAppContext(final AppContext appContext) {\n+    this.appContext = appContext;\n+  }\n+\n+  public InstanceDetails getInstanceDetails() {\n+    return this.appContext.getMyInstanceDetails();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f34c413f5bee247c653169890d64dce8cb534d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMjk3MA==", "bodyText": "Thanks a lot @rguo-aws Will add it", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/274#discussion_r455232970", "createdAt": "2020-07-15T17:50:28Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/Node.java", "diffHunk": "@@ -187,4 +194,20 @@ public void setLocalFlowUnit(T localFlowUnit) {\n   public void readRcaConf(RcaConf conf) {\n     return;\n   }\n+\n+  public void setAppContext(final AppContext appContext) {\n+    this.appContext = appContext;\n+  }\n+\n+  public InstanceDetails getInstanceDetails() {\n+    return this.appContext.getMyInstanceDetails();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMTk1OA=="}, "originalCommit": {"oid": "74f34c413f5bee247c653169890d64dce8cb534d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTQ2NDY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/Node.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0OTo0OFrOGyJMHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDozNDoyOVrOGyV_Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMjU0Mg==", "bodyText": "add javadoc for this function ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/274#discussion_r455232542", "createdAt": "2020-07-15T17:49:48Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/Node.java", "diffHunk": "@@ -187,4 +194,20 @@ public void setLocalFlowUnit(T localFlowUnit) {\n   public void readRcaConf(RcaConf conf) {\n     return;\n   }\n+\n+  public void setAppContext(final AppContext appContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f34c413f5bee247c653169890d64dce8cb534d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ0MjE5NQ==", "bodyText": "Do we really want a javadoc for a setter ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/274#discussion_r455442195", "createdAt": "2020-07-16T00:34:29Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/Node.java", "diffHunk": "@@ -187,4 +194,20 @@ public void setLocalFlowUnit(T localFlowUnit) {\n   public void readRcaConf(RcaConf conf) {\n     return;\n   }\n+\n+  public void setAppContext(final AppContext appContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMjU0Mg=="}, "originalCommit": {"oid": "74f34c413f5bee247c653169890d64dce8cb534d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTUxMzY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/AppContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODowMjoxNVrOGyJqNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMDoyNDozNFrOGyV0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0MDI0Ng==", "bodyText": "Just a minor nit, should we return an immutable list here as well to be consistent?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/274#discussion_r455240246", "createdAt": "2020-07-15T18:02:15Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/AppContext.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The PA agent process is composed of multiple components. The PA Reader and RCA are two such components that are\n+ * independent in a way they process information but also share some information such as the node and the cluster\n+ * details. Today, some of these information is accessed by calling static methods and members. This is a bad idea.\n+ * This class encapsulates such information and is created right at the start in the {@code PerformanceAnalyzerApp}.\n+ */\n+public class AppContext {\n+  private volatile ClusterDetailsEventProcessor clusterDetailsEventProcessor;\n+\n+  @VisibleForTesting\n+  private volatile List<InstanceDetails> instances;\n+\n+  public AppContext() {\n+    this.clusterDetailsEventProcessor = null;\n+  }\n+\n+  public void setClusterDetailsEventProcessor(final ClusterDetailsEventProcessor clusterDetailsEventProcessor) {\n+    this.clusterDetailsEventProcessor = clusterDetailsEventProcessor;\n+  }\n+\n+  public InstanceDetails getMyInstanceDetails() {\n+    ClusterDetailsEventProcessor.NodeDetails nodeDetails = clusterDetailsEventProcessor.getCurrentNodeDetails();\n+\n+    InstanceDetails ret;\n+    if (nodeDetails == null) {\n+      ret = new InstanceDetails(AllMetrics.NodeRole.UNKNOWN);\n+    } else {\n+      ret = new InstanceDetails(\n+          AllMetrics.NodeRole.valueOf(nodeDetails.getRole()),\n+          nodeDetails.getId(),\n+          nodeDetails.getHostAddress(),\n+          nodeDetails.getIsMasterNode());\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Can be used to get all the nodes in the cluster.\n+   *\n+   * @return Returns an empty list of the details are not available or else it provides the immutable list of nodes in\n+   * the cluster.\n+   */\n+  public List<InstanceDetails> getAllClusterInstances() {\n+    return getInstanceDetailsFromNodeDetails(clusterDetailsEventProcessor.getNodesDetails());\n+  }\n+\n+  public List<InstanceDetails> getDataNodeInstances() {\n+    return getInstanceDetailsFromNodeDetails(clusterDetailsEventProcessor.getDataNodesDetails());\n+  }\n+\n+  private static List<InstanceDetails> getInstanceDetailsFromNodeDetails(\n+      final List<ClusterDetailsEventProcessor.NodeDetails> nodeDetails) {\n+    List<InstanceDetails> instances = new ArrayList<>();\n+\n+    for (ClusterDetailsEventProcessor.NodeDetails node : nodeDetails) {\n+      InstanceDetails instanceDetails = new InstanceDetails(\n+          AllMetrics.NodeRole.valueOf(node.getRole()), node.getId(), node.getHostAddress(), node.getIsMasterNode());\n+      instances.add(instanceDetails);\n+    }\n+    return ImmutableList.copyOf(instances);\n+  }\n+\n+  public List<String> getPeerInstanceIps() {\n+    return getAllClusterInstances().stream()\n+        .skip(1)  // Skipping the first instance as it is self.\n+        .map(InstanceDetails::getInstanceIp)\n+        .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74f34c413f5bee247c653169890d64dce8cb534d"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzOTQxMA==", "bodyText": "Sure ! will add", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/274#discussion_r455439410", "createdAt": "2020-07-16T00:24:34Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/AppContext.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The PA agent process is composed of multiple components. The PA Reader and RCA are two such components that are\n+ * independent in a way they process information but also share some information such as the node and the cluster\n+ * details. Today, some of these information is accessed by calling static methods and members. This is a bad idea.\n+ * This class encapsulates such information and is created right at the start in the {@code PerformanceAnalyzerApp}.\n+ */\n+public class AppContext {\n+  private volatile ClusterDetailsEventProcessor clusterDetailsEventProcessor;\n+\n+  @VisibleForTesting\n+  private volatile List<InstanceDetails> instances;\n+\n+  public AppContext() {\n+    this.clusterDetailsEventProcessor = null;\n+  }\n+\n+  public void setClusterDetailsEventProcessor(final ClusterDetailsEventProcessor clusterDetailsEventProcessor) {\n+    this.clusterDetailsEventProcessor = clusterDetailsEventProcessor;\n+  }\n+\n+  public InstanceDetails getMyInstanceDetails() {\n+    ClusterDetailsEventProcessor.NodeDetails nodeDetails = clusterDetailsEventProcessor.getCurrentNodeDetails();\n+\n+    InstanceDetails ret;\n+    if (nodeDetails == null) {\n+      ret = new InstanceDetails(AllMetrics.NodeRole.UNKNOWN);\n+    } else {\n+      ret = new InstanceDetails(\n+          AllMetrics.NodeRole.valueOf(nodeDetails.getRole()),\n+          nodeDetails.getId(),\n+          nodeDetails.getHostAddress(),\n+          nodeDetails.getIsMasterNode());\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Can be used to get all the nodes in the cluster.\n+   *\n+   * @return Returns an empty list of the details are not available or else it provides the immutable list of nodes in\n+   * the cluster.\n+   */\n+  public List<InstanceDetails> getAllClusterInstances() {\n+    return getInstanceDetailsFromNodeDetails(clusterDetailsEventProcessor.getNodesDetails());\n+  }\n+\n+  public List<InstanceDetails> getDataNodeInstances() {\n+    return getInstanceDetailsFromNodeDetails(clusterDetailsEventProcessor.getDataNodesDetails());\n+  }\n+\n+  private static List<InstanceDetails> getInstanceDetailsFromNodeDetails(\n+      final List<ClusterDetailsEventProcessor.NodeDetails> nodeDetails) {\n+    List<InstanceDetails> instances = new ArrayList<>();\n+\n+    for (ClusterDetailsEventProcessor.NodeDetails node : nodeDetails) {\n+      InstanceDetails instanceDetails = new InstanceDetails(\n+          AllMetrics.NodeRole.valueOf(node.getRole()), node.getId(), node.getHostAddress(), node.getIsMasterNode());\n+      instances.add(instanceDetails);\n+    }\n+    return ImmutableList.copyOf(instances);\n+  }\n+\n+  public List<String> getPeerInstanceIps() {\n+    return getAllClusterInstances().stream()\n+        .skip(1)  // Skipping the first instance as it is self.\n+        .map(InstanceDetails::getInstanceIp)\n+        .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0MDI0Ng=="}, "originalCommit": {"oid": "74f34c413f5bee247c653169890d64dce8cb534d"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2519, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}