{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzOTMyMTg1", "number": 295, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDoyMzo1NFrOEQatgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTozNTo0NVrOESkRQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjUwMzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDoyMzo1NFrOG0jtog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMjoxMjo1N1rOG3Risg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NDI1OA==", "bodyText": "should we make this list thread safe ? it looks to me that addActionListener() is called from a different thread.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/295#discussion_r457764258", "createdAt": "2020-07-21T00:23:54Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -30,10 +33,12 @@\n \n   private Collator collator;\n   private boolean isMuted = false;\n+  private List<ActionListener> actionListeners;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1e740c552da0a02e7800061f118c47331b9473"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxMjI3NA==", "bodyText": "It should only be called during instantiation of the graph, not during regular scheduling.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/295#discussion_r460612274", "createdAt": "2020-07-27T02:12:57Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -30,10 +33,12 @@\n \n   private Collator collator;\n   private boolean isMuted = false;\n+  private List<ActionListener> actionListeners;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NDI1OA=="}, "originalCommit": {"oid": "2c1e740c552da0a02e7800061f118c47331b9473"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjUxMDk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDoyNzo1M1rOG0jyGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMjoxMTozMlrOG3RhtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NTQwMA==", "bodyText": "maybe we should add an error log here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/295#discussion_r457765400", "createdAt": "2020-07-21T00:27:53Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginController.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.plugins;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ActionListener;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Publisher;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class PluginController {\n+\n+  private static final Logger LOG = LogManager.getLogger(PluginController.class);\n+  private final Publisher publisher;\n+  private List<Plugin> plugins;\n+\n+  public PluginController(Publisher publisher) {\n+    this.publisher = publisher;\n+    this.plugins = new ArrayList<>();\n+    loadFrameworkPlugins();\n+    registerActionListeners();\n+  }\n+\n+  private void loadFrameworkPlugins() {\n+    for (Class<?> pluginClass : PluginControllerConfig.getFrameworkPlugins()) {\n+      final Constructor<?>[] constructors = pluginClass.getConstructors();\n+      if (constructors.length == 0) {\n+        throw new IllegalStateException(\n+            \"no public constructor found for plugin class: [\" + pluginClass.getName() + \"]\");\n+      }\n+      if (constructors.length > 1) {\n+        throw new IllegalStateException(\n+            \"unique constructor expected for plugin class: [\" + pluginClass.getName() + \"]\");\n+      }\n+      if (constructors[0].getParameterCount() != 0) {\n+        throw new IllegalStateException(\n+            \"default constructor expected for plugin class: [\" + pluginClass.getName() + \"]\");\n+      }\n+\n+      try {\n+        plugins.add((Plugin) constructors[0].newInstance());\n+        LOG.info(\"loaded plugin: [{}]\", plugins.get(plugins.size() - 1).name());\n+      } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1e740c552da0a02e7800061f118c47331b9473"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQxMjE2NQ==", "bodyText": "^ seconded can we replace this with Log.error(\"message\", e)? That'll include the stacktrace.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/295#discussion_r458412165", "createdAt": "2020-07-21T21:56:47Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginController.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.plugins;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ActionListener;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Publisher;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class PluginController {\n+\n+  private static final Logger LOG = LogManager.getLogger(PluginController.class);\n+  private final Publisher publisher;\n+  private List<Plugin> plugins;\n+\n+  public PluginController(Publisher publisher) {\n+    this.publisher = publisher;\n+    this.plugins = new ArrayList<>();\n+    loadFrameworkPlugins();\n+    registerActionListeners();\n+  }\n+\n+  private void loadFrameworkPlugins() {\n+    for (Class<?> pluginClass : PluginControllerConfig.getFrameworkPlugins()) {\n+      final Constructor<?>[] constructors = pluginClass.getConstructors();\n+      if (constructors.length == 0) {\n+        throw new IllegalStateException(\n+            \"no public constructor found for plugin class: [\" + pluginClass.getName() + \"]\");\n+      }\n+      if (constructors.length > 1) {\n+        throw new IllegalStateException(\n+            \"unique constructor expected for plugin class: [\" + pluginClass.getName() + \"]\");\n+      }\n+      if (constructors[0].getParameterCount() != 0) {\n+        throw new IllegalStateException(\n+            \"default constructor expected for plugin class: [\" + pluginClass.getName() + \"]\");\n+      }\n+\n+      try {\n+        plugins.add((Plugin) constructors[0].newInstance());\n+        LOG.info(\"loaded plugin: [{}]\", plugins.get(plugins.size() - 1).name());\n+      } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NTQwMA=="}, "originalCommit": {"oid": "2c1e740c552da0a02e7800061f118c47331b9473"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxMjAyMA==", "bodyText": "Added error log here and throwing a runtime exception. Since these are currently framework plugins, which are critical, I want the process to error out instead of silently logging them.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/295#discussion_r460612020", "createdAt": "2020-07-27T02:11:32Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginController.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.plugins;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ActionListener;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Publisher;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class PluginController {\n+\n+  private static final Logger LOG = LogManager.getLogger(PluginController.class);\n+  private final Publisher publisher;\n+  private List<Plugin> plugins;\n+\n+  public PluginController(Publisher publisher) {\n+    this.publisher = publisher;\n+    this.plugins = new ArrayList<>();\n+    loadFrameworkPlugins();\n+    registerActionListeners();\n+  }\n+\n+  private void loadFrameworkPlugins() {\n+    for (Class<?> pluginClass : PluginControllerConfig.getFrameworkPlugins()) {\n+      final Constructor<?>[] constructors = pluginClass.getConstructors();\n+      if (constructors.length == 0) {\n+        throw new IllegalStateException(\n+            \"no public constructor found for plugin class: [\" + pluginClass.getName() + \"]\");\n+      }\n+      if (constructors.length > 1) {\n+        throw new IllegalStateException(\n+            \"unique constructor expected for plugin class: [\" + pluginClass.getName() + \"]\");\n+      }\n+      if (constructors[0].getParameterCount() != 0) {\n+        throw new IllegalStateException(\n+            \"default constructor expected for plugin class: [\" + pluginClass.getName() + \"]\");\n+      }\n+\n+      try {\n+        plugins.add((Plugin) constructors[0].newInstance());\n+        LOG.info(\"loaded plugin: [{}]\", plugins.get(plugins.size() - 1).name());\n+      } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NTQwMA=="}, "originalCommit": {"oid": "2c1e740c552da0a02e7800061f118c47331b9473"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjUxNzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDozMToxOFrOG0j1rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMjoxMjowNlrOG3RiHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NjMxNw==", "bodyText": "IllegalStateException is not handled here.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/295#discussion_r457766317", "createdAt": "2020-07-21T00:31:18Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginController.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.plugins;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ActionListener;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Publisher;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class PluginController {\n+\n+  private static final Logger LOG = LogManager.getLogger(PluginController.class);\n+  private final Publisher publisher;\n+  private List<Plugin> plugins;\n+\n+  public PluginController(Publisher publisher) {\n+    this.publisher = publisher;\n+    this.plugins = new ArrayList<>();\n+    loadFrameworkPlugins();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c1e740c552da0a02e7800061f118c47331b9473"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxMjEyNQ==", "bodyText": "We want the system to error out as plugins can be critical.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/295#discussion_r460612125", "createdAt": "2020-07-27T02:12:06Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginController.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.plugins;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ActionListener;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Publisher;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class PluginController {\n+\n+  private static final Logger LOG = LogManager.getLogger(PluginController.class);\n+  private final Publisher publisher;\n+  private List<Plugin> plugins;\n+\n+  public PluginController(Publisher publisher) {\n+    this.publisher = publisher;\n+    this.plugins = new ArrayList<>();\n+    loadFrameworkPlugins();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NjMxNw=="}, "originalCommit": {"oid": "2c1e740c552da0a02e7800061f118c47331b9473"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTAzMzE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginControllerConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTozMzozOFrOG30ZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTozMzozOFrOG30ZRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MzMwMA==", "bodyText": "Can we use a singleton pattern here instead of static? Then we can avoid the PowerMock stuff in the test class and have multiple configs in one JVM context", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/295#discussion_r461183300", "createdAt": "2020-07-27T21:33:38Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginControllerConfig.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.plugins;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class PluginControllerConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5366e63f0de3c15bc465f885390b9a45adf5eb11"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTA0MDY3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginControllerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTozNTo0NVrOG30dmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTozNTo0NVrOG30dmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4NDQxMQ==", "bodyText": "I have a strong distaste for PowerMock, it breaks code coverage analysis since it generates new bytecode and it causes a host of compiler warning that will eventually block us from building our code with newer versions of java. Can we use a singleton pattern for PluginControllerConfig and mock it using Mockito instead?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/295#discussion_r461184411", "createdAt": "2020-07-27T21:35:45Z", "author": {"login": "sidheart"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/plugins/PluginControllerTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.plugins;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.isA;\n+import static org.mockito.Mockito.times;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ActionListener;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Publisher;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mockito;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PowerMockIgnore;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+@PowerMockIgnore({\"com.sun.org.apache.xerces.*\", \"org.apache.logging.log4j.*\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5366e63f0de3c15bc465f885390b9a45adf5eb11"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2540, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}