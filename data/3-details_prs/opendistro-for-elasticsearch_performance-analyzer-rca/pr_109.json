{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5Nzg5MTg3", "number": 109, "title": "Fix RCA API", "bodyText": "Issue #, if available:\n#100\nDescription of changes:\n\nFix the RCA API to work with the changes made in RCA schema.\nremove the usage of API response wrapper objects (ResourceSummaryResponse/NodeSummaryResponse) and de-serialize the SQL result into the original Summary object directly. It doesn't really make sense to keep two different classes representing the same summary object and serialize from one type of object and de-serialize into another.\nAdd an abstract method \"toJson()\" and static method \"buildSummary\" in each Summary class to convert Summary into json format and de-serialize from SQL record.\ninstead of joining table all at once we query each table separately and use the result to rebuild the nested summaries recursively.\n\nTests:\ntested on docker\nCode coverage percentage for this patch:\nN/A\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-02-25T20:39:42Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109", "merged": true, "mergeCommit": {"oid": "2a416e631b1a1035ba1eb752a84cc02cce6116aa"}, "closed": true, "closedAt": "2020-02-28T04:18:57Z", "author": {"login": "rguo-aws"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcH4DM8AH2gAyMzc5Nzg5MTg3OjFjNzA3MmViN2I1Zjg3MTUxODFmNzhkZTI1NmY2NjljNWU2ZTU3MWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIl1-RgH2gAyMzc5Nzg5MTg3Ojg0ODRjNmRhM2Y3ZDk4MWFhZjRkMjNhZjcyMjdlYjk1YTE0NmUyYTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1c7072eb7b5f8715181f78de256f669c5e6e571f", "committedDate": "2020-02-25T20:21:44Z", "message": "Fixed RCA API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTcwMDQ2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#pullrequestreview-365170046", "createdAt": "2020-02-26T19:15:29Z", "commit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToxNToyOVrOFu4mhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOToyNTozOVrOFu48CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNjE4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  value.add(this.getTimeStamp());\n          \n          \n            \n                  value.add(getTimeStamp());", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384706183", "createdAt": "2020-02-26T19:15:29Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java", "diffHunk": "@@ -159,7 +159,7 @@ public static ResourceFlowUnit buildFlowUnitFromWrapper(final FlowUnitMessage me\n   public List<Object> getSqlValue(String rcaName) {\n     List<Object> value = new ArrayList<>();\n     if (!this.isEmpty()) {\n-      value.add(String.valueOf(this.getTimeStamp()));\n+      value.add(this.getTimeStamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODY4Mg==", "bodyText": "In case of exception this method will return null. We should use @Nullable annotation to emphasize that", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384708682", "createdAt": "2020-02-26T19:20:24Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "diffHunk": "@@ -83,10 +95,75 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, this.numOfNodes);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME, this.numOfUnhealthyNodes);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NUM_OF_NODES_COL_NAME = \"Number of Nodes\";\n-    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"Number of Unhealthy Nodes\";\n+    public static final String NUM_OF_NODES_COL_NAME = \"number_of_nodes\";\n+    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"number_of_unhealthy_nodes\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum ClusterSummaryField implements JooqFieldValue {\n+    NUM_OF_NODES_FIELD(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class),\n+    NUM_OF_UNHEALTHY_NODES_FILELD(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME,\n+        Integer.class);\n+\n+    private String name;\n+    private Class<?> clazz;\n+\n+    ClusterSummaryField(final String name, Class<?> clazz) {\n+      this.name = name;\n+      this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public Field<?> getField() {\n+      return DSL.field(DSL.name(this.name), this.clazz);\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return this.name;\n+    }\n+  }\n+\n+  /**\n+   * parse SQL query result and fill the result into summary obj.\n+   * @param record SQLite record\n+   * @return whether parsing is successful or not\n+   */\n+  public static GenericSummary buildSummary(Record record) {\n+    GenericSummary summary = null;\n+    try {\n+      Integer numOfNodes = record.get(ClusterSummaryField.NUM_OF_NODES_FIELD.getField(), Integer.class);\n+      Integer numOfUnhealthyNodes = record.get(ClusterSummaryField.NUM_OF_UNHEALTHY_NODES_FILELD.getField(), Integer.class);\n+      summary = new HotClusterSummary(numOfNodes, numOfUnhealthyNodes);\n+    }\n+    catch (IllegalArgumentException ie) {\n+      LOG.error(\"Some field is not found in record, cause : {}\", ie.getMessage());\n+    }\n+    catch (DataTypeException de) {\n+      LOG.error(\"Fails to convert data type\");\n+    }\n+    return summary;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODk5OQ==", "bodyText": "same as above", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384708999", "createdAt": "2020-02-26T19:20:58Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotNodeSummary.java", "diffHunk": "@@ -104,9 +117,74 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, this.nodeID);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME, this.hostAddress);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NODE_ID_COL_NAME = \"Node ID\";\n-    public static final String HOST_IP_ADDRESS_COL_NAME = \"Host IP\";\n+    public static final String NODE_ID_COL_NAME = \"node_id\";\n+    public static final String HOST_IP_ADDRESS_COL_NAME = \"host_address\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum NodeSummaryField implements JooqFieldValue {\n+    NODE_ID_FIELD(SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, String.class),\n+    HOST_IP_ADDRESS_FILELD(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME,\n+        String.class);\n+\n+    private String name;\n+    private Class<?> clazz;\n+\n+    NodeSummaryField(final String name, Class<?> clazz) {\n+      this.name = name;\n+      this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public Field<?> getField() {\n+      return DSL.field(DSL.name(this.name), this.clazz);\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return this.name;\n+    }\n+  }\n+\n+  /**\n+   * Re-generate the node summary object from SQL query result.\n+   * @param record SQLite record\n+   * @return node summary object\n+   */\n+  public static HotNodeSummary buildSummary(Record record) {\n+    HotNodeSummary summary = null;\n+    try {\n+      String nodeId = record.get(NodeSummaryField.NODE_ID_FIELD.getField(), String.class);\n+      String ipAddress = record.get(NodeSummaryField.HOST_IP_ADDRESS_FILELD.getField(), String.class);\n+      summary = new HotNodeSummary(nodeId, ipAddress);\n+    }\n+    catch (IllegalArgumentException ie) {\n+      LOG.error(\"Some field is not found in record, cause : {}\", ie.getMessage());\n+    }\n+    catch (DataTypeException de) {\n+      LOG.error(\"Fails to convert data type\");\n+    }\n+    return summary;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng==", "bodyText": "should we just fix it now ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384710376", "createdAt": "2020-02-26T19:23:23Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -123,8 +125,15 @@ public synchronized String read() {\n     return readTables();\n   }\n \n-  public synchronized RcaResponse readRca(String rca) {\n-    return readRcaTable(rca);\n+  // TODO : readRca might return a list of RcaResponse if using range query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMTA5MQ==", "bodyText": "If we intend to keep this as a todo for now, we should expand the text saying what the TODO intends to solve but why this is not required immediately", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384711091", "createdAt": "2020-02-26T19:24:35Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -123,8 +125,15 @@ public synchronized String read() {\n     return readTables();\n   }\n \n-  public synchronized RcaResponse readRca(String rca) {\n-    return readRcaTable(rca);\n+  // TODO : readRca might return a list of RcaResponse if using range query", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng=="}, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMTY4OQ==", "bodyText": "@nullable here as well ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384711689", "createdAt": "2020-02-26T19:25:39Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -173,21 +172,67 @@ private synchronized String readTable(String tableName) {\n     return tableStr;\n   }\n \n+  // TODO: we only query the most recent RCA entry in this API. might need to extend this\n+  // to support range query based on timestamp.\n   @Override\n-  synchronized RcaResponse readRcaTable(String rca) {\n-    Set<String> tableNames = super.tableNames;\n-    if (!tableNames.contains(rca)) {\n-      return null;\n+  public synchronized RcaResponse readRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils\n+        .buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList.size() > 0) {\n+        Record mostRecentRecord = recordList.get(0);\n+        response = RcaResponse.buildResponse(mostRecentRecord);\n+        if (response.getState().equals(State.UNHEALTHY.toString())) {\n+          readSummary(response, mostRecentRecord.get(primaryKeyField));\n+        }\n+      }\n     }\n-    List<Record> rcaResponseRecordList = QueryUtils.getRcaRecordList(create, rca, getSummaryTableMap(rca), tableNames);\n-    return RcaResponseUtil.getRcaResponse(rca, rcaResponseRecordList, tableNames);\n+    catch (DataAccessException de) {\n+      // it is totally fine if we fail to read some certain tables.\n+      LOG.warn(\"Fail to read RCA : {}, query = {},  exceptions : {}\", rca, rcaQuery.toString(), de.getStackTrace());\n+    }\n+    return response;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73", "committedDate": "2020-02-27T19:21:20Z", "message": "Add Nullable annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDgxNTE0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#pullrequestreview-366081514", "createdAt": "2020-02-27T23:55:58Z", "commit": {"oid": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzo1NTo1OFrOFvlSBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMzo1OToxNFrOFvlWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzODIxNA==", "bodyText": "FILELD -> FIELD ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385438214", "createdAt": "2020-02-27T23:55:58Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "diffHunk": "@@ -83,10 +96,76 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, this.numOfNodes);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME, this.numOfUnhealthyNodes);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NUM_OF_NODES_COL_NAME = \"Number of Nodes\";\n-    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"Number of Unhealthy Nodes\";\n+    public static final String NUM_OF_NODES_COL_NAME = \"number_of_nodes\";\n+    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"number_of_unhealthy_nodes\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum ClusterSummaryField implements JooqFieldValue {\n+    NUM_OF_NODES_FIELD(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class),\n+    NUM_OF_UNHEALTHY_NODES_FILELD(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzOTI0NA==", "bodyText": "Let's remove the BeagleRock in comments", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385439244", "createdAt": "2020-02-27T23:59:14Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -123,8 +125,15 @@ public synchronized String read() {\n     return readTables();\n   }\n \n-  public synchronized RcaResponse readRca(String rca) {\n-    return readRcaTable(rca);\n+  // TODO : readRca might return a list of RcaResponse if using range query", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng=="}, "originalCommit": {"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8484c6da3f7d981aaf4d23af7227eb95a146e2a2", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8484c6da3f7d981aaf4d23af7227eb95a146e2a2", "committedDate": "2020-02-28T01:42:55Z", "message": "Fix some minor issues"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1161, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}