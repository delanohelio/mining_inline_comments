{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzEzODY3", "number": 465, "title": "Using to buckets to suppress queue length increase action", "bodyText": "Fixes #: #467\nDescription of changes: The Queue And Cache Deciders generates the actions to increase the Queue or Cache size if there are no errors. But this can have consequences if the Jvm Heap is already contended. This patch adds a check to make sure that the old gen heap occupancy after GC is underutilized or healthy and more of it can be consumed. The buckets to determine the usage limits are obtained from the rca.conf. If rca.conf does not contain them, then the defaults in the HeapBasedDecider::DEFAULT_HEAP_USAGE_THRESHOLDS.\nTests:\n\nAdded unit tests to check the canUseMoreHeap() works as expected.\nAdded an integration test.\n\nIf new tests are added, how long do the new ones take to complete\n Test testNoCapacityIncreaseOnUnHealthy PASSED (1m 59s)\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-10-13T19:06:18Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465", "merged": true, "mergeCommit": {"oid": "69bee5418e54b116afca5d3d31680c287f0525df"}, "closed": true, "closedAt": "2020-10-14T23:25:46Z", "author": {"login": "yojs"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSNjaVgBqjM4NzMxMDAzNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSlum2AFqTUwODgzODE2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1323a44fdc7e08a2fad68c3a2ae46f718cec047", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a1323a44fdc7e08a2fad68c3a2ae46f718cec047", "committedDate": "2020-10-13T04:43:10Z", "message": "Using to buckets to suppress queue length increase action"}, "afterCommit": {"oid": "2ad2a9b97f2475e74685004c9a70feb5d903e41a", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2ad2a9b97f2475e74685004c9a70feb5d903e41a", "committedDate": "2020-10-13T19:14:58Z", "message": "Using to buckets to suppress queue length increase action"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ad2a9b97f2475e74685004c9a70feb5d903e41a", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2ad2a9b97f2475e74685004c9a70feb5d903e41a", "committedDate": "2020-10-13T19:14:58Z", "message": "Using to buckets to suppress queue length increase action"}, "afterCommit": {"oid": "37ead39926dec9f497c2fede0f449b2c24a0111d", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/37ead39926dec9f497c2fede0f449b2c24a0111d", "committedDate": "2020-10-13T19:56:54Z", "message": "Using to buckets to suppress queue length increase action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "426f97d391b709be5f1e1b31913ee969f1cb508a", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/426f97d391b709be5f1e1b31913ee969f1cb508a", "committedDate": "2020-10-13T20:34:21Z", "message": "Using to buckets to suppress queue length increase action"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37ead39926dec9f497c2fede0f449b2c24a0111d", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/37ead39926dec9f497c2fede0f449b2c24a0111d", "committedDate": "2020-10-13T19:56:54Z", "message": "Using to buckets to suppress queue length increase action"}, "afterCommit": {"oid": "426f97d391b709be5f1e1b31913ee969f1cb508a", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/426f97d391b709be5f1e1b31913ee969f1cb508a", "committedDate": "2020-10-13T20:34:21Z", "message": "Using to buckets to suppress queue length increase action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bf1d70f1d4e4b5fb5eda1d7ac662f3c59f23e07", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4bf1d70f1d4e4b5fb5eda1d7ac662f3c59f23e07", "committedDate": "2020-10-13T22:07:17Z", "message": "adding bucketization for cache deciders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d3f37cb4365f30353799a1de866682540768cf5", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/9d3f37cb4365f30353799a1de866682540768cf5", "committedDate": "2020-10-13T22:32:32Z", "message": "Adding a default bucketization values if not in rca.conf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "270464e69460d6bea3afc33b2a574cc2fe58ee49", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/270464e69460d6bea3afc33b2a574cc2fe58ee49", "committedDate": "2020-10-13T22:47:12Z", "message": "checkstyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76aee26238ecd2e82f6b5d3bd884d3fe59f6a8bc", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/76aee26238ecd2e82f6b5d3bd884d3fe59f6a8bc", "committedDate": "2020-10-13T23:38:01Z", "message": "Adding the ignore for RCAIt log errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "820f20d4f85f95c32b2c6ca15b3da5693681e600", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/820f20d4f85f95c32b2c6ca15b3da5693681e600", "committedDate": "2020-10-14T01:41:51Z", "message": "Added a unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "202181b61e320858bdeb54a06270e1823c2828fd", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/202181b61e320858bdeb54a06270e1823c2828fd", "committedDate": "2020-10-14T02:01:47Z", "message": "rename a variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2bf2312861078e724aede3c4966c678176eae54c", "committedDate": "2020-10-14T02:50:29Z", "message": "Log error message ignore"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NjQyNTUw", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#pullrequestreview-508642550", "createdAt": "2020-10-14T19:01:20Z", "commit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTowMToyMFrOHhg-Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOToyMDoyNVrOHhhm1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNTI5OQ==", "bodyText": "I am wondering if we should also add a log statement here in addition to the metric. Thoughts?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504905299", "createdAt": "2020-10-14T19:01:20Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/CacheHealthDecider.java", "diffHunk": "@@ -130,7 +134,14 @@ private void configureModifyCacheActionPriority() {\n    * signals going forward.\n    */\n   private Action computeBestAction(final NodeKey esNode, final ResourceEnum cacheType) {\n-    return getAction(ModifyCacheMaxSizeAction.NAME, esNode, cacheType, true);\n+    Action action = null;\n+    if (canUseMoreHeap(esNode)) {\n+      action = getAction(ModifyCacheMaxSizeAction.NAME, esNode, cacheType, true);\n+    } else {\n+      PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwODgyMg==", "bodyText": "should the check instead be  clusterSummary.getSummary() ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504908822", "createdAt": "2020-10-14T19:07:43Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BasicBucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class HeapBasedDecider extends Decider {\n+  private static final Logger LOG = LogManager.getLogger(HeapBasedDecider.class);\n+  private static final String OLD_GEN_TUNABLE_KEY = \"old-gen\";\n+  private static final ResourceEnum DECIDING_HEAP_RESOURCE_TYPE = ResourceEnum.OLD_GEN;\n+  public static final ImmutableMap<UsageBucket, Double> DEFAULT_HEAP_USAGE_THRESHOLDS = ImmutableMap.<UsageBucket, Double>builder()\n+      .put(UsageBucket.UNDER_UTILIZED, 10.0)\n+      .put(UsageBucket.HEALTHY_WITH_BUFFER, 60.0)\n+      .put(UsageBucket.HEALTHY, 80.0)\n+      .build();\n+\n+  private HighHeapUsageClusterRca highHeapUsageClusterRca;\n+\n+  public HeapBasedDecider(long evalIntervalSeconds, int decisionFrequency, HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.highHeapUsageClusterRca = highHeapUsageClusterRca;\n+  }\n+\n+  /**\n+   * The Queue and Cache deciders should only be able to suggest increase of the queue size or increase of cache size if the Java heap can\n+   * sustain more live objects in it without de-gradation. What is an acceptable heap usage limit to determine this, comes from the\n+   * bucketization object in rca.conf. We compare the oldGen usage percent reported by the HighHeapUsage RCA to determine that.\n+   *\n+   * @param esNode The EsNode we are trying to make a decision for.\n+   * @return return if the OldGen heap is under-utilized or healthy and yet more can be consumed, return true; or false otherwise.\n+   */\n+  protected boolean canUseMoreHeap(NodeKey esNode) {\n+    // we add action only if heap is under-utilized or healthy and yet more can be consumed.\n+    for (ResourceFlowUnit<HotClusterSummary> clusterSummary : highHeapUsageClusterRca.getFlowUnits()) {\n+      if (clusterSummary.hasResourceSummary()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjQ2Nw==", "bodyText": "There are multiple level of nesting here with for-if-for-if, can we break down this function into two or more or use lambda ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504912467", "createdAt": "2020-10-14T19:14:31Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BasicBucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class HeapBasedDecider extends Decider {\n+  private static final Logger LOG = LogManager.getLogger(HeapBasedDecider.class);\n+  private static final String OLD_GEN_TUNABLE_KEY = \"old-gen\";\n+  private static final ResourceEnum DECIDING_HEAP_RESOURCE_TYPE = ResourceEnum.OLD_GEN;\n+  public static final ImmutableMap<UsageBucket, Double> DEFAULT_HEAP_USAGE_THRESHOLDS = ImmutableMap.<UsageBucket, Double>builder()\n+      .put(UsageBucket.UNDER_UTILIZED, 10.0)\n+      .put(UsageBucket.HEALTHY_WITH_BUFFER, 60.0)\n+      .put(UsageBucket.HEALTHY, 80.0)\n+      .build();\n+\n+  private HighHeapUsageClusterRca highHeapUsageClusterRca;\n+\n+  public HeapBasedDecider(long evalIntervalSeconds, int decisionFrequency, HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.highHeapUsageClusterRca = highHeapUsageClusterRca;\n+  }\n+\n+  /**\n+   * The Queue and Cache deciders should only be able to suggest increase of the queue size or increase of cache size if the Java heap can\n+   * sustain more live objects in it without de-gradation. What is an acceptable heap usage limit to determine this, comes from the\n+   * bucketization object in rca.conf. We compare the oldGen usage percent reported by the HighHeapUsage RCA to determine that.\n+   *\n+   * @param esNode The EsNode we are trying to make a decision for.\n+   * @return return if the OldGen heap is under-utilized or healthy and yet more can be consumed, return true; or false otherwise.\n+   */\n+  protected boolean canUseMoreHeap(NodeKey esNode) {\n+    // we add action only if heap is under-utilized or healthy and yet more can be consumed.\n+    for (ResourceFlowUnit<HotClusterSummary> clusterSummary : highHeapUsageClusterRca.getFlowUnits()) {\n+      if (clusterSummary.hasResourceSummary()) {\n+        for (HotNodeSummary nodeSummary : clusterSummary.getSummary().getHotNodeSummaryList()) {\n+          NodeKey thisNode = new NodeKey(nodeSummary.getNodeID(), nodeSummary.getHostAddress());\n+          if (thisNode.equals(esNode)) {\n+            for (HotResourceSummary hotResourceSummary : nodeSummary.getHotResourceSummaryList()) {\n+              Resource resource = hotResourceSummary.getResource();\n+              if (resource.getResourceEnum() == DECIDING_HEAP_RESOURCE_TYPE) {\n+                double oldGenUsedRatio = hotResourceSummary.getValue();\n+                double oldGenUsedPercent = oldGenUsedRatio * 100;\n+                BucketCalculator bucketCalculator;\n+                try {\n+                  bucketCalculator = rcaConf.getBucketizationSettings(OLD_GEN_TUNABLE_KEY);\n+                } catch (Exception jsonEx) {\n+                  bucketCalculator = new BasicBucketCalculator(DEFAULT_HEAP_USAGE_THRESHOLDS);\n+                  LOG.debug(\"rca.conf does not have bucketization limits specified. Using default map.\");\n+                }\n+                UsageBucket bucket = bucketCalculator.compute(oldGenUsedPercent);\n+                LOG.debug(\"Value ({}) bucketized to {}, using {}\", oldGenUsedPercent, bucket.toString(), bucketCalculator.toString());\n+                if (bucket == UsageBucket.UNDER_UTILIZED || bucket == UsageBucket.HEALTHY_WITH_BUFFER) {\n+                  return true;\n+                } else {\n+                  return false;\n+                }\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNTY3MA==", "bodyText": "Indentation looks wrong here.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504915670", "createdAt": "2020-10-14T19:20:25Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -93,13 +99,16 @@ private void configureActionPriority() {\n    */\n   private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n     Action action = null;\n-\n-    for (String actionName : actionsByUserPriority) {\n-      action =\n-        getAction(actionName, esNode, threadPool, true);\n-      if (action != null) {\n-        break;\n+    if (canUseMoreHeap(esNode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15f62b57536f481e4ca7ec0e5b23bd2e29eece93", "author": {"user": {"login": "yojs", "name": "Joydeep Sinha"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/15f62b57536f481e4ca7ec0e5b23bd2e29eece93", "committedDate": "2020-10-14T21:38:18Z", "message": "Extracted some part into another method for readability"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4NzQ5NTk0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#pullrequestreview-508749594", "createdAt": "2020-10-14T21:22:20Z", "commit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMToyMjoyMFrOHhlhGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTozMTozOVrOHhlyLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3OTczNw==", "bodyText": "Should we differentiate between an increase in the QueueIncreaseAction and Cache Increase Action?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504979737", "createdAt": "2020-10-14T21:22:20Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -93,13 +99,16 @@ private void configureActionPriority() {\n    */\n   private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n     Action action = null;\n-\n-    for (String actionName : actionsByUserPriority) {\n-      action =\n-        getAction(actionName, esNode, threadPool, true);\n-      if (action != null) {\n-        break;\n+    if (canUseMoreHeap(esNode)) {\n+      for (String actionName : actionsByUserPriority) {\n+        action = getAction(actionName, esNode, threadPool, true);\n+        if (action != null) {\n+          break;\n+        }\n       }\n+    } else {\n+      PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n+          RcaRuntimeMetrics.NO_INCREASE_ACTION_SUGGESTED, NAME + \":\" + esNode.getHostAddress(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4MjcxOA==", "bodyText": "Add a comment saying Default Configuration Values are maintained at 2 places. In the code as well as here. We might miss updating at one place if we want to change the defaults in future.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504982718", "createdAt": "2020-10-14T21:28:49Z", "author": {"login": "aditjind"}, "path": "pa_config/rca.conf", "diffHunk": "@@ -93,5 +93,12 @@\n     \"ClusterTemperatureRca\"\n   ],\n   \"muted-deciders\": [],\n-  \"muted-actions\": []\n+  \"muted-actions\": [],\n+  \"bucketization\": {\n+    \"old-gen\": {\n+      \"UNDER_UTILIZED\": 10.0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4NDExMA==", "bodyText": "Do we really need this extra variable oldGenUsedRatio?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504984110", "createdAt": "2020-10-14T21:31:39Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BasicBucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class HeapBasedDecider extends Decider {\n+  private static final Logger LOG = LogManager.getLogger(HeapBasedDecider.class);\n+  private static final String OLD_GEN_TUNABLE_KEY = \"old-gen\";\n+  private static final ResourceEnum DECIDING_HEAP_RESOURCE_TYPE = ResourceEnum.OLD_GEN;\n+  public static final ImmutableMap<UsageBucket, Double> DEFAULT_HEAP_USAGE_THRESHOLDS = ImmutableMap.<UsageBucket, Double>builder()\n+      .put(UsageBucket.UNDER_UTILIZED, 10.0)\n+      .put(UsageBucket.HEALTHY_WITH_BUFFER, 60.0)\n+      .put(UsageBucket.HEALTHY, 80.0)\n+      .build();\n+\n+  private HighHeapUsageClusterRca highHeapUsageClusterRca;\n+\n+  public HeapBasedDecider(long evalIntervalSeconds, int decisionFrequency, HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.highHeapUsageClusterRca = highHeapUsageClusterRca;\n+  }\n+\n+  /**\n+   * The Queue and Cache deciders should only be able to suggest increase of the queue size or increase of cache size if the Java heap can\n+   * sustain more live objects in it without de-gradation. What is an acceptable heap usage limit to determine this, comes from the\n+   * bucketization object in rca.conf. We compare the oldGen usage percent reported by the HighHeapUsage RCA to determine that.\n+   *\n+   * @param esNode The EsNode we are trying to make a decision for.\n+   * @return return if the OldGen heap is under-utilized or healthy and yet more can be consumed, return true; or false otherwise.\n+   */\n+  protected boolean canUseMoreHeap(NodeKey esNode) {\n+    // we add action only if heap is under-utilized or healthy and yet more can be consumed.\n+    for (ResourceFlowUnit<HotClusterSummary> clusterSummary : highHeapUsageClusterRca.getFlowUnits()) {\n+      if (clusterSummary.hasResourceSummary()) {\n+        for (HotNodeSummary nodeSummary : clusterSummary.getSummary().getHotNodeSummaryList()) {\n+          NodeKey thisNode = new NodeKey(nodeSummary.getNodeID(), nodeSummary.getHostAddress());\n+          if (thisNode.equals(esNode)) {\n+            for (HotResourceSummary hotResourceSummary : nodeSummary.getHotResourceSummaryList()) {\n+              Resource resource = hotResourceSummary.getResource();\n+              if (resource.getResourceEnum() == DECIDING_HEAP_RESOURCE_TYPE) {\n+                double oldGenUsedRatio = hotResourceSummary.getValue();\n+                double oldGenUsedPercent = oldGenUsedRatio * 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODAzMTc3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#pullrequestreview-508803177", "createdAt": "2020-10-14T22:05:48Z", "commit": {"oid": "15f62b57536f481e4ca7ec0e5b23bd2e29eece93"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODM4MTY3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#pullrequestreview-508838167", "createdAt": "2020-10-14T23:25:16Z", "commit": {"oid": "15f62b57536f481e4ca7ec0e5b23bd2e29eece93"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 781, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}