{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjk0MzQ2", "number": 260, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo1MTo1MlrOEKMHDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo1MTo1MVrOEL3haA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTE5NjI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo1MTo1MlrOGrFoYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMToyNzozMVrOGrTxcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNDIwOA==", "bodyText": "should we rename this enum to something like \"ResourceVector\" ? we already have a Resource class defined in protobuf", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r447834208", "createdAt": "2020-06-30T16:51:52Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+    public enum Resource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2NTkwNw==", "bodyText": "Renamed to Dimension", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448065907", "createdAt": "2020-07-01T01:27:31Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+    public enum Resource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNDIwOA=="}, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTIwNDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo1Mzo1N1rOGrFtrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo1Mzo1N1rOGrFtrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzNTU2Ng==", "bodyText": "rename this variable to \"COOL_OFF_PERIOD_IN_SECOND\" ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r447835566", "createdAt": "2020-06-30T16:53:57Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Resource.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Resource.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Resource.NETWORK;\n+\n+public class QueueCapacity implements Action {\n+\n+    public static final String NAME = \"queue_capacity\";\n+    public static final int COOL_OFF_PERIOD = 300;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTI0MDY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzowMjo1MlrOGrGElQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTozMTo1NVrOGrT1fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MTQyOQ==", "bodyText": "is there any specific reason to override this method ? The default implementation is to return getClass().getSimpleName() which will return \"QueueHealthDecider\" if called from this class.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r447841429", "createdAt": "2020-06-30T17:02:52Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// This is a sample decider implementation to finalize decision maker interfaces.\n+// TODO: 1. Get threadpool type from HotNodeSummary or HotResourceSummary\n+// TODO: 2. Read action priorities from a configurable yml\n+// TODO: 3. Read current queue capacity from NodeConfigurationRca (PR #252)\n+// TODO: 4. Add unit tests\n+\n+public class QueueHealthDecider extends Decider {\n+\n+    public static String NAME = \"queue_health\";\n+\n+    private QueueRejectionClusterRca queueRejectionRca;\n+    List<String> actionsByUserPriority = new ArrayList<>();\n+    private int counter = 0;\n+\n+    public QueueHealthDecider(long evalIntervalSeconds, int decisionFrequency, QueueRejectionClusterRca queueRejectionClusterRca) {\n+        // TODO: Also consume NodeConfigurationRca\n+        super(evalIntervalSeconds, decisionFrequency);\n+        this.queueRejectionRca = queueRejectionClusterRca;\n+        configureActionPriority();\n+    }\n+\n+    @Override\n+    public String name() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2Njk0MQ==", "bodyText": "If we maintain a registry of all graph objects going forward, to allow a refactor as well as pluggable graph nodes, then the public static NAME field will serve as a key. For comparisons in that case, each node should return their NAME variable in name(). Hence the override", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448066941", "createdAt": "2020-07-01T01:31:55Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// This is a sample decider implementation to finalize decision maker interfaces.\n+// TODO: 1. Get threadpool type from HotNodeSummary or HotResourceSummary\n+// TODO: 2. Read action priorities from a configurable yml\n+// TODO: 3. Read current queue capacity from NodeConfigurationRca (PR #252)\n+// TODO: 4. Add unit tests\n+\n+public class QueueHealthDecider extends Decider {\n+\n+    public static String NAME = \"queue_health\";\n+\n+    private QueueRejectionClusterRca queueRejectionRca;\n+    List<String> actionsByUserPriority = new ArrayList<>();\n+    private int counter = 0;\n+\n+    public QueueHealthDecider(long evalIntervalSeconds, int decisionFrequency, QueueRejectionClusterRca queueRejectionClusterRca) {\n+        // TODO: Also consume NodeConfigurationRca\n+        super(evalIntervalSeconds, decisionFrequency);\n+        this.queueRejectionRca = queueRejectionClusterRca;\n+        configureActionPriority();\n+    }\n+\n+    @Override\n+    public String name() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0MTQyOQ=="}, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTI5NDczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzoxNTo0MVrOGrGlCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTozMjozN1rOGrT2Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0OTczOQ==", "bodyText": "maybe we can create a dedicated EmptyFlowUnit for the top level vertex in graph ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r447849739", "createdAt": "2020-06-30T17:15:41Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class Publisher extends NonLeafNode<GenericFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+\n+    private Collator collator;\n+    private boolean isMuted = false;\n+\n+    public Publisher(int evalIntervalSeconds, Collator collator) {\n+        super(0, evalIntervalSeconds);\n+        this.collator = collator;\n+    }\n+\n+    @Override\n+    public GenericFlowUnit operate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA2NzE0Mg==", "bodyText": "I'm of split opinion here, but created one so as to explicitly identify the terminal node.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448067142", "createdAt": "2020-07-01T01:32:37Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class Publisher extends NonLeafNode<GenericFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+\n+    private Collator collator;\n+    private boolean isMuted = false;\n+\n+    public Publisher(int evalIntervalSeconds, Collator collator) {\n+        super(0, evalIntervalSeconds);\n+        this.collator = collator;\n+    }\n+\n+    @Override\n+    public GenericFlowUnit operate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg0OTczOQ=="}, "originalCommit": {"oid": "a2f4f3f6d3484df9117a0130ff2704cb81423cdb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NTY0NzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/Action.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODoxNDo1NVrOGrwgog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxODoxNDo1NVrOGrwgog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUzNjczOA==", "bodyText": "let's add the copyright header on top of each newly created file", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448536738", "createdAt": "2020-07-01T18:14:55Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/Action.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95df5fae2b561ebc7c300292e32e200cc7b4af2d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjYyOTgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo1Mjo1NFrOGr51Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToyMToxM1rOGs331A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4OTUwMg==", "bodyText": "maybe we can replace the word pressure with impact ?\nBut as the enum is already named Impact, we can just remove it altogether", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448689502", "createdAt": "2020-07-02T00:52:54Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+  public enum Dimension {\n+    HEAP,\n+    CPU,\n+    RAM,\n+    DISK,\n+    NETWORK\n+  }\n+\n+  public enum Impact {\n+    NO_IMPACT,\n+    INCREASES_PRESSURE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwNTk0MA==", "bodyText": "I wanted to remove the ambiguity around whether it increases pressure (consumes more resource) or increases available resource (frees up the resource).\ne.g. HEAP, INCREASES may imply it increases the overall available heap on the node.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449705940", "createdAt": "2020-07-03T21:21:13Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+  public enum Dimension {\n+    HEAP,\n+    CPU,\n+    RAM,\n+    DISK,\n+    NETWORK\n+  }\n+\n+  public enum Impact {\n+    NO_IMPACT,\n+    INCREASES_PRESSURE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4OTUwMg=="}, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjYzMTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo1NDozMVrOGr52ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo1NDozMVrOGr52ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4OTg1MA==", "bodyText": "Maybe we can return an unmodifyable map ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448689850", "createdAt": "2020-07-02T00:54:31Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+  public enum Dimension {\n+    HEAP,\n+    CPU,\n+    RAM,\n+    DISK,\n+    NETWORK\n+  }\n+\n+  public enum Impact {\n+    NO_IMPACT,\n+    INCREASES_PRESSURE,\n+    DECREASES_PRESSURE\n+  }\n+\n+  private Map<Dimension, Impact> impactMap = new HashMap<>();\n+\n+  public ImpactVector() {\n+    for (Dimension d : Dimension.values()) {\n+      impactMap.put(d, Impact.NO_IMPACT);\n+    }\n+  }\n+\n+  public Map<Dimension, Impact> getImpact() {\n+    return impactMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY0MDg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo1OTowMVrOGr57mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QyMToyNDoyN1rOGs35nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MTA5Ng==", "bodyText": "Do you think Action should be something like ChangeQueueCapacity ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448691096", "createdAt": "2020-07-02T00:59:01Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcwNjM5Nw==", "bodyText": "My initial thoughts were that the prefix verb will be same across many actions. Most of them will be Change* or Modify* (except moveShard etc actions), which seemed redundant. But it does sound more complete, so we can change it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449706397", "createdAt": "2020-07-03T21:24:27Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MTA5Ng=="}, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY0NDQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMTowMDo0OVrOGr59mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODozMjo0N1rOGt0aRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MTYxMQ==", "bodyText": "Do we want to make it configurable ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448691611", "createdAt": "2020-07-02T01:00:49Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {\n+\n+  public static final String NAME = \"queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcyNjMwMg==", "bodyText": "This timeout is independent of its calling function, so we shouldn't need it configurable via callers. Did you mean reading and setting this value from rca.conf? I'm not sure if we'll want to edit this at runtime (maybe we can make that change when we add rca.conf integration to this class, or if we see a need later).", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449726302", "createdAt": "2020-07-04T01:13:31Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {\n+\n+  public static final String NAME = \"queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MTYxMQ=="}, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4NjA1MA==", "bodyText": "Ya, I meant it reading from rca.conf. If you want to do an A/B test to come up with optimal value, keeping it configurable might help. Otherwise, we will have to deploy jars with the changes.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450486050", "createdAt": "2020-07-06T21:20:34Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {\n+\n+  public static final String NAME = \"queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MTYxMQ=="}, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY5Nzc5OA==", "bodyText": "Let's discuss and track this separately. If needed, we can add this along with the other rca.conf integrations which are pending.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450697798", "createdAt": "2020-07-07T08:32:47Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {\n+\n+  public static final String NAME = \"queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MTYxMQ=="}, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY2MTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToxMDo0MlrOGr6HLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMToyNjo1OVrOGtnptQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NDA2Mw==", "bodyText": "Is it true that increasing the queue capacity will increase the CPU load ? You mean for CPU bound processing of queue items ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448694063", "createdAt": "2020-07-02T01:10:42Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {\n+\n+  public static final String NAME = \"queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ThreadPoolEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ThreadPoolEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ThreadPoolEnum, Integer> upperBound = new HashMap<>();\n+\n+  public QueueCapacity(NodeKey esNode, ThreadPoolEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTcyNDMzOA==", "bodyText": "Since it increases throughput, I think it would increase the CPU load.\nCPU ends up doing more amortized work per unit time. Bursty requests that would've otherwise been rejected and retried, are now accepted by the larger queue and processed; making cpu less idle and increasing throughput.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449724338", "createdAt": "2020-07-04T00:41:33Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {\n+\n+  public static final String NAME = \"queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ThreadPoolEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ThreadPoolEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ThreadPoolEnum, Integer> upperBound = new HashMap<>();\n+\n+  public QueueCapacity(NodeKey esNode, ThreadPoolEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NDA2Mw=="}, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ4ODc1Nw==", "bodyText": "Sorry about that, my point was because this is a PR for the framework, I am suggesting that what the decider predicts about resource usage might be taken as a hint and not as a definitive statement.\nBut I guess, this can be a future improvement for the learning system.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450488757", "createdAt": "2020-07-06T21:26:59Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/QueueCapacity.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ThreadPoolEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class QueueCapacity implements Action {\n+\n+  public static final String NAME = \"queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ThreadPoolEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ThreadPoolEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ThreadPoolEnum, Integer> upperBound = new HashMap<>();\n+\n+  public QueueCapacity(NodeKey esNode, ThreadPoolEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NDA2Mw=="}, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NjY3MjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Collator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToxNzozMFrOGr6NhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMToxNzozMFrOGr6NhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NTY4NQ==", "bodyText": "Should we add the unit to the variable name ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r448695685", "createdAt": "2020-07-02T01:17:30Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Collator.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Collator collects and prunes the candidate decisions from each decider so that their impacts are\n+ * aligned\n+ *\n+ * <p>Decisions can increase or decrease pressure on different key resources on an Elasticearch\n+ * node. This is encapsulated in each Action via the {@link ImpactVector}. Since each decider\n+ * independently evaluates its decision, it is possible to have conflicting ImpactVectors from\n+ * actions across deciders.\n+ *\n+ * <p>The collator prunes them to ensure we only take actions that either increase, or decrease\n+ * pressure on a particular node. To resolve conflicts, we prefer stability over performance.\n+ */\n+public class Collator extends Decider {\n+\n+  public static final String NAME = \"collator\";\n+\n+  /* Deciders can choose to publish decisions at different frequencies based on the\n+   * type of resources monitored and rca signals. The collator should however, not introduce any\n+   * unnecessary delays. As soon as a decision is taken, it should be evaluated and published downstream.\n+   */\n+  private static final int collatorFrequency = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38c22799d7089e4ab14f8951eca154a57713d234"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzM5NDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMzo1ODowNlrOGs5tGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNToxNjowOVrOGtJEnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNTk2MQ==", "bodyText": "it may be ok for the first cut, but we may have to make this param configurable for different actions", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449735961", "createdAt": "2020-07-04T03:58:06Z", "author": {"login": "sendkb"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk4Nzc0MA==", "bodyText": "Its not clear what we mean by configurable here -\n\n\nConfigurable across different instances of ModifyQueueCapacityAction ?\nI think it would be the same for a particular type of action, we would want to wait x amount of time when modifying queues. Possibly different wait times for increase v/s decrease queue capacity, but that logic (waiting for queue drain out) can lie within coolOffPeriodInSeconds(). I'm not sure why different instances of ModifyQueueCapacityAction will need different cool off periods.\n\n\nConfigurable across different types of action, like modifyCacheBound/modifyQueueCapacity etc. -\nEach such action class will have its own cool off period defined.\n\n\nConfigurable via rca.conf -\nWe can add this logic in coolOffPeriodInSeconds when needed, but I'm still skeptical if we want to add another knob in rca.conf. It gets hard to manually maintain all these configurations. Instead, the function might return a cool off based on some calculations, like cool off for moveShard may depend on shard size and recovery speed configured, rather than a manual setting per cluster.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449987740", "createdAt": "2020-07-06T05:16:09Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNTk2MQ=="}, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzM5NDI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMzo1OToxMFrOGs5tKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMzo1OToxMFrOGs5tKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNTk3OA==", "bodyText": "nit: 'No Queue action to take'", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449735978", "createdAt": "2020-07-04T03:59:10Z", "author": {"login": "sendkb"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);\n+    } else if (desiredCapacity < currentCapacity) {\n+      impactVector.decreasesPressure(HEAP, CPU, NETWORK);\n+    }\n+    return Collections.singletonMap(esNode, impactVector);\n+  }\n+\n+  @Override\n+  public void execute() {\n+    // Making this a no-op for now\n+    // TODO: Modify based on downstream agent API calls\n+    assert true;\n+  }\n+\n+  @Override\n+  public String summary() {\n+    if (!isActionable()) {\n+      return \"No action to take\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzM5NTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/Action.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowMToxOVrOGs5twg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowMToxOVrOGs5twg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNjEzMA==", "bodyText": "nit: all license headers should have 2020 as the year", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449736130", "createdAt": "2020-07-04T04:01:19Z", "author": {"login": "sendkb"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/Action.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzM5NjQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowMjo1M1rOGs5uIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowMDo1OVrOGtoesQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNjIyNw==", "bodyText": "we only consider increase or decrease of queue resources here. Is it safe to assume that an obj will not be created at all if there is no change in values ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449736227", "createdAt": "2020-07-04T04:02:53Z", "author": {"login": "sendkb"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk5MTk2NQ==", "bodyText": "Actions are created by deciders only when they need to be triggered, and they always do something; hence the assumption.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449991965", "createdAt": "2020-07-06T05:33:24Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNjIyNw=="}, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMjMyMQ==", "bodyText": "These are good points. We should add them to the class level javadoc", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450502321", "createdAt": "2020-07-06T22:00:59Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNjIyNw=="}, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzM5OTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowNzo1OVrOGs5vTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwNDowNzo1OVrOGs5vTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczNjUyNA==", "bodyText": "minor: the two lines can be simplified into a single one. Change it if you think the readability is not affected\nMath.min(Math.max(desiredCapacity, lowerBound.get(threadPool)), upperBound.get(threadPool))", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r449736524", "createdAt": "2020-07-04T04:07:59Z", "author": {"login": "sendkb"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);\n+    } else if (desiredCapacity < currentCapacity) {\n+      impactVector.decreasesPressure(HEAP, CPU, NETWORK);\n+    }\n+    return Collections.singletonMap(esNode, impactVector);\n+  }\n+\n+  @Override\n+  public void execute() {\n+    // Making this a no-op for now\n+    // TODO: Modify based on downstream agent API calls\n+    assert true;\n+  }\n+\n+  @Override\n+  public String summary() {\n+    if (!isActionable()) {\n+      return \"No action to take\";\n+    }\n+    return String.format(\"Update [%s] queue capacity from [%d] to [%d] on node [%s]\",\n+        threadPool.toString(), currentCapacity, desiredCapacity, esNode.getNodeId());\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return summary();\n+  }\n+\n+  private void setBounds() {\n+    // This is intentionally not made static because different nodes can\n+    // have different bounds based on instance types\n+    // TODO: Move configuration values to rca.conf\n+\n+    // Write thread pool for bulk write requests\n+    this.lowerBound.put(ResourceEnum.WRITE_THREADPOOL, 100);\n+    this.upperBound.put(ResourceEnum.WRITE_THREADPOOL, 1000);\n+\n+    // Search thread pool\n+    this.lowerBound.put(ResourceEnum.SEARCH_THREADPOOL, 1000);\n+    this.upperBound.put(ResourceEnum.SEARCH_THREADPOOL, 3000);\n+  }\n+\n+  private void setDesiredCapacity(int desiredCapacity) {\n+    this.desiredCapacity = Math.min(desiredCapacity, upperBound.get(threadPool));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d19fc4b5daf0f521aa968635bd19d2acba6b2f5"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODYxMDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozMTo1NVrOGtnx1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozMTo1NVrOGtnx1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5MDgzOA==", "bodyText": "Do we have a particular reason for not initializing this in the constructor ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450490838", "createdAt": "2020-07-06T21:31:55Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+  public enum Dimension {\n+    HEAP,\n+    CPU,\n+    RAM,\n+    DISK,\n+    NETWORK\n+  }\n+\n+  public enum Impact {\n+    NO_IMPACT,\n+    INCREASES_PRESSURE,\n+    DECREASES_PRESSURE\n+  }\n+\n+  private Map<Dimension, Impact> impactMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODYyNDI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozNjo0MFrOGtn51g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTozNjo0MFrOGtn51g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5Mjg4Ng==", "bodyText": "The size of this map is fixed, it will always hold values as the elements in the Dimension enum. Do we want to make it an array and access the impact of each dimension by the ordinal of the enum ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450492886", "createdAt": "2020-07-06T21:36:40Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ImpactVector.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ImpactVector {\n+\n+  public enum Dimension {\n+    HEAP,\n+    CPU,\n+    RAM,\n+    DISK,\n+    NETWORK\n+  }\n+\n+  public enum Impact {\n+    NO_IMPACT,\n+    INCREASES_PRESSURE,\n+    DECREASES_PRESSURE\n+  }\n+\n+  private Map<Dimension, Impact> impactMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODY3NDU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo1Njo0OFrOGtoX_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo1Njo0OFrOGtoX_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMDYwNg==", "bodyText": "It might be good to add javadoc comments for this class ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450500606", "createdAt": "2020-07-06T21:56:48Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODY4MTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo1OToxNFrOGtocBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo1OToxNFrOGtocBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwMTYzOA==", "bodyText": "Do we want to make it a class level constant ? Also do we want to make it configurable through rca.conf ?\nWe might want to play with faster increases and decreases, right ? If you agree, we can also make it an enhancement issues to comeback to it later ..", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450501638", "createdAt": "2020-07-06T21:59:14Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODcwMjc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowODoxNFrOGtopJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowODoxNFrOGtopJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNDk5Ng==", "bodyText": "As stepsize is a positive integer, the creation of an action means that the desired size != currentCapacity as here:\ndesiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\nWhat are the cases when it is not actionable ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450504996", "createdAt": "2020-07-06T22:08:14Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);\n+    } else if (desiredCapacity < currentCapacity) {\n+      impactVector.decreasesPressure(HEAP, CPU, NETWORK);\n+    }\n+    return Collections.singletonMap(esNode, impactVector);\n+  }\n+\n+  @Override\n+  public void execute() {\n+    // Making this a no-op for now\n+    // TODO: Modify based on downstream agent API calls\n+    assert true;\n+  }\n+\n+  @Override\n+  public String summary() {\n+    if (!isActionable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODcwODI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoxMDozOFrOGtosfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoxMDozOFrOGtosfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNTg1NA==", "bodyText": "String.format uses complicated pattern matching to create the final string, do you think we can use StringBuilder ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450505854", "createdAt": "2020-07-06T22:10:38Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/ModifyQueueCapacityAction.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.CPU;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.HEAP;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension.NETWORK;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+public class ModifyQueueCapacityAction implements Action {\n+\n+  public static final String NAME = \"modify_queue_capacity\";\n+  public static final int COOL_OFF_PERIOD_IN_SECONDS = 300;\n+\n+  private int currentCapacity;\n+  private int desiredCapacity;\n+  private ResourceEnum threadPool;\n+  private NodeKey esNode;\n+\n+  private Map<ResourceEnum, Integer> lowerBound = new HashMap<>();\n+  private Map<ResourceEnum, Integer> upperBound = new HashMap<>();\n+\n+  public ModifyQueueCapacityAction(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {\n+    setBounds();\n+    int STEP_SIZE = 50;\n+    this.esNode = esNode;\n+    this.threadPool = threadPool;\n+    this.currentCapacity = currentCapacity;\n+    int desiredCapacity = increase ? currentCapacity + STEP_SIZE : currentCapacity - STEP_SIZE;\n+    setDesiredCapacity(desiredCapacity);\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean isActionable() {\n+    return desiredCapacity != currentCapacity;\n+  }\n+\n+  @Override\n+  public int coolOffPeriodInSeconds() {\n+    return COOL_OFF_PERIOD_IN_SECONDS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    ImpactVector impactVector = new ImpactVector();\n+    if (desiredCapacity > currentCapacity) {\n+      impactVector.increasesPressure(HEAP, CPU, NETWORK);\n+    } else if (desiredCapacity < currentCapacity) {\n+      impactVector.decreasesPressure(HEAP, CPU, NETWORK);\n+    }\n+    return Collections.singletonMap(esNode, impactVector);\n+  }\n+\n+  @Override\n+  public void execute() {\n+    // Making this a no-op for now\n+    // TODO: Modify based on downstream agent API calls\n+    assert true;\n+  }\n+\n+  @Override\n+  public String summary() {\n+    if (!isActionable()) {\n+      return String.format(\"No action to take for: [%s]\", NAME);\n+    }\n+    return String.format(\"Update [%s] queue capacity from [%d] to [%d] on node [%s]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODc0NTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoyNjo0NlrOGtpCkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoyNjo0NlrOGtpCkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxMTUwNw==", "bodyText": "Do we want to send an unmodifiableList list ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450511507", "createdAt": "2020-07-06T22:26:46Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericFlowUnit;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class Decision extends GenericFlowUnit {\n+\n+  private List<Action> actions = new ArrayList<>();\n+  private String decider;\n+\n+  public Decision(long timeStamp, String deciderName) {\n+    super(timeStamp);\n+    setDecider(deciderName);\n+  }\n+\n+  public void addAction(Action action) {\n+    if (action != null) {\n+      actions.add(action);\n+    }\n+  }\n+\n+  public void addAllActions(List<Action> actions) {\n+    this.actions.addAll(actions);\n+  }\n+\n+  public List<Action> getActions() {\n+    return actions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODc0NzkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoyODoxMlrOGtpEPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoyODoxMlrOGtpEPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxMTkzNQ==", "bodyText": "a class level javadoc comment ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450511935", "createdAt": "2020-07-06T22:28:12Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class Publisher extends NonLeafNode<EmptyFlowUnit> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODc1MDI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoyOToxMlrOGtpFjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoyOToxMlrOGtpFjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxMjI3MA==", "bodyText": "Do you think we can add a debug message and a metric here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450512270", "createdAt": "2020-07-06T22:29:12Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class Publisher extends NonLeafNode<EmptyFlowUnit> {\n+\n+  private static final Logger LOG = LogManager.getLogger(Publisher.class);\n+\n+  private Collator collator;\n+  private boolean isMuted = false;\n+\n+  public Publisher(int evalIntervalSeconds, Collator collator) {\n+    super(0, evalIntervalSeconds);\n+    this.collator = collator;\n+  }\n+\n+  @Override\n+  public EmptyFlowUnit operate() {\n+    // TODO: Pass through implementation, need to add dampening, cool-off, action flip-flop\n+    // avoidance, state persistence etc.\n+\n+    Decision decision = collator.getFlowUnits().get(0);\n+    for (Action action : decision.getActions()) {\n+      LOG.info(\"Executing action: [{}]\", action.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODc1NzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjozMjozN1rOGtpJ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjozMjozN1rOGtpJ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxMzM5Mg==", "bodyText": "We already have a camelCase and mixed snake case in namings, now this will be pure snake-case. Do we want to stick to one of the previous two or maybe camelCase ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450513392", "createdAt": "2020-07-06T22:32:37Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyQueueCapacityAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// This is a sample decider implementation to finalize decision maker interfaces.\n+// TODO: 1. Read action priorities from a configurable yml\n+// TODO: 2. Read current queue capacity from NodeConfigurationRca (PR #252)\n+\n+public class QueueHealthDecider extends Decider {\n+\n+  public static final String NAME = \"queue_health\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODc4NTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo0NzowMFrOGtpbDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo0NzowMFrOGtpbDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxNzc3Mw==", "bodyText": "queueRejectionRca can be empty in some cases, which means that the summary might be null. We might want to make an early return in that case ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450517773", "createdAt": "2020-07-06T22:47:00Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyQueueCapacityAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// This is a sample decider implementation to finalize decision maker interfaces.\n+// TODO: 1. Read action priorities from a configurable yml\n+// TODO: 2. Read current queue capacity from NodeConfigurationRca (PR #252)\n+\n+public class QueueHealthDecider extends Decider {\n+\n+  public static final String NAME = \"queue_health\";\n+\n+  private QueueRejectionClusterRca queueRejectionRca;\n+  List<String> actionsByUserPriority = new ArrayList<>();\n+  private int counter = 0;\n+\n+  public QueueHealthDecider(long evalIntervalSeconds, int decisionFrequency, QueueRejectionClusterRca queueRejectionClusterRca) {\n+    // TODO: Also consume NodeConfigurationRca\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.queueRejectionRca = queueRejectionClusterRca;\n+    configureActionPriority();\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public Decision operate() {\n+    Decision decision = new Decision(System.currentTimeMillis(), NAME);\n+    counter += 1;\n+    if (counter < decisionFrequency) {\n+      return decision;\n+    }\n+\n+    counter = 0;\n+    if (queueRejectionRca.getFlowUnits().isEmpty()) {\n+      return decision;\n+    }\n+\n+    HotClusterSummary clusterSummary = queueRejectionRca.getFlowUnits().get(0).getSummary();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODc4OTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo0OTozMVrOGtpdvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo0OTozMVrOGtpdvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxODQ2Mg==", "bodyText": "Because this method can return null, do we want to make it explicit using the annotation @nullable ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450518462", "createdAt": "2020-07-06T22:49:31Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ModifyQueueCapacityAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.QueueRejectionClusterRca;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+// This is a sample decider implementation to finalize decision maker interfaces.\n+// TODO: 1. Read action priorities from a configurable yml\n+// TODO: 2. Read current queue capacity from NodeConfigurationRca (PR #252)\n+\n+public class QueueHealthDecider extends Decider {\n+\n+  public static final String NAME = \"queue_health\";\n+\n+  private QueueRejectionClusterRca queueRejectionRca;\n+  List<String> actionsByUserPriority = new ArrayList<>();\n+  private int counter = 0;\n+\n+  public QueueHealthDecider(long evalIntervalSeconds, int decisionFrequency, QueueRejectionClusterRca queueRejectionClusterRca) {\n+    // TODO: Also consume NodeConfigurationRca\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.queueRejectionRca = queueRejectionClusterRca;\n+    configureActionPriority();\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public Decision operate() {\n+    Decision decision = new Decision(System.currentTimeMillis(), NAME);\n+    counter += 1;\n+    if (counter < decisionFrequency) {\n+      return decision;\n+    }\n+\n+    counter = 0;\n+    if (queueRejectionRca.getFlowUnits().isEmpty()) {\n+      return decision;\n+    }\n+\n+    HotClusterSummary clusterSummary = queueRejectionRca.getFlowUnits().get(0).getSummary();\n+    for (HotNodeSummary nodeSummary : clusterSummary.getHotNodeSummaryList()) {\n+      NodeKey esNode = new NodeKey(nodeSummary.getNodeID(), nodeSummary.getHostAddress());\n+      for (HotResourceSummary resource : nodeSummary.getHotResourceSummaryList()) {\n+        decision.addAction(computeBestAction(esNode, resource.getResource().getResourceEnum()));\n+      }\n+    }\n+\n+    return decision;\n+  }\n+\n+  private void configureActionPriority() {\n+    // TODO: Input from user configured yml\n+    this.actionsByUserPriority.add(ModifyQueueCapacityAction.NAME);\n+  }\n+\n+  /**\n+   * Evaluate the most relevant action for a node\n+   *\n+   * <p>Action relevance decided based on user configured priorities for now, this can be modified\n+   * to consume better signals going forward.\n+   */\n+  private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n+    Action action = null;\n+    for (String actionName : actionsByUserPriority) {\n+      action =\n+          getAction(actionName, esNode, threadPool, getNodeQueueCapacity(esNode, threadPool), true);\n+      if (action != null) {\n+        break;\n+      }\n+    }\n+    return action;\n+  }\n+\n+  private Action getAction(String actionName, NodeKey esNode, ResourceEnum threadPool, int currCapacity, boolean increase) {\n+    switch (actionName) {\n+      case ModifyQueueCapacityAction.NAME:\n+        return configureQueueCapacity(esNode, threadPool, currCapacity, increase);\n+      default:\n+        return null;\n+    }\n+  }\n+\n+  private ModifyQueueCapacityAction configureQueueCapacity(NodeKey esNode, ResourceEnum threadPool, int currentCapacity, boolean increase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODc5NDY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo1MTo1MVrOGtpgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjo1MTo1MVrOGtpgmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUxOTE5NA==", "bodyText": "can we extract out the code here in a method of its own as in constructShardResourceUsageGraph ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/260#discussion_r450519194", "createdAt": "2020-07-06T22:51:51Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -150,8 +157,40 @@ public void construct() {\n     hotNodeClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n     hotNodeClusterRca.addAllUpstreams(Collections.singletonList(hotJVMNodeRca));\n \n+    /* Queue Rejection RCAs\n+     */\n+    // TODO: Refactor this monolithic function\n+    Metric threadpool_RejectedReqs = new ThreadPool_RejectedReqs(EVALUATION_INTERVAL_SECONDS);\n+    threadpool_RejectedReqs.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    addLeaf(threadpool_RejectedReqs);\n+\n+    // Node level queue rejection RCA\n+    QueueRejectionRca queueRejectionNodeRca = new QueueRejectionRca(RCA_PERIOD, threadpool_RejectedReqs);\n+    queueRejectionNodeRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    queueRejectionNodeRca.addAllUpstreams(Collections.singletonList(threadpool_RejectedReqs));\n+\n+    // Cluster level queue rejection RCA\n+    QueueRejectionClusterRca queueRejectionClusterRca = new QueueRejectionClusterRca(RCA_PERIOD, queueRejectionNodeRca);\n+    queueRejectionClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n+    queueRejectionClusterRca.addAllUpstreams(Collections.singletonList(queueRejectionNodeRca));\n+\n+    // Queue Health Decider\n+    QueueHealthDecider queueHealthDecider = new QueueHealthDecider(EVALUATION_INTERVAL_SECONDS, 12, queueRejectionClusterRca);\n+    queueHealthDecider.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n+    queueHealthDecider.addAllUpstreams(Collections.singletonList(queueRejectionClusterRca));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549b3f0906567ca92a2b9aff4237dbe9dc1693ca"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2510, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}