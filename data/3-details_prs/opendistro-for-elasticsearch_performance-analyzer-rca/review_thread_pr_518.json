{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMzcyNzU1", "number": 518, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyMjoyM1rOE6tKFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyNzoyMVrOE6tRzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTkyNzI0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collectors/AbstractCollectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyMjoyM1rOH18Hjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyMjoyM1rOH18Hjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyMTU1MA==", "bodyText": "Is this comment relevant ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/518#discussion_r526321550", "createdAt": "2020-11-18T18:22:23Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collectors/AbstractCollectorTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import java.time.Instant;\n+import org.junit.Test;\n+\n+/**\n+ * A base class that others can extend to validate their Metrics Collectors behavior\n+ */\n+public abstract class AbstractCollectorTest {\n+  private PerformanceAnalyzerMetricsCollector uut;\n+\n+  // Implementors should call this in a setup() function to set their collector\n+  public void setUut(PerformanceAnalyzerMetricsCollector collector) {\n+    this.uut = collector;\n+  }\n+\n+  // This is the only line that implementors need to modify\n+  public abstract void validateMetric(String metric) throws Exception;\n+\n+  // This function does not need to be modified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb021d42646599860101c389f480de3d12064b30"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTk0NzAwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collectors/AbstractCollectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyNzoyMVrOH18Tww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoyNzoyMVrOH18Tww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNDY3NQ==", "bodyText": "why not end == -1 ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/518#discussion_r526324675", "createdAt": "2020-11-18T18:27:21Z", "author": {"login": "ktkrg"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/collectors/AbstractCollectorTest.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.collectors;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import java.time.Instant;\n+import org.junit.Test;\n+\n+/**\n+ * A base class that others can extend to validate their Metrics Collectors behavior\n+ */\n+public abstract class AbstractCollectorTest {\n+  private PerformanceAnalyzerMetricsCollector uut;\n+\n+  // Implementors should call this in a setup() function to set their collector\n+  public void setUut(PerformanceAnalyzerMetricsCollector collector) {\n+    this.uut = collector;\n+  }\n+\n+  // This is the only line that implementors need to modify\n+  public abstract void validateMetric(String metric) throws Exception;\n+\n+  // This function does not need to be modified\n+  @Test\n+  public void validateMetrics() throws Exception {\n+    uut.collectMetrics(Instant.now().toEpochMilli());\n+    String metricString = uut.getValue().toString();\n+    // chop off current time json\n+    int end = metricString.indexOf(PerformanceAnalyzerMetrics.sMetricNewLineDelimitor);\n+    metricString = metricString.substring(end+1);\n+    while (!metricString.isEmpty()) {\n+      end = metricString.indexOf(PerformanceAnalyzerMetrics.sMetricNewLineDelimitor);\n+      if (end < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb021d42646599860101c389f480de3d12064b30"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2278, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}