{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Mzg0MjMz", "number": 161, "title": "Adding code changes for Hot Shards RCA.", "bodyText": "Description of changes:\nHot shard is a shard which consumes more resources(JVM, CPU, Disk I/O and Network) than other shards within a Elasticsearch index.\nOpensource Elasticsearch makes this fundamental assumption that each shard in the cluster has same amount of workload and are similar in size. When allocating and re-balancing shards,  ShardsAllocator  interface in Elasticsearch (defaults to BalancedShardsAllocator) uses only the shard topology and does not take into account the performance and resource usage of a shard.\nThis HotShard RCA Algorithm remediates that by using the CPU cycles, IO Throughput and IO Sys Call rate for a shard to determine its heat. This heat profile can then be further plugged into the allocation algorithm to make more insightful decision on shard placement\nThis RCA addresses that issue by identifying a hot shard within an index based on following dimensions:\n1. CPU Utilization\n2. IO Total SysCallRate\n3. IO Total Throughput\nFew points to note, we want the solution to :\n\nkeep the memory footprint low, while tracking all the shards on cluster on 3 different dimensions\nMaintain historical data to avoid errors due to outlier in data due to spiky customer usage\nShould be quick, so as to not impact other RCA execution.\n\nKeeping above in mind, the algorithm is distributed sliding window based with node local hot shards sent over and aggregated at cluster level.\nTests: Unit Test, Dev stack Testing\nCode coverage percentage for this patch:\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-04-24T07:39:55Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161", "merged": true, "mergeCommit": {"oid": "8e09f810dda7c5d4551150f4588c5e1bbaa55511"}, "closed": true, "closedAt": "2020-05-01T02:19:40Z", "author": {"login": "khushbr"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcasZpcgH2gAyNDA4Mzg0MjMzOjY1MDljY2IyZDBmZGIzMTEyOGQ5MTM1NGQzNmE1YjdlMzMyMmU5NWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcc3_ZNgFqTQwMzk4OTE4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6509ccb2d0fdb31128d91354d36a5b7e3322e95c", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6509ccb2d0fdb31128d91354d36a5b7e3322e95c", "committedDate": "2020-04-24T07:31:57Z", "message": "Adding code changes for Hot Shards RCA.\n\nThe RCA currrntly identifies a hot shard within an index based on following dimensions:\n    1. CPU Utilization\n    2. IO Total SysCallRate\n    3. IO Total Throughput"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8c7a430f0448e5404fd2f1099069513572fd4db2", "committedDate": "2020-04-24T07:53:00Z", "message": "Fixing the build failure"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMDk4MTc3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#pullrequestreview-400098177", "createdAt": "2020-04-24T16:30:49Z", "commit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNjozMDo0OVrOGLftHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxNzo0MzoxMFrOGLibMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcwNjk3NA==", "bodyText": "Thank you for this !! :)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414706974", "createdAt": "2020-04-24T16:30:49Z", "author": {"login": "yojs"}, "path": "pa_config/rca_master.conf", "diffHunk": "@@ -1,5 +1,5 @@\n {\n-  \"analysis-graph-implementor\": \"com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.DummyGraph\",\n+  \"analysis-graph-implementor\": \"com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxNDE3Ng==", "bodyText": "Shall we make hotShardSummaryList in the method arg final ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414714176", "createdAt": "2020-04-24T16:42:07Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotNodeSummary.java", "diffHunk": "@@ -48,11 +48,20 @@\n   private static final Logger LOG = LogManager.getLogger(HotNodeSummary.class);\n   private final String nodeID;\n   private final String hostAddress;\n+  private final List<HotShardSummary> hotShardSummaryList;\n \n   public HotNodeSummary(String nodeID, String hostAddress) {\n     super();\n     this.nodeID = nodeID;\n     this.hostAddress = hostAddress;\n+    this.hotShardSummaryList = new ArrayList<>();\n+  }\n+\n+  public HotNodeSummary(String nodeID, String hostAddress, List<HotShardSummary> hotShardSummaryList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcxODk2NA==", "bodyText": "Maybe we can remove the name of ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414718964", "createdAt": "2020-04-24T16:49:55Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotShardSummary.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HotShardSummaryMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.JooqFieldValue;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericSummary;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.exception.DataTypeException;\n+import org.jooq.impl.DSL;\n+\n+\n+/**\n+ * HotShardSummary contains information such as the name of the index_name, shard_id, node_id, cpu_usage, cpu_usage_threshold", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMjIyNg==", "bodyText": "Because there are a lot of arguments with similar types (doubles and ints), I can see us making a mistake while calling the constructor and thus say cpu_usage_threshold shows up instead as io_throughput. Do you think it might be better to call individual setters for these metrics ?\nAnd the Constructor might just take indexName, shardId, nodeId ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414722226", "createdAt": "2020-04-24T16:55:07Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotShardSummary.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HotShardSummaryMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.JooqFieldValue;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericSummary;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.exception.DataTypeException;\n+import org.jooq.impl.DSL;\n+\n+\n+/**\n+ * HotShardSummary contains information such as the name of the index_name, shard_id, node_id, cpu_usage, cpu_usage_threshold\n+ * io_throughput, io_throughput_threshold, io_sys_callrate, io_sys_callrate_threshold and time_period.\n+ *\n+ * <p>The hot shard summary is created by node level and cluster level RCAs running on data nodes and elected master node resp.\n+ * This object is persisted in SQLite table\n+ * Table name : HotClusterSummary\n+ *\n+ *  <p>schema :\n+ *  | ID(primary key) | index_name | shard_id | node_id | cpu_usage | cpu_usage_threshold\n+ *  | io_throughput | io_throughput_threshold | io_sys_callrate | io_sys_callrate_threshold| ID in FlowUnit(foreign key)\n+ */\n+\n+public class HotShardSummary extends GenericSummary {\n+\n+  public static final String HOT_SHARD_SUMMARY_TABLE = HotShardSummary.class.getSimpleName();\n+  private static final Logger LOG = LogManager.getLogger(HotShardSummary.class);\n+  private final String indexName;\n+  private final String shardId;\n+  private final String nodeId;\n+  private final double cpu_usage;\n+  private final double cpu_usage_threshold;\n+  private final double io_throughput;\n+  private final double io_throughput_threshold;\n+  private final double io_sys_callrate;\n+  private final double io_sys_callrate_threshold;\n+  private final int timePeriodInSeconds;\n+\n+  public HotShardSummary(String indexName, String shardId, String nodeId, double cpu_usage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyMzczNQ==", "bodyText": "Would it be better off in the previous line ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414723735", "createdAt": "2020-04-24T16:57:35Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotShardSummary.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HotShardSummaryMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.JooqFieldValue;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericSummary;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.exception.DataTypeException;\n+import org.jooq.impl.DSL;\n+\n+\n+/**\n+ * HotShardSummary contains information such as the name of the index_name, shard_id, node_id, cpu_usage, cpu_usage_threshold\n+ * io_throughput, io_throughput_threshold, io_sys_callrate, io_sys_callrate_threshold and time_period.\n+ *\n+ * <p>The hot shard summary is created by node level and cluster level RCAs running on data nodes and elected master node resp.\n+ * This object is persisted in SQLite table\n+ * Table name : HotClusterSummary\n+ *\n+ *  <p>schema :\n+ *  | ID(primary key) | index_name | shard_id | node_id | cpu_usage | cpu_usage_threshold\n+ *  | io_throughput | io_throughput_threshold | io_sys_callrate | io_sys_callrate_threshold| ID in FlowUnit(foreign key)\n+ */\n+\n+public class HotShardSummary extends GenericSummary {\n+\n+  public static final String HOT_SHARD_SUMMARY_TABLE = HotShardSummary.class.getSimpleName();\n+  private static final Logger LOG = LogManager.getLogger(HotShardSummary.class);\n+  private final String indexName;\n+  private final String shardId;\n+  private final String nodeId;\n+  private final double cpu_usage;\n+  private final double cpu_usage_threshold;\n+  private final double io_throughput;\n+  private final double io_throughput_threshold;\n+  private final double io_sys_callrate;\n+  private final double io_sys_callrate_threshold;\n+  private final int timePeriodInSeconds;\n+\n+  public HotShardSummary(String indexName, String shardId, String nodeId, double cpu_usage,\n+                         double cpu_usage_threshold, double io_throughput, double io_throughput_threshold,\n+                         double io_sys_callrate, double io_sys_callrate_threshold, int timePeriod) {\n+    super();\n+    this.indexName = indexName;\n+    this.shardId = shardId;\n+    this.nodeId = nodeId;\n+    this.cpu_usage = cpu_usage;\n+    this.cpu_usage_threshold = cpu_usage_threshold;\n+    this.io_throughput = io_throughput;\n+    this.io_throughput_threshold = io_throughput_threshold;\n+    this.io_sys_callrate = io_sys_callrate;\n+    this.io_sys_callrate_threshold = io_sys_callrate_threshold;\n+    this.timePeriodInSeconds = timePeriod;\n+  }\n+\n+  public String getIndexName() {\n+    return this.indexName;\n+  }\n+\n+  public String getShardId() {\n+    return this.shardId;\n+  }\n+\n+  public String getNodeId() {\n+    return this.nodeId;\n+  }\n+\n+  public double getCpuUsage() {\n+    return this.cpu_usage;\n+  }\n+\n+  public double getIOThroughput() {\n+    return this.io_throughput;\n+  }\n+\n+  public double getIOSysCallrate() {\n+    return this.io_sys_callrate;\n+  }\n+\n+  @Override\n+  public HotShardSummaryMessage buildSummaryMessage() {\n+    final HotShardSummaryMessage.Builder summaryMessageBuilder = HotShardSummaryMessage\n+            .newBuilder();\n+    summaryMessageBuilder.setIndexName(this.indexName);\n+    summaryMessageBuilder.setShardId(this.shardId);\n+    summaryMessageBuilder.setNodeId(this.nodeId);\n+    summaryMessageBuilder.setCpuUsage(this.cpu_usage);\n+    summaryMessageBuilder.setCpuUsageThreshold(this.cpu_usage_threshold);\n+    summaryMessageBuilder.setIoThroughput(this.io_throughput);\n+    summaryMessageBuilder.setIoThroughputThreshold(this.io_throughput_threshold);\n+    summaryMessageBuilder.setIoSysCallrate(this.io_sys_callrate);\n+    summaryMessageBuilder.setIoSysCallrateThreshold(this.io_sys_callrate_threshold);\n+    summaryMessageBuilder.setTimePeriod(this.timePeriodInSeconds);\n+    return summaryMessageBuilder.build();\n+  }\n+\n+  @Override\n+  public void buildSummaryMessageAndAddToFlowUnit(FlowUnitMessage.Builder messageBuilder) {\n+    messageBuilder.setHotShardSummary(this.buildSummaryMessage());\n+  }\n+\n+  public static HotShardSummary buildHotShardSummaryFromMessage(\n+          HotShardSummaryMessage message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyNTQ5Mg==", "bodyText": "final ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414725492", "createdAt": "2020-04-24T17:00:28Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotShardSummary.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HotShardSummaryMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.JooqFieldValue;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericSummary;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.exception.DataTypeException;\n+import org.jooq.impl.DSL;\n+\n+\n+/**\n+ * HotShardSummary contains information such as the name of the index_name, shard_id, node_id, cpu_usage, cpu_usage_threshold\n+ * io_throughput, io_throughput_threshold, io_sys_callrate, io_sys_callrate_threshold and time_period.\n+ *\n+ * <p>The hot shard summary is created by node level and cluster level RCAs running on data nodes and elected master node resp.\n+ * This object is persisted in SQLite table\n+ * Table name : HotClusterSummary\n+ *\n+ *  <p>schema :\n+ *  | ID(primary key) | index_name | shard_id | node_id | cpu_usage | cpu_usage_threshold\n+ *  | io_throughput | io_throughput_threshold | io_sys_callrate | io_sys_callrate_threshold| ID in FlowUnit(foreign key)\n+ */\n+\n+public class HotShardSummary extends GenericSummary {\n+\n+  public static final String HOT_SHARD_SUMMARY_TABLE = HotShardSummary.class.getSimpleName();\n+  private static final Logger LOG = LogManager.getLogger(HotShardSummary.class);\n+  private final String indexName;\n+  private final String shardId;\n+  private final String nodeId;\n+  private final double cpu_usage;\n+  private final double cpu_usage_threshold;\n+  private final double io_throughput;\n+  private final double io_throughput_threshold;\n+  private final double io_sys_callrate;\n+  private final double io_sys_callrate_threshold;\n+  private final int timePeriodInSeconds;\n+\n+  public HotShardSummary(String indexName, String shardId, String nodeId, double cpu_usage,\n+                         double cpu_usage_threshold, double io_throughput, double io_throughput_threshold,\n+                         double io_sys_callrate, double io_sys_callrate_threshold, int timePeriod) {\n+    super();\n+    this.indexName = indexName;\n+    this.shardId = shardId;\n+    this.nodeId = nodeId;\n+    this.cpu_usage = cpu_usage;\n+    this.cpu_usage_threshold = cpu_usage_threshold;\n+    this.io_throughput = io_throughput;\n+    this.io_throughput_threshold = io_throughput_threshold;\n+    this.io_sys_callrate = io_sys_callrate;\n+    this.io_sys_callrate_threshold = io_sys_callrate_threshold;\n+    this.timePeriodInSeconds = timePeriod;\n+  }\n+\n+  public String getIndexName() {\n+    return this.indexName;\n+  }\n+\n+  public String getShardId() {\n+    return this.shardId;\n+  }\n+\n+  public String getNodeId() {\n+    return this.nodeId;\n+  }\n+\n+  public double getCpuUsage() {\n+    return this.cpu_usage;\n+  }\n+\n+  public double getIOThroughput() {\n+    return this.io_throughput;\n+  }\n+\n+  public double getIOSysCallrate() {\n+    return this.io_sys_callrate;\n+  }\n+\n+  @Override\n+  public HotShardSummaryMessage buildSummaryMessage() {\n+    final HotShardSummaryMessage.Builder summaryMessageBuilder = HotShardSummaryMessage\n+            .newBuilder();\n+    summaryMessageBuilder.setIndexName(this.indexName);\n+    summaryMessageBuilder.setShardId(this.shardId);\n+    summaryMessageBuilder.setNodeId(this.nodeId);\n+    summaryMessageBuilder.setCpuUsage(this.cpu_usage);\n+    summaryMessageBuilder.setCpuUsageThreshold(this.cpu_usage_threshold);\n+    summaryMessageBuilder.setIoThroughput(this.io_throughput);\n+    summaryMessageBuilder.setIoThroughputThreshold(this.io_throughput_threshold);\n+    summaryMessageBuilder.setIoSysCallrate(this.io_sys_callrate);\n+    summaryMessageBuilder.setIoSysCallrateThreshold(this.io_sys_callrate_threshold);\n+    summaryMessageBuilder.setTimePeriod(this.timePeriodInSeconds);\n+    return summaryMessageBuilder.build();\n+  }\n+\n+  @Override\n+  public void buildSummaryMessageAndAddToFlowUnit(FlowUnitMessage.Builder messageBuilder) {\n+    messageBuilder.setHotShardSummary(this.buildSummaryMessage());\n+  }\n+\n+  public static HotShardSummary buildHotShardSummaryFromMessage(\n+          HotShardSummaryMessage message) {\n+    return new HotShardSummary(message.getIndexName(),message.getShardId(), message.getNodeId(),\n+            message.getCpuUsage(), message.getCpuUsageThreshold(), message.getIoThroughput(),\n+            message.getIoThroughputThreshold(), message.getIoSysCallrate(), message.getIoSysCallrateThreshold(),\n+            message.getTimePeriod());\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return String.join(\" \", new String[]\n+            { this.indexName, this.shardId, this.nodeId,\n+                    String.valueOf(this.cpu_usage), String.valueOf(this.cpu_usage_threshold),\n+                    String.valueOf(this.io_throughput), String.valueOf(this.io_throughput_threshold),\n+                    String.valueOf(io_sys_callrate), String.valueOf(io_sys_callrate_threshold)\n+            });\n+  }\n+\n+  @Override\n+  public String getTableName() {\n+    return HotShardSummary.HOT_SHARD_SUMMARY_TABLE;\n+  }\n+\n+  @Override\n+  public List<Field<?>> getSqlSchema() {\n+    List<Field<?>> schema = new ArrayList<>();\n+    schema.add(HotShardSummaryField.INDEX_NAME_FIELD.getField());\n+    schema.add(HotShardSummaryField.SHARD_ID_FIELD.getField());\n+    schema.add(HotShardSummaryField.NODE_ID_FIELD.getField());\n+    schema.add(HotShardSummaryField.CPU_USAGE_FIELD.getField());\n+    schema.add(HotShardSummaryField.CPU_USAGE_THRESHOLD_FIELD.getField());\n+    schema.add(HotShardSummaryField.IO_THROUGHPUT_FIELD.getField());\n+    schema.add(HotShardSummaryField.IO_THROUGHPUT_THRESHOLD_FIELD.getField());\n+    schema.add(HotShardSummaryField.IO_SYSCALLRATE_FIELD.getField());\n+    schema.add(HotShardSummaryField.IO_SYSCALLRATE_THRESHOLD_FIELD.getField());\n+    schema.add(HotShardSummaryField.TIME_PERIOD_FIELD.getField());\n+    return schema;\n+  }\n+\n+  @Override\n+  public List<Object> getSqlValue() {\n+    List<Object> value = new ArrayList<>();\n+    value.add(this.indexName);\n+    value.add(this.shardId);\n+    value.add(this.nodeId);\n+    value.add(this.cpu_usage);\n+    value.add(this.cpu_usage_threshold);\n+    value.add(this.io_throughput);\n+    value.add(this.io_throughput_threshold);\n+    value.add(this.io_sys_callrate);\n+    value.add(this.io_sys_callrate_threshold);\n+    value.add(Integer.valueOf(this.timePeriodInSeconds));\n+    return value;\n+  }\n+\n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.INDEX_NAME_COL_NAME, this.indexName);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.SHARD_ID_COL_NAME, this.shardId);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, this.nodeId);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.CPU_USAGE_COL_NAME, this.cpu_usage);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.CPU_USAGE_THRESHOLD_COL_NAME, this.cpu_usage_threshold);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.IO_THROUGHPUT_COL_NAME, this.io_throughput);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.IO_THROUGHPUT_THRESHOLD_COL_NAME, this.io_throughput_threshold);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.IO_SYSCALLRATE_COL_NAME, this.io_sys_callrate);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.IO_SYSCALLRATE_THRESHOLD_COL_NAME, this.io_sys_callrate_threshold);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.TIME_PERIOD_COL_NAME, this.timePeriodInSeconds);\n+    return summaryObj;\n+  }\n+\n+  public static class SQL_SCHEMA_CONSTANTS {\n+    public static final String INDEX_NAME_COL_NAME = \"index_name\";\n+    public static final String SHARD_ID_COL_NAME = \"shard_id\";\n+    public static final String NODE_ID_COL_NAME = \"node_id\";\n+    public static final String CPU_USAGE_COL_NAME = \"cpu_usage\";\n+    public static final String CPU_USAGE_THRESHOLD_COL_NAME = \"cpu_usage_threshold\";\n+    public static final String IO_THROUGHPUT_COL_NAME = \"io_throughput\";\n+    public static final String IO_THROUGHPUT_THRESHOLD_COL_NAME = \"io_throughput_threshold\";\n+    public static final String IO_SYSCALLRATE_COL_NAME = \"io_sys_callrate\";\n+    public static final String IO_SYSCALLRATE_THRESHOLD_COL_NAME = \"io_sys_callrate_threshold\";\n+    public static final String TIME_PERIOD_COL_NAME = \"time_period\";\n+\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum HotShardSummaryField implements JooqFieldValue {\n+    INDEX_NAME_FIELD(SQL_SCHEMA_CONSTANTS.INDEX_NAME_COL_NAME, String.class),\n+    SHARD_ID_FIELD(SQL_SCHEMA_CONSTANTS.SHARD_ID_COL_NAME, String.class),\n+    NODE_ID_FIELD(SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, String.class),\n+    CPU_USAGE_FIELD(SQL_SCHEMA_CONSTANTS.CPU_USAGE_COL_NAME, Double.class),\n+    CPU_USAGE_THRESHOLD_FIELD(SQL_SCHEMA_CONSTANTS.CPU_USAGE_THRESHOLD_COL_NAME, Double.class),\n+    IO_THROUGHPUT_FIELD(SQL_SCHEMA_CONSTANTS.IO_THROUGHPUT_COL_NAME, Double.class),\n+    IO_THROUGHPUT_THRESHOLD_FIELD(SQL_SCHEMA_CONSTANTS.IO_THROUGHPUT_THRESHOLD_COL_NAME, Double.class),\n+    IO_SYSCALLRATE_FIELD(SQL_SCHEMA_CONSTANTS.IO_SYSCALLRATE_COL_NAME, Double.class),\n+    IO_SYSCALLRATE_THRESHOLD_FIELD(SQL_SCHEMA_CONSTANTS.IO_SYSCALLRATE_THRESHOLD_COL_NAME, Double.class),\n+    TIME_PERIOD_FIELD(SQL_SCHEMA_CONSTANTS.TIME_PERIOD_COL_NAME, Integer.class);\n+\n+    private String name;\n+    private Class<?> clazz;\n+\n+    HotShardSummaryField(final String name, Class<?> clazz) {\n+      this.name = name;\n+      this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public Field<?> getField() {\n+      return DSL.field(DSL.name(this.name), this.clazz);\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return this.name;\n+    }\n+  }\n+\n+  /**\n+   * Re-generate the node summary object from SQL query result.\n+   * @param record SQLite record\n+   * @return node summary object\n+   */\n+  @Nullable\n+  public static HotShardSummary buildSummary(Record record) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDcyOTM1MA==", "bodyText": "It is important that we reuse the metric nodes between RCAs or else we are making the SQLite queries again and again.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414729350", "createdAt": "2020-04-24T17:06:45Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -104,9 +109,35 @@ public void construct() {\n     hotNodeClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n     hotNodeClusterRca.addAllUpstreams(Collections.singletonList(hotJVMNodeRca));\n \n+    constructShardResourceUsageGraph();\n+\n     // constructResourceHeatMapGraph();\n   }\n \n+  private void constructShardResourceUsageGraph() {\n+    Metric cpuUsage = new CPU_Utilization(5);\n+    Metric ioTotThroughput = new IO_TotThroughput(5);\n+    Metric ioTotSyscallRate = new IO_TotalSyscallRate(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0MzUzOQ==", "bodyText": "If we specify LOCUS_DATA_MASTER_NODE for a graph node then the graph node gets executed on a data node and master node, right ? Here we have this in case the cluster does not have dedicated masters ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414743539", "createdAt": "2020-04-24T17:29:54Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -104,9 +109,35 @@ public void construct() {\n     hotNodeClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n     hotNodeClusterRca.addAllUpstreams(Collections.singletonList(hotJVMNodeRca));\n \n+    constructShardResourceUsageGraph();\n+\n     // constructResourceHeatMapGraph();\n   }\n \n+  private void constructShardResourceUsageGraph() {\n+    Metric cpuUsage = new CPU_Utilization(5);\n+    Metric ioTotThroughput = new IO_TotThroughput(5);\n+    Metric ioTotSyscallRate = new IO_TotalSyscallRate(5);\n+\n+    cpuUsage.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    ioTotThroughput.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    ioTotSyscallRate.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    addLeaf(cpuUsage);\n+    addLeaf(ioTotThroughput);\n+    addLeaf(ioTotSyscallRate);\n+\n+    // High CPU Usage RCA\n+    HighCPUShardRca highCPUShardRca = new HighCPUShardRca(5, 12, cpuUsage, ioTotThroughput, ioTotSyscallRate);\n+    highCPUShardRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NjA2Mg==", "bodyText": "The downside is we will waste cycles executing this graph node on a dedicated master node, where there will be no shards. I guess we don't have an appropriate tags to distinguish between the two. We should as a backlog issues.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414746062", "createdAt": "2020-04-24T17:34:06Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -104,9 +109,35 @@ public void construct() {\n     hotNodeClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n     hotNodeClusterRca.addAllUpstreams(Collections.singletonList(hotJVMNodeRca));\n \n+    constructShardResourceUsageGraph();\n+\n     // constructResourceHeatMapGraph();\n   }\n \n+  private void constructShardResourceUsageGraph() {\n+    Metric cpuUsage = new CPU_Utilization(5);\n+    Metric ioTotThroughput = new IO_TotThroughput(5);\n+    Metric ioTotSyscallRate = new IO_TotalSyscallRate(5);\n+\n+    cpuUsage.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    ioTotThroughput.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    ioTotSyscallRate.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    addLeaf(cpuUsage);\n+    addLeaf(ioTotThroughput);\n+    addLeaf(ioTotSyscallRate);\n+\n+    // High CPU Usage RCA\n+    HighCPUShardRca highCPUShardRca = new HighCPUShardRca(5, 12, cpuUsage, ioTotThroughput, ioTotSyscallRate);\n+    highCPUShardRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0MzUzOQ=="}, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NzM3OA==", "bodyText": "In the interest of typesafety, we should use the actual type CPUUtilization etc.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414747378", "createdAt": "2020-04-24T17:36:18Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/HighCPUShardRca.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotshard;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HardwareEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotShardSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+\n+/**\n+ * This RCA is to identify a hot shard within an index. A Hot shard is an outlier within its counterparts.\n+ * The RCA subscribes to following metrics :\n+ * 1. CPU_Utilization\n+ * 2. IO_TotThroughput\n+ * 3. IO_TotalSyscallRate\n+ *\n+ * <p>The RCA looks at the above 3 metric data, compares the values against the threshold for each resource\n+ * and if the usage for any of 3 resources is greater than their individual threshold, we mark the context\n+ * as 'UnHealthy' and create a HotShardResourceSummary for the shard.\n+ *\n+ * <p>Optional metrics which can be added in future :\n+ * 1. Heap_AllocRate\n+ * 2. Paging_RSS\n+ *\n+ */\n+public class HighCPUShardRca extends Rca<ResourceFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(HighCPUShardRca.class);\n+    private static final int SLIDING_WINDOW_IN_SECONDS =  60;\n+\n+    //TODO : {@khushbr} refine the threshold values and read same from config file\n+    private static final double CPU_USAGE_THRESHOLD = 0.01;\n+    private static final double IO_TOT_THROUGHPUT_THRESHOLD_IN_BYTES = 250000;\n+    private static final double IO_TOT_SYSCALL_RATE_THRESHOLD_PER_SECOND = 0.01;\n+\n+    private final Metric cpuUsage;\n+    private final Metric ioTotThroughput;\n+    private final Metric ioTotSyscallRate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NzY2NA==", "bodyText": "Similarly here and remove the generic parameter", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414747664", "createdAt": "2020-04-24T17:36:45Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/HighCPUShardRca.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotshard;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HardwareEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotShardSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+\n+/**\n+ * This RCA is to identify a hot shard within an index. A Hot shard is an outlier within its counterparts.\n+ * The RCA subscribes to following metrics :\n+ * 1. CPU_Utilization\n+ * 2. IO_TotThroughput\n+ * 3. IO_TotalSyscallRate\n+ *\n+ * <p>The RCA looks at the above 3 metric data, compares the values against the threshold for each resource\n+ * and if the usage for any of 3 resources is greater than their individual threshold, we mark the context\n+ * as 'UnHealthy' and create a HotShardResourceSummary for the shard.\n+ *\n+ * <p>Optional metrics which can be added in future :\n+ * 1. Heap_AllocRate\n+ * 2. Paging_RSS\n+ *\n+ */\n+public class HighCPUShardRca extends Rca<ResourceFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(HighCPUShardRca.class);\n+    private static final int SLIDING_WINDOW_IN_SECONDS =  60;\n+\n+    //TODO : {@khushbr} refine the threshold values and read same from config file\n+    private static final double CPU_USAGE_THRESHOLD = 0.01;\n+    private static final double IO_TOT_THROUGHPUT_THRESHOLD_IN_BYTES = 250000;\n+    private static final double IO_TOT_SYSCALL_RATE_THRESHOLD_PER_SECOND = 0.01;\n+\n+    private final Metric cpuUsage;\n+    private final Metric ioTotThroughput;\n+    private final Metric ioTotSyscallRate;\n+    private final ResourceType resourceType;\n+    private final int rcaPeriod;\n+    private int counter;\n+    protected Clock clock;\n+\n+    // HashMap with IndexShardKey object as key and SlidingWindowData object of metric data as value\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> cpuUsageHashMap;\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> ioTotThroughputHashMap;\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>>  ioTotSyscallRateHashMap;\n+\n+    public <M extends Metric> HighCPUShardRca(final long evaluationIntervalSeconds, final int rcaPeriod,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0NzkyNw==", "bodyText": "Perhaps we can make all the method arguments final here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414747927", "createdAt": "2020-04-24T17:37:16Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/HighCPUShardRca.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotshard;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HardwareEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotShardSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+\n+/**\n+ * This RCA is to identify a hot shard within an index. A Hot shard is an outlier within its counterparts.\n+ * The RCA subscribes to following metrics :\n+ * 1. CPU_Utilization\n+ * 2. IO_TotThroughput\n+ * 3. IO_TotalSyscallRate\n+ *\n+ * <p>The RCA looks at the above 3 metric data, compares the values against the threshold for each resource\n+ * and if the usage for any of 3 resources is greater than their individual threshold, we mark the context\n+ * as 'UnHealthy' and create a HotShardResourceSummary for the shard.\n+ *\n+ * <p>Optional metrics which can be added in future :\n+ * 1. Heap_AllocRate\n+ * 2. Paging_RSS\n+ *\n+ */\n+public class HighCPUShardRca extends Rca<ResourceFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(HighCPUShardRca.class);\n+    private static final int SLIDING_WINDOW_IN_SECONDS =  60;\n+\n+    //TODO : {@khushbr} refine the threshold values and read same from config file\n+    private static final double CPU_USAGE_THRESHOLD = 0.01;\n+    private static final double IO_TOT_THROUGHPUT_THRESHOLD_IN_BYTES = 250000;\n+    private static final double IO_TOT_SYSCALL_RATE_THRESHOLD_PER_SECOND = 0.01;\n+\n+    private final Metric cpuUsage;\n+    private final Metric ioTotThroughput;\n+    private final Metric ioTotSyscallRate;\n+    private final ResourceType resourceType;\n+    private final int rcaPeriod;\n+    private int counter;\n+    protected Clock clock;\n+\n+    // HashMap with IndexShardKey object as key and SlidingWindowData object of metric data as value\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> cpuUsageHashMap;\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> ioTotThroughputHashMap;\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>>  ioTotSyscallRateHashMap;\n+\n+    public <M extends Metric> HighCPUShardRca(final long evaluationIntervalSeconds, final int rcaPeriod,\n+            final M cpuUsage, final M ioTotThroughput, final M ioTotSyscallRate) {\n+        super(evaluationIntervalSeconds);\n+        this.cpuUsage = cpuUsage;\n+        this.ioTotThroughput = ioTotThroughput;\n+        this.ioTotSyscallRate = ioTotSyscallRate;\n+        this.rcaPeriod = rcaPeriod;\n+        this.counter = 0;\n+        this.resourceType = ResourceType.newBuilder().setHardwareResourceTypeValue(HardwareEnum.CPU_VALUE).build();\n+        this.clock = Clock.systemUTC();\n+        this.cpuUsageHashMap = new HashMap<>();\n+        this.ioTotThroughputHashMap = new HashMap<>();\n+        this.ioTotSyscallRateHashMap = new HashMap<>();\n+    }\n+\n+    private void consumeFlowUnit(MetricFlowUnit metricFlowUnit, String metricType,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc0OTE5Mw==", "bodyText": "Should we also add the record here so that looking at the logs we will infer why ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414749193", "createdAt": "2020-04-24T17:39:25Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/HighCPUShardRca.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotshard;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HardwareEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotShardSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+\n+/**\n+ * This RCA is to identify a hot shard within an index. A Hot shard is an outlier within its counterparts.\n+ * The RCA subscribes to following metrics :\n+ * 1. CPU_Utilization\n+ * 2. IO_TotThroughput\n+ * 3. IO_TotalSyscallRate\n+ *\n+ * <p>The RCA looks at the above 3 metric data, compares the values against the threshold for each resource\n+ * and if the usage for any of 3 resources is greater than their individual threshold, we mark the context\n+ * as 'UnHealthy' and create a HotShardResourceSummary for the shard.\n+ *\n+ * <p>Optional metrics which can be added in future :\n+ * 1. Heap_AllocRate\n+ * 2. Paging_RSS\n+ *\n+ */\n+public class HighCPUShardRca extends Rca<ResourceFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(HighCPUShardRca.class);\n+    private static final int SLIDING_WINDOW_IN_SECONDS =  60;\n+\n+    //TODO : {@khushbr} refine the threshold values and read same from config file\n+    private static final double CPU_USAGE_THRESHOLD = 0.01;\n+    private static final double IO_TOT_THROUGHPUT_THRESHOLD_IN_BYTES = 250000;\n+    private static final double IO_TOT_SYSCALL_RATE_THRESHOLD_PER_SECOND = 0.01;\n+\n+    private final Metric cpuUsage;\n+    private final Metric ioTotThroughput;\n+    private final Metric ioTotSyscallRate;\n+    private final ResourceType resourceType;\n+    private final int rcaPeriod;\n+    private int counter;\n+    protected Clock clock;\n+\n+    // HashMap with IndexShardKey object as key and SlidingWindowData object of metric data as value\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> cpuUsageHashMap;\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> ioTotThroughputHashMap;\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>>  ioTotSyscallRateHashMap;\n+\n+    public <M extends Metric> HighCPUShardRca(final long evaluationIntervalSeconds, final int rcaPeriod,\n+            final M cpuUsage, final M ioTotThroughput, final M ioTotSyscallRate) {\n+        super(evaluationIntervalSeconds);\n+        this.cpuUsage = cpuUsage;\n+        this.ioTotThroughput = ioTotThroughput;\n+        this.ioTotSyscallRate = ioTotSyscallRate;\n+        this.rcaPeriod = rcaPeriod;\n+        this.counter = 0;\n+        this.resourceType = ResourceType.newBuilder().setHardwareResourceTypeValue(HardwareEnum.CPU_VALUE).build();\n+        this.clock = Clock.systemUTC();\n+        this.cpuUsageHashMap = new HashMap<>();\n+        this.ioTotThroughputHashMap = new HashMap<>();\n+        this.ioTotSyscallRateHashMap = new HashMap<>();\n+    }\n+\n+    private void consumeFlowUnit(MetricFlowUnit metricFlowUnit, String metricType,\n+                                 HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> metricMap) {\n+        for (Record record : metricFlowUnit.getData()) {\n+            try {\n+                String indexName = record.getValue(INDEX_NAME.toString(), String.class);\n+                String shardId = record.getValue(SHARD_ID.toString(), String.class);\n+                if (indexName == null || shardId == null) {\n+                    continue;\n+                }\n+                double usage = record.getValue(MetricsDB.SUM, Double.class);\n+                IndexShardKey indexShardKey = new IndexShardKey(indexName, shardId);\n+                SlidingWindow<SlidingWindowData> usageDeque = metricMap.get(indexShardKey);\n+                if (null == usageDeque) {\n+                    usageDeque = new SlidingWindow<>(SLIDING_WINDOW_IN_SECONDS, TimeUnit.SECONDS);\n+                    metricMap.put(indexShardKey, usageDeque);\n+                }\n+                usageDeque.next(new SlidingWindowData(this.clock.millis(), usage));\n+            } catch (Exception e) {\n+                // TODO: Add a metric here.\n+                LOG.error(\"Failed to parse metric in FlowUnit from {}\", metricType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MDUzNQ==", "bodyText": "It might be preferable to throw illegalState exception and capture the stack trace ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414750535", "createdAt": "2020-04-24T17:41:31Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/HighCPUShardRca.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotshard;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension.INDEX_NAME;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.CommonDimension.SHARD_ID;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HardwareEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotShardSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.time.Clock;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.Record;\n+\n+/**\n+ * This RCA is to identify a hot shard within an index. A Hot shard is an outlier within its counterparts.\n+ * The RCA subscribes to following metrics :\n+ * 1. CPU_Utilization\n+ * 2. IO_TotThroughput\n+ * 3. IO_TotalSyscallRate\n+ *\n+ * <p>The RCA looks at the above 3 metric data, compares the values against the threshold for each resource\n+ * and if the usage for any of 3 resources is greater than their individual threshold, we mark the context\n+ * as 'UnHealthy' and create a HotShardResourceSummary for the shard.\n+ *\n+ * <p>Optional metrics which can be added in future :\n+ * 1. Heap_AllocRate\n+ * 2. Paging_RSS\n+ *\n+ */\n+public class HighCPUShardRca extends Rca<ResourceFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(HighCPUShardRca.class);\n+    private static final int SLIDING_WINDOW_IN_SECONDS =  60;\n+\n+    //TODO : {@khushbr} refine the threshold values and read same from config file\n+    private static final double CPU_USAGE_THRESHOLD = 0.01;\n+    private static final double IO_TOT_THROUGHPUT_THRESHOLD_IN_BYTES = 250000;\n+    private static final double IO_TOT_SYSCALL_RATE_THRESHOLD_PER_SECOND = 0.01;\n+\n+    private final Metric cpuUsage;\n+    private final Metric ioTotThroughput;\n+    private final Metric ioTotSyscallRate;\n+    private final ResourceType resourceType;\n+    private final int rcaPeriod;\n+    private int counter;\n+    protected Clock clock;\n+\n+    // HashMap with IndexShardKey object as key and SlidingWindowData object of metric data as value\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> cpuUsageHashMap;\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> ioTotThroughputHashMap;\n+    private HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>>  ioTotSyscallRateHashMap;\n+\n+    public <M extends Metric> HighCPUShardRca(final long evaluationIntervalSeconds, final int rcaPeriod,\n+            final M cpuUsage, final M ioTotThroughput, final M ioTotSyscallRate) {\n+        super(evaluationIntervalSeconds);\n+        this.cpuUsage = cpuUsage;\n+        this.ioTotThroughput = ioTotThroughput;\n+        this.ioTotSyscallRate = ioTotSyscallRate;\n+        this.rcaPeriod = rcaPeriod;\n+        this.counter = 0;\n+        this.resourceType = ResourceType.newBuilder().setHardwareResourceTypeValue(HardwareEnum.CPU_VALUE).build();\n+        this.clock = Clock.systemUTC();\n+        this.cpuUsageHashMap = new HashMap<>();\n+        this.ioTotThroughputHashMap = new HashMap<>();\n+        this.ioTotSyscallRateHashMap = new HashMap<>();\n+    }\n+\n+    private void consumeFlowUnit(MetricFlowUnit metricFlowUnit, String metricType,\n+                                 HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> metricMap) {\n+        for (Record record : metricFlowUnit.getData()) {\n+            try {\n+                String indexName = record.getValue(INDEX_NAME.toString(), String.class);\n+                String shardId = record.getValue(SHARD_ID.toString(), String.class);\n+                if (indexName == null || shardId == null) {\n+                    continue;\n+                }\n+                double usage = record.getValue(MetricsDB.SUM, Double.class);\n+                IndexShardKey indexShardKey = new IndexShardKey(indexName, shardId);\n+                SlidingWindow<SlidingWindowData> usageDeque = metricMap.get(indexShardKey);\n+                if (null == usageDeque) {\n+                    usageDeque = new SlidingWindow<>(SLIDING_WINDOW_IN_SECONDS, TimeUnit.SECONDS);\n+                    metricMap.put(indexShardKey, usageDeque);\n+                }\n+                usageDeque.next(new SlidingWindowData(this.clock.millis(), usage));\n+            } catch (Exception e) {\n+                // TODO: Add a metric here.\n+                LOG.error(\"Failed to parse metric in FlowUnit from {}\", metricType);\n+            }\n+        }\n+    }\n+\n+    private void consumeMetrics(List<MetricFlowUnit> metrics,\n+                                HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> metricMap) {\n+        for (MetricFlowUnit metric: metrics) {\n+            if (metric.getData() != null) {\n+                consumeFlowUnit(metric, metrics.getClass().getName(), metricMap);\n+            }\n+        }\n+    }\n+\n+    private double fetchUsageValueFromMap(HashMap<IndexShardKey, SlidingWindow<SlidingWindowData>> usageMap, IndexShardKey indexShardKey) {\n+        double value = 0;\n+        if (usageMap.get(indexShardKey) != null) {\n+            value = usageMap.get(indexShardKey).readAvg(TimeUnit.SECONDS);\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Locally identifies hot shards on the node.\n+     * The function uses CPU_Utilization, IO_TotThroughput and IO_TotalSyscallRate FlowUnits\n+     * to identify a Hot Shard.\n+     *\n+     * <p>We specify the threshold for CPU_Utilization, IO_TotThroughput and IO_TotalSyscallRate and\n+     * any shard using either of 3 resources more than the specified threshold is declared Hot.\n+     *\n+     */\n+    @Override\n+    public ResourceFlowUnit operate() {\n+        List<MetricFlowUnit> cpuUsageMetrics = cpuUsage.getFlowUnits();\n+        List<MetricFlowUnit> ioTotThroughputMetrics = ioTotThroughput.getFlowUnits();\n+        List<MetricFlowUnit> ioTotSyscallRateMetrics = ioTotSyscallRate.getFlowUnits();\n+        counter += 1;\n+\n+        // Populate the Resource HashMaps\n+        consumeMetrics(cpuUsageMetrics, cpuUsageHashMap);\n+        consumeMetrics(ioTotThroughputMetrics, ioTotThroughputHashMap);\n+        consumeMetrics(ioTotSyscallRateMetrics, ioTotSyscallRateHashMap);\n+\n+        if (counter == rcaPeriod) {\n+            ResourceContext context = new ResourceContext(Resources.State.HEALTHY);\n+            List<HotShardSummary> HotShardSummaryList = new ArrayList<>();\n+            ClusterDetailsEventProcessor.NodeDetails currentNode = ClusterDetailsEventProcessor.getCurrentNodeDetails();\n+\n+            Set<IndexShardKey> indexShardKeySet = new HashSet<>(cpuUsageHashMap.keySet());\n+            indexShardKeySet.addAll(ioTotThroughputHashMap.keySet());\n+            indexShardKeySet.addAll(ioTotSyscallRateHashMap.keySet());\n+\n+            for (IndexShardKey indexShardKey : indexShardKeySet) {\n+                double avgCpuUsage = fetchUsageValueFromMap(cpuUsageHashMap, indexShardKey);\n+                double avgIoTotThroughput = fetchUsageValueFromMap(ioTotThroughputHashMap, indexShardKey);\n+                double avgIoTotSyscallRate = fetchUsageValueFromMap(ioTotSyscallRateHashMap, indexShardKey);\n+\n+                if (avgCpuUsage > CPU_USAGE_THRESHOLD\n+                        || avgIoTotThroughput > IO_TOT_THROUGHPUT_THRESHOLD_IN_BYTES\n+                        || avgIoTotSyscallRate > IO_TOT_SYSCALL_RATE_THRESHOLD_PER_SECOND) {\n+                    HotShardSummaryList.add(new HotShardSummary(\n+                            indexShardKey.getIndexName(), indexShardKey.getShardId(), currentNode.getId(),\n+                            avgCpuUsage, CPU_USAGE_THRESHOLD, avgIoTotThroughput, IO_TOT_THROUGHPUT_THRESHOLD_IN_BYTES,\n+                            avgIoTotSyscallRate, IO_TOT_SYSCALL_RATE_THRESHOLD_PER_SECOND, SLIDING_WINDOW_IN_SECONDS));\n+                    context = new ResourceContext(Resources.State.UNHEALTHY);\n+                    LOG.debug(\"Hot Shard Identified, Shard : {} , avgCpuUsage = {} , avgIoTotThroughput = {}, \"\n+                            + \"avgIoTotSyscallRate = {}\", indexShardKey, avgCpuUsage, avgIoTotThroughput, avgIoTotSyscallRate);\n+                }\n+            }\n+\n+            // reset the variables\n+            counter = 0;\n+\n+            HotNodeSummary summary = new HotNodeSummary(\n+                    currentNode.getId(), currentNode.getHostAddress(), HotShardSummaryList);\n+\n+            LOG.debug(\"High CPU Usage Shard RCA Context :  \" + context.toString());\n+            return new ResourceFlowUnit(this.clock.millis(), context, summary);\n+        } else {\n+            LOG.debug(\"Empty FlowUnit returned for High CPU Usage Shard RCA\");\n+            return new ResourceFlowUnit(this.clock.millis());\n+        }\n+    }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    LOG.error(\"rca: {} should be executed from Local\", this.getClass().getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDc1MTUzNg==", "bodyText": "remove ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r414751536", "createdAt": "2020-04-24T17:43:10Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotResourceSummaryTest.java", "diffHunk": "@@ -149,8 +154,11 @@ public void testToJson() {\n                 json.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.MAX_VALUE_COL_NAME).getAsDouble(), 0);\n         Assert.assertEquals(ResourceTypeUtil.getResourceTypeUnit(RESOURCE_TYPE),\n                 json.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.UNIT_TYPE_COL_NAME).getAsString());\n+        System.out.println(json.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.TIME_PERIOD_COL_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c7a430f0448e5404fd2f1099069513572fd4db2"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3d56b5c768b71fd6af3a9173ca7a57b1ce6b73f", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a3d56b5c768b71fd6af3a9173ca7a57b1ce6b73f", "committedDate": "2020-04-28T02:12:21Z", "message": "Addressing the PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTE3MjU5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#pullrequestreview-403917259", "createdAt": "2020-04-30T22:21:19Z", "commit": {"oid": "a3d56b5c768b71fd6af3a9173ca7a57b1ce6b73f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoyMToxOVrOGO8WDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjoyMToxOVrOGO8WDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyMTkzMg==", "bodyText": "We should probably use something like this for hashcode.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r418321932", "createdAt": "2020-04-30T22:21:19Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotshard/NodeShardKey.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotshard;\n+\n+public class NodeShardKey {\n+    private final String nodeId;\n+    private final String shardId;\n+\n+    public NodeShardKey(String nodeId, String shardId) {\n+        this.nodeId = nodeId;\n+        this.shardId = shardId;\n+    }\n+\n+    public String getNodeId() {\n+        return this.nodeId;\n+    }\n+\n+    public String getShardId() {\n+        return this.shardId;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj != null && obj instanceof NodeShardKey) {\n+            NodeShardKey key = (NodeShardKey)obj;\n+            return nodeId.equals(key.nodeId) && shardId.equals(key.shardId);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d56b5c768b71fd6af3a9173ca7a57b1ce6b73f"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "740a0720905aa21cd15f636341439a4c3745a7bf", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/740a0720905aa21cd15f636341439a4c3745a7bf", "committedDate": "2020-05-01T00:14:09Z", "message": "Merge branch 'master' into hot-shard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67c9ada08bbef966c021ce47400e70c8bb17ea08", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/67c9ada08bbef966c021ce47400e70c8bb17ea08", "committedDate": "2020-05-01T00:21:02Z", "message": "Merge branch 'master' into hot-shard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aac9612d168b6cb6719e2fc9dace99cf642cf252", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/aac9612d168b6cb6719e2fc9dace99cf642cf252", "committedDate": "2020-05-01T00:24:49Z", "message": "Addressing the PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTYzMTYw", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#pullrequestreview-403963160", "createdAt": "2020-05-01T00:28:03Z", "commit": {"oid": "aac9612d168b6cb6719e2fc9dace99cf642cf252"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyODowM1rOGO-w-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDoyODowM1rOGO-w-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MTU5NA==", "bodyText": "Why are the tests commented ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#discussion_r418361594", "createdAt": "2020-05-01T00:28:03Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/rca/hotshard/HighCPUShardRcaTest.java", "diffHunk": "@@ -134,7 +134,7 @@ public void testOperate() {\n         HotNodeSummary summary1 = (HotNodeSummary) flowUnit.getResourceSummary();\n         List<HotShardSummary> hotShardSummaryList1 = summary1.getHotShardSummaryList();\n \n-        Assert.assertTrue(flowUnit.getResourceContext().isUnhealthy());\n+        /*Assert.assertTrue(flowUnit.getResourceContext().isUnhealthy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac9612d168b6cb6719e2fc9dace99cf642cf252"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTY1MDg3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#pullrequestreview-403965087", "createdAt": "2020-05-01T00:33:47Z", "commit": {"oid": "aac9612d168b6cb6719e2fc9dace99cf642cf252"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTg4MzI4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#pullrequestreview-403988328", "createdAt": "2020-05-01T02:06:29Z", "commit": {"oid": "aac9612d168b6cb6719e2fc9dace99cf642cf252"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ce9c25460fee6a17a85d7647082fe89206f34ab", "author": {"user": {"login": "khushbr", "name": "Khushboo Rajput"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8ce9c25460fee6a17a85d7647082fe89206f34ab", "committedDate": "2020-05-01T02:08:11Z", "message": "Fixing the UT post IndexShardKey change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTg5MTg0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/161#pullrequestreview-403989184", "createdAt": "2020-05-01T02:09:59Z", "commit": {"oid": "8ce9c25460fee6a17a85d7647082fe89206f34ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1218, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}