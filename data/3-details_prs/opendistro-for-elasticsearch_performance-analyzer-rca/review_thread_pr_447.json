{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2ODMwOTU5", "number": 447, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxMDoyOFrOEp2aTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNToxNlrOEq1qeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzE4NTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxMDoyOFrOHbxXzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo1MDo1MlrOHbyyfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4MjUwOA==", "bodyText": "Is this functionally correct? IIUC, this expects timestampDiff to be in SECONDS, converts it to timeUnit and compares it against bucketSizeMs which is in milliseconds.\nIs timeUnit guaranteed to be in ms? Is timestampDiff guaranteed to be in seconds?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r498882508", "createdAt": "2020-10-02T15:10:28Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ *\n+ * <p>The sliding window retains data for slidingWindowSizeInSeconds and aggregates values into time\n+ * buckets of width bucketSizeInSeconds. For example if slidingWindowSizeInSeconds is 86400 (1 day)\n+ * and bucketSizeInSeconds is 3600 (1 hr) then there will be at most 25 data points in the sliding window\n+ * at any given time. It's 25 and not 24 because the oldest datapoints are removed lazily based on\n+ * arrival time. This shouldn't impact most consumers of this data structure.\n+ *\n+ * <p>The data contained in this sliding window is effectively a time series. Consumers may extend this\n+ * class and define more complex aggregations or analytics functions.\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  protected SlidingWindowData aggregatedData;\n+  protected final double bucketSizeMs;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  int bucketSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.bucketSizeMs = timeUnit.toMillis(bucketSize);\n+    this.pathToFile = filePath;\n+    try {\n+      if (Files.exists(pathToFile)) {\n+        loadFromFile(pathToFile);\n+      } else {\n+        Files.createFile(pathToFile);\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Couldn't create file {} to perform young generation tuning\", pathToFile, e);\n+      throw new IllegalArgumentException(\"Couldn't create or read a file at \" + filePath);\n+    }\n+  }\n+\n+  @Override\n+  public void next(SlidingWindowData slidingWindowData) {\n+    if (aggregatedData == null) {\n+      aggregatedData = new SlidingWindowData(slidingWindowData.getTimeStamp(), slidingWindowData.getValue());\n+      return;\n+    }\n+    long timestampDiff = slidingWindowData.getTimeStamp() - aggregatedData.getTimeStamp();\n+    if (timeUnit.convert(timestampDiff, TimeUnit.SECONDS) > bucketSizeMs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce6115e62a01ea5d493b871c96699c065c11b4a"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNTcyNg==", "bodyText": "Good catch, fixed and added a UT to catch this.\nSlidingWindowData timestamps must be in ms (SlidingWindow assumes this). The bucket length and overall window size can be specified using any timeunit.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r498905726", "createdAt": "2020-10-02T15:50:52Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ *\n+ * <p>The sliding window retains data for slidingWindowSizeInSeconds and aggregates values into time\n+ * buckets of width bucketSizeInSeconds. For example if slidingWindowSizeInSeconds is 86400 (1 day)\n+ * and bucketSizeInSeconds is 3600 (1 hr) then there will be at most 25 data points in the sliding window\n+ * at any given time. It's 25 and not 24 because the oldest datapoints are removed lazily based on\n+ * arrival time. This shouldn't impact most consumers of this data structure.\n+ *\n+ * <p>The data contained in this sliding window is effectively a time series. Consumers may extend this\n+ * class and define more complex aggregations or analytics functions.\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  protected SlidingWindowData aggregatedData;\n+  protected final double bucketSizeMs;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  int bucketSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.bucketSizeMs = timeUnit.toMillis(bucketSize);\n+    this.pathToFile = filePath;\n+    try {\n+      if (Files.exists(pathToFile)) {\n+        loadFromFile(pathToFile);\n+      } else {\n+        Files.createFile(pathToFile);\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Couldn't create file {} to perform young generation tuning\", pathToFile, e);\n+      throw new IllegalArgumentException(\"Couldn't create or read a file at \" + filePath);\n+    }\n+  }\n+\n+  @Override\n+  public void next(SlidingWindowData slidingWindowData) {\n+    if (aggregatedData == null) {\n+      aggregatedData = new SlidingWindowData(slidingWindowData.getTimeStamp(), slidingWindowData.getValue());\n+      return;\n+    }\n+    long timestampDiff = slidingWindowData.getTimeStamp() - aggregatedData.getTimeStamp();\n+    if (timeUnit.convert(timestampDiff, TimeUnit.SECONDS) > bucketSizeMs) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4MjUwOA=="}, "originalCommit": {"oid": "cce6115e62a01ea5d493b871c96699c065c11b4a"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzI0MjE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToyNjoxM1rOHbx79Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjozMTo0MFrOHb0E_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5MTc2NQ==", "bodyText": "This class is doing two things, it is providing a persistable sliding window, and it is aggregating (deduping) data points within a bucketization window.\nHow about we split these responsibilities and have this class focus only on persisting?\nRe: the bucketization piece, I have a few more comments - I suppose the motivation for this is to act like an alarm breach monitor which gets set when some thresholds are hit, and unset on a different criteria. This can be used in deciders then, to figure out when an action is relevant (alarm unhealthy) and irrelevant (alarm healthy).\nAs such, it may be read more often than an issue gets added (next being called) and the sliding window should get updated on each read.\nAgain, we can move this to a separate PR/class and focus this one primarily on persistence as I see most of the code here pertains to persisting data.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r498891765", "createdAt": "2020-10-02T15:26:13Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ *\n+ * <p>The sliding window retains data for slidingWindowSizeInSeconds and aggregates values into time\n+ * buckets of width bucketSizeInSeconds. For example if slidingWindowSizeInSeconds is 86400 (1 day)\n+ * and bucketSizeInSeconds is 3600 (1 hr) then there will be at most 25 data points in the sliding window\n+ * at any given time. It's 25 and not 24 because the oldest datapoints are removed lazily based on\n+ * arrival time. This shouldn't impact most consumers of this data structure.\n+ *\n+ * <p>The data contained in this sliding window is effectively a time series. Consumers may extend this\n+ * class and define more complex aggregations or analytics functions.\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce6115e62a01ea5d493b871c96699c065c11b4a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkyNjg0NQ==", "bodyText": "I removed the aggregation logic from this PR.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r498926845", "createdAt": "2020-10-02T16:31:40Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.Writer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ *\n+ * <p>The sliding window retains data for slidingWindowSizeInSeconds and aggregates values into time\n+ * buckets of width bucketSizeInSeconds. For example if slidingWindowSizeInSeconds is 86400 (1 day)\n+ * and bucketSizeInSeconds is 3600 (1 hr) then there will be at most 25 data points in the sliding window\n+ * at any given time. It's 25 and not 24 because the oldest datapoints are removed lazily based on\n+ * arrival time. This shouldn't impact most consumers of this data structure.\n+ *\n+ * <p>The data contained in this sliding window is effectively a time series. Consumers may extend this\n+ * class and define more complex aggregations or analytics functions.\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5MTc2NQ=="}, "originalCommit": {"oid": "cce6115e62a01ea5d493b871c96699c065c11b4a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDA0NjE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOTo1Njo0NVrOHb57xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDoyNzo1N1rOHb6tEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMjc5MQ==", "bodyText": "Is this still relevant? if not, please remove", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499022791", "createdAt": "2020-10-02T19:56:45Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ *\n+ * <p>The sliding window retains data for slidingWindowSizeInSeconds and aggregates values into time\n+ * buckets of width bucketSizeInSeconds. For example if slidingWindowSizeInSeconds is 86400 (1 day)\n+ * and bucketSizeInSeconds is 3600 (1 hr) then there will be at most 25 data points in the sliding window\n+ * at any given time. It's 25 and not 24 because the oldest datapoints are removed lazily based on\n+ * arrival time. This shouldn't impact most consumers of this data structure.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ad509e36e6b6bad00f49d2c8b613df89cfe695a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzNTQxMA==", "bodyText": "Updated comments in PersistableSlidingWindow", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499035410", "createdAt": "2020-10-02T20:27:57Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ *\n+ * <p>The sliding window retains data for slidingWindowSizeInSeconds and aggregates values into time\n+ * buckets of width bucketSizeInSeconds. For example if slidingWindowSizeInSeconds is 86400 (1 day)\n+ * and bucketSizeInSeconds is 3600 (1 hr) then there will be at most 25 data points in the sliding window\n+ * at any given time. It's 25 and not 24 because the oldest datapoints are removed lazily based on\n+ * arrival time. This shouldn't impact most consumers of this data structure.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAyMjc5MQ=="}, "originalCommit": {"oid": "9ad509e36e6b6bad00f49d2c8b613df89cfe695a"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDMxNTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMTo1MDo1M1rOHb8hDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzo1MzowMFrOHcxeYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NTEwMg==", "bodyText": "nit: We should use File.separator for compatibility.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499065102", "createdAt": "2020-10-02T21:50:53Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4NTkzNA==", "bodyText": "File.separator is generally a path separator like '/'\nIn this case, I'm using a known character to separate data entries in my own file format. I renamed this to DATA_SEPARATOR to hopefully make it more clear.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499885934", "createdAt": "2020-10-05T21:35:52Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NTEwMg=="}, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyOTQ1Ng==", "bodyText": "Thanks, not sure why I said File.separator, I was meaning to say System.lineSeparator(). As long as you use the same separator for reading and writing I'm ok.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499929456", "createdAt": "2020-10-05T23:42:27Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NTEwMg=="}, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkzMjc3MA==", "bodyText": "Changed to use System.lineSeparator()", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499932770", "createdAt": "2020-10-05T23:53:00Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA2NTEwMg=="}, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQ0MTEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzowODo1MVrOHb9rvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTozMjozMFrOHcuhdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NDIyMg==", "bodyText": "do we want to make rotateFile() synchronized ?\nAnd can we refactor FileRotate class to make it more generic instead of using static to expose its method directly ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499084222", "createdAt": "2020-10-02T23:08:51Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {\n+      if (Files.exists(pathToFile)) {\n+        load(pathToFile);\n+      } else {\n+        Files.createFile(pathToFile);\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Couldn't create file {} to perform young generation tuning\", pathToFile, e);\n+      throw new IllegalArgumentException(\"Couldn't create or read a file at \" + filePath);\n+    }\n+  }\n+\n+  /**\n+   * Loads the SlidingWindowData contained in the given path into this PersistableSlidingWindow\n+   * @param path The path to the file containing the SlidingWindow data\n+   * @throws IOException If there is an error reading the file\n+   */\n+  protected void load(Path path) throws IOException {\n+    LineIterator it = FileUtils.lineIterator(path.toFile(), \"UTF-8\");\n+    try {\n+      while (it.hasNext()) {\n+        String line = it.nextLine();\n+        SlidingWindowData data = objectMapper.readValue(line, SlidingWindowData.class);\n+        next(data);\n+      }\n+    } finally {\n+      LineIterator.closeQuietly(it);\n+    }\n+  }\n+\n+  /**\n+   * Writes the contents of this SlidingWindow into the path provided during construction\n+   *\n+   * <p>This write occurs in 2 stages, it writes to a temporary file, then replaces the actual data\n+   * file with the contents of the temporary file\n+   *\n+   * @throws IOException If there is a CRUD error with the files involved\n+   */\n+  protected void write() throws IOException {\n+    String tmpFile = pathToFile.toString() + RandomStringUtils.randomAlphanumeric(32);\n+    Path tmpPath = Paths.get(tmpFile);\n+    Files.createFile(Paths.get(tmpFile));\n+    BufferedWriter writer = new BufferedWriter(new FileWriter(tmpFile, false));\n+    Iterator<SlidingWindowData> it = windowDeque.descendingIterator();\n+    while (it.hasNext()) {\n+      writer.write(objectMapper.writeValueAsString(it.next()));\n+      writer.write(SEPARATOR);\n+    }\n+    // write to temporary file\n+    writer.flush();\n+    // atomic rotate\n+    FileRotate.rotateFile(tmpPath, pathToFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4NDQwNA==", "bodyText": "I made the write and load synchronized, we don't want to make rotateFile synchronized\nFileRotate contains a lot of specific logic for logfile rotation with a date prefix. Refactoring it is out of scope. I've made minimal changes to address the thread safety issue you brought up.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499884404", "createdAt": "2020-10-05T21:32:30Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {\n+      if (Files.exists(pathToFile)) {\n+        load(pathToFile);\n+      } else {\n+        Files.createFile(pathToFile);\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Couldn't create file {} to perform young generation tuning\", pathToFile, e);\n+      throw new IllegalArgumentException(\"Couldn't create or read a file at \" + filePath);\n+    }\n+  }\n+\n+  /**\n+   * Loads the SlidingWindowData contained in the given path into this PersistableSlidingWindow\n+   * @param path The path to the file containing the SlidingWindow data\n+   * @throws IOException If there is an error reading the file\n+   */\n+  protected void load(Path path) throws IOException {\n+    LineIterator it = FileUtils.lineIterator(path.toFile(), \"UTF-8\");\n+    try {\n+      while (it.hasNext()) {\n+        String line = it.nextLine();\n+        SlidingWindowData data = objectMapper.readValue(line, SlidingWindowData.class);\n+        next(data);\n+      }\n+    } finally {\n+      LineIterator.closeQuietly(it);\n+    }\n+  }\n+\n+  /**\n+   * Writes the contents of this SlidingWindow into the path provided during construction\n+   *\n+   * <p>This write occurs in 2 stages, it writes to a temporary file, then replaces the actual data\n+   * file with the contents of the temporary file\n+   *\n+   * @throws IOException If there is a CRUD error with the files involved\n+   */\n+  protected void write() throws IOException {\n+    String tmpFile = pathToFile.toString() + RandomStringUtils.randomAlphanumeric(32);\n+    Path tmpPath = Paths.get(tmpFile);\n+    Files.createFile(Paths.get(tmpFile));\n+    BufferedWriter writer = new BufferedWriter(new FileWriter(tmpFile, false));\n+    Iterator<SlidingWindowData> it = windowDeque.descendingIterator();\n+    while (it.hasNext()) {\n+      writer.write(objectMapper.writeValueAsString(it.next()));\n+      writer.write(SEPARATOR);\n+    }\n+    // write to temporary file\n+    writer.flush();\n+    // atomic rotate\n+    FileRotate.rotateFile(tmpPath, pathToFile);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NDIyMg=="}, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQ1NjcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzoyMTozM1rOHb90tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjoyMDowNlrOHdPy_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NjUxOA==", "bodyText": "should we do this check within the constructor itself ? I think it would make more sense to perform this check during writing operation.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499086518", "createdAt": "2020-10-02T23:21:33Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4NDc4MQ==", "bodyText": "I don't expose the load function to consumers. This class loads previous data exactly once upon construction. It doesn't need to load during write/next operations.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499884781", "createdAt": "2020-10-05T21:33:25Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NjUxOA=="}, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4NTQyOQ==", "bodyText": "The reason I create the file here is because I need to do the check before I load. The reason this logic shouldn't live inside write() is because it would waste every single instruction to check beyond the first", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499885429", "createdAt": "2020-10-05T21:34:53Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NjUxOA=="}, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQyOTU2NQ==", "bodyText": "I thought about it, and I see what you were getting at. I preserved the load in the constructor, but I removed the create file as it's unnecessary.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r500429565", "createdAt": "2020-10-06T16:20:06Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4NjUxOA=="}, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDQ3NjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMzozNzoxMFrOHb-AGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzozOTowMFrOHcxN0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4OTQzNQ==", "bodyText": "any reason why we're writing in the reverse sequential order? Won't this bring back the sliding window in the reverse order after a load?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499089435", "createdAt": "2020-10-02T23:37:10Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {\n+      if (Files.exists(pathToFile)) {\n+        load(pathToFile);\n+      } else {\n+        Files.createFile(pathToFile);\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Couldn't create file {} to perform young generation tuning\", pathToFile, e);\n+      throw new IllegalArgumentException(\"Couldn't create or read a file at \" + filePath);\n+    }\n+  }\n+\n+  /**\n+   * Loads the SlidingWindowData contained in the given path into this PersistableSlidingWindow\n+   * @param path The path to the file containing the SlidingWindow data\n+   * @throws IOException If there is an error reading the file\n+   */\n+  protected void load(Path path) throws IOException {\n+    LineIterator it = FileUtils.lineIterator(path.toFile(), \"UTF-8\");\n+    try {\n+      while (it.hasNext()) {\n+        String line = it.nextLine();\n+        SlidingWindowData data = objectMapper.readValue(line, SlidingWindowData.class);\n+        next(data);\n+      }\n+    } finally {\n+      LineIterator.closeQuietly(it);\n+    }\n+  }\n+\n+  /**\n+   * Writes the contents of this SlidingWindow into the path provided during construction\n+   *\n+   * <p>This write occurs in 2 stages, it writes to a temporary file, then replaces the actual data\n+   * file with the contents of the temporary file\n+   *\n+   * @throws IOException If there is a CRUD error with the files involved\n+   */\n+  protected void write() throws IOException {\n+    String tmpFile = pathToFile.toString() + RandomStringUtils.randomAlphanumeric(32);\n+    Path tmpPath = Paths.get(tmpFile);\n+    Files.createFile(Paths.get(tmpFile));\n+    BufferedWriter writer = new BufferedWriter(new FileWriter(tmpFile, false));\n+    Iterator<SlidingWindowData> it = windowDeque.descendingIterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg4NjQzNw==", "bodyText": "This is so that things are in the correct order. Look at how SlidingWindow stores data in a LinkedList on calls to next(). Also see PersistableSlidingWindowTest#testNext(). I added an extra case to this function for extra sanity as well.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499886437", "createdAt": "2020-10-05T21:37:01Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {\n+      if (Files.exists(pathToFile)) {\n+        load(pathToFile);\n+      } else {\n+        Files.createFile(pathToFile);\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Couldn't create file {} to perform young generation tuning\", pathToFile, e);\n+      throw new IllegalArgumentException(\"Couldn't create or read a file at \" + filePath);\n+    }\n+  }\n+\n+  /**\n+   * Loads the SlidingWindowData contained in the given path into this PersistableSlidingWindow\n+   * @param path The path to the file containing the SlidingWindow data\n+   * @throws IOException If there is an error reading the file\n+   */\n+  protected void load(Path path) throws IOException {\n+    LineIterator it = FileUtils.lineIterator(path.toFile(), \"UTF-8\");\n+    try {\n+      while (it.hasNext()) {\n+        String line = it.nextLine();\n+        SlidingWindowData data = objectMapper.readValue(line, SlidingWindowData.class);\n+        next(data);\n+      }\n+    } finally {\n+      LineIterator.closeQuietly(it);\n+    }\n+  }\n+\n+  /**\n+   * Writes the contents of this SlidingWindow into the path provided during construction\n+   *\n+   * <p>This write occurs in 2 stages, it writes to a temporary file, then replaces the actual data\n+   * file with the contents of the temporary file\n+   *\n+   * @throws IOException If there is a CRUD error with the files involved\n+   */\n+  protected void write() throws IOException {\n+    String tmpFile = pathToFile.toString() + RandomStringUtils.randomAlphanumeric(32);\n+    Path tmpPath = Paths.get(tmpFile);\n+    Files.createFile(Paths.get(tmpFile));\n+    BufferedWriter writer = new BufferedWriter(new FileWriter(tmpFile, false));\n+    Iterator<SlidingWindowData> it = windowDeque.descendingIterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4OTQzNQ=="}, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyODUzMA==", "bodyText": "ha! We offerFirst() and pollLast(), it makes sense now.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r499928530", "createdAt": "2020-10-05T23:39:00Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  protected static final String SEPARATOR = \"\\n\";\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {\n+      if (Files.exists(pathToFile)) {\n+        load(pathToFile);\n+      } else {\n+        Files.createFile(pathToFile);\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Couldn't create file {} to perform young generation tuning\", pathToFile, e);\n+      throw new IllegalArgumentException(\"Couldn't create or read a file at \" + filePath);\n+    }\n+  }\n+\n+  /**\n+   * Loads the SlidingWindowData contained in the given path into this PersistableSlidingWindow\n+   * @param path The path to the file containing the SlidingWindow data\n+   * @throws IOException If there is an error reading the file\n+   */\n+  protected void load(Path path) throws IOException {\n+    LineIterator it = FileUtils.lineIterator(path.toFile(), \"UTF-8\");\n+    try {\n+      while (it.hasNext()) {\n+        String line = it.nextLine();\n+        SlidingWindowData data = objectMapper.readValue(line, SlidingWindowData.class);\n+        next(data);\n+      }\n+    } finally {\n+      LineIterator.closeQuietly(it);\n+    }\n+  }\n+\n+  /**\n+   * Writes the contents of this SlidingWindow into the path provided during construction\n+   *\n+   * <p>This write occurs in 2 stages, it writes to a temporary file, then replaces the actual data\n+   * file with the contents of the temporary file\n+   *\n+   * @throws IOException If there is a CRUD error with the files involved\n+   */\n+  protected void write() throws IOException {\n+    String tmpFile = pathToFile.toString() + RandomStringUtils.randomAlphanumeric(32);\n+    Path tmpPath = Paths.get(tmpFile);\n+    Files.createFile(Paths.get(tmpFile));\n+    BufferedWriter writer = new BufferedWriter(new FileWriter(tmpFile, false));\n+    Iterator<SlidingWindowData> it = windowDeque.descendingIterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA4OTQzNQ=="}, "originalCommit": {"oid": "2700c244aa0746324bc142c42ce634e4e34ed218"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU0ODczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNToxNlrOHdRkQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODoyODowMlrOHdUsTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1ODU2Mg==", "bodyText": "Do we really need to wrap this into an IllegalArgumentException? We could leave this as the checked IOException. It will ensure that callers handle it gracefully.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r500458562", "createdAt": "2020-10-06T17:05:16Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {\n+      if (Files.exists(pathToFile)) {\n+        load(pathToFile);\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Couldn't create file {} to perform young generation tuning\", pathToFile, e);\n+      throw new IllegalArgumentException(\"Couldn't create or read a file at \" + filePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10e47b907ec8a19c7025c9e66238bb4bb9bb87e4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MTg2Ng==", "bodyText": "file could be accidentally deleted by operator or even some other process(i.e. log pusher). should we create a new file in case IOException occurs ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r500491866", "createdAt": "2020-10-06T17:59:42Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {\n+      if (Files.exists(pathToFile)) {\n+        load(pathToFile);\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Couldn't create file {} to perform young generation tuning\", pathToFile, e);\n+      throw new IllegalArgumentException(\"Couldn't create or read a file at \" + filePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1ODU2Mg=="}, "originalCommit": {"oid": "10e47b907ec8a19c7025c9e66238bb4bb9bb87e4"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUwOTc3Mg==", "bodyText": "I've changed this not to throw. If we can't load data on construction we'll just log an error.\nA caller who is expecting data to be loaded can check if the window is empty.\nA deleted/moved file issue will be resolved on the next call to write() as it includes an atomic move operation.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/447#discussion_r500509772", "createdAt": "2020-10-06T18:28:02Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.FileRotate;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.BufferedWriter;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.LineIterator;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * PersistableSlidingWindow is a SlidingWindow which can have its data written to and read from disk\n+ */\n+public class PersistableSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+  private static final Logger LOG = LogManager.getLogger(PersistableSlidingWindow.class);\n+  private static final ObjectMapper objectMapper = new ObjectMapper();\n+\n+  private Path pathToFile;\n+\n+  public PersistableSlidingWindow(int slidingWindowSize,\n+                                  TimeUnit timeUnit,\n+                                  Path filePath) {\n+    super(slidingWindowSize, timeUnit);\n+    this.pathToFile = filePath;\n+    try {\n+      if (Files.exists(pathToFile)) {\n+        load(pathToFile);\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Couldn't create file {} to perform young generation tuning\", pathToFile, e);\n+      throw new IllegalArgumentException(\"Couldn't create or read a file at \" + filePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1ODU2Mg=="}, "originalCommit": {"oid": "10e47b907ec8a19c7025c9e66238bb4bb9bb87e4"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2418, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}