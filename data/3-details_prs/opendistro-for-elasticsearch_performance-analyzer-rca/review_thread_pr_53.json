{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMzcyNDYw", "number": 53, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMTo0MDo0OFrODXteLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyMjo0M1rODX-imw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTg4ODQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotResourceSummary.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMTo0MDo0OFrOFdJ-9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoxODo0MFrOFdkkqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExNjU5Ng==", "bodyText": "Can we do this without using reflection? I think its ok to have some boiler plate code here. Ideally, we should define objects that are sent over the network as protobuf objects to avoid this scenario.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/53#discussion_r366116596", "createdAt": "2020-01-14T01:40:48Z", "author": {"login": "ditac"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotResourceSummary.java", "diffHunk": "@@ -88,8 +109,31 @@ public void buildSummaryMessageAndAddToFlowUnit(FlowUnitMessage.Builder messageB\n \n   public static HotResourceSummary buildHotResourceSummaryFromMessage(\n       HotResourceSummaryMessage message) {\n-    HotResourceSummary newSummary = new HotResourceSummary(message.getResourceType(),\n-        message.getThreshold(), message.getValue(), message.getUnitType(), message.getTimePeriod());\n+    String resourceTypeClassName = message.getResourceType();\n+    //cast to Enum using reflection. find the last \".\" and separate the class name into two parts.\n+    //e.g. com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources$ResourceType.HEAP\n+    //will be split to  \"com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources$ResourceType\"\n+    //and \"HEAP\"\n+    String[] nameSplit = resourceTypeClassName.split(\"\\\\.(?=[^\\\\.]+$)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7768878294a6bf9497d31e75587e9e9231016ef7"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MjIzMg==", "bodyText": "Done. Created a ResourceType protobuf message instead and removed the use of  refection/regex from code.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/53#discussion_r366552232", "createdAt": "2020-01-14T20:18:40Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotResourceSummary.java", "diffHunk": "@@ -88,8 +109,31 @@ public void buildSummaryMessageAndAddToFlowUnit(FlowUnitMessage.Builder messageB\n \n   public static HotResourceSummary buildHotResourceSummaryFromMessage(\n       HotResourceSummaryMessage message) {\n-    HotResourceSummary newSummary = new HotResourceSummary(message.getResourceType(),\n-        message.getThreshold(), message.getValue(), message.getUnitType(), message.getTimePeriod());\n+    String resourceTypeClassName = message.getResourceType();\n+    //cast to Enum using reflection. find the last \".\" and separate the class name into two parts.\n+    //e.g. com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources$ResourceType.HEAP\n+    //will be split to  \"com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources$ResourceType\"\n+    //and \"HEAP\"\n+    String[] nameSplit = resourceTypeClassName.split(\"\\\\.(?=[^\\\\.]+$)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjExNjU5Ng=="}, "originalCommit": {"oid": "7768878294a6bf9497d31e75587e9e9231016ef7"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MjA4ODQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/Rca.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwNDoyNjowMlrOFdL3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoxOTowN1rOFdklWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0NzQ4MA==", "bodyText": "Going back we have a plan to remove the evaluationIntervalSeconds because we think that RCA framework should be simple. It should just run every graph node at every tick. The node decides if it wants\n\nto not do any work and return a empty flow unit.\nto do some work and yet return a empty flow unit as it is not time to emit one\nto do some work and emit a flow unit.\n\nSo basically the framework runs each graph node each time and it is upto the node to do whatever it wants and return a flow unit empty or otherwise.\nSo, we should try to not add the new rcaPeriod", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/53#discussion_r366147480", "createdAt": "2020-01-14T04:26:02Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/Rca.java", "diffHunk": "@@ -24,11 +24,28 @@\n \n public abstract class Rca<T extends ResourceFlowUnit> extends NonLeafNode<T> {\n   private static final Logger LOG = LogManager.getLogger(Rca.class);\n+  // the amount of RCA period this RCA needs to run before sending out a flowunit\n+  protected final int rcaPeriod;\n+  protected boolean alwaysCreateSummary;\n+  protected int counter;\n \n-  public Rca(long evaluationIntervalSeconds) {\n+  public Rca(long evaluationIntervalSeconds, int rcaPeriod) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f1f33db3cd76c7eb973d31e85b27b8ac6e8ef3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2Mjg4OQ==", "bodyText": "I would go as far to recommend that we make sure that no RCA depends on evaluationIntervalSeconds(by that I mean no RCA requires to be scheduled at a particular interval or depend on that.) as part of this CR and make it vestigial and then in a subsequent CR we can remove it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/53#discussion_r366462889", "createdAt": "2020-01-14T17:07:51Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/Rca.java", "diffHunk": "@@ -24,11 +24,28 @@\n \n public abstract class Rca<T extends ResourceFlowUnit> extends NonLeafNode<T> {\n   private static final Logger LOG = LogManager.getLogger(Rca.class);\n+  // the amount of RCA period this RCA needs to run before sending out a flowunit\n+  protected final int rcaPeriod;\n+  protected boolean alwaysCreateSummary;\n+  protected int counter;\n \n-  public Rca(long evaluationIntervalSeconds) {\n+  public Rca(long evaluationIntervalSeconds, int rcaPeriod) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0NzQ4MA=="}, "originalCommit": {"oid": "e6f1f33db3cd76c7eb973d31e85b27b8ac6e8ef3"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MjQwOA==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/53#discussion_r366552408", "createdAt": "2020-01-14T20:19:07Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/Rca.java", "diffHunk": "@@ -24,11 +24,28 @@\n \n public abstract class Rca<T extends ResourceFlowUnit> extends NonLeafNode<T> {\n   private static final Logger LOG = LogManager.getLogger(Rca.class);\n+  // the amount of RCA period this RCA needs to run before sending out a flowunit\n+  protected final int rcaPeriod;\n+  protected boolean alwaysCreateSummary;\n+  protected int counter;\n \n-  public Rca(long evaluationIntervalSeconds) {\n+  public Rca(long evaluationIntervalSeconds, int rcaPeriod) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE0NzQ4MA=="}, "originalCommit": {"oid": "e6f1f33db3cd76c7eb973d31e85b27b8ac6e8ef3"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY3NDk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/SlidingWindow.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoxOTowMlrOFdklOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoxOTowMlrOFdklOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MjM3Ng==", "bodyText": "If we are converting the name unit to seconds, shouldn't the member variable name remain **_SECONDS ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/53#discussion_r366552376", "createdAt": "2020-01-14T20:19:02Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/SlidingWindow.java", "diffHunk": "@@ -23,59 +23,74 @@\n  * This is a generic sliding window for RCA sampling. The default behavior is to store the\n  * {timestap, value} pair and maintain the sum of all data entries within this sliding window.\n  */\n-public class SlidingWindow {\n+public class SlidingWindow<E extends SlidingWindowData> {\n \n-  protected final Deque<SlidingWindowData> windowDeque;\n-  protected final int SLIDING_WINDOW_SIZE_IN_SECONDS;\n+  protected final Deque<E> windowDeque;\n+  protected final long SLIDING_WINDOW_SIZE;\n   protected double sum;\n \n-  public SlidingWindow(int SLIDING_WINDOW_SIZE_IN_SECONDS) {\n+  public SlidingWindow(int SLIDING_WINDOW_SIZE_IN_TIMESTAMP, TimeUnit timeUnit) {\n     this.windowDeque = new LinkedList<>();\n-    this.SLIDING_WINDOW_SIZE_IN_SECONDS = SLIDING_WINDOW_SIZE_IN_SECONDS;\n+    this.SLIDING_WINDOW_SIZE = timeUnit.toSeconds(SLIDING_WINDOW_SIZE_IN_TIMESTAMP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbdcb777e7df92f431c7e6ac48082108fd660aad"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY4NTA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyMjo0M1rOFdkrcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoyMjo0M1rOFdkrcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1Mzk2OQ==", "bodyText": "We start every log message inside the RCA package as RCA: to distinguish the log from the Reader. can we do the same here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/53#discussion_r366553969", "createdAt": "2020-01-14T20:22:43Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -64,7 +64,7 @@ synchronized void createTable(String tableName, List<Field<?>> columns) {\n         .column(DSL.field(getPrimaryKeyColumnName(tableName) + PRIMARY_KEY_AUTOINCREMENT_POSTFIX))\n         .columns(columns);\n \n-    LOG.info(\"ruizhen: table created: {}\", constraintStep.toString());\n+    LOG.debug(\"table created: {}\", constraintStep.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbdcb777e7df92f431c7e6ac48082108fd660aad"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2556, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}