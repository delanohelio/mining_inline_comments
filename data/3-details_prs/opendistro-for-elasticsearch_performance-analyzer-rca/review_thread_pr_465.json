{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzEzODY3", "number": 465, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTowMToyMFrOEtnvmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTozMTozOVrOEtq1xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjcyNTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/CacheHealthDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTowMToyMFrOHhg-Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDo0MzozMlrOHhkV5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNTI5OQ==", "bodyText": "I am wondering if we should also add a log statement here in addition to the metric. Thoughts?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504905299", "createdAt": "2020-10-14T19:01:20Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/CacheHealthDecider.java", "diffHunk": "@@ -130,7 +134,14 @@ private void configureModifyCacheActionPriority() {\n    * signals going forward.\n    */\n   private Action computeBestAction(final NodeKey esNode, final ResourceEnum cacheType) {\n-    return getAction(ModifyCacheMaxSizeAction.NAME, esNode, cacheType, true);\n+    Action action = null;\n+    if (canUseMoreHeap(esNode)) {\n+      action = getAction(ModifyCacheMaxSizeAction.NAME, esNode, cacheType, true);\n+    } else {\n+      PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2MDQ4Nw==", "bodyText": "We don't want to emit the log continuously and in a cluster with jvm pressure, we will emit it quite a few times.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504960487", "createdAt": "2020-10-14T20:43:32Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/CacheHealthDecider.java", "diffHunk": "@@ -130,7 +134,14 @@ private void configureModifyCacheActionPriority() {\n    * signals going forward.\n    */\n   private Action computeBestAction(final NodeKey esNode, final ResourceEnum cacheType) {\n-    return getAction(ModifyCacheMaxSizeAction.NAME, esNode, cacheType, true);\n+    Action action = null;\n+    if (canUseMoreHeap(esNode)) {\n+      action = getAction(ModifyCacheMaxSizeAction.NAME, esNode, cacheType, true);\n+    } else {\n+      PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwNTI5OQ=="}, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mjc0NzY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOTowNzo0M1rOHhhMFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDo0MToyM1rOHhkRog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwODgyMg==", "bodyText": "should the check instead be  clusterSummary.getSummary() ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504908822", "createdAt": "2020-10-14T19:07:43Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BasicBucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class HeapBasedDecider extends Decider {\n+  private static final Logger LOG = LogManager.getLogger(HeapBasedDecider.class);\n+  private static final String OLD_GEN_TUNABLE_KEY = \"old-gen\";\n+  private static final ResourceEnum DECIDING_HEAP_RESOURCE_TYPE = ResourceEnum.OLD_GEN;\n+  public static final ImmutableMap<UsageBucket, Double> DEFAULT_HEAP_USAGE_THRESHOLDS = ImmutableMap.<UsageBucket, Double>builder()\n+      .put(UsageBucket.UNDER_UTILIZED, 10.0)\n+      .put(UsageBucket.HEALTHY_WITH_BUFFER, 60.0)\n+      .put(UsageBucket.HEALTHY, 80.0)\n+      .build();\n+\n+  private HighHeapUsageClusterRca highHeapUsageClusterRca;\n+\n+  public HeapBasedDecider(long evalIntervalSeconds, int decisionFrequency, HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.highHeapUsageClusterRca = highHeapUsageClusterRca;\n+  }\n+\n+  /**\n+   * The Queue and Cache deciders should only be able to suggest increase of the queue size or increase of cache size if the Java heap can\n+   * sustain more live objects in it without de-gradation. What is an acceptable heap usage limit to determine this, comes from the\n+   * bucketization object in rca.conf. We compare the oldGen usage percent reported by the HighHeapUsage RCA to determine that.\n+   *\n+   * @param esNode The EsNode we are trying to make a decision for.\n+   * @return return if the OldGen heap is under-utilized or healthy and yet more can be consumed, return true; or false otherwise.\n+   */\n+  protected boolean canUseMoreHeap(NodeKey esNode) {\n+    // we add action only if heap is under-utilized or healthy and yet more can be consumed.\n+    for (ResourceFlowUnit<HotClusterSummary> clusterSummary : highHeapUsageClusterRca.getFlowUnits()) {\n+      if (clusterSummary.hasResourceSummary()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk1OTM5NA==", "bodyText": "hasSummary is that check. It checks if the summary is null.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504959394", "createdAt": "2020-10-14T20:41:23Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BasicBucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class HeapBasedDecider extends Decider {\n+  private static final Logger LOG = LogManager.getLogger(HeapBasedDecider.class);\n+  private static final String OLD_GEN_TUNABLE_KEY = \"old-gen\";\n+  private static final ResourceEnum DECIDING_HEAP_RESOURCE_TYPE = ResourceEnum.OLD_GEN;\n+  public static final ImmutableMap<UsageBucket, Double> DEFAULT_HEAP_USAGE_THRESHOLDS = ImmutableMap.<UsageBucket, Double>builder()\n+      .put(UsageBucket.UNDER_UTILIZED, 10.0)\n+      .put(UsageBucket.HEALTHY_WITH_BUFFER, 60.0)\n+      .put(UsageBucket.HEALTHY, 80.0)\n+      .build();\n+\n+  private HighHeapUsageClusterRca highHeapUsageClusterRca;\n+\n+  public HeapBasedDecider(long evalIntervalSeconds, int decisionFrequency, HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.highHeapUsageClusterRca = highHeapUsageClusterRca;\n+  }\n+\n+  /**\n+   * The Queue and Cache deciders should only be able to suggest increase of the queue size or increase of cache size if the Java heap can\n+   * sustain more live objects in it without de-gradation. What is an acceptable heap usage limit to determine this, comes from the\n+   * bucketization object in rca.conf. We compare the oldGen usage percent reported by the HighHeapUsage RCA to determine that.\n+   *\n+   * @param esNode The EsNode we are trying to make a decision for.\n+   * @return return if the OldGen heap is under-utilized or healthy and yet more can be consumed, return true; or false otherwise.\n+   */\n+  protected boolean canUseMoreHeap(NodeKey esNode) {\n+    // we add action only if heap is under-utilized or healthy and yet more can be consumed.\n+    for (ResourceFlowUnit<HotClusterSummary> clusterSummary : highHeapUsageClusterRca.getFlowUnits()) {\n+      if (clusterSummary.hasResourceSummary()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkwODgyMg=="}, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mjc3MTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOToxNDozMVrOHhhaUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTo0Mzo1NFrOHhmHYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjQ2Nw==", "bodyText": "There are multiple level of nesting here with for-if-for-if, can we break down this function into two or more or use lambda ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504912467", "createdAt": "2020-10-14T19:14:31Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BasicBucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class HeapBasedDecider extends Decider {\n+  private static final Logger LOG = LogManager.getLogger(HeapBasedDecider.class);\n+  private static final String OLD_GEN_TUNABLE_KEY = \"old-gen\";\n+  private static final ResourceEnum DECIDING_HEAP_RESOURCE_TYPE = ResourceEnum.OLD_GEN;\n+  public static final ImmutableMap<UsageBucket, Double> DEFAULT_HEAP_USAGE_THRESHOLDS = ImmutableMap.<UsageBucket, Double>builder()\n+      .put(UsageBucket.UNDER_UTILIZED, 10.0)\n+      .put(UsageBucket.HEALTHY_WITH_BUFFER, 60.0)\n+      .put(UsageBucket.HEALTHY, 80.0)\n+      .build();\n+\n+  private HighHeapUsageClusterRca highHeapUsageClusterRca;\n+\n+  public HeapBasedDecider(long evalIntervalSeconds, int decisionFrequency, HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.highHeapUsageClusterRca = highHeapUsageClusterRca;\n+  }\n+\n+  /**\n+   * The Queue and Cache deciders should only be able to suggest increase of the queue size or increase of cache size if the Java heap can\n+   * sustain more live objects in it without de-gradation. What is an acceptable heap usage limit to determine this, comes from the\n+   * bucketization object in rca.conf. We compare the oldGen usage percent reported by the HighHeapUsage RCA to determine that.\n+   *\n+   * @param esNode The EsNode we are trying to make a decision for.\n+   * @return return if the OldGen heap is under-utilized or healthy and yet more can be consumed, return true; or false otherwise.\n+   */\n+  protected boolean canUseMoreHeap(NodeKey esNode) {\n+    // we add action only if heap is under-utilized or healthy and yet more can be consumed.\n+    for (ResourceFlowUnit<HotClusterSummary> clusterSummary : highHeapUsageClusterRca.getFlowUnits()) {\n+      if (clusterSummary.hasResourceSummary()) {\n+        for (HotNodeSummary nodeSummary : clusterSummary.getSummary().getHotNodeSummaryList()) {\n+          NodeKey thisNode = new NodeKey(nodeSummary.getNodeID(), nodeSummary.getHostAddress());\n+          if (thisNode.equals(esNode)) {\n+            for (HotResourceSummary hotResourceSummary : nodeSummary.getHotResourceSummaryList()) {\n+              Resource resource = hotResourceSummary.getResource();\n+              if (resource.getResourceEnum() == DECIDING_HEAP_RESOURCE_TYPE) {\n+                double oldGenUsedRatio = hotResourceSummary.getValue();\n+                double oldGenUsedPercent = oldGenUsedRatio * 100;\n+                BucketCalculator bucketCalculator;\n+                try {\n+                  bucketCalculator = rcaConf.getBucketizationSettings(OLD_GEN_TUNABLE_KEY);\n+                } catch (Exception jsonEx) {\n+                  bucketCalculator = new BasicBucketCalculator(DEFAULT_HEAP_USAGE_THRESHOLDS);\n+                  LOG.debug(\"rca.conf does not have bucketization limits specified. Using default map.\");\n+                }\n+                UsageBucket bucket = bucketCalculator.compute(oldGenUsedPercent);\n+                LOG.debug(\"Value ({}) bucketized to {}, using {}\", oldGenUsedPercent, bucket.toString(), bucketCalculator.toString());\n+                if (bucket == UsageBucket.UNDER_UTILIZED || bucket == UsageBucket.HEALTHY_WITH_BUFFER) {\n+                  return true;\n+                } else {\n+                  return false;\n+                }\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4OTUzOA==", "bodyText": "I have broken the function into two. I will keep thinking about making the loop nicer to look at if I find one. We may not block on that though.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504989538", "createdAt": "2020-10-14T21:43:54Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BasicBucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class HeapBasedDecider extends Decider {\n+  private static final Logger LOG = LogManager.getLogger(HeapBasedDecider.class);\n+  private static final String OLD_GEN_TUNABLE_KEY = \"old-gen\";\n+  private static final ResourceEnum DECIDING_HEAP_RESOURCE_TYPE = ResourceEnum.OLD_GEN;\n+  public static final ImmutableMap<UsageBucket, Double> DEFAULT_HEAP_USAGE_THRESHOLDS = ImmutableMap.<UsageBucket, Double>builder()\n+      .put(UsageBucket.UNDER_UTILIZED, 10.0)\n+      .put(UsageBucket.HEALTHY_WITH_BUFFER, 60.0)\n+      .put(UsageBucket.HEALTHY, 80.0)\n+      .build();\n+\n+  private HighHeapUsageClusterRca highHeapUsageClusterRca;\n+\n+  public HeapBasedDecider(long evalIntervalSeconds, int decisionFrequency, HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.highHeapUsageClusterRca = highHeapUsageClusterRca;\n+  }\n+\n+  /**\n+   * The Queue and Cache deciders should only be able to suggest increase of the queue size or increase of cache size if the Java heap can\n+   * sustain more live objects in it without de-gradation. What is an acceptable heap usage limit to determine this, comes from the\n+   * bucketization object in rca.conf. We compare the oldGen usage percent reported by the HighHeapUsage RCA to determine that.\n+   *\n+   * @param esNode The EsNode we are trying to make a decision for.\n+   * @return return if the OldGen heap is under-utilized or healthy and yet more can be consumed, return true; or false otherwise.\n+   */\n+  protected boolean canUseMoreHeap(NodeKey esNode) {\n+    // we add action only if heap is under-utilized or healthy and yet more can be consumed.\n+    for (ResourceFlowUnit<HotClusterSummary> clusterSummary : highHeapUsageClusterRca.getFlowUnits()) {\n+      if (clusterSummary.hasResourceSummary()) {\n+        for (HotNodeSummary nodeSummary : clusterSummary.getSummary().getHotNodeSummaryList()) {\n+          NodeKey thisNode = new NodeKey(nodeSummary.getNodeID(), nodeSummary.getHostAddress());\n+          if (thisNode.equals(esNode)) {\n+            for (HotResourceSummary hotResourceSummary : nodeSummary.getHotResourceSummaryList()) {\n+              Resource resource = hotResourceSummary.getResource();\n+              if (resource.getResourceEnum() == DECIDING_HEAP_RESOURCE_TYPE) {\n+                double oldGenUsedRatio = hotResourceSummary.getValue();\n+                double oldGenUsedPercent = oldGenUsedRatio * 100;\n+                BucketCalculator bucketCalculator;\n+                try {\n+                  bucketCalculator = rcaConf.getBucketizationSettings(OLD_GEN_TUNABLE_KEY);\n+                } catch (Exception jsonEx) {\n+                  bucketCalculator = new BasicBucketCalculator(DEFAULT_HEAP_USAGE_THRESHOLDS);\n+                  LOG.debug(\"rca.conf does not have bucketization limits specified. Using default map.\");\n+                }\n+                UsageBucket bucket = bucketCalculator.compute(oldGenUsedPercent);\n+                LOG.debug(\"Value ({}) bucketized to {}, using {}\", oldGenUsedPercent, bucket.toString(), bucketCalculator.toString());\n+                if (bucket == UsageBucket.UNDER_UTILIZED || bucket == UsageBucket.HEALTHY_WITH_BUFFER) {\n+                  return true;\n+                } else {\n+                  return false;\n+                }\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxMjQ2Nw=="}, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2Mjc5MjkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxOToyMDoyNVrOHhhm1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMDo1Nzo0MlrOHhkyyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNTY3MA==", "bodyText": "Indentation looks wrong here.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504915670", "createdAt": "2020-10-14T19:20:25Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -93,13 +99,16 @@ private void configureActionPriority() {\n    */\n   private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n     Action action = null;\n-\n-    for (String actionName : actionsByUserPriority) {\n-      action =\n-        getAction(actionName, esNode, threadPool, true);\n-      if (action != null) {\n-        break;\n+    if (canUseMoreHeap(esNode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2NzE1MQ==", "bodyText": "private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n    Action action = null;\n    if (canUseMoreHeap(esNode)) {\n      for (String actionName : actionsByUserPriority) {\n        action = getAction(actionName, esNode, threadPool, true);\n        if (action != null) {\n          break;\n        }\n      }\n    } else {\n      PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n          RcaRuntimeMetrics.NO_INCREASE_ACTION_SUGGESTED, NAME + \":\" + esNode.getHostAddress(), 1);\n    }\n    return action;\n  }", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504967151", "createdAt": "2020-10-14T20:56:23Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -93,13 +99,16 @@ private void configureActionPriority() {\n    */\n   private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n     Action action = null;\n-\n-    for (String actionName : actionsByUserPriority) {\n-      action =\n-        getAction(actionName, esNode, threadPool, true);\n-      if (action != null) {\n-        break;\n+    if (canUseMoreHeap(esNode)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNTY3MA=="}, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk2Nzg4MA==", "bodyText": "I think the deletion and addition makes it look like it in the diff. This is code as it copied here. Can you check if the indentation looks right to you ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504967880", "createdAt": "2020-10-14T20:57:42Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -93,13 +99,16 @@ private void configureActionPriority() {\n    */\n   private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n     Action action = null;\n-\n-    for (String actionName : actionsByUserPriority) {\n-      action =\n-        getAction(actionName, esNode, threadPool, true);\n-      if (action != null) {\n-        break;\n+    if (canUseMoreHeap(esNode)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkxNTY3MA=="}, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzIwNDYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMToyMjoyMFrOHhlhGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTo1MTozN1rOHhmdxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3OTczNw==", "bodyText": "Should we differentiate between an increase in the QueueIncreaseAction and Cache Increase Action?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504979737", "createdAt": "2020-10-14T21:22:20Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -93,13 +99,16 @@ private void configureActionPriority() {\n    */\n   private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n     Action action = null;\n-\n-    for (String actionName : actionsByUserPriority) {\n-      action =\n-        getAction(actionName, esNode, threadPool, true);\n-      if (action != null) {\n-        break;\n+    if (canUseMoreHeap(esNode)) {\n+      for (String actionName : actionsByUserPriority) {\n+        action = getAction(actionName, esNode, threadPool, true);\n+        if (action != null) {\n+          break;\n+        }\n       }\n+    } else {\n+      PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n+          RcaRuntimeMetrics.NO_INCREASE_ACTION_SUGGESTED, NAME + \":\" + esNode.getHostAddress(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk5NTI2OA==", "bodyText": "Right, the NAME  part does that.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504995268", "createdAt": "2020-10-14T21:51:37Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/QueueHealthDecider.java", "diffHunk": "@@ -93,13 +99,16 @@ private void configureActionPriority() {\n    */\n   private Action computeBestAction(NodeKey esNode, ResourceEnum threadPool) {\n     Action action = null;\n-\n-    for (String actionName : actionsByUserPriority) {\n-      action =\n-        getAction(actionName, esNode, threadPool, true);\n-      if (action != null) {\n-        break;\n+    if (canUseMoreHeap(esNode)) {\n+      for (String actionName : actionsByUserPriority) {\n+        action = getAction(actionName, esNode, threadPool, true);\n+        if (action != null) {\n+          break;\n+        }\n       }\n+    } else {\n+      PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n+          RcaRuntimeMetrics.NO_INCREASE_ACTION_SUGGESTED, NAME + \":\" + esNode.getHostAddress(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk3OTczNw=="}, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzIyMzYyOnYy", "diffSide": "RIGHT", "path": "pa_config/rca.conf", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMToyODo0OVrOHhlsvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTo1Njo1NVrOHhmuUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4MjcxOA==", "bodyText": "Add a comment saying Default Configuration Values are maintained at 2 places. In the code as well as here. We might miss updating at one place if we want to change the defaults in future.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504982718", "createdAt": "2020-10-14T21:28:49Z", "author": {"login": "aditjind"}, "path": "pa_config/rca.conf", "diffHunk": "@@ -93,5 +93,12 @@\n     \"ClusterTemperatureRca\"\n   ],\n   \"muted-deciders\": [],\n-  \"muted-actions\": []\n+  \"muted-actions\": [],\n+  \"bucketization\": {\n+    \"old-gen\": {\n+      \"UNDER_UTILIZED\": 10.0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk5NDQ2Nw==", "bodyText": "The configs are there in the rca.conf although they have the same value as the one we have by default is it gives people an idea of what is configurable just by looking at the rca.conf and not having to read the code. rca.conf takes precedence.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504994467", "createdAt": "2020-10-14T21:50:37Z", "author": {"login": "yojs"}, "path": "pa_config/rca.conf", "diffHunk": "@@ -93,5 +93,12 @@\n     \"ClusterTemperatureRca\"\n   ],\n   \"muted-deciders\": [],\n-  \"muted-actions\": []\n+  \"muted-actions\": [],\n+  \"bucketization\": {\n+    \"old-gen\": {\n+      \"UNDER_UTILIZED\": 10.0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4MjcxOA=="}, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk5OTUwNQ==", "bodyText": "What I meant was lets say we want to change the values tomorrow and we just change it in the Conf file and when we fall back to defaults from the code we might fall back to the previous defaults which have been changed. The comment here helps while updating. I dont have a strong opinion regarding this. We can choose to not add comment as well.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504999505", "createdAt": "2020-10-14T21:56:55Z", "author": {"login": "aditjind"}, "path": "pa_config/rca.conf", "diffHunk": "@@ -93,5 +93,12 @@\n     \"ClusterTemperatureRca\"\n   ],\n   \"muted-deciders\": [],\n-  \"muted-actions\": []\n+  \"muted-actions\": [],\n+  \"bucketization\": {\n+    \"old-gen\": {\n+      \"UNDER_UTILIZED\": 10.0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4MjcxOA=="}, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzIzMjcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTozMTozOVrOHhlyLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMTo0Nzo0MlrOHhmRKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4NDExMA==", "bodyText": "Do we really need this extra variable oldGenUsedRatio?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504984110", "createdAt": "2020-10-14T21:31:39Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BasicBucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class HeapBasedDecider extends Decider {\n+  private static final Logger LOG = LogManager.getLogger(HeapBasedDecider.class);\n+  private static final String OLD_GEN_TUNABLE_KEY = \"old-gen\";\n+  private static final ResourceEnum DECIDING_HEAP_RESOURCE_TYPE = ResourceEnum.OLD_GEN;\n+  public static final ImmutableMap<UsageBucket, Double> DEFAULT_HEAP_USAGE_THRESHOLDS = ImmutableMap.<UsageBucket, Double>builder()\n+      .put(UsageBucket.UNDER_UTILIZED, 10.0)\n+      .put(UsageBucket.HEALTHY_WITH_BUFFER, 60.0)\n+      .put(UsageBucket.HEALTHY, 80.0)\n+      .build();\n+\n+  private HighHeapUsageClusterRca highHeapUsageClusterRca;\n+\n+  public HeapBasedDecider(long evalIntervalSeconds, int decisionFrequency, HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.highHeapUsageClusterRca = highHeapUsageClusterRca;\n+  }\n+\n+  /**\n+   * The Queue and Cache deciders should only be able to suggest increase of the queue size or increase of cache size if the Java heap can\n+   * sustain more live objects in it without de-gradation. What is an acceptable heap usage limit to determine this, comes from the\n+   * bucketization object in rca.conf. We compare the oldGen usage percent reported by the HighHeapUsage RCA to determine that.\n+   *\n+   * @param esNode The EsNode we are trying to make a decision for.\n+   * @return return if the OldGen heap is under-utilized or healthy and yet more can be consumed, return true; or false otherwise.\n+   */\n+  protected boolean canUseMoreHeap(NodeKey esNode) {\n+    // we add action only if heap is under-utilized or healthy and yet more can be consumed.\n+    for (ResourceFlowUnit<HotClusterSummary> clusterSummary : highHeapUsageClusterRca.getFlowUnits()) {\n+      if (clusterSummary.hasResourceSummary()) {\n+        for (HotNodeSummary nodeSummary : clusterSummary.getSummary().getHotNodeSummaryList()) {\n+          NodeKey thisNode = new NodeKey(nodeSummary.getNodeID(), nodeSummary.getHostAddress());\n+          if (thisNode.equals(esNode)) {\n+            for (HotResourceSummary hotResourceSummary : nodeSummary.getHotResourceSummaryList()) {\n+              Resource resource = hotResourceSummary.getResource();\n+              if (resource.getResourceEnum() == DECIDING_HEAP_RESOURCE_TYPE) {\n+                double oldGenUsedRatio = hotResourceSummary.getValue();\n+                double oldGenUsedPercent = oldGenUsedRatio * 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk5MjA0MQ==", "bodyText": "I was thinking about that but in the end I added that for readability. Stack variables are cheap anyways.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/465#discussion_r504992041", "createdAt": "2020-10-14T21:47:42Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/HeapBasedDecider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.ResourceEnum;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BasicBucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.BucketCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.bucket.UsageBucket;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.google.common.collect.ImmutableMap;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class HeapBasedDecider extends Decider {\n+  private static final Logger LOG = LogManager.getLogger(HeapBasedDecider.class);\n+  private static final String OLD_GEN_TUNABLE_KEY = \"old-gen\";\n+  private static final ResourceEnum DECIDING_HEAP_RESOURCE_TYPE = ResourceEnum.OLD_GEN;\n+  public static final ImmutableMap<UsageBucket, Double> DEFAULT_HEAP_USAGE_THRESHOLDS = ImmutableMap.<UsageBucket, Double>builder()\n+      .put(UsageBucket.UNDER_UTILIZED, 10.0)\n+      .put(UsageBucket.HEALTHY_WITH_BUFFER, 60.0)\n+      .put(UsageBucket.HEALTHY, 80.0)\n+      .build();\n+\n+  private HighHeapUsageClusterRca highHeapUsageClusterRca;\n+\n+  public HeapBasedDecider(long evalIntervalSeconds, int decisionFrequency, HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+    super(evalIntervalSeconds, decisionFrequency);\n+    this.highHeapUsageClusterRca = highHeapUsageClusterRca;\n+  }\n+\n+  /**\n+   * The Queue and Cache deciders should only be able to suggest increase of the queue size or increase of cache size if the Java heap can\n+   * sustain more live objects in it without de-gradation. What is an acceptable heap usage limit to determine this, comes from the\n+   * bucketization object in rca.conf. We compare the oldGen usage percent reported by the HighHeapUsage RCA to determine that.\n+   *\n+   * @param esNode The EsNode we are trying to make a decision for.\n+   * @return return if the OldGen heap is under-utilized or healthy and yet more can be consumed, return true; or false otherwise.\n+   */\n+  protected boolean canUseMoreHeap(NodeKey esNode) {\n+    // we add action only if heap is under-utilized or healthy and yet more can be consumed.\n+    for (ResourceFlowUnit<HotClusterSummary> clusterSummary : highHeapUsageClusterRca.getFlowUnits()) {\n+      if (clusterSummary.hasResourceSummary()) {\n+        for (HotNodeSummary nodeSummary : clusterSummary.getSummary().getHotNodeSummaryList()) {\n+          NodeKey thisNode = new NodeKey(nodeSummary.getNodeID(), nodeSummary.getHostAddress());\n+          if (thisNode.equals(esNode)) {\n+            for (HotResourceSummary hotResourceSummary : nodeSummary.getHotResourceSummaryList()) {\n+              Resource resource = hotResourceSummary.getResource();\n+              if (resource.getResourceEnum() == DECIDING_HEAP_RESOURCE_TYPE) {\n+                double oldGenUsedRatio = hotResourceSummary.getValue();\n+                double oldGenUsedPercent = oldGenUsedRatio * 100;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk4NDExMA=="}, "originalCommit": {"oid": "2bf2312861078e724aede3c4966c678176eae54c"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2228, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}