{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2Nzk5MTg4", "number": 252, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoyMzoxMlrOEI38cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoxMzoxOFrOEQUO2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzQwNjU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoyMzoxMlrOGpGj_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToxMDo0NlrOGqn_vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MjMxOA==", "bodyText": "Please add a javadoc for this class", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r445752318", "createdAt": "2020-06-25T18:23:12Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.remediation;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeConfiguration;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NodeConfigurationRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0ODY2OA==", "bodyText": "added", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r447348668", "createdAt": "2020-06-30T01:10:46Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.remediation;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeConfiguration;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NodeConfigurationRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1MjMxOA=="}, "originalCommit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzQwOTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoyNDowMlrOGpGluQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToxMDo0MVrOGqn_qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1Mjc2MQ==", "bodyText": "Let's add a javadoc stating how we are operating on the FlowUnits", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r445752761", "createdAt": "2020-06-25T18:24:02Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.remediation;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeConfiguration;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NodeConfigurationRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeConfigurationRca.class);\n+  private final Metric threadPool_queueCapacity;\n+  private final int rcaPeriod;\n+  private int counter;\n+  private int writeQueueCapacity;\n+  private int searchQueueCapacity;\n+\n+  public <M extends Metric> NodeConfigurationRca(int rcaPeriod, M threadPool_queueCapacity) {\n+    super(5);\n+    this.threadPool_queueCapacity = threadPool_queueCapacity;\n+    this.rcaPeriod = rcaPeriod;\n+    this.counter = 0;\n+    this.writeQueueCapacity = -1;\n+    this.searchQueueCapacity = -1;\n+  }\n+\n+  private void collectQueueCapacity(MetricFlowUnit flowUnit) {\n+    double writeQueueCapacity = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+        THREAD_POOL_TYPE.getField(), ThreadPoolType.WRITE.toString(), MetricsDB.MAX);\n+    if (!Double.isNaN(writeQueueCapacity)) {\n+      this.writeQueueCapacity = (int) writeQueueCapacity;\n+    }\n+    double searchQueueCapacity = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+        THREAD_POOL_TYPE.getField(), ThreadPoolType.SEARCH.toString(), MetricsDB.MAX);\n+    if (!Double.isNaN(searchQueueCapacity)) {\n+      this.searchQueueCapacity = (int) searchQueueCapacity;\n+    }\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotNodeSummary> operate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0ODY1MQ==", "bodyText": "javadoc added", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r447348651", "createdAt": "2020-06-30T01:10:41Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.remediation;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeConfiguration;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NodeConfigurationRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeConfigurationRca.class);\n+  private final Metric threadPool_queueCapacity;\n+  private final int rcaPeriod;\n+  private int counter;\n+  private int writeQueueCapacity;\n+  private int searchQueueCapacity;\n+\n+  public <M extends Metric> NodeConfigurationRca(int rcaPeriod, M threadPool_queueCapacity) {\n+    super(5);\n+    this.threadPool_queueCapacity = threadPool_queueCapacity;\n+    this.rcaPeriod = rcaPeriod;\n+    this.counter = 0;\n+    this.writeQueueCapacity = -1;\n+    this.searchQueueCapacity = -1;\n+  }\n+\n+  private void collectQueueCapacity(MetricFlowUnit flowUnit) {\n+    double writeQueueCapacity = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+        THREAD_POOL_TYPE.getField(), ThreadPoolType.WRITE.toString(), MetricsDB.MAX);\n+    if (!Double.isNaN(writeQueueCapacity)) {\n+      this.writeQueueCapacity = (int) writeQueueCapacity;\n+    }\n+    double searchQueueCapacity = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+        THREAD_POOL_TYPE.getField(), ThreadPoolType.SEARCH.toString(), MetricsDB.MAX);\n+    if (!Double.isNaN(searchQueueCapacity)) {\n+      this.searchQueueCapacity = (int) searchQueueCapacity;\n+    }\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotNodeSummary> operate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1Mjc2MQ=="}, "originalCommit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzQxODU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxODoyNjo1M1rOGpGr2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwMToxMToxNFrOGqoASA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1NDMzMQ==", "bodyText": "Can you briefly describe the rationale of using an RCA node for this ? Do you think it would be cleaner if we add a new node type called ESConfigNode ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r445754331", "createdAt": "2020-06-25T18:26:53Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.remediation;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeConfiguration;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NodeConfigurationRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeConfigurationRca.class);\n+  private final Metric threadPool_queueCapacity;\n+  private final int rcaPeriod;\n+  private int counter;\n+  private int writeQueueCapacity;\n+  private int searchQueueCapacity;\n+\n+  public <M extends Metric> NodeConfigurationRca(int rcaPeriod, M threadPool_queueCapacity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5NDc1Ng==", "bodyText": "@yojs are you suggesting that this should be different kind a NonLeafNode and not extend from RCA. With a FlowUnit that is more tuned to node configurations?\nI think that is cleaner in general. Will need changes to PersistorBase logic which needs to be refactored anyway to work with non flow units that are not from RCAs. It can be picked separately.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r446394756", "createdAt": "2020-06-26T20:27:56Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.remediation;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeConfiguration;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NodeConfigurationRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeConfigurationRca.class);\n+  private final Metric threadPool_queueCapacity;\n+  private final int rcaPeriod;\n+  private int counter;\n+  private int writeQueueCapacity;\n+  private int searchQueueCapacity;\n+\n+  public <M extends Metric> NodeConfigurationRca(int rcaPeriod, M threadPool_queueCapacity) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1NDMzMQ=="}, "originalCommit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0ODgwOA==", "bodyText": "Created a new type of node EsConfigNode and extend the class as PerformanceControllerConfigCollector", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r447348808", "createdAt": "2020-06-30T01:11:14Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/remediation/NodeConfigurationRca.java", "diffHunk": "@@ -0,0 +1,93 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.remediation;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension.THREAD_POOL_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.NodeConfiguration;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class NodeConfigurationRca extends Rca<ResourceFlowUnit<HotNodeSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(NodeConfigurationRca.class);\n+  private final Metric threadPool_queueCapacity;\n+  private final int rcaPeriod;\n+  private int counter;\n+  private int writeQueueCapacity;\n+  private int searchQueueCapacity;\n+\n+  public <M extends Metric> NodeConfigurationRca(int rcaPeriod, M threadPool_queueCapacity) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc1NDMzMQ=="}, "originalCommit": {"oid": "026498d317577295d15e6229792f0967b520f26f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5Mjc0NDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/EsConfigNode.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMjowODoxOFrOGrUYpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTo0NTo1NFrOG0UKwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NTk0Mw==", "bodyText": "I was actually thinking of having a custom flow unit for this type of node. It doesn't really fit into the nested HotNodeSummary and HotResourceSummary lists - the terms healthy/unhealthy do not apply to a given queue capacity conf. The new flow unit could be simply have resource and values for those resources (for each node).", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r448075943", "createdAt": "2020-07-01T02:08:18Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/EsConfigNode.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ExceptionsAndErrors;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.RcaGraphMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * this is a base class for node(vertex) in RCA graph that reads configuration settings from ES.\n+ */\n+public abstract class EsConfigNode extends NonLeafNode<ResourceFlowUnit<HotNodeSummary>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52bc51a25c562b1a5d574bd8e65508dd1f6665d3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA4NDE4MQ==", "bodyText": "Agree. that is actually what I am planing to do. but that requires refactoring in base cluster RCA. (i.e. need to create a base node level summary and extend it to something like EsConfigFlowunit). At this moment, we still have to add this to the HotNodeSummary so that it can be parsed by the cluster level RCA.  I will create an issue and refactor it altogether.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r448084181", "createdAt": "2020-07-01T02:41:54Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/EsConfigNode.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ExceptionsAndErrors;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.RcaGraphMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * this is a base class for node(vertex) in RCA graph that reads configuration settings from ES.\n+ */\n+public abstract class EsConfigNode extends NonLeafNode<ResourceFlowUnit<HotNodeSummary>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NTk0Mw=="}, "originalCommit": {"oid": "52bc51a25c562b1a5d574bd8e65508dd1f6665d3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUwOTU3MA==", "bodyText": "Add NodeConfigFlowUnit as a new type of Flowunit to carry node config settings across RCA graph", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r457509570", "createdAt": "2020-07-20T15:45:54Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/EsConfigNode.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.NonLeafNode;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ExceptionsAndErrors;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.RcaGraphMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * this is a base class for node(vertex) in RCA graph that reads configuration settings from ES.\n+ */\n+public abstract class EsConfigNode extends NonLeafNode<ResourceFlowUnit<HotNodeSummary>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA3NTk0Mw=="}, "originalCommit": {"oid": "52bc51a25c562b1a5d574bd8e65508dd1f6665d3"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTQ0MTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/NodeConfigFlowUnit.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxODoxMzoxOFrOG0Zt2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToyNToyMVrOG0cHtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwMDQ3Mg==", "bodyText": "Shouldn't the NodeConfig use its own summary such as NodeConfigSummary ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r457600472", "createdAt": "2020-07-20T18:13:18Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/NodeConfigFlowUnit.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage.SummaryOneofCase;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HotNodeSummaryMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+\n+/**\n+ * a flowunit type to carry ES node configurations (queue/cache capacities, etc.)\n+ */\n+public class NodeConfigFlowUnit extends ResourceFlowUnit<HotNodeSummary> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97238e9b2a76c53df8f0b9b44a608006abac0f45"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzOTg2Mw==", "bodyText": "the problem of creating its own summary is this summary needs to be sent over to gRPC so we have to create a separate protobuf message for that. It would be better to keep the protobuf message as is to avoid duplicated code and create a new flowunit type as a wrapper to read/write config settings", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/252#discussion_r457639863", "createdAt": "2020-07-20T19:25:21Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/NodeConfigFlowUnit.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage.SummaryOneofCase;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.HotNodeSummaryMessage;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.Resource;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+\n+/**\n+ * a flowunit type to carry ES node configurations (queue/cache capacities, etc.)\n+ */\n+public class NodeConfigFlowUnit extends ResourceFlowUnit<HotNodeSummary> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYwMDQ3Mg=="}, "originalCommit": {"oid": "97238e9b2a76c53df8f0b9b44a608006abac0f45"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2502, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}