{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzU2Nzg0", "number": 466, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTozMzo1OVrOEuqMGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzo1MDo0OVrOEvHeCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzYxMTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTozMzo1OVrOHjNcmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoyOToyNlrOHkZbkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MjUyMw==", "bodyText": "Can we add a javadoc as what this metric means (for both of them).", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r506682523", "createdAt": "2020-10-16T19:33:59Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "diffHunk": "@@ -821,6 +821,27 @@ public String toString() {\n     }\n   }\n \n+  public enum MasterThrottlingValue implements MetricValue {\n+    MASTER_THROTTLED_PENDING_TASK_COUNT(MasterThrottlingValue.Constants.THROTTLED_PENDING_TASK_COUNT),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzQ0MQ==", "bodyText": "Added Javadoc.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507927441", "createdAt": "2020-10-19T17:29:26Z", "author": {"login": "dhwanilpatel"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "diffHunk": "@@ -821,6 +821,27 @@ public String toString() {\n     }\n   }\n \n+  public enum MasterThrottlingValue implements MetricValue {\n+    MASTER_THROTTLED_PENDING_TASK_COUNT(MasterThrottlingValue.Constants.THROTTLED_PENDING_TASK_COUNT),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MjUyMw=="}, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzYyMzA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTozODowOVrOHjNjsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoyOTozOFrOHkZcCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NDMzOA==", "bodyText": "Should we put this inside try/catch ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r506684338", "createdAt": "2020-10-16T19:38:09Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private MasterThrottlingMetricsEventProcessor(MasterThrottlingMetricsSnapshot snapshot) {\n+        this.masterThrottlingMetricsSnapshot = snapshot;\n+    }\n+\n+    static MasterThrottlingMetricsEventProcessor buildMasterThrottlingMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, MasterThrottlingMetricsSnapshot> masterThroEventMetricsMap) {\n+        MasterThrottlingMetricsSnapshot masterThrottlingSnapshot = masterThroEventMetricsMap.get(currWindowStartTime);\n+        if (masterThrottlingSnapshot == null) {\n+            masterThrottlingSnapshot = new MasterThrottlingMetricsSnapshot(conn, currWindowStartTime);\n+            masterThroEventMetricsMap.put(currWindowStartTime, masterThrottlingSnapshot);\n+        }\n+        return new MasterThrottlingMetricsEventProcessor(masterThrottlingSnapshot);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {\n+        this.handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+    }\n+\n+    @Override\n+    public void finalizeProcessing() {\n+        if (handle.size() > 0) {\n+            handle.execute();\n+        }\n+        LOG.debug(\"Final Master Throttling metrics {}\", masterThrottlingMetricsSnapshot.fetchAll());\n+    }\n+\n+    /**\n+     * Sample event:\n+     * ^master_throttling_metrics\n+     * {\"current_time\":1602617137529}\n+     * {\"Data_RetryingPendingTasksCount\":0,\"Master_ThrottledPendingTasksCount\":0}$\n+     *\n+     * @param event event\n+     */\n+    @Override\n+    public void processEvent(Event event) {\n+        String[] lines = event.value.split(System.lineSeparator());\n+        for (String line : lines) {\n+            Map<String, String> masterThrottlingMap = extractEntryData(line);\n+            if (!masterThrottlingMap.containsKey(PerformanceAnalyzerMetrics.METRIC_CURRENT_TIME)) {\n+                handle.bind(\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.DATA_RETRYING_TASK_COUNT.toString())),\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.MASTER_THROTTLED_PENDING_TASK_COUNT.toString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzU2MA==", "bodyText": "Added try/catch.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507927560", "createdAt": "2020-10-19T17:29:38Z", "author": {"login": "dhwanilpatel"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private MasterThrottlingMetricsEventProcessor(MasterThrottlingMetricsSnapshot snapshot) {\n+        this.masterThrottlingMetricsSnapshot = snapshot;\n+    }\n+\n+    static MasterThrottlingMetricsEventProcessor buildMasterThrottlingMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, MasterThrottlingMetricsSnapshot> masterThroEventMetricsMap) {\n+        MasterThrottlingMetricsSnapshot masterThrottlingSnapshot = masterThroEventMetricsMap.get(currWindowStartTime);\n+        if (masterThrottlingSnapshot == null) {\n+            masterThrottlingSnapshot = new MasterThrottlingMetricsSnapshot(conn, currWindowStartTime);\n+            masterThroEventMetricsMap.put(currWindowStartTime, masterThrottlingSnapshot);\n+        }\n+        return new MasterThrottlingMetricsEventProcessor(masterThrottlingSnapshot);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {\n+        this.handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+    }\n+\n+    @Override\n+    public void finalizeProcessing() {\n+        if (handle.size() > 0) {\n+            handle.execute();\n+        }\n+        LOG.debug(\"Final Master Throttling metrics {}\", masterThrottlingMetricsSnapshot.fetchAll());\n+    }\n+\n+    /**\n+     * Sample event:\n+     * ^master_throttling_metrics\n+     * {\"current_time\":1602617137529}\n+     * {\"Data_RetryingPendingTasksCount\":0,\"Master_ThrottledPendingTasksCount\":0}$\n+     *\n+     * @param event event\n+     */\n+    @Override\n+    public void processEvent(Event event) {\n+        String[] lines = event.value.split(System.lineSeparator());\n+        for (String line : lines) {\n+            Map<String, String> masterThrottlingMap = extractEntryData(line);\n+            if (!masterThrottlingMap.containsKey(PerformanceAnalyzerMetrics.METRIC_CURRENT_TIME)) {\n+                handle.bind(\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.DATA_RETRYING_TASK_COUNT.toString())),\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.MASTER_THROTTLED_PENDING_TASK_COUNT.toString())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NDMzOA=="}, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODM3MjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzozNzo1M1rOHj6KHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoyOTo0N1rOHkZcZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTA2OQ==", "bodyText": "masterThrottlingMetricsSnapshot as final?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507415069", "createdAt": "2020-10-19T03:37:53Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzY1Mw==", "bodyText": "Corrected.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507927653", "createdAt": "2020-10-19T17:29:47Z", "author": {"login": "dhwanilpatel"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTA2OQ=="}, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODM3NjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzozODo1N1rOHj6NHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzoyOTo1NlrOHkZcvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTgzOQ==", "bodyText": "return  MAPPER.readValue(line, TYPE_REF); ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507415839", "createdAt": "2020-10-19T03:38:57Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private MasterThrottlingMetricsEventProcessor(MasterThrottlingMetricsSnapshot snapshot) {\n+        this.masterThrottlingMetricsSnapshot = snapshot;\n+    }\n+\n+    static MasterThrottlingMetricsEventProcessor buildMasterThrottlingMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, MasterThrottlingMetricsSnapshot> masterThroEventMetricsMap) {\n+        MasterThrottlingMetricsSnapshot masterThrottlingSnapshot = masterThroEventMetricsMap.get(currWindowStartTime);\n+        if (masterThrottlingSnapshot == null) {\n+            masterThrottlingSnapshot = new MasterThrottlingMetricsSnapshot(conn, currWindowStartTime);\n+            masterThroEventMetricsMap.put(currWindowStartTime, masterThrottlingSnapshot);\n+        }\n+        return new MasterThrottlingMetricsEventProcessor(masterThrottlingSnapshot);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {\n+        this.handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+    }\n+\n+    @Override\n+    public void finalizeProcessing() {\n+        if (handle.size() > 0) {\n+            handle.execute();\n+        }\n+        LOG.debug(\"Final Master Throttling metrics {}\", masterThrottlingMetricsSnapshot.fetchAll());\n+    }\n+\n+    /**\n+     * Sample event:\n+     * ^master_throttling_metrics\n+     * {\"current_time\":1602617137529}\n+     * {\"Data_RetryingPendingTasksCount\":0,\"Master_ThrottledPendingTasksCount\":0}$\n+     *\n+     * @param event event\n+     */\n+    @Override\n+    public void processEvent(Event event) {\n+        String[] lines = event.value.split(System.lineSeparator());\n+        for (String line : lines) {\n+            Map<String, String> masterThrottlingMap = extractEntryData(line);\n+            if (!masterThrottlingMap.containsKey(PerformanceAnalyzerMetrics.METRIC_CURRENT_TIME)) {\n+                handle.bind(\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.DATA_RETRYING_TASK_COUNT.toString())),\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.MASTER_THROTTLED_PENDING_TASK_COUNT.toString())));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean shouldProcessEvent(Event event) {\n+        return event.key.contains(PerformanceAnalyzerMetrics.sMasterThrottledTasksPath);\n+    }\n+\n+    @Override\n+    public void commitBatchIfRequired() {\n+        if (handle.size() > BATCH_LIMIT) {\n+            handle.execute();\n+            handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+        }\n+    }\n+\n+    static Map<String, String> extractEntryData(String line) {\n+        try {\n+            Map<String, String> map = MAPPER.readValue(line, TYPE_REF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzc0Mw==", "bodyText": "Corrected.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507927743", "createdAt": "2020-10-19T17:29:56Z", "author": {"login": "dhwanilpatel"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private MasterThrottlingMetricsEventProcessor(MasterThrottlingMetricsSnapshot snapshot) {\n+        this.masterThrottlingMetricsSnapshot = snapshot;\n+    }\n+\n+    static MasterThrottlingMetricsEventProcessor buildMasterThrottlingMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, MasterThrottlingMetricsSnapshot> masterThroEventMetricsMap) {\n+        MasterThrottlingMetricsSnapshot masterThrottlingSnapshot = masterThroEventMetricsMap.get(currWindowStartTime);\n+        if (masterThrottlingSnapshot == null) {\n+            masterThrottlingSnapshot = new MasterThrottlingMetricsSnapshot(conn, currWindowStartTime);\n+            masterThroEventMetricsMap.put(currWindowStartTime, masterThrottlingSnapshot);\n+        }\n+        return new MasterThrottlingMetricsEventProcessor(masterThrottlingSnapshot);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {\n+        this.handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+    }\n+\n+    @Override\n+    public void finalizeProcessing() {\n+        if (handle.size() > 0) {\n+            handle.execute();\n+        }\n+        LOG.debug(\"Final Master Throttling metrics {}\", masterThrottlingMetricsSnapshot.fetchAll());\n+    }\n+\n+    /**\n+     * Sample event:\n+     * ^master_throttling_metrics\n+     * {\"current_time\":1602617137529}\n+     * {\"Data_RetryingPendingTasksCount\":0,\"Master_ThrottledPendingTasksCount\":0}$\n+     *\n+     * @param event event\n+     */\n+    @Override\n+    public void processEvent(Event event) {\n+        String[] lines = event.value.split(System.lineSeparator());\n+        for (String line : lines) {\n+            Map<String, String> masterThrottlingMap = extractEntryData(line);\n+            if (!masterThrottlingMap.containsKey(PerformanceAnalyzerMetrics.METRIC_CURRENT_TIME)) {\n+                handle.bind(\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.DATA_RETRYING_TASK_COUNT.toString())),\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.MASTER_THROTTLED_PENDING_TASK_COUNT.toString())));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean shouldProcessEvent(Event event) {\n+        return event.key.contains(PerformanceAnalyzerMetrics.sMasterThrottledTasksPath);\n+    }\n+\n+    @Override\n+    public void commitBatchIfRequired() {\n+        if (handle.size() > BATCH_LIMIT) {\n+            handle.execute();\n+            handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+        }\n+    }\n+\n+    static Map<String, String> extractEntryData(String line) {\n+        try {\n+            Map<String, String> map = MAPPER.readValue(line, TYPE_REF);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTgzOQ=="}, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODQwOTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsSnapshot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzo1MDo0OVrOHj6ihg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNzozMDoxNFrOHkZdfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQyMTMxOA==", "bodyText": "Lets remove this unused variable.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507421318", "createdAt": "2020-10-19T03:50:49Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsSnapshot.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.DBUtils;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.sql.Connection;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.SQLDialect;\n+import org.jooq.SelectField;\n+import org.jooq.impl.DSL;\n+\n+public class MasterThrottlingMetricsSnapshot implements Removable {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsSnapshot.class);\n+\n+    private final DSLContext create;\n+    private final Long windowStartTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzkyNzkzMw==", "bodyText": "LOG was unused here, removed it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507927933", "createdAt": "2020-10-19T17:30:14Z", "author": {"login": "dhwanilpatel"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsSnapshot.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.DBUtils;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.sql.Connection;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.SQLDialect;\n+import org.jooq.SelectField;\n+import org.jooq.impl.DSL;\n+\n+public class MasterThrottlingMetricsSnapshot implements Removable {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsSnapshot.class);\n+\n+    private final DSLContext create;\n+    private final Long windowStartTime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQyMTMxOA=="}, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2230, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}