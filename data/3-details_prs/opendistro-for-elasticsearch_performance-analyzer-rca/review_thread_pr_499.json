{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODg0NTMy", "number": 499, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzozMDowOVrOEzCiVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDoxNzowN1rOEzDIqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTU0Mzg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzozMDowOVrOHqBMVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzozMDowOVrOHqBMVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyMTc4MQ==", "bodyText": "Should we just remove it ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513821781", "createdAt": "2020-10-28T23:30:09Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -278,7 +278,7 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n       recordsWithMaxFieldValue = create.select().from(tableName).where(DSL.field(field)\n               .eq(create.select(max(field)).from(tableName))).fetch();\n     } catch (DataAccessException dex) {\n-      LOG.error(\"Error querying table {}\", tableName, dex);\n+      //LOG.warn(\"Error querying table {}\", tableName, dex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTU3MjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/CacheClearAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzo0MzoxN1rOHqBdHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDowMzoxOVrOHqB1pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNjA3OQ==", "bodyText": "Can we make this as an util class or rename as CacheClearActionSummary?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513826079", "createdAt": "2020-10-28T23:43:17Z", "author": {"login": "sruti1312"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/CacheClearAction.java", "diffHunk": "@@ -120,4 +118,39 @@ public CacheClearAction build() {\n       return new CacheClearAction(appContext, coolOffPeriodInMillis, canUpdate);\n     }\n   }\n+\n+  public static class Summary {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgzMjM1OQ==", "bodyText": "Since this Summary is only used as a Json container within each action class(similar to the Builder class within the action class), I would like to leave it as it is. We can make them as separate classes if needed in the future", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513832359", "createdAt": "2020-10-29T00:03:19Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/CacheClearAction.java", "diffHunk": "@@ -120,4 +118,39 @@ public CacheClearAction build() {\n       return new CacheClearAction(appContext, coolOffPeriodInMillis, canUpdate);\n     }\n   }\n+\n+  public static class Summary {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNjA3OQ=="}, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTU4NDA2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvm/old_gen_policy/dedicated_master/LevelThreeDedicatedMasterITest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzo0ODo0M1rOHqBj-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzo0MjowMVrOHqHlUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNzgzMg==", "bodyText": "This is fixed with Sid's PR. We dont need to add them here", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513827832", "createdAt": "2020-10-28T23:48:43Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvm/old_gen_policy/dedicated_master/LevelThreeDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.FIELDDATA_CACHE_SIZE_IN_PERCENT;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.HEAP_MAX_SIZE_IN_BYTE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.SHARD_REQUEST_CACHE_SIZE_IN_PERCENT;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cache.CacheUtil.GB_TO_BYTES;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.configs.QueueActionConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.validator.LevelThreeValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(RcaItNotEncryptedRunner.class)\n+\n+@Category(RcaItMarker.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+@AMetric(name = Heap_Used.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.OLD_GEN_VALUE,\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * 0.96),\n+            }\n+        )\n+    }\n+)\n+@AMetric(name = Heap_Max.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.HEAP_VALUE,\n+                    sum = HEAP_MAX_SIZE_IN_BYTE,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE,\n+                    min = HEAP_MAX_SIZE_IN_BYTE,\n+                    max = HEAP_MAX_SIZE_IN_BYTE),\n+            }\n+        )\n+    }\n+)\n+@AMetric(name = GC_Collection_Event.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.TOT_FULL_GC_VALUE,\n+                    sum = 1, avg = 1, min = 1, max = 1),\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = Cache_Max_Size.class,\n+    dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT),\n+                @ATuple(\n+                    dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT)\n+            }),\n+    })\n+@AMetric(name = ThreadPool_QueueCapacity.class,\n+    dimensionNames = {ThreadPoolDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(dimensionValues = {ThreadPoolType.Constants.WRITE_NAME},\n+                    sum = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    avg = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    min = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    max = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200),\n+                @ATuple(dimensionValues = {ThreadPoolType.Constants.SEARCH_NAME},\n+                    sum = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    avg = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    min = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    max = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200)\n+            }\n+        )\n+    }\n+)\n+public class LevelThreeDedicatedMasterITest {\n+  public static final long HEAP_MAX_SIZE_IN_BYTE = 10 * GB_TO_BYTES;\n+  public static final double FIELDDATA_CACHE_SIZE_IN_PERCENT = 0.3;\n+  public static final double SHARD_REQUEST_CACHE_SIZE_IN_PERCENT = 0.04;\n+\n+  @Test\n+  @AExpect(\n+      what = AExpect.Type.REST_API,\n+      on = HostTag.ELECTED_MASTER,\n+      validator = LevelThreeValidator.class,\n+      forRca = PersistedAction.class,\n+      timeoutSeconds = 1000)\n+  @AErrorPatternIgnored(\n+      pattern = \"CacheUtil:getCacheMaxSize()\",\n+      reason = \"Cache related configs are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"AggregateMetric:gather()\",\n+      reason = \"Cache metrics are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SubscribeResponseHandler:onError()\",\n+      reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+      reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageOldGenRca:operate()\",\n+      reason = \"Old gen rca is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"ModifyCacheMaxSizeAction:build()\",\n+      reason = \"Node config cache is expected to be missing during shutdown\")\n+  @AErrorPatternIgnored(\n+      pattern = \"NodeConfigCollector:collectAndPublishMetric()\",\n+      reason = \"Shard request cache metrics is expected to be missing\")\n+  @AErrorPatternIgnored(\n+      pattern = \"CacheUtil:getCacheMaxSize()\",\n+      reason = \"Shard request cache metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageYoungGenRca:operate()\",\n+      reason = \"YoungGen metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"PersistableSlidingWindow:<init>()\",\n+      reason = \"Persistence base path can be null for integration test.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgzMjgyMQ==", "bodyText": "thanks for catching this. Yes. let me remove those in my next PRs(I am creating a few more ITs to cover corner cases in JVM decider)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513832821", "createdAt": "2020-10-29T00:04:47Z", "author": {"login": "rguo-aws"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvm/old_gen_policy/dedicated_master/LevelThreeDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.FIELDDATA_CACHE_SIZE_IN_PERCENT;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.HEAP_MAX_SIZE_IN_BYTE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.SHARD_REQUEST_CACHE_SIZE_IN_PERCENT;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cache.CacheUtil.GB_TO_BYTES;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.configs.QueueActionConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.validator.LevelThreeValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(RcaItNotEncryptedRunner.class)\n+\n+@Category(RcaItMarker.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+@AMetric(name = Heap_Used.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.OLD_GEN_VALUE,\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * 0.96),\n+            }\n+        )\n+    }\n+)\n+@AMetric(name = Heap_Max.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.HEAP_VALUE,\n+                    sum = HEAP_MAX_SIZE_IN_BYTE,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE,\n+                    min = HEAP_MAX_SIZE_IN_BYTE,\n+                    max = HEAP_MAX_SIZE_IN_BYTE),\n+            }\n+        )\n+    }\n+)\n+@AMetric(name = GC_Collection_Event.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.TOT_FULL_GC_VALUE,\n+                    sum = 1, avg = 1, min = 1, max = 1),\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = Cache_Max_Size.class,\n+    dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT),\n+                @ATuple(\n+                    dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT)\n+            }),\n+    })\n+@AMetric(name = ThreadPool_QueueCapacity.class,\n+    dimensionNames = {ThreadPoolDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(dimensionValues = {ThreadPoolType.Constants.WRITE_NAME},\n+                    sum = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    avg = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    min = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    max = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200),\n+                @ATuple(dimensionValues = {ThreadPoolType.Constants.SEARCH_NAME},\n+                    sum = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    avg = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    min = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    max = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200)\n+            }\n+        )\n+    }\n+)\n+public class LevelThreeDedicatedMasterITest {\n+  public static final long HEAP_MAX_SIZE_IN_BYTE = 10 * GB_TO_BYTES;\n+  public static final double FIELDDATA_CACHE_SIZE_IN_PERCENT = 0.3;\n+  public static final double SHARD_REQUEST_CACHE_SIZE_IN_PERCENT = 0.04;\n+\n+  @Test\n+  @AExpect(\n+      what = AExpect.Type.REST_API,\n+      on = HostTag.ELECTED_MASTER,\n+      validator = LevelThreeValidator.class,\n+      forRca = PersistedAction.class,\n+      timeoutSeconds = 1000)\n+  @AErrorPatternIgnored(\n+      pattern = \"CacheUtil:getCacheMaxSize()\",\n+      reason = \"Cache related configs are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"AggregateMetric:gather()\",\n+      reason = \"Cache metrics are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SubscribeResponseHandler:onError()\",\n+      reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+      reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageOldGenRca:operate()\",\n+      reason = \"Old gen rca is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"ModifyCacheMaxSizeAction:build()\",\n+      reason = \"Node config cache is expected to be missing during shutdown\")\n+  @AErrorPatternIgnored(\n+      pattern = \"NodeConfigCollector:collectAndPublishMetric()\",\n+      reason = \"Shard request cache metrics is expected to be missing\")\n+  @AErrorPatternIgnored(\n+      pattern = \"CacheUtil:getCacheMaxSize()\",\n+      reason = \"Shard request cache metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageYoungGenRca:operate()\",\n+      reason = \"YoungGen metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"PersistableSlidingWindow:<init>()\",\n+      reason = \"Persistence base path can be null for integration test.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNzgzMg=="}, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkyNjQ4MA==", "bodyText": "done, removed this pattern", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513926480", "createdAt": "2020-10-29T03:42:01Z", "author": {"login": "rguo-aws"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvm/old_gen_policy/dedicated_master/LevelThreeDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.FIELDDATA_CACHE_SIZE_IN_PERCENT;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.HEAP_MAX_SIZE_IN_BYTE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.SHARD_REQUEST_CACHE_SIZE_IN_PERCENT;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cache.CacheUtil.GB_TO_BYTES;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.configs.QueueActionConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.validator.LevelThreeValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(RcaItNotEncryptedRunner.class)\n+\n+@Category(RcaItMarker.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+@AMetric(name = Heap_Used.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.OLD_GEN_VALUE,\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * 0.96),\n+            }\n+        )\n+    }\n+)\n+@AMetric(name = Heap_Max.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.HEAP_VALUE,\n+                    sum = HEAP_MAX_SIZE_IN_BYTE,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE,\n+                    min = HEAP_MAX_SIZE_IN_BYTE,\n+                    max = HEAP_MAX_SIZE_IN_BYTE),\n+            }\n+        )\n+    }\n+)\n+@AMetric(name = GC_Collection_Event.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.TOT_FULL_GC_VALUE,\n+                    sum = 1, avg = 1, min = 1, max = 1),\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = Cache_Max_Size.class,\n+    dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT),\n+                @ATuple(\n+                    dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT)\n+            }),\n+    })\n+@AMetric(name = ThreadPool_QueueCapacity.class,\n+    dimensionNames = {ThreadPoolDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(dimensionValues = {ThreadPoolType.Constants.WRITE_NAME},\n+                    sum = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    avg = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    min = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    max = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200),\n+                @ATuple(dimensionValues = {ThreadPoolType.Constants.SEARCH_NAME},\n+                    sum = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    avg = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    min = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    max = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200)\n+            }\n+        )\n+    }\n+)\n+public class LevelThreeDedicatedMasterITest {\n+  public static final long HEAP_MAX_SIZE_IN_BYTE = 10 * GB_TO_BYTES;\n+  public static final double FIELDDATA_CACHE_SIZE_IN_PERCENT = 0.3;\n+  public static final double SHARD_REQUEST_CACHE_SIZE_IN_PERCENT = 0.04;\n+\n+  @Test\n+  @AExpect(\n+      what = AExpect.Type.REST_API,\n+      on = HostTag.ELECTED_MASTER,\n+      validator = LevelThreeValidator.class,\n+      forRca = PersistedAction.class,\n+      timeoutSeconds = 1000)\n+  @AErrorPatternIgnored(\n+      pattern = \"CacheUtil:getCacheMaxSize()\",\n+      reason = \"Cache related configs are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"AggregateMetric:gather()\",\n+      reason = \"Cache metrics are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SubscribeResponseHandler:onError()\",\n+      reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+      reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageOldGenRca:operate()\",\n+      reason = \"Old gen rca is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"ModifyCacheMaxSizeAction:build()\",\n+      reason = \"Node config cache is expected to be missing during shutdown\")\n+  @AErrorPatternIgnored(\n+      pattern = \"NodeConfigCollector:collectAndPublishMetric()\",\n+      reason = \"Shard request cache metrics is expected to be missing\")\n+  @AErrorPatternIgnored(\n+      pattern = \"CacheUtil:getCacheMaxSize()\",\n+      reason = \"Shard request cache metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageYoungGenRca:operate()\",\n+      reason = \"YoungGen metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"PersistableSlidingWindow:<init>()\",\n+      reason = \"Persistence base path can be null for integration test.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNzgzMg=="}, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxOTY0MjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/OldGenRca.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDoxNzowN1rOHqCFdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMzo0Mjo0MlrOHqHm5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgzNjQwNg==", "bodyText": "I see that you have updated OLD_GEN to HEAP. The method says getMaxOldGenSizeOrDefault. Is there a reason why this change was made? Do we want to rename the method?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513836406", "createdAt": "2020-10-29T00:17:07Z", "author": {"login": "sruti1312"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/OldGenRca.java", "diffHunk": "@@ -72,7 +73,7 @@ protected double getMaxOldGenSizeOrDefault(final double defaultValue) {\n       }\n       double ret =\n           SQLParsingUtil\n-              .readDataFromSqlResult(heapMaxMetric.getData(), MEM_TYPE.getField(), OLD_GEN.toString(), MetricsDB.MAX);\n+              .readDataFromSqlResult(heapMaxMetric.getData(), MEM_TYPE.getField(), HEAP.toString(), MetricsDB.MAX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgzNzcwMQ==", "bodyText": "yes, this was a bug I found in old gen RCA. Heap usage is supposed to be calculated by (old gen usage)/(max total heap size). but for some reason, we calculated it by (old gen usage)/(max old gen size)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513837701", "createdAt": "2020-10-29T00:21:43Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/OldGenRca.java", "diffHunk": "@@ -72,7 +73,7 @@ protected double getMaxOldGenSizeOrDefault(final double defaultValue) {\n       }\n       double ret =\n           SQLParsingUtil\n-              .readDataFromSqlResult(heapMaxMetric.getData(), MEM_TYPE.getField(), OLD_GEN.toString(), MetricsDB.MAX);\n+              .readDataFromSqlResult(heapMaxMetric.getData(), MEM_TYPE.getField(), HEAP.toString(), MetricsDB.MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgzNjQwNg=="}, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzkyNjg4NA==", "bodyText": "done. added a new function to retrieve HEAP and leave the OLD_GEN unchanged", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513926884", "createdAt": "2020-10-29T03:42:42Z", "author": {"login": "rguo-aws"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/OldGenRca.java", "diffHunk": "@@ -72,7 +73,7 @@ protected double getMaxOldGenSizeOrDefault(final double defaultValue) {\n       }\n       double ret =\n           SQLParsingUtil\n-              .readDataFromSqlResult(heapMaxMetric.getData(), MEM_TYPE.getField(), OLD_GEN.toString(), MetricsDB.MAX);\n+              .readDataFromSqlResult(heapMaxMetric.getData(), MEM_TYPE.getField(), HEAP.toString(), MetricsDB.MAX);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgzNjQwNg=="}, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2260, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}