{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MzkzNzMw", "number": 452, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxNDowNFrOEqgxZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo0MDowMlrOEq2epg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDEyNTgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/BucketizedSlidingWindow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxNDowNFrOHcwxeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMzoxNDowNFrOHcwxeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkyMTI3Mg==", "bodyText": "nit: If you convert this to milliseconds, you get a much simpler comparison on line 40", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/452#discussion_r499921272", "createdAt": "2020-10-05T23:14:04Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/BucketizedSlidingWindow.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * The BucketizedSlidingWindow provides a SlidingWindow implementation that can aggregate all\n+ * inserts within a configured time range, BUCKET_WINDOW_SIZE, into a single data point.\n+ *\n+ * <p>All data within a single bucket window time range is summed by default.\n+ */\n+public class BucketizedSlidingWindow extends SlidingWindow<SlidingWindowData> {\n+\n+  private final long BUCKET_WINDOW_SIZE;\n+\n+  public BucketizedSlidingWindow(int SLIDING_WINDOW_SIZE, int BUCKET_WINDOW_SIZE, TimeUnit timeUnit) {\n+    super(SLIDING_WINDOW_SIZE, timeUnit);\n+    assert BUCKET_WINDOW_SIZE < SLIDING_WINDOW_SIZE : \"BucketWindow size should be less than SlidingWindow size\";\n+    this.BUCKET_WINDOW_SIZE = timeUnit.toSeconds(BUCKET_WINDOW_SIZE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ad86a29854c49a70808a82aa5616e17947bcc7"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzY2NjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/AlarmMonitor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozNToyOVrOHdStow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozNToyOVrOHdStow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NzM0Nw==", "bodyText": "nit: interface methods are public by default", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/452#discussion_r500477347", "createdAt": "2020-10-06T17:35:29Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/AlarmMonitor.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders;\n+\n+/**\n+ * AlarmMonitor evaluates and maintains the state of an alarm.\n+ *\n+ * <p>An alarm can either be healthy or unhealthy.\n+ */\n+public interface AlarmMonitor {\n+\n+  /**\n+   * Invoked whenever an issue needs to be recorded with the monitor\n+   * @param timeStamp Issue timestamp in millis\n+   * @param value Issues can be recorded with an intensity value\n+   */\n+  public void recordIssue(long timeStamp, double value);\n+\n+  public default void recordIssue() {\n+    recordIssue(System.currentTimeMillis(), 1);\n+  }\n+\n+  /**\n+   * State of the alarm\n+   * @return true if alarm is in healthy state, false otherwise\n+   */\n+  public boolean isHealthy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ad86a29854c49a70808a82aa5616e17947bcc7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzY4MjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/JvmActionsAlarmMonitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo0MDowMlrOHdS3zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMjoyMjoxOFrOHdb_Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3OTk1MQ==", "bodyText": "These values can be the defaults. We should also have these as constructor params so that someday if we wanted to change thresholds for a particular JVM action, we don't need to extend this just to set different thresholds. What do you think?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/452#discussion_r500479951", "createdAt": "2020-10-06T17:40:02Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/JvmActionsAlarmMonitor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.AlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.BucketizedSlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmActionsAlarmMonitor implements AlarmMonitor {\n+\n+  public static final int DAY_BREACH_THRESHOLD = 5;\n+  public static final int WEEK_BREACH_THRESHOLD = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68ad86a29854c49a70808a82aa5616e17947bcc7"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYyOTI1OQ==", "bodyText": "Makes sense, will change before merging.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/452#discussion_r500629259", "createdAt": "2020-10-06T22:22:18Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/JvmActionsAlarmMonitor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.AlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.BucketizedSlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmActionsAlarmMonitor implements AlarmMonitor {\n+\n+  public static final int DAY_BREACH_THRESHOLD = 5;\n+  public static final int WEEK_BREACH_THRESHOLD = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3OTk1MQ=="}, "originalCommit": {"oid": "68ad86a29854c49a70808a82aa5616e17947bcc7"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2424, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}