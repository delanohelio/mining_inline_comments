{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2ODkzMjcw", "number": 310, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo1MToyN1rOESfnqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo0NDo0NlrOESlZBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODI3ODgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/DeciderActionPriorityReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo1MToyN1rOG3tL-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoxOTo0OVrOG3yEvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTIwOA==", "bodyText": "Log.error(\"Could not read the Decider Config File: {}\", configFilePath, e)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461065208", "createdAt": "2020-07-27T17:51:27Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/DeciderActionPriorityReader.java", "diffHunk": "@@ -45,8 +45,7 @@ public static void updateDeciderActionPriorityOrder() {\n         try {\n             deciderActionPriorityOrder = mapper.readValue(new File(configFilePath), HashMap.class);\n         } catch (Exception e) {\n-            LOG.error(\"Could not read the Decider Config File\");\n-            e.printStackTrace();\n+            LOG.error(\"Could not read the Decider Config File: \" + configFilePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2c74fbc6c5e5212fca338db4c7b54506a94649"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NTI3OQ==", "bodyText": "This file has been removed in the latest update to master.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461145279", "createdAt": "2020-07-27T20:19:49Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/DeciderActionPriorityReader.java", "diffHunk": "@@ -45,8 +45,7 @@ public static void updateDeciderActionPriorityOrder() {\n         try {\n             deciderActionPriorityOrder = mapper.readValue(new File(configFilePath), HashMap.class);\n         } catch (Exception e) {\n-            LOG.error(\"Could not read the Decider Config File\");\n-            e.printStackTrace();\n+            LOG.error(\"Could not read the Decider Config File: \" + configFilePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTIwOA=="}, "originalCommit": {"oid": "0f2c74fbc6c5e5212fca338db4c7b54506a94649"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODI4MTgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo1MjoyMlrOG3tN8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDoyMDoxOVrOG3yF_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTcxNQ==", "bodyText": "This import line was added, but I don't see CDEP being added below", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461065715", "createdAt": "2020-07-27T17:52:22Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java", "diffHunk": "@@ -19,6 +19,8 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericFlowUnit;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2c74fbc6c5e5212fca338db4c7b54506a94649"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NTU5Ng==", "bodyText": "good catch !", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461145596", "createdAt": "2020-07-27T20:20:19Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java", "diffHunk": "@@ -19,6 +19,8 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericFlowUnit;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTcxNQ=="}, "originalCommit": {"oid": "0f2c74fbc6c5e5212fca338db4c7b54506a94649"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODMxMjIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxODowMDozNlrOG3tglQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo1ODoyN1rOG32fAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3MDQ4NQ==", "bodyText": "nit: factor this out into a function since it's used in multiple places", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461070485", "createdAt": "2020-07-27T18:00:36Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -159,28 +155,36 @@ private ManagedChannel getChannelForHost(final String remoteHost) {\n    * @param remoteHost The host to which we want to establish a channel to.\n    * @return a Managed channel object.\n    */\n-  private synchronized ManagedChannel addOrUpdateChannelForHost(final String remoteHost) {\n+  private synchronized ManagedChannel addOrUpdateChannelForHost(final InstanceDetails remoteHost) {\n     final ManagedChannel channel = buildChannelForHost(remoteHost);\n-    perHostChannelMap.computeIfAbsent(remoteHost, s -> new AtomicReference<>());\n-    perHostChannelMap.get(remoteHost).set(channel);\n+    perHostChannelMap.computeIfAbsent(remoteHost.getInstanceId(), s -> new AtomicReference<>());\n+    perHostChannelMap.get(remoteHost.getInstanceId()).set(channel);\n     return channel;\n   }\n \n-  private ManagedChannel buildChannelForHost(final String remoteHost) {\n+  private ManagedChannel buildChannelForHost(final InstanceDetails remoteHost) {\n     return shouldUseHttps ? buildSecureChannel(remoteHost) : buildInsecureChannel(remoteHost);\n   }\n \n-  private ManagedChannel buildInsecureChannel(final String remoteHost) {\n-    return ManagedChannelBuilder.forAddress(remoteHost, this.port).usePlaintext().build();\n+  private ManagedChannel buildInsecureChannel(final InstanceDetails remoteHost) {\n+    int port = this.port != 0 ? this.port : remoteHost.getGrpcPort();\n+    if (port == -1) {\n+      throw new IllegalArgumentException(\"Invalid port for grpc: \" + port);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f2c74fbc6c5e5212fca338db4c7b54506a94649"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNzUzNw==", "bodyText": "done !", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461217537", "createdAt": "2020-07-27T22:58:27Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -159,28 +155,36 @@ private ManagedChannel getChannelForHost(final String remoteHost) {\n    * @param remoteHost The host to which we want to establish a channel to.\n    * @return a Managed channel object.\n    */\n-  private synchronized ManagedChannel addOrUpdateChannelForHost(final String remoteHost) {\n+  private synchronized ManagedChannel addOrUpdateChannelForHost(final InstanceDetails remoteHost) {\n     final ManagedChannel channel = buildChannelForHost(remoteHost);\n-    perHostChannelMap.computeIfAbsent(remoteHost, s -> new AtomicReference<>());\n-    perHostChannelMap.get(remoteHost).set(channel);\n+    perHostChannelMap.computeIfAbsent(remoteHost.getInstanceId(), s -> new AtomicReference<>());\n+    perHostChannelMap.get(remoteHost.getInstanceId()).set(channel);\n     return channel;\n   }\n \n-  private ManagedChannel buildChannelForHost(final String remoteHost) {\n+  private ManagedChannel buildChannelForHost(final InstanceDetails remoteHost) {\n     return shouldUseHttps ? buildSecureChannel(remoteHost) : buildInsecureChannel(remoteHost);\n   }\n \n-  private ManagedChannel buildInsecureChannel(final String remoteHost) {\n-    return ManagedChannelBuilder.forAddress(remoteHost, this.port).usePlaintext().build();\n+  private ManagedChannel buildInsecureChannel(final InstanceDetails remoteHost) {\n+    int port = this.port != 0 ? this.port : remoteHost.getGrpcPort();\n+    if (port == -1) {\n+      throw new IllegalArgumentException(\"Invalid port for grpc: \" + port);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3MDQ4NQ=="}, "originalCommit": {"oid": "0f2c74fbc6c5e5212fca338db4c7b54506a94649"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODcyOTgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMDowMToyOFrOG3xgaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo1ODo1MVrOG32fmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNTk3OQ==", "bodyText": "I agree with most of the refactor points mentioned in the description of the PR, however, can you explain why we need to use node ids instead of ip+port combo? It would've achieved the same goal, unless I'm missing something.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461135979", "createdAt": "2020-07-27T20:01:28Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -54,17 +55,15 @@\n   private File trustedCasFile;\n \n   /**\n-   * Map of remote host to a Netty channel to that host.\n+   * Map of remote hostId to a Netty channel to that host.\n    */\n-  private ConcurrentMap<String, AtomicReference<ManagedChannel>> perHostChannelMap =\n-      new ConcurrentHashMap<>();\n+  private ConcurrentMap<InstanceDetails.Id, AtomicReference<ManagedChannel>> perHostChannelMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b6036ab6e07a651fe859e77de562923afb11664"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NDQyMA==", "bodyText": "You are right, ip+port will have the same affect. I used the node-id as it is a parameter, on its own (without combining with anything else), is guaranteed to be unique in a cluster.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461144420", "createdAt": "2020-07-27T20:18:07Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -54,17 +55,15 @@\n   private File trustedCasFile;\n \n   /**\n-   * Map of remote host to a Netty channel to that host.\n+   * Map of remote hostId to a Netty channel to that host.\n    */\n-  private ConcurrentMap<String, AtomicReference<ManagedChannel>> perHostChannelMap =\n-      new ConcurrentHashMap<>();\n+  private ConcurrentMap<InstanceDetails.Id, AtomicReference<ManagedChannel>> perHostChannelMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNTk3OQ=="}, "originalCommit": {"oid": "8b6036ab6e07a651fe859e77de562923afb11664"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1MTg1NA==", "bodyText": "Thanks for answering my question. I'm just thinking about the usecases where ip+port wouldn't change but node id would and if such scenarios are handled in the code if they were not handled in the past. Will take a look again.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461151854", "createdAt": "2020-07-27T20:31:54Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -54,17 +55,15 @@\n   private File trustedCasFile;\n \n   /**\n-   * Map of remote host to a Netty channel to that host.\n+   * Map of remote hostId to a Netty channel to that host.\n    */\n-  private ConcurrentMap<String, AtomicReference<ManagedChannel>> perHostChannelMap =\n-      new ConcurrentHashMap<>();\n+  private ConcurrentMap<InstanceDetails.Id, AtomicReference<ManagedChannel>> perHostChannelMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNTk3OQ=="}, "originalCommit": {"oid": "8b6036ab6e07a651fe859e77de562923afb11664"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNzY4OQ==", "bodyText": "makes sense. Please take a look.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461217689", "createdAt": "2020-07-27T22:58:51Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -54,17 +55,15 @@\n   private File trustedCasFile;\n \n   /**\n-   * Map of remote host to a Netty channel to that host.\n+   * Map of remote hostId to a Netty channel to that host.\n    */\n-  private ConcurrentMap<String, AtomicReference<ManagedChannel>> perHostChannelMap =\n-      new ConcurrentHashMap<>();\n+  private ConcurrentMap<InstanceDetails.Id, AtomicReference<ManagedChannel>> perHostChannelMap = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNTk3OQ=="}, "originalCommit": {"oid": "8b6036ab6e07a651fe859e77de562923afb11664"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE0NDkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoxMjo0NVrOG31cYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNzozMVrOG32rsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMDQ4Mg==", "bodyText": "return value is being ignored here. Do we need this change?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461200482", "createdAt": "2020-07-27T22:12:45Z", "author": {"login": "ktkrg"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -603,10 +603,13 @@ private void verifyFullNodeTemperatureProfile(String resp) {\n     JsonArray json = parser\n         .parse(resp)\n         .getAsJsonObject()\n-        .getAsJsonArray(ALL_TEMPERATURE_DIMENSIONS)\n-        .get(0)\n-        .getAsJsonObject()\n-        .getAsJsonArray(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME);\n+        .getAsJsonArray(ALL_TEMPERATURE_DIMENSIONS);\n+    // System.out.println(\"ALL_TEMPERATURE_DIMENSIONS\" + json);\n+\n+    json.get(0)\n+    .getAsJsonObject()\n+    .getAsJsonArray(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDc4NQ==", "bodyText": "ya. I was running tests and left it like that. good point !", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461220785", "createdAt": "2020-07-27T23:07:31Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -603,10 +603,13 @@ private void verifyFullNodeTemperatureProfile(String resp) {\n     JsonArray json = parser\n         .parse(resp)\n         .getAsJsonObject()\n-        .getAsJsonArray(ALL_TEMPERATURE_DIMENSIONS)\n-        .get(0)\n-        .getAsJsonObject()\n-        .getAsJsonArray(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME);\n+        .getAsJsonArray(ALL_TEMPERATURE_DIMENSIONS);\n+    // System.out.println(\"ALL_TEMPERATURE_DIMENSIONS\" + json);\n+\n+    json.get(0)\n+    .getAsJsonObject()\n+    .getAsJsonArray(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMDQ4Mg=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE0OTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/PluginSettings.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoxNDo0NVrOG31fQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowMDo0NFrOG351MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTIxNw==", "bodyText": "This annotation should go above the method if you're saying that the returned String may be null", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461201217", "createdAt": "2020-07-27T22:14:45Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/PluginSettings.java", "diffHunk": "@@ -113,6 +114,11 @@ public void overrideProperty(String key, String value) {\n     settings.setProperty(key, value);\n   }\n \n+  @VisibleForTesting\n+  public @Nullable String getProperty(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMjc5OQ==", "bodyText": "I think you missed this one, if this is changed I can +1 the diff", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461232799", "createdAt": "2020-07-27T23:44:28Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/PluginSettings.java", "diffHunk": "@@ -113,6 +114,11 @@ public void overrideProperty(String key, String value) {\n     settings.setProperty(key, value);\n   }\n \n+  @VisibleForTesting\n+  public @Nullable String getProperty(String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTIxNw=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MjM2OQ==", "bodyText": "I missed this one. Pushed the changes again.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461272369", "createdAt": "2020-07-28T02:00:44Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/PluginSettings.java", "diffHunk": "@@ -113,6 +114,11 @@ public void overrideProperty(String key, String value) {\n     settings.setProperty(key, value);\n   }\n \n+  @VisibleForTesting\n+  public @Nullable String getProperty(String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTIxNw=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE3NjYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/InstanceDetails.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoyNToyMlrOG31vMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMjowMTozMlrOG352BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTI5OQ==", "bodyText": "I'm curious, what does this do differently than just directly returning ip?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461205299", "createdAt": "2020-07-27T22:25:22Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/InstanceDetails.java", "diffHunk": "@@ -15,48 +15,166 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.core.Util;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Objects;\n+import com.google.common.net.InetAddresses;\n \n public class InstanceDetails {\n+  public static class Ip {\n+\n+    // The only way to get the ip is to get the serialized string representation of it.\n+    private String ip;\n+\n+    public Ip(String ip) {\n+      if (!InetAddresses.isInetAddress(ip)) {\n+        throw new IllegalArgumentException(\"The provided string is not an IPV4ip: '\" + ip + \"'\");\n+      }\n+      this.ip = ip;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof Ip)) {\n+        return false;\n+      }\n+      Ip ip1 = (Ip) o;\n+      return Objects.equal(ip, ip1.ip);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(ip);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"\" + ip;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTI4OQ==", "bodyText": "you mean why we don't have getIp() instead ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461221289", "createdAt": "2020-07-27T23:09:02Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/InstanceDetails.java", "diffHunk": "@@ -15,48 +15,166 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.core.Util;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Objects;\n+import com.google.common.net.InetAddresses;\n \n public class InstanceDetails {\n+  public static class Ip {\n+\n+    // The only way to get the ip is to get the serialized string representation of it.\n+    private String ip;\n+\n+    public Ip(String ip) {\n+      if (!InetAddresses.isInetAddress(ip)) {\n+        throw new IllegalArgumentException(\"The provided string is not an IPV4ip: '\" + ip + \"'\");\n+      }\n+      this.ip = ip;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof Ip)) {\n+        return false;\n+      }\n+      Ip ip1 = (Ip) o;\n+      return Objects.equal(ip, ip1.ip);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(ip);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"\" + ip;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTI5OQ=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMjU3NQ==", "bodyText": "I mean why return \"\" + ip instead of just return ip?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461232575", "createdAt": "2020-07-27T23:43:44Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/InstanceDetails.java", "diffHunk": "@@ -15,48 +15,166 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.core.Util;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Objects;\n+import com.google.common.net.InetAddresses;\n \n public class InstanceDetails {\n+  public static class Ip {\n+\n+    // The only way to get the ip is to get the serialized string representation of it.\n+    private String ip;\n+\n+    public Ip(String ip) {\n+      if (!InetAddresses.isInetAddress(ip)) {\n+        throw new IllegalArgumentException(\"The provided string is not an IPV4ip: '\" + ip + \"'\");\n+      }\n+      this.ip = ip;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof Ip)) {\n+        return false;\n+      }\n+      Ip ip1 = (Ip) o;\n+      return Objects.equal(ip, ip1.ip);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(ip);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"\" + ip;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTI5OQ=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MjU4MQ==", "bodyText": "Yes you are right. It's a no-op for a string", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461272581", "createdAt": "2020-07-28T02:01:32Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/InstanceDetails.java", "diffHunk": "@@ -15,48 +15,166 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.core.Util;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Objects;\n+import com.google.common.net.InetAddresses;\n \n public class InstanceDetails {\n+  public static class Ip {\n+\n+    // The only way to get the ip is to get the serialized string representation of it.\n+    private String ip;\n+\n+    public Ip(String ip) {\n+      if (!InetAddresses.isInetAddress(ip)) {\n+        throw new IllegalArgumentException(\"The provided string is not an IPV4ip: '\" + ip + \"'\");\n+      }\n+      this.ip = ip;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof Ip)) {\n+        return false;\n+      }\n+      Ip ip1 = (Ip) o;\n+      return Objects.equal(ip, ip1.ip);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(ip);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"\" + ip;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTI5OQ=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTE4MjQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/messages/DataMsg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjoyNzo0MlrOG31ywQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxMDozMVrOG32vkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNjIwOQ==", "bodyText": "nit: destinationGraphNodes?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461206209", "createdAt": "2020-07-27T22:27:42Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/messages/DataMsg.java", "diffHunk": "@@ -19,23 +19,23 @@\n import java.util.List;\n \n public class DataMsg {\n-  String sourceNode;\n-  List<String> destinationNodes;\n+  String sourceGraphNode;\n+  List<String> destinationGraphNodes;\n   List<? extends GenericFlowUnit> flowUnits;\n \n   public DataMsg(\n-      String sourceNode, List<String> destinationNode, List<? extends GenericFlowUnit> flowUnits) {\n-    this.sourceNode = sourceNode;\n-    this.destinationNodes = destinationNode;\n+          String sourceGraphNode, List<String> destinationNode, List<? extends GenericFlowUnit> flowUnits) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTc3Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461221777", "createdAt": "2020-07-27T23:10:31Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/messages/DataMsg.java", "diffHunk": "@@ -19,23 +19,23 @@\n import java.util.List;\n \n public class DataMsg {\n-  String sourceNode;\n-  List<String> destinationNodes;\n+  String sourceGraphNode;\n+  List<String> destinationGraphNodes;\n   List<? extends GenericFlowUnit> flowUnits;\n \n   public DataMsg(\n-      String sourceNode, List<String> destinationNode, List<? extends GenericFlowUnit> flowUnits) {\n-    this.sourceNode = sourceNode;\n-    this.destinationNodes = destinationNode;\n+          String sourceGraphNode, List<String> destinationNode, List<? extends GenericFlowUnit> flowUnits) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNjIwOQ=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTIwMzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjozNTo1OFrOG31-6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxMDo1NFrOG32wBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwOTMyMg==", "bodyText": "Is there a reason you initialize to -1 instead of 0? 0 would make the default behavior the same as before this commit right?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461209322", "createdAt": "2020-07-27T22:35:58Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -73,7 +72,7 @@\n \n   public GRPCConnectionManager(final boolean shouldUseHttps) {\n     this.shouldUseHttps = shouldUseHttps;\n-    this.port = Util.RPC_PORT;\n+    this.port = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTg5Mg==", "bodyText": "You are right. That was a miss on my part.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461221892", "createdAt": "2020-07-27T23:10:54Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -73,7 +72,7 @@\n \n   public GRPCConnectionManager(final boolean shouldUseHttps) {\n     this.shouldUseHttps = shouldUseHttps;\n-    this.port = Util.RPC_PORT;\n+    this.port = -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwOTMyMg=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTIxMzM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionManagerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo0MDoxMVrOG32FGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxMToxN1rOG32whA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMDkwNg==", "bodyText": "It's ok to remove this @ignore and change grpcConnectionManager = new GRPCConnectionManager(false). TLS semantics are tested elsewhere.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461210906", "createdAt": "2020-07-27T22:40:11Z", "author": {"login": "sidheart"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionManagerTest.java", "diffHunk": "@@ -2,16 +2,19 @@\n \n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.SubscribeResponse;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.net.GRPCConnectionManager;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n import com.google.common.collect.Sets;\n import java.util.Collections;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n \n-\n+// TODO: remove", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjAyMA==", "bodyText": "I added the change for it to get the right files.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461222020", "createdAt": "2020-07-27T23:11:17Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionManagerTest.java", "diffHunk": "@@ -2,16 +2,19 @@\n \n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.SubscribeResponse;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.net.GRPCConnectionManager;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n import com.google.common.collect.Sets;\n import java.util.Collections;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n \n-\n+// TODO: remove", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMDkwNg=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTIxNjk3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/RcaEnabledSamplerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo0MTozOFrOG32HKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxMToyN1rOG32wwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMTQzNQ==", "bodyText": "It's like a pet name for the node! :)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461211435", "createdAt": "2020-07-27T22:41:38Z", "author": {"login": "sidheart"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/RcaEnabledSamplerTest.java", "diffHunk": "@@ -39,14 +39,14 @@ public void testIsRcaEnabled() {\n \n         assertFalse(uut.isRcaEnabled());\n         ClusterDetailsEventProcessor.NodeDetails details =\n-                ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"\", \"\", false);\n+                ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"nodex\", \"127.0.0.1\", false);\n \n         ClusterDetailsEventProcessor clusterDetailsEventProcessor = new ClusterDetailsEventProcessor();\n         clusterDetailsEventProcessor.setNodesDetails(Collections.singletonList(details));\n         appContext.setClusterDetailsEventProcessor(clusterDetailsEventProcessor);\n \n         assertFalse(uut.isRcaEnabled());\n-        details = ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"\", \"\", true);\n+        details = ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"nodey\", \"127.0.0.2\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjA4MA==", "bodyText": ":)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461222080", "createdAt": "2020-07-27T23:11:27Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/RcaEnabledSamplerTest.java", "diffHunk": "@@ -39,14 +39,14 @@ public void testIsRcaEnabled() {\n \n         assertFalse(uut.isRcaEnabled());\n         ClusterDetailsEventProcessor.NodeDetails details =\n-                ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"\", \"\", false);\n+                ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"nodex\", \"127.0.0.1\", false);\n \n         ClusterDetailsEventProcessor clusterDetailsEventProcessor = new ClusterDetailsEventProcessor();\n         clusterDetailsEventProcessor.setNodesDetails(Collections.singletonList(details));\n         appContext.setClusterDetailsEventProcessor(clusterDetailsEventProcessor);\n \n         assertFalse(uut.isRcaEnabled());\n-        details = ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"\", \"\", true);\n+        details = ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"nodey\", \"127.0.0.2\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMTQzNQ=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTIyNDM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/rca/cluster/BaseClusterRcaTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMjo0NDo0NlrOG32LjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxMjowNFrOG32xjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMjU1Ng==", "bodyText": "nit: why split this if we aren't distinguishing between the two cases?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461212556", "createdAt": "2020-07-27T22:44:46Z", "author": {"login": "sidheart"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/rca/cluster/BaseClusterRcaTest.java", "diffHunk": "@@ -310,7 +310,10 @@ private boolean compareResourceSummary(Resource resource, HotResourceSummary res\n   }\n \n   private boolean compareNodeSummary(String nodeId, Resource resource, HotNodeSummary nodeSummary) {\n-    if (!nodeId.equals(nodeSummary.getNodeID()) || nodeSummary.getHotResourceSummaryList().isEmpty()) {\n+    if (!nodeId.equals(nodeSummary.getNodeID().toString())) {\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjI4Ng==", "bodyText": "It was just that I was debugging and it makes it easier to put breakpoints to know which branch is returning the error. :)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461222286", "createdAt": "2020-07-27T23:12:04Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/rca/cluster/BaseClusterRcaTest.java", "diffHunk": "@@ -310,7 +310,10 @@ private boolean compareResourceSummary(Resource resource, HotResourceSummary res\n   }\n \n   private boolean compareNodeSummary(String nodeId, Resource resource, HotNodeSummary nodeSummary) {\n-    if (!nodeId.equals(nodeSummary.getNodeID()) || nodeSummary.getHotResourceSummaryList().isEmpty()) {\n+    if (!nodeId.equals(nodeSummary.getNodeID().toString())) {\n+      return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMjU1Ng=="}, "originalCommit": {"oid": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2554, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}