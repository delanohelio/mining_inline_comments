{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MTI5MTM2", "number": 372, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowNTowM1rOEYmjLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowNjozNlrOEYmkmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjMyODc4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AErrorPatternIgnored.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowNTowM1rOHBB4XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowNTowM1rOHBB4XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MTQzNg==", "bodyText": "add license header here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/372#discussion_r470841436", "createdAt": "2020-08-14T20:05:03Z", "author": {"login": "rguo-aws"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AErrorPatternIgnored.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c73f2961ed1e796b0007b2e5e9b9fe00503c1ebf"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjMzMjQwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AErrorPatternIgnored.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowNjozNlrOHBB6mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDowNjozNlrOHBB6mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0MjAwOA==", "bodyText": "can we also expose a method to suppress errors at file level granularity ? i.e. we can ignore all errors from some certain RCAs", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/372#discussion_r470842008", "createdAt": "2020-08-14T20:06:36Z", "author": {"login": "rguo-aws"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/framework/annotations/AErrorPatternIgnored.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Repeatable;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * This annotation can be used to ignore certain log messages for specific test methods.\n+ */\n+@Target(ElementType.METHOD)\n+@Retention(RetentionPolicy.RUNTIME)\n+@Repeatable(AErrorPatternIgnored.Patterns.class)\n+public @interface AErrorPatternIgnored {\n+  /**\n+   * The substring, which if found in the error log line, we will ignore the error log.\n+   *\n+   * @return Patterns that will be considered before the error log. If multiple patterns are specified, then the presence of any of the\n+   *     them will ignore the log line.\n+   */\n+  String pattern();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c73f2961ed1e796b0007b2e5e9b9fe00503c1ebf"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2360, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}