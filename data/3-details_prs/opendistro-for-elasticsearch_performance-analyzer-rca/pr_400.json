{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0ODMwMDcz", "number": 400, "title": "Improve WaitFor utility logic", "bodyText": "Fixes #: N/A\nDescription of changes:\n\nWaitFor uses Instant.now() instead of System.currentTimeMillis() to\nget a system independent time measurement\nWaitFor now has a fixed wait before retesting the provided callable.\nIt also checks the callable one final time before throwing an exception\nA 1s WaitFor() call in WireHopperTest has been increased to 10s\n\nTests: N/A\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-08-27T16:56:58Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400", "merged": true, "mergeCommit": {"oid": "a4c63d1beb68c86a230cf0607a00c919d7f3c771"}, "closed": true, "closedAt": "2020-09-09T17:55:44Z", "author": {"login": "sidheart"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDDXVwgH2gAyNDc0ODMwMDczOjg5ZTA4Y2ZlODdjYWM1NzBlMjg3ZmI5OGE5YTI2ZTdmYWFmNDEzOGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHP_pYAFqTQ4NTI2MzA5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "89e08cfe87cac570e287fb98a9a26e7faaf4138e", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/89e08cfe87cac570e287fb98a9a26e7faaf4138e", "committedDate": "2020-08-27T16:54:13Z", "message": "Improve WaitFor utility logic\n\n- WaitFor uses Instant.now() instead of System.currentTimeMillis() to\nget a system independent time measurement\n- WaitFor now has a fixed wait before retesting the provided callable.\nIt also checks the callable one final time before throwing an exception\n- A 1s WaitFor() call in WireHopperTest has been increased to 10s"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDA2NTk4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#pullrequestreview-477006598", "createdAt": "2020-08-27T19:11:18Z", "commit": {"oid": "89e08cfe87cac570e287fb98a9a26e7faaf4138e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToxMToxOFrOHIdsow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxOToxMToxOFrOHIdsow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYzNzIxOQ==", "bodyText": "Can we do it in the same function? Do we need method overloading for a single hardcoded error string?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#discussion_r478637219", "createdAt": "2020-08-27T19:11:18Z", "author": {"login": "aditjind"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/util/WaitFor.java", "diffHunk": "@@ -16,16 +18,31 @@\n      * @throws Exception If the time limit expires before the task evaluates to true\n      */\n     public static void waitFor(Callable<Boolean> task, long maxWait, TimeUnit unit) throws Exception {\n+        waitFor(task, maxWait, unit, \"waitFor timed out before task evaluated to true\");\n+    }\n+\n+    /**\n+     * Waits at most the specified time for the given task to evaluate to true\n+     * @param task The task which we hope evaluates to true before the time limit\n+     * @param maxWait The max amount of time to wait for the task to evaluate for true\n+     * @param unit The time unit of the maxWait parameter\n+     * @param message The exception message to print if waitFor times out\n+     * @throws Exception If the time limit expires before the task evaluates to true\n+     */\n+    public static void waitFor(Callable<Boolean> task, long maxWait, TimeUnit unit, String message)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e08cfe87cac570e287fb98a9a26e7faaf4138e"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDA2NjMw", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#pullrequestreview-477006630", "createdAt": "2020-08-27T19:11:21Z", "commit": {"oid": "89e08cfe87cac570e287fb98a9a26e7faaf4138e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDExMTA2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#pullrequestreview-477011106", "createdAt": "2020-08-27T19:17:59Z", "commit": {"oid": "89e08cfe87cac570e287fb98a9a26e7faaf4138e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDU4OTU0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#pullrequestreview-477058954", "createdAt": "2020-08-27T20:31:21Z", "commit": {"oid": "89e08cfe87cac570e287fb98a9a26e7faaf4138e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozMToyMVrOHIgNOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozMToyMVrOHIgNOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3ODMzMA==", "bodyText": "Maybe a do-while is a cleaner way to ensure we don't miss out on the last 500 millis ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#discussion_r478678330", "createdAt": "2020-08-27T20:31:21Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/util/WaitFor.java", "diffHunk": "@@ -16,16 +18,31 @@\n      * @throws Exception If the time limit expires before the task evaluates to true\n      */\n     public static void waitFor(Callable<Boolean> task, long maxWait, TimeUnit unit) throws Exception {\n+        waitFor(task, maxWait, unit, \"waitFor timed out before task evaluated to true\");\n+    }\n+\n+    /**\n+     * Waits at most the specified time for the given task to evaluate to true\n+     * @param task The task which we hope evaluates to true before the time limit\n+     * @param maxWait The max amount of time to wait for the task to evaluate for true\n+     * @param unit The time unit of the maxWait parameter\n+     * @param message The exception message to print if waitFor times out\n+     * @throws Exception If the time limit expires before the task evaluates to true\n+     */\n+    public static void waitFor(Callable<Boolean> task, long maxWait, TimeUnit unit, String message)\n+        throws Exception {\n         long maxWaitMillis = TimeUnit.MILLISECONDS.convert(maxWait, unit);\n-        long pollTime = System.currentTimeMillis();\n-        long curTime;\n+        Instant start = Instant.now();\n         while (!task.call() && maxWaitMillis >= 0) {\n-            curTime = System.currentTimeMillis();\n-            maxWaitMillis -= (curTime - pollTime);\n-            pollTime = curTime;\n+            Instant finish = Instant.now();\n+            maxWaitMillis -= Duration.between(start, finish).toMillis();\n+            start = finish;\n+            // Wait for a fixed amount before calling the task again\n+            Thread.sleep(500L);\n         }\n-        if (maxWaitMillis < 0) {\n-            throw new TimeoutException(\"WaitFor timed out before task evaluated to true\");\n+        // Check the task one last time before throwing an exception\n+        if (!task.call() && maxWaitMillis < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e08cfe87cac570e287fb98a9a26e7faaf4138e"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MDYxMDIx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#pullrequestreview-477061021", "createdAt": "2020-08-27T20:34:32Z", "commit": {"oid": "89e08cfe87cac570e287fb98a9a26e7faaf4138e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozNDozMlrOHIgTMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDozNDozMlrOHIgTMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY3OTg1OA==", "bodyText": "Because this is just a test, its okay to burn CPU. If we want to be conscious, maybe 1 ms might be good enough ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#discussion_r478679858", "createdAt": "2020-08-27T20:34:32Z", "author": {"login": "yojs"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/util/WaitFor.java", "diffHunk": "@@ -16,16 +18,31 @@\n      * @throws Exception If the time limit expires before the task evaluates to true\n      */\n     public static void waitFor(Callable<Boolean> task, long maxWait, TimeUnit unit) throws Exception {\n+        waitFor(task, maxWait, unit, \"waitFor timed out before task evaluated to true\");\n+    }\n+\n+    /**\n+     * Waits at most the specified time for the given task to evaluate to true\n+     * @param task The task which we hope evaluates to true before the time limit\n+     * @param maxWait The max amount of time to wait for the task to evaluate for true\n+     * @param unit The time unit of the maxWait parameter\n+     * @param message The exception message to print if waitFor times out\n+     * @throws Exception If the time limit expires before the task evaluates to true\n+     */\n+    public static void waitFor(Callable<Boolean> task, long maxWait, TimeUnit unit, String message)\n+        throws Exception {\n         long maxWaitMillis = TimeUnit.MILLISECONDS.convert(maxWait, unit);\n-        long pollTime = System.currentTimeMillis();\n-        long curTime;\n+        Instant start = Instant.now();\n         while (!task.call() && maxWaitMillis >= 0) {\n-            curTime = System.currentTimeMillis();\n-            maxWaitMillis -= (curTime - pollTime);\n-            pollTime = curTime;\n+            Instant finish = Instant.now();\n+            maxWaitMillis -= Duration.between(start, finish).toMillis();\n+            start = finish;\n+            // Wait for a fixed amount before calling the task again\n+            Thread.sleep(500L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e08cfe87cac570e287fb98a9a26e7faaf4138e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47ca15720569c438d6d0d3264061b2e23292586c", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/47ca15720569c438d6d0d3264061b2e23292586c", "committedDate": "2020-09-02T17:51:43Z", "message": "Address PR Comments\n\n- Task call / wait loop is now a do-while\n- Sleep is reduced to 100ms"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMTE4MTgx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#pullrequestreview-481118181", "createdAt": "2020-09-02T18:03:28Z", "commit": {"oid": "47ca15720569c438d6d0d3264061b2e23292586c"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowMzoyOVrOHL7EmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODowMzoyOVrOHL7EmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NDIxNw==", "bodyText": "nit: new line", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#discussion_r482264217", "createdAt": "2020-09-02T18:03:29Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/util/WaitFor.java", "diffHunk": "@@ -16,16 +18,32 @@\n      * @throws Exception If the time limit expires before the task evaluates to true\n      */\n     public static void waitFor(Callable<Boolean> task, long maxWait, TimeUnit unit) throws Exception {\n+        waitFor(task, maxWait, unit, \"waitFor timed out before task evaluated to true\");\n+    }\n+\n+    /**\n+     * Waits at most the specified time for the given task to evaluate to true\n+     * @param task The task which we hope evaluates to true before the time limit\n+     * @param maxWait The max amount of time to wait for the task to evaluate for true\n+     * @param unit The time unit of the maxWait parameter\n+     * @param message The exception message to print if waitFor times out\n+     * @throws Exception If the time limit expires before the task evaluates to true\n+     */\n+    public static void waitFor(Callable<Boolean> task, long maxWait, TimeUnit unit, String message)\n+        throws Exception {\n         long maxWaitMillis = TimeUnit.MILLISECONDS.convert(maxWait, unit);\n-        long pollTime = System.currentTimeMillis();\n-        long curTime;\n-        while (!task.call() && maxWaitMillis >= 0) {\n-            curTime = System.currentTimeMillis();\n-            maxWaitMillis -= (curTime - pollTime);\n-            pollTime = curTime;\n-        }\n-        if (maxWaitMillis < 0) {\n-            throw new TimeoutException(\"WaitFor timed out before task evaluated to true\");\n+        do {\n+            Instant start = Instant.now();\n+            if (task.call()) {\n+                break;\n+            }\n+            maxWaitMillis -= Duration.between(start, Instant.now()).toMillis();\n+            // Wait for a fixed amount before calling the task again\n+            Thread.sleep(100L);\n+        } while (maxWaitMillis >= 0);\n+        // Check the task one last time before throwing an exception\n+        if (!task.call()) {\n+            throw new TimeoutException(message);\n         }\n     }\n-}\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47ca15720569c438d6d0d3264061b2e23292586c"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89f9960bfeae48854cc59b0e104dba21e04be758", "author": {"user": {"login": "sidheart", "name": "Sid Narayan"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/89f9960bfeae48854cc59b0e104dba21e04be758", "committedDate": "2020-09-03T17:06:25Z", "message": "Update wait logic, see if it resolves failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjYwNzY2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#pullrequestreview-485260766", "createdAt": "2020-09-09T17:49:30Z", "commit": {"oid": "89f9960bfeae48854cc59b0e104dba21e04be758"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjYzMDk2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/400#pullrequestreview-485263096", "createdAt": "2020-09-09T17:52:48Z", "commit": {"oid": "89f9960bfeae48854cc59b0e104dba21e04be758"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 899, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}