{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1Njg1Mjk2", "number": 439, "reviewThreads": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMToxODoyMlrOEpNTAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzoyOToyNFrOEttw0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjQ0OTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMToxODoyMlrOHavr2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTozMzo0OVrOHdu8mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNjI5Ng==", "bodyText": "Isn't this going to be all data nodes?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r497806296", "createdAt": "2020-09-30T21:18:22Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SizeUpJvmAction extends SuppressibleAction {\n+\n+  public static final String NAME = \"SizeUpJvmAction\";\n+  private static final String SUMMARY = \"Update heap size to 128GB\";\n+  private final boolean canUpdate;\n+  private final NodeKey esNode;\n+  private static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = TimeUnit.DAYS.toMillis(3);\n+  private static final long GB_TO_B = 1024 * 1024 * 1024;\n+\n+  public SizeUpJvmAction(final AppContext appContext) {\n+    super(appContext);\n+    this.esNode = new NodeKey(appContext.getMyInstanceDetails());\n+    this.canUpdate = Runtime.getRuntime().totalMemory() > 200 * GB_TO_B;\n+  }\n+\n+  @Override\n+  public boolean canUpdate() {\n+    return canUpdate;\n+  }\n+\n+  @Override\n+  public long coolOffPeriodInMillis() {\n+    return DEFAULT_COOL_OFF_PERIOD_IN_MILLIS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23288c57d5f6b6ad3ef10ababe406d7a22aae67a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzOTkzMQ==", "bodyText": "good catch! changed.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500939931", "createdAt": "2020-10-07T11:33:49Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SizeUpJvmAction extends SuppressibleAction {\n+\n+  public static final String NAME = \"SizeUpJvmAction\";\n+  private static final String SUMMARY = \"Update heap size to 128GB\";\n+  private final boolean canUpdate;\n+  private final NodeKey esNode;\n+  private static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = TimeUnit.DAYS.toMillis(3);\n+  private static final long GB_TO_B = 1024 * 1024 * 1024;\n+\n+  public SizeUpJvmAction(final AppContext appContext) {\n+    super(appContext);\n+    this.esNode = new NodeKey(appContext.getMyInstanceDetails());\n+    this.canUpdate = Runtime.getRuntime().totalMemory() > 200 * GB_TO_B;\n+  }\n+\n+  @Override\n+  public boolean canUpdate() {\n+    return canUpdate;\n+  }\n+\n+  @Override\n+  public long coolOffPeriodInMillis() {\n+    return DEFAULT_COOL_OFF_PERIOD_IN_MILLIS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwNjI5Ng=="}, "originalCommit": {"oid": "23288c57d5f6b6ad3ef10ababe406d7a22aae67a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjQ3MTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMToyNToyMFrOHav5FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTozNDowNVrOHdu9FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwOTY4NA==", "bodyText": "Do we need this increasePressure impact? This will create conflicts with other actions.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r497809684", "createdAt": "2020-09-30T21:25:20Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SizeUpJvmAction extends SuppressibleAction {\n+\n+  public static final String NAME = \"SizeUpJvmAction\";\n+  private static final String SUMMARY = \"Update heap size to 128GB\";\n+  private final boolean canUpdate;\n+  private final NodeKey esNode;\n+  private static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = TimeUnit.DAYS.toMillis(3);\n+  private static final long GB_TO_B = 1024 * 1024 * 1024;\n+\n+  public SizeUpJvmAction(final AppContext appContext) {\n+    super(appContext);\n+    this.esNode = new NodeKey(appContext.getMyInstanceDetails());\n+    this.canUpdate = Runtime.getRuntime().totalMemory() > 200 * GB_TO_B;\n+  }\n+\n+  @Override\n+  public boolean canUpdate() {\n+    return canUpdate;\n+  }\n+\n+  @Override\n+  public long coolOffPeriodInMillis() {\n+    return DEFAULT_COOL_OFF_PERIOD_IN_MILLIS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    final ImpactVector impactVector = new ImpactVector();\n+    impactVector.increasesPressure(Dimension.RAM, Dimension.DISK, Dimension.CPU);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23288c57d5f6b6ad3ef10ababe406d7a22aae67a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0MDA1Mw==", "bodyText": "agreed. removed the increasePressure set.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500940053", "createdAt": "2020-10-07T11:34:05Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SizeUpJvmAction extends SuppressibleAction {\n+\n+  public static final String NAME = \"SizeUpJvmAction\";\n+  private static final String SUMMARY = \"Update heap size to 128GB\";\n+  private final boolean canUpdate;\n+  private final NodeKey esNode;\n+  private static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = TimeUnit.DAYS.toMillis(3);\n+  private static final long GB_TO_B = 1024 * 1024 * 1024;\n+\n+  public SizeUpJvmAction(final AppContext appContext) {\n+    super(appContext);\n+    this.esNode = new NodeKey(appContext.getMyInstanceDetails());\n+    this.canUpdate = Runtime.getRuntime().totalMemory() > 200 * GB_TO_B;\n+  }\n+\n+  @Override\n+  public boolean canUpdate() {\n+    return canUpdate;\n+  }\n+\n+  @Override\n+  public long coolOffPeriodInMillis() {\n+    return DEFAULT_COOL_OFF_PERIOD_IN_MILLIS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+    return Collections.singletonList(esNode);\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    final ImpactVector impactVector = new ImpactVector();\n+    impactVector.increasesPressure(Dimension.RAM, Dimension.DISK, Dimension.CPU);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgwOTY4NA=="}, "originalCommit": {"oid": "23288c57d5f6b6ad3ef10ababe406d7a22aae67a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDE0OTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDozNzoyM1rOHb67kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwMToxMDowNFrOHcyr9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzOTEyMw==", "bodyText": "nit: Can you rename this to 128GBHeapAction, G1GCAction, or something more accurate", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499039123", "createdAt": "2020-10-02T20:37:23Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SizeUpJvmAction extends SuppressibleAction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTk1MjYzMQ==", "bodyText": "Would've loved to name it 128GBHeapAction, but you can't start class names with a number, and our goal is not really to get the JVM to use a different GC as well. We want a bigger sized heap. Maybe HeapSizeIncreaseAction?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499952631", "createdAt": "2020-10-06T01:10:04Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class SizeUpJvmAction extends SuppressibleAction {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAzOTEyMw=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDE1NjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0MDowN1rOHb6_7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjoyMjo0M1rOHc3dqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MDIzNw==", "bodyText": "Nit rename along with SizeUpAction", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499040237", "createdAt": "2020-10-02T20:40:07Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.SizeUpJvmAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmScaleUpPolicy implements DecisionPolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAzMDg5MA==", "bodyText": "HeapSizeIncreasePolicy?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500030890", "createdAt": "2020-10-06T06:22:43Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.SizeUpJvmAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmScaleUpPolicy implements DecisionPolicy {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MDIzNw=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODc4ODQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjowMjo1MlrOHcjzhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTowODoxNFrOHduIcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwODgwNA==", "bodyText": "Need to check with Vigya about ActionSets. If we aren't emitting this cycle, should we emit the last set of actions?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499708804", "createdAt": "2020-10-05T16:02:52Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.SizeUpJvmAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmScaleUpPolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private PerNodeSlidingWindow perNodeSlidingWindow;\n+  private long evalFrequency;\n+  private long counter;\n+  private int unhealthyNodePercentage;\n+  private int minimumMinutesUnhealthy;\n+\n+  public JvmScaleUpPolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final long policyEvaluationFrequency) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    this.evalFrequency = policyEvaluationFrequency;\n+    this.counter = 0;\n+    this.perNodeSlidingWindow = new PerNodeSlidingWindow(4, TimeUnit.DAYS);\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    counter++;\n+    addToSlidingWindow();\n+    if (counter == evalFrequency) {\n+      counter = 0;\n+      return evaluateAndEmit();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNzg2MQ==", "bodyText": "Should we be controlling the frequency here?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499717861", "createdAt": "2020-10-05T16:17:08Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.SizeUpJvmAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmScaleUpPolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private PerNodeSlidingWindow perNodeSlidingWindow;\n+  private long evalFrequency;\n+  private long counter;\n+  private int unhealthyNodePercentage;\n+  private int minimumMinutesUnhealthy;\n+\n+  public JvmScaleUpPolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final long policyEvaluationFrequency) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    this.evalFrequency = policyEvaluationFrequency;\n+    this.counter = 0;\n+    this.perNodeSlidingWindow = new PerNodeSlidingWindow(4, TimeUnit.DAYS);\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    counter++;\n+    addToSlidingWindow();\n+    if (counter == evalFrequency) {\n+      counter = 0;\n+      return evaluateAndEmit();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwODgwNA=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0MTYwNw==", "bodyText": "+1, we need to remember the last set of actions and emit them. For long running items i raised PR #452 which makes use of alarm monitors (the bucketized sliding window will extend from #447 to create persistable sliding windows).", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500041607", "createdAt": "2020-10-06T06:49:13Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.SizeUpJvmAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmScaleUpPolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private PerNodeSlidingWindow perNodeSlidingWindow;\n+  private long evalFrequency;\n+  private long counter;\n+  private int unhealthyNodePercentage;\n+  private int minimumMinutesUnhealthy;\n+\n+  public JvmScaleUpPolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final long policyEvaluationFrequency) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    this.evalFrequency = policyEvaluationFrequency;\n+    this.counter = 0;\n+    this.perNodeSlidingWindow = new PerNodeSlidingWindow(4, TimeUnit.DAYS);\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    counter++;\n+    addToSlidingWindow();\n+    if (counter == evalFrequency) {\n+      counter = 0;\n+      return evaluateAndEmit();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwODgwNA=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyNjU3OQ==", "bodyText": "aah, ok.. done. I'll merge again from master once #452 is merged.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500926579", "createdAt": "2020-10-07T11:08:14Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.SizeUpJvmAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmScaleUpPolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private PerNodeSlidingWindow perNodeSlidingWindow;\n+  private long evalFrequency;\n+  private long counter;\n+  private int unhealthyNodePercentage;\n+  private int minimumMinutesUnhealthy;\n+\n+  public JvmScaleUpPolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final long policyEvaluationFrequency) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    this.evalFrequency = policyEvaluationFrequency;\n+    this.counter = 0;\n+    this.perNodeSlidingWindow = new PerNodeSlidingWindow(4, TimeUnit.DAYS);\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    counter++;\n+    addToSlidingWindow();\n+    if (counter == evalFrequency) {\n+      counter = 0;\n+      return evaluateAndEmit();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwODgwNA=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODc5NjU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjowNTowMVrOHcj4lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMToxMTozOVrOHduPvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMDEwMw==", "bodyText": "Can you do a null check on hotNodeSummary? It's a little extra careful, but I've found that helpful with these functional bits", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499710103", "createdAt": "2020-10-05T16:05:01Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.SizeUpJvmAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmScaleUpPolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private PerNodeSlidingWindow perNodeSlidingWindow;\n+  private long evalFrequency;\n+  private long counter;\n+  private int unhealthyNodePercentage;\n+  private int minimumMinutesUnhealthy;\n+\n+  public JvmScaleUpPolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final long policyEvaluationFrequency) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    this.evalFrequency = policyEvaluationFrequency;\n+    this.counter = 0;\n+    this.perNodeSlidingWindow = new PerNodeSlidingWindow(4, TimeUnit.DAYS);\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    counter++;\n+    addToSlidingWindow();\n+    if (counter == evalFrequency) {\n+      counter = 0;\n+      return evaluateAndEmit();\n+    }\n+\n+    return Collections.emptyList();\n+  }\n+\n+  private void addToSlidingWindow() {\n+    long currTime = System.currentTimeMillis();\n+    if (largeHeapClusterRca.getFlowUnits().isEmpty()) {\n+      return;\n+    }\n+    ResourceFlowUnit<HotClusterSummary> flowUnit = largeHeapClusterRca.getFlowUnits().get(0);\n+\n+    if (flowUnit.getSummary() == null) {\n+      return;\n+    }\n+    List<HotNodeSummary> hotNodeSummaries = flowUnit.getSummary().getHotNodeSummaryList();\n+    hotNodeSummaries.forEach(hotNodeSummary -> {\n+      NodeKey nodeKey = new NodeKey(hotNodeSummary.getNodeID(), hotNodeSummary.getHostAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODQ0NA==", "bodyText": "I get what you're saying, but we defensively create a new ArrayList for node summaries. I've added a @nonnull annotation on the getter to enforce static checking of (non)nullness so that others can also safely use the list without adding null checks.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500928444", "createdAt": "2020-10-07T11:11:39Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.SizeUpJvmAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmScaleUpPolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private PerNodeSlidingWindow perNodeSlidingWindow;\n+  private long evalFrequency;\n+  private long counter;\n+  private int unhealthyNodePercentage;\n+  private int minimumMinutesUnhealthy;\n+\n+  public JvmScaleUpPolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final long policyEvaluationFrequency) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    this.evalFrequency = policyEvaluationFrequency;\n+    this.counter = 0;\n+    this.perNodeSlidingWindow = new PerNodeSlidingWindow(4, TimeUnit.DAYS);\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    counter++;\n+    addToSlidingWindow();\n+    if (counter == evalFrequency) {\n+      counter = 0;\n+      return evaluateAndEmit();\n+    }\n+\n+    return Collections.emptyList();\n+  }\n+\n+  private void addToSlidingWindow() {\n+    long currTime = System.currentTimeMillis();\n+    if (largeHeapClusterRca.getFlowUnits().isEmpty()) {\n+      return;\n+    }\n+    ResourceFlowUnit<HotClusterSummary> flowUnit = largeHeapClusterRca.getFlowUnits().get(0);\n+\n+    if (flowUnit.getSummary() == null) {\n+      return;\n+    }\n+    List<HotNodeSummary> hotNodeSummaries = flowUnit.getSummary().getHotNodeSummaryList();\n+    hotNodeSummaries.forEach(hotNodeSummary -> {\n+      NodeKey nodeKey = new NodeKey(hotNodeSummary.getNodeID(), hotNodeSummary.getHostAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxMDEwMw=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODgzMDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/HeapHealthDecider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxMzozNlrOHckNuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMToxMTo0NVrOHduP6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTUxNQ==", "bodyText": "Can you make this and line 43 use a shared static final variable that = 5?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499715515", "createdAt": "2020-10-05T16:13:36Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/HeapHealthDecider.java", "diffHunk": "@@ -31,12 +34,15 @@\n \n   public static final String NAME = \"HeapHealthDecider\";\n   private final OldGenDecisionPolicy oldGenDecisionPolicy;\n+  private final JvmScaleUpPolicy jvmScaleUpPolicy;\n   private int counter = 0;\n \n-  public HeapHealthDecider(int decisionFrequency, final HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+  public HeapHealthDecider(int decisionFrequency,\n+      final HighHeapUsageClusterRca highHeapUsageClusterRca, LargeHeapClusterRca largeHeapClusterRca) {\n     //TODO : refactor parent class to remove evalIntervalSeconds completely\n     super(5, decisionFrequency);\n     oldGenDecisionPolicy = new OldGenDecisionPolicy(highHeapUsageClusterRca);\n+    jvmScaleUpPolicy = new JvmScaleUpPolicy(largeHeapClusterRca, TimeUnit.DAYS.toSeconds(2) / 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODQ5MA==", "bodyText": "done. <Resolving other comments instead of replying 'done' multiple times>", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500928490", "createdAt": "2020-10-07T11:11:45Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/HeapHealthDecider.java", "diffHunk": "@@ -31,12 +34,15 @@\n \n   public static final String NAME = \"HeapHealthDecider\";\n   private final OldGenDecisionPolicy oldGenDecisionPolicy;\n+  private final JvmScaleUpPolicy jvmScaleUpPolicy;\n   private int counter = 0;\n \n-  public HeapHealthDecider(int decisionFrequency, final HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+  public HeapHealthDecider(int decisionFrequency,\n+      final HighHeapUsageClusterRca highHeapUsageClusterRca, LargeHeapClusterRca largeHeapClusterRca) {\n     //TODO : refactor parent class to remove evalIntervalSeconds completely\n     super(5, decisionFrequency);\n     oldGenDecisionPolicy = new OldGenDecisionPolicy(highHeapUsageClusterRca);\n+    jvmScaleUpPolicy = new JvmScaleUpPolicy(largeHeapClusterRca, TimeUnit.DAYS.toSeconds(2) / 5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTUxNQ=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODgzMzAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HighOldGenOccupancyRcaConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNDoxM1rOHckPTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNDoxM1rOHckPTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNTkxNw==", "bodyText": "nit: newline at end of file", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499715917", "createdAt": "2020-10-05T16:14:13Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HighOldGenOccupancyRcaConfig.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+\n+public class HighOldGenOccupancyRcaConfig {\n+\n+  private static final String RCA_NAME = \"HighOldGenOccupancyRca\";\n+  public static final long DEFAULT_UTILIZATION = 75;\n+  public static final long DEFAULT_EVALUATION_INTERVAL_IN_S = 60;\n+  private final Long heapUtilizationThreshold;\n+\n+  private final long evaluationIntervalInS;\n+\n+  public HighOldGenOccupancyRcaConfig(final RcaConf conf) {\n+    this.evaluationIntervalInS = conf.readRcaConfig(RCA_NAME,\n+        HighOldGenOccupancyRcaConfigKeys.EVALUATION_INTERVAL_IN_S.toString(),\n+        DEFAULT_EVALUATION_INTERVAL_IN_S, Long.class);\n+\n+    this.heapUtilizationThreshold = conf\n+        .readRcaConfig(RCA_NAME, HighOldGenOccupancyRcaConfigKeys.HEAP_UTILIZATION_THRESHOLD\n+            .toString(), DEFAULT_UTILIZATION, Long.class);\n+  }\n+\n+  enum HighOldGenOccupancyRcaConfigKeys {\n+    HEAP_UTILIZATION_THRESHOLD(\"heap-utilization-threshold\"),\n+    EVALUATION_INTERVAL_IN_S(\"eval-interval-in-s\");\n+\n+    private final String value;\n+\n+    HighOldGenOccupancyRcaConfigKeys(final String value) {\n+      this.value = value;\n+    }\n+\n+\n+    @Override\n+    public String toString() {\n+      return this.value;\n+    }\n+\n+  }\n+\n+  public Long getHeapUtilizationThreshold() {\n+    return heapUtilizationThreshold;\n+  }\n+\n+  public long getEvaluationIntervalInS() {\n+    return evaluationIntervalInS;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODgzMzk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNDoyNlrOHckP1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNDoyNlrOHckP1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNjA1Mw==", "bodyText": "Add preamble", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499716053", "createdAt": "2020-10-05T16:14:26Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODgzNTM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNDo0M1rOHckQng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNDo0M1rOHckQng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNjI1NA==", "bodyText": "Add preamble", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499716254", "createdAt": "2020-10-05T16:14:43Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/SizeUpJvmAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg0MTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/JvmScaleUpPolicyConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNjowNVrOHckUJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoxNjowNVrOHckUJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcxNzE1OQ==", "bodyText": "Add preamble", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499717159", "createdAt": "2020-10-05T16:16:05Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/JvmScaleUpPolicyConfig.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg2OTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMzowNVrOHcklcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMzowNVrOHcklcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMTU4NQ==", "bodyText": "Remove?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499721585", "createdAt": "2020-10-05T16:23:05Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -298,6 +322,7 @@ private void constructShardResourceUsageGraph() {\n     Metric cpuUtilization = new CPU_Utilization(EVALUATION_INTERVAL_SECONDS);\n     Metric ioTotThroughput = new IO_TotThroughput(EVALUATION_INTERVAL_SECONDS);\n     Metric ioTotSyscallRate = new IO_TotalSyscallRate(EVALUATION_INTERVAL_SECONDS);\n+    new File(\"/\").getTotalSpace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODg3MjE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMzo1OVrOHcknYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjoyMzo1OVrOHcknYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyMjA4MA==", "bodyText": "nit: can we have a static variable called EVERY_MINUTE or something for this 12?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499722080", "createdAt": "2020-10-05T16:23:59Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -172,8 +177,27 @@ public void construct() {\n     hotNodeClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n     hotNodeClusterRca.addAllUpstreams(Collections.singletonList(hotJVMNodeRca));\n \n+    final HighOldGenOccupancyRca oldGenOccupancyRca = new HighOldGenOccupancyRca(heapMax, heapUsed);\n+    oldGenOccupancyRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    oldGenOccupancyRca.addAllUpstreams(Arrays.asList(heapMax, heapUsed));\n+\n+    final OldGenReclamationRca oldGenReclamationRca = new OldGenReclamationRca(heapUsed,\n+        heapMax, gcEvent);\n+    oldGenReclamationRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    oldGenReclamationRca.addAllUpstreams(Arrays.asList(heapUsed, heapMax, gcEvent));\n+\n+    final OldGenContendedRca oldGenContendedRca = new OldGenContendedRca(oldGenOccupancyRca,\n+        oldGenReclamationRca);\n+    oldGenContendedRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n+    oldGenContendedRca.addAllUpstreams(Arrays.asList(oldGenOccupancyRca, oldGenReclamationRca));\n+\n+    final LargeHeapClusterRca largeHeapClusterRca = new LargeHeapClusterRca(oldGenContendedRca);\n+    largeHeapClusterRca.addTag(TAG_LOCUS, LOCUS_MASTER_NODE);\n+    largeHeapClusterRca.addAllUpstreams(Collections.singletonList(oldGenContendedRca));\n+    largeHeapClusterRca.addTag(TAG_AGGREGATE_UPSTREAM, LOCUS_DATA_NODE);\n+\n     // Heap Health Decider\n-    HeapHealthDecider heapHealthDecider = new HeapHealthDecider(12, highHeapUsageClusterRca);\n+    HeapHealthDecider heapHealthDecider = new HeapHealthDecider(12, highHeapUsageClusterRca, largeHeapClusterRca);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODkyMjIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/LargeHeapClusterRca.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozODowMlrOHclHfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozODowMlrOHclHfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMDMwMw==", "bodyText": "Add preamble", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499730303", "createdAt": "2020-10-05T16:38:02Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/LargeHeapClusterRca.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk0ODIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/LargeHeapClusterRca.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0NTowNFrOHclXpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjo1Nzo0MVrOHc4Xng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNDQzNg==", "bodyText": "You check UNHEALTHY here but you set CONTENDED in the RCA", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499734436", "createdAt": "2020-10-05T16:45:04Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/LargeHeapClusterRca.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LargeHeapClusterRca extends Rca<ResourceFlowUnit<HotClusterSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(LargeHeapClusterRca.class);\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+\n+  private Rca<ResourceFlowUnit<HotNodeSummary>> oldGenContendedRca;\n+\n+  public LargeHeapClusterRca(final Rca<ResourceFlowUnit<HotNodeSummary>> oldGenContendedRca) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.oldGenContendedRca = oldGenContendedRca;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire is not supported on the\"\n+        + \" node-local RCA: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotClusterSummary> operate() {\n+    List<ResourceFlowUnit<HotNodeSummary>> oldGenContendedFlowUnits = oldGenContendedRca\n+        .getFlowUnits();\n+    List<HotNodeSummary> unhealthyNodeSummaries = new ArrayList<>();\n+    long currTime = System.currentTimeMillis();\n+    for (ResourceFlowUnit<HotNodeSummary> flowUnit : oldGenContendedFlowUnits) {\n+      if (flowUnit.isEmpty()) {\n+        continue;\n+      }\n+\n+      if (flowUnit.getResourceContext().isUnhealthy()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0NTcyNg==", "bodyText": "isUnhealthy checks for both contended and unhealthy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500045726", "createdAt": "2020-10-06T06:57:41Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/LargeHeapClusterRca.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class LargeHeapClusterRca extends Rca<ResourceFlowUnit<HotClusterSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(LargeHeapClusterRca.class);\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+\n+  private Rca<ResourceFlowUnit<HotNodeSummary>> oldGenContendedRca;\n+\n+  public LargeHeapClusterRca(final Rca<ResourceFlowUnit<HotNodeSummary>> oldGenContendedRca) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.oldGenContendedRca = oldGenContendedRca;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire is not supported on the\"\n+        + \" node-local RCA: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotClusterSummary> operate() {\n+    List<ResourceFlowUnit<HotNodeSummary>> oldGenContendedFlowUnits = oldGenContendedRca\n+        .getFlowUnits();\n+    List<HotNodeSummary> unhealthyNodeSummaries = new ArrayList<>();\n+    long currTime = System.currentTimeMillis();\n+    for (ResourceFlowUnit<HotNodeSummary> flowUnit : oldGenContendedFlowUnits) {\n+      if (flowUnit.isEmpty()) {\n+        continue;\n+      }\n+\n+      if (flowUnit.getResourceContext().isUnhealthy()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNDQzNg=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk1NzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0Nzo0M1rOHcldkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMToxNDoyMVrOHduVHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTk1NQ==", "bodyText": "nit: I think we need a ConversionUtil class at this point", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499735955", "createdAt": "2020-10-05T16:47:43Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyOTgyMQ==", "bodyText": "I've tried to eliminate redundant definitions of the same constant, so you should see less of these in this PR, but as a general codebase hygiene I agree, we should create a Util class for this as a separate PR.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500929821", "createdAt": "2020-10-07T11:14:21Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTk1NQ=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk3NjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1Mjo1NFrOHclpgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1Mjo1NFrOHclpgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczOTAxMQ==", "bodyText": "nit: use parentheses for order of operations", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499739011", "createdAt": "2020-10-05T16:52:54Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;\n+\n+  private final MinOldGenSlidingWindow minOldGenSlidingWindow;\n+  private final SlidingWindow<SlidingWindowData> gcEventsSlidingWindow;\n+\n+  private Metric heapUsed;\n+  private Metric gcEvent;\n+  private Metric heapMax;\n+  private HotResourceSummary prevSummary;\n+  private ResourceContext prevContext;\n+  private double targetHeapUtilizationAfterGc;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaPeriod;\n+  private int samples;\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent) {\n+    this(heapUsed, heapMax, gcEvent, DEFAULT_TARGET_UTILIZATION_AFTER_GC,\n+        DEFAULT_RCA_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent,\n+      final double targetHeapUtilizationAfterGc, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.heapUsed = heapUsed;\n+    this.gcEvent = gcEvent;\n+    this.heapMax = heapMax;\n+    this.targetHeapUtilizationAfterGc = targetHeapUtilizationAfterGc;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaPeriod = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+    this.minOldGenSlidingWindow = new MinOldGenSlidingWindow(1, TimeUnit.MINUTES);\n+    this.gcEventsSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.prevContext = new ResourceContext(State.UNKNOWN);\n+    this.prevSummary = null;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    double oldGenMax = getOldGenValueForMetric(heapMax);\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double gcEvents = getGcEvents();\n+    long currTime = System.currentTimeMillis();\n+    minOldGenSlidingWindow.next(new SlidingWindowData(currTime, oldGenUsed));\n+    gcEventsSlidingWindow.next(new SlidingWindowData(currTime, gcEvents));\n+\n+    if (samples == rcaPeriod) {\n+      samples = 0;\n+      double events = gcEventsSlidingWindow.readSum();\n+      if (events >= 1) {\n+        double threshold = targetHeapUtilizationAfterGc / 100d * oldGenMax;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk4OTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1NjozMlrOHclxtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzo0NTowOVrOHeJTMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MTEwOQ==", "bodyText": "readMin() is O(1) but calling it twice isn't threadsafe. Save the result in a variable and use it in lines 88 and 90 and 96", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499741109", "createdAt": "2020-10-05T16:56:32Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;\n+\n+  private final MinOldGenSlidingWindow minOldGenSlidingWindow;\n+  private final SlidingWindow<SlidingWindowData> gcEventsSlidingWindow;\n+\n+  private Metric heapUsed;\n+  private Metric gcEvent;\n+  private Metric heapMax;\n+  private HotResourceSummary prevSummary;\n+  private ResourceContext prevContext;\n+  private double targetHeapUtilizationAfterGc;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaPeriod;\n+  private int samples;\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent) {\n+    this(heapUsed, heapMax, gcEvent, DEFAULT_TARGET_UTILIZATION_AFTER_GC,\n+        DEFAULT_RCA_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent,\n+      final double targetHeapUtilizationAfterGc, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.heapUsed = heapUsed;\n+    this.gcEvent = gcEvent;\n+    this.heapMax = heapMax;\n+    this.targetHeapUtilizationAfterGc = targetHeapUtilizationAfterGc;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaPeriod = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+    this.minOldGenSlidingWindow = new MinOldGenSlidingWindow(1, TimeUnit.MINUTES);\n+    this.gcEventsSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.prevContext = new ResourceContext(State.UNKNOWN);\n+    this.prevSummary = null;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    double oldGenMax = getOldGenValueForMetric(heapMax);\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double gcEvents = getGcEvents();\n+    long currTime = System.currentTimeMillis();\n+    minOldGenSlidingWindow.next(new SlidingWindowData(currTime, oldGenUsed));\n+    gcEventsSlidingWindow.next(new SlidingWindowData(currTime, gcEvents));\n+\n+    if (samples == rcaPeriod) {\n+      samples = 0;\n+      double events = gcEventsSlidingWindow.readSum();\n+      if (events >= 1) {\n+        double threshold = targetHeapUtilizationAfterGc / 100d * oldGenMax;\n+        HotResourceSummary summary = null;\n+        ResourceContext context = null;\n+        if (minOldGenSlidingWindow.readMin() > threshold) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNTcxNA==", "bodyText": "The operate method will only be called from one thread, so next(E e) and readMin() always happen in the right order. Multiple threads don't concurrently call this method. Not sure where the thread safety issue is arising from. I don't think we are sharing any static state too in the min sliding window class. Where are you seeing such inconsistencies?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500935714", "createdAt": "2020-10-07T11:25:49Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;\n+\n+  private final MinOldGenSlidingWindow minOldGenSlidingWindow;\n+  private final SlidingWindow<SlidingWindowData> gcEventsSlidingWindow;\n+\n+  private Metric heapUsed;\n+  private Metric gcEvent;\n+  private Metric heapMax;\n+  private HotResourceSummary prevSummary;\n+  private ResourceContext prevContext;\n+  private double targetHeapUtilizationAfterGc;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaPeriod;\n+  private int samples;\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent) {\n+    this(heapUsed, heapMax, gcEvent, DEFAULT_TARGET_UTILIZATION_AFTER_GC,\n+        DEFAULT_RCA_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent,\n+      final double targetHeapUtilizationAfterGc, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.heapUsed = heapUsed;\n+    this.gcEvent = gcEvent;\n+    this.heapMax = heapMax;\n+    this.targetHeapUtilizationAfterGc = targetHeapUtilizationAfterGc;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaPeriod = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+    this.minOldGenSlidingWindow = new MinOldGenSlidingWindow(1, TimeUnit.MINUTES);\n+    this.gcEventsSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.prevContext = new ResourceContext(State.UNKNOWN);\n+    this.prevSummary = null;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    double oldGenMax = getOldGenValueForMetric(heapMax);\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double gcEvents = getGcEvents();\n+    long currTime = System.currentTimeMillis();\n+    minOldGenSlidingWindow.next(new SlidingWindowData(currTime, oldGenUsed));\n+    gcEventsSlidingWindow.next(new SlidingWindowData(currTime, gcEvents));\n+\n+    if (samples == rcaPeriod) {\n+      samples = 0;\n+      double events = gcEventsSlidingWindow.readSum();\n+      if (events >= 1) {\n+        double threshold = targetHeapUtilizationAfterGc / 100d * oldGenMax;\n+        HotResourceSummary summary = null;\n+        ResourceContext context = null;\n+        if (minOldGenSlidingWindow.readMin() > threshold) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MTEwOQ=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3MTY5OQ==", "bodyText": "If anyone else modifies minOldGenSlidingWindow, or it's backed by an implementation that removes entries on a schedule instead of a write, this may be inconsistent.\nIt isn't inconsistent right now, so I won't block on this, but it's a pretty simple fix.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r501371699", "createdAt": "2020-10-07T23:45:09Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;\n+\n+  private final MinOldGenSlidingWindow minOldGenSlidingWindow;\n+  private final SlidingWindow<SlidingWindowData> gcEventsSlidingWindow;\n+\n+  private Metric heapUsed;\n+  private Metric gcEvent;\n+  private Metric heapMax;\n+  private HotResourceSummary prevSummary;\n+  private ResourceContext prevContext;\n+  private double targetHeapUtilizationAfterGc;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaPeriod;\n+  private int samples;\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent) {\n+    this(heapUsed, heapMax, gcEvent, DEFAULT_TARGET_UTILIZATION_AFTER_GC,\n+        DEFAULT_RCA_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent,\n+      final double targetHeapUtilizationAfterGc, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.heapUsed = heapUsed;\n+    this.gcEvent = gcEvent;\n+    this.heapMax = heapMax;\n+    this.targetHeapUtilizationAfterGc = targetHeapUtilizationAfterGc;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaPeriod = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+    this.minOldGenSlidingWindow = new MinOldGenSlidingWindow(1, TimeUnit.MINUTES);\n+    this.gcEventsSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.prevContext = new ResourceContext(State.UNKNOWN);\n+    this.prevSummary = null;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    double oldGenMax = getOldGenValueForMetric(heapMax);\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double gcEvents = getGcEvents();\n+    long currTime = System.currentTimeMillis();\n+    minOldGenSlidingWindow.next(new SlidingWindowData(currTime, oldGenUsed));\n+    gcEventsSlidingWindow.next(new SlidingWindowData(currTime, gcEvents));\n+\n+    if (samples == rcaPeriod) {\n+      samples = 0;\n+      double events = gcEventsSlidingWindow.readSum();\n+      if (events >= 1) {\n+        double threshold = targetHeapUtilizationAfterGc / 100d * oldGenMax;\n+        HotResourceSummary summary = null;\n+        ResourceContext context = null;\n+        if (minOldGenSlidingWindow.readMin() > threshold) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MTEwOQ=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODk5OTg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1OToxNFrOHcl3yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo1OToxNFrOHcl3yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0MjY2NQ==", "bodyText": "I don't know what this 60 means, can you create a variable for it?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499742665", "createdAt": "2020-10-05T16:59:14Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;\n+\n+  private final MinOldGenSlidingWindow minOldGenSlidingWindow;\n+  private final SlidingWindow<SlidingWindowData> gcEventsSlidingWindow;\n+\n+  private Metric heapUsed;\n+  private Metric gcEvent;\n+  private Metric heapMax;\n+  private HotResourceSummary prevSummary;\n+  private ResourceContext prevContext;\n+  private double targetHeapUtilizationAfterGc;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaPeriod;\n+  private int samples;\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent) {\n+    this(heapUsed, heapMax, gcEvent, DEFAULT_TARGET_UTILIZATION_AFTER_GC,\n+        DEFAULT_RCA_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent,\n+      final double targetHeapUtilizationAfterGc, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.heapUsed = heapUsed;\n+    this.gcEvent = gcEvent;\n+    this.heapMax = heapMax;\n+    this.targetHeapUtilizationAfterGc = targetHeapUtilizationAfterGc;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaPeriod = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+    this.minOldGenSlidingWindow = new MinOldGenSlidingWindow(1, TimeUnit.MINUTES);\n+    this.gcEventsSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.prevContext = new ResourceContext(State.UNKNOWN);\n+    this.prevSummary = null;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    double oldGenMax = getOldGenValueForMetric(heapMax);\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double gcEvents = getGcEvents();\n+    long currTime = System.currentTimeMillis();\n+    minOldGenSlidingWindow.next(new SlidingWindowData(currTime, oldGenUsed));\n+    gcEventsSlidingWindow.next(new SlidingWindowData(currTime, gcEvents));\n+\n+    if (samples == rcaPeriod) {\n+      samples = 0;\n+      double events = gcEventsSlidingWindow.readSum();\n+      if (events >= 1) {\n+        double threshold = targetHeapUtilizationAfterGc / 100d * oldGenMax;\n+        HotResourceSummary summary = null;\n+        ResourceContext context = null;\n+        if (minOldGenSlidingWindow.readMin() > threshold) {\n+          summary = new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS,\n+              targetHeapUtilizationAfterGc, minOldGenSlidingWindow.readMin(), 60);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAwNjU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMToxM1rOHcl8NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMToyOToxNFrOHduzIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0Mzc5Ng==", "bodyText": "These two functions are really useful. Can you move them into a MetricUtil class so that they can be reused?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499743796", "createdAt": "2020-10-05T17:01:13Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;\n+\n+  private final MinOldGenSlidingWindow minOldGenSlidingWindow;\n+  private final SlidingWindow<SlidingWindowData> gcEventsSlidingWindow;\n+\n+  private Metric heapUsed;\n+  private Metric gcEvent;\n+  private Metric heapMax;\n+  private HotResourceSummary prevSummary;\n+  private ResourceContext prevContext;\n+  private double targetHeapUtilizationAfterGc;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaPeriod;\n+  private int samples;\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent) {\n+    this(heapUsed, heapMax, gcEvent, DEFAULT_TARGET_UTILIZATION_AFTER_GC,\n+        DEFAULT_RCA_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent,\n+      final double targetHeapUtilizationAfterGc, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.heapUsed = heapUsed;\n+    this.gcEvent = gcEvent;\n+    this.heapMax = heapMax;\n+    this.targetHeapUtilizationAfterGc = targetHeapUtilizationAfterGc;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaPeriod = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+    this.minOldGenSlidingWindow = new MinOldGenSlidingWindow(1, TimeUnit.MINUTES);\n+    this.gcEventsSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.prevContext = new ResourceContext(State.UNKNOWN);\n+    this.prevSummary = null;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    double oldGenMax = getOldGenValueForMetric(heapMax);\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double gcEvents = getGcEvents();\n+    long currTime = System.currentTimeMillis();\n+    minOldGenSlidingWindow.next(new SlidingWindowData(currTime, oldGenUsed));\n+    gcEventsSlidingWindow.next(new SlidingWindowData(currTime, gcEvents));\n+\n+    if (samples == rcaPeriod) {\n+      samples = 0;\n+      double events = gcEventsSlidingWindow.readSum();\n+      if (events >= 1) {\n+        double threshold = targetHeapUtilizationAfterGc / 100d * oldGenMax;\n+        HotResourceSummary summary = null;\n+        ResourceContext context = null;\n+        if (minOldGenSlidingWindow.readMin() > threshold) {\n+          summary = new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS,\n+              targetHeapUtilizationAfterGc, minOldGenSlidingWindow.readMin(), 60);\n+          context = new ResourceContext(State.UNHEALTHY);\n+\n+          return new ResourceFlowUnit<>(currTime, context, summary);\n+        } else {\n+          summary = new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS,\n+              targetHeapUtilizationAfterGc, minOldGenSlidingWindow.readMin(), 60);\n+          context = new ResourceContext(State.HEALTHY);\n+        }\n+\n+        prevSummary = summary;\n+        prevContext = context;\n+\n+        return new ResourceFlowUnit<>(currTime, context, summary);\n+      }\n+    }\n+\n+    return new ResourceFlowUnit<>(currTime, prevContext, prevSummary);\n+  }\n+\n+  private double getGcEvents() {\n+    List<MetricFlowUnit> gcEventMetricFlowUnits = gcEvent.getFlowUnits();\n+    double metricValue = 0d;\n+    for (final MetricFlowUnit gcEventMetricFlowUnit : gcEventMetricFlowUnits) {\n+      if (gcEventMetricFlowUnit.isEmpty()) {\n+        continue;\n+      }\n+\n+      double ret = SQLParsingUtil.readDataFromSqlResult(gcEventMetricFlowUnit.getData(),\n+          MEM_TYPE.getField(),\n+          TOT_FULL_GC.toString(), MetricsDB.MAX);\n+      if (!Double.isNaN(ret)) {\n+        metricValue = ret;\n+      }\n+    }\n+\n+    return metricValue;\n+  }\n+\n+  private double getOldGenValueForMetric(Metric heapMetric) {\n+    List<MetricFlowUnit> heapMetricFlowUnits = heapMetric.getFlowUnits();\n+    double metricValue = 0d;\n+    for (final MetricFlowUnit heapMetricFlowUnit : heapMetricFlowUnits) {\n+      if (heapMetricFlowUnit.isEmpty()) {\n+        continue;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzNzUwNA==", "bodyText": "Instead of putting them in a static class, I've reduced duplication by abstracting these old gen related methods into an abstract class OldGenRca from which other old gen profiling RCAs extend.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500937504", "createdAt": "2020-10-07T11:29:14Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;\n+\n+  private final MinOldGenSlidingWindow minOldGenSlidingWindow;\n+  private final SlidingWindow<SlidingWindowData> gcEventsSlidingWindow;\n+\n+  private Metric heapUsed;\n+  private Metric gcEvent;\n+  private Metric heapMax;\n+  private HotResourceSummary prevSummary;\n+  private ResourceContext prevContext;\n+  private double targetHeapUtilizationAfterGc;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaPeriod;\n+  private int samples;\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent) {\n+    this(heapUsed, heapMax, gcEvent, DEFAULT_TARGET_UTILIZATION_AFTER_GC,\n+        DEFAULT_RCA_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent,\n+      final double targetHeapUtilizationAfterGc, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.heapUsed = heapUsed;\n+    this.gcEvent = gcEvent;\n+    this.heapMax = heapMax;\n+    this.targetHeapUtilizationAfterGc = targetHeapUtilizationAfterGc;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaPeriod = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+    this.minOldGenSlidingWindow = new MinOldGenSlidingWindow(1, TimeUnit.MINUTES);\n+    this.gcEventsSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.prevContext = new ResourceContext(State.UNKNOWN);\n+    this.prevSummary = null;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    double oldGenMax = getOldGenValueForMetric(heapMax);\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double gcEvents = getGcEvents();\n+    long currTime = System.currentTimeMillis();\n+    minOldGenSlidingWindow.next(new SlidingWindowData(currTime, oldGenUsed));\n+    gcEventsSlidingWindow.next(new SlidingWindowData(currTime, gcEvents));\n+\n+    if (samples == rcaPeriod) {\n+      samples = 0;\n+      double events = gcEventsSlidingWindow.readSum();\n+      if (events >= 1) {\n+        double threshold = targetHeapUtilizationAfterGc / 100d * oldGenMax;\n+        HotResourceSummary summary = null;\n+        ResourceContext context = null;\n+        if (minOldGenSlidingWindow.readMin() > threshold) {\n+          summary = new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS,\n+              targetHeapUtilizationAfterGc, minOldGenSlidingWindow.readMin(), 60);\n+          context = new ResourceContext(State.UNHEALTHY);\n+\n+          return new ResourceFlowUnit<>(currTime, context, summary);\n+        } else {\n+          summary = new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS,\n+              targetHeapUtilizationAfterGc, minOldGenSlidingWindow.readMin(), 60);\n+          context = new ResourceContext(State.HEALTHY);\n+        }\n+\n+        prevSummary = summary;\n+        prevContext = context;\n+\n+        return new ResourceFlowUnit<>(currTime, context, summary);\n+      }\n+    }\n+\n+    return new ResourceFlowUnit<>(currTime, prevContext, prevSummary);\n+  }\n+\n+  private double getGcEvents() {\n+    List<MetricFlowUnit> gcEventMetricFlowUnits = gcEvent.getFlowUnits();\n+    double metricValue = 0d;\n+    for (final MetricFlowUnit gcEventMetricFlowUnit : gcEventMetricFlowUnits) {\n+      if (gcEventMetricFlowUnit.isEmpty()) {\n+        continue;\n+      }\n+\n+      double ret = SQLParsingUtil.readDataFromSqlResult(gcEventMetricFlowUnit.getData(),\n+          MEM_TYPE.getField(),\n+          TOT_FULL_GC.toString(), MetricsDB.MAX);\n+      if (!Double.isNaN(ret)) {\n+        metricValue = ret;\n+      }\n+    }\n+\n+    return metricValue;\n+  }\n+\n+  private double getOldGenValueForMetric(Metric heapMetric) {\n+    List<MetricFlowUnit> heapMetricFlowUnits = heapMetric.getFlowUnits();\n+    double metricValue = 0d;\n+    for (final MetricFlowUnit heapMetricFlowUnit : heapMetricFlowUnits) {\n+      if (heapMetricFlowUnit.isEmpty()) {\n+        continue;\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0Mzc5Ng=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAxMDgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowMjozNVrOHcl-4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTozMTo0NlrOHdu4hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NDQ4MQ==", "bodyText": "I get that this is a guess, but isn't the default for CMS to run at 75%? Should we set the default slightly lower to 70?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499744481", "createdAt": "2020-10-05T17:02:35Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzODg4Nw==", "bodyText": "I intentionally set it to the same value as the CMS threshold. My idea was to see how many times we end up with an ineffective collection where even after the collection ends, we still are above the threshold(so that CMS schedules another collection in the future)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500938887", "createdAt": "2020-10-07T11:31:46Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NDQ4MQ=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAxNzg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/HighOldGenOccupancyRca.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowNDozN1rOHcmDZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowNDozN1rOHcmDZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NTYzNw==", "bodyText": "A MetricUtil class for queries of this form would be great", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499745637", "createdAt": "2020-10-05T17:04:37Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/HighOldGenOccupancyRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HighOldGenOccupancyRcaConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class HighOldGenOccupancyRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(HighOldGenOccupancyRca.class);\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final int B_TO_MB = 1024 * 1024;\n+\n+  private final Metric heapUsed;\n+  private final Metric heapMax;\n+  private final SlidingWindow<SlidingWindowData> oldGenUtilizationSlidingWindow;\n+\n+  private long heapUtilizationThreshold;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaSamplesBeforeEval;\n+  private long samples;\n+\n+  /**\n+   * Create HighOldGenOccupancyRca with default values.\n+   * @param heapMax The heapMax metric.\n+   * @param heapUsed The heapUsed metric.\n+   */\n+  public HighOldGenOccupancyRca(final Metric heapMax, final Metric heapUsed) {\n+    this(heapMax, heapUsed, HighOldGenOccupancyRcaConfig.DEFAULT_UTILIZATION,\n+        HighOldGenOccupancyRcaConfig.DEFAULT_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public HighOldGenOccupancyRca(final Metric heapMax, final Metric heapUsed,\n+      final long heapUtilizationThreshold, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.oldGenUtilizationSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.heapUsed = heapUsed;\n+    this.heapMax = heapMax;\n+    this.heapUtilizationThreshold = heapUtilizationThreshold;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaSamplesBeforeEval = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    addToSlidingWindow();\n+    if (samples == rcaSamplesBeforeEval) {\n+      samples = 0;\n+      return evaluateAndEmit();\n+    }\n+\n+    return new ResourceFlowUnit<>(System.currentTimeMillis());\n+  }\n+\n+  private ResourceFlowUnit<HotResourceSummary> evaluateAndEmit() {\n+    long currTime = System.currentTimeMillis();\n+    double averageUtilizationPercentage = oldGenUtilizationSlidingWindow.readAvg();\n+    ResourceContext context = new ResourceContext(State.HEALTHY);\n+    HotResourceSummary summary = new HotResourceSummary(ResourceUtil.OLD_GEN_HEAP_USAGE,\n+        (double)heapUtilizationThreshold,\n+        averageUtilizationPercentage, (int)rcaEvaluationIntervalInS);\n+    if (averageUtilizationPercentage >= heapUtilizationThreshold) {\n+      context = new ResourceContext(State.UNHEALTHY);\n+    }\n+    return new ResourceFlowUnit<>(currTime, context, summary);\n+  }\n+\n+  private void addToSlidingWindow() {\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double maxOldGen = getOldGenValueForMetric(heapMax);\n+\n+    if (maxOldGen == 0d) {\n+      LOG.info(\"Max Old Gen capacity cannot be 0. Skipping.\");\n+    }\n+\n+    this.oldGenUtilizationSlidingWindow.next(new SlidingWindowData(System.currentTimeMillis(),\n+        oldGenUsed / maxOldGen * 100d));\n+  }\n+\n+  private double getOldGenValueForMetric(Metric heapMetric) {\n+    List<MetricFlowUnit> heapMetricFlowUnits = heapMetric.getFlowUnits();\n+    double metricValue = 0d;\n+    for (final MetricFlowUnit heapMetricFlowUnit : heapMetricFlowUnits) {\n+      if (heapMetricFlowUnit.isEmpty()) {\n+        continue;\n+      }\n+\n+      double ret = SQLParsingUtil.readDataFromSqlResult(heapMetricFlowUnit.getData(),\n+          MEM_TYPE.getField(),\n+          OLD_GEN.toString(), MetricsDB.MAX);\n+      if (!Double.isNaN(ret)) {\n+        metricValue = ret / B_TO_MB;\n+      }\n+    }\n+\n+    return metricValue;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTAyMzI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/HighOldGenOccupancyRca.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzowNjoxNFrOHcmGzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTozMzo0NFrOHdu8bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NjUwOA==", "bodyText": "nit: parentheses for order of operations instead of relying on L to R evaluation", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r499746508", "createdAt": "2020-10-05T17:06:14Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/HighOldGenOccupancyRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HighOldGenOccupancyRcaConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class HighOldGenOccupancyRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(HighOldGenOccupancyRca.class);\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final int B_TO_MB = 1024 * 1024;\n+\n+  private final Metric heapUsed;\n+  private final Metric heapMax;\n+  private final SlidingWindow<SlidingWindowData> oldGenUtilizationSlidingWindow;\n+\n+  private long heapUtilizationThreshold;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaSamplesBeforeEval;\n+  private long samples;\n+\n+  /**\n+   * Create HighOldGenOccupancyRca with default values.\n+   * @param heapMax The heapMax metric.\n+   * @param heapUsed The heapUsed metric.\n+   */\n+  public HighOldGenOccupancyRca(final Metric heapMax, final Metric heapUsed) {\n+    this(heapMax, heapUsed, HighOldGenOccupancyRcaConfig.DEFAULT_UTILIZATION,\n+        HighOldGenOccupancyRcaConfig.DEFAULT_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public HighOldGenOccupancyRca(final Metric heapMax, final Metric heapUsed,\n+      final long heapUtilizationThreshold, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.oldGenUtilizationSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.heapUsed = heapUsed;\n+    this.heapMax = heapMax;\n+    this.heapUtilizationThreshold = heapUtilizationThreshold;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaSamplesBeforeEval = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    addToSlidingWindow();\n+    if (samples == rcaSamplesBeforeEval) {\n+      samples = 0;\n+      return evaluateAndEmit();\n+    }\n+\n+    return new ResourceFlowUnit<>(System.currentTimeMillis());\n+  }\n+\n+  private ResourceFlowUnit<HotResourceSummary> evaluateAndEmit() {\n+    long currTime = System.currentTimeMillis();\n+    double averageUtilizationPercentage = oldGenUtilizationSlidingWindow.readAvg();\n+    ResourceContext context = new ResourceContext(State.HEALTHY);\n+    HotResourceSummary summary = new HotResourceSummary(ResourceUtil.OLD_GEN_HEAP_USAGE,\n+        (double)heapUtilizationThreshold,\n+        averageUtilizationPercentage, (int)rcaEvaluationIntervalInS);\n+    if (averageUtilizationPercentage >= heapUtilizationThreshold) {\n+      context = new ResourceContext(State.UNHEALTHY);\n+    }\n+    return new ResourceFlowUnit<>(currTime, context, summary);\n+  }\n+\n+  private void addToSlidingWindow() {\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double maxOldGen = getOldGenValueForMetric(heapMax);\n+\n+    if (maxOldGen == 0d) {\n+      LOG.info(\"Max Old Gen capacity cannot be 0. Skipping.\");\n+    }\n+\n+    this.oldGenUtilizationSlidingWindow.next(new SlidingWindowData(System.currentTimeMillis(),\n+        oldGenUsed / maxOldGen * 100d));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0ODI2Nw==", "bodyText": "+1. do we really need the *100 here or should we just work with decimals ( [0,1] values)?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500048267", "createdAt": "2020-10-06T07:03:16Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/HighOldGenOccupancyRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HighOldGenOccupancyRcaConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class HighOldGenOccupancyRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(HighOldGenOccupancyRca.class);\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final int B_TO_MB = 1024 * 1024;\n+\n+  private final Metric heapUsed;\n+  private final Metric heapMax;\n+  private final SlidingWindow<SlidingWindowData> oldGenUtilizationSlidingWindow;\n+\n+  private long heapUtilizationThreshold;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaSamplesBeforeEval;\n+  private long samples;\n+\n+  /**\n+   * Create HighOldGenOccupancyRca with default values.\n+   * @param heapMax The heapMax metric.\n+   * @param heapUsed The heapUsed metric.\n+   */\n+  public HighOldGenOccupancyRca(final Metric heapMax, final Metric heapUsed) {\n+    this(heapMax, heapUsed, HighOldGenOccupancyRcaConfig.DEFAULT_UTILIZATION,\n+        HighOldGenOccupancyRcaConfig.DEFAULT_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public HighOldGenOccupancyRca(final Metric heapMax, final Metric heapUsed,\n+      final long heapUtilizationThreshold, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.oldGenUtilizationSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.heapUsed = heapUsed;\n+    this.heapMax = heapMax;\n+    this.heapUtilizationThreshold = heapUtilizationThreshold;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaSamplesBeforeEval = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    addToSlidingWindow();\n+    if (samples == rcaSamplesBeforeEval) {\n+      samples = 0;\n+      return evaluateAndEmit();\n+    }\n+\n+    return new ResourceFlowUnit<>(System.currentTimeMillis());\n+  }\n+\n+  private ResourceFlowUnit<HotResourceSummary> evaluateAndEmit() {\n+    long currTime = System.currentTimeMillis();\n+    double averageUtilizationPercentage = oldGenUtilizationSlidingWindow.readAvg();\n+    ResourceContext context = new ResourceContext(State.HEALTHY);\n+    HotResourceSummary summary = new HotResourceSummary(ResourceUtil.OLD_GEN_HEAP_USAGE,\n+        (double)heapUtilizationThreshold,\n+        averageUtilizationPercentage, (int)rcaEvaluationIntervalInS);\n+    if (averageUtilizationPercentage >= heapUtilizationThreshold) {\n+      context = new ResourceContext(State.UNHEALTHY);\n+    }\n+    return new ResourceFlowUnit<>(currTime, context, summary);\n+  }\n+\n+  private void addToSlidingWindow() {\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double maxOldGen = getOldGenValueForMetric(heapMax);\n+\n+    if (maxOldGen == 0d) {\n+      LOG.info(\"Max Old Gen capacity cannot be 0. Skipping.\");\n+    }\n+\n+    this.oldGenUtilizationSlidingWindow.next(new SlidingWindowData(System.currentTimeMillis(),\n+        oldGenUsed / maxOldGen * 100d));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NjUwOA=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkzOTg4NA==", "bodyText": "done, but kept the 100 just so that percentage looks normal. This was just a personal preference.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500939884", "createdAt": "2020-10-07T11:33:44Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/HighOldGenOccupancyRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HighOldGenOccupancyRcaConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class HighOldGenOccupancyRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final Logger LOG = LogManager.getLogger(HighOldGenOccupancyRca.class);\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final int B_TO_MB = 1024 * 1024;\n+\n+  private final Metric heapUsed;\n+  private final Metric heapMax;\n+  private final SlidingWindow<SlidingWindowData> oldGenUtilizationSlidingWindow;\n+\n+  private long heapUtilizationThreshold;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaSamplesBeforeEval;\n+  private long samples;\n+\n+  /**\n+   * Create HighOldGenOccupancyRca with default values.\n+   * @param heapMax The heapMax metric.\n+   * @param heapUsed The heapUsed metric.\n+   */\n+  public HighOldGenOccupancyRca(final Metric heapMax, final Metric heapUsed) {\n+    this(heapMax, heapUsed, HighOldGenOccupancyRcaConfig.DEFAULT_UTILIZATION,\n+        HighOldGenOccupancyRcaConfig.DEFAULT_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public HighOldGenOccupancyRca(final Metric heapMax, final Metric heapUsed,\n+      final long heapUtilizationThreshold, final long rcaEvaluationIntervalInS) {\n+    super(EVAL_INTERVAL_IN_S);\n+    this.oldGenUtilizationSlidingWindow = new SlidingWindow<>(1, TimeUnit.MINUTES);\n+    this.heapUsed = heapUsed;\n+    this.heapMax = heapMax;\n+    this.heapUtilizationThreshold = heapUtilizationThreshold;\n+    this.rcaEvaluationIntervalInS = rcaEvaluationIntervalInS;\n+    this.rcaSamplesBeforeEval = rcaEvaluationIntervalInS / EVAL_INTERVAL_IN_S;\n+    this.samples = 0;\n+  }\n+\n+  @Override\n+  public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+    throw new UnsupportedOperationException(\"generateFlowUnitListFromWire should not be called \"\n+        + \"for node-local rca: \" + args.getNode().name());\n+  }\n+\n+  @Override\n+  public ResourceFlowUnit<HotResourceSummary> operate() {\n+    samples++;\n+    addToSlidingWindow();\n+    if (samples == rcaSamplesBeforeEval) {\n+      samples = 0;\n+      return evaluateAndEmit();\n+    }\n+\n+    return new ResourceFlowUnit<>(System.currentTimeMillis());\n+  }\n+\n+  private ResourceFlowUnit<HotResourceSummary> evaluateAndEmit() {\n+    long currTime = System.currentTimeMillis();\n+    double averageUtilizationPercentage = oldGenUtilizationSlidingWindow.readAvg();\n+    ResourceContext context = new ResourceContext(State.HEALTHY);\n+    HotResourceSummary summary = new HotResourceSummary(ResourceUtil.OLD_GEN_HEAP_USAGE,\n+        (double)heapUtilizationThreshold,\n+        averageUtilizationPercentage, (int)rcaEvaluationIntervalInS);\n+    if (averageUtilizationPercentage >= heapUtilizationThreshold) {\n+      context = new ResourceContext(State.UNHEALTHY);\n+    }\n+    return new ResourceFlowUnit<>(currTime, context, summary);\n+  }\n+\n+  private void addToSlidingWindow() {\n+    double oldGenUsed = getOldGenValueForMetric(heapUsed);\n+    double maxOldGen = getOldGenValueForMetric(heapMax);\n+\n+    if (maxOldGen == 0d) {\n+      LOG.info(\"Max Old Gen capacity cannot be 0. Skipping.\");\n+    }\n+\n+    this.oldGenUtilizationSlidingWindow.next(new SlidingWindowData(System.currentTimeMillis(),\n+        oldGenUsed / maxOldGen * 100d));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc0NjUwOA=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDk1NDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNjo1OTozNlrOHc4bEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTozNDozOVrOHdu-Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0NjYwOA==", "bodyText": "cast to double?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500046608", "createdAt": "2020-10-06T06:59:36Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.SizeUpJvmAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmScaleUpPolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private PerNodeSlidingWindow perNodeSlidingWindow;\n+  private long evalFrequency;\n+  private long counter;\n+  private int unhealthyNodePercentage;\n+  private int minimumMinutesUnhealthy;\n+\n+  public JvmScaleUpPolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final long policyEvaluationFrequency) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    this.evalFrequency = policyEvaluationFrequency;\n+    this.counter = 0;\n+    this.perNodeSlidingWindow = new PerNodeSlidingWindow(4, TimeUnit.DAYS);\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    counter++;\n+    addToSlidingWindow();\n+    if (counter == evalFrequency) {\n+      counter = 0;\n+      return evaluateAndEmit();\n+    }\n+\n+    return Collections.emptyList();\n+  }\n+\n+  private void addToSlidingWindow() {\n+    long currTime = System.currentTimeMillis();\n+    if (largeHeapClusterRca.getFlowUnits().isEmpty()) {\n+      return;\n+    }\n+    ResourceFlowUnit<HotClusterSummary> flowUnit = largeHeapClusterRca.getFlowUnits().get(0);\n+\n+    if (flowUnit.getSummary() == null) {\n+      return;\n+    }\n+    List<HotNodeSummary> hotNodeSummaries = flowUnit.getSummary().getHotNodeSummaryList();\n+    hotNodeSummaries.forEach(hotNodeSummary -> {\n+      NodeKey nodeKey = new NodeKey(hotNodeSummary.getNodeID(), hotNodeSummary.getHostAddress());\n+      perNodeSlidingWindow.next(nodeKey, new SlidingWindowData(currTime, 1d));\n+    });\n+  }\n+\n+  private List<Action> evaluateAndEmit() {\n+    List<Action> actions = new ArrayList<>();\n+    int numNodesInCluster = appContext.getAllClusterInstances().size();\n+    int numNodesInClusterUndersizedOldGen = getUnderSizedOldGenCount();\n+\n+    if (numNodesInClusterUndersizedOldGen * 100 / numNodesInCluster >= unhealthyNodePercentage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0MDM3OQ==", "bodyText": "done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500940379", "createdAt": "2020-10-07T11:34:39Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/JvmScaleUpPolicy.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.SizeUpJvmAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class JvmScaleUpPolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private PerNodeSlidingWindow perNodeSlidingWindow;\n+  private long evalFrequency;\n+  private long counter;\n+  private int unhealthyNodePercentage;\n+  private int minimumMinutesUnhealthy;\n+\n+  public JvmScaleUpPolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final long policyEvaluationFrequency) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    this.evalFrequency = policyEvaluationFrequency;\n+    this.counter = 0;\n+    this.perNodeSlidingWindow = new PerNodeSlidingWindow(4, TimeUnit.DAYS);\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    counter++;\n+    addToSlidingWindow();\n+    if (counter == evalFrequency) {\n+      counter = 0;\n+      return evaluateAndEmit();\n+    }\n+\n+    return Collections.emptyList();\n+  }\n+\n+  private void addToSlidingWindow() {\n+    long currTime = System.currentTimeMillis();\n+    if (largeHeapClusterRca.getFlowUnits().isEmpty()) {\n+      return;\n+    }\n+    ResourceFlowUnit<HotClusterSummary> flowUnit = largeHeapClusterRca.getFlowUnits().get(0);\n+\n+    if (flowUnit.getSummary() == null) {\n+      return;\n+    }\n+    List<HotNodeSummary> hotNodeSummaries = flowUnit.getSummary().getHotNodeSummaryList();\n+    hotNodeSummaries.forEach(hotNodeSummary -> {\n+      NodeKey nodeKey = new NodeKey(hotNodeSummary.getNodeID(), hotNodeSummary.getHostAddress());\n+      perNodeSlidingWindow.next(nodeKey, new SlidingWindowData(currTime, 1d));\n+    });\n+  }\n+\n+  private List<Action> evaluateAndEmit() {\n+    List<Action> actions = new ArrayList<>();\n+    int numNodesInCluster = appContext.getAllClusterInstances().size();\n+    int numNodesInClusterUndersizedOldGen = getUnderSizedOldGenCount();\n+\n+    if (numNodesInClusterUndersizedOldGen * 100 / numNodesInCluster >= unhealthyNodePercentage) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA0NjYwOA=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMDk4MDI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwNzowODo0M1rOHc4reA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMTozNDoyNlrOHdu91A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MDgwOA==", "bodyText": "Isn't the HighHeapUsageOldGenRca doing something similar with minOldGenSlidingWindow ? can we reuse flow units from there?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500050808", "createdAt": "2020-10-06T07:08:43Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;\n+\n+  private final MinOldGenSlidingWindow minOldGenSlidingWindow;\n+  private final SlidingWindow<SlidingWindowData> gcEventsSlidingWindow;\n+\n+  private Metric heapUsed;\n+  private Metric gcEvent;\n+  private Metric heapMax;\n+  private HotResourceSummary prevSummary;\n+  private ResourceContext prevContext;\n+  private double targetHeapUtilizationAfterGc;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaPeriod;\n+  private int samples;\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent) {\n+    this(heapUsed, heapMax, gcEvent, DEFAULT_TARGET_UTILIZATION_AFTER_GC,\n+        DEFAULT_RCA_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk0MDI0NA==", "bodyText": "They're similar, but I decided to keep them separate in case one needs to change independently of the other. I've reduced duplication though. Added a base oldgen class that contains common methods used by old gen rcas, like using minOldGenSlidingWindow to get heap usage after gc, and getting max(and used) size for old gen.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r500940244", "createdAt": "2020-10-07T11:34:26Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenReclamationRca.java", "diffHunk": "@@ -0,0 +1,147 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.hotheap.HighHeapUsageOldGenRca.MinOldGenSlidingWindow;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+public class OldGenReclamationRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n+\n+  private static final long EVAL_INTERVAL_IN_S = 5;\n+  private static final double DEFAULT_TARGET_UTILIZATION_AFTER_GC = 75.0d;\n+  private static final long DEFAULT_RCA_EVALUATION_INTERVAL_IN_S = 60;\n+  private static final long B_TO_MB = 1024 * 1024;\n+\n+  private final MinOldGenSlidingWindow minOldGenSlidingWindow;\n+  private final SlidingWindow<SlidingWindowData> gcEventsSlidingWindow;\n+\n+  private Metric heapUsed;\n+  private Metric gcEvent;\n+  private Metric heapMax;\n+  private HotResourceSummary prevSummary;\n+  private ResourceContext prevContext;\n+  private double targetHeapUtilizationAfterGc;\n+  private long rcaEvaluationIntervalInS;\n+  private long rcaPeriod;\n+  private int samples;\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent) {\n+    this(heapUsed, heapMax, gcEvent, DEFAULT_TARGET_UTILIZATION_AFTER_GC,\n+        DEFAULT_RCA_EVALUATION_INTERVAL_IN_S);\n+  }\n+\n+  public OldGenReclamationRca(final Metric heapUsed, final Metric heapMax, final Metric gcEvent,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDA1MDgwOA=="}, "originalCommit": {"oid": "3a293ff61af29d43ceca1fc7b7898ec8ce5cb3dc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODk2MTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDo1NzoyNlrOHeFQVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjo1Mzo1N1rOHfRp2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNTQzMA==", "bodyText": "nit: can just do prevActionList = evaluateAndEmit(); (and just call it actionList)", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r501305430", "createdAt": "2020-10-07T20:57:26Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class HeapSizeIncreasePolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private PerNodeSlidingWindow perNodeSlidingWindow;\n+  private long evalFrequency;\n+  private long counter;\n+  private int unhealthyNodePercentage;\n+  private int minimumMinutesUnhealthy;\n+\n+  private List<Action> prevActionList;\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final long policyEvaluationFrequency) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    this.evalFrequency = policyEvaluationFrequency;\n+    this.counter = 0;\n+    this.perNodeSlidingWindow = new PerNodeSlidingWindow(4, TimeUnit.DAYS);\n+    this.prevActionList = new ArrayList<>();\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    counter++;\n+    addToSlidingWindow();\n+    if (counter == evalFrequency) {\n+      counter = 0;\n+      List<Action> actions = evaluateAndEmit();\n+      prevActionList.clear();\n+      prevActionList.addAll(actions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e423bddbc81b1176154c2b5b0fffeb7fda8ddc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1NzE0Ng==", "bodyText": "Using the alarm monitor now, so I'm not following this pattern anymore, and returning whatever was the evaluation.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502557146", "createdAt": "2020-10-09T16:53:57Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+public class HeapSizeIncreasePolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private PerNodeSlidingWindow perNodeSlidingWindow;\n+  private long evalFrequency;\n+  private long counter;\n+  private int unhealthyNodePercentage;\n+  private int minimumMinutesUnhealthy;\n+\n+  private List<Action> prevActionList;\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final long policyEvaluationFrequency) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    this.evalFrequency = policyEvaluationFrequency;\n+    this.counter = 0;\n+    this.perNodeSlidingWindow = new PerNodeSlidingWindow(4, TimeUnit.DAYS);\n+    this.prevActionList = new ArrayList<>();\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    counter++;\n+    addToSlidingWindow();\n+    if (counter == evalFrequency) {\n+      counter = 0;\n+      List<Action> actions = evaluateAndEmit();\n+      prevActionList.clear();\n+      prevActionList.addAll(actions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNTQzMA=="}, "originalCommit": {"oid": "86e423bddbc81b1176154c2b5b0fffeb7fda8ddc"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODk3ODI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/HeapHealthDecider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTowMjozMFrOHeFazQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjo1NDowNlrOHfRqHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwODEwOQ==", "bodyText": "Are you planning to replace the PerNodeSlidingWindows with JvmActionsAlarmMonitor ? If/when we use that, then we can check for healthy/unhealthy in every cycle instead of once every 2 days. That will let us move to healthy/unhealthy alarm states faster.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r501308109", "createdAt": "2020-10-07T21:02:30Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/HeapHealthDecider.java", "diffHunk": "@@ -20,23 +20,31 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Decider;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Decision;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.old_gen.OldGenDecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing.HeapSizeIncreasePolicy;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n \n /**\n  * decider to bring down heap usage in young gen / old gen\n  */\n public class HeapHealthDecider extends Decider {\n \n+  private static final int EVAL_INTERVAL_IN_S = 5;\n   public static final String NAME = \"HeapHealthDecider\";\n   private final OldGenDecisionPolicy oldGenDecisionPolicy;\n+  private final HeapSizeIncreasePolicy heapSizeIncreasePolicy;\n   private int counter = 0;\n \n-  public HeapHealthDecider(int decisionFrequency, final HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+  public HeapHealthDecider(int decisionFrequency,\n+      final HighHeapUsageClusterRca highHeapUsageClusterRca, LargeHeapClusterRca largeHeapClusterRca) {\n     //TODO : refactor parent class to remove evalIntervalSeconds completely\n-    super(5, decisionFrequency);\n+    super(EVAL_INTERVAL_IN_S, decisionFrequency);\n     oldGenDecisionPolicy = new OldGenDecisionPolicy(highHeapUsageClusterRca);\n+    heapSizeIncreasePolicy = new HeapSizeIncreasePolicy(largeHeapClusterRca,\n+        TimeUnit.DAYS.toSeconds(2) / EVAL_INTERVAL_IN_S);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e423bddbc81b1176154c2b5b0fffeb7fda8ddc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU1NzIxNA==", "bodyText": "Yes, using it now.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502557214", "createdAt": "2020-10-09T16:54:06Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/HeapHealthDecider.java", "diffHunk": "@@ -20,23 +20,31 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Decider;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Decision;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.old_gen.OldGenDecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing.HeapSizeIncreasePolicy;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.HighHeapUsageClusterRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n \n /**\n  * decider to bring down heap usage in young gen / old gen\n  */\n public class HeapHealthDecider extends Decider {\n \n+  private static final int EVAL_INTERVAL_IN_S = 5;\n   public static final String NAME = \"HeapHealthDecider\";\n   private final OldGenDecisionPolicy oldGenDecisionPolicy;\n+  private final HeapSizeIncreasePolicy heapSizeIncreasePolicy;\n   private int counter = 0;\n \n-  public HeapHealthDecider(int decisionFrequency, final HighHeapUsageClusterRca highHeapUsageClusterRca) {\n+  public HeapHealthDecider(int decisionFrequency,\n+      final HighHeapUsageClusterRca highHeapUsageClusterRca, LargeHeapClusterRca largeHeapClusterRca) {\n     //TODO : refactor parent class to remove evalIntervalSeconds completely\n-    super(5, decisionFrequency);\n+    super(EVAL_INTERVAL_IN_S, decisionFrequency);\n     oldGenDecisionPolicy = new OldGenDecisionPolicy(highHeapUsageClusterRca);\n+    heapSizeIncreasePolicy = new HeapSizeIncreasePolicy(largeHeapClusterRca,\n+        TimeUnit.DAYS.toSeconds(2) / EVAL_INTERVAL_IN_S);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwODEwOQ=="}, "originalCommit": {"oid": "86e423bddbc81b1176154c2b5b0fffeb7fda8ddc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTM5MjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/OldGenRca.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzo0MTozMVrOHeJPLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzo0MTozMVrOHeJPLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3MDY3MA==", "bodyText": "Nice! Once both our PRs are merged, we should consolidate them so that we reuse computations like this.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r501370670", "createdAt": "2020-10-07T23:41:31Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/OldGenRca.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.OLD_GEN;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType.TOT_FULL_GC;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.MEM_TYPE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.MetricFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.persist.SQLParsingUtil;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public abstract class OldGenRca<T extends ResourceFlowUnit<?>> extends Rca<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86e423bddbc81b1176154c2b5b0fffeb7fda8ddc"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzE4MTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzoyOToyOFrOHfSxPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo1ODozN1rOHfTo7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NTQyMg==", "bodyText": "javax.annotation provides @nonnull, is there a reason you're using this specific import?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502575422", "createdAt": "2020-10-09T17:29:28Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "diffHunk": "@@ -18,12 +18,12 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n-import java.util.ArrayList;\n-import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n+import org.checkerframework.checker.nullness.qual.NonNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba0fa1a995e50822df233cbb659c790955d104c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4OTY3Nw==", "bodyText": "right, wanted to use Findbug's nonnull itself. We don't run checker framework checks yet.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502589677", "createdAt": "2020-10-09T17:58:37Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "diffHunk": "@@ -18,12 +18,12 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n-import java.util.ArrayList;\n-import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n+import org.checkerframework.checker.nullness.qual.NonNull;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NTQyMg=="}, "originalCommit": {"oid": "2ba0fa1a995e50822df233cbb659c790955d104c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzE4NDc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozMDozNlrOHfSzoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozMDozNlrOHfSzoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NjAzMg==", "bodyText": "See other comment, is this correct?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502576032", "createdAt": "2020-10-09T17:30:36Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -18,60 +18,63 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.AlarmMonitor;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.JvmScaleUpPolicyConfig;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindow;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.aggregators.SlidingWindowData;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.JvmActionsAlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HeapSizeIncreasePolicyConfig;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import com.google.common.annotations.VisibleForTesting;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n+import org.checkerframework.checker.nullness.qual.NonNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba0fa1a995e50822df233cbb659c790955d104c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzE5MTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozMjo0NVrOHfS3qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo0NToyN1rOHfTP9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NzA2Nw==", "bodyText": "Good enough for L0, can you add a TODO comment here, I think we can reduce the amount of memory this consumes by making a custom SlidingWindow for L1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502577067", "createdAt": "2020-10-09T17:32:45Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -84,71 +87,41 @@ private void addToSlidingWindow() {\n     List<HotNodeSummary> hotNodeSummaries = flowUnit.getSummary().getHotNodeSummaryList();\n     hotNodeSummaries.forEach(hotNodeSummary -> {\n       NodeKey nodeKey = new NodeKey(hotNodeSummary.getNodeID(), hotNodeSummary.getHostAddress());\n-      perNodeSlidingWindow.next(nodeKey, new SlidingWindowData(currTime, 1d));\n+      heapSizeIncreaseClusterMonitor.recordIssue(nodeKey, currTime);\n     });\n   }\n \n-  private List<Action> evaluateAndEmit() {\n-    List<Action> actions = new ArrayList<>();\n-    int numNodesInCluster = appContext.getAllClusterInstances().size();\n-    int numNodesInClusterUndersizedOldGen = getUnderSizedOldGenCount();\n+  private class HeapSizeIncreaseClusterMonitor {\n \n-    if ((numNodesInClusterUndersizedOldGen / (double) numNodesInCluster) * 100d >= unhealthyNodePercentage) {\n-      Action jvmSizeUpAction = new HeapSizeIncreaseAction(appContext);\n-      if (jvmSizeUpAction.isActionable()) {\n-        actions.add(jvmSizeUpAction);\n-      }\n-    }\n+    private static final int DEFAULT_DAY_BREACH_THRESHOLD = 8;\n+    private static final int DEFAULT_WEEK_BREACH_THRESHOLD = 3;\n+    private final Map<NodeKey, AlarmMonitor> perNodeMonitor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba0fa1a995e50822df233cbb659c790955d104c"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MzI4NA==", "bodyText": "I thought so too. It's already a 1000 line PR, didn't want to add to it, and also cover it in testing for this time.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502583284", "createdAt": "2020-10-09T17:45:27Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -84,71 +87,41 @@ private void addToSlidingWindow() {\n     List<HotNodeSummary> hotNodeSummaries = flowUnit.getSummary().getHotNodeSummaryList();\n     hotNodeSummaries.forEach(hotNodeSummary -> {\n       NodeKey nodeKey = new NodeKey(hotNodeSummary.getNodeID(), hotNodeSummary.getHostAddress());\n-      perNodeSlidingWindow.next(nodeKey, new SlidingWindowData(currTime, 1d));\n+      heapSizeIncreaseClusterMonitor.recordIssue(nodeKey, currTime);\n     });\n   }\n \n-  private List<Action> evaluateAndEmit() {\n-    List<Action> actions = new ArrayList<>();\n-    int numNodesInCluster = appContext.getAllClusterInstances().size();\n-    int numNodesInClusterUndersizedOldGen = getUnderSizedOldGenCount();\n+  private class HeapSizeIncreaseClusterMonitor {\n \n-    if ((numNodesInClusterUndersizedOldGen / (double) numNodesInCluster) * 100d >= unhealthyNodePercentage) {\n-      Action jvmSizeUpAction = new HeapSizeIncreaseAction(appContext);\n-      if (jvmSizeUpAction.isActionable()) {\n-        actions.add(jvmSizeUpAction);\n-      }\n-    }\n+    private static final int DEFAULT_DAY_BREACH_THRESHOLD = 8;\n+    private static final int DEFAULT_WEEK_BREACH_THRESHOLD = 3;\n+    private final Map<NodeKey, AlarmMonitor> perNodeMonitor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NzA2Nw=="}, "originalCommit": {"oid": "2ba0fa1a995e50822df233cbb659c790955d104c"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzIwNDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HeapSizeIncreasePolicyConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozNzoxNFrOHfS_6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo1ODo0N1rOHfTpQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3OTE3OQ==", "bodyText": "Is this key still relevant?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502579179", "createdAt": "2020-10-09T17:37:14Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HeapSizeIncreasePolicyConfig.java", "diffHunk": "@@ -26,24 +26,25 @@\n \n   private final int minUnhealthyMinutes;\n \n-  public JvmScaleUpPolicyConfig(final RcaConf rcaConf) {\n+  public HeapSizeIncreasePolicyConfig(final RcaConf rcaConf) {\n     this.unhealthyNodePercentage = rcaConf.readRcaConfig(POLICY_NAME,\n-        ScaleUpPolicyKeys.UNHEALTHY_NODE_PERCENTAGE_KEY.toString(), DEFAULT_UNHEALTHY_NODE_PERCENTAGE\n-        , Integer.class);\n+        HeapSizeIncreasePolicyKeys.UNHEALTHY_NODE_PERCENTAGE_KEY.toString(),\n+        DEFAULT_UNHEALTHY_NODE_PERCENTAGE, Integer.class);\n     this.minUnhealthyMinutes = rcaConf.readRcaConfig(POLICY_NAME,\n-        ScaleUpPolicyKeys.MIN_UNHEALTHY_MINUTES_KEY.toString(), DEFAULT_MIN_UNHEALTHY_MINUTES,\n+        HeapSizeIncreasePolicyKeys.MIN_UNHEALTHY_MINUTES_KEY.toString(), DEFAULT_MIN_UNHEALTHY_MINUTES,\n         Integer.class);\n   }\n \n-  enum ScaleUpPolicyKeys {\n+  enum HeapSizeIncreasePolicyKeys {\n     UNHEALTHY_NODE_PERCENTAGE_KEY(\"unhealthy-node-percentage\"),\n     MIN_UNHEALTHY_MINUTES_KEY(\"min-unhealthy-minutes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba0fa1a995e50822df233cbb659c790955d104c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4OTc2Mw==", "bodyText": "Right, that key is not needed.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502589763", "createdAt": "2020-10-09T17:58:47Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HeapSizeIncreasePolicyConfig.java", "diffHunk": "@@ -26,24 +26,25 @@\n \n   private final int minUnhealthyMinutes;\n \n-  public JvmScaleUpPolicyConfig(final RcaConf rcaConf) {\n+  public HeapSizeIncreasePolicyConfig(final RcaConf rcaConf) {\n     this.unhealthyNodePercentage = rcaConf.readRcaConfig(POLICY_NAME,\n-        ScaleUpPolicyKeys.UNHEALTHY_NODE_PERCENTAGE_KEY.toString(), DEFAULT_UNHEALTHY_NODE_PERCENTAGE\n-        , Integer.class);\n+        HeapSizeIncreasePolicyKeys.UNHEALTHY_NODE_PERCENTAGE_KEY.toString(),\n+        DEFAULT_UNHEALTHY_NODE_PERCENTAGE, Integer.class);\n     this.minUnhealthyMinutes = rcaConf.readRcaConfig(POLICY_NAME,\n-        ScaleUpPolicyKeys.MIN_UNHEALTHY_MINUTES_KEY.toString(), DEFAULT_MIN_UNHEALTHY_MINUTES,\n+        HeapSizeIncreasePolicyKeys.MIN_UNHEALTHY_MINUTES_KEY.toString(), DEFAULT_MIN_UNHEALTHY_MINUTES,\n         Integer.class);\n   }\n \n-  enum ScaleUpPolicyKeys {\n+  enum HeapSizeIncreasePolicyKeys {\n     UNHEALTHY_NODE_PERCENTAGE_KEY(\"unhealthy-node-percentage\"),\n     MIN_UNHEALTHY_MINUTES_KEY(\"min-unhealthy-minutes\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3OTE3OQ=="}, "originalCommit": {"oid": "2ba0fa1a995e50822df233cbb659c790955d104c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NzIxMzQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzozOTo0NFrOHfTE8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNzo1MDo0MVrOHfTZRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MDQ2Nw==", "bodyText": "Did this cause a bug somewhere? Is this a necessary change?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502580467", "createdAt": "2020-10-09T17:39:44Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "diffHunk": "@@ -57,6 +57,7 @@ public HotClusterSummary(int numOfNodes, int numOfUnhealthyNodes) {\n     super();\n     this.numOfNodes = numOfNodes;\n     this.numOfUnhealthyNodes = numOfUnhealthyNodes;\n+    this.hotNodeSummaryList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba0fa1a995e50822df233cbb659c790955d104c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4NTY2OA==", "bodyText": "yes, caused an NPE without it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502585668", "createdAt": "2020-10-09T17:50:41Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "diffHunk": "@@ -57,6 +57,7 @@ public HotClusterSummary(int numOfNodes, int numOfUnhealthyNodes) {\n     super();\n     this.numOfNodes = numOfNodes;\n     this.numOfUnhealthyNodes = numOfUnhealthyNodes;\n+    this.hotNodeSummaryList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU4MDQ2Nw=="}, "originalCommit": {"oid": "2ba0fa1a995e50822df233cbb659c790955d104c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODAwMTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjo1MDowMFrOHfajTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo0OTozMVrOHgH6Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwMjkyNg==", "bodyText": "Check cache and queue actions. We've been using summary() and fromSummary() methods to serialize/deserialize the full action for decision table/api/validations etc. let's keep this in the same format.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502702926", "createdAt": "2020-10-09T22:50:00Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+\n+public class HeapSizeIncreaseAction extends SuppressibleAction {\n+\n+  public static final String NAME = \"HeapSizeIncreaseAction\";\n+  private static final String SUMMARY = \"Update heap size to 128GB\";\n+  private final boolean canUpdate;\n+  private final NodeKey esNode;\n+  private static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = TimeUnit.DAYS.toMillis(3);\n+  private static final long GB_TO_B = 1024 * 1024 * 1024;\n+\n+  public HeapSizeIncreaseAction(@Nonnull final AppContext appContext) {\n+    super(appContext);\n+    this.esNode = new NodeKey(appContext.getMyInstanceDetails());\n+    this.canUpdate = Runtime.getRuntime().totalMemory() > 200 * GB_TO_B;\n+  }\n+\n+  @Override\n+  public boolean canUpdate() {\n+    return canUpdate;\n+  }\n+\n+  @Override\n+  public long coolOffPeriodInMillis() {\n+    return DEFAULT_COOL_OFF_PERIOD_IN_MILLIS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+\n+    return appContext.getDataNodeInstances()\n+                     .stream()\n+                     .map(NodeKey::new).collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    final Map<NodeKey, ImpactVector> impactMap = new HashMap<>();\n+    for (NodeKey nodeKey : impactedNodes()) {\n+      final ImpactVector impactVector = new ImpactVector();\n+      impactVector.decreasesPressure(Dimension.HEAP);\n+      impactMap.put(nodeKey, impactVector);\n+    }\n+\n+    return impactMap;\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public String summary() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be44b80d765ac1fb0997d4865584f3443e099e5"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NjEwMg==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503446102", "createdAt": "2020-10-12T17:49:31Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.ImpactVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nonnull;\n+\n+public class HeapSizeIncreaseAction extends SuppressibleAction {\n+\n+  public static final String NAME = \"HeapSizeIncreaseAction\";\n+  private static final String SUMMARY = \"Update heap size to 128GB\";\n+  private final boolean canUpdate;\n+  private final NodeKey esNode;\n+  private static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = TimeUnit.DAYS.toMillis(3);\n+  private static final long GB_TO_B = 1024 * 1024 * 1024;\n+\n+  public HeapSizeIncreaseAction(@Nonnull final AppContext appContext) {\n+    super(appContext);\n+    this.esNode = new NodeKey(appContext.getMyInstanceDetails());\n+    this.canUpdate = Runtime.getRuntime().totalMemory() > 200 * GB_TO_B;\n+  }\n+\n+  @Override\n+  public boolean canUpdate() {\n+    return canUpdate;\n+  }\n+\n+  @Override\n+  public long coolOffPeriodInMillis() {\n+    return DEFAULT_COOL_OFF_PERIOD_IN_MILLIS;\n+  }\n+\n+  @Override\n+  public List<NodeKey> impactedNodes() {\n+\n+    return appContext.getDataNodeInstances()\n+                     .stream()\n+                     .map(NodeKey::new).collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public Map<NodeKey, ImpactVector> impact() {\n+    final Map<NodeKey, ImpactVector> impactMap = new HashMap<>();\n+    for (NodeKey nodeKey : impactedNodes()) {\n+      final ImpactVector impactVector = new ImpactVector();\n+      impactVector.decreasesPressure(Dimension.HEAP);\n+      impactMap.put(nodeKey, impactVector);\n+    }\n+\n+    return impactMap;\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public String summary() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwMjkyNg=="}, "originalCommit": {"oid": "4be44b80d765ac1fb0997d4865584f3443e099e5"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODAxNTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjo1ODoxMVrOHfarFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1MDowM1rOHgH7SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNDkxNw==", "bodyText": "Can we just pass new HeapSizeIncreaseClusterMonitor() from the other constructor?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502704917", "createdAt": "2020-10-09T22:58:11Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.AlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.JvmActionsAlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HeapSizeIncreasePolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+\n+public class HeapSizeIncreasePolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private final HeapSizeIncreaseClusterMonitor heapSizeIncreaseClusterMonitor;\n+\n+  private int unhealthyNodePercentage;\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca) {\n+    this(largeHeapClusterRca, null);\n+  }\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final HeapSizeIncreaseClusterMonitor clusterMonitor) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    if (clusterMonitor != null) {\n+      this.heapSizeIncreaseClusterMonitor = clusterMonitor;\n+    } else {\n+      this.heapSizeIncreaseClusterMonitor = new HeapSizeIncreaseClusterMonitor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be44b80d765ac1fb0997d4865584f3443e099e5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NjM0NA==", "bodyText": "Removed the other constructor. Thought I would need it for unit testing, but I didn't need it.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503446344", "createdAt": "2020-10-12T17:50:03Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.AlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.JvmActionsAlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HeapSizeIncreasePolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+\n+public class HeapSizeIncreasePolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private final HeapSizeIncreaseClusterMonitor heapSizeIncreaseClusterMonitor;\n+\n+  private int unhealthyNodePercentage;\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca) {\n+    this(largeHeapClusterRca, null);\n+  }\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final HeapSizeIncreaseClusterMonitor clusterMonitor) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    if (clusterMonitor != null) {\n+      this.heapSizeIncreaseClusterMonitor = clusterMonitor;\n+    } else {\n+      this.heapSizeIncreaseClusterMonitor = new HeapSizeIncreaseClusterMonitor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNDkxNw=="}, "originalCommit": {"oid": "4be44b80d765ac1fb0997d4865584f3443e099e5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODAxNjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMjo1OToxNVrOHfar6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1MDoxMFrOHgH7fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNTEzMQ==", "bodyText": "is this line needed?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502705131", "createdAt": "2020-10-09T22:59:15Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.AlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.JvmActionsAlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HeapSizeIncreasePolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+\n+public class HeapSizeIncreasePolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private final HeapSizeIncreaseClusterMonitor heapSizeIncreaseClusterMonitor;\n+\n+  private int unhealthyNodePercentage;\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca) {\n+    this(largeHeapClusterRca, null);\n+  }\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final HeapSizeIncreaseClusterMonitor clusterMonitor) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    if (clusterMonitor != null) {\n+      this.heapSizeIncreaseClusterMonitor = clusterMonitor;\n+    } else {\n+      this.heapSizeIncreaseClusterMonitor = new HeapSizeIncreaseClusterMonitor();\n+    }\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    addToClusterMonitor();\n+\n+    List<Action> actions = new ArrayList<>();\n+    if (!heapSizeIncreaseClusterMonitor.isHealthy()) {\n+      Action heapSizeIncreaseAction = new HeapSizeIncreaseAction(appContext);\n+      if (heapSizeIncreaseAction.isActionable()) {\n+        actions.add(heapSizeIncreaseAction);\n+        return actions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be44b80d765ac1fb0997d4865584f3443e099e5"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NjM5Ng==", "bodyText": "removed.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503446396", "createdAt": "2020-10-12T17:50:10Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.AlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.JvmActionsAlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HeapSizeIncreasePolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+\n+public class HeapSizeIncreasePolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private final HeapSizeIncreaseClusterMonitor heapSizeIncreaseClusterMonitor;\n+\n+  private int unhealthyNodePercentage;\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca) {\n+    this(largeHeapClusterRca, null);\n+  }\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final HeapSizeIncreaseClusterMonitor clusterMonitor) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    if (clusterMonitor != null) {\n+      this.heapSizeIncreaseClusterMonitor = clusterMonitor;\n+    } else {\n+      this.heapSizeIncreaseClusterMonitor = new HeapSizeIncreaseClusterMonitor();\n+    }\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    addToClusterMonitor();\n+\n+    List<Action> actions = new ArrayList<>();\n+    if (!heapSizeIncreaseClusterMonitor.isHealthy()) {\n+      Action heapSizeIncreaseAction = new HeapSizeIncreaseAction(appContext);\n+      if (heapSizeIncreaseAction.isActionable()) {\n+        actions.add(heapSizeIncreaseAction);\n+        return actions;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNTEzMQ=="}, "originalCommit": {"oid": "4be44b80d765ac1fb0997d4865584f3443e099e5"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODAyMzU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMzowMzozOVrOHfavqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1MDoyMFrOHgH71Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNjA5MA==", "bodyText": "nit: since we are not using the key here, can we simplify it with a for each loop on just the values?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502706090", "createdAt": "2020-10-09T23:03:39Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.AlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.JvmActionsAlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HeapSizeIncreasePolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+\n+public class HeapSizeIncreasePolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private final HeapSizeIncreaseClusterMonitor heapSizeIncreaseClusterMonitor;\n+\n+  private int unhealthyNodePercentage;\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca) {\n+    this(largeHeapClusterRca, null);\n+  }\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final HeapSizeIncreaseClusterMonitor clusterMonitor) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    if (clusterMonitor != null) {\n+      this.heapSizeIncreaseClusterMonitor = clusterMonitor;\n+    } else {\n+      this.heapSizeIncreaseClusterMonitor = new HeapSizeIncreaseClusterMonitor();\n+    }\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    addToClusterMonitor();\n+\n+    List<Action> actions = new ArrayList<>();\n+    if (!heapSizeIncreaseClusterMonitor.isHealthy()) {\n+      Action heapSizeIncreaseAction = new HeapSizeIncreaseAction(appContext);\n+      if (heapSizeIncreaseAction.isActionable()) {\n+        actions.add(heapSizeIncreaseAction);\n+        return actions;\n+      }\n+    }\n+\n+    return actions;\n+  }\n+\n+  private void addToClusterMonitor() {\n+    long currTime = System.currentTimeMillis();\n+    if (largeHeapClusterRca.getFlowUnits().isEmpty()) {\n+      return;\n+    }\n+    ResourceFlowUnit<HotClusterSummary> flowUnit = largeHeapClusterRca.getFlowUnits().get(0);\n+\n+    if (flowUnit.getSummary() == null) {\n+      return;\n+    }\n+    List<HotNodeSummary> hotNodeSummaries = flowUnit.getSummary().getHotNodeSummaryList();\n+    hotNodeSummaries.forEach(hotNodeSummary -> {\n+      NodeKey nodeKey = new NodeKey(hotNodeSummary.getNodeID(), hotNodeSummary.getHostAddress());\n+      heapSizeIncreaseClusterMonitor.recordIssue(nodeKey, currTime);\n+    });\n+  }\n+\n+  private class HeapSizeIncreaseClusterMonitor {\n+\n+    private static final int DEFAULT_DAY_BREACH_THRESHOLD = 8;\n+    private static final int DEFAULT_WEEK_BREACH_THRESHOLD = 3;\n+    private final Map<NodeKey, AlarmMonitor> perNodeMonitor;\n+\n+    HeapSizeIncreaseClusterMonitor() {\n+      this.perNodeMonitor = new HashMap<>();\n+    }\n+\n+    public void recordIssue(final NodeKey nodeKey, long currTimeStamp) {\n+      perNodeMonitor.computeIfAbsent(nodeKey,\n+          key -> new JvmActionsAlarmMonitor(DEFAULT_DAY_BREACH_THRESHOLD,\n+              DEFAULT_WEEK_BREACH_THRESHOLD))\n+                    .recordIssue(currTimeStamp, 1d);\n+    }\n+\n+    public boolean isHealthy() {\n+      int numDataNodesInCluster = appContext.getDataNodeInstances().size();\n+      double unhealthyCount = 0;\n+      for (Map.Entry<NodeKey, AlarmMonitor> entry : perNodeMonitor.entrySet()) {\n+        if (!entry.getValue().isHealthy()) {\n+          unhealthyCount++;\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be44b80d765ac1fb0997d4865584f3443e099e5"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NjQ4NQ==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503446485", "createdAt": "2020-10-12T17:50:20Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/jvm/sizing/HeapSizeIncreasePolicy.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.sizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.AlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.DecisionPolicy;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.jvm.JvmActionsAlarmMonitor;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs.HeapSizeIncreasePolicyConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.RcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cluster.NodeKey;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing.LargeHeapClusterRca;\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+\n+public class HeapSizeIncreasePolicy implements DecisionPolicy {\n+\n+  private final LargeHeapClusterRca largeHeapClusterRca;\n+  private AppContext appContext;\n+  private RcaConf rcaConf;\n+  private final HeapSizeIncreaseClusterMonitor heapSizeIncreaseClusterMonitor;\n+\n+  private int unhealthyNodePercentage;\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca) {\n+    this(largeHeapClusterRca, null);\n+  }\n+\n+  public HeapSizeIncreasePolicy(final LargeHeapClusterRca largeHeapClusterRca,\n+      final HeapSizeIncreaseClusterMonitor clusterMonitor) {\n+    this.largeHeapClusterRca = largeHeapClusterRca;\n+    if (clusterMonitor != null) {\n+      this.heapSizeIncreaseClusterMonitor = clusterMonitor;\n+    } else {\n+      this.heapSizeIncreaseClusterMonitor = new HeapSizeIncreaseClusterMonitor();\n+    }\n+  }\n+\n+  @Override\n+  public List<Action> evaluate() {\n+    addToClusterMonitor();\n+\n+    List<Action> actions = new ArrayList<>();\n+    if (!heapSizeIncreaseClusterMonitor.isHealthy()) {\n+      Action heapSizeIncreaseAction = new HeapSizeIncreaseAction(appContext);\n+      if (heapSizeIncreaseAction.isActionable()) {\n+        actions.add(heapSizeIncreaseAction);\n+        return actions;\n+      }\n+    }\n+\n+    return actions;\n+  }\n+\n+  private void addToClusterMonitor() {\n+    long currTime = System.currentTimeMillis();\n+    if (largeHeapClusterRca.getFlowUnits().isEmpty()) {\n+      return;\n+    }\n+    ResourceFlowUnit<HotClusterSummary> flowUnit = largeHeapClusterRca.getFlowUnits().get(0);\n+\n+    if (flowUnit.getSummary() == null) {\n+      return;\n+    }\n+    List<HotNodeSummary> hotNodeSummaries = flowUnit.getSummary().getHotNodeSummaryList();\n+    hotNodeSummaries.forEach(hotNodeSummary -> {\n+      NodeKey nodeKey = new NodeKey(hotNodeSummary.getNodeID(), hotNodeSummary.getHostAddress());\n+      heapSizeIncreaseClusterMonitor.recordIssue(nodeKey, currTime);\n+    });\n+  }\n+\n+  private class HeapSizeIncreaseClusterMonitor {\n+\n+    private static final int DEFAULT_DAY_BREACH_THRESHOLD = 8;\n+    private static final int DEFAULT_WEEK_BREACH_THRESHOLD = 3;\n+    private final Map<NodeKey, AlarmMonitor> perNodeMonitor;\n+\n+    HeapSizeIncreaseClusterMonitor() {\n+      this.perNodeMonitor = new HashMap<>();\n+    }\n+\n+    public void recordIssue(final NodeKey nodeKey, long currTimeStamp) {\n+      perNodeMonitor.computeIfAbsent(nodeKey,\n+          key -> new JvmActionsAlarmMonitor(DEFAULT_DAY_BREACH_THRESHOLD,\n+              DEFAULT_WEEK_BREACH_THRESHOLD))\n+                    .recordIssue(currTimeStamp, 1d);\n+    }\n+\n+    public boolean isHealthy() {\n+      int numDataNodesInCluster = appContext.getDataNodeInstances().size();\n+      double unhealthyCount = 0;\n+      for (Map.Entry<NodeKey, AlarmMonitor> entry : perNodeMonitor.entrySet()) {\n+        if (!entry.getValue().isHealthy()) {\n+          unhealthyCount++;\n+        }\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNjA5MA=="}, "originalCommit": {"oid": "4be44b80d765ac1fb0997d4865584f3443e099e5"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODAzNDE1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenContendedRcaTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMzoxMDo0MlrOHfa1rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1MDoyNlrOHgH8CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNzYyOA==", "bodyText": "nit: newline", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r502707628", "createdAt": "2020-10-09T23:10:42Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenContendedRcaTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails.Id;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails.Ip;\n+import java.util.Collections;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+public class OldGenContendedRcaTest {\n+  @Mock\n+  private HighOldGenOccupancyRca mockOldGenOccupancyRca;\n+\n+  @Mock\n+  private OldGenReclamationRca mockOldGenReclamationRca;\n+\n+  @Mock\n+  private AppContext mockAppContext;\n+\n+  private final InstanceDetails currentInstance = new InstanceDetails(new Id(\"nodeId\"),\n+      new Ip(\"1.2.3.4\"), 0);\n+  private OldGenContendedRca testRca;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    initMocks(this);\n+    when(mockAppContext.getMyInstanceDetails()).thenReturn(currentInstance);\n+    this.testRca = new OldGenContendedRca(mockOldGenOccupancyRca, mockOldGenReclamationRca);\n+    this.testRca.setAppContext(mockAppContext);\n+  }\n+\n+  @Test\n+  public void testEmptyDependentFlowUnits() {\n+    when(mockOldGenOccupancyRca.getFlowUnits()).thenReturn(Collections.emptyList());\n+    when(mockOldGenReclamationRca.getFlowUnits()).thenReturn(Collections.emptyList());\n+\n+    ResourceFlowUnit<HotNodeSummary> flowUnit = testRca.operate();\n+    assertTrue(flowUnit.isEmpty());\n+  }\n+\n+  @Test\n+  public void oneDependentRcaUnhealthy() {\n+    when(mockOldGenOccupancyRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.UNHEALTHY), new HotResourceSummary(ResourceUtil.OLD_GEN_HEAP_USAGE, 0d, 0d, 0))));\n+    when(mockOldGenReclamationRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.HEALTHY), new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS, 0d, 0d, 0))));\n+\n+    ResourceFlowUnit<HotNodeSummary> flowUnit = testRca.operate();\n+    assertTrue(flowUnit.isEmpty());\n+\n+\n+    when(mockOldGenOccupancyRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.HEALTHY), new HotResourceSummary(ResourceUtil.OLD_GEN_HEAP_USAGE, 0d, 0d, 0))));\n+    when(mockOldGenReclamationRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.UNHEALTHY), new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS, 0d, 0d,\n+            0))));\n+\n+    assertTrue(testRca.operate().isEmpty());\n+  }\n+\n+  @Test\n+  public void testContendedOldGen() {\n+\n+    when(mockOldGenOccupancyRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.UNHEALTHY), new HotResourceSummary(ResourceUtil.OLD_GEN_HEAP_USAGE, 0d, 0d, 0))));\n+    when(mockOldGenReclamationRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.UNHEALTHY), new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS, 0d, 0d,\n+            0))));\n+\n+    ResourceFlowUnit<HotNodeSummary> flowUnit = testRca.operate();\n+    assertFalse(flowUnit.isEmpty());\n+    assertEquals(currentInstance.getInstanceId(), flowUnit.getSummary().getNodeID());\n+    assertEquals(currentInstance.getInstanceIp(), flowUnit.getSummary().getHostAddress());\n+  }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4be44b80d765ac1fb0997d4865584f3443e099e5"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NjUzNg==", "bodyText": "done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503446536", "createdAt": "2020-10-12T17:50:26Z", "author": {"login": "ktkrg"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/OldGenContendedRcaTest.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.jvmsizing;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.MockitoAnnotations.initMocks;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Resources.State;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.ResourceUtil;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails.Id;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails.Ip;\n+import java.util.Collections;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+\n+public class OldGenContendedRcaTest {\n+  @Mock\n+  private HighOldGenOccupancyRca mockOldGenOccupancyRca;\n+\n+  @Mock\n+  private OldGenReclamationRca mockOldGenReclamationRca;\n+\n+  @Mock\n+  private AppContext mockAppContext;\n+\n+  private final InstanceDetails currentInstance = new InstanceDetails(new Id(\"nodeId\"),\n+      new Ip(\"1.2.3.4\"), 0);\n+  private OldGenContendedRca testRca;\n+\n+  @Before\n+  public void setup() throws Exception {\n+    initMocks(this);\n+    when(mockAppContext.getMyInstanceDetails()).thenReturn(currentInstance);\n+    this.testRca = new OldGenContendedRca(mockOldGenOccupancyRca, mockOldGenReclamationRca);\n+    this.testRca.setAppContext(mockAppContext);\n+  }\n+\n+  @Test\n+  public void testEmptyDependentFlowUnits() {\n+    when(mockOldGenOccupancyRca.getFlowUnits()).thenReturn(Collections.emptyList());\n+    when(mockOldGenReclamationRca.getFlowUnits()).thenReturn(Collections.emptyList());\n+\n+    ResourceFlowUnit<HotNodeSummary> flowUnit = testRca.operate();\n+    assertTrue(flowUnit.isEmpty());\n+  }\n+\n+  @Test\n+  public void oneDependentRcaUnhealthy() {\n+    when(mockOldGenOccupancyRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.UNHEALTHY), new HotResourceSummary(ResourceUtil.OLD_GEN_HEAP_USAGE, 0d, 0d, 0))));\n+    when(mockOldGenReclamationRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.HEALTHY), new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS, 0d, 0d, 0))));\n+\n+    ResourceFlowUnit<HotNodeSummary> flowUnit = testRca.operate();\n+    assertTrue(flowUnit.isEmpty());\n+\n+\n+    when(mockOldGenOccupancyRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.HEALTHY), new HotResourceSummary(ResourceUtil.OLD_GEN_HEAP_USAGE, 0d, 0d, 0))));\n+    when(mockOldGenReclamationRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.UNHEALTHY), new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS, 0d, 0d,\n+            0))));\n+\n+    assertTrue(testRca.operate().isEmpty());\n+  }\n+\n+  @Test\n+  public void testContendedOldGen() {\n+\n+    when(mockOldGenOccupancyRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.UNHEALTHY), new HotResourceSummary(ResourceUtil.OLD_GEN_HEAP_USAGE, 0d, 0d, 0))));\n+    when(mockOldGenReclamationRca.getFlowUnits()).thenReturn(Collections\n+        .singletonList(new ResourceFlowUnit<>(System.currentTimeMillis(), new ResourceContext(\n+            State.UNHEALTHY), new HotResourceSummary(ResourceUtil.FULL_GC_EFFECTIVENESS, 0d, 0d,\n+            0))));\n+\n+    ResourceFlowUnit<HotNodeSummary> flowUnit = testRca.operate();\n+    assertFalse(flowUnit.isEmpty());\n+    assertEquals(currentInstance.getInstanceId(), flowUnit.getSummary().getNodeID());\n+    assertEquals(currentInstance.getInstanceIp(), flowUnit.getSummary().getHostAddress());\n+  }\n+\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNzYyOA=="}, "originalCommit": {"oid": "4be44b80d765ac1fb0997d4865584f3443e099e5"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDA4MDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjoxNDozNVrOHgO6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzo1NDowNVrOHgQ5_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MDc5Mw==", "bodyText": "Needs * GB_TO_B on the RHS", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503560793", "createdAt": "2020-10-12T22:14:35Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "diffHunk": "@@ -37,7 +44,17 @@\n   public HeapSizeIncreaseAction(@Nonnull final AppContext appContext) {\n     super(appContext);\n     this.esNode = new NodeKey(appContext.getMyInstanceDetails());\n-    this.canUpdate = Runtime.getRuntime().totalMemory() > 200 * GB_TO_B;\n+    this.canUpdate = Runtime.getRuntime().totalMemory() > 200;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551c25dd85f97fb5ed39dad427dd65d7901bc952"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5MzQ3MQ==", "bodyText": "Yikes! I updated this. Looks like one of my commits was missing. Added it now.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503593471", "createdAt": "2020-10-12T23:54:05Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "diffHunk": "@@ -37,7 +44,17 @@\n   public HeapSizeIncreaseAction(@Nonnull final AppContext appContext) {\n     super(appContext);\n     this.esNode = new NodeKey(appContext.getMyInstanceDetails());\n-    this.canUpdate = Runtime.getRuntime().totalMemory() > 200 * GB_TO_B;\n+    this.canUpdate = Runtime.getRuntime().totalMemory() > 200;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MDc5Mw=="}, "originalCommit": {"oid": "551c25dd85f97fb5ed39dad427dd65d7901bc952"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDA4NjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMjoxNzowM1rOHgO91A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzo1NDoxN1rOHgQ6rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MTY4NA==", "bodyText": "Undo this change and rebase, you'll get the try with resource version", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503561684", "createdAt": "2020-10-12T22:17:03Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -92,6 +92,7 @@ protected synchronized void write() throws IOException {\n     }\n     // write to temporary file\n     writer.flush();\n+    writer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "551c25dd85f97fb5ed39dad427dd65d7901bc952"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5MzY0NQ==", "bodyText": "yup, done now.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503593645", "createdAt": "2020-10-12T23:54:17Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/aggregators/PersistableSlidingWindow.java", "diffHunk": "@@ -92,6 +92,7 @@ protected synchronized void write() throws IOException {\n     }\n     // write to temporary file\n     writer.flush();\n+    writer.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU2MTY4NA=="}, "originalCommit": {"oid": "551c25dd85f97fb5ed39dad427dd65d7901bc952"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDMwNjk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzo1NzozNlrOHgQ-RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjoxMzowOFrOHgS9pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NDU2NQ==", "bodyText": "Is this correct? Won't this action be constructed on a master node?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503594565", "createdAt": "2020-10-12T23:57:36Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "diffHunk": "@@ -32,29 +33,36 @@\n public class HeapSizeIncreaseAction extends SuppressibleAction {\n \n   public static final String NAME = \"HeapSizeIncreaseAction\";\n-  private static final String SUMMARY = \"Update heap size to 128GB\";\n+  private static final long GB_TO_B = 1024 * 1024 * 1024;\n   private static final String ID_KEY = \"Id\";\n   private static final String IP_KEY = \"Ip\";\n+  private static final String MEMORY_THRESHOLD_KEY = \"memory-threshold\";\n   private static final String CAN_UPDATE_KEY = \"canUpdate\";\n   private final boolean canUpdate;\n   private final NodeKey esNode;\n   private static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = TimeUnit.DAYS.toMillis(3);\n-  private static final long GB_TO_B = 1024 * 1024 * 1024;\n+  private final long memoryThreshold;\n \n   public HeapSizeIncreaseAction(@Nonnull final AppContext appContext) {\n+    this(appContext, HeapSizeIncreasePolicyConfig.DEFAULT_MIN_TOTAL_MEM_IN_GB * GB_TO_B);\n+  }\n+\n+  public HeapSizeIncreaseAction(@Nonnull final AppContext appContext, final long memoryThreshold) {\n     super(appContext);\n     this.esNode = new NodeKey(appContext.getMyInstanceDetails());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752472e60e09d605d8e23d9ffaf9075faa9e7159"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyNzE3NA==", "bodyText": "Fixed it! I was running this on a colocated master cluster which is why this slipped through the cracks. I am checking this on the data node now at the node level rca itself.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503627174", "createdAt": "2020-10-13T02:13:08Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "diffHunk": "@@ -32,29 +33,36 @@\n public class HeapSizeIncreaseAction extends SuppressibleAction {\n \n   public static final String NAME = \"HeapSizeIncreaseAction\";\n-  private static final String SUMMARY = \"Update heap size to 128GB\";\n+  private static final long GB_TO_B = 1024 * 1024 * 1024;\n   private static final String ID_KEY = \"Id\";\n   private static final String IP_KEY = \"Ip\";\n+  private static final String MEMORY_THRESHOLD_KEY = \"memory-threshold\";\n   private static final String CAN_UPDATE_KEY = \"canUpdate\";\n   private final boolean canUpdate;\n   private final NodeKey esNode;\n   private static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = TimeUnit.DAYS.toMillis(3);\n-  private static final long GB_TO_B = 1024 * 1024 * 1024;\n+  private final long memoryThreshold;\n \n   public HeapSizeIncreaseAction(@Nonnull final AppContext appContext) {\n+    this(appContext, HeapSizeIncreasePolicyConfig.DEFAULT_MIN_TOTAL_MEM_IN_GB * GB_TO_B);\n+  }\n+\n+  public HeapSizeIncreaseAction(@Nonnull final AppContext appContext, final long memoryThreshold) {\n     super(appContext);\n     this.esNode = new NodeKey(appContext.getMyInstanceDetails());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NDU2NQ=="}, "originalCommit": {"oid": "752472e60e09d605d8e23d9ffaf9075faa9e7159"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDMwODc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzo1ODozOVrOHgQ_TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDozOTo1MVrOHgRoJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NDgyOA==", "bodyText": "Why is there a call to super() here? Won't it just set and reset the same variables?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503594828", "createdAt": "2020-10-12T23:58:39Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "diffHunk": "@@ -32,29 +33,36 @@\n public class HeapSizeIncreaseAction extends SuppressibleAction {\n \n   public static final String NAME = \"HeapSizeIncreaseAction\";\n-  private static final String SUMMARY = \"Update heap size to 128GB\";\n+  private static final long GB_TO_B = 1024 * 1024 * 1024;\n   private static final String ID_KEY = \"Id\";\n   private static final String IP_KEY = \"Ip\";\n+  private static final String MEMORY_THRESHOLD_KEY = \"memory-threshold\";\n   private static final String CAN_UPDATE_KEY = \"canUpdate\";\n   private final boolean canUpdate;\n   private final NodeKey esNode;\n   private static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = TimeUnit.DAYS.toMillis(3);\n-  private static final long GB_TO_B = 1024 * 1024 * 1024;\n+  private final long memoryThreshold;\n \n   public HeapSizeIncreaseAction(@Nonnull final AppContext appContext) {\n+    this(appContext, HeapSizeIncreasePolicyConfig.DEFAULT_MIN_TOTAL_MEM_IN_GB * GB_TO_B);\n+  }\n+\n+  public HeapSizeIncreaseAction(@Nonnull final AppContext appContext, final long memoryThreshold) {\n     super(appContext);\n     this.esNode = new NodeKey(appContext.getMyInstanceDetails());\n-    this.canUpdate = Runtime.getRuntime().totalMemory() > 200;\n+    this.memoryThreshold = memoryThreshold;\n+    this.canUpdate = Runtime.getRuntime().totalMemory() > memoryThreshold;\n   }\n \n   /**\n    * Constructor used when building the action from a summary.\n    */\n   public HeapSizeIncreaseAction(final NodeKey nodeKey, final boolean canUpdate,\n-      final AppContext appContext) {\n+      final AppContext appContext, final long memoryThreshold) {\n     super(appContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752472e60e09d605d8e23d9ffaf9075faa9e7159"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwNTI4Nw==", "bodyText": "Call to super will only set the appContext as required by SuppressibleAction.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503605287", "createdAt": "2020-10-13T00:39:51Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/HeapSizeIncreaseAction.java", "diffHunk": "@@ -32,29 +33,36 @@\n public class HeapSizeIncreaseAction extends SuppressibleAction {\n \n   public static final String NAME = \"HeapSizeIncreaseAction\";\n-  private static final String SUMMARY = \"Update heap size to 128GB\";\n+  private static final long GB_TO_B = 1024 * 1024 * 1024;\n   private static final String ID_KEY = \"Id\";\n   private static final String IP_KEY = \"Ip\";\n+  private static final String MEMORY_THRESHOLD_KEY = \"memory-threshold\";\n   private static final String CAN_UPDATE_KEY = \"canUpdate\";\n   private final boolean canUpdate;\n   private final NodeKey esNode;\n   private static final long DEFAULT_COOL_OFF_PERIOD_IN_MILLIS = TimeUnit.DAYS.toMillis(3);\n-  private static final long GB_TO_B = 1024 * 1024 * 1024;\n+  private final long memoryThreshold;\n \n   public HeapSizeIncreaseAction(@Nonnull final AppContext appContext) {\n+    this(appContext, HeapSizeIncreasePolicyConfig.DEFAULT_MIN_TOTAL_MEM_IN_GB * GB_TO_B);\n+  }\n+\n+  public HeapSizeIncreaseAction(@Nonnull final AppContext appContext, final long memoryThreshold) {\n     super(appContext);\n     this.esNode = new NodeKey(appContext.getMyInstanceDetails());\n-    this.canUpdate = Runtime.getRuntime().totalMemory() > 200;\n+    this.memoryThreshold = memoryThreshold;\n+    this.canUpdate = Runtime.getRuntime().totalMemory() > memoryThreshold;\n   }\n \n   /**\n    * Constructor used when building the action from a summary.\n    */\n   public HeapSizeIncreaseAction(final NodeKey nodeKey, final boolean canUpdate,\n-      final AppContext appContext) {\n+      final AppContext appContext, final long memoryThreshold) {\n     super(appContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NDgyOA=="}, "originalCommit": {"oid": "752472e60e09d605d8e23d9ffaf9075faa9e7159"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDMxNDg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HeapSizeIncreasePolicyConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDowMjowNlrOHgRCsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDowMjowNlrOHgRCsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NTY5Nw==", "bodyText": "Neat! This is a compact way of doing it", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503595697", "createdAt": "2020-10-13T00:02:06Z", "author": {"login": "sidheart"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HeapSizeIncreasePolicyConfig.java", "diffHunk": "@@ -19,20 +19,37 @@\n \n public class HeapSizeIncreasePolicyConfig {\n \n-  private static final String POLICY_NAME = \"HeapSizeIncreasePolicy\";\n+  private static final String POLICY_NAME = \"heap-size-increase-policy\";\n   public static final int DEFAULT_UNHEALTHY_NODE_PERCENTAGE = 50;\n+  public static final int DEFAULT_MIN_TOTAL_MEM_IN_GB = 200;\n   public static final int DEFAULT_MIN_UNHEALTHY_MINUTES = 2 * 24 * 60;\n+  private static final int DEFAULT_DAY_BREACH_THRESHOLD = 8;\n+  private static final int DEFAULT_WEEK_BREACH_THRESHOLD = 3;\n   private final int unhealthyNodePercentage;\n+  private final int dayBreachThreshold;\n+  private final int weekBreachThreshold;\n+  private final int minimumTotalMemoryInGB;\n \n \n   public HeapSizeIncreasePolicyConfig(final RcaConf rcaConf) {\n     this.unhealthyNodePercentage = rcaConf.readRcaConfig(POLICY_NAME,\n         HeapSizeIncreasePolicyKeys.UNHEALTHY_NODE_PERCENTAGE_KEY.toString(),\n         DEFAULT_UNHEALTHY_NODE_PERCENTAGE, Integer.class);\n+    this.dayBreachThreshold = rcaConf.readRcaConfig(POLICY_NAME,\n+        HeapSizeIncreasePolicyKeys.DAY_BREACH_THRESHOLD_KEY.toString(), DEFAULT_DAY_BREACH_THRESHOLD,\n+        Integer.class);\n+    this.weekBreachThreshold = rcaConf\n+        .readRcaConfig(POLICY_NAME, HeapSizeIncreasePolicyKeys.WEEK_BREACH_THRESHOLD_KEY\n+            .toString(), DEFAULT_WEEK_BREACH_THRESHOLD, Integer.class);\n+    this.minimumTotalMemoryInGB = rcaConf.readRcaConfig(POLICY_NAME,\n+        HeapSizeIncreasePolicyKeys.MIN_TOTAL_MEM_IN_GB.toString(), DEFAULT_MIN_TOTAL_MEM_IN_GB, Integer.class);\n   }\n \n   enum HeapSizeIncreasePolicyKeys {\n-    UNHEALTHY_NODE_PERCENTAGE_KEY(\"unhealthy-node-percentage\");\n+    UNHEALTHY_NODE_PERCENTAGE_KEY(\"unhealthy-node-percentage\"),\n+    DAY_BREACH_THRESHOLD_KEY(\"day-breach-threshold\"),\n+    WEEK_BREACH_THRESHOLD_KEY(\"week-breach-threshold\"),\n+    MIN_TOTAL_MEM_IN_GB(\"minimum-total-memory-in-gigabytes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752472e60e09d605d8e23d9ffaf9075faa9e7159"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDMyMDAwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/resources/rca_master.conf", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDowNTowOVrOHgRFtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMDozNzoyNVrOHgRl1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NjQ3MQ==", "bodyText": "This doesn't matter at all for the IT right? @ARcaGraph will be taken over this?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503596471", "createdAt": "2020-10-13T00:05:09Z", "author": {"login": "sidheart"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/resources/rca_master.conf", "diffHunk": "@@ -0,0 +1,94 @@\n+{\n+  \"analysis-graph-implementor\":\n+    \"com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.AnalysisGraphTest\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "752472e60e09d605d8e23d9ffaf9075faa9e7159"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYwNDY5Mg==", "bodyText": "yeah.. that's right.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503604692", "createdAt": "2020-10-13T00:37:25Z", "author": {"login": "ktkrg"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/resources/rca_master.conf", "diffHunk": "@@ -0,0 +1,94 @@\n+{\n+  \"analysis-graph-implementor\":\n+    \"com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.AnalysisGraphTest\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU5NjQ3MQ=="}, "originalCommit": {"oid": "752472e60e09d605d8e23d9ffaf9075faa9e7159"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDgwNjgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/resources/rca.conf", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTowMTo1OVrOHgVdiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTo0MToxNFrOHg6gwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2ODEwNA==", "bodyText": "Do we need this full config file? Is it possible to just pass the test config as a string here?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503668104", "createdAt": "2020-10-13T05:01:59Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/resources/rca.conf", "diffHunk": "@@ -0,0 +1,91 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2fd9025703306ae6a9c71c29b66b86efaf3b7d"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3NTEzOA==", "bodyText": "I just wanted to have full confidence in the framework being able to read the relevant sections of the config file and apply them correctly.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r504275138", "createdAt": "2020-10-13T21:41:14Z", "author": {"login": "ktkrg"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/resources/rca.conf", "diffHunk": "@@ -0,0 +1,91 @@\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2ODEwNA=="}, "originalCommit": {"oid": "da2fd9025703306ae6a9c71c29b66b86efaf3b7d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDgxMDg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/validator/HeapSizeIncreaseValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTowNDoyOFrOHgVf7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTo0MToyNFrOHg6hAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2ODcxOA==", "bodyText": "Can we check more action attributes, like impacted node IPs & IDs, cool off period, action name etc. (similar to here) ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503668718", "createdAt": "2020-10-13T05:04:28Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/validator/HeapSizeIncreaseValidator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+\n+public class HeapSizeIncreaseValidator implements IValidator {\n+\n+  AppContext appContext;\n+  long startTime;\n+\n+  public HeapSizeIncreaseValidator() {\n+    appContext = new AppContext();\n+    startTime = System.currentTimeMillis();\n+  }\n+\n+  @Override\n+  public boolean checkDbObj(Object object) {\n+    if (object == null) {\n+      return false;\n+    }\n+\n+    PersistedAction persistedAction = (PersistedAction) object;\n+    return checkPersistedAction(persistedAction);\n+  }\n+\n+  private boolean checkPersistedAction(final PersistedAction persistedAction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2fd9025703306ae6a9c71c29b66b86efaf3b7d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3NTIwMw==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r504275203", "createdAt": "2020-10-13T21:41:24Z", "author": {"login": "ktkrg"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/validator/HeapSizeIncreaseValidator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.HeapSizeIncreaseAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.api.IValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+\n+public class HeapSizeIncreaseValidator implements IValidator {\n+\n+  AppContext appContext;\n+  long startTime;\n+\n+  public HeapSizeIncreaseValidator() {\n+    appContext = new AppContext();\n+    startTime = System.currentTimeMillis();\n+  }\n+\n+  @Override\n+  public boolean checkDbObj(Object object) {\n+    if (object == null) {\n+      return false;\n+    }\n+\n+    PersistedAction persistedAction = (PersistedAction) object;\n+    return checkPersistedAction(persistedAction);\n+  }\n+\n+  private boolean checkPersistedAction(final PersistedAction persistedAction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2ODcxOA=="}, "originalCommit": {"oid": "da2fd9025703306ae6a9c71c29b66b86efaf3b7d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDgxNTM2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNTowNjozNlrOHgViWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTo0MTozMVrOHg6hLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2OTMzNw==", "bodyText": "We should also add an IT for Dedicated master setup. In that test, we should simulate that the dedicated master is only aggregating metrics from the data node.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r503669337", "createdAt": "2020-10-13T05:06:36Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseIT.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect.Type;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator.HeapSizeIncreaseValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da2fd9025703306ae6a9c71c29b66b86efaf3b7d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3NTI0NA==", "bodyText": "Done.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r504275244", "createdAt": "2020-10-13T21:41:31Z", "author": {"login": "ktkrg"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseIT.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect.Type;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator.HeapSizeIncreaseValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2OTMzNw=="}, "originalCommit": {"oid": "da2fd9025703306ae6a9c71c29b66b86efaf3b7d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODcwMjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/HighOldGenOccupancyRca.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTo1MTowN1rOHg6xKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0NToyMlrOHg8FTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3OTMzOQ==", "bodyText": "nit: remove", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r504279339", "createdAt": "2020-10-13T21:51:07Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/HighOldGenOccupancyRca.java", "diffHunk": "@@ -96,6 +101,9 @@ public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n     if (averageUtilizationPercentage >= heapUtilizationThreshold) {\n       context = new ResourceContext(State.UNHEALTHY);\n     }\n+    this.previousSummary = summary;\n+    this.previousContext = context;\n+    LOG.warn(\"kak: returning OCCUPANCY: {}\", context.getState().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca26530ae566904ede0a3cc3983025d7d81be47"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMDg3Ng==", "bodyText": "Removed.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r504300876", "createdAt": "2020-10-13T22:45:22Z", "author": {"login": "ktkrg"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/jvmsizing/HighOldGenOccupancyRca.java", "diffHunk": "@@ -96,6 +101,9 @@ public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n     if (averageUtilizationPercentage >= heapUtilizationThreshold) {\n       context = new ResourceContext(State.UNHEALTHY);\n     }\n+    this.previousSummary = summary;\n+    this.previousContext = context;\n+    LOG.warn(\"kak: returning OCCUPANCY: {}\", context.getState().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI3OTMzOQ=="}, "originalCommit": {"oid": "eca26530ae566904ede0a3cc3983025d7d81be47"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODcxNTgwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseDedicatedMasterIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTo1NjowNFrOHg65dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0NToxNlrOHg8FIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4MTQ2MQ==", "bodyText": "Decider should not be getting metrics from master node", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r504281461", "createdAt": "2020-10-13T21:56:04Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseDedicatedMasterIT.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect.Type;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator.HeapSizeIncreaseValidatorDedicatedMaster;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+@ARcaConf(dataNode = JvmSizingITConstants.RCA_CONF_PATH + \"rca.conf\", electedMaster =\n+    JvmSizingITConstants.RCA_CONF_PATH + \"rca_master.conf\")\n+@AMetric(\n+    name = Heap_Max.class,\n+    dimensionNames = {Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, min = 1000000000.0, max = 1000000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.DATA_1,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, min = 1000000000.0, max = 1000000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca26530ae566904ede0a3cc3983025d7d81be47"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMDgzNA==", "bodyText": "Removed elected master metrics for the dedicated master IT.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r504300834", "createdAt": "2020-10-13T22:45:16Z", "author": {"login": "ktkrg"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseDedicatedMasterIT.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect.Type;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator.HeapSizeIncreaseValidatorDedicatedMaster;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+@ARcaConf(dataNode = JvmSizingITConstants.RCA_CONF_PATH + \"rca.conf\", electedMaster =\n+    JvmSizingITConstants.RCA_CONF_PATH + \"rca_master.conf\")\n+@AMetric(\n+    name = Heap_Max.class,\n+    dimensionNames = {Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, min = 1000000000.0, max = 1000000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.DATA_1,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, min = 1000000000.0, max = 1000000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4MTQ2MQ=="}, "originalCommit": {"oid": "eca26530ae566904ede0a3cc3983025d7d81be47"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODcyMDYzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseDedicatedMasterIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTo1NzozOVrOHg68JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTo1NzozOVrOHg68JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4MjE0OA==", "bodyText": "We should also do ITs where nodes emit different values for Heap Used and other such metrics. Plus the case where only one or two nodes are bad (<threshold) and so we don't see the action.\nThis PR is already huge, we can add these additional ITs in a separate PR.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r504282148", "createdAt": "2020-10-13T21:57:39Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseDedicatedMasterIT.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect.Type;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator.HeapSizeIncreaseValidatorDedicatedMaster;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+@ARcaConf(dataNode = JvmSizingITConstants.RCA_CONF_PATH + \"rca.conf\", electedMaster =\n+    JvmSizingITConstants.RCA_CONF_PATH + \"rca_master.conf\")\n+@AMetric(\n+    name = Heap_Max.class,\n+    dimensionNames = {Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, min = 1000000000.0, max = 1000000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.DATA_1,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, min = 1000000000.0, max = 1000000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, max = 1000000000.0, min = 1000000000.0\n+                )\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = Heap_Used.class,\n+    dimensionNames = {Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 950000000.0, avg = 950000000.0, min = 950000000.0, max = 950000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.DATA_1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca26530ae566904ede0a3cc3983025d7d81be47"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODcyMjMwOnYy", "diffSide": "LEFT", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/validator/HeapSizeIncreaseValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMTo1ODoyMVrOHg69Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0NToyOVrOHg8Fcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4MjQzMQ==", "bodyText": "Did we remove this license header?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r504282431", "createdAt": "2020-10-13T21:58:21Z", "author": {"login": "vigyasharma"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/validator/HeapSizeIncreaseValidator.java", "diffHunk": "@@ -1,28 +1,10 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca26530ae566904ede0a3cc3983025d7d81be47"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMDkxNQ==", "bodyText": "Added.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r504300915", "createdAt": "2020-10-13T22:45:29Z", "author": {"login": "ktkrg"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/validator/HeapSizeIncreaseValidator.java", "diffHunk": "@@ -1,28 +1,10 @@\n-/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI4MjQzMQ=="}, "originalCommit": {"oid": "eca26530ae566904ede0a3cc3983025d7d81be47"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzcxMTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzoyOToyNFrOHhqxUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMzoyOToyNFrOHhqxUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA2NTgwOQ==", "bodyText": "good ! readability matters. Thanks a lot", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/439#discussion_r505065809", "createdAt": "2020-10-14T23:29:24Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -110,8 +114,10 @@\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n-  private static final int RCA_PERIOD = 12;  // 1 minute. RCA_PERIOD is measured as number of EVALUATION_INTERVAL_SECONDS\n   private static final int EVALUATION_INTERVAL_SECONDS = 5;\n+  private static final int SECONDS_IN_MIN = 60;\n+  // 1 minute. RCA_PERIOD is measured as number of EVALUATION_INTERVAL_SECONDS\n+  private static final int RCA_PERIOD = SECONDS_IN_MIN / EVALUATION_INTERVAL_SECONDS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4ed4cd51af9b450d71659d3d54ea0696476c7a9"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2410, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}