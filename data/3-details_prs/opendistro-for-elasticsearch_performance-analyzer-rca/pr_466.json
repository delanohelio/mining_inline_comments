{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyNzU2Nzg0", "number": 466, "title": "Add Master Throttling Metric", "bodyText": "Description of changes:\nAdd Metrics for Master Throttling of Pending tasks. It will publish two metric 1) Total throttled tasks at master node 2) Number of task on which data node is actively retrying. This feature is yet to be contributed to Opensource ES. I have added the check for availability of this feature in collector so building with or without this feature will pass. If this feature is not available then collector will simply return.\nPR of Performance Analyzer Plugin : opendistro-for-elasticsearch/performance-analyzer#217\nTests:\nTesting\n\n/gradlew test Successful\n\nSUCCESS: Executed 455 tests in 40m 43s (1 skipped)\n\nBUILD SUCCESSFUL in 41m 8s\n11 actionable tasks: 8 executed, 3 up-to-date\n\n\nTested in test domain by replacing JAR.\n\nTmp file\n^master_throttling_metrics\n{\"current_time\":1602617137529}\n{\"Data_RetryingPendingTasksCount\":0,\"Master_ThrottledPendingTasksCount\":0}$\n\nVerified metric from table\nsqlite> select * from Master_ThrottledPendingTasksCount;\n0.0|0.0|0.0|0.0\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-10-13T19:47:22Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466", "merged": true, "mergeCommit": {"oid": "a8f7adb9af9f306d3f0b8383d205c7121c0df38b"}, "closed": true, "closedAt": "2020-10-20T21:26:30Z", "author": {"login": "dhwanilpatel"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSN5GCAH2gAyNTAyNzU2Nzg0OjVlNWNmMTU2NTQ4MmE3YzljNWVjMjJhZDJmYWUwOWJhMjJmNzhiYzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUfky1AFqTUxMzE0NDY3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4", "author": {"user": {"login": "dhwanilpatel", "name": "Dhwanil Patel"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4", "committedDate": "2020-10-13T19:39:00Z", "message": "Add Master Throttling Metric"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNzQ4NzEy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#pullrequestreview-510748712", "createdAt": "2020-10-16T19:33:59Z", "commit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTozMzo1OVrOHjNcmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTozODowOVrOHjNjsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MjUyMw==", "bodyText": "Can we add a javadoc as what this metric means (for both of them).", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r506682523", "createdAt": "2020-10-16T19:33:59Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metrics/AllMetrics.java", "diffHunk": "@@ -821,6 +821,27 @@ public String toString() {\n     }\n   }\n \n+  public enum MasterThrottlingValue implements MetricValue {\n+    MASTER_THROTTLED_PENDING_TASK_COUNT(MasterThrottlingValue.Constants.THROTTLED_PENDING_TASK_COUNT),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NDMzOA==", "bodyText": "Should we put this inside try/catch ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r506684338", "createdAt": "2020-10-16T19:38:09Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private MasterThrottlingMetricsEventProcessor(MasterThrottlingMetricsSnapshot snapshot) {\n+        this.masterThrottlingMetricsSnapshot = snapshot;\n+    }\n+\n+    static MasterThrottlingMetricsEventProcessor buildMasterThrottlingMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, MasterThrottlingMetricsSnapshot> masterThroEventMetricsMap) {\n+        MasterThrottlingMetricsSnapshot masterThrottlingSnapshot = masterThroEventMetricsMap.get(currWindowStartTime);\n+        if (masterThrottlingSnapshot == null) {\n+            masterThrottlingSnapshot = new MasterThrottlingMetricsSnapshot(conn, currWindowStartTime);\n+            masterThroEventMetricsMap.put(currWindowStartTime, masterThrottlingSnapshot);\n+        }\n+        return new MasterThrottlingMetricsEventProcessor(masterThrottlingSnapshot);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {\n+        this.handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+    }\n+\n+    @Override\n+    public void finalizeProcessing() {\n+        if (handle.size() > 0) {\n+            handle.execute();\n+        }\n+        LOG.debug(\"Final Master Throttling metrics {}\", masterThrottlingMetricsSnapshot.fetchAll());\n+    }\n+\n+    /**\n+     * Sample event:\n+     * ^master_throttling_metrics\n+     * {\"current_time\":1602617137529}\n+     * {\"Data_RetryingPendingTasksCount\":0,\"Master_ThrottledPendingTasksCount\":0}$\n+     *\n+     * @param event event\n+     */\n+    @Override\n+    public void processEvent(Event event) {\n+        String[] lines = event.value.split(System.lineSeparator());\n+        for (String line : lines) {\n+            Map<String, String> masterThrottlingMap = extractEntryData(line);\n+            if (!masterThrottlingMap.containsKey(PerformanceAnalyzerMetrics.METRIC_CURRENT_TIME)) {\n+                handle.bind(\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.DATA_RETRYING_TASK_COUNT.toString())),\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.MASTER_THROTTLED_PENDING_TASK_COUNT.toString())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMzkyNDA4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#pullrequestreview-511392408", "createdAt": "2020-10-19T03:37:52Z", "commit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzozNzo1M1rOHj6KHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzo1MDo0OVrOHj6ihg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTA2OQ==", "bodyText": "masterThrottlingMetricsSnapshot as final?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507415069", "createdAt": "2020-10-19T03:37:53Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTgzOQ==", "bodyText": "return  MAPPER.readValue(line, TYPE_REF); ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507415839", "createdAt": "2020-10-19T03:38:57Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsEventProcessor.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.PerformanceAnalyzerMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader_writer_shared.Event;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+\n+public class MasterThrottlingMetricsEventProcessor implements EventProcessor {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsEventProcessor.class);\n+    private MasterThrottlingMetricsSnapshot masterThrottlingMetricsSnapshot;\n+    private BatchBindStep handle;\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private static final TypeReference<HashMap<String, String>> TYPE_REF = new TypeReference<HashMap<String, String>>() {};\n+\n+    private MasterThrottlingMetricsEventProcessor(MasterThrottlingMetricsSnapshot snapshot) {\n+        this.masterThrottlingMetricsSnapshot = snapshot;\n+    }\n+\n+    static MasterThrottlingMetricsEventProcessor buildMasterThrottlingMetricEventsProcessor(\n+            long currWindowStartTime,\n+            Connection conn,\n+            NavigableMap<Long, MasterThrottlingMetricsSnapshot> masterThroEventMetricsMap) {\n+        MasterThrottlingMetricsSnapshot masterThrottlingSnapshot = masterThroEventMetricsMap.get(currWindowStartTime);\n+        if (masterThrottlingSnapshot == null) {\n+            masterThrottlingSnapshot = new MasterThrottlingMetricsSnapshot(conn, currWindowStartTime);\n+            masterThroEventMetricsMap.put(currWindowStartTime, masterThrottlingSnapshot);\n+        }\n+        return new MasterThrottlingMetricsEventProcessor(masterThrottlingSnapshot);\n+    }\n+\n+    @Override\n+    public void initializeProcessing(long startTime, long endTime) {\n+        this.handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+    }\n+\n+    @Override\n+    public void finalizeProcessing() {\n+        if (handle.size() > 0) {\n+            handle.execute();\n+        }\n+        LOG.debug(\"Final Master Throttling metrics {}\", masterThrottlingMetricsSnapshot.fetchAll());\n+    }\n+\n+    /**\n+     * Sample event:\n+     * ^master_throttling_metrics\n+     * {\"current_time\":1602617137529}\n+     * {\"Data_RetryingPendingTasksCount\":0,\"Master_ThrottledPendingTasksCount\":0}$\n+     *\n+     * @param event event\n+     */\n+    @Override\n+    public void processEvent(Event event) {\n+        String[] lines = event.value.split(System.lineSeparator());\n+        for (String line : lines) {\n+            Map<String, String> masterThrottlingMap = extractEntryData(line);\n+            if (!masterThrottlingMap.containsKey(PerformanceAnalyzerMetrics.METRIC_CURRENT_TIME)) {\n+                handle.bind(\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.DATA_RETRYING_TASK_COUNT.toString())),\n+                        Long.parseLong(masterThrottlingMap.get(\n+                                AllMetrics.MasterThrottlingValue.MASTER_THROTTLED_PENDING_TASK_COUNT.toString())));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean shouldProcessEvent(Event event) {\n+        return event.key.contains(PerformanceAnalyzerMetrics.sMasterThrottledTasksPath);\n+    }\n+\n+    @Override\n+    public void commitBatchIfRequired() {\n+        if (handle.size() > BATCH_LIMIT) {\n+            handle.execute();\n+            handle = masterThrottlingMetricsSnapshot.startBatchPut();\n+        }\n+    }\n+\n+    static Map<String, String> extractEntryData(String line) {\n+        try {\n+            Map<String, String> map = MAPPER.readValue(line, TYPE_REF);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQyMTMxOA==", "bodyText": "Lets remove this unused variable.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#discussion_r507421318", "createdAt": "2020-10-19T03:50:49Z", "author": {"login": "aditjind"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/MasterThrottlingMetricsSnapshot.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.reader;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.DBUtils;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import java.sql.Connection;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jooq.BatchBindStep;\n+import org.jooq.DSLContext;\n+import org.jooq.Field;\n+import org.jooq.Record;\n+import org.jooq.Result;\n+import org.jooq.SQLDialect;\n+import org.jooq.SelectField;\n+import org.jooq.impl.DSL;\n+\n+public class MasterThrottlingMetricsSnapshot implements Removable {\n+    private static final Logger LOG = LogManager.getLogger(MasterThrottlingMetricsSnapshot.class);\n+\n+    private final DSLContext create;\n+    private final Long windowStartTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cf1565482a7c9c5ec22ad2fae09ba22f78bc4"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39aa80961057324e3700f383f03993dce395aa73", "author": {"user": {"login": "dhwanilpatel", "name": "Dhwanil Patel"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/39aa80961057324e3700f383f03993dce395aa73", "committedDate": "2020-10-19T13:12:42Z", "message": "Merge pull request #1 from opendistro-for-elasticsearch/master\n\nSyncing my fork with ODFE master."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1794a18afeacad9cb8060f9b2efd609701c2aaea", "author": {"user": {"login": "dhwanilpatel", "name": "Dhwanil Patel"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1794a18afeacad9cb8060f9b2efd609701c2aaea", "committedDate": "2020-10-19T17:36:35Z", "message": "Incorporated PR comments for MasterThrottling Metric"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMTgxMzcy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#pullrequestreview-512181372", "createdAt": "2020-10-19T21:43:25Z", "commit": {"oid": "1794a18afeacad9cb8060f9b2efd609701c2aaea"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbdbf616416e81e9f030905db9f2234fa9e68d11", "author": {"user": {"login": "dhwanilpatel", "name": "Dhwanil Patel"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/cbdbf616416e81e9f030905db9f2234fa9e68d11", "committedDate": "2020-10-20T20:21:41Z", "message": "Merge remote-tracking branch 'upstream/master' into masterThrottlingMetric"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16e48f593f708ff2236caa8751a72239f8a6be5b", "author": {"user": {"login": "dhwanilpatel", "name": "Dhwanil Patel"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/16e48f593f708ff2236caa8751a72239f8a6be5b", "committedDate": "2020-10-20T20:45:51Z", "message": "Added reader/writer execution metrics for Masther throttling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMTMyODcx", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#pullrequestreview-513132871", "createdAt": "2020-10-20T21:05:02Z", "commit": {"oid": "16e48f593f708ff2236caa8751a72239f8a6be5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMTQ0Njc5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/466#pullrequestreview-513144679", "createdAt": "2020-10-20T21:22:58Z", "commit": {"oid": "16e48f593f708ff2236caa8751a72239f8a6be5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 783, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}