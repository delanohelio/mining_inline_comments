{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMjEwODk4", "number": 433, "title": "Persist published actions in sqlite", "bodyText": "Fixes #:\nDescription of changes:\nPersist published actions in sqlite\nsqlite> .tables\nHotClusterSummary   HotResourceSummary  RCA               \nHotNodeSummary      PersistedAction   \nsqlite> select * from PersistedAction\n   ...> ;\nPersistedAction_ID  nodeIps      muted       actionName          timestamp      nodeIds     summary                                                                       actionable  coolOffPeriod\n------------------  -----------  ----------  ------------------  -------------  ----------  ----------------------------------------------------------------------------  ----------  -------------\n1                   {127.0.0.1}  0           ModifyCacheMaxSize  1600883515101  {DATA_0}    Update [FIELD_DATA_CACHE] capacity from [10000] to [100000] on node [DATA_0]  1           300000       \n\nTests:\nunit tests\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-09-22T21:42:57Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433", "merged": true, "mergeCommit": {"oid": "5bd53d54348e5e47bec5ce99e71fbba749c91766"}, "closed": true, "closedAt": "2020-09-23T18:07:03Z", "author": {"login": "sruti1312"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLfDrygH2gAyNDkxMjEwODk4OmYwZTgzZTRlMTExZWRjYmRjZGQyNzVlY2M1Y2Q2ZDYzMjAwYzQyNzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLkfFMAFqTQ5NDAxMjg5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f0e83e4e111edcbdcdd275ecc5cd6d63200c4273", "author": {"user": {"login": "sruti1312", "name": "Sruti Parthiban"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f0e83e4e111edcbdcdd275ecc5cd6d63200c4273", "committedDate": "2020-09-22T21:41:29Z", "message": "Persist actions in sqlite"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTI2MTQ1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433#pullrequestreview-493926145", "createdAt": "2020-09-23T00:08:05Z", "commit": {"oid": "f0e83e4e111edcbdcdd275ecc5cd6d63200c4273"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDowODowNVrOHWQeyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDozOToxMlrOHWQ_og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMDc0NQ==", "bodyText": "It might be a good idea to add javadocs for all public methods.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433#discussion_r493100745", "createdAt": "2020-09-23T00:08:05Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -55,7 +56,11 @@ public Publisher(int evalIntervalSeconds, Collator collator) {\n \n   @Override\n   public EmptyFlowUnit operate() {\n-    // TODO: Need to add dampening, avoidance, state persistence etc.\n+    return new EmptyFlowUnit(Instant.now().toEpochMilli());\n+  }\n+\n+  public void compute(FlowUnitOperationArgWrapper args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e83e4e111edcbdcdd275ecc5cd6d63200c4273"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMDk3OA==", "bodyText": "Maybe we want to verify that the size is 1 ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433#discussion_r493100978", "createdAt": "2020-09-23T00:08:59Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Publisher.java", "diffHunk": "@@ -55,7 +56,11 @@ public Publisher(int evalIntervalSeconds, Collator collator) {\n \n   @Override\n   public EmptyFlowUnit operate() {\n-    // TODO: Need to add dampening, avoidance, state persistence etc.\n+    return new EmptyFlowUnit(Instant.now().toEpochMilli());\n+  }\n+\n+  public void compute(FlowUnitOperationArgWrapper args) {\n+    // TODO: Need to add dampening, avoidance etc.\n     Decision decision = collator.getFlowUnits().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e83e4e111edcbdcdd275ecc5cd6d63200c4273"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwMTkwMQ==", "bodyText": "Awesome ! Thanks for adding these metrics", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433#discussion_r493101901", "createdAt": "2020-09-23T00:11:59Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/metrics/RcaRuntimeMetrics.java", "diffHunk": "@@ -43,7 +43,12 @@\n    * Metric tracking if RCA is enabled or disabled. We write a 0 if RCA is disabled and 1 if it is\n    * enabled.\n    */\n-  RCA_ENABLED(\"RcaEnabled\", \"count\", Collections.singletonList(Statistics.SAMPLE));\n+  RCA_ENABLED(\"RcaEnabled\", \"count\", Collections.singletonList(Statistics.SAMPLE)),\n+\n+  /**\n+   * Metric tracking the actions published by the publisher that are persisted in sqlite.\n+   */\n+  ACTIONS_PUBLISHED(\"ActionsPublished\", \"namedCount\", Collections.singletonList(Statistics.NAMED_COUNTERS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e83e4e111edcbdcdd275ecc5cd6d63200c4273"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwNzI3OA==", "bodyText": "Maybe this.name() is a redundant dimension for this metric as it does not change from action to action. Do we want to capture the name of the Action we wanted to persist ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433#discussion_r493107278", "createdAt": "2020-09-23T00:31:57Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ExceptionsAndErrors;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.RcaRuntimeMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import java.time.Instant;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * A listener that persists all actions published by the publisher to rca.sqlite\n+ */\n+public class PublisherEventsPersistor {\n+    public static final String NAME = \"publisher_events_persistor\";\n+    private static final Logger LOG = LogManager.getLogger(PublisherEventsPersistor.class);\n+\n+    private final Persistable persistable;\n+\n+    public PublisherEventsPersistor(final Persistable persistable) {\n+        this.persistable = persistable;\n+    }\n+\n+    public void persistAction(final Action action) {\n+        long timestamp = Instant.now().toEpochMilli();\n+        if (persistable != null) {\n+            LOG.debug(\"Action: [{}] published to persistor publisher.\", action.name());\n+            PerformanceAnalyzerApp.RCA_RUNTIME_METRICS_AGGREGATOR.updateStat(\n+                    RcaRuntimeMetrics.ACTIONS_PUBLISHED, action.name(), 1);\n+            if (action.impactedNodes() != null) {\n+                final String nodeIds = action.impactedNodes().stream()\n+                                        .map(n -> n.getNodeId().toString())\n+                                        .collect(Collectors.joining(\",\", \"{\", \"}\"));\n+                final String nodeIps = action.impactedNodes().stream()\n+                                         .map(n -> n.getHostAddress().toString())\n+                                         .collect(Collectors.joining(\",\", \"{\", \"}\"));\n+                final PersistedAction actionsSummary = new PersistedAction();\n+                actionsSummary.setActionName(action.name());\n+                actionsSummary.setNodeIds(nodeIds);\n+                actionsSummary.setNodeIps(nodeIps);\n+                actionsSummary.setActionable(action.isActionable());\n+                actionsSummary.setCoolOffPeriod(action.coolOffPeriodInMillis());\n+                actionsSummary.setMuted(action.isMuted());\n+                actionsSummary.setSummary(action.summary());\n+                actionsSummary.setTimestamp(timestamp);\n+                try {\n+                    persistable.write(actionsSummary);\n+                } catch (Exception e) {\n+                    LOG.error(\"Unable to write publisher events to sqlite\", e);\n+                    PerformanceAnalyzerApp.ERRORS_AND_EXCEPTIONS_AGGREGATOR.updateStat(\n+                            ExceptionsAndErrors.EXCEPTION_IN_PERSIST, this.name(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e83e4e111edcbdcdd275ecc5cd6d63200c4273"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEwOTE1NA==", "bodyText": "Because persistable is assigned in the constructor and this is declared final, maybe we can do something like Objects.requireNonNull in the constructor and remove the if else here ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433#discussion_r493109154", "createdAt": "2020-09-23T00:39:12Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PublisherEventsPersistor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.PerformanceAnalyzerApp;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.Action;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ExceptionsAndErrors;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.RcaRuntimeMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import java.time.Instant;\n+import java.util.stream.Collectors;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * A listener that persists all actions published by the publisher to rca.sqlite\n+ */\n+public class PublisherEventsPersistor {\n+    public static final String NAME = \"publisher_events_persistor\";\n+    private static final Logger LOG = LogManager.getLogger(PublisherEventsPersistor.class);\n+\n+    private final Persistable persistable;\n+\n+    public PublisherEventsPersistor(final Persistable persistable) {\n+        this.persistable = persistable;\n+    }\n+\n+    public void persistAction(final Action action) {\n+        long timestamp = Instant.now().toEpochMilli();\n+        if (persistable != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e83e4e111edcbdcdd275ecc5cd6d63200c4273"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTM3NzY2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433#pullrequestreview-493937766", "createdAt": "2020-09-23T00:48:08Z", "commit": {"oid": "f0e83e4e111edcbdcdd275ecc5cd6d63200c4273"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo0ODowOFrOHWRInQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMDo0ODowOFrOHWRInQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExMTQ1Mw==", "bodyText": "nit: should we make this a nested static class in PublisherEventsPersistor ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433#discussion_r493111453", "createdAt": "2020-09-23T00:48:08Z", "author": {"login": "vigyasharma"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/actions/PersistedAction.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.ValueColumn;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/**\n+ * Action summary that can be persisted in SQL\n+ *\n+ * <p>Table name : PersistedAction\n+ *\n+ * <p>schema :\n+ * | id(primary key) |     actionName       |   timestamp       |       nodeIds          |\n+ * |      1          | ModifyQueueCapacity  |  1599257910923    |   node1, node2         |\n+ * |        nodeIps         | actionable | coolOffPeriod    |  muted    |   summary         |\n+ * | 127.0.0.1, 127.0.0.2   |  1         |  300             |   0       | actionSummary     |\n+ */\n+public class PersistedAction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e83e4e111edcbdcdd275ecc5cd6d63200c4273"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b093a7e79b2e5a160fc1b18be56dd04452e081f6", "author": {"user": {"login": "sruti1312", "name": "Sruti Parthiban"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b093a7e79b2e5a160fc1b18be56dd04452e081f6", "committedDate": "2020-09-23T01:23:06Z", "message": "Address PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTY4NzY4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433#pullrequestreview-493968768", "createdAt": "2020-09-23T01:29:40Z", "commit": {"oid": "b093a7e79b2e5a160fc1b18be56dd04452e081f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0MDEyODk4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/433#pullrequestreview-494012898", "createdAt": "2020-09-23T04:00:56Z", "commit": {"oid": "b093a7e79b2e5a160fc1b18be56dd04452e081f6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 921, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}