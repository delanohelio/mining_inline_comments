{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMTcyMDA5", "number": 87, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTozMzo0MVrODddKbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTo0NjoxNlrODddajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjEzMTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTozMzo0MVrOFmEg4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTozMzo0MVrOFmEg4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2NDE2Mg==", "bodyText": "can we make it screaming snake case for final fields ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/87#discussion_r375464162", "createdAt": "2020-02-05T19:33:41Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -48,11 +51,12 @@\n   protected String filenameParam;\n   protected String dbProtocol;\n   private static final int FILE_ROTATION_PERIOD_SECS = 3600;\n-  private static final int SQLITE_FILES_TO_KEEP = 5;\n+  private final int storageFileRetentionCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644505ebde0d1acd075e32e0b739f5ccda7b403b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjE3MjI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTo0NjoxNlrOFmE6dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDozNTo1M1rOFmGUpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3MDcwOA==", "bodyText": "The default constructor takes the current time new Date()", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/87#discussion_r375470708", "createdAt": "2020-02-05T19:46:16Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -122,14 +134,26 @@ public synchronized void openNewDBFile() throws SQLException {\n     createNewDSLContext();\n   }\n \n+  /**\n+   * This method check if there is a need to delete old sqlite files and create a new one.\n+   * Ideally we will be using new sqlite files at the start of every hour, ideally the whenever the\n+   * function write is called for the first time in that very hour\n+   */\n   public synchronized void rotateDBIfRequired() throws ParseException, SQLException {\n-    Date currTimeMs = new Date(System.currentTimeMillis());\n-    if ((currTimeMs.getTime() - this.fileCreateTime.getTime()) / 1000 > FILE_ROTATION_PERIOD_SECS) {\n+    LocalDateTime currentLocalDateTime = getLocalDateTimeFromDateObj(new Date(System.currentTimeMillis()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644505ebde0d1acd075e32e0b739f5ccda7b403b"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5Mzc5Ng==", "bodyText": "Done", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/87#discussion_r375493796", "createdAt": "2020-02-05T20:35:53Z", "author": {"login": "palashhedau"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -122,14 +134,26 @@ public synchronized void openNewDBFile() throws SQLException {\n     createNewDSLContext();\n   }\n \n+  /**\n+   * This method check if there is a need to delete old sqlite files and create a new one.\n+   * Ideally we will be using new sqlite files at the start of every hour, ideally the whenever the\n+   * function write is called for the first time in that very hour\n+   */\n   public synchronized void rotateDBIfRequired() throws ParseException, SQLException {\n-    Date currTimeMs = new Date(System.currentTimeMillis());\n-    if ((currTimeMs.getTime() - this.fileCreateTime.getTime()) / 1000 > FILE_ROTATION_PERIOD_SECS) {\n+    LocalDateTime currentLocalDateTime = getLocalDateTimeFromDateObj(new Date(System.currentTimeMillis()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3MDcwOA=="}, "originalCommit": {"oid": "644505ebde0d1acd075e32e0b739f5ccda7b403b"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2572, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}