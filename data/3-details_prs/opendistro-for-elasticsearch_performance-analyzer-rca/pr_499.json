{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODg0NTMy", "number": 499, "title": "Add ITs for JVM old gen policy", "bodyText": "\u2026Rest endpoint\nFixes #:\nDescription of changes:\nAdd ITs for JVM old gen policy. This PR fixes a few minor issues in IT framework to allow IT to retrieve persisted action list from rest endpoint. We also add six ITs to cover the happy scenario of old gen policy in JVM decider.\nThose ITs are :\nITs that triggers LevelOne/LevelTwo/LevelThree action builder (dedicated master / multinode)\nTests:\nIf new tests are added, how long do the new ones take to complete\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-10-28T22:58:47Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499", "merged": true, "mergeCommit": {"oid": "f07671c708e46d75d94334038f154a876fcc11bc"}, "closed": true, "closedAt": "2020-10-29T17:28:57Z", "author": {"login": "rguo-aws"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXFoyPAH2gAyNTExODg0NTMyOmI1MTlmOGE3NjIxYTM0ZGQ4ZTM2YjkxNDdkMzBmMDFhMjQzMGRiZjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXVm4TAFqTUxOTkwODcwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b519f8a7621a34dd8e36b9147d30f01a2430dbf0", "committedDate": "2020-10-28T22:51:34Z", "message": "Add ITs for JVM old gen policy. Retrieve persisted actions list from Rest endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MTU3OTA3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#pullrequestreview-519157907", "createdAt": "2020-10-28T23:30:09Z", "commit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzozMDowOVrOHqBMVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzozMDowOVrOHqBMVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyMTc4MQ==", "bodyText": "Should we just remove it ?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513821781", "createdAt": "2020-10-28T23:30:09Z", "author": {"login": "yojs"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -278,7 +278,7 @@ synchronized int insertRow(String tableName, List<Object> row) throws SQLExcepti\n       recordsWithMaxFieldValue = create.select().from(tableName).where(DSL.field(field)\n               .eq(create.select(max(field)).from(tableName))).fetch();\n     } catch (DataAccessException dex) {\n-      LOG.error(\"Error querying table {}\", tableName, dex);\n+      //LOG.warn(\"Error querying table {}\", tableName, dex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MTYyNzY0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#pullrequestreview-519162764", "createdAt": "2020-10-28T23:43:17Z", "commit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzo0MzoxN1rOHqBdHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMzo0ODo0M1rOHqBj-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNjA3OQ==", "bodyText": "Can we make this as an util class or rename as CacheClearActionSummary?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513826079", "createdAt": "2020-10-28T23:43:17Z", "author": {"login": "sruti1312"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/actions/CacheClearAction.java", "diffHunk": "@@ -120,4 +118,39 @@ public CacheClearAction build() {\n       return new CacheClearAction(appContext, coolOffPeriodInMillis, canUpdate);\n     }\n   }\n+\n+  public static class Summary {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgyNzgzMg==", "bodyText": "This is fixed with Sid's PR. We dont need to add them here", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513827832", "createdAt": "2020-10-28T23:48:43Z", "author": {"login": "sruti1312"}, "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvm/old_gen_policy/dedicated_master/LevelThreeDedicatedMasterITest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.FIELDDATA_CACHE_SIZE_IN_PERCENT;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.HEAP_MAX_SIZE_IN_BYTE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.dedicated_master.LevelThreeDedicatedMasterITest.SHARD_REQUEST_CACHE_SIZE_IN_PERCENT;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.cache.CacheUtil.GB_TO_BYTES;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.actions.configs.QueueActionConfig;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.ThreadPoolType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Cache_Max_Size;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ThreadPool_QueueCapacity;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvm.old_gen_policy.validator.LevelThreeValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+@RunWith(RcaItNotEncryptedRunner.class)\n+\n+@Category(RcaItMarker.class)\n+@AClusterType(ClusterType.MULTI_NODE_DEDICATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+@AMetric(name = Heap_Used.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.OLD_GEN_VALUE,\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * 0.96,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * 0.96),\n+            }\n+        )\n+    }\n+)\n+@AMetric(name = Heap_Max.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.HEAP_VALUE,\n+                    sum = HEAP_MAX_SIZE_IN_BYTE,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE,\n+                    min = HEAP_MAX_SIZE_IN_BYTE,\n+                    max = HEAP_MAX_SIZE_IN_BYTE),\n+            }\n+        )\n+    }\n+)\n+@AMetric(name = GC_Collection_Event.class,\n+    dimensionNames = {AllMetrics.HeapDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = {HostTag.DATA_0},\n+            tuple = {\n+                @ATuple(dimensionValues = AllMetrics.GCType.Constants.TOT_FULL_GC_VALUE,\n+                    sum = 1, avg = 1, min = 1, max = 1),\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = Cache_Max_Size.class,\n+    dimensionNames = {AllMetrics.CacheConfigDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {AllMetrics.CacheType.Constants.FIELD_DATA_CACHE_NAME},\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * FIELDDATA_CACHE_SIZE_IN_PERCENT),\n+                @ATuple(\n+                    dimensionValues = {AllMetrics.CacheType.Constants.SHARD_REQUEST_CACHE_NAME},\n+                    sum = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    avg = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    min = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT,\n+                    max = HEAP_MAX_SIZE_IN_BYTE * SHARD_REQUEST_CACHE_SIZE_IN_PERCENT)\n+            }),\n+    })\n+@AMetric(name = ThreadPool_QueueCapacity.class,\n+    dimensionNames = {ThreadPoolDimension.Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(dimensionValues = {ThreadPoolType.Constants.WRITE_NAME},\n+                    sum = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    avg = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    min = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200,\n+                    max = QueueActionConfig.DEFAULT_WRITE_QUEUE_UPPER_BOUND - 200),\n+                @ATuple(dimensionValues = {ThreadPoolType.Constants.SEARCH_NAME},\n+                    sum = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    avg = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    min = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200,\n+                    max = QueueActionConfig.DEFAULT_SEARCH_QUEUE_UPPER_BOUND - 200)\n+            }\n+        )\n+    }\n+)\n+public class LevelThreeDedicatedMasterITest {\n+  public static final long HEAP_MAX_SIZE_IN_BYTE = 10 * GB_TO_BYTES;\n+  public static final double FIELDDATA_CACHE_SIZE_IN_PERCENT = 0.3;\n+  public static final double SHARD_REQUEST_CACHE_SIZE_IN_PERCENT = 0.04;\n+\n+  @Test\n+  @AExpect(\n+      what = AExpect.Type.REST_API,\n+      on = HostTag.ELECTED_MASTER,\n+      validator = LevelThreeValidator.class,\n+      forRca = PersistedAction.class,\n+      timeoutSeconds = 1000)\n+  @AErrorPatternIgnored(\n+      pattern = \"CacheUtil:getCacheMaxSize()\",\n+      reason = \"Cache related configs are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"AggregateMetric:gather()\",\n+      reason = \"Cache metrics are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SubscribeResponseHandler:onError()\",\n+      reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+      reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageOldGenRca:operate()\",\n+      reason = \"Old gen rca is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"ModifyCacheMaxSizeAction:build()\",\n+      reason = \"Node config cache is expected to be missing during shutdown\")\n+  @AErrorPatternIgnored(\n+      pattern = \"NodeConfigCollector:collectAndPublishMetric()\",\n+      reason = \"Shard request cache metrics is expected to be missing\")\n+  @AErrorPatternIgnored(\n+      pattern = \"CacheUtil:getCacheMaxSize()\",\n+      reason = \"Shard request cache metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageYoungGenRca:operate()\",\n+      reason = \"YoungGen metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"PersistableSlidingWindow:<init>()\",\n+      reason = \"Persistence base path can be null for integration test.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MTk4MTk3", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#pullrequestreview-519198197", "createdAt": "2020-10-29T00:17:06Z", "commit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDoxNzowN1rOHqCFdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwMDoxNzowN1rOHqCFdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzgzNjQwNg==", "bodyText": "I see that you have updated OLD_GEN to HEAP. The method says getMaxOldGenSizeOrDefault. Is there a reason why this change was made? Do we want to rename the method?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#discussion_r513836406", "createdAt": "2020-10-29T00:17:07Z", "author": {"login": "sruti1312"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/OldGenRca.java", "diffHunk": "@@ -72,7 +73,7 @@ protected double getMaxOldGenSizeOrDefault(final double defaultValue) {\n       }\n       double ret =\n           SQLParsingUtil\n-              .readDataFromSqlResult(heapMaxMetric.getData(), MEM_TYPE.getField(), OLD_GEN.toString(), MetricsDB.MAX);\n+              .readDataFromSqlResult(heapMaxMetric.getData(), MEM_TYPE.getField(), HEAP.toString(), MetricsDB.MAX);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a3ffb78fa7ac32cacc03bcd4aa7c92f5ef0100a", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4a3ffb78fa7ac32cacc03bcd4aa7c92f5ef0100a", "committedDate": "2020-10-29T00:32:51Z", "message": "Merge remote-tracking branch 'origin' into rguo-jvm-decider-IT2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MjU3NDE5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#pullrequestreview-519257419", "createdAt": "2020-10-29T01:07:40Z", "commit": {"oid": "b519f8a7621a34dd8e36b9147d30f01a2430dbf0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ff3041eb088b9302421e154e191ca1c83c6802a", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2ff3041eb088b9302421e154e191ca1c83c6802a", "committedDate": "2020-10-29T01:39:06Z", "message": "address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6242ad517b033a85f4c19924371deb3f40924aa6", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6242ad517b033a85f4c19924371deb3f40924aa6", "committedDate": "2020-10-29T02:26:12Z", "message": "more update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7860be96d00cfb5fc78be9b4df849c9bbdbc0f4", "author": {"user": {"login": "rguo-aws", "name": "Ruizhen Guo"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e7860be96d00cfb5fc78be9b4df849c9bbdbc0f4", "committedDate": "2020-10-29T17:16:14Z", "message": "Address more IT failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5OTA1MDEy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#pullrequestreview-519905012", "createdAt": "2020-10-29T17:23:41Z", "commit": {"oid": "e7860be96d00cfb5fc78be9b4df849c9bbdbc0f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5OTA4NzA5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/499#pullrequestreview-519908709", "createdAt": "2020-10-29T17:27:58Z", "commit": {"oid": "e7860be96d00cfb5fc78be9b4df849c9bbdbc0f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 803, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}