{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2NjAxMjk3", "number": 534, "title": "Add more operational metrics for metrics processing", "bodyText": "Fixes #:\n#535\nDescription of changes:\nAdd more operational metrics\nTests:\nLaunched a docker cluster and checked that the metrics were properly collected.\nIf new tests are added, how long do the new ones take to complete\nNegligible\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-12-11T07:39:34Z", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534", "merged": true, "mergeCommit": {"oid": "d55c7eec68ef02193bedeb118f530f9ad12f80d7"}, "closed": true, "closedAt": "2020-12-16T19:50:55Z", "author": {"login": "ricardolstephen"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdlRRaHAFqTU1MDY1OTUzMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdm0NCuAFqTU1NDAyMDI1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjU5NTMy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#pullrequestreview-550659532", "createdAt": "2020-12-12T00:19:30Z", "commit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoxOTozMFrOIEXfrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoxOTozMFrOIEXfrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MDE1Nw==", "bodyText": "Can we make this logic into a util method that both metricsdbTarFilter and metricsdbFilter can use?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541450157", "createdAt": "2020-12-12T00:19:30Z", "author": {"login": "sruti1312"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjU5NjMy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#pullrequestreview-550659632", "createdAt": "2020-12-12T00:20:05Z", "commit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNjU5Mjk4", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#pullrequestreview-550659298", "createdAt": "2020-12-12T00:18:33Z", "commit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDoxODozM1rOIEXeKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMlQwMDo1MzoxNlrOIEYICA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ0OTc3MA==", "bodyText": "nit: Add License information.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541449770", "createdAt": "2020-12-12T00:18:33Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MjYxNg==", "bodyText": "Instead of creating a new file and getting its length, can we replace new File(metricsDB.getDBFilePath()).length() with metricsDB.getDBFilePath().length()?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541452616", "createdAt": "2020-12-12T00:28:36Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/reader/ReaderMetricsProcessor.java", "diffHunk": "@@ -406,13 +392,10 @@ private void emitMetrics(long currWindowStartTime) throws Exception {\n \n     metricsDB.commit();\n     metricsDBMap.put(prevWindowStartTime, metricsDB);\n-    long metricsDBSize = new File(metricsDB.getDBFilePath()).length();\n     PerformanceAnalyzerApp.READER_METRICS_AGGREGATOR.updateStat(\n-        ReaderMetrics.METRICSDB_FILE_SIZE, \"\", metricsDBSize);\n+        ReaderMetrics.METRICSDB_FILE_SIZE, \"\", new File(metricsDB.getDBFilePath()).length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1Mzc4OA==", "bodyText": "Please add a comment here stating what this regex represents.\nAlso, we should add UT here for checking this regex behavior.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541453788", "createdAt": "2020-12-12T00:33:00Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1NzUyNQ==", "bodyText": "Instead of performing a FileSystems.getDefault().getPathMatcher(metricsdbPattern);, can use a config to define the location of these files ?  We are performing something similar here : https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/blob/master/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/metricsdb/MetricsDB.java#L351", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541457525", "createdAt": "2020-12-12T00:41:21Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1ODc2OQ==", "bodyText": "Can we avoid the nested try-catch blocks here? Let's move both the DirectoryStream  object creation to one 'try-catch' and then have inner 'try-catch' as now. Also, update the variable name from stream to metricsdbStream and metricsdbTarStream resp.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541458769", "createdAt": "2020-12-12T00:46:26Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbTarFilter)) {\n+      for (Path entry: stream) {\n+        try {\n+          sizeMetricsdbFiles += Files.size(entry);\n+          numMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1OTMxMg==", "bodyText": "Will this error log overwhelm the log file in any case? Can we somehow reduce the frequency, maybe club all the failures and put a single log message?", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541459312", "createdAt": "2020-12-12T00:48:34Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;\n+\n+    int numUncompressedMetricsdbFiles = 0;\n+    long sizeUncompressedMetricsdbFiles = 0;\n+    int numMetricsdbFiles = 0;\n+    long sizeMetricsdbFiles = 0;\n+\n+    try (DirectoryStream<Path> stream = Files.newDirectoryStream(targetDirectoryPath, metricsdbFilter)) {\n+      for (Path entry : stream) {\n+        try {\n+          sizeUncompressedMetricsdbFiles += Files.size(entry);\n+          numUncompressedMetricsdbFiles += 1;\n+        } catch (IOException e) {\n+          LOG.error(\"Failed to access metricsdb file - {}\", entry);\n+        }\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to access metricsdb directory - {}\", targetDirectoryPath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ2MDQ4OA==", "bodyText": "Certain variables between Line 32-40 can be made class static variables, move them out of the sample() method.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r541460488", "createdAt": "2020-12-12T00:53:16Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private final AppContext appContext;\n+\n+  public MetricsDBFileSampler(final AppContext appContext) {\n+    Objects.requireNonNull(appContext);\n+    this.appContext = appContext;\n+  }\n+\n+  @Override\n+  public void sample(SampleAggregator sampleCollector) {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+\n+    Path targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)\n+        + \".tar.\\\\d+-\\\\d+-\\\\d+-\\\\d+-\\\\d+.gz\";\n+    PathMatcher metricsdbMatcher = FileSystems.getDefault().getPathMatcher(metricsdbPattern);\n+    PathMatcher metricsdbTarMatcher = FileSystems.getDefault().getPathMatcher(metricsdbTarPattern);\n+    DirectoryStream.Filter<Path> metricsdbFilter = metricsdbMatcher::matches;\n+    DirectoryStream.Filter<Path> metricsdbTarFilter = metricsdbTarMatcher::matches;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9"}, "originalPosition": 42}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0757b3071014f4f367d9c1e1453dcdfee27926c9", "author": {"user": {"login": "ricardolstephen", "name": "Ricardo L. Stephen"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/0757b3071014f4f367d9c1e1453dcdfee27926c9", "committedDate": "2020-12-11T07:34:11Z", "message": "Add more operational metrics for metrics processing"}, "afterCommit": {"oid": "62a6a207f268cf9c3a01f0d37b320c4d237a1a7e", "author": {"user": {"login": "ricardolstephen", "name": "Ricardo L. Stephen"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/62a6a207f268cf9c3a01f0d37b320c4d237a1a7e", "committedDate": "2020-12-15T00:20:42Z", "message": "Add more operational metrics for metrics processing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62a6a207f268cf9c3a01f0d37b320c4d237a1a7e", "author": {"user": {"login": "ricardolstephen", "name": "Ricardo L. Stephen"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/62a6a207f268cf9c3a01f0d37b320c4d237a1a7e", "committedDate": "2020-12-15T00:20:42Z", "message": "Add more operational metrics for metrics processing"}, "afterCommit": {"oid": "c99aafcde1ff74826b5a735aebbb7e7150975a30", "author": {"user": {"login": "ricardolstephen", "name": "Ricardo L. Stephen"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/c99aafcde1ff74826b5a735aebbb7e7150975a30", "committedDate": "2020-12-15T00:35:32Z", "message": "Add more operational metrics for metrics processing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTE1MDY2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#pullrequestreview-552115066", "createdAt": "2020-12-15T05:24:04Z", "commit": {"oid": "c99aafcde1ff74826b5a735aebbb7e7150975a30"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyNDowNFrOIF5fdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNToyNToxM1rOIF5hEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NTczMg==", "bodyText": "nit: Make the year 2020 instead of 2019", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543055732", "createdAt": "2020-12-15T05:24:04Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/BatchMetricsEnabledSampler.java", "diffHunk": "@@ -1,3 +1,18 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99aafcde1ff74826b5a735aebbb7e7150975a30"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA1NjE0NA==", "bodyText": "Can we add a comment here about this regex. I am not comfortable with having regex in the code without any UTs/ITs present for testing.", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#discussion_r543056144", "createdAt": "2020-12-15T05:25:13Z", "author": {"login": "khushbr"}, "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/MetricsDBFileSampler.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ *  Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\").\n+ *  You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.samplers;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.AppContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metricsdb.MetricsDB;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.metrics.ReaderMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.collectors.SampleAggregator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.stats.emitters.ISampler;\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.PathMatcher;\n+import java.nio.file.Paths;\n+import java.util.Objects;\n+\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class MetricsDBFileSampler implements ISampler {\n+  private static final Logger LOG = LogManager.getLogger(MetricsDBFileSampler.class);\n+  private static final Path targetDirectoryPath;\n+  private static final DirectoryStream.Filter<Path> metricsdbFilter;\n+  private static final DirectoryStream.Filter<Path> metricsdbTarFilter;\n+  private final AppContext appContext;\n+\n+  static {\n+    String metricsdbPrefix = MetricsDB.getFilePrefix();\n+    targetDirectoryPath = Paths.get(metricsdbPrefix).getParent();\n+    String metricsdbPattern = \"regex:\" + metricsdbPrefix + \"\\\\d+\";\n+    String metricsdbTarPattern = \"regex:\" + metricsdbPrefix.substring(0, metricsdbPrefix.length() - 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c99aafcde1ff74826b5a735aebbb7e7150975a30"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19033bca7300ab489ea1b3819fda8b4fe709aed2", "author": {"user": {"login": "ricardolstephen", "name": "Ricardo L. Stephen"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/19033bca7300ab489ea1b3819fda8b4fe709aed2", "committedDate": "2020-12-15T09:38:48Z", "message": "Add more operational metrics for metrics processing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c99aafcde1ff74826b5a735aebbb7e7150975a30", "author": {"user": {"login": "ricardolstephen", "name": "Ricardo L. Stephen"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/c99aafcde1ff74826b5a735aebbb7e7150975a30", "committedDate": "2020-12-15T00:35:32Z", "message": "Add more operational metrics for metrics processing"}, "afterCommit": {"oid": "19033bca7300ab489ea1b3819fda8b4fe709aed2", "author": {"user": {"login": "ricardolstephen", "name": "Ricardo L. Stephen"}}, "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/19033bca7300ab489ea1b3819fda8b4fe709aed2", "committedDate": "2020-12-15T09:38:48Z", "message": "Add more operational metrics for metrics processing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MDA2NjA0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#pullrequestreview-554006604", "createdAt": "2020-12-16T19:17:15Z", "commit": {"oid": "19033bca7300ab489ea1b3819fda8b4fe709aed2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MDIwMjUy", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/534#pullrequestreview-554020252", "createdAt": "2020-12-16T19:35:40Z", "commit": {"oid": "19033bca7300ab489ea1b3819fda8b4fe709aed2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 824, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}