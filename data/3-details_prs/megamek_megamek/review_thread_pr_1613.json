{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NTM3MzQx", "number": 1613, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjoyMzo0MVrODaZRRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjoyNDozMVrODaZRsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDAzNTg4OnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/common/util/ImageUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjoyMzo0MVrOFhUzew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjoyMzo0MVrOFhUzew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            System.out.println(\"Trying to load image for a non-existent \" + \"file! Path: \" + fileName);\n          \n          \n            \n                            System.out.println(\"Trying to load image for a non-existent file! Path: \" + fileName);", "url": "https://github.com/MegaMek/megamek/pull/1613#discussion_r370488187", "createdAt": "2020-01-24T06:23:41Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/common/util/ImageUtil.java", "diffHunk": "@@ -185,8 +185,8 @@ private ImageUtil() {}\n         public Image loadImage(String fileName) {\n             File fin = new File(fileName);\n             if (!fin.exists()) {\n-                System.out.println(\"Trying to load image for a non-existant \"\n-                        + \"file! Path: \" + fileName);\n+                System.out.println(\"Trying to load image for a non-existent \" + \"file! Path: \" + fileName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f778fd06442001d2f28ed6873d8b5c23adff7a19"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDAzNjk4OnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/client/ui/swing/BoardEditor.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNjoyNDozMVrOFhU0Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxOToxNTowNFrOFh1blw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODM1MQ==", "bodyText": "Why is this using reference equality? This would only work between -128 and 127.", "url": "https://github.com/MegaMek/megamek/pull/1613#discussion_r370488351", "createdAt": "2020-01-24T06:24:31Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/ui/swing/BoardEditor.java", "diffHunk": "@@ -152,7 +151,7 @@ public int compareTo(TerrainHelper o) {\n         @Override\n         public boolean equals(Object other) {\n             if (other instanceof Integer) {\n-                return getTerrainType() == ((Integer)other).intValue();\n+                return getTerrainType() == (Integer) other;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43126dc25bfef8bf0ebfc6acf690e2a0a0db5a3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxMzQ3Mw==", "bodyText": "Why would it only work between those values? Integer is just an int wrapper class, so this is an int to int comparison which should work between -2^-31 and 2^31 - 1.\nI've also not found any uses of this in the code, but I believe the reasoning behind it is that this is supposed to be used in terrainType comparisons", "url": "https://github.com/MegaMek/megamek/pull/1613#discussion_r371013473", "createdAt": "2020-01-26T16:46:58Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/client/ui/swing/BoardEditor.java", "diffHunk": "@@ -152,7 +151,7 @@ public int compareTo(TerrainHelper o) {\n         @Override\n         public boolean equals(Object other) {\n             if (other instanceof Integer) {\n-                return getTerrainType() == ((Integer)other).intValue();\n+                return getTerrainType() == (Integer) other;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODM1MQ=="}, "originalCommit": {"oid": "43126dc25bfef8bf0ebfc6acf690e2a0a0db5a3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxNjMyOA==", "bodyText": "That isn't a comparison of int, that's a comparison of Integer by reference rather than value. Integer values between -128 and 127 tend to be the same reference, but other values will have unique references.\nYou need to use Integer.equals(val1, val2) or val1.equals(val2) to compare values.", "url": "https://github.com/MegaMek/megamek/pull/1613#discussion_r371016328", "createdAt": "2020-01-26T17:27:49Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/ui/swing/BoardEditor.java", "diffHunk": "@@ -152,7 +151,7 @@ public int compareTo(TerrainHelper o) {\n         @Override\n         public boolean equals(Object other) {\n             if (other instanceof Integer) {\n-                return getTerrainType() == ((Integer)other).intValue();\n+                return getTerrainType() == (Integer) other;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODM1MQ=="}, "originalCommit": {"oid": "43126dc25bfef8bf0ebfc6acf690e2a0a0db5a3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxOTQ2Mg==", "bodyText": "@sixlettervariables\nUnless my testing is incorrect, the caching is only included for Integer to Integer comparisons. This is an int to Integer comparison that will automatically unbox properly. I can share my test code if you'd like to check my math (found it an interesting conundrum and ended up going down the rabbit hole).", "url": "https://github.com/MegaMek/megamek/pull/1613#discussion_r371019462", "createdAt": "2020-01-26T18:19:12Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/client/ui/swing/BoardEditor.java", "diffHunk": "@@ -152,7 +151,7 @@ public int compareTo(TerrainHelper o) {\n         @Override\n         public boolean equals(Object other) {\n             if (other instanceof Integer) {\n-                return getTerrainType() == ((Integer)other).intValue();\n+                return getTerrainType() == (Integer) other;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODM1MQ=="}, "originalCommit": {"oid": "43126dc25bfef8bf0ebfc6acf690e2a0a0db5a3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxOTczMA==", "bodyText": "This was highlighted as an issue when I used SpotBugs, so I'd rather make it explicit we want value comparisons.", "url": "https://github.com/MegaMek/megamek/pull/1613#discussion_r371019730", "createdAt": "2020-01-26T18:23:49Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/ui/swing/BoardEditor.java", "diffHunk": "@@ -152,7 +151,7 @@ public int compareTo(TerrainHelper o) {\n         @Override\n         public boolean equals(Object other) {\n             if (other instanceof Integer) {\n-                return getTerrainType() == ((Integer)other).intValue();\n+                return getTerrainType() == (Integer) other;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODM1MQ=="}, "originalCommit": {"oid": "43126dc25bfef8bf0ebfc6acf690e2a0a0db5a3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAxOTg4OA==", "bodyText": "Funny thing is that I made this change for the exact same reason, the Idea IDE pointed this out as a potential bug and this was the suggested fix \ud83d\ude02", "url": "https://github.com/MegaMek/megamek/pull/1613#discussion_r371019888", "createdAt": "2020-01-26T18:26:45Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/client/ui/swing/BoardEditor.java", "diffHunk": "@@ -152,7 +151,7 @@ public int compareTo(TerrainHelper o) {\n         @Override\n         public boolean equals(Object other) {\n             if (other instanceof Integer) {\n-                return getTerrainType() == ((Integer)other).intValue();\n+                return getTerrainType() == (Integer) other;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODM1MQ=="}, "originalCommit": {"oid": "43126dc25bfef8bf0ebfc6acf690e2a0a0db5a3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMDA2Nw==", "bodyText": "I guess the different tools have different ways of avoiding the issue. If that was IntelliJ's suggested fix that's fine by me.", "url": "https://github.com/MegaMek/megamek/pull/1613#discussion_r371020067", "createdAt": "2020-01-26T18:29:42Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/ui/swing/BoardEditor.java", "diffHunk": "@@ -152,7 +151,7 @@ public int compareTo(TerrainHelper o) {\n         @Override\n         public boolean equals(Object other) {\n             if (other instanceof Integer) {\n-                return getTerrainType() == ((Integer)other).intValue();\n+                return getTerrainType() == (Integer) other;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODM1MQ=="}, "originalCommit": {"oid": "43126dc25bfef8bf0ebfc6acf690e2a0a0db5a3e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAyMjc0Mw==", "bodyText": "For reference: Integer caches wrapper instances for all values between -128 and 127 and uses a single instance for each of those values no matter where they come from. It also caches any instance created using the valueOf static method for reuse, but not those created with the Integer(int) constructor, which is why that has been deprecated in Java 9. The same is true of the other wrapper classes.\nSo for comparisons of two Integer objects, == will have the desired outcome if you can guarantee they both within the automatic caching range or were created using valueOf, but equals is preferred as it will work regardless.\nIn the case of comparison between int and Integer, as in this case, I suspect that other.equals(getTerrainType()), would be less efficient, since it would result in automatic boxing rather than unboxing. Though the compiler may be clever enough to recognize that and use unboxing instead.", "url": "https://github.com/MegaMek/megamek/pull/1613#discussion_r371022743", "createdAt": "2020-01-26T19:15:04Z", "author": {"login": "neoancient"}, "path": "megamek/src/megamek/client/ui/swing/BoardEditor.java", "diffHunk": "@@ -152,7 +151,7 @@ public int compareTo(TerrainHelper o) {\n         @Override\n         public boolean equals(Object other) {\n             if (other instanceof Integer) {\n-                return getTerrainType() == ((Integer)other).intValue();\n+                return getTerrainType() == (Integer) other;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ4ODM1MQ=="}, "originalCommit": {"oid": "43126dc25bfef8bf0ebfc6acf690e2a0a0db5a3e"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2544, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}