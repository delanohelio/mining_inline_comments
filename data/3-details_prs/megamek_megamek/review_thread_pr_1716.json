{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTYyNjA0", "number": 1716, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTo1MTo1OVrODi6x8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzowMDoyOFrODjdDgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTQxMjM0OnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/client/RandomNameGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTo1MTo1OVrOFub0zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMjowNToyN1rOFucBqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNDcwMw==", "bodyText": "Is this a list or a singular value?", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384234703", "createdAt": "2020-02-26T01:51:59Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -67,300 +65,174 @@\n  * <li>fld1 - the id for the ethnic group\n  * <li>fld2 - the ethnic group name. Not currently read in, just for easy reference.\n  * <li>fld3 - The relative frequency of this ethnic surname in the faction.\n- * <li>fld4-fldn - These fields identify the relative frequency of first names from an ethnic group given the surname\n- *                 listed in fld1.\n+ * <li>fld4-fldn - These fields identify the relative frequency of first names from an ethnic group\n+ *                 given the surname listed in fld1.\n  * </ul>\n  * </p>\n  * @author Jay Lawson\n  */\n public class RandomNameGenerator implements Serializable {\n-    private static final String PROP_INITIALIZED = \"initialized\"; //$NON-NLS-1$\n+    //region Variable Declarations\n+    private static final String PROP_INITIALIZED = \"initialized\";\n \n     /** Default directory containing the faction-specific name files. */\n-    private static final String DIR_NAME_FACTIONS = \"factions\"; //$NON-NLS-1$\n+    private static final String DIR_NAME_FACTIONS = \"factions\";\n \n     /** Default filename for the list of male first names. */\n-    private static final String FILENAME_FIRSTNAMES_MALE = \"firstnames_male.txt\"; //$NON-NLS-1$\n-    \n+    private static final String FILENAME_FIRSTNAMES_MALE = \"firstnames_male.txt\";\n+\n     /** Default filename for the list of female first names. */\n-    private static final String FILENAME_FIRSTNAMES_FEMALE = \"firstnames_female.txt\"; //$NON-NLS-1$\n+    private static final String FILENAME_FIRSTNAMES_FEMALE = \"firstnames_female.txt\";\n \n     /** Default filename for the list of surnames names. */\n-    private static final String FILENAME_SURNAMES = \"surnames.txt\"; //$NON-NLS-1$\n+    private static final String FILENAME_SURNAMES = \"surnames.txt\";\n+\n+    private static final String FILENAME_MASTER_ANCESTRY = \"masterancestry.txt\";\n \n     private static final long serialVersionUID = 5765118329881301375L;\n \n     private static RandomNameGenerator rng;\n \n-    Map<String, Vector<String>> firstm;\n-    Map<String, Vector<String>> firstf;\n-    Map<String, Vector<String>> last;\n-    Map<String, Vector<String>> factionLast;\n-    Map<String, Map<String, Vector<String>>> factionFirst;\n+    /**\n+     * femaleGivenNames, maleGivenNames, and surnames contain values in the following format:\n+     * Map<Integer Ethnic Code, WeightedMap<String Name>>\n+     * The ethnic code is an Integer value that is used to determine the ethnicity of the name, while\n+     * the name is a String value. The name is stored in a WeightedMap for each ethnic code to ensure\n+     * that there is a range from common to rare names. This is determined based on the input weights\n+     */\n+    private static Map<Integer, WeightedMap<String>> femaleGivenNames;\n+    private static Map<Integer, WeightedMap<String>> maleGivenNames;\n+    private static Map<Integer, WeightedMap<String>> surnames;\n+\n+    /**\n+     * factionGivenNames contains values in the following format:\n+     * Map<String Faction Name, Map<Integer Surname Ethnic Code, WeightedMap<Integer Given Name Ethnic Code>>>\n+     * The faction name is the key to determining which list of names should be used, with the default being \"General\"\n+     * The Surname Ethnic Code is the code that the surname will be generated from\n+     * The Given Name Ethnic Code is the code to generate the given name from, from the femaleGivenNames or maleGivenNames\n+     * maps, and this is weighted to ensure that more common pairings are more common\n+     */\n+    private static Map<String, Map<Integer, WeightedMap<Integer>>> factionGivenNames;\n+\n+    /**\n+     * factionEthnicCodes contains values in the following format:\n+     * Map<String Faction Name, WeightedMap<Integer Surname Ethnic Code>>\n+     * The faction name is the key to determining which list of names should be used, with the default being \"General\"\n+     * The Surname Ethnic Code is the code that the surname will be generated from, and\n+     * this is weighted to ensure that more common pairings for the faction are more common\n+     */\n+    private static Map<String, WeightedMap<Integer>> factionEthnicCodes;\n \n     private int percentFemale;\n     private String chosenFaction;\n     private Thread loader;\n-    private boolean initialized;\n-    private boolean initializing;\n+    private static boolean initialized;\n+    private static boolean initializing;\n \n     private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);\n+    //endregion Variable Declarations\n \n     public RandomNameGenerator() {\n         percentFemale = 50;\n-        chosenFaction = \"General\"; //$NON-NLS-1$\n+        chosenFaction = \"General\";\n     }\n \n-    public void populateNames() {\n-        // TODO: how do I weight name vectors by frequency, without making them\n-        // gargantuan?\n-        if (null == firstm) {\n-            firstm = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == firstf) {\n-            firstf = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == last) {\n-            last = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == factionLast) {\n-            factionLast = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == factionFirst) {\n-            factionFirst = new HashMap<String, Map<String, Vector<String>>>();\n-        }\n+    //region Name Generators\n+    /**\n+     * Generate a single random name\n+     *\n+     * @return - a string giving the name\n+     */\n+    @Deprecated //17-Feb-2020 as part of the addition of gender tracking to MegaMek\n+    public String generate() {\n+        return generate(isFemale());\n+    }\n \n-        // READ IN MALE FIRST NAMES\n-        File male_firstnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_FIRSTNAMES_MALE).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(male_firstnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"Not enough fields in '\" + male_firstnames_path.toString() + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!firstm.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    firstm.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        firstm.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + male_firstnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    @Deprecated //24-Feb-2020, this is included to keep current functionality working while other\n+                //improvements are being finished\n+    public String generate(boolean isFemale) {\n+        // this is a total hack, but for now lets assume that\n+        // if the chosenFaction name contains the word \"clan\"\n+        // we should only spit out first names\n+        return generate(isFemale, chosenFaction.toLowerCase().contains(\"clan\"));\n+    }\n \n-        // READ IN FEMALE FIRST NAMES\n-        File female_firstnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_FIRSTNAMES_FEMALE).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(female_firstnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"RandomNameGenerator.populateNames(): Not enough fields in '\" + female_firstnames_path.toString() + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!firstf.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    firstf.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        firstf.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + female_firstnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    /**\n+     * Generate a single random name\n+     *\n+     * @param isFemale true if the name should be female, otherwise false\n+     * @param isClan true if the name should be for a clanner, otherwise false\n+     * @return - a string containing the randomly generated name\n+     */\n+    public String generate(boolean isFemale, boolean isClan) {\n+        return generate(isFemale, isClan, chosenFaction);\n+    }\n \n-        // READ IN SURNAMES\n-        File surnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_SURNAMES).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(surnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"Not enough fields in '\" + surnames_path + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!last.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    last.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        last.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + surnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    /**\n+     * Generate a single random name\n+     *\n+     * @param isFemale true if the name should be female, otherwise false\n+     * @param isClan true if the name should be for a clanner, otherwise false\n+     * @param faction a string containing the faction list to generate the name for. If the faction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNzk5NQ==", "bodyText": "That's really badly worded, but it is a single value.", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384237995", "createdAt": "2020-02-26T02:05:27Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -67,300 +65,174 @@\n  * <li>fld1 - the id for the ethnic group\n  * <li>fld2 - the ethnic group name. Not currently read in, just for easy reference.\n  * <li>fld3 - The relative frequency of this ethnic surname in the faction.\n- * <li>fld4-fldn - These fields identify the relative frequency of first names from an ethnic group given the surname\n- *                 listed in fld1.\n+ * <li>fld4-fldn - These fields identify the relative frequency of first names from an ethnic group\n+ *                 given the surname listed in fld1.\n  * </ul>\n  * </p>\n  * @author Jay Lawson\n  */\n public class RandomNameGenerator implements Serializable {\n-    private static final String PROP_INITIALIZED = \"initialized\"; //$NON-NLS-1$\n+    //region Variable Declarations\n+    private static final String PROP_INITIALIZED = \"initialized\";\n \n     /** Default directory containing the faction-specific name files. */\n-    private static final String DIR_NAME_FACTIONS = \"factions\"; //$NON-NLS-1$\n+    private static final String DIR_NAME_FACTIONS = \"factions\";\n \n     /** Default filename for the list of male first names. */\n-    private static final String FILENAME_FIRSTNAMES_MALE = \"firstnames_male.txt\"; //$NON-NLS-1$\n-    \n+    private static final String FILENAME_FIRSTNAMES_MALE = \"firstnames_male.txt\";\n+\n     /** Default filename for the list of female first names. */\n-    private static final String FILENAME_FIRSTNAMES_FEMALE = \"firstnames_female.txt\"; //$NON-NLS-1$\n+    private static final String FILENAME_FIRSTNAMES_FEMALE = \"firstnames_female.txt\";\n \n     /** Default filename for the list of surnames names. */\n-    private static final String FILENAME_SURNAMES = \"surnames.txt\"; //$NON-NLS-1$\n+    private static final String FILENAME_SURNAMES = \"surnames.txt\";\n+\n+    private static final String FILENAME_MASTER_ANCESTRY = \"masterancestry.txt\";\n \n     private static final long serialVersionUID = 5765118329881301375L;\n \n     private static RandomNameGenerator rng;\n \n-    Map<String, Vector<String>> firstm;\n-    Map<String, Vector<String>> firstf;\n-    Map<String, Vector<String>> last;\n-    Map<String, Vector<String>> factionLast;\n-    Map<String, Map<String, Vector<String>>> factionFirst;\n+    /**\n+     * femaleGivenNames, maleGivenNames, and surnames contain values in the following format:\n+     * Map<Integer Ethnic Code, WeightedMap<String Name>>\n+     * The ethnic code is an Integer value that is used to determine the ethnicity of the name, while\n+     * the name is a String value. The name is stored in a WeightedMap for each ethnic code to ensure\n+     * that there is a range from common to rare names. This is determined based on the input weights\n+     */\n+    private static Map<Integer, WeightedMap<String>> femaleGivenNames;\n+    private static Map<Integer, WeightedMap<String>> maleGivenNames;\n+    private static Map<Integer, WeightedMap<String>> surnames;\n+\n+    /**\n+     * factionGivenNames contains values in the following format:\n+     * Map<String Faction Name, Map<Integer Surname Ethnic Code, WeightedMap<Integer Given Name Ethnic Code>>>\n+     * The faction name is the key to determining which list of names should be used, with the default being \"General\"\n+     * The Surname Ethnic Code is the code that the surname will be generated from\n+     * The Given Name Ethnic Code is the code to generate the given name from, from the femaleGivenNames or maleGivenNames\n+     * maps, and this is weighted to ensure that more common pairings are more common\n+     */\n+    private static Map<String, Map<Integer, WeightedMap<Integer>>> factionGivenNames;\n+\n+    /**\n+     * factionEthnicCodes contains values in the following format:\n+     * Map<String Faction Name, WeightedMap<Integer Surname Ethnic Code>>\n+     * The faction name is the key to determining which list of names should be used, with the default being \"General\"\n+     * The Surname Ethnic Code is the code that the surname will be generated from, and\n+     * this is weighted to ensure that more common pairings for the faction are more common\n+     */\n+    private static Map<String, WeightedMap<Integer>> factionEthnicCodes;\n \n     private int percentFemale;\n     private String chosenFaction;\n     private Thread loader;\n-    private boolean initialized;\n-    private boolean initializing;\n+    private static boolean initialized;\n+    private static boolean initializing;\n \n     private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);\n+    //endregion Variable Declarations\n \n     public RandomNameGenerator() {\n         percentFemale = 50;\n-        chosenFaction = \"General\"; //$NON-NLS-1$\n+        chosenFaction = \"General\";\n     }\n \n-    public void populateNames() {\n-        // TODO: how do I weight name vectors by frequency, without making them\n-        // gargantuan?\n-        if (null == firstm) {\n-            firstm = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == firstf) {\n-            firstf = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == last) {\n-            last = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == factionLast) {\n-            factionLast = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == factionFirst) {\n-            factionFirst = new HashMap<String, Map<String, Vector<String>>>();\n-        }\n+    //region Name Generators\n+    /**\n+     * Generate a single random name\n+     *\n+     * @return - a string giving the name\n+     */\n+    @Deprecated //17-Feb-2020 as part of the addition of gender tracking to MegaMek\n+    public String generate() {\n+        return generate(isFemale());\n+    }\n \n-        // READ IN MALE FIRST NAMES\n-        File male_firstnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_FIRSTNAMES_MALE).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(male_firstnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"Not enough fields in '\" + male_firstnames_path.toString() + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!firstm.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    firstm.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        firstm.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + male_firstnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    @Deprecated //24-Feb-2020, this is included to keep current functionality working while other\n+                //improvements are being finished\n+    public String generate(boolean isFemale) {\n+        // this is a total hack, but for now lets assume that\n+        // if the chosenFaction name contains the word \"clan\"\n+        // we should only spit out first names\n+        return generate(isFemale, chosenFaction.toLowerCase().contains(\"clan\"));\n+    }\n \n-        // READ IN FEMALE FIRST NAMES\n-        File female_firstnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_FIRSTNAMES_FEMALE).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(female_firstnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"RandomNameGenerator.populateNames(): Not enough fields in '\" + female_firstnames_path.toString() + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!firstf.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    firstf.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        firstf.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + female_firstnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    /**\n+     * Generate a single random name\n+     *\n+     * @param isFemale true if the name should be female, otherwise false\n+     * @param isClan true if the name should be for a clanner, otherwise false\n+     * @return - a string containing the randomly generated name\n+     */\n+    public String generate(boolean isFemale, boolean isClan) {\n+        return generate(isFemale, isClan, chosenFaction);\n+    }\n \n-        // READ IN SURNAMES\n-        File surnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_SURNAMES).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(surnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"Not enough fields in '\" + surnames_path + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!last.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    last.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        last.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + surnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    /**\n+     * Generate a single random name\n+     *\n+     * @param isFemale true if the name should be female, otherwise false\n+     * @param isClan true if the name should be for a clanner, otherwise false\n+     * @param faction a string containing the faction list to generate the name for. If the faction", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNDcwMw=="}, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTQxMzIzOnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/client/RandomNameGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTo1MjozMFrOFub1RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTo1MjozMFrOFub1RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNDgyMQ==", "bodyText": "Perhaps hoist \"General\" into a static.", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384234821", "createdAt": "2020-02-26T01:52:30Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -67,300 +65,174 @@\n  * <li>fld1 - the id for the ethnic group\n  * <li>fld2 - the ethnic group name. Not currently read in, just for easy reference.\n  * <li>fld3 - The relative frequency of this ethnic surname in the faction.\n- * <li>fld4-fldn - These fields identify the relative frequency of first names from an ethnic group given the surname\n- *                 listed in fld1.\n+ * <li>fld4-fldn - These fields identify the relative frequency of first names from an ethnic group\n+ *                 given the surname listed in fld1.\n  * </ul>\n  * </p>\n  * @author Jay Lawson\n  */\n public class RandomNameGenerator implements Serializable {\n-    private static final String PROP_INITIALIZED = \"initialized\"; //$NON-NLS-1$\n+    //region Variable Declarations\n+    private static final String PROP_INITIALIZED = \"initialized\";\n \n     /** Default directory containing the faction-specific name files. */\n-    private static final String DIR_NAME_FACTIONS = \"factions\"; //$NON-NLS-1$\n+    private static final String DIR_NAME_FACTIONS = \"factions\";\n \n     /** Default filename for the list of male first names. */\n-    private static final String FILENAME_FIRSTNAMES_MALE = \"firstnames_male.txt\"; //$NON-NLS-1$\n-    \n+    private static final String FILENAME_FIRSTNAMES_MALE = \"firstnames_male.txt\";\n+\n     /** Default filename for the list of female first names. */\n-    private static final String FILENAME_FIRSTNAMES_FEMALE = \"firstnames_female.txt\"; //$NON-NLS-1$\n+    private static final String FILENAME_FIRSTNAMES_FEMALE = \"firstnames_female.txt\";\n \n     /** Default filename for the list of surnames names. */\n-    private static final String FILENAME_SURNAMES = \"surnames.txt\"; //$NON-NLS-1$\n+    private static final String FILENAME_SURNAMES = \"surnames.txt\";\n+\n+    private static final String FILENAME_MASTER_ANCESTRY = \"masterancestry.txt\";\n \n     private static final long serialVersionUID = 5765118329881301375L;\n \n     private static RandomNameGenerator rng;\n \n-    Map<String, Vector<String>> firstm;\n-    Map<String, Vector<String>> firstf;\n-    Map<String, Vector<String>> last;\n-    Map<String, Vector<String>> factionLast;\n-    Map<String, Map<String, Vector<String>>> factionFirst;\n+    /**\n+     * femaleGivenNames, maleGivenNames, and surnames contain values in the following format:\n+     * Map<Integer Ethnic Code, WeightedMap<String Name>>\n+     * The ethnic code is an Integer value that is used to determine the ethnicity of the name, while\n+     * the name is a String value. The name is stored in a WeightedMap for each ethnic code to ensure\n+     * that there is a range from common to rare names. This is determined based on the input weights\n+     */\n+    private static Map<Integer, WeightedMap<String>> femaleGivenNames;\n+    private static Map<Integer, WeightedMap<String>> maleGivenNames;\n+    private static Map<Integer, WeightedMap<String>> surnames;\n+\n+    /**\n+     * factionGivenNames contains values in the following format:\n+     * Map<String Faction Name, Map<Integer Surname Ethnic Code, WeightedMap<Integer Given Name Ethnic Code>>>\n+     * The faction name is the key to determining which list of names should be used, with the default being \"General\"\n+     * The Surname Ethnic Code is the code that the surname will be generated from\n+     * The Given Name Ethnic Code is the code to generate the given name from, from the femaleGivenNames or maleGivenNames\n+     * maps, and this is weighted to ensure that more common pairings are more common\n+     */\n+    private static Map<String, Map<Integer, WeightedMap<Integer>>> factionGivenNames;\n+\n+    /**\n+     * factionEthnicCodes contains values in the following format:\n+     * Map<String Faction Name, WeightedMap<Integer Surname Ethnic Code>>\n+     * The faction name is the key to determining which list of names should be used, with the default being \"General\"\n+     * The Surname Ethnic Code is the code that the surname will be generated from, and\n+     * this is weighted to ensure that more common pairings for the faction are more common\n+     */\n+    private static Map<String, WeightedMap<Integer>> factionEthnicCodes;\n \n     private int percentFemale;\n     private String chosenFaction;\n     private Thread loader;\n-    private boolean initialized;\n-    private boolean initializing;\n+    private static boolean initialized;\n+    private static boolean initializing;\n \n     private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);\n+    //endregion Variable Declarations\n \n     public RandomNameGenerator() {\n         percentFemale = 50;\n-        chosenFaction = \"General\"; //$NON-NLS-1$\n+        chosenFaction = \"General\";\n     }\n \n-    public void populateNames() {\n-        // TODO: how do I weight name vectors by frequency, without making them\n-        // gargantuan?\n-        if (null == firstm) {\n-            firstm = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == firstf) {\n-            firstf = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == last) {\n-            last = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == factionLast) {\n-            factionLast = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == factionFirst) {\n-            factionFirst = new HashMap<String, Map<String, Vector<String>>>();\n-        }\n+    //region Name Generators\n+    /**\n+     * Generate a single random name\n+     *\n+     * @return - a string giving the name\n+     */\n+    @Deprecated //17-Feb-2020 as part of the addition of gender tracking to MegaMek\n+    public String generate() {\n+        return generate(isFemale());\n+    }\n \n-        // READ IN MALE FIRST NAMES\n-        File male_firstnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_FIRSTNAMES_MALE).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(male_firstnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"Not enough fields in '\" + male_firstnames_path.toString() + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!firstm.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    firstm.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        firstm.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + male_firstnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    @Deprecated //24-Feb-2020, this is included to keep current functionality working while other\n+                //improvements are being finished\n+    public String generate(boolean isFemale) {\n+        // this is a total hack, but for now lets assume that\n+        // if the chosenFaction name contains the word \"clan\"\n+        // we should only spit out first names\n+        return generate(isFemale, chosenFaction.toLowerCase().contains(\"clan\"));\n+    }\n \n-        // READ IN FEMALE FIRST NAMES\n-        File female_firstnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_FIRSTNAMES_FEMALE).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(female_firstnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"RandomNameGenerator.populateNames(): Not enough fields in '\" + female_firstnames_path.toString() + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!firstf.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    firstf.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        firstf.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + female_firstnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    /**\n+     * Generate a single random name\n+     *\n+     * @param isFemale true if the name should be female, otherwise false\n+     * @param isClan true if the name should be for a clanner, otherwise false\n+     * @return - a string containing the randomly generated name\n+     */\n+    public String generate(boolean isFemale, boolean isClan) {\n+        return generate(isFemale, isClan, chosenFaction);\n+    }\n \n-        // READ IN SURNAMES\n-        File surnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_SURNAMES).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(surnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"Not enough fields in '\" + surnames_path + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!last.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    last.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        last.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + surnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    /**\n+     * Generate a single random name\n+     *\n+     * @param isFemale true if the name should be female, otherwise false\n+     * @param isClan true if the name should be for a clanner, otherwise false\n+     * @param faction a string containing the faction list to generate the name for. If the faction\n+     *                is not a key for the <code>factionSurnames</code> Map, it will instead generate\n+     *                based on the General list\n+     * @return - a string containing the randomly generated name\n+     */\n+    public String generate(boolean isFemale, boolean isClan, String faction) {\n+        String name = \"Unnamed\";\n+        if (initialized) {\n+            faction = factionEthnicCodes.containsKey(faction) ? faction : \"General\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 319}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTQxNTMwOnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/client/RandomNameGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTo1Mzo0MlrOFub2fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTo1Mzo0MlrOFub2fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNTEzMw==", "bodyText": "This return name[1] = \"Person\" for clanners, should this instead be null or empty?", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384235133", "createdAt": "2020-02-26T01:53:42Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -67,300 +65,174 @@\n  * <li>fld1 - the id for the ethnic group\n  * <li>fld2 - the ethnic group name. Not currently read in, just for easy reference.\n  * <li>fld3 - The relative frequency of this ethnic surname in the faction.\n- * <li>fld4-fldn - These fields identify the relative frequency of first names from an ethnic group given the surname\n- *                 listed in fld1.\n+ * <li>fld4-fldn - These fields identify the relative frequency of first names from an ethnic group\n+ *                 given the surname listed in fld1.\n  * </ul>\n  * </p>\n  * @author Jay Lawson\n  */\n public class RandomNameGenerator implements Serializable {\n-    private static final String PROP_INITIALIZED = \"initialized\"; //$NON-NLS-1$\n+    //region Variable Declarations\n+    private static final String PROP_INITIALIZED = \"initialized\";\n \n     /** Default directory containing the faction-specific name files. */\n-    private static final String DIR_NAME_FACTIONS = \"factions\"; //$NON-NLS-1$\n+    private static final String DIR_NAME_FACTIONS = \"factions\";\n \n     /** Default filename for the list of male first names. */\n-    private static final String FILENAME_FIRSTNAMES_MALE = \"firstnames_male.txt\"; //$NON-NLS-1$\n-    \n+    private static final String FILENAME_FIRSTNAMES_MALE = \"firstnames_male.txt\";\n+\n     /** Default filename for the list of female first names. */\n-    private static final String FILENAME_FIRSTNAMES_FEMALE = \"firstnames_female.txt\"; //$NON-NLS-1$\n+    private static final String FILENAME_FIRSTNAMES_FEMALE = \"firstnames_female.txt\";\n \n     /** Default filename for the list of surnames names. */\n-    private static final String FILENAME_SURNAMES = \"surnames.txt\"; //$NON-NLS-1$\n+    private static final String FILENAME_SURNAMES = \"surnames.txt\";\n+\n+    private static final String FILENAME_MASTER_ANCESTRY = \"masterancestry.txt\";\n \n     private static final long serialVersionUID = 5765118329881301375L;\n \n     private static RandomNameGenerator rng;\n \n-    Map<String, Vector<String>> firstm;\n-    Map<String, Vector<String>> firstf;\n-    Map<String, Vector<String>> last;\n-    Map<String, Vector<String>> factionLast;\n-    Map<String, Map<String, Vector<String>>> factionFirst;\n+    /**\n+     * femaleGivenNames, maleGivenNames, and surnames contain values in the following format:\n+     * Map<Integer Ethnic Code, WeightedMap<String Name>>\n+     * The ethnic code is an Integer value that is used to determine the ethnicity of the name, while\n+     * the name is a String value. The name is stored in a WeightedMap for each ethnic code to ensure\n+     * that there is a range from common to rare names. This is determined based on the input weights\n+     */\n+    private static Map<Integer, WeightedMap<String>> femaleGivenNames;\n+    private static Map<Integer, WeightedMap<String>> maleGivenNames;\n+    private static Map<Integer, WeightedMap<String>> surnames;\n+\n+    /**\n+     * factionGivenNames contains values in the following format:\n+     * Map<String Faction Name, Map<Integer Surname Ethnic Code, WeightedMap<Integer Given Name Ethnic Code>>>\n+     * The faction name is the key to determining which list of names should be used, with the default being \"General\"\n+     * The Surname Ethnic Code is the code that the surname will be generated from\n+     * The Given Name Ethnic Code is the code to generate the given name from, from the femaleGivenNames or maleGivenNames\n+     * maps, and this is weighted to ensure that more common pairings are more common\n+     */\n+    private static Map<String, Map<Integer, WeightedMap<Integer>>> factionGivenNames;\n+\n+    /**\n+     * factionEthnicCodes contains values in the following format:\n+     * Map<String Faction Name, WeightedMap<Integer Surname Ethnic Code>>\n+     * The faction name is the key to determining which list of names should be used, with the default being \"General\"\n+     * The Surname Ethnic Code is the code that the surname will be generated from, and\n+     * this is weighted to ensure that more common pairings for the faction are more common\n+     */\n+    private static Map<String, WeightedMap<Integer>> factionEthnicCodes;\n \n     private int percentFemale;\n     private String chosenFaction;\n     private Thread loader;\n-    private boolean initialized;\n-    private boolean initializing;\n+    private static boolean initialized;\n+    private static boolean initializing;\n \n     private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);\n+    //endregion Variable Declarations\n \n     public RandomNameGenerator() {\n         percentFemale = 50;\n-        chosenFaction = \"General\"; //$NON-NLS-1$\n+        chosenFaction = \"General\";\n     }\n \n-    public void populateNames() {\n-        // TODO: how do I weight name vectors by frequency, without making them\n-        // gargantuan?\n-        if (null == firstm) {\n-            firstm = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == firstf) {\n-            firstf = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == last) {\n-            last = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == factionLast) {\n-            factionLast = new HashMap<String, Vector<String>>();\n-        }\n-        if (null == factionFirst) {\n-            factionFirst = new HashMap<String, Map<String, Vector<String>>>();\n-        }\n+    //region Name Generators\n+    /**\n+     * Generate a single random name\n+     *\n+     * @return - a string giving the name\n+     */\n+    @Deprecated //17-Feb-2020 as part of the addition of gender tracking to MegaMek\n+    public String generate() {\n+        return generate(isFemale());\n+    }\n \n-        // READ IN MALE FIRST NAMES\n-        File male_firstnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_FIRSTNAMES_MALE).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(male_firstnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"Not enough fields in '\" + male_firstnames_path.toString() + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!firstm.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    firstm.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        firstm.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + male_firstnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    @Deprecated //24-Feb-2020, this is included to keep current functionality working while other\n+                //improvements are being finished\n+    public String generate(boolean isFemale) {\n+        // this is a total hack, but for now lets assume that\n+        // if the chosenFaction name contains the word \"clan\"\n+        // we should only spit out first names\n+        return generate(isFemale, chosenFaction.toLowerCase().contains(\"clan\"));\n+    }\n \n-        // READ IN FEMALE FIRST NAMES\n-        File female_firstnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_FIRSTNAMES_FEMALE).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(female_firstnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"RandomNameGenerator.populateNames(): Not enough fields in '\" + female_firstnames_path.toString() + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!firstf.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    firstf.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        firstf.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + female_firstnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    /**\n+     * Generate a single random name\n+     *\n+     * @param isFemale true if the name should be female, otherwise false\n+     * @param isClan true if the name should be for a clanner, otherwise false\n+     * @return - a string containing the randomly generated name\n+     */\n+    public String generate(boolean isFemale, boolean isClan) {\n+        return generate(isFemale, isClan, chosenFaction);\n+    }\n \n-        // READ IN SURNAMES\n-        File surnames_path = new MegaMekFile(Configuration.namesDir(), FILENAME_SURNAMES).getFile();\n-        try(Scanner input = new Scanner(new FileInputStream(surnames_path), \"UTF-8\")) { //$NON-NLS-1$\n-            int linen = 0;\n-            while (input.hasNextLine()) {\n-                String line = input.nextLine();\n-                linen++;\n-                String[] values = line.split(\",\"); //$NON-NLS-1$\n-                if (values.length < 3) {\n-                    System.err.println(\n-                            \"Not enough fields in '\" + surnames_path + \"' on \" + linen //$NON-NLS-1$ //$NON-NLS-2$\n-                    );\n-                    continue;\n-                }\n-                String name = values[0];\n-                int weight = Integer.parseInt(values[1]);\n-                String key = values[2];\n-                int i = 0;\n-                if (!last.containsKey(key)) {\n-                    Vector<String> v = new Vector<String>();\n-                    while (i < weight) {\n-                        v.add(name);\n-                        i++;\n-                    }\n-                    last.put(key, v);\n-                } else {\n-                    while (i < weight) {\n-                        last.get(key).add(name);\n-                        i++;\n-                    }\n-                }\n-            }\n-        } catch (IOException fne) {\n-            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + surnames_path + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-        }\n+    /**\n+     * Generate a single random name\n+     *\n+     * @param isFemale true if the name should be female, otherwise false\n+     * @param isClan true if the name should be for a clanner, otherwise false\n+     * @param faction a string containing the faction list to generate the name for. If the faction\n+     *                is not a key for the <code>factionSurnames</code> Map, it will instead generate\n+     *                based on the General list\n+     * @return - a string containing the randomly generated name\n+     */\n+    public String generate(boolean isFemale, boolean isClan, String faction) {\n+        String name = \"Unnamed\";\n+        if (initialized) {\n+            faction = factionEthnicCodes.containsKey(faction) ? faction : \"General\";\n+            int ethnicCode = factionEthnicCodes.get(faction).randomItem();\n+            int givenNameEthnicCode = factionGivenNames.get(faction).get(ethnicCode).randomItem();\n \n-        // READ IN FACTION FILES\n-        // all faction files should be in the faction directory\n-        File factions_dir_path = new MegaMekFile(Configuration.namesDir(), DIR_NAME_FACTIONS).getFile();\n-        String[] filenames = factions_dir_path.list();\n-        if (null == filenames) {\n-            return;\n-        }\n-        for (int filen = 0; filen < filenames.length; filen++) {\n-            String filename = filenames[filen];\n-            String key = filename.split(\"\\\\.txt\")[0]; //$NON-NLS-1$\n-            if ((key.length() < 1) || factionLast.containsKey(key)) {\n-                continue;\n-            }\n-            factionLast.put(key, new Vector<String>());\n-            factionFirst.put(key, new HashMap<String, Vector<String>>());\n-            File ff = new MegaMekFile(factions_dir_path, filename).getFile();\n-            try(Scanner factionInput = new Scanner(new FileInputStream(ff), \"UTF-8\")) { //$NON-NLS-1$\n-                Map<String, Vector<String>> hash = new HashMap<String, Vector<String>>();\n-                while (factionInput.hasNextLine()) {\n-                    String line = factionInput.nextLine();\n-                    String[] values = line.split(\",\"); //$NON-NLS-1$\n-                    String ethnicity = values[0];\n-                    int freq = Integer.parseInt(values[2]);\n-                    while (freq > 0) {\n-                        factionLast.get(key).add(ethnicity);\n-                        freq--;\n-                    }\n-                    Vector<String> v = new Vector<String>();\n-                    for (int i = 3; i < values.length; i++) {\n-                        freq = Integer.parseInt(values[i]);\n-                        // TODO: damm - I don't have the integer codes for ethnicity\n-                        // here, for now just assume they are the\n-                        // same as i-2\n-                        while (freq > 0) {\n-                            v.add(Integer.toString(i - 2));\n-                            freq--;\n-                        }\n-                    }\n-                    hash.put(ethnicity, v);\n-                }\n-                factionFirst.put(key, hash);\n-            } catch (IOException fne) {\n-                System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + ff + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n-                continue;\n+            name = isFemale\n+                    ? femaleGivenNames.get(givenNameEthnicCode).randomItem()\n+                    : maleGivenNames.get(givenNameEthnicCode).randomItem();\n+\n+            if (!isClan) {\n+                name += \" \" + surnames.get(ethnicCode).randomItem();\n             }\n         }\n+        return name;\n     }\n \n-    public synchronized void addInitializationListener(PropertyChangeListener listener) {\n-        pcs.addPropertyChangeListener(listener);\n-        if(initialized) {\n-            // Fire and remove\n-            pcs.firePropertyChange(PROP_INITIALIZED, false, true);\n-            pcs.removePropertyChangeListener(listener);\n-        }\n-    }\n-    \n-    protected void setInitialized(boolean initialized) {\n-        pcs.firePropertyChange(PROP_INITIALIZED, this.initialized, this.initialized = initialized);\n-    }\n-    \n-    public boolean isInitialized() {\n-        return initialized;\n-    }\n-    \n     /**\n-     * Generate a single random name\n-     * \n-     * @return - a string giving the name\n+     * Generate a single random name split between a given name and surname\n+     *\n+     * @param isFemale true if the name should be female, otherwise false\n+     * @param isClan true if the name should be for a clanner, otherwise false\n+     * @return - a String[] containing the name,\n+     *              with the given name at String[0]\n+     *              and the surname at String[1]\n      */\n-    public String generate() {\n-        return generate(isFemale());\n+    public String[] generateGivenNameSurnameSplit(boolean isFemale, boolean isClan) {\n+        return generateGivenNameSurnameSplit(isFemale, isClan, chosenFaction);\n     }\n \n-    public String generate(boolean isFemale) {\n-        if ((null != chosenFaction) && (null != factionLast)\n-                && (null != factionFirst) && (null != firstm)\n-                && (null != firstf) && (null != last)) {\n-            // this is a total hack, but for now lets assume that\n-            // if the chosenFaction name contains the word \"clan\"\n-            // we should only spit out first names\n-            boolean isClan = chosenFaction.toLowerCase().contains(\"clan\");\n-\n-            Vector<String> ethnicities = factionLast.get(chosenFaction);\n-            if ((null != ethnicities) && (ethnicities.size() > 0)) {\n-                String eLast = ethnicities.get(Compute.randomInt(ethnicities\n-                        .size()));\n-                // ok now we need to decide on a first name list\n-                ethnicities = factionFirst.get(chosenFaction).get(eLast);\n-                if ((null != ethnicities) && (ethnicities.size() > 0)) {\n-                    String eFirst = ethnicities.get(Compute\n-                            .randomInt(ethnicities.size()));\n-                    // ok now we can get the first and last name vectors\n-                    if (isClan) {\n-                        eFirst = eLast;\n-                    }\n-                    Vector<String> fnames = firstm.get(eFirst);\n-                    if (isFemale) {\n-                        fnames = firstf.get(eFirst);\n-                    }\n-                    Vector<String> lnames = last.get(eLast);\n-                    if ((null != fnames) && (null != lnames)\n-                            && (fnames.size() > 0) && (lnames.size() > 0)) {\n-                        String first = fnames.get(Compute.randomInt(fnames\n-                                .size()));\n-                        String last = lnames.get(Compute.randomInt(lnames\n-                                .size()));\n-                        if (isClan) {\n-                            return first;\n-                        }\n-                        return first + \" \" + last;\n-                    }\n-                }\n+    public String[] generateGivenNameSurnameSplit(boolean isFemale, boolean isClan, String faction) {\n+        String[] name = { \"Unnamed\", \"Person\" };\n+        if (initialized) {\n+            faction = factionEthnicCodes.containsKey(faction) ? faction : \"General\";\n+            int ethnicCode = factionEthnicCodes.get(faction).randomItem();\n+            int givenNameEthnicCode = factionGivenNames.get(faction).get(ethnicCode).randomItem();\n+\n+            name[0] = isFemale\n+                    ? femaleGivenNames.get(givenNameEthnicCode).randomItem()\n+                    : maleGivenNames.get(givenNameEthnicCode).randomItem();\n+\n+            if (!isClan) {\n+                name[1] = surnames.get(ethnicCode).randomItem();\n             }\n         }\n-        return \"Unnamed\";\n+        return name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 468}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTQxNzYxOnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/client/RandomNameGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTo1NToxMlrOFub38A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzoyNjowM1rOFudLIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNTUwNA==", "bodyText": "This should be marked as synchronized and there likely should be some locking occurring regarding initialized and initializing. As it stands this is not thread safe.", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384235504", "createdAt": "2020-02-26T01:55:12Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -375,48 +247,191 @@ public int getPercentFemale() {\n         return percentFemale;\n     }\n \n-    public void setPerentFemale(int i) {\n+    public void setPercentFemale(int i) {\n         percentFemale = i;\n     }\n \n     /**\n      * randomly select gender\n-     * \n+     *\n      * @return true if female\n      */\n     public boolean isFemale() {\n         return Compute.randomInt(100) < percentFemale;\n     }\n \n+    public static RandomNameGenerator getInstance() {\n+        if (rng == null) {\n+            initialize();\n+        }\n+        return rng;\n+    }\n+\n+    //region Initialization\n     public static void initialize() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 509}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI1NjgwMA==", "bodyText": "I've swapped it to using a single AtomicBoolean value for its lock, and it seems to be working well (I spun up a bunch of threads and tried to have them crash the system, it didn't crash)", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384256800", "createdAt": "2020-02-26T03:26:03Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -375,48 +247,191 @@ public int getPercentFemale() {\n         return percentFemale;\n     }\n \n-    public void setPerentFemale(int i) {\n+    public void setPercentFemale(int i) {\n         percentFemale = i;\n     }\n \n     /**\n      * randomly select gender\n-     * \n+     *\n      * @return true if female\n      */\n     public boolean isFemale() {\n         return Compute.randomInt(100) < percentFemale;\n     }\n \n+    public static RandomNameGenerator getInstance() {\n+        if (rng == null) {\n+            initialize();\n+        }\n+        return rng;\n+    }\n+\n+    //region Initialization\n     public static void initialize() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNTUwNA=="}, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 509}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTQxODA3OnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/client/RandomNameGenerator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMTo1NTozOFrOFub4PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMzo0Nzo1MlrOFudc0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNTU4MQ==", "bodyText": "Should this be using the MM logger?", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384235581", "createdAt": "2020-02-26T01:55:38Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -375,48 +247,191 @@ public int getPercentFemale() {\n         return percentFemale;\n     }\n \n-    public void setPerentFemale(int i) {\n+    public void setPercentFemale(int i) {\n         percentFemale = i;\n     }\n \n     /**\n      * randomly select gender\n-     * \n+     *\n      * @return true if female\n      */\n     public boolean isFemale() {\n         return Compute.randomInt(100) < percentFemale;\n     }\n \n+    public static RandomNameGenerator getInstance() {\n+        if (rng == null) {\n+            initialize();\n+        }\n+        return rng;\n+    }\n+\n+    //region Initialization\n     public static void initialize() {\n-        if ((rng != null) && (rng.last != null)) {\n+        if (rng != null) {\n             return;\n         }\n-        if (null == rng) {\n-            rng = new RandomNameGenerator();\n-        }\n-        if (!rng.initialized && !rng.initializing) {\n-            rng.loader = new Thread(new Runnable() {\n-                public void run() {\n-                    rng.initializing = true;\n-                    rng.populateNames();\n-                    if (rng != null) {\n-                        rng.setInitialized(true);\n-                    }\n+\n+        rng = new RandomNameGenerator();\n+\n+        if (!initialized && !initializing) {\n+            rng.loader = new Thread(() -> {\n+                initializing = true;\n+                rng.populateNames();\n+                if (rng != null) {\n+                    rng.setInitialized();\n                 }\n             }, \"Random Name Generator name populator\");\n             rng.loader.setPriority(Thread.NORM_PRIORITY - 1);\n             rng.loader.start();\n         }\n     }\n \n-    public static RandomNameGenerator getInstance() {\n-        if (null == rng) {\n-            initialize();\n+    public void populateNames() {\n+        //region Variable Instantiation\n+        int numEthnicCodes = 0;\n+        //endregion Variable Instantiation\n+\n+        //region Map Instantiation\n+        maleGivenNames = new HashMap<>();\n+        femaleGivenNames = new HashMap<>();\n+        surnames = new HashMap<>();\n+        factionGivenNames = new HashMap<>();\n+        factionEthnicCodes = new HashMap<>();\n+\n+        // Determine the number of ethnic codes\n+        File masterAncestryFile = new MegaMekFile(Configuration.namesDir(), FILENAME_MASTER_ANCESTRY).getFile();\n+        try (InputStream is = new FileInputStream(masterAncestryFile);\n+             Scanner input = new Scanner(is, \"UTF-8\")) {\n+\n+            while (input.hasNextLine()) {\n+                input.nextLine();\n+                numEthnicCodes++;\n+            }\n+        } catch (IOException e) {\n+            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + masterAncestryFile + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 566}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0MTQxMA==", "bodyText": "Question, which is the current MM Logger?", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384241410", "createdAt": "2020-02-26T02:19:14Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -375,48 +247,191 @@ public int getPercentFemale() {\n         return percentFemale;\n     }\n \n-    public void setPerentFemale(int i) {\n+    public void setPercentFemale(int i) {\n         percentFemale = i;\n     }\n \n     /**\n      * randomly select gender\n-     * \n+     *\n      * @return true if female\n      */\n     public boolean isFemale() {\n         return Compute.randomInt(100) < percentFemale;\n     }\n \n+    public static RandomNameGenerator getInstance() {\n+        if (rng == null) {\n+            initialize();\n+        }\n+        return rng;\n+    }\n+\n+    //region Initialization\n     public static void initialize() {\n-        if ((rng != null) && (rng.last != null)) {\n+        if (rng != null) {\n             return;\n         }\n-        if (null == rng) {\n-            rng = new RandomNameGenerator();\n-        }\n-        if (!rng.initialized && !rng.initializing) {\n-            rng.loader = new Thread(new Runnable() {\n-                public void run() {\n-                    rng.initializing = true;\n-                    rng.populateNames();\n-                    if (rng != null) {\n-                        rng.setInitialized(true);\n-                    }\n+\n+        rng = new RandomNameGenerator();\n+\n+        if (!initialized && !initializing) {\n+            rng.loader = new Thread(() -> {\n+                initializing = true;\n+                rng.populateNames();\n+                if (rng != null) {\n+                    rng.setInitialized();\n                 }\n             }, \"Random Name Generator name populator\");\n             rng.loader.setPriority(Thread.NORM_PRIORITY - 1);\n             rng.loader.start();\n         }\n     }\n \n-    public static RandomNameGenerator getInstance() {\n-        if (null == rng) {\n-            initialize();\n+    public void populateNames() {\n+        //region Variable Instantiation\n+        int numEthnicCodes = 0;\n+        //endregion Variable Instantiation\n+\n+        //region Map Instantiation\n+        maleGivenNames = new HashMap<>();\n+        femaleGivenNames = new HashMap<>();\n+        surnames = new HashMap<>();\n+        factionGivenNames = new HashMap<>();\n+        factionEthnicCodes = new HashMap<>();\n+\n+        // Determine the number of ethnic codes\n+        File masterAncestryFile = new MegaMekFile(Configuration.namesDir(), FILENAME_MASTER_ANCESTRY).getFile();\n+        try (InputStream is = new FileInputStream(masterAncestryFile);\n+             Scanner input = new Scanner(is, \"UTF-8\")) {\n+\n+            while (input.hasNextLine()) {\n+                input.nextLine();\n+                numEthnicCodes++;\n+            }\n+        } catch (IOException e) {\n+            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + masterAncestryFile + \"'\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNTU4MQ=="}, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 566}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI2MTMyOA==", "bodyText": "Figured it out, and fixed", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384261328", "createdAt": "2020-02-26T03:47:52Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -375,48 +247,191 @@ public int getPercentFemale() {\n         return percentFemale;\n     }\n \n-    public void setPerentFemale(int i) {\n+    public void setPercentFemale(int i) {\n         percentFemale = i;\n     }\n \n     /**\n      * randomly select gender\n-     * \n+     *\n      * @return true if female\n      */\n     public boolean isFemale() {\n         return Compute.randomInt(100) < percentFemale;\n     }\n \n+    public static RandomNameGenerator getInstance() {\n+        if (rng == null) {\n+            initialize();\n+        }\n+        return rng;\n+    }\n+\n+    //region Initialization\n     public static void initialize() {\n-        if ((rng != null) && (rng.last != null)) {\n+        if (rng != null) {\n             return;\n         }\n-        if (null == rng) {\n-            rng = new RandomNameGenerator();\n-        }\n-        if (!rng.initialized && !rng.initializing) {\n-            rng.loader = new Thread(new Runnable() {\n-                public void run() {\n-                    rng.initializing = true;\n-                    rng.populateNames();\n-                    if (rng != null) {\n-                        rng.setInitialized(true);\n-                    }\n+\n+        rng = new RandomNameGenerator();\n+\n+        if (!initialized && !initializing) {\n+            rng.loader = new Thread(() -> {\n+                initializing = true;\n+                rng.populateNames();\n+                if (rng != null) {\n+                    rng.setInitialized();\n                 }\n             }, \"Random Name Generator name populator\");\n             rng.loader.setPriority(Thread.NORM_PRIORITY - 1);\n             rng.loader.start();\n         }\n     }\n \n-    public static RandomNameGenerator getInstance() {\n-        if (null == rng) {\n-            initialize();\n+    public void populateNames() {\n+        //region Variable Instantiation\n+        int numEthnicCodes = 0;\n+        //endregion Variable Instantiation\n+\n+        //region Map Instantiation\n+        maleGivenNames = new HashMap<>();\n+        femaleGivenNames = new HashMap<>();\n+        surnames = new HashMap<>();\n+        factionGivenNames = new HashMap<>();\n+        factionEthnicCodes = new HashMap<>();\n+\n+        // Determine the number of ethnic codes\n+        File masterAncestryFile = new MegaMekFile(Configuration.namesDir(), FILENAME_MASTER_ANCESTRY).getFile();\n+        try (InputStream is = new FileInputStream(masterAncestryFile);\n+             Scanner input = new Scanner(is, \"UTF-8\")) {\n+\n+            while (input.hasNextLine()) {\n+                input.nextLine();\n+                numEthnicCodes++;\n+            }\n+        } catch (IOException e) {\n+            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + masterAncestryFile + \"'\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNTU4MQ=="}, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 566}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTQyNjgzOnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/client/RandomNameGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMjowMTowOFrOFub9jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwMjoyNTo1MVrOFucVpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNjk0Mw==", "bodyText": "This puts a reliance on the filenames ending in .txt (all lower), so I'd add that comment above with the file names.", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384236943", "createdAt": "2020-02-26T02:01:08Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -375,48 +247,191 @@ public int getPercentFemale() {\n         return percentFemale;\n     }\n \n-    public void setPerentFemale(int i) {\n+    public void setPercentFemale(int i) {\n         percentFemale = i;\n     }\n \n     /**\n      * randomly select gender\n-     * \n+     *\n      * @return true if female\n      */\n     public boolean isFemale() {\n         return Compute.randomInt(100) < percentFemale;\n     }\n \n+    public static RandomNameGenerator getInstance() {\n+        if (rng == null) {\n+            initialize();\n+        }\n+        return rng;\n+    }\n+\n+    //region Initialization\n     public static void initialize() {\n-        if ((rng != null) && (rng.last != null)) {\n+        if (rng != null) {\n             return;\n         }\n-        if (null == rng) {\n-            rng = new RandomNameGenerator();\n-        }\n-        if (!rng.initialized && !rng.initializing) {\n-            rng.loader = new Thread(new Runnable() {\n-                public void run() {\n-                    rng.initializing = true;\n-                    rng.populateNames();\n-                    if (rng != null) {\n-                        rng.setInitialized(true);\n-                    }\n+\n+        rng = new RandomNameGenerator();\n+\n+        if (!initialized && !initializing) {\n+            rng.loader = new Thread(() -> {\n+                initializing = true;\n+                rng.populateNames();\n+                if (rng != null) {\n+                    rng.setInitialized();\n                 }\n             }, \"Random Name Generator name populator\");\n             rng.loader.setPriority(Thread.NORM_PRIORITY - 1);\n             rng.loader.start();\n         }\n     }\n \n-    public static RandomNameGenerator getInstance() {\n-        if (null == rng) {\n-            initialize();\n+    public void populateNames() {\n+        //region Variable Instantiation\n+        int numEthnicCodes = 0;\n+        //endregion Variable Instantiation\n+\n+        //region Map Instantiation\n+        maleGivenNames = new HashMap<>();\n+        femaleGivenNames = new HashMap<>();\n+        surnames = new HashMap<>();\n+        factionGivenNames = new HashMap<>();\n+        factionEthnicCodes = new HashMap<>();\n+\n+        // Determine the number of ethnic codes\n+        File masterAncestryFile = new MegaMekFile(Configuration.namesDir(), FILENAME_MASTER_ANCESTRY).getFile();\n+        try (InputStream is = new FileInputStream(masterAncestryFile);\n+             Scanner input = new Scanner(is, \"UTF-8\")) {\n+\n+            while (input.hasNextLine()) {\n+                input.nextLine();\n+                numEthnicCodes++;\n+            }\n+        } catch (IOException e) {\n+            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + masterAncestryFile + \"'\");\n         }\n-        return rng;\n+\n+        // Then immediately instantiate the number of weighted maps needed for Given Names and Surnames\n+        for (int i = 1; i <= numEthnicCodes; i++) {\n+            maleGivenNames.put(i, new WeightedMap<>());\n+            femaleGivenNames.put(i, new WeightedMap<>());\n+            surnames.put(i, new WeightedMap<>());\n+        }\n+        //endregion Map Instantiation\n+\n+        //region Read Names\n+        readNamesFileToMap(maleGivenNames, FILENAME_FIRSTNAMES_MALE);\n+        readNamesFileToMap(femaleGivenNames, FILENAME_FIRSTNAMES_FEMALE);\n+        readNamesFileToMap(surnames, FILENAME_SURNAMES);\n+        //endregion Read Names\n+\n+        //region Faction Files\n+        // all faction files should be in the faction directory\n+        File factionsDir = new MegaMekFile(Configuration.namesDir(), DIR_NAME_FACTIONS).getFile();\n+        String[] fileNames = factionsDir.list();\n+\n+        if ((fileNames == null) || (fileNames.length == 0)) {\n+            //region No Factions Specified\n+            System.err.println(\"RandomNameGenerator.populateNames(): No faction files found!\");\n+            // We will create a general list where everything is weighted at one to allow player to\n+            // play with named characters, indexing it at 1\n+            String key = \"General\";\n+\n+            // Initialize Maps\n+            factionGivenNames.put(key, new HashMap<>());\n+            factionEthnicCodes.put(key, new WeightedMap<>());\n+\n+            // Add information to maps\n+            for (int i = 0; i <= numEthnicCodes; i++) {\n+                factionGivenNames.get(key).put(i, new WeightedMap<>());\n+                factionGivenNames.get(key).get(i).add(1, i);\n+                factionEthnicCodes.get(key).add(1, i);\n+            }\n+            //endregion No Factions Specified\n+        } else {\n+            for (String filename : fileNames) {\n+                // Determine the key based on the file name\n+                String key = filename.split(\"\\\\.txt\")[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 610}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI0MzEwOA==", "bodyText": "I've added it to the file system documentation, but must have missed it at the top of this file. Fixed.", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384243108", "createdAt": "2020-02-26T02:25:51Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -375,48 +247,191 @@ public int getPercentFemale() {\n         return percentFemale;\n     }\n \n-    public void setPerentFemale(int i) {\n+    public void setPercentFemale(int i) {\n         percentFemale = i;\n     }\n \n     /**\n      * randomly select gender\n-     * \n+     *\n      * @return true if female\n      */\n     public boolean isFemale() {\n         return Compute.randomInt(100) < percentFemale;\n     }\n \n+    public static RandomNameGenerator getInstance() {\n+        if (rng == null) {\n+            initialize();\n+        }\n+        return rng;\n+    }\n+\n+    //region Initialization\n     public static void initialize() {\n-        if ((rng != null) && (rng.last != null)) {\n+        if (rng != null) {\n             return;\n         }\n-        if (null == rng) {\n-            rng = new RandomNameGenerator();\n-        }\n-        if (!rng.initialized && !rng.initializing) {\n-            rng.loader = new Thread(new Runnable() {\n-                public void run() {\n-                    rng.initializing = true;\n-                    rng.populateNames();\n-                    if (rng != null) {\n-                        rng.setInitialized(true);\n-                    }\n+\n+        rng = new RandomNameGenerator();\n+\n+        if (!initialized && !initializing) {\n+            rng.loader = new Thread(() -> {\n+                initializing = true;\n+                rng.populateNames();\n+                if (rng != null) {\n+                    rng.setInitialized();\n                 }\n             }, \"Random Name Generator name populator\");\n             rng.loader.setPriority(Thread.NORM_PRIORITY - 1);\n             rng.loader.start();\n         }\n     }\n \n-    public static RandomNameGenerator getInstance() {\n-        if (null == rng) {\n-            initialize();\n+    public void populateNames() {\n+        //region Variable Instantiation\n+        int numEthnicCodes = 0;\n+        //endregion Variable Instantiation\n+\n+        //region Map Instantiation\n+        maleGivenNames = new HashMap<>();\n+        femaleGivenNames = new HashMap<>();\n+        surnames = new HashMap<>();\n+        factionGivenNames = new HashMap<>();\n+        factionEthnicCodes = new HashMap<>();\n+\n+        // Determine the number of ethnic codes\n+        File masterAncestryFile = new MegaMekFile(Configuration.namesDir(), FILENAME_MASTER_ANCESTRY).getFile();\n+        try (InputStream is = new FileInputStream(masterAncestryFile);\n+             Scanner input = new Scanner(is, \"UTF-8\")) {\n+\n+            while (input.hasNextLine()) {\n+                input.nextLine();\n+                numEthnicCodes++;\n+            }\n+        } catch (IOException e) {\n+            System.err.println(\"RandomNameGenerator.populateNames(): Could not find '\" + masterAncestryFile + \"'\");\n         }\n-        return rng;\n+\n+        // Then immediately instantiate the number of weighted maps needed for Given Names and Surnames\n+        for (int i = 1; i <= numEthnicCodes; i++) {\n+            maleGivenNames.put(i, new WeightedMap<>());\n+            femaleGivenNames.put(i, new WeightedMap<>());\n+            surnames.put(i, new WeightedMap<>());\n+        }\n+        //endregion Map Instantiation\n+\n+        //region Read Names\n+        readNamesFileToMap(maleGivenNames, FILENAME_FIRSTNAMES_MALE);\n+        readNamesFileToMap(femaleGivenNames, FILENAME_FIRSTNAMES_FEMALE);\n+        readNamesFileToMap(surnames, FILENAME_SURNAMES);\n+        //endregion Read Names\n+\n+        //region Faction Files\n+        // all faction files should be in the faction directory\n+        File factionsDir = new MegaMekFile(Configuration.namesDir(), DIR_NAME_FACTIONS).getFile();\n+        String[] fileNames = factionsDir.list();\n+\n+        if ((fileNames == null) || (fileNames.length == 0)) {\n+            //region No Factions Specified\n+            System.err.println(\"RandomNameGenerator.populateNames(): No faction files found!\");\n+            // We will create a general list where everything is weighted at one to allow player to\n+            // play with named characters, indexing it at 1\n+            String key = \"General\";\n+\n+            // Initialize Maps\n+            factionGivenNames.put(key, new HashMap<>());\n+            factionEthnicCodes.put(key, new WeightedMap<>());\n+\n+            // Add information to maps\n+            for (int i = 0; i <= numEthnicCodes; i++) {\n+                factionGivenNames.get(key).put(i, new WeightedMap<>());\n+                factionGivenNames.get(key).get(i).add(1, i);\n+                factionEthnicCodes.get(key).add(1, i);\n+            }\n+            //endregion No Factions Specified\n+        } else {\n+            for (String filename : fileNames) {\n+                // Determine the key based on the file name\n+                String key = filename.split(\"\\\\.txt\")[0];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIzNjk0Mw=="}, "originalCommit": {"oid": "6be2e04c18b321dea206cd3ac1dbaafead7d89a1"}, "originalPosition": 610}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDg2NDUzOnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/client/RandomNameGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjoyODozNVrOFupoOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjoyODozNVrOFupoOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ2MDg1Nw==", "bodyText": "// volatile to ensure readers get the current version\n    // this is only okay because we only ever have one\n    // writer and no writer performs a read-before-write\n    private volatile boolean initialized;\n\n    // synchronized ensures only one thread is entering `getInstance` at a time\n    public static synchronized RandomNameGenerator getInstance() {\n        // only this code reads and writes `rng`\n        if (rng == null) {\n            // synchronized ensures this will only be entered exactly once\n            rng = new RandomNameGenerator();\n            rng.runThreadLoader();\n        }\n        // when getInstance returns, rng will always be non-null\n        return rng;\n    }\n\n    // unchanged, it is only run once\n    private void runThreadLoader() {\n        Thread loader = new Thread(() -> {\n            rng.populateNames();\n            rng.removeInitializationListener();\n        }, \"Random Name Generator name initializer\");\n        loader.setPriority(Thread.NORM_PRIORITY - 1);\n        loader.start();\n    }\n\n    private void populateNames() {\n        // ... everything the same ...\n\n        // there is only ever one invocation of us\n        // so only one writer to this field is fine\n        // and even if not, no writers do a\n        // read-before-write.\n        initialized = true;\n    }\nYou would then use initialized in your downstream code.", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384460857", "createdAt": "2020-02-26T12:28:35Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -375,49 +268,186 @@ public int getPercentFemale() {\n         return percentFemale;\n     }\n \n-    public void setPerentFemale(int i) {\n+    public void setPercentFemale(int i) {\n         percentFemale = i;\n     }\n \n     /**\n      * randomly select gender\n-     * \n+     *\n      * @return true if female\n      */\n     public boolean isFemale() {\n         return Compute.randomInt(100) < percentFemale;\n     }\n \n-    public static void initialize() {\n-        if ((rng != null) && (rng.last != null)) {\n-            return;\n+    public static RandomNameGenerator getInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9771bb90ef029bf8b9355d08d1f0b8f62f2a033e"}, "originalPosition": 531}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjA5NDAzOnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/client/RandomNameGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo0MToxNlrOFu1ebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo0MToxNlrOFu1ebA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NDk1Ng==", "bodyText": "Where is initialized set to true?", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r384654956", "createdAt": "2020-02-26T17:41:16Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -375,49 +267,186 @@ public int getPercentFemale() {\n         return percentFemale;\n     }\n \n-    public void setPerentFemale(int i) {\n+    public void setPercentFemale(int i) {\n         percentFemale = i;\n     }\n \n     /**\n      * randomly select gender\n-     * \n+     *\n      * @return true if female\n      */\n     public boolean isFemale() {\n         return Compute.randomInt(100) < percentFemale;\n     }\n \n-    public static void initialize() {\n-        if ((rng != null) && (rng.last != null)) {\n-            return;\n-        }\n-        if (null == rng) {\n+    /**\n+     *\n+     * @return the instance of the RandomNameGenerator to use\n+     */\n+    public static synchronized RandomNameGenerator getInstance() {\n+        // only this code reads and writes `rng`\n+        if (rng == null) {\n+            // synchronized ensures this will only be entered exactly once\n             rng = new RandomNameGenerator();\n+            rng.runThreadLoader();\n         }\n-        if (!rng.initialized && !rng.initializing) {\n-            rng.loader = new Thread(new Runnable() {\n-                public void run() {\n-                    rng.initializing = true;\n-                    rng.populateNames();\n-                    if (rng != null) {\n-                        rng.setInitialized(true);\n+        // when getInstance returns, rng will always be non-null\n+        return rng;\n+    }\n+    //endregion Getters and Setters\n+\n+    //region Initialization\n+    private void runThreadLoader() {\n+        Thread loader = new Thread(() -> {\n+            rng.populateNames();\n+            rng.removeInitializationListener();\n+        }, \"Random Name Generator name initializer\");\n+        loader.setPriority(Thread.NORM_PRIORITY - 1);\n+        loader.start();\n+    }\n+\n+    public void addInitializationListener(PropertyChangeListener listener) {\n+        pcs.addPropertyChangeListener(listener);\n+    }\n+\n+    private void removeInitializationListener() {\n+        pcs.firePropertyChange(PROP_INITIALIZED, initialized, initialized = true);\n+        for (PropertyChangeListener listener : pcs.getPropertyChangeListeners()) {\n+            pcs.removePropertyChangeListener(listener);\n+        }\n+    }\n+\n+    private void populateNames() {\n+        //region Variable Instantiation\n+        int numEthnicCodes = 0;\n+        //endregion Variable Instantiation\n+\n+        //region Map Instantiation\n+        maleGivenNames = new HashMap<>();\n+        femaleGivenNames = new HashMap<>();\n+        surnames = new HashMap<>();\n+        factionGivenNames = new HashMap<>();\n+        factionEthnicCodes = new HashMap<>();\n+\n+        // Determine the number of ethnic codes\n+        File masterAncestryFile = new MegaMekFile(Configuration.namesDir(), FILENAME_MASTER_ANCESTRY).getFile();\n+        try (InputStream is = new FileInputStream(masterAncestryFile);\n+             Scanner input = new Scanner(is, \"UTF-8\")) {\n+\n+            while (input.hasNextLine()) {\n+                input.nextLine();\n+                numEthnicCodes++;\n+            }\n+        } catch (IOException e) {\n+            logger.error(RandomNameGenerator.class, \"populateNames\",\n+                    \"Could not find \" + masterAncestryFile + \"!\");\n+        }\n+\n+        // Then immediately instantiate the number of weighted maps needed for Given Names and Surnames\n+        for (int i = 1; i <= numEthnicCodes; i++) {\n+            maleGivenNames.put(i, new WeightedMap<>());\n+            femaleGivenNames.put(i, new WeightedMap<>());\n+            surnames.put(i, new WeightedMap<>());\n+        }\n+        //endregion Map Instantiation\n+\n+        //region Read Names\n+        readNamesFileToMap(maleGivenNames, FILENAME_FIRSTNAMES_MALE);\n+        readNamesFileToMap(femaleGivenNames, FILENAME_FIRSTNAMES_FEMALE);\n+        readNamesFileToMap(surnames, FILENAME_SURNAMES);\n+        //endregion Read Names\n+\n+        //region Faction Files\n+        // all faction files should be in the faction directory\n+        File factionsDir = new MegaMekFile(Configuration.namesDir(), DIR_NAME_FACTIONS).getFile();\n+        String[] fileNames = factionsDir.list();\n+\n+        if ((fileNames == null) || (fileNames.length == 0)) {\n+            //region No Factions Specified\n+            logger.error(RandomNameGenerator.class, \"populateNames\",\n+                    \"No faction files found!\");\n+\n+            // We will create a general list where everything is weighted at one to allow player to\n+            // play with named characters, indexing it at 1\n+            String key = KEY_DEFAULT_FACTION;\n+\n+            // Initialize Maps\n+            factionGivenNames.put(key, new HashMap<>());\n+            factionEthnicCodes.put(key, new WeightedMap<>());\n+\n+            // Add information to maps\n+            for (int i = 0; i <= numEthnicCodes; i++) {\n+                factionGivenNames.get(key).put(i, new WeightedMap<>());\n+                factionGivenNames.get(key).get(i).add(1, i);\n+                factionEthnicCodes.get(key).add(1, i);\n+            }\n+            //endregion No Factions Specified\n+        } else {\n+            for (String filename : fileNames) {\n+                // Determine the key based on the file name\n+                String key = filename.split(\"\\\\.txt\")[0];\n+\n+                // Just check with the ethnic codes, as if it has the key then the two names\n+                // maps do\n+                if ((key.length() < 1) || factionEthnicCodes.containsKey(key)) {\n+                    continue;\n+                }\n+\n+                // Initialize Maps\n+                factionGivenNames.put(key, new HashMap<>());\n+                factionEthnicCodes.put(key, new WeightedMap<>());\n+\n+                File factionFile = new MegaMekFile(factionsDir, filename).getFile();\n+                try (InputStream is = new FileInputStream(factionFile);\n+                     Scanner input = new Scanner(is, \"UTF-8\")) {\n+\n+                    while (input.hasNextLine()) {\n+                        String[] values = input.nextLine().split(\",\");\n+                        int ethnicCode = Integer.parseInt(values[0]);\n+\n+                        // Add information to maps\n+                        // The weights for ethnic given names for each surname ethnicity will be\n+                        // stored in the file at i + 2, so that is where we will parse them from\n+                        for (int i = 0; i <= numEthnicCodes; i++) {\n+                            factionGivenNames.get(key).put(ethnicCode, new WeightedMap<>());\n+                            factionGivenNames.get(key).get(ethnicCode).add(\n+                                    Integer.parseInt(values[i + 2]), i);\n+                        }\n+\n+                        factionEthnicCodes.get(key).add(Integer.parseInt(values[2]), ethnicCode);\n                     }\n+                } catch (IOException fne) {\n+                    logger.error(RandomNameGenerator.class, \"populateNames\",\n+                            \"Could not find \" + factionFile + \"!\");\n                 }\n-            }, \"Random Name Generator name populator\");\n-            rng.loader.setPriority(Thread.NORM_PRIORITY - 1);\n-            rng.loader.start();\n+            }\n         }\n+        //endregion Faction Files", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090f6266eb884c2ea7558bfe7948aa51b07a5e71"}, "originalPosition": 684}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTAyNzg3OnYy", "diffSide": "RIGHT", "path": "megamek/src/megamek/client/RandomNameGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzowMDoyOFrOFvRRWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzowMDoyOFrOFvRRWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExMDM2MA==", "bodyText": "Here @sixlettervariables, same place as it was originally", "url": "https://github.com/MegaMek/megamek/pull/1716#discussion_r385110360", "createdAt": "2020-02-27T13:00:28Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/client/RandomNameGenerator.java", "diffHunk": "@@ -375,49 +269,184 @@ public int getPercentFemale() {\n         return percentFemale;\n     }\n \n-    public void setPerentFemale(int i) {\n+    public void setPercentFemale(int i) {\n         percentFemale = i;\n     }\n \n     /**\n      * randomly select gender\n-     * \n+     *\n      * @return true if female\n      */\n     public boolean isFemale() {\n         return Compute.randomInt(100) < percentFemale;\n     }\n \n-    public static void initialize() {\n-        if ((rng != null) && (rng.last != null)) {\n-            return;\n-        }\n-        if (null == rng) {\n+    /**\n+     *\n+     * @return the instance of the RandomNameGenerator to use\n+     */\n+    public static synchronized RandomNameGenerator getInstance() {\n+        // only this code reads and writes `rng`\n+        if (rng == null) {\n+            // synchronized ensures this will only be entered exactly once\n             rng = new RandomNameGenerator();\n+            rng.runThreadLoader();\n+        }\n+        // when getInstance returns, rng will always be non-null\n+        return rng;\n+    }\n+    //endregion Getters and Setters\n+\n+    //region Initialization\n+    private void runThreadLoader() {\n+        Thread loader = new Thread(() -> {\n+            rng.populateNames();\n+            rng.removeInitializationListener();\n+        }, \"Random Name Generator name initializer\");\n+        loader.setPriority(Thread.NORM_PRIORITY - 1);\n+        loader.start();\n+    }\n+\n+    public void addInitializationListener(PropertyChangeListener listener) {\n+        pcs.addPropertyChangeListener(listener);\n+    }\n+\n+    private void removeInitializationListener() {\n+        pcs.firePropertyChange(PROP_INITIALIZED, initialized, initialized = true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "361326c229a21836e6a66f1f938c713b843df485"}, "originalPosition": 566}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2492, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}