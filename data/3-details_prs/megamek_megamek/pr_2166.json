{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMDExOTAx", "number": 2166, "title": "AbstractIcon", "bodyText": "I am looking for a review on the current state before I begin a complete implementation from this basis. This implementation is the basis of my portrait rework to standardize and simplify the code while fixing the following issues:\n#992\n#1554\nMegaMek/mekhq#572\nMegaMek/mekhq#564", "createdAt": "2020-08-22T17:09:07Z", "url": "https://github.com/MegaMek/megamek/pull/2166", "merged": true, "mergeCommit": {"oid": "2f9b1c3adfbc4607d5df50999106b748dcb38d17"}, "closed": true, "closedAt": "2020-08-22T17:33:04Z", "author": {"login": "Windchild292"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBcfO8gH2gAyNDcyMDExOTAxOmEzZDczODM1OGFhODA3NzBjN2YxY2ZhY2Y5YjAzZTQzNDFlMzQ1NzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBcsAVAH2gAyNDcyMDExOTAxOmNjYzc4MzIxYzg4MzUyZDNlZDMzODE1OTdjOTQ0Y2Q2MmZlNDMzOGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a3d738358aa80770c7f1cfacf9b03e4341e34570", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/megamek/commit/a3d738358aa80770c7f1cfacf9b03e4341e34570", "committedDate": "2020-08-22T17:02:37Z", "message": "Creating AbstractIcon and implementing the first form in Portrait"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyOTM5MTU3", "url": "https://github.com/MegaMek/megamek/pull/2166#pullrequestreview-472939157", "createdAt": "2020-08-22T17:12:06Z", "commit": {"oid": "a3d738358aa80770c7f1cfacf9b03e4341e34570"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNzoxMjowNlrOHFGdPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxNzoxMjozOFrOHFGdcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExMDcxNw==", "bodyText": "Let's pull 75 up to a constant or something.", "url": "https://github.com/MegaMek/megamek/pull/2166#discussion_r475110717", "createdAt": "2020-08-22T17:12:06Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/common/icons/AbstractIcon.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MegaMek.\n+ *\n+ * MegaMek is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MegaMek is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MegaMek. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package megamek.common.icons;\n+\n+import megamek.MegaMek;\n+import megamek.common.util.fileUtils.DirectoryItems;\n+import megamek.utils.MegaMekXmlUtil;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.PrintWriter;\n+import java.io.Serializable;\n+\n+public abstract class AbstractIcon implements Serializable {\n+    //region Variable Declarations\n+    private static final long serialVersionUID = 870271199001476289L;\n+\n+    public static final String ROOT_CATEGORY = \"-- General --\";\n+    public static final String DEFAULT_ICON_FILENAME = \"None\";\n+\n+    private String category;\n+    private String fileName;\n+\n+    private int width;\n+    private int height;\n+    //endregion Variable Declarations\n+\n+    //region Constructors\n+    protected AbstractIcon() {\n+        this(ROOT_CATEGORY, DEFAULT_ICON_FILENAME);\n+    }\n+\n+    protected AbstractIcon(String category, String fileName) {\n+        this(category, fileName, 0, 0);\n+    }\n+\n+    protected AbstractIcon(String category, String fileName, int width, int height) {\n+        setCategory(category);\n+        setFileName(fileName);\n+        setWidth(width);\n+        setHeight(height);\n+    }\n+    //endregion Constructors\n+\n+    //region Getters/Setters\n+    public String getCategory() {\n+        return category;\n+    }\n+\n+    public void setCategory(String category) {\n+        this.category = category;\n+    }\n+\n+    public String getFileName() {\n+        return fileName;\n+    }\n+\n+    public void setFileName(String fileName) {\n+        this.fileName = fileName;\n+    }\n+\n+    public int getWidth() {\n+        return width;\n+    }\n+\n+    public void setWidth(int width) {\n+        this.width = width;\n+    }\n+\n+    public int getHeight() {\n+        return height;\n+    }\n+\n+    public void setHeight(int height) {\n+        this.height = height;\n+    }\n+    //endregion Getters/Setters\n+\n+    /**\n+     * This is used to determine whether the created image should be scaled or not by checking the\n+     * Height and Width values. If either is a 0, then we need to scale the produced image\n+     * @return whether to scale the image or not\n+     */\n+    protected boolean isScaled() {\n+        return (getHeight() == 0) || (getWidth() == 0);\n+    }\n+\n+    /**\n+     * @param imageDirectory the directory the image is stored within\n+     * @return the ImageIcon for the Image stored by the AbstractIcon\n+     */\n+    public ImageIcon getImageIcon(DirectoryItems imageDirectory) {\n+        return new ImageIcon(getImage(imageDirectory));\n+    }\n+\n+    /**\n+     * This is used to create the proper image and scale it if required. It also handles null protection\n+     * by creating a blank image if required.\n+     * @param imageDirectory the directory the image is stored within\n+     * @return the created image\n+     */\n+    public Image getImage(DirectoryItems imageDirectory) {\n+        Image image = getBaseImage(imageDirectory);\n+\n+        if (image == null) {\n+            return createBlankImage();\n+        } else if (isScaled()) {\n+            return image.getScaledInstance(getWidth(), getHeight(), Image.SCALE_DEFAULT);\n+        } else {\n+            return image;\n+        }\n+    }\n+\n+    /**\n+     * This is abstract to allow for different formats for determining the image in question\n+     * @param imageDirectory the directory the image is stored within\n+     * @return the Image stored by the AbstractIcon\n+     */\n+    public abstract Image getBaseImage(DirectoryItems imageDirectory);\n+\n+    /**\n+     * This is a utility method that creates a blank image in the case that no image is found.\n+     * @return a clear blank image\n+     */\n+    protected Image createBlankImage() {\n+        final int width = (getWidth() == 0) ? 75 : getWidth();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d738358aa80770c7f1cfacf9b03e4341e34570"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTExMDc2OA==", "bodyText": "Good candidate for a constant/static of sorts.", "url": "https://github.com/MegaMek/megamek/pull/2166#discussion_r475110768", "createdAt": "2020-08-22T17:12:38Z", "author": {"login": "sixlettervariables"}, "path": "megamek/src/megamek/common/icons/Portrait.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MegaMek.\n+ *\n+ * MegaMek is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MegaMek is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MegaMek. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+package megamek.common.icons;\n+\n+import megamek.MegaMek;\n+import megamek.common.Crew;\n+import megamek.common.util.fileUtils.DirectoryItems;\n+\n+import java.awt.*;\n+\n+public class Portrait extends AbstractIcon {\n+    private static final long serialVersionUID = -7562297705213174435L;\n+\n+    @Override\n+    public Image getBaseImage(DirectoryItems imageDirectory) {\n+        String category = (Crew.ROOT_PORTRAIT.equals(getCategory())) ? \"\" : getCategory();\n+        String filename = getFileName();\n+\n+        // Return the default image if the player has selected no portrait file.\n+        if ((category == null) || (filename == null) || Crew.PORTRAIT_NONE.equals(filename)) {\n+            filename = \"default.gif\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d738358aa80770c7f1cfacf9b03e4341e34570"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc78321c88352d3ed3381597c944cd62fe4338d", "author": {"user": {"login": "Windchild292", "name": "Justin Bowen"}}, "url": "https://github.com/MegaMek/megamek/commit/ccc78321c88352d3ed3381597c944cd62fe4338d", "committedDate": "2020-08-22T17:16:34Z", "message": "Swapping two inline constants to be proper constants"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4727, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}