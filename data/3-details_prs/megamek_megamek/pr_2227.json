{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMDM4MTg1", "number": 2227, "title": "Fix aero ammo explosion rep", "bodyText": "Fixes #2144\nPulled logic relevant to processing aero heat out of Server.java and into the ServerHelper class. Changed access level on a couple of server methods to package private.\nActual fix is on line 352 of ServerHelper.java. The issue was that the roll wasn't being added to the report, so it was incorrectly reporting an ammo explosion.", "createdAt": "2020-09-21T05:10:45Z", "url": "https://github.com/MegaMek/megamek/pull/2227", "merged": true, "mergeCommit": {"oid": "8dca3c146c8ff188113f5d0cb4425c5224345dc9"}, "closed": true, "closedAt": "2020-09-21T14:34:44Z", "author": {"login": "NickAragua"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdK8OgzAH2gAyNDkwMDM4MTg1OjBhZmIzY2U4MTY4MDg1OTJkYmFiODZiNGM0YmQ3YWUwNGE0ZDdiN2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLEWHrgH2gAyNDkwMDM4MTg1OjAzYjFmODY5YjY3ZWQ3NzQzZTNjZDdhYzdiZjMxODM5ZmQ4YjM4NDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0afb3ce816808592dbab86b4c4bd7ae04a4d7b7f", "author": {"user": {"login": "NickAragua", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/0afb3ce816808592dbab86b4c4bd7ae04a4d7b7f", "committedDate": "2020-09-21T05:06:38Z", "message": "fix and code extraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8d7b92c6813e21190c7a952e16dd424860b5f6d", "author": {"user": {"login": "NickAragua", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/c8d7b92c6813e21190c7a952e16dd424860b5f6d", "committedDate": "2020-09-21T05:06:44Z", "message": "Merge branch 'master' of https://github.com/MegaMek/megamek into fix_aero_ammo_explosion_rep"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjgyNDM4", "url": "https://github.com/MegaMek/megamek/pull/2227#pullrequestreview-492282438", "createdAt": "2020-09-21T05:12:59Z", "commit": {"oid": "c8d7b92c6813e21190c7a952e16dd424860b5f6d"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNToxMjo1OVrOHVA4UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNToxNDoxNlrOHVA5Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NjU2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {\n          \n          \n            \n                    if (game.getEntity(entity.getTransportId()) instanceof FighterSquadron) {", "url": "https://github.com/MegaMek/megamek/pull/2227#discussion_r491796561", "createdAt": "2020-09-21T05:12:59Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/server/ServerHelper.java", "diffHunk": "@@ -48,4 +61,338 @@ public static boolean infantryInOpen(Entity te, IHex te_hex, IGame game,\n         \n         return false;\n     }\n+    \n+    /**\n+     * Worker function that handles heat as applied to aerospace fighter\n+     */\n+    public static void resolveAeroHeat(IGame game, Entity entity, Vector<Report> vPhaseReport, Vector<Report> rhsReports, \n+            int radicalHSBonus, int hotDogMod, Server s) {\n+        Report r;\n+        \n+        // If this aero is part of a squadron, we will deal with its\n+        // heat with the fighter squadron\n+        if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d7b92c6813e21190c7a952e16dd424860b5f6d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5Njc4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if ((entity.heat < 14) && !(entity.isManualShutdown())) {\n          \n          \n            \n                            if ((entity.heat < 14) && !entity.isManualShutdown()) {", "url": "https://github.com/MegaMek/megamek/pull/2227#discussion_r491796783", "createdAt": "2020-09-21T05:14:04Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/server/ServerHelper.java", "diffHunk": "@@ -48,4 +61,338 @@ public static boolean infantryInOpen(Entity te, IHex te_hex, IGame game,\n         \n         return false;\n     }\n+    \n+    /**\n+     * Worker function that handles heat as applied to aerospace fighter\n+     */\n+    public static void resolveAeroHeat(IGame game, Entity entity, Vector<Report> vPhaseReport, Vector<Report> rhsReports, \n+            int radicalHSBonus, int hotDogMod, Server s) {\n+        Report r;\n+        \n+        // If this aero is part of a squadron, we will deal with its\n+        // heat with the fighter squadron\n+        if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {\n+            return;\n+        }\n+\n+        // should we even bother?\n+        if (entity.isDestroyed() || entity.isDoomed()\n+            || entity.getCrew().isDoomed()\n+            || entity.getCrew().isDead()) {\n+            return;\n+        }\n+\n+        // engine hits add a lot of heat, provided the engine is on\n+        entity.heatBuildup += entity.getEngineCritHeat();\n+\n+        // If an Aero had an active Stealth suite, add 10 heat.\n+        if (entity.isStealthOn()) {\n+            entity.heatBuildup += 10;\n+            r = new Report(5015);\n+            r.subject = entity.getId();\n+            vPhaseReport.add(r);\n+        }\n+\n+        // Combat computers help manage heat\n+        if (entity.hasQuirk(OptionsConstants.QUIRK_POS_COMBAT_COMPUTER)) {\n+            int reduce = Math.min(entity.heatBuildup, 4);\n+            r = new Report(5026);\n+            r.subject = entity.getId();\n+            r.add(reduce);\n+            vPhaseReport.add(r);\n+            entity.heatBuildup -= reduce;\n+        }\n+\n+        // Add heat from external sources to the heat buildup\n+        int max_ext_heat = game.getOptions().intOption(\n+                OptionsConstants.ADVCOMBAT_MAX_EXTERNAL_HEAT); // Check Game Options\n+        if (max_ext_heat < 0) {\n+            max_ext_heat = 15; // standard value specified in TW p.159\n+        }\n+        entity.heatBuildup += Math.min(max_ext_heat, entity.heatFromExternal);\n+        entity.heatFromExternal = 0;\n+        // remove heat we cooled down\n+        entity.heatBuildup -= Math.min(9, entity.coolFromExternal);\n+        entity.coolFromExternal = 0;\n+\n+        // add the heat we've built up so far.\n+        entity.heat += entity.heatBuildup;\n+\n+        // how much heat can we sink?\n+        int tosink = entity.getHeatCapacityWithWater() + radicalHSBonus;\n+\n+        // should we use a coolant pod?\n+        int safeHeat = entity.hasInfernoAmmo() ? 9 : 13;\n+        int possibleSinkage = ((Aero) entity).getHeatSinks()\n+                - entity.getCoolantFailureAmount();\n+        for (Mounted m : entity.getEquipment()) {\n+            if (m.getType() instanceof AmmoType) {\n+                AmmoType at = (AmmoType) m.getType();\n+                if ((at.getAmmoType() == AmmoType.T_COOLANT_POD) && m.isAmmoUsable()) {\n+                    EquipmentMode mode = m.curMode();\n+                    if (mode.equals(\"dump\")) {\n+                        r = new Report(5260);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                    if (mode.equals(\"safe\") && ((entity.heat - tosink) > safeHeat)) {\n+                        r = new Report(5265);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                    if (mode.equals(\"efficient\")\n+                            && ((entity.heat - tosink) >= possibleSinkage)) {\n+                        r = new Report(5270);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        tosink = Math.min(tosink, entity.heat);\n+        entity.heat -= tosink;\n+        r = new Report(5035);\n+        r.subject = entity.getId();\n+        r.addDesc(entity);\n+        r.add(entity.heatBuildup);\n+        r.add(tosink);\n+        r.add(entity.heat);\n+        vPhaseReport.add(r);\n+        entity.heatBuildup = 0;\n+        vPhaseReport.addAll(rhsReports);\n+\n+        // add in the effects of heat\n+\n+        if ((entity instanceof Dropship) || (entity instanceof Jumpship)) {\n+            // only check for a possible control roll\n+            if (entity.heat > 0) {\n+                int bonus = (int) Math.ceil(entity.heat / 100.0);\n+                game.addControlRoll(new PilotingRollData(\n+                        entity.getId(), bonus, \"used too much heat\"));\n+                entity.heat = 0;\n+            }\n+            return;\n+        }\n+\n+        // Capital fighters can overheat and require control rolls\n+        if (entity.isCapitalFighter() && (entity.heat > 0)) {\n+            int penalty = (int) Math.ceil(entity.heat / 15.0);\n+            game.addControlRoll(new PilotingRollData(entity.getId(),\n+                    penalty, \"used too much heat\"));\n+        }\n+\n+        // Like other large craft, the rest of these rules don't apply\n+        // to capital fighters\n+        if (entity.isCapitalFighter()) {\n+            return;\n+        }\n+\n+        int autoShutDownHeat = 30;\n+        boolean mtHeat = game.getOptions().booleanOption(OptionsConstants.ADVCOMBAT_TACOPS_HEAT);\n+        if (mtHeat) {\n+            autoShutDownHeat = 50;\n+        }\n+\n+        // heat effects: start up\n+        if ((entity.heat < autoShutDownHeat) && entity.isShutDown()) {\n+            // only start up if not shut down by taser or a TSEMP\n+            if ((entity.getTaserShutdownRounds() == 0)\n+                    && (entity.getTsempEffect() != TSEMPWeapon.TSEMP_EFFECT_SHUTDOWN)) {\n+                if ((entity.heat < 14) && !(entity.isManualShutdown())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d7b92c6813e21190c7a952e16dd424860b5f6d"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc5NjgzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } else if (!(entity.isManualShutdown())) {\n          \n          \n            \n                            } else if (!entity.isManualShutdown()) {", "url": "https://github.com/MegaMek/megamek/pull/2227#discussion_r491796830", "createdAt": "2020-09-21T05:14:16Z", "author": {"login": "Windchild292"}, "path": "megamek/src/megamek/server/ServerHelper.java", "diffHunk": "@@ -48,4 +61,338 @@ public static boolean infantryInOpen(Entity te, IHex te_hex, IGame game,\n         \n         return false;\n     }\n+    \n+    /**\n+     * Worker function that handles heat as applied to aerospace fighter\n+     */\n+    public static void resolveAeroHeat(IGame game, Entity entity, Vector<Report> vPhaseReport, Vector<Report> rhsReports, \n+            int radicalHSBonus, int hotDogMod, Server s) {\n+        Report r;\n+        \n+        // If this aero is part of a squadron, we will deal with its\n+        // heat with the fighter squadron\n+        if ((game.getEntity(entity.getTransportId()) instanceof FighterSquadron)) {\n+            return;\n+        }\n+\n+        // should we even bother?\n+        if (entity.isDestroyed() || entity.isDoomed()\n+            || entity.getCrew().isDoomed()\n+            || entity.getCrew().isDead()) {\n+            return;\n+        }\n+\n+        // engine hits add a lot of heat, provided the engine is on\n+        entity.heatBuildup += entity.getEngineCritHeat();\n+\n+        // If an Aero had an active Stealth suite, add 10 heat.\n+        if (entity.isStealthOn()) {\n+            entity.heatBuildup += 10;\n+            r = new Report(5015);\n+            r.subject = entity.getId();\n+            vPhaseReport.add(r);\n+        }\n+\n+        // Combat computers help manage heat\n+        if (entity.hasQuirk(OptionsConstants.QUIRK_POS_COMBAT_COMPUTER)) {\n+            int reduce = Math.min(entity.heatBuildup, 4);\n+            r = new Report(5026);\n+            r.subject = entity.getId();\n+            r.add(reduce);\n+            vPhaseReport.add(r);\n+            entity.heatBuildup -= reduce;\n+        }\n+\n+        // Add heat from external sources to the heat buildup\n+        int max_ext_heat = game.getOptions().intOption(\n+                OptionsConstants.ADVCOMBAT_MAX_EXTERNAL_HEAT); // Check Game Options\n+        if (max_ext_heat < 0) {\n+            max_ext_heat = 15; // standard value specified in TW p.159\n+        }\n+        entity.heatBuildup += Math.min(max_ext_heat, entity.heatFromExternal);\n+        entity.heatFromExternal = 0;\n+        // remove heat we cooled down\n+        entity.heatBuildup -= Math.min(9, entity.coolFromExternal);\n+        entity.coolFromExternal = 0;\n+\n+        // add the heat we've built up so far.\n+        entity.heat += entity.heatBuildup;\n+\n+        // how much heat can we sink?\n+        int tosink = entity.getHeatCapacityWithWater() + radicalHSBonus;\n+\n+        // should we use a coolant pod?\n+        int safeHeat = entity.hasInfernoAmmo() ? 9 : 13;\n+        int possibleSinkage = ((Aero) entity).getHeatSinks()\n+                - entity.getCoolantFailureAmount();\n+        for (Mounted m : entity.getEquipment()) {\n+            if (m.getType() instanceof AmmoType) {\n+                AmmoType at = (AmmoType) m.getType();\n+                if ((at.getAmmoType() == AmmoType.T_COOLANT_POD) && m.isAmmoUsable()) {\n+                    EquipmentMode mode = m.curMode();\n+                    if (mode.equals(\"dump\")) {\n+                        r = new Report(5260);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                    if (mode.equals(\"safe\") && ((entity.heat - tosink) > safeHeat)) {\n+                        r = new Report(5265);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                    if (mode.equals(\"efficient\")\n+                            && ((entity.heat - tosink) >= possibleSinkage)) {\n+                        r = new Report(5270);\n+                        r.subject = entity.getId();\n+                        vPhaseReport.add(r);\n+                        m.setShotsLeft(0);\n+                        tosink += possibleSinkage;\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        tosink = Math.min(tosink, entity.heat);\n+        entity.heat -= tosink;\n+        r = new Report(5035);\n+        r.subject = entity.getId();\n+        r.addDesc(entity);\n+        r.add(entity.heatBuildup);\n+        r.add(tosink);\n+        r.add(entity.heat);\n+        vPhaseReport.add(r);\n+        entity.heatBuildup = 0;\n+        vPhaseReport.addAll(rhsReports);\n+\n+        // add in the effects of heat\n+\n+        if ((entity instanceof Dropship) || (entity instanceof Jumpship)) {\n+            // only check for a possible control roll\n+            if (entity.heat > 0) {\n+                int bonus = (int) Math.ceil(entity.heat / 100.0);\n+                game.addControlRoll(new PilotingRollData(\n+                        entity.getId(), bonus, \"used too much heat\"));\n+                entity.heat = 0;\n+            }\n+            return;\n+        }\n+\n+        // Capital fighters can overheat and require control rolls\n+        if (entity.isCapitalFighter() && (entity.heat > 0)) {\n+            int penalty = (int) Math.ceil(entity.heat / 15.0);\n+            game.addControlRoll(new PilotingRollData(entity.getId(),\n+                    penalty, \"used too much heat\"));\n+        }\n+\n+        // Like other large craft, the rest of these rules don't apply\n+        // to capital fighters\n+        if (entity.isCapitalFighter()) {\n+            return;\n+        }\n+\n+        int autoShutDownHeat = 30;\n+        boolean mtHeat = game.getOptions().booleanOption(OptionsConstants.ADVCOMBAT_TACOPS_HEAT);\n+        if (mtHeat) {\n+            autoShutDownHeat = 50;\n+        }\n+\n+        // heat effects: start up\n+        if ((entity.heat < autoShutDownHeat) && entity.isShutDown()) {\n+            // only start up if not shut down by taser or a TSEMP\n+            if ((entity.getTaserShutdownRounds() == 0)\n+                    && (entity.getTsempEffect() != TSEMPWeapon.TSEMP_EFFECT_SHUTDOWN)) {\n+                if ((entity.heat < 14) && !(entity.isManualShutdown())) {\n+                    // automatically starts up again\n+                    entity.setShutDown(false);\n+                    r = new Report(5045);\n+                    r.subject = entity.getId();\n+                    r.addDesc(entity);\n+                    vPhaseReport.add(r);\n+                } else if (!(entity.isManualShutdown())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d7b92c6813e21190c7a952e16dd424860b5f6d"}, "originalPosition": 183}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03b1f869b67ed7743e3cd7ac7bf31839fd8b3845", "author": {"user": {"login": "NickAragua", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/03b1f869b67ed7743e3cd7ac7bf31839fd8b3845", "committedDate": "2020-09-21T14:34:11Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4769, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}