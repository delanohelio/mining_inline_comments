{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTcxMTM3", "number": 2028, "title": "Damage decals showing the unit damage level on icons", "bodyText": "Resolves #1910\nAdds damage decals to units based on entity.getDamageLevel(), showing different decals for light, moderate, heavy and crippled. Since this is pixel-added anyway, we can use any calculation for it; currently, it uses some sort of overlay mode with the example decals provided by saxarba. It currently looks a little dark-ish, I'll maybe have to change the calculation.\nI found no game event that will trigger whenever a unit receives damage, not even gameEntityChanged seems to do that, so currently the update of the unit icons happens at each phase change for units that received damage this turn and have at least light damage.\nSince it will be difficult to distinguish the various damage levels, especially on small units, I suggest using a slight smoke effect for heavy dmg and a more dense one for crippled, preferably starting somewhere near the center.\nNotes to self:\n\n loading and adding decals\n GUI Pref setting\n actual decals (have two)\n test multihex units, add decal to damaged hex only\n use multiple different decals for each level? Requires more work on loading/storing/choosing them", "createdAt": "2020-06-25T17:52:58Z", "url": "https://github.com/MegaMek/megamek/pull/2028", "merged": true, "mergeCommit": {"oid": "ccd72311e379af3907e67f577596a1fe3e8934f6"}, "closed": true, "closedAt": "2020-07-22T04:15:51Z", "author": {"login": "SJuliez"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuyHH9AH2gAyNDQwMTcxMTM3OmI3MjhiMmJmNTUwNjk5ZGM3YThiZTUzMjkxNzA1ZDhmYThjNThiOWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3Hi0YgFqTQ1MjU0NjY1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b728b2bf550699dc7a8be53291705d8fa8c58b9b", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/b728b2bf550699dc7a8be53291705d8fa8c58b9b", "committedDate": "2020-06-25T17:29:38Z", "message": "Damage decals show unit damage level on the icons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75de118d8e7bbede4e6fd243151e17140f6ec863", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/75de118d8e7bbede4e6fd243151e17140f6ec863", "committedDate": "2020-06-27T12:32:48Z", "message": "More decals, separated by weight, no infantry smoke, cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82d24bd690c6f64d37ec9435b3daf869fe75bd01", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/82d24bd690c6f64d37ec9435b3daf869fe75bd01", "committedDate": "2020-06-28T15:12:34Z", "message": "No decals for lobby, multihex units only on center"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fb3d65ec7530f4ae9ec1fa0e9156d729c62ddb1", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/5fb3d65ec7530f4ae9ec1fa0e9156d729c62ddb1", "committedDate": "2020-06-28T15:21:07Z", "message": "multihex units get scarred on all hexes, smoke on the center"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "751a5fb9bc32338114f6600b0fe5a7cdcdf71e37", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/751a5fb9bc32338114f6600b0fe5a7cdcdf71e37", "committedDate": "2020-07-04T07:25:26Z", "message": "Package for Tileset, refactor TilesetManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "628ed0c40ea1c0c8a52a70c74acc6f54f818a246", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/628ed0c40ea1c0c8a52a70c74acc6f54f818a246", "committedDate": "2020-07-05T05:41:48Z", "message": "Reduced smoke for narrow unit types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjkwNDU0", "url": "https://github.com/MegaMek/megamek/pull/2028#pullrequestreview-442690454", "createdAt": "2020-07-05T16:33:43Z", "commit": {"oid": "628ed0c40ea1c0c8a52a70c74acc6f54f818a246"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNjozMzo0M1rOGtDcSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNjozNDozOFrOGtDcqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5NTQ5OQ==", "bodyText": "Is there a way of determining this based on the unit image (without any too crazy computations)? e.g. checking width/height?  A Demolisher tank might warrant three smoke stacks, while a Maultier APC only really needs one.", "url": "https://github.com/MegaMek/megamek/pull/2028#discussion_r449895499", "createdAt": "2020-07-05T16:33:43Z", "author": {"login": "NickAragua"}, "path": "megamek/src/megamek/client/ui/swing/tileset/EntityImage.java", "diffHunk": "@@ -0,0 +1,405 @@\n+/*\r\n+* MegaMek -\r\n+* Copyright (C) 2002, 2003, 2004 Ben Mazur (bmazur@sev.org)\r\n+* Copyright (C) 2018, 2020 The MegaMek Team\r\n+*\r\n+* This program is free software; you can redistribute it and/or modify it under\r\n+* the terms of the GNU General Public License as published by the Free Software\r\n+* Foundation; either version 2 of the License, or (at your option) any later\r\n+* version.\r\n+*\r\n+* This program is distributed in the hope that it will be useful, but WITHOUT\r\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\r\n+* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\r\n+* details.\r\n+*/\r\n+package megamek.client.ui.swing.tileset;\r\n+\r\n+import java.awt.Component;\r\n+import java.awt.Graphics;\r\n+import java.awt.Image;\r\n+import java.awt.geom.AffineTransform;\r\n+import java.awt.image.*;\r\n+import java.io.File;\r\n+\r\n+import megamek.client.ui.swing.GUIPreferences;\r\n+import megamek.common.*;\r\n+import megamek.common.util.ImageUtil;\r\n+\r\n+/** Handles the rotated and damaged and preview images for a unit. */\r\n+public class EntityImage {\r\n+    \r\n+    // Control values for applying bigger and smaller smoke\r\n+    private static final int SMOKE_THREE = 70;\r\n+    private static final int SMOKE_TWO = 40;\r\n+    \r\n+    // Damage decal images\r\n+    private static final File FILENAME_DAMAGEDECAL_LIGHT = new File(\"units/DamageDecals\", \"DmgLight.png\"); //$NON-NLS-1$\r\n+    private static final File FILENAME_DAMAGEDECAL_MODERATE = new File(\"units/DamageDecals\", \"DmgModerate.png\"); //$NON-NLS-1$\r\n+    private static final File FILENAME_DAMAGEDECAL_HEAVY = new File(\"units/DamageDecals\", \"DmgHeavy.png\"); //$NON-NLS-1$\r\n+    private static final File FILENAME_DAMAGEDECAL_CRIPPLED = new File(\"units/DamageDecals\", \"DmgCrippled.png\"); //$NON-NLS-1$\r\n+    private static final File FILE_SMOKE_SML = new File(\"units/DamageDecals\", \"Smoke1.png\"); //$NON-NLS-1$\r\n+    private static final File FILE_SMOKE_MED = new File(\"units/DamageDecals\", \"Smoke2.png\"); //$NON-NLS-1$\r\n+    private static final File FILE_SMOKE_LRG = new File(\"units/DamageDecals\", \"Smoke3.png\"); //$NON-NLS-1$\r\n+    private static final File FILE_SMOKEFIRE_SML = new File(\"units/DamageDecals\", \"SmokeFire1.png\"); //$NON-NLS-1$\r\n+    private static final File FILE_SMOKEFIRE_MED = new File(\"units/DamageDecals\", \"SmokeFire2.png\"); //$NON-NLS-1$\r\n+    private static final File FILE_SMOKEFIRE_LRG = new File(\"units/DamageDecals\", \"SmokeFire3.png\"); //$NON-NLS-1$\r\n+    private static final File FILE_DAMAGEDECAL_EMPTY = new File(\"units/DamageDecals\", \"Transparent.png\"); //$NON-NLS-1$\r\n+    \r\n+    private static Image dmgLight;\r\n+    private static Image dmgModerate;\r\n+    private static Image dmgHeavy;\r\n+    private static Image dmgCrippled;\r\n+    private static Image SmokeSml;\r\n+    private static Image SmokeMed;\r\n+    private static Image SmokeLrg;\r\n+    private static Image SmokeFireSml;\r\n+    private static Image SmokeFireMed;\r\n+    private static Image SmokeFireLrg;\r\n+    private static Image dmgEmpty;\r\n+    private static boolean decalLoaded = false;\r\n+\r\n+    // Individual entity images\r\n+    private Image base;\r\n+    private Image wreck;\r\n+    \r\n+    /** A smaller icon used for the unit overview. */\r\n+    private Image icon;\r\n+    /** A color used instead of a camo. */\r\n+    int tint;\r\n+    private Image camo;\r\n+    private Image[] facings = new Image[6];\r\n+    private Image[] wreckFacings = new Image[6];\r\n+    private Component parent;\r\n+    /** The damage level, from none to crippled. */\r\n+    private int dmgLevel;\r\n+    /** The tonnage of the unit. */\r\n+    private double weight;\r\n+    /** True for units of class or subclass of Infantry. */\r\n+    private boolean isInfantry;\r\n+    /** True when the image is for an additional hex of multi-hex units. */\r\n+    private boolean isSecondaryPos;\r\n+    /** True when the image is for the lobby. */\r\n+    private boolean isPreview;\r\n+    /** True when the unit is likely to be more long than wide (e.g. tanks). */\r\n+    private boolean isSlim;\r\n+    /** True when the unit is likely to be very narrow (VTOL). */\r\n+    private boolean isVerySlim;\r\n+    \r\n+\r\n+    private final int IMG_WIDTH = HexTileset.HEX_W;\r\n+    private final int IMG_HEIGHT = HexTileset.HEX_H;\r\n+    private final int IMG_SIZE = IMG_WIDTH * IMG_HEIGHT;\r\n+\r\n+    public EntityImage(Image base, int tint, Image camo, Component comp, Entity entity) {\r\n+        this(base, null, tint, camo, comp, entity, -1, true);\r\n+    }\r\n+    \r\n+    public EntityImage(Image base, Image wreck, int tint, Image camo,\r\n+            Component comp, Entity entity, int secondaryPos) {\r\n+        this(base, wreck, tint, camo, comp, entity, secondaryPos, false);\r\n+    }\r\n+    \r\n+    public EntityImage(Image base, Image wreck, int tint, Image camo,\r\n+            Component comp, Entity entity, int secondaryPos, boolean preview) {\r\n+        this.base = base;\r\n+        this.tint = tint;\r\n+        this.camo = camo;\r\n+        parent = comp;\r\n+        this.wreck = wreck;\r\n+        this.dmgLevel = entity.getDamageLevel();\r\n+        this.weight = entity.getWeight();\r\n+        isInfantry = entity instanceof Infantry;\r\n+        isSecondaryPos = secondaryPos != 0 && secondaryPos != -1;\r\n+        isPreview = preview;\r\n+        isSlim = entity instanceof Tank || entity instanceof Aero;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "628ed0c40ea1c0c8a52a70c74acc6f54f818a246"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg5NTU5NQ==", "bodyText": "Did you just move this file, or did you make changes to it? If the latter, could you point to where the changes are?", "url": "https://github.com/MegaMek/megamek/pull/2028#discussion_r449895595", "createdAt": "2020-07-05T16:34:38Z", "author": {"login": "NickAragua"}, "path": "megamek/src/megamek/client/ui/swing/tileset/TilesetManager.java", "diffHunk": "@@ -0,0 +1,556 @@\n+/*\n+* MegaMek -\n+* Copyright (C) 2002, 2003, 2004 Ben Mazur (bmazur@sev.org)\n+* Copyright (C) 2018, 2020 The MegaMek Team\n+*\n+* This program is free software; you can redistribute it and/or modify it under\n+* the terms of the GNU General Public License as published by the Free Software\n+* Foundation; either version 2 of the License, or (at your option) any later\n+* version.\n+*\n+* This program is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n+* details.\n+*/\n+\n+package megamek.client.ui.swing.tileset;\n+\n+import java.util.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.MediaTracker;\n+import java.awt.Polygon;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import megamek.client.ui.ITilesetManager;\n+import megamek.client.ui.swing.GUIPreferences;\n+import megamek.client.ui.swing.boardview.BoardView1;\n+import megamek.client.ui.swing.tileset.MechTileset.MechEntry;\n+import megamek.client.ui.swing.util.ImageCache;\n+import megamek.client.ui.swing.util.ImageFileFactory;\n+import megamek.client.ui.swing.util.PlayerColors;\n+import megamek.common.*;\n+import megamek.common.preference.*;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.ImageUtil;\n+import megamek.common.util.MegaMekFile;\n+\n+/**\n+ * Handles loading and manipulating images from both the mech tileset and the\n+ * terrain tileset.\n+ *\n+ * @author Ben\n+ */\n+public class TilesetManager implements IPreferenceChangeListener, ITilesetManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "628ed0c40ea1c0c8a52a70c74acc6f54f818a246"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNjkzNzYw", "url": "https://github.com/MegaMek/megamek/pull/2028#pullrequestreview-442693760", "createdAt": "2020-07-05T17:26:59Z", "commit": {"oid": "628ed0c40ea1c0c8a52a70c74acc6f54f818a246"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNzoyNjo1OVrOGtDukQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQxNzoyODo0NlrOGtDvBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMDE3Nw==", "bodyText": "Is there a chance that something meaningful could happen here? If so, let's log it.", "url": "https://github.com/MegaMek/megamek/pull/2028#discussion_r449900177", "createdAt": "2020-07-05T17:26:59Z", "author": {"login": "NickAragua"}, "path": "megamek/src/megamek/client/ui/swing/tileset/TilesetManager.java", "diffHunk": "@@ -0,0 +1,556 @@\n+/*\n+* MegaMek -\n+* Copyright (C) 2002, 2003, 2004 Ben Mazur (bmazur@sev.org)\n+* Copyright (C) 2018, 2020 The MegaMek Team\n+*\n+* This program is free software; you can redistribute it and/or modify it under\n+* the terms of the GNU General Public License as published by the Free Software\n+* Foundation; either version 2 of the License, or (at your option) any later\n+* version.\n+*\n+* This program is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n+* details.\n+*/\n+\n+package megamek.client.ui.swing.tileset;\n+\n+import java.util.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.MediaTracker;\n+import java.awt.Polygon;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import megamek.client.ui.ITilesetManager;\n+import megamek.client.ui.swing.GUIPreferences;\n+import megamek.client.ui.swing.boardview.BoardView1;\n+import megamek.client.ui.swing.tileset.MechTileset.MechEntry;\n+import megamek.client.ui.swing.util.ImageCache;\n+import megamek.client.ui.swing.util.ImageFileFactory;\n+import megamek.client.ui.swing.util.PlayerColors;\n+import megamek.common.*;\n+import megamek.common.preference.*;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.ImageUtil;\n+import megamek.common.util.MegaMekFile;\n+\n+/**\n+ * Handles loading and manipulating images from both the mech tileset and the\n+ * terrain tileset.\n+ *\n+ * @author Ben\n+ */\n+public class TilesetManager implements IPreferenceChangeListener, ITilesetManager {\n+    \n+    public static final String DIR_NAME_WRECKS = \"wrecks\"; //$NON-NLS-1$\n+\n+    public static final String FILENAME_DEFAULT_HEX_SET = \"defaulthexset.txt\"; //$NON-NLS-1$\n+\n+    private static final String FILENAME_NIGHT_IMAGE = new File(\"transparent\", \"night.png\").toString();  //$NON-NLS-1$  //$NON-NLS-2$\n+    private static final String FILENAME_HEX_MASK = new File(\"transparent\", \"HexMask.png\").toString();  //$NON-NLS-1$  //$NON-NLS-2$\n+    private static final String FILENAME_ARTILLERY_AUTOHIT_IMAGE = \"artyauto.gif\"; //$NON-NLS-1$\n+    private static final String FILENAME_ARTILLERY_ADJUSTED_IMAGE = \"artyadj.gif\"; //$NON-NLS-1$\n+    private static final String FILENAME_ARTILLERY_INCOMING_IMAGE = \"artyinc.gif\"; //$NON-NLS-1$\n+\n+    public static final int ARTILLERY_AUTOHIT = 0;\n+    public static final int ARTILLERY_ADJUSTED = 1;\n+    public static final int ARTILLERY_INCOMING = 2;\n+\n+    // component to load images to\n+    private BoardView1 boardview;\n+\n+    // keep tracking of loading images\n+    private MediaTracker tracker;\n+    private boolean started = false;\n+    private boolean loaded = false;\n+\n+    // keep track of camo images\n+    private DirectoryItems camos;\n+\n+    // mech images\n+    private MechTileset mechTileset = new MechTileset(Configuration.unitImagesDir());\n+    private MechTileset wreckTileset = new MechTileset(\n+            new MegaMekFile(Configuration.unitImagesDir(), DIR_NAME_WRECKS).getFile());\n+    private ArrayList<EntityImage> mechImageList = new ArrayList<EntityImage>();\n+    private HashMap<ArrayList<Integer>, EntityImage> mechImages = new HashMap<ArrayList<Integer>, EntityImage>();\n+\n+    // hex images\n+    private HexTileset hexTileset;\n+\n+    private Image minefieldSign;\n+    private Image nightFog;\n+\n+    /** An opaque hex shape used to limit draw operations to the exact hex shape. */\n+    private Image hexMask;\n+\n+    private Image artilleryAutohit;\n+    private Image artilleryAdjusted;\n+    private Image artilleryIncoming;\n+    \n+    /**\n+     * Hexes under the effects of ECM have a shaded \"static\" image displayed,\n+     * to represent the noise generated by ECM.  This is a cache that stores\n+     * images for various colors (for Players, and possibly multiple players\n+     * in the same hex).\n+     */\n+    private HashMap<Color, Image> ecmStaticImages = new HashMap<Color, Image>();\n+    \n+    /** Creates new TilesetManager. */\n+    public TilesetManager(BoardView1 bv) throws IOException {\n+        boardview = bv;\n+        hexTileset = new HexTileset(boardview.game);\n+        tracker = new MediaTracker(boardview);\n+        try {\n+            camos = new DirectoryItems(\n+                    Configuration.camoDir(),\n+                    \"\", //$NON-NLS-1$\n+                    ImageFileFactory.getInstance()\n+            );\n+        } catch (Exception e) {\n+            camos = null;\n+        }\n+        mechTileset.loadFromFile(\"mechset.txt\"); //$NON-NLS-1$\n+        wreckTileset.loadFromFile(\"wreckset.txt\"); //$NON-NLS-1$\n+        try {\n+            hexTileset.incDepth = 0;\n+            hexTileset.loadFromFile(PreferenceManager.getClientPreferences().getMapTileset());\n+        } catch (Exception FileNotFoundException) {\n+            System.out.println(\"Error loading tileset, \"\n+                    + \"reverting to default hexset! \" + \"Could not find file: \"\n+                    + PreferenceManager.getClientPreferences().getMapTileset());\n+            if (new MegaMekFile(Configuration.hexesDir(), FILENAME_DEFAULT_HEX_SET).getFile().exists()){\n+                hexTileset.loadFromFile(FILENAME_DEFAULT_HEX_SET);\n+            } else {\n+                System.err.println(\"Critical Error loading default tileset!\");\n+            }\n+        }\n+        PreferenceManager.getClientPreferences().addPreferenceChangeListener(this);\n+        GUIPreferences.getInstance().addPreferenceChangeListener(this);\n+    }\n+\n+    /** React to changes in the settings. */\n+    public void preferenceChange(PreferenceChangeEvent e) {\n+        // A new Hex Tileset has been selected\n+        if (e.getName().equals(IClientPreferences.MAP_TILESET)) {\n+            HexTileset hts = new HexTileset(boardview.game);\n+            try {\n+                hexTileset.incDepth = 0;\n+                hts.loadFromFile((String) e.getNewValue());\n+                hexTileset = hts;\n+                boardview.clearHexImageCache();\n+            } catch (IOException ex) {\n+                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "628ed0c40ea1c0c8a52a70c74acc6f54f818a246"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMDIyMQ==", "bodyText": "Do we want to avoid system.out.println and instead log the error?", "url": "https://github.com/MegaMek/megamek/pull/2028#discussion_r449900221", "createdAt": "2020-07-05T17:27:32Z", "author": {"login": "NickAragua"}, "path": "megamek/src/megamek/client/ui/swing/tileset/TilesetManager.java", "diffHunk": "@@ -0,0 +1,556 @@\n+/*\n+* MegaMek -\n+* Copyright (C) 2002, 2003, 2004 Ben Mazur (bmazur@sev.org)\n+* Copyright (C) 2018, 2020 The MegaMek Team\n+*\n+* This program is free software; you can redistribute it and/or modify it under\n+* the terms of the GNU General Public License as published by the Free Software\n+* Foundation; either version 2 of the License, or (at your option) any later\n+* version.\n+*\n+* This program is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n+* details.\n+*/\n+\n+package megamek.client.ui.swing.tileset;\n+\n+import java.util.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.MediaTracker;\n+import java.awt.Polygon;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import megamek.client.ui.ITilesetManager;\n+import megamek.client.ui.swing.GUIPreferences;\n+import megamek.client.ui.swing.boardview.BoardView1;\n+import megamek.client.ui.swing.tileset.MechTileset.MechEntry;\n+import megamek.client.ui.swing.util.ImageCache;\n+import megamek.client.ui.swing.util.ImageFileFactory;\n+import megamek.client.ui.swing.util.PlayerColors;\n+import megamek.common.*;\n+import megamek.common.preference.*;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.ImageUtil;\n+import megamek.common.util.MegaMekFile;\n+\n+/**\n+ * Handles loading and manipulating images from both the mech tileset and the\n+ * terrain tileset.\n+ *\n+ * @author Ben\n+ */\n+public class TilesetManager implements IPreferenceChangeListener, ITilesetManager {\n+    \n+    public static final String DIR_NAME_WRECKS = \"wrecks\"; //$NON-NLS-1$\n+\n+    public static final String FILENAME_DEFAULT_HEX_SET = \"defaulthexset.txt\"; //$NON-NLS-1$\n+\n+    private static final String FILENAME_NIGHT_IMAGE = new File(\"transparent\", \"night.png\").toString();  //$NON-NLS-1$  //$NON-NLS-2$\n+    private static final String FILENAME_HEX_MASK = new File(\"transparent\", \"HexMask.png\").toString();  //$NON-NLS-1$  //$NON-NLS-2$\n+    private static final String FILENAME_ARTILLERY_AUTOHIT_IMAGE = \"artyauto.gif\"; //$NON-NLS-1$\n+    private static final String FILENAME_ARTILLERY_ADJUSTED_IMAGE = \"artyadj.gif\"; //$NON-NLS-1$\n+    private static final String FILENAME_ARTILLERY_INCOMING_IMAGE = \"artyinc.gif\"; //$NON-NLS-1$\n+\n+    public static final int ARTILLERY_AUTOHIT = 0;\n+    public static final int ARTILLERY_ADJUSTED = 1;\n+    public static final int ARTILLERY_INCOMING = 2;\n+\n+    // component to load images to\n+    private BoardView1 boardview;\n+\n+    // keep tracking of loading images\n+    private MediaTracker tracker;\n+    private boolean started = false;\n+    private boolean loaded = false;\n+\n+    // keep track of camo images\n+    private DirectoryItems camos;\n+\n+    // mech images\n+    private MechTileset mechTileset = new MechTileset(Configuration.unitImagesDir());\n+    private MechTileset wreckTileset = new MechTileset(\n+            new MegaMekFile(Configuration.unitImagesDir(), DIR_NAME_WRECKS).getFile());\n+    private ArrayList<EntityImage> mechImageList = new ArrayList<EntityImage>();\n+    private HashMap<ArrayList<Integer>, EntityImage> mechImages = new HashMap<ArrayList<Integer>, EntityImage>();\n+\n+    // hex images\n+    private HexTileset hexTileset;\n+\n+    private Image minefieldSign;\n+    private Image nightFog;\n+\n+    /** An opaque hex shape used to limit draw operations to the exact hex shape. */\n+    private Image hexMask;\n+\n+    private Image artilleryAutohit;\n+    private Image artilleryAdjusted;\n+    private Image artilleryIncoming;\n+    \n+    /**\n+     * Hexes under the effects of ECM have a shaded \"static\" image displayed,\n+     * to represent the noise generated by ECM.  This is a cache that stores\n+     * images for various colors (for Players, and possibly multiple players\n+     * in the same hex).\n+     */\n+    private HashMap<Color, Image> ecmStaticImages = new HashMap<Color, Image>();\n+    \n+    /** Creates new TilesetManager. */\n+    public TilesetManager(BoardView1 bv) throws IOException {\n+        boardview = bv;\n+        hexTileset = new HexTileset(boardview.game);\n+        tracker = new MediaTracker(boardview);\n+        try {\n+            camos = new DirectoryItems(\n+                    Configuration.camoDir(),\n+                    \"\", //$NON-NLS-1$\n+                    ImageFileFactory.getInstance()\n+            );\n+        } catch (Exception e) {\n+            camos = null;\n+        }\n+        mechTileset.loadFromFile(\"mechset.txt\"); //$NON-NLS-1$\n+        wreckTileset.loadFromFile(\"wreckset.txt\"); //$NON-NLS-1$\n+        try {\n+            hexTileset.incDepth = 0;\n+            hexTileset.loadFromFile(PreferenceManager.getClientPreferences().getMapTileset());\n+        } catch (Exception FileNotFoundException) {\n+            System.out.println(\"Error loading tileset, \"\n+                    + \"reverting to default hexset! \" + \"Could not find file: \"\n+                    + PreferenceManager.getClientPreferences().getMapTileset());\n+            if (new MegaMekFile(Configuration.hexesDir(), FILENAME_DEFAULT_HEX_SET).getFile().exists()){\n+                hexTileset.loadFromFile(FILENAME_DEFAULT_HEX_SET);\n+            } else {\n+                System.err.println(\"Critical Error loading default tileset!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "628ed0c40ea1c0c8a52a70c74acc6f54f818a246"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMDI1Mg==", "bodyText": "Another system.out.println which will not be seen by anyone.", "url": "https://github.com/MegaMek/megamek/pull/2028#discussion_r449900252", "createdAt": "2020-07-05T17:27:58Z", "author": {"login": "NickAragua"}, "path": "megamek/src/megamek/client/ui/swing/tileset/TilesetManager.java", "diffHunk": "@@ -0,0 +1,556 @@\n+/*\n+* MegaMek -\n+* Copyright (C) 2002, 2003, 2004 Ben Mazur (bmazur@sev.org)\n+* Copyright (C) 2018, 2020 The MegaMek Team\n+*\n+* This program is free software; you can redistribute it and/or modify it under\n+* the terms of the GNU General Public License as published by the Free Software\n+* Foundation; either version 2 of the License, or (at your option) any later\n+* version.\n+*\n+* This program is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n+* details.\n+*/\n+\n+package megamek.client.ui.swing.tileset;\n+\n+import java.util.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.MediaTracker;\n+import java.awt.Polygon;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import megamek.client.ui.ITilesetManager;\n+import megamek.client.ui.swing.GUIPreferences;\n+import megamek.client.ui.swing.boardview.BoardView1;\n+import megamek.client.ui.swing.tileset.MechTileset.MechEntry;\n+import megamek.client.ui.swing.util.ImageCache;\n+import megamek.client.ui.swing.util.ImageFileFactory;\n+import megamek.client.ui.swing.util.PlayerColors;\n+import megamek.common.*;\n+import megamek.common.preference.*;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.ImageUtil;\n+import megamek.common.util.MegaMekFile;\n+\n+/**\n+ * Handles loading and manipulating images from both the mech tileset and the\n+ * terrain tileset.\n+ *\n+ * @author Ben\n+ */\n+public class TilesetManager implements IPreferenceChangeListener, ITilesetManager {\n+    \n+    public static final String DIR_NAME_WRECKS = \"wrecks\"; //$NON-NLS-1$\n+\n+    public static final String FILENAME_DEFAULT_HEX_SET = \"defaulthexset.txt\"; //$NON-NLS-1$\n+\n+    private static final String FILENAME_NIGHT_IMAGE = new File(\"transparent\", \"night.png\").toString();  //$NON-NLS-1$  //$NON-NLS-2$\n+    private static final String FILENAME_HEX_MASK = new File(\"transparent\", \"HexMask.png\").toString();  //$NON-NLS-1$  //$NON-NLS-2$\n+    private static final String FILENAME_ARTILLERY_AUTOHIT_IMAGE = \"artyauto.gif\"; //$NON-NLS-1$\n+    private static final String FILENAME_ARTILLERY_ADJUSTED_IMAGE = \"artyadj.gif\"; //$NON-NLS-1$\n+    private static final String FILENAME_ARTILLERY_INCOMING_IMAGE = \"artyinc.gif\"; //$NON-NLS-1$\n+\n+    public static final int ARTILLERY_AUTOHIT = 0;\n+    public static final int ARTILLERY_ADJUSTED = 1;\n+    public static final int ARTILLERY_INCOMING = 2;\n+\n+    // component to load images to\n+    private BoardView1 boardview;\n+\n+    // keep tracking of loading images\n+    private MediaTracker tracker;\n+    private boolean started = false;\n+    private boolean loaded = false;\n+\n+    // keep track of camo images\n+    private DirectoryItems camos;\n+\n+    // mech images\n+    private MechTileset mechTileset = new MechTileset(Configuration.unitImagesDir());\n+    private MechTileset wreckTileset = new MechTileset(\n+            new MegaMekFile(Configuration.unitImagesDir(), DIR_NAME_WRECKS).getFile());\n+    private ArrayList<EntityImage> mechImageList = new ArrayList<EntityImage>();\n+    private HashMap<ArrayList<Integer>, EntityImage> mechImages = new HashMap<ArrayList<Integer>, EntityImage>();\n+\n+    // hex images\n+    private HexTileset hexTileset;\n+\n+    private Image minefieldSign;\n+    private Image nightFog;\n+\n+    /** An opaque hex shape used to limit draw operations to the exact hex shape. */\n+    private Image hexMask;\n+\n+    private Image artilleryAutohit;\n+    private Image artilleryAdjusted;\n+    private Image artilleryIncoming;\n+    \n+    /**\n+     * Hexes under the effects of ECM have a shaded \"static\" image displayed,\n+     * to represent the noise generated by ECM.  This is a cache that stores\n+     * images for various colors (for Players, and possibly multiple players\n+     * in the same hex).\n+     */\n+    private HashMap<Color, Image> ecmStaticImages = new HashMap<Color, Image>();\n+    \n+    /** Creates new TilesetManager. */\n+    public TilesetManager(BoardView1 bv) throws IOException {\n+        boardview = bv;\n+        hexTileset = new HexTileset(boardview.game);\n+        tracker = new MediaTracker(boardview);\n+        try {\n+            camos = new DirectoryItems(\n+                    Configuration.camoDir(),\n+                    \"\", //$NON-NLS-1$\n+                    ImageFileFactory.getInstance()\n+            );\n+        } catch (Exception e) {\n+            camos = null;\n+        }\n+        mechTileset.loadFromFile(\"mechset.txt\"); //$NON-NLS-1$\n+        wreckTileset.loadFromFile(\"wreckset.txt\"); //$NON-NLS-1$\n+        try {\n+            hexTileset.incDepth = 0;\n+            hexTileset.loadFromFile(PreferenceManager.getClientPreferences().getMapTileset());\n+        } catch (Exception FileNotFoundException) {\n+            System.out.println(\"Error loading tileset, \"\n+                    + \"reverting to default hexset! \" + \"Could not find file: \"\n+                    + PreferenceManager.getClientPreferences().getMapTileset());\n+            if (new MegaMekFile(Configuration.hexesDir(), FILENAME_DEFAULT_HEX_SET).getFile().exists()){\n+                hexTileset.loadFromFile(FILENAME_DEFAULT_HEX_SET);\n+            } else {\n+                System.err.println(\"Critical Error loading default tileset!\");\n+            }\n+        }\n+        PreferenceManager.getClientPreferences().addPreferenceChangeListener(this);\n+        GUIPreferences.getInstance().addPreferenceChangeListener(this);\n+    }\n+\n+    /** React to changes in the settings. */\n+    public void preferenceChange(PreferenceChangeEvent e) {\n+        // A new Hex Tileset has been selected\n+        if (e.getName().equals(IClientPreferences.MAP_TILESET)) {\n+            HexTileset hts = new HexTileset(boardview.game);\n+            try {\n+                hexTileset.incDepth = 0;\n+                hts.loadFromFile((String) e.getNewValue());\n+                hexTileset = hts;\n+                boardview.clearHexImageCache();\n+            } catch (IOException ex) {\n+                return;\n+            }\n+        }\n+        \n+        // The setting to show damage decals and smoke has changed\n+        if (e.getName().equals(GUIPreferences.SHOW_DAMAGE_DECAL)) {\n+            reset();\n+        }\n+    }\n+\n+    /** Retrieve an icon for the unit (used in the Unit Overview). */\n+    public Image iconFor(Entity entity) {\n+        EntityImage entityImage = getFromCache(entity, -1);\n+        if (entityImage == null) {\n+            System.err.println(\"Unable to load icon for entity: \" + entity.getShortNameRaw()); //$NON-NLS-1$\n+            Image generic = getGenericImage(entity, -1, mechTileset);\n+            return (generic != null) ? ImageUtil.getScaledImage(generic, 56, 48) : null;\n+        }\n+        return entityImage.getIcon();\n+    }\n+\n+    /** Retrieve a wreck icon for the unit. */\n+    public Image wreckMarkerFor(Entity entity, int secondaryPos) {\n+        EntityImage entityImage = getFromCache(entity, secondaryPos);\n+        if (entityImage == null) {\n+            System.out.println(\"Unable to load wreckMarker image for entity: \" + entity.getShortNameRaw()); //$NON-NLS-1$", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "628ed0c40ea1c0c8a52a70c74acc6f54f818a246"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkwMDI5NQ==", "bodyText": "I'm going to stop calling out system.println and just say that it would be useful to go through this file and replace them with calls to actual logging.", "url": "https://github.com/MegaMek/megamek/pull/2028#discussion_r449900295", "createdAt": "2020-07-05T17:28:46Z", "author": {"login": "NickAragua"}, "path": "megamek/src/megamek/client/ui/swing/tileset/TilesetManager.java", "diffHunk": "@@ -0,0 +1,556 @@\n+/*\n+* MegaMek -\n+* Copyright (C) 2002, 2003, 2004 Ben Mazur (bmazur@sev.org)\n+* Copyright (C) 2018, 2020 The MegaMek Team\n+*\n+* This program is free software; you can redistribute it and/or modify it under\n+* the terms of the GNU General Public License as published by the Free Software\n+* Foundation; either version 2 of the License, or (at your option) any later\n+* version.\n+*\n+* This program is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n+* FOR A PARTICULAR PURPOSE. See the GNU General Public License for more\n+* details.\n+*/\n+\n+package megamek.client.ui.swing.tileset;\n+\n+import java.util.*;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.MediaTracker;\n+import java.awt.Polygon;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import megamek.client.ui.ITilesetManager;\n+import megamek.client.ui.swing.GUIPreferences;\n+import megamek.client.ui.swing.boardview.BoardView1;\n+import megamek.client.ui.swing.tileset.MechTileset.MechEntry;\n+import megamek.client.ui.swing.util.ImageCache;\n+import megamek.client.ui.swing.util.ImageFileFactory;\n+import megamek.client.ui.swing.util.PlayerColors;\n+import megamek.common.*;\n+import megamek.common.preference.*;\n+import megamek.common.util.DirectoryItems;\n+import megamek.common.util.ImageUtil;\n+import megamek.common.util.MegaMekFile;\n+\n+/**\n+ * Handles loading and manipulating images from both the mech tileset and the\n+ * terrain tileset.\n+ *\n+ * @author Ben\n+ */\n+public class TilesetManager implements IPreferenceChangeListener, ITilesetManager {\n+    \n+    public static final String DIR_NAME_WRECKS = \"wrecks\"; //$NON-NLS-1$\n+\n+    public static final String FILENAME_DEFAULT_HEX_SET = \"defaulthexset.txt\"; //$NON-NLS-1$\n+\n+    private static final String FILENAME_NIGHT_IMAGE = new File(\"transparent\", \"night.png\").toString();  //$NON-NLS-1$  //$NON-NLS-2$\n+    private static final String FILENAME_HEX_MASK = new File(\"transparent\", \"HexMask.png\").toString();  //$NON-NLS-1$  //$NON-NLS-2$\n+    private static final String FILENAME_ARTILLERY_AUTOHIT_IMAGE = \"artyauto.gif\"; //$NON-NLS-1$\n+    private static final String FILENAME_ARTILLERY_ADJUSTED_IMAGE = \"artyadj.gif\"; //$NON-NLS-1$\n+    private static final String FILENAME_ARTILLERY_INCOMING_IMAGE = \"artyinc.gif\"; //$NON-NLS-1$\n+\n+    public static final int ARTILLERY_AUTOHIT = 0;\n+    public static final int ARTILLERY_ADJUSTED = 1;\n+    public static final int ARTILLERY_INCOMING = 2;\n+\n+    // component to load images to\n+    private BoardView1 boardview;\n+\n+    // keep tracking of loading images\n+    private MediaTracker tracker;\n+    private boolean started = false;\n+    private boolean loaded = false;\n+\n+    // keep track of camo images\n+    private DirectoryItems camos;\n+\n+    // mech images\n+    private MechTileset mechTileset = new MechTileset(Configuration.unitImagesDir());\n+    private MechTileset wreckTileset = new MechTileset(\n+            new MegaMekFile(Configuration.unitImagesDir(), DIR_NAME_WRECKS).getFile());\n+    private ArrayList<EntityImage> mechImageList = new ArrayList<EntityImage>();\n+    private HashMap<ArrayList<Integer>, EntityImage> mechImages = new HashMap<ArrayList<Integer>, EntityImage>();\n+\n+    // hex images\n+    private HexTileset hexTileset;\n+\n+    private Image minefieldSign;\n+    private Image nightFog;\n+\n+    /** An opaque hex shape used to limit draw operations to the exact hex shape. */\n+    private Image hexMask;\n+\n+    private Image artilleryAutohit;\n+    private Image artilleryAdjusted;\n+    private Image artilleryIncoming;\n+    \n+    /**\n+     * Hexes under the effects of ECM have a shaded \"static\" image displayed,\n+     * to represent the noise generated by ECM.  This is a cache that stores\n+     * images for various colors (for Players, and possibly multiple players\n+     * in the same hex).\n+     */\n+    private HashMap<Color, Image> ecmStaticImages = new HashMap<Color, Image>();\n+    \n+    /** Creates new TilesetManager. */\n+    public TilesetManager(BoardView1 bv) throws IOException {\n+        boardview = bv;\n+        hexTileset = new HexTileset(boardview.game);\n+        tracker = new MediaTracker(boardview);\n+        try {\n+            camos = new DirectoryItems(\n+                    Configuration.camoDir(),\n+                    \"\", //$NON-NLS-1$\n+                    ImageFileFactory.getInstance()\n+            );\n+        } catch (Exception e) {\n+            camos = null;\n+        }\n+        mechTileset.loadFromFile(\"mechset.txt\"); //$NON-NLS-1$\n+        wreckTileset.loadFromFile(\"wreckset.txt\"); //$NON-NLS-1$\n+        try {\n+            hexTileset.incDepth = 0;\n+            hexTileset.loadFromFile(PreferenceManager.getClientPreferences().getMapTileset());\n+        } catch (Exception FileNotFoundException) {\n+            System.out.println(\"Error loading tileset, \"\n+                    + \"reverting to default hexset! \" + \"Could not find file: \"\n+                    + PreferenceManager.getClientPreferences().getMapTileset());\n+            if (new MegaMekFile(Configuration.hexesDir(), FILENAME_DEFAULT_HEX_SET).getFile().exists()){\n+                hexTileset.loadFromFile(FILENAME_DEFAULT_HEX_SET);\n+            } else {\n+                System.err.println(\"Critical Error loading default tileset!\");\n+            }\n+        }\n+        PreferenceManager.getClientPreferences().addPreferenceChangeListener(this);\n+        GUIPreferences.getInstance().addPreferenceChangeListener(this);\n+    }\n+\n+    /** React to changes in the settings. */\n+    public void preferenceChange(PreferenceChangeEvent e) {\n+        // A new Hex Tileset has been selected\n+        if (e.getName().equals(IClientPreferences.MAP_TILESET)) {\n+            HexTileset hts = new HexTileset(boardview.game);\n+            try {\n+                hexTileset.incDepth = 0;\n+                hts.loadFromFile((String) e.getNewValue());\n+                hexTileset = hts;\n+                boardview.clearHexImageCache();\n+            } catch (IOException ex) {\n+                return;\n+            }\n+        }\n+        \n+        // The setting to show damage decals and smoke has changed\n+        if (e.getName().equals(GUIPreferences.SHOW_DAMAGE_DECAL)) {\n+            reset();\n+        }\n+    }\n+\n+    /** Retrieve an icon for the unit (used in the Unit Overview). */\n+    public Image iconFor(Entity entity) {\n+        EntityImage entityImage = getFromCache(entity, -1);\n+        if (entityImage == null) {\n+            System.err.println(\"Unable to load icon for entity: \" + entity.getShortNameRaw()); //$NON-NLS-1$\n+            Image generic = getGenericImage(entity, -1, mechTileset);\n+            return (generic != null) ? ImageUtil.getScaledImage(generic, 56, 48) : null;\n+        }\n+        return entityImage.getIcon();\n+    }\n+\n+    /** Retrieve a wreck icon for the unit. */\n+    public Image wreckMarkerFor(Entity entity, int secondaryPos) {\n+        EntityImage entityImage = getFromCache(entity, secondaryPos);\n+        if (entityImage == null) {\n+            System.out.println(\"Unable to load wreckMarker image for entity: \" + entity.getShortNameRaw()); //$NON-NLS-1$\n+            return getGenericImage(entity, -1, wreckTileset);\n+        }\n+        return entityImage.getWreckFacing(entity.getFacing());\n+    }\n+\n+    /** Retrieve an image for the unit. */\n+    public Image imageFor(Entity entity) {\n+        return imageFor(entity, -1);\n+    }\n+\n+    /** Retrieve an image for the unit. */\n+    public Image imageFor(Entity entity, int secondaryPos) {\n+        // mechs look like they're facing their secondary facing\n+        // (except QuadVees, which are using turrets instead of torso twists\n+        if (((entity instanceof Mech) || (entity instanceof Protomech))\n+                && !(entity instanceof QuadVee)) {\n+            return imageFor(entity, entity.getSecondaryFacing(), secondaryPos);\n+        }\n+        return imageFor(entity, entity.getFacing(), secondaryPos);\n+    }\n+\n+    /** Retrieve an image for the unit. */\n+    public Image imageFor(Entity entity, int facing, int secondaryPos) {\n+        EntityImage entityImage = getFromCache(entity, secondaryPos);\n+        if (entityImage == null) {\n+            System.err.println(\"Unable to load image for entity: \" + entity.getShortNameRaw()); //$NON-NLS-1$", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "628ed0c40ea1c0c8a52a70c74acc6f54f818a246"}, "originalPosition": 199}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ad22f7a8ba9636b722126575da80b22363ab293", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/2ad22f7a8ba9636b722126575da80b22363ab293", "committedDate": "2020-07-08T14:10:53Z", "message": "Use DefaultMMLogger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "974fb3f8cb9b3c985f5c45c4ed4656aea6453123", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/974fb3f8cb9b3c985f5c45c4ed4656aea6453123", "committedDate": "2020-07-12T06:12:52Z", "message": "Apply big smoke/fire to multihex, no decal on shadows"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2ODg2NjU3", "url": "https://github.com/MegaMek/megamek/pull/2028#pullrequestreview-446886657", "createdAt": "2020-07-12T15:07:27Z", "commit": {"oid": "974fb3f8cb9b3c985f5c45c4ed4656aea6453123"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91dd803e8f83bb5af3da35a1d67c6a282735f345", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/91dd803e8f83bb5af3da35a1d67c6a282735f345", "committedDate": "2020-07-20T17:01:58Z", "message": "Support multiple damage decal images"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDQ0MTcy", "url": "https://github.com/MegaMek/megamek/pull/2028#pullrequestreview-452044172", "createdAt": "2020-07-21T00:22:34Z", "commit": {"oid": "91dd803e8f83bb5af3da35a1d67c6a282735f345"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMDQ0OTkz", "url": "https://github.com/MegaMek/megamek/pull/2028#pullrequestreview-452044993", "createdAt": "2020-07-21T00:24:59Z", "commit": {"oid": "91dd803e8f83bb5af3da35a1d67c6a282735f345"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDoyNDo1OVrOG0jvCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwMDoyNDo1OVrOG0jvCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc2NDYxOQ==", "bodyText": "According to LGTM (and it seems to be right), you should close this input stream regardless of whether the call succeeds or fails.", "url": "https://github.com/MegaMek/megamek/pull/2028#discussion_r457764619", "createdAt": "2020-07-21T00:24:59Z", "author": {"login": "NickAragua"}, "path": "megamek/src/megamek/client/ui/swing/util/ScaledImageFileFactory.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * MegaMek - Copyright (C) 2004 Ben Mazur (bmazur@sev.org)\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it\n+ *  under the terms of the GNU General Public License as published by the Free\n+ *  Software Foundation; either version 2 of the License, or (at your option)\n+ *  any later version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but\n+ *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+ *  or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+ *  for more details.\n+ */\n+\n+package megamek.client.ui.swing.util;\n+\n+import java.awt.Image;\n+import java.awt.Toolkit;\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Locale;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+import megamek.common.util.ImageUtil;\n+import megamek.common.util.ItemFile;\n+import megamek.common.util.ItemFileFactory;\n+\n+/**\n+ * This class will produce <code>Image</code> objects from files. If an image\n+ * file is inside of JAR and ZIP file, then it must save the contents to a\n+ * temporary file. <p/> <p/> Created on January 18, 2004\n+ * \n+ * @author James Damour\n+ * @version 1\n+ */\n+public class ScaledImageFileFactory implements ItemFileFactory {\n+\n+    /**\n+     * Accepted image file extentions\n+     */\n+    private static final String JPG = \"JPG\", JPEG = \"JPEG\", GIF = \"GIF\", PNG = \"PNG\"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n+\n+    /**\n+     * Implement the Singleton pattern.\n+     */\n+    private ScaledImageFileFactory() {\n+    }\n+\n+    private static ScaledImageFileFactory singleton = null;\n+\n+    /**\n+     * Get the Singleton <code>ImageFileFactory</code>.\n+     * \n+     * @return the Singleton <code>ImageFileFactory</code>.\n+     */\n+    public static ScaledImageFileFactory getInstance() {\n+        if (null == singleton)\n+            singleton = new ScaledImageFileFactory();\n+        return singleton;\n+    }\n+\n+    /**\n+     * Get the <code>ItemFile</code> for the given <code>File</code>.\n+     * \n+     * @param file - the input <code>File</code> object that will be read to\n+     *            produce the item. This value must not be <code>null</code>.\n+     * @return an <code>ItemFile</code> for the given file.\n+     * @throws <code>IllegalArgumentException</code> if the <code>file</code>\n+     *             is <code>null</code>.\n+     */\n+    public ItemFile getItemFile(final File file)\n+            throws IllegalArgumentException {\n+\n+        // Validate the input.\n+        if (null == file) {\n+            throw new IllegalArgumentException(\"A null image file was passed.\"); //$NON-NLS-1$\n+        }\n+\n+        // Construct an anonymous class that gets an Image for the file.\n+        return new ItemFile() {\n+\n+            private File itemFile = file; // copy the file entry\n+            private Image image = null; // cache the Image\n+\n+            public Object getItem() throws Exception {\n+                // Cache the image on first use.\n+                if (null == image) {\n+                    String name = itemFile.getAbsolutePath();\n+                    image = ImageUtil.loadImageFromFile(name);\n+                }\n+                // Return a copy of the image.\n+                return ImageUtil.getScaledImage(image, 84, 72);\n+            } // End getItem()\n+        };\n+\n+    }\n+\n+    /**\n+     * Get the <code>ItemFile</code> for the given <code>ZipEntry</code> in\n+     * the <code>ZipFile</code>.\n+     * \n+     * @param zipEntry - the <code>ZipEntry</code> that will be read to\n+     *            produce the item. This value must not be <code>null</code>.\n+     * @param zipFile - the <code>ZipFile</code> object that contains the\n+     *            <code>ZipEntry</code> that will produce the item. This value\n+     *            must not be <code>null</code>.\n+     * @return an <code>ItemFile</code> for the given zip file entry.\n+     * @throws <code>IllegalArgumentException</code> if either the\n+     *             <code>zipEntry</code> or the <code>zipFile</code> is\n+     *             <code>null</code>.\n+     */\n+    public ItemFile getItemFile(final ZipEntry zipEntry, final ZipFile zipFile)\n+            throws IllegalArgumentException {\n+\n+        // Validate the input.\n+        if (null == zipEntry) {\n+            throw new IllegalArgumentException(\"A null ZIP entry was passed.\"); //$NON-NLS-1$\n+        }\n+        if (null == zipFile) {\n+            throw new IllegalArgumentException(\"A null ZIP file was passed.\"); //$NON-NLS-1$\n+        }\n+\n+        // Construct an anonymous class that gets an Image for the file.\n+        return new ItemFile() {\n+\n+            private ZipEntry itemEntry = zipEntry; // copy the ZipEntry\n+            private Image image = null; // cache the Image\n+\n+            public Object getItem() throws Exception {\n+\n+                // Cache the image on first use.\n+                if (null == image) {\n+\n+                    // Get ready to read from the item.\n+                    InputStream in = new BufferedInputStream(zipFile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91dd803e8f83bb5af3da35a1d67c6a282735f345"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "267e41a04a977a626c37e7459579f4d6ac9c2d34", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/267e41a04a977a626c37e7459579f4d6ac9c2d34", "committedDate": "2020-07-21T14:26:37Z", "message": "Autoclose BufferedInputReaders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "528087b078cf78622de34b72a5b5195f54f5a7ef", "author": {"user": {"login": "SJuliez", "name": null}}, "url": "https://github.com/MegaMek/megamek/commit/528087b078cf78622de34b72a5b5195f54f5a7ef", "committedDate": "2020-07-21T14:39:21Z", "message": "Error correction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNTQ2NjUy", "url": "https://github.com/MegaMek/megamek/pull/2028#pullrequestreview-452546652", "createdAt": "2020-07-21T14:59:17Z", "commit": {"oid": "528087b078cf78622de34b72a5b5195f54f5a7ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4891, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}