{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMjM0OTE5", "number": 3204, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODoyNDozMFrOEf4Wdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo0ODowMVrOEpwW_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODY0NTY2OnYy", "diffSide": "RIGHT", "path": "artemis-jdbc-store/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODoyNDozMFrOHMbsJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODoyNDozMFrOHMbsJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5ODYyOQ==", "bodyText": "please use a property based token here, like other dependencies", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r482798629", "createdAt": "2020-09-03T08:24:30Z", "author": {"login": "franz1981"}, "path": "artemis-jdbc-store/pom.xml", "diffHunk": "@@ -81,6 +81,13 @@\n          <version>${project.version}</version>\n       </dependency>\n \n+      <!-- Default DataSource for database -->\n+      <dependency>\n+         <groupId>org.apache.commons</groupId>\n+         <artifactId>commons-dbcp2</artifactId>\n+         <version>2.1.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7f9367f4ff0ef8f86a9068d31dd31aab92d456"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTEzNzU2OnYy", "diffSide": "LEFT", "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/Db2SequentialFileDriver.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDoyNzozN1rOHMgVJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODowMjozM1rOHQSmAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NDY2Mw==", "bodyText": "One thought on this change, to have the same semantic, the connectionPool must have a max pool size of 1. That needs to be enforced.\nWith the original code, the entire jdbc operation is serialised on the connection, and that will only still hold if the connection pool blocks when it single entry is in use. ie: if it has a max pool size of 1.", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r482874663", "createdAt": "2020-09-03T10:27:37Z", "author": {"login": "gtully"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/Db2SequentialFileDriver.java", "diffHunk": "@@ -30,33 +31,30 @@ public Db2SequentialFileDriver() {\n       super();\n    }\n \n-   public Db2SequentialFileDriver(DataSource dataSource, SQLProvider provider) {\n-      super(dataSource, provider);\n-   }\n-\n-   public Db2SequentialFileDriver(Connection connection, SQLProvider provider) {\n-      super(connection, provider);\n+   public Db2SequentialFileDriver(JDBCConnectionProvider connectionProvider, SQLProvider provider) {\n+      super(connectionProvider, provider);\n    }\n \n    @Override\n-   protected void prepareStatements() throws SQLException {\n-      this.deleteFile = connection.prepareStatement(sqlProvider.getDeleteFileSQL());\n-      this.createFile = connection.prepareStatement(sqlProvider.getInsertFileSQL(), new String[]{\"ID\"});\n-      this.selectFileByFileName = connection.prepareStatement(sqlProvider.getSelectFileByFileName());\n-      this.copyFileRecord = connection.prepareStatement(sqlProvider.getCopyFileRecordByIdSQL());\n-      this.renameFile = connection.prepareStatement(sqlProvider.getUpdateFileNameByIdSQL());\n-      this.readLargeObject = connection.prepareStatement(sqlProvider.getReadLargeObjectSQL());\n-      this.appendToLargeObject = connection.prepareStatement(sqlProvider.getAppendToLargeObjectSQL());\n-      this.selectFileNamesByExtension = connection.prepareStatement(sqlProvider.getSelectFileNamesByExtensionSQL());\n+   protected void prepareStatements() {\n+      this.deleteFile = sqlProvider.getDeleteFileSQL();\n+      this.createFile = sqlProvider.getInsertFileSQL();\n+      this.createFileColumnNames = new String[]{\"ID\"};\n+      this.selectFileByFileName = sqlProvider.getSelectFileByFileName();\n+      this.copyFileRecord = sqlProvider.getCopyFileRecordByIdSQL();\n+      this.renameFile = sqlProvider.getUpdateFileNameByIdSQL();\n+      this.readLargeObject = sqlProvider.getReadLargeObjectSQL();\n+      this.appendToLargeObject = sqlProvider.getAppendToLargeObjectSQL();\n+      this.selectFileNamesByExtension = sqlProvider.getSelectFileNamesByExtensionSQL();\n    }\n \n    @Override\n    public int writeToFile(JDBCSequentialFile file, byte[] data) throws SQLException {\n       if (data == null || data.length == 0) {\n          return 0;\n       }\n-      synchronized (connection) {\n-         try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7f9367f4ff0ef8f86a9068d31dd31aab92d456"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjIxOTczNA==", "bodyText": "I've done this through the broker.xml config and completely forgot to enforce the max size in code if not configured. Will try to find a proper solution for this", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r486219734", "createdAt": "2020-09-10T10:05:44Z", "author": {"login": "uomik"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/Db2SequentialFileDriver.java", "diffHunk": "@@ -30,33 +31,30 @@ public Db2SequentialFileDriver() {\n       super();\n    }\n \n-   public Db2SequentialFileDriver(DataSource dataSource, SQLProvider provider) {\n-      super(dataSource, provider);\n-   }\n-\n-   public Db2SequentialFileDriver(Connection connection, SQLProvider provider) {\n-      super(connection, provider);\n+   public Db2SequentialFileDriver(JDBCConnectionProvider connectionProvider, SQLProvider provider) {\n+      super(connectionProvider, provider);\n    }\n \n    @Override\n-   protected void prepareStatements() throws SQLException {\n-      this.deleteFile = connection.prepareStatement(sqlProvider.getDeleteFileSQL());\n-      this.createFile = connection.prepareStatement(sqlProvider.getInsertFileSQL(), new String[]{\"ID\"});\n-      this.selectFileByFileName = connection.prepareStatement(sqlProvider.getSelectFileByFileName());\n-      this.copyFileRecord = connection.prepareStatement(sqlProvider.getCopyFileRecordByIdSQL());\n-      this.renameFile = connection.prepareStatement(sqlProvider.getUpdateFileNameByIdSQL());\n-      this.readLargeObject = connection.prepareStatement(sqlProvider.getReadLargeObjectSQL());\n-      this.appendToLargeObject = connection.prepareStatement(sqlProvider.getAppendToLargeObjectSQL());\n-      this.selectFileNamesByExtension = connection.prepareStatement(sqlProvider.getSelectFileNamesByExtensionSQL());\n+   protected void prepareStatements() {\n+      this.deleteFile = sqlProvider.getDeleteFileSQL();\n+      this.createFile = sqlProvider.getInsertFileSQL();\n+      this.createFileColumnNames = new String[]{\"ID\"};\n+      this.selectFileByFileName = sqlProvider.getSelectFileByFileName();\n+      this.copyFileRecord = sqlProvider.getCopyFileRecordByIdSQL();\n+      this.renameFile = sqlProvider.getUpdateFileNameByIdSQL();\n+      this.readLargeObject = sqlProvider.getReadLargeObjectSQL();\n+      this.appendToLargeObject = sqlProvider.getAppendToLargeObjectSQL();\n+      this.selectFileNamesByExtension = sqlProvider.getSelectFileNamesByExtensionSQL();\n    }\n \n    @Override\n    public int writeToFile(JDBCSequentialFile file, byte[] data) throws SQLException {\n       if (data == null || data.length == 0) {\n          return 0;\n       }\n-      synchronized (connection) {\n-         try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NDY2Mw=="}, "originalCommit": {"oid": "bd7f9367f4ff0ef8f86a9068d31dd31aab92d456"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1NjI0Nw==", "bodyText": "@gtully\nI'm searching trough the master code base and although it seems that it's using a single database connection I'm not 100% sure of it: I will verify it tomorrow with a running broker tomorrow.\nProbably we've many JDBC connections opened (see AbstractJDBCDriver childrens -> journal(s), node manager and sequential file fatories)\nProbably there is no need to hard code such limit", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r486656247", "createdAt": "2020-09-10T21:56:57Z", "author": {"login": "franz1981"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/Db2SequentialFileDriver.java", "diffHunk": "@@ -30,33 +31,30 @@ public Db2SequentialFileDriver() {\n       super();\n    }\n \n-   public Db2SequentialFileDriver(DataSource dataSource, SQLProvider provider) {\n-      super(dataSource, provider);\n-   }\n-\n-   public Db2SequentialFileDriver(Connection connection, SQLProvider provider) {\n-      super(connection, provider);\n+   public Db2SequentialFileDriver(JDBCConnectionProvider connectionProvider, SQLProvider provider) {\n+      super(connectionProvider, provider);\n    }\n \n    @Override\n-   protected void prepareStatements() throws SQLException {\n-      this.deleteFile = connection.prepareStatement(sqlProvider.getDeleteFileSQL());\n-      this.createFile = connection.prepareStatement(sqlProvider.getInsertFileSQL(), new String[]{\"ID\"});\n-      this.selectFileByFileName = connection.prepareStatement(sqlProvider.getSelectFileByFileName());\n-      this.copyFileRecord = connection.prepareStatement(sqlProvider.getCopyFileRecordByIdSQL());\n-      this.renameFile = connection.prepareStatement(sqlProvider.getUpdateFileNameByIdSQL());\n-      this.readLargeObject = connection.prepareStatement(sqlProvider.getReadLargeObjectSQL());\n-      this.appendToLargeObject = connection.prepareStatement(sqlProvider.getAppendToLargeObjectSQL());\n-      this.selectFileNamesByExtension = connection.prepareStatement(sqlProvider.getSelectFileNamesByExtensionSQL());\n+   protected void prepareStatements() {\n+      this.deleteFile = sqlProvider.getDeleteFileSQL();\n+      this.createFile = sqlProvider.getInsertFileSQL();\n+      this.createFileColumnNames = new String[]{\"ID\"};\n+      this.selectFileByFileName = sqlProvider.getSelectFileByFileName();\n+      this.copyFileRecord = sqlProvider.getCopyFileRecordByIdSQL();\n+      this.renameFile = sqlProvider.getUpdateFileNameByIdSQL();\n+      this.readLargeObject = sqlProvider.getReadLargeObjectSQL();\n+      this.appendToLargeObject = sqlProvider.getAppendToLargeObjectSQL();\n+      this.selectFileNamesByExtension = sqlProvider.getSelectFileNamesByExtensionSQL();\n    }\n \n    @Override\n    public int writeToFile(JDBCSequentialFile file, byte[] data) throws SQLException {\n       if (data == null || data.length == 0) {\n          return 0;\n       }\n-      synchronized (connection) {\n-         try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NDY2Mw=="}, "originalCommit": {"oid": "bd7f9367f4ff0ef8f86a9068d31dd31aab92d456"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0MzkwNA==", "bodyText": "I did a quick check by just starting \"stock\" Artemis and it at least opens several connections to the database on startup. After a while it seems to settle down to two active connections. And I have to correct myself, I forgot that I actually decided to drop the setting form the configs as well as I came to conclusion that removing it has no negative effect. But correct me if I'm wrong.", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r486843904", "createdAt": "2020-09-11T08:02:33Z", "author": {"login": "uomik"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/Db2SequentialFileDriver.java", "diffHunk": "@@ -30,33 +31,30 @@ public Db2SequentialFileDriver() {\n       super();\n    }\n \n-   public Db2SequentialFileDriver(DataSource dataSource, SQLProvider provider) {\n-      super(dataSource, provider);\n-   }\n-\n-   public Db2SequentialFileDriver(Connection connection, SQLProvider provider) {\n-      super(connection, provider);\n+   public Db2SequentialFileDriver(JDBCConnectionProvider connectionProvider, SQLProvider provider) {\n+      super(connectionProvider, provider);\n    }\n \n    @Override\n-   protected void prepareStatements() throws SQLException {\n-      this.deleteFile = connection.prepareStatement(sqlProvider.getDeleteFileSQL());\n-      this.createFile = connection.prepareStatement(sqlProvider.getInsertFileSQL(), new String[]{\"ID\"});\n-      this.selectFileByFileName = connection.prepareStatement(sqlProvider.getSelectFileByFileName());\n-      this.copyFileRecord = connection.prepareStatement(sqlProvider.getCopyFileRecordByIdSQL());\n-      this.renameFile = connection.prepareStatement(sqlProvider.getUpdateFileNameByIdSQL());\n-      this.readLargeObject = connection.prepareStatement(sqlProvider.getReadLargeObjectSQL());\n-      this.appendToLargeObject = connection.prepareStatement(sqlProvider.getAppendToLargeObjectSQL());\n-      this.selectFileNamesByExtension = connection.prepareStatement(sqlProvider.getSelectFileNamesByExtensionSQL());\n+   protected void prepareStatements() {\n+      this.deleteFile = sqlProvider.getDeleteFileSQL();\n+      this.createFile = sqlProvider.getInsertFileSQL();\n+      this.createFileColumnNames = new String[]{\"ID\"};\n+      this.selectFileByFileName = sqlProvider.getSelectFileByFileName();\n+      this.copyFileRecord = sqlProvider.getCopyFileRecordByIdSQL();\n+      this.renameFile = sqlProvider.getUpdateFileNameByIdSQL();\n+      this.readLargeObject = sqlProvider.getReadLargeObjectSQL();\n+      this.appendToLargeObject = sqlProvider.getAppendToLargeObjectSQL();\n+      this.selectFileNamesByExtension = sqlProvider.getSelectFileNamesByExtensionSQL();\n    }\n \n    @Override\n    public int writeToFile(JDBCSequentialFile file, byte[] data) throws SQLException {\n       if (data == null || data.length == 0) {\n          return 0;\n       }\n-      synchronized (connection) {\n-         try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NDY2Mw=="}, "originalCommit": {"oid": "bd7f9367f4ff0ef8f86a9068d31dd31aab92d456"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODQ1MTk5OnYy", "diffSide": "LEFT", "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/sql/PropertySQLProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDo1ODoxN1rOHYHPLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNTo0MzoyNlrOHaOCvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA0NjQ0Ng==", "bodyText": "Can't we keep this method and call this(new JDBCConnectionProvider(ds));", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r495046446", "createdAt": "2020-09-25T14:58:17Z", "author": {"login": "ehsavoie"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/sql/PropertySQLProvider.java", "diffHunk": "@@ -362,8 +363,12 @@ public Factory(SQLDialect dialect) {\n          }\n       }\n \n-      public Factory(DataSource dataSource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1efccfc4cf0ea01f4e74c176f7b389ff95fa5420"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjgyNTM1MA==", "bodyText": "@uomik this is still missing in your latest changes", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r496825350", "createdAt": "2020-09-29T15:38:27Z", "author": {"login": "ehsavoie"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/sql/PropertySQLProvider.java", "diffHunk": "@@ -362,8 +363,12 @@ public Factory(SQLDialect dialect) {\n          }\n       }\n \n-      public Factory(DataSource dataSource) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA0NjQ0Ng=="}, "originalCommit": {"oid": "1efccfc4cf0ea01f4e74c176f7b389ff95fa5420"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1NTEwMg==", "bodyText": "@ehsavoie Fixed now. For some reason the commit did not make it to my last push.", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r497255102", "createdAt": "2020-09-30T05:43:26Z", "author": {"login": "uomik"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/sql/PropertySQLProvider.java", "diffHunk": "@@ -362,8 +363,12 @@ public Factory(SQLDialect dialect) {\n          }\n       }\n \n-      public Factory(DataSource dataSource) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA0NjQ0Ng=="}, "originalCommit": {"oid": "1efccfc4cf0ea01f4e74c176f7b389ff95fa5420"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5ODU3NTU4OnYy", "diffSide": "RIGHT", "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagingStoreFactoryDatabase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNToyOToyM1rOHYIbpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNToyOToyM1rOHYIbpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA2NjAyMg==", "bodyText": "I see that JDBCSequentialFile directoryList and JDBCSequentialFileFactoryDriver dbDriver  are not used as data members: can be removed", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r495066022", "createdAt": "2020-09-25T15:29:23Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagingStoreFactoryDatabase.java", "diffHunk": "@@ -106,8 +105,8 @@ public PagingStoreFactoryDatabase(final DatabaseStorageConfiguration dbConf,\n                                      final ScheduledExecutorService scheduledExecutor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e0825deaa4606393a1d819530e256feef0666e6"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDYxMTAwOnYy", "diffSide": "RIGHT", "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/PostgresLargeObjectManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNjozN1rOHbYBWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNjozN1rOHbYBWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2NzE2Mg==", "bodyText": "connection is not a parameter of this method", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r498467162", "createdAt": "2020-10-01T19:26:37Z", "author": {"login": "ehsavoie"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/PostgresLargeObjectManager.java", "diffHunk": "@@ -56,31 +56,31 @@ public PostgresLargeObjectManager(Connection connection) throws SQLException {\n       }\n    }\n \n-   public final Long createLO() throws SQLException {\n+   public final Long createLO(Connection connection) throws SQLException {\n       if (shouldUseReflection) {\n-         Object largeObjectManager = getLargeObjectManager();\n+         Object largeObjectManager = getLargeObjectManager(connection);\n          try {\n-            Method method = largeObjectManager.getClass().getMethod(\"createLO\");\n-            return (Long) method.invoke(largeObjectManager);\n+            Method method = largeObjectManager.getClass().getMethod(\"createLO\", Connection.class);\n+            return (Long) method.invoke(largeObjectManager, connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c890606d44a09dbb0b561ca622058693b04b6f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDYxMTgzOnYy", "diffSide": "RIGHT", "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/PostgresLargeObjectManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNjo1OVrOHbYB7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxOToyNjo1OVrOHbYB7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2NzMxMA==", "bodyText": "connection is not a parameter of this method", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r498467310", "createdAt": "2020-10-01T19:26:59Z", "author": {"login": "ehsavoie"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/PostgresLargeObjectManager.java", "diffHunk": "@@ -56,31 +56,31 @@ public PostgresLargeObjectManager(Connection connection) throws SQLException {\n       }\n    }\n \n-   public final Long createLO() throws SQLException {\n+   public final Long createLO(Connection connection) throws SQLException {\n       if (shouldUseReflection) {\n-         Object largeObjectManager = getLargeObjectManager();\n+         Object largeObjectManager = getLargeObjectManager(connection);\n          try {\n-            Method method = largeObjectManager.getClass().getMethod(\"createLO\");\n-            return (Long) method.invoke(largeObjectManager);\n+            Method method = largeObjectManager.getClass().getMethod(\"createLO\", Connection.class);\n+            return (Long) method.invoke(largeObjectManager, connection);\n          } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException ex) {\n             throw new SQLException(\"Couldn't access org.postgresql.largeobject.LargeObjectManager\", ex);\n          }\n       } else {\n-         return ((PGConnection) realConnection).getLargeObjectAPI().createLO();\n+         return ((PGConnection) unwrap(connection)).getLargeObjectAPI().createLO();\n       }\n    }\n \n-   public Object open(long oid, int mode) throws SQLException {\n+   public Object open(Connection connection, long oid, int mode) throws SQLException {\n       if (shouldUseReflection) {\n-         Object largeObjectManager = getLargeObjectManager();\n+         Object largeObjectManager = getLargeObjectManager(connection);\n          try {\n-            Method method = largeObjectManager.getClass().getMethod(\"open\", long.class, int.class);\n-            return method.invoke(largeObjectManager, oid, mode);\n+            Method method = largeObjectManager.getClass().getMethod(\"open\", Connection.class, long.class, int.class);\n+            return method.invoke(largeObjectManager, connection, oid, mode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c890606d44a09dbb0b561ca622058693b04b6f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjEzNTgzOnYy", "diffSide": "RIGHT", "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/PostgresSequentialSequentialFileDriver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOToyNzo1NFrOHbnGBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOToyNzo1NFrOHbnGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcxNDExOA==", "bodyText": "you need to pass Statement.RETURN_GENERATED_KEYS as second argument (check line 55 on previous code)", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r498714118", "createdAt": "2020-10-02T09:27:54Z", "author": {"login": "ehsavoie"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/PostgresSequentialSequentialFileDriver.java", "diffHunk": "@@ -36,37 +36,32 @@ public PostgresSequentialSequentialFileDriver() throws SQLException {\n       super();\n    }\n \n-   public PostgresSequentialSequentialFileDriver(DataSource dataSource, SQLProvider provider) {\n+   public PostgresSequentialSequentialFileDriver(JDBCConnectionProvider connectionProvider, SQLProvider provider) {\n       super();\n-      this.setDataSource(dataSource);\n-      this.setSqlProvider(provider);\n-   }\n-\n-   public PostgresSequentialSequentialFileDriver(Connection connection, SQLProvider provider) {\n-      super();\n-      this.setConnection(connection);\n+      this.setJdbcConnectionProvider(connectionProvider);\n       this.setSqlProvider(provider);\n    }\n \n    @Override\n-   protected void prepareStatements() throws SQLException {\n-      this.largeObjectManager = new PostgresLargeObjectManager(connection);\n-      this.deleteFile = connection.prepareStatement(sqlProvider.getDeleteFileSQL());\n-      this.createFile = connection.prepareStatement(sqlProvider.getInsertFileSQL(), Statement.RETURN_GENERATED_KEYS);\n-      this.selectFileByFileName = connection.prepareStatement(sqlProvider.getSelectFileByFileName());\n-      this.copyFileRecord = connection.prepareStatement(sqlProvider.getCopyFileRecordByIdSQL());\n-      this.renameFile = connection.prepareStatement(sqlProvider.getUpdateFileNameByIdSQL());\n-      this.readLargeObject = connection.prepareStatement(sqlProvider.getReadLargeObjectSQL());\n-      this.appendToLargeObject = connection.prepareStatement(sqlProvider.getAppendToLargeObjectSQL());\n-      this.selectFileNamesByExtension = connection.prepareStatement(sqlProvider.getSelectFileNamesByExtensionSQL());\n+   protected void prepareStatements() {\n+      this.largeObjectManager = new PostgresLargeObjectManager();\n+      this.deleteFile = sqlProvider.getDeleteFileSQL();\n+      this.createFile = sqlProvider.getInsertFileSQL();\n+      this.createFileAutogeneratedKeys = Statement.RETURN_GENERATED_KEYS;\n+      this.selectFileByFileName = sqlProvider.getSelectFileByFileName();\n+      this.copyFileRecord = sqlProvider.getCopyFileRecordByIdSQL();\n+      this.renameFile = sqlProvider.getUpdateFileNameByIdSQL();\n+      this.readLargeObject = sqlProvider.getReadLargeObjectSQL();\n+      this.appendToLargeObject = sqlProvider.getAppendToLargeObjectSQL();\n+      this.selectFileNamesByExtension = sqlProvider.getSelectFileNamesByExtensionSQL();\n    }\n \n    @Override\n    public void createFile(JDBCSequentialFile file) throws SQLException {\n-      synchronized (connection) {\n-         try {\n+      try (Connection connection = connectionProvider.getConnection()) {\n+         try (PreparedStatement createFile = connection.prepareStatement(this.createFile)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39c65f9a1753e5d9802ee2e97bb3ca880310e8c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjE5MzUzOnYy", "diffSide": "RIGHT", "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/PostgresSequentialSequentialFileDriver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo0Nzo1NFrOHbnqWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo0Nzo1NFrOHbnqWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMzQxNg==", "bodyText": "We should declare the largeObject here instead of 4 lines before (even if that was how it was done before)", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r498723416", "createdAt": "2020-10-02T09:47:54Z", "author": {"login": "ehsavoie"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/PostgresSequentialSequentialFileDriver.java", "diffHunk": "@@ -132,10 +129,10 @@ public int writeToFile(JDBCSequentialFile file, byte[] data, boolean append) thr\n    public int readFromFile(JDBCSequentialFile file, ByteBuffer bytes) throws SQLException {\n       Object largeObject = null;\n       long oid = getOID(file);\n-      synchronized (connection) {\n+      try (Connection connection = connectionProvider.getConnection()) {\n          try {\n             connection.setAutoCommit(false);\n-            largeObject = largeObjectManager.open(oid, PostgresLargeObjectManager.READ);\n+            largeObject = largeObjectManager.open(connection, oid, PostgresLargeObjectManager.READ);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39c65f9a1753e5d9802ee2e97bb3ca880310e8c"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjE5Mzg5OnYy", "diffSide": "RIGHT", "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/PostgresSequentialSequentialFileDriver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo0ODowMVrOHbnqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwOTo0ODowMVrOHbnqig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODcyMzQ2Ng==", "bodyText": "We should declare the largeObject here instead of 4 lines before (even if that was how it was done before)", "url": "https://github.com/apache/activemq-artemis/pull/3204#discussion_r498723466", "createdAt": "2020-10-02T09:48:01Z", "author": {"login": "ehsavoie"}, "path": "artemis-jdbc-store/src/main/java/org/apache/activemq/artemis/jdbc/store/file/PostgresSequentialSequentialFileDriver.java", "diffHunk": "@@ -87,31 +82,33 @@ public void createFile(JDBCSequentialFile file) throws SQLException {\n \n    @Override\n    public void loadFile(JDBCSequentialFile file) throws SQLException {\n-      synchronized (connection) {\n-         connection.setAutoCommit(false);\n-         readLargeObject.setLong(1, file.getId());\n+      try (Connection connection = connectionProvider.getConnection()) {\n+         try (PreparedStatement readLargeObject = connection.prepareStatement(this.readLargeObject)) {\n+            connection.setAutoCommit(false);\n+            readLargeObject.setLong(1, file.getId());\n \n-         try (ResultSet rs = readLargeObject.executeQuery()) {\n-            if (rs.next()) {\n-               file.setWritePosition(getPostGresLargeObjectSize(file));\n+            try (ResultSet rs = readLargeObject.executeQuery()) {\n+               if (rs.next()) {\n+                  file.setWritePosition(getPostGresLargeObjectSize(file));\n+               }\n+               connection.commit();\n+            } catch (SQLException e) {\n+               connection.rollback();\n+               throw e;\n             }\n-            connection.commit();\n-         } catch (SQLException e) {\n-            connection.rollback();\n-            throw e;\n          }\n       }\n    }\n \n    @Override\n    public int writeToFile(JDBCSequentialFile file, byte[] data, boolean append) throws SQLException {\n-      synchronized (connection) {\n+      try (Connection connection = connectionProvider.getConnection()) {\n          Object largeObject = null;\n \n          Long oid = getOID(file);\n          try {\n             connection.setAutoCommit(false);\n-            largeObject = largeObjectManager.open(oid, PostgresLargeObjectManager.WRITE);\n+            largeObject = largeObjectManager.open(connection, oid, PostgresLargeObjectManager.WRITE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f39c65f9a1753e5d9802ee2e97bb3ca880310e8c"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3940, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}