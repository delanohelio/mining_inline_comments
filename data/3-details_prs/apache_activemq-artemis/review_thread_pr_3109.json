{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzQyNzM3", "number": 3109, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo0NzoxNlrOD4LsLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo0NzoxNlrOD4LsLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjM4MzgwOnYy", "diffSide": "RIGHT", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/plugin/MetricsPluginTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo0NzoxNlrOGO34YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTo1NDoxMlrOGO4GRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0ODgwMQ==", "bodyText": "This test fails... run it in loop.\nWait.assertEquals please", "url": "https://github.com/apache/activemq-artemis/pull/3109#discussion_r418248801", "createdAt": "2020-04-30T19:47:16Z", "author": {"login": "clebertsuconic"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/plugin/MetricsPluginTest.java", "diffHunk": "@@ -198,6 +199,36 @@ public void testForBasicMetricsPresenceAndValue() throws Exception {\n       checkMetric(metrics, \"artemis.consumer.count\", \"queue\", queueName, 0.0);\n    }\n \n+   @Test\n+   public void testMessageCountWithPaging() throws Exception {\n+      final String data = \"Simple Text \" + UUID.randomUUID().toString();\n+      final String queueName = \"simpleQueue\";\n+      final String addressName = \"simpleAddress\";\n+\n+      server.getAddressSettingsRepository().getMatch(addressName).setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE).setMaxSizeBytes(1024 * 10).setPageSizeBytes(1024 * 5);\n+\n+      session.createQueue(new QueueConfiguration(queueName).setAddress(addressName).setRoutingType(RoutingType.ANYCAST));\n+      ClientProducer producer = session.createProducer(addressName);\n+      ClientMessage message = session.createMessage(true);\n+      message.getBodyBuffer().writeString(data);\n+      int messageCount = 0;\n+      while (!server.getPagingManager().getPageStore(new SimpleString(addressName)).isPaging()) {\n+         producer.send(message);\n+         messageCount++;\n+      }\n+\n+      assertEquals(messageCount, server.locateQueue(queueName).getMessageCount());\n+      checkMetric(getMetrics(), \"artemis.message.count\", \"queue\", queueName, Double.valueOf(messageCount));\n+\n+      for (int i = 0; i < messageCount; i++) {\n+         producer.send(message);\n+      }\n+      producer.close();\n+\n+      assertEquals(messageCount * 2, server.locateQueue(queueName).getMessageCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67252259ace40b6bb3b1196d287ad6a5f1c8f906"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0OTY2Ng==", "bodyText": "change this line to\nWait.assertEquals(messageCount, server.locateQueue(queueName)::getMessageCount);", "url": "https://github.com/apache/activemq-artemis/pull/3109#discussion_r418249666", "createdAt": "2020-04-30T19:48:56Z", "author": {"login": "clebertsuconic"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/plugin/MetricsPluginTest.java", "diffHunk": "@@ -198,6 +199,36 @@ public void testForBasicMetricsPresenceAndValue() throws Exception {\n       checkMetric(metrics, \"artemis.consumer.count\", \"queue\", queueName, 0.0);\n    }\n \n+   @Test\n+   public void testMessageCountWithPaging() throws Exception {\n+      final String data = \"Simple Text \" + UUID.randomUUID().toString();\n+      final String queueName = \"simpleQueue\";\n+      final String addressName = \"simpleAddress\";\n+\n+      server.getAddressSettingsRepository().getMatch(addressName).setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE).setMaxSizeBytes(1024 * 10).setPageSizeBytes(1024 * 5);\n+\n+      session.createQueue(new QueueConfiguration(queueName).setAddress(addressName).setRoutingType(RoutingType.ANYCAST));\n+      ClientProducer producer = session.createProducer(addressName);\n+      ClientMessage message = session.createMessage(true);\n+      message.getBodyBuffer().writeString(data);\n+      int messageCount = 0;\n+      while (!server.getPagingManager().getPageStore(new SimpleString(addressName)).isPaging()) {\n+         producer.send(message);\n+         messageCount++;\n+      }\n+\n+      assertEquals(messageCount, server.locateQueue(queueName).getMessageCount());\n+      checkMetric(getMetrics(), \"artemis.message.count\", \"queue\", queueName, Double.valueOf(messageCount));\n+\n+      for (int i = 0; i < messageCount; i++) {\n+         producer.send(message);\n+      }\n+      producer.close();\n+\n+      assertEquals(messageCount * 2, server.locateQueue(queueName).getMessageCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0ODgwMQ=="}, "originalCommit": {"oid": "67252259ace40b6bb3b1196d287ad6a5f1c8f906"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI1MjM1Ng==", "bodyText": "Done. I ran the test 500 times with no failures.", "url": "https://github.com/apache/activemq-artemis/pull/3109#discussion_r418252356", "createdAt": "2020-04-30T19:54:12Z", "author": {"login": "jbertram"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/plugin/MetricsPluginTest.java", "diffHunk": "@@ -198,6 +199,36 @@ public void testForBasicMetricsPresenceAndValue() throws Exception {\n       checkMetric(metrics, \"artemis.consumer.count\", \"queue\", queueName, 0.0);\n    }\n \n+   @Test\n+   public void testMessageCountWithPaging() throws Exception {\n+      final String data = \"Simple Text \" + UUID.randomUUID().toString();\n+      final String queueName = \"simpleQueue\";\n+      final String addressName = \"simpleAddress\";\n+\n+      server.getAddressSettingsRepository().getMatch(addressName).setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE).setMaxSizeBytes(1024 * 10).setPageSizeBytes(1024 * 5);\n+\n+      session.createQueue(new QueueConfiguration(queueName).setAddress(addressName).setRoutingType(RoutingType.ANYCAST));\n+      ClientProducer producer = session.createProducer(addressName);\n+      ClientMessage message = session.createMessage(true);\n+      message.getBodyBuffer().writeString(data);\n+      int messageCount = 0;\n+      while (!server.getPagingManager().getPageStore(new SimpleString(addressName)).isPaging()) {\n+         producer.send(message);\n+         messageCount++;\n+      }\n+\n+      assertEquals(messageCount, server.locateQueue(queueName).getMessageCount());\n+      checkMetric(getMetrics(), \"artemis.message.count\", \"queue\", queueName, Double.valueOf(messageCount));\n+\n+      for (int i = 0; i < messageCount; i++) {\n+         producer.send(message);\n+      }\n+      producer.close();\n+\n+      assertEquals(messageCount * 2, server.locateQueue(queueName).getMessageCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0ODgwMQ=="}, "originalCommit": {"oid": "67252259ace40b6bb3b1196d287ad6a5f1c8f906"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3952, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}