{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNDk2NDAw", "number": 3107, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoxNzozMlrOD4XUjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1OTozN1rOD4aB0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDI4OTQwOnYy", "diffSide": "RIGHT", "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/handler/EventHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoxNzozMlrOGPJb6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTowNjo1OFrOGPMP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzNjQyNw==", "bodyText": "You don't need this. you're using AMQPConnection directly, no need to change to change EventHandler.\nCan you remove it?", "url": "https://github.com/apache/activemq-artemis/pull/3107#discussion_r418536427", "createdAt": "2020-05-01T13:17:32Z", "author": {"login": "clebertsuconic"}, "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/handler/EventHandler.java", "diffHunk": "@@ -91,4 +91,7 @@ default boolean flowControl(ReadyListener readyListener) {\n       return true;\n    }\n \n+   default String getRemoteAddress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6647f2dd203aa16396b8cefeaf03c7151b9dc7b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzNzU2MA==", "bodyText": "actually, you do use it...\nBut you are calling this on every proton event. isn't there a better place to call that?", "url": "https://github.com/apache/activemq-artemis/pull/3107#discussion_r418537560", "createdAt": "2020-05-01T13:20:38Z", "author": {"login": "clebertsuconic"}, "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/handler/EventHandler.java", "diffHunk": "@@ -91,4 +91,7 @@ default boolean flowControl(ReadyListener readyListener) {\n       return true;\n    }\n \n+   default String getRemoteAddress() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzNjQyNw=="}, "originalCommit": {"oid": "a6647f2dd203aa16396b8cefeaf03c7151b9dc7b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4MjQ4MQ==", "bodyText": "It is on every event so it is available to the Audit logger", "url": "https://github.com/apache/activemq-artemis/pull/3107#discussion_r418582481", "createdAt": "2020-05-01T15:06:58Z", "author": {"login": "andytaylor"}, "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/handler/EventHandler.java", "diffHunk": "@@ -91,4 +91,7 @@ default boolean flowControl(ReadyListener readyListener) {\n       return true;\n    }\n \n+   default String getRemoteAddress() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzNjQyNw=="}, "originalCommit": {"oid": "a6647f2dd203aa16396b8cefeaf03c7151b9dc7b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDMxMTcwOnYy", "diffSide": "RIGHT", "path": "artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzoyNjo0NlrOGPJpPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTozNjo1OFrOGPNE-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzOTgzOA==", "bodyText": "this won't work...\nopenWireActor.act() will transfer the execution to a different thread.\nyou will lose the ThreadLocal here.\nThe netty loop is reused for many connections.", "url": "https://github.com/apache/activemq-artemis/pull/3107#discussion_r418539838", "createdAt": "2020-05-01T13:26:46Z", "author": {"login": "clebertsuconic"}, "path": "artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java", "diffHunk": "@@ -287,6 +288,9 @@ public void bufferReceived(Object connectionID, ActiveMQBuffer buffer) {\n          if (logger.isTraceEnabled()) {\n             traceBufferReceived(connectionID, command);\n          }\n+         if (AuditLogger.isAnyLoggingEnabled()) {\n+            AuditLogger.setRemoteAddress(getRemoteAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6647f2dd203aa16396b8cefeaf03c7151b9dc7b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0MTQwMg==", "bodyText": "this could eventually fail in other protocols as well. you would endup informing a wrong remote address for Audit Operations.", "url": "https://github.com/apache/activemq-artemis/pull/3107#discussion_r418541402", "createdAt": "2020-05-01T13:30:42Z", "author": {"login": "clebertsuconic"}, "path": "artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java", "diffHunk": "@@ -287,6 +288,9 @@ public void bufferReceived(Object connectionID, ActiveMQBuffer buffer) {\n          if (logger.isTraceEnabled()) {\n             traceBufferReceived(connectionID, command);\n          }\n+         if (AuditLogger.isAnyLoggingEnabled()) {\n+            AuditLogger.setRemoteAddress(getRemoteAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzOTgzOA=="}, "originalCommit": {"oid": "a6647f2dd203aa16396b8cefeaf03c7151b9dc7b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4MjYyNQ==", "bodyText": "ok, I will address", "url": "https://github.com/apache/activemq-artemis/pull/3107#discussion_r418582625", "createdAt": "2020-05-01T15:07:17Z", "author": {"login": "andytaylor"}, "path": "artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java", "diffHunk": "@@ -287,6 +288,9 @@ public void bufferReceived(Object connectionID, ActiveMQBuffer buffer) {\n          if (logger.isTraceEnabled()) {\n             traceBufferReceived(connectionID, command);\n          }\n+         if (AuditLogger.isAnyLoggingEnabled()) {\n+            AuditLogger.setRemoteAddress(getRemoteAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzOTgzOA=="}, "originalCommit": {"oid": "a6647f2dd203aa16396b8cefeaf03c7151b9dc7b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5NTc3MQ==", "bodyText": "Just an idea. We have OperationContext, which will hold operations to the Session, and it has a thread local already.\nWhy don't you somehow inject the session on the operation context and use the thread local from there. We recover it back whenever we do a new operation on the session. It is a reliable place.", "url": "https://github.com/apache/activemq-artemis/pull/3107#discussion_r418595771", "createdAt": "2020-05-01T15:36:28Z", "author": {"login": "clebertsuconic"}, "path": "artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java", "diffHunk": "@@ -287,6 +288,9 @@ public void bufferReceived(Object connectionID, ActiveMQBuffer buffer) {\n          if (logger.isTraceEnabled()) {\n             traceBufferReceived(connectionID, command);\n          }\n+         if (AuditLogger.isAnyLoggingEnabled()) {\n+            AuditLogger.setRemoteAddress(getRemoteAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzOTgzOA=="}, "originalCommit": {"oid": "a6647f2dd203aa16396b8cefeaf03c7151b9dc7b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU5NjA5MQ==", "bodyText": "I mean.. why don't you inject the data you need on the operation context.", "url": "https://github.com/apache/activemq-artemis/pull/3107#discussion_r418596091", "createdAt": "2020-05-01T15:36:58Z", "author": {"login": "clebertsuconic"}, "path": "artemis-protocols/artemis-openwire-protocol/src/main/java/org/apache/activemq/artemis/core/protocol/openwire/OpenWireConnection.java", "diffHunk": "@@ -287,6 +288,9 @@ public void bufferReceived(Object connectionID, ActiveMQBuffer buffer) {\n          if (logger.isTraceEnabled()) {\n             traceBufferReceived(connectionID, command);\n          }\n+         if (AuditLogger.isAnyLoggingEnabled()) {\n+            AuditLogger.setRemoteAddress(getRemoteAddress());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUzOTgzOA=="}, "originalCommit": {"oid": "a6647f2dd203aa16396b8cefeaf03c7151b9dc7b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDczMjk4OnYy", "diffSide": "RIGHT", "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/handler/ProtonHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1OTozN1rOGPNuRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNTo1OTozN1rOGPNuRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYwNjY2MQ==", "bodyText": "Do you need to do this for every event? It seems you only need to this only once.. so I think you could do this at the beggining of the method, before the loop starts.", "url": "https://github.com/apache/activemq-artemis/pull/3107#discussion_r418606661", "createdAt": "2020-05-01T15:59:37Z", "author": {"login": "clebertsuconic"}, "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/proton/handler/ProtonHandler.java", "diffHunk": "@@ -497,6 +498,9 @@ private void dispatch() {\n                if (log.isTraceEnabled()) {\n                   log.trace(\"Handling \" + ev + \" towards \" + h);\n                }\n+               if (AuditLogger.isAnyLoggingEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a48fda6fdd5e334c225eb64831b9364f805465c"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3950, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}