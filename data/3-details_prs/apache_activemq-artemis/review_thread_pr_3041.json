{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxOTU4Mzgz", "number": 3041, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNzowNFrODqZrYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo1NjowMVrODqafYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg3NDg5OnYy", "diffSide": "RIGHT", "path": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/actors/ProcessorBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNzowNFrOF6H4pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1Nzo1NVrOF6O4wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MDkxOQ==", "bodyText": "I would use some named const somewhere to help understand why is 1 second", "url": "https://github.com/apache/activemq-artemis/pull/3041#discussion_r396490919", "createdAt": "2020-03-23T14:27:04Z", "author": {"login": "franz1981"}, "path": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/actors/ProcessorBase.java", "diffHunk": "@@ -99,45 +98,23 @@ public void shutdown(long timeout, TimeUnit unit) {\n       }\n    }\n \n-   /**\n-    * It will wait the current execution (if there is one) to finish\n-    * but will not complete any further executions\n-    */\n+   /** It will shutdown the executor however it will not wait for finishing tasks*/\n    public int shutdownNow(Consumer<? super T> onPendingItem) {\n       //alert anyone that has been requested (at least) an immediate shutdown\n       requestedForcedShutdown = true;\n       requestedShutdown = true;\n \n-      if (inHandler()) {\n-         stateUpdater.set(this, STATE_FORCED_SHUTDOWN);\n-      } else {\n-         //it could take a very long time depending on the current executing task\n-         do {\n-            //alert the ExecutorTask (if is running) to just drain the current backlog of tasks\n-            final int startState = stateUpdater.get(this);\n-            if (startState == STATE_FORCED_SHUTDOWN) {\n-               //another thread has completed a forced shutdown: let it to manage the tasks cleanup\n-               break;\n-            }\n-            if (startState == STATE_RUNNING) {\n-               //wait 100 ms to avoid burning CPU while waiting and\n-               //give other threads a chance to make progress\n-               LockSupport.parkNanos(100_000_000L);\n-            }\n-         }\n-         while (!stateUpdater.compareAndSet(this, STATE_NOT_RUNNING, STATE_FORCED_SHUTDOWN));\n-         //this could happen just one time: the forced shutdown state is the last one and\n-         //can be set by just one caller.\n-         //As noted on the execute method there is a small chance that some tasks would be enqueued\n+      if (!inHandler()) {\n+         flush(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a691b01e3adfae0e8afa498596be9d616c2e3e2a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwNTYzMw==", "bodyText": "I was afraid of failures on the testsuite. In a production system the component would be going down anyways.\nI will try to remove the condition for good.", "url": "https://github.com/apache/activemq-artemis/pull/3041#discussion_r396605633", "createdAt": "2020-03-23T16:57:55Z", "author": {"login": "clebertsuconic"}, "path": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/actors/ProcessorBase.java", "diffHunk": "@@ -99,45 +98,23 @@ public void shutdown(long timeout, TimeUnit unit) {\n       }\n    }\n \n-   /**\n-    * It will wait the current execution (if there is one) to finish\n-    * but will not complete any further executions\n-    */\n+   /** It will shutdown the executor however it will not wait for finishing tasks*/\n    public int shutdownNow(Consumer<? super T> onPendingItem) {\n       //alert anyone that has been requested (at least) an immediate shutdown\n       requestedForcedShutdown = true;\n       requestedShutdown = true;\n \n-      if (inHandler()) {\n-         stateUpdater.set(this, STATE_FORCED_SHUTDOWN);\n-      } else {\n-         //it could take a very long time depending on the current executing task\n-         do {\n-            //alert the ExecutorTask (if is running) to just drain the current backlog of tasks\n-            final int startState = stateUpdater.get(this);\n-            if (startState == STATE_FORCED_SHUTDOWN) {\n-               //another thread has completed a forced shutdown: let it to manage the tasks cleanup\n-               break;\n-            }\n-            if (startState == STATE_RUNNING) {\n-               //wait 100 ms to avoid burning CPU while waiting and\n-               //give other threads a chance to make progress\n-               LockSupport.parkNanos(100_000_000L);\n-            }\n-         }\n-         while (!stateUpdater.compareAndSet(this, STATE_NOT_RUNNING, STATE_FORCED_SHUTDOWN));\n-         //this could happen just one time: the forced shutdown state is the last one and\n-         //can be set by just one caller.\n-         //As noted on the execute method there is a small chance that some tasks would be enqueued\n+      if (!inHandler()) {\n+         flush(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MDkxOQ=="}, "originalCommit": {"oid": "a691b01e3adfae0e8afa498596be9d616c2e3e2a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg4MTg2OnYy", "diffSide": "RIGHT", "path": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/actors/ProcessorBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyODozOFrOF6H9HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzowMjowNlrOF6PE6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MjA2MA==", "bodyText": "the synchronize was there for 2 reasons:\n\nif we would have started using some multi-producer single-consume queue (the ones on JCTools for example...)\nonAddedTaskIfNotRunning is using a synchronize to allow all-or-nothing behaviour", "url": "https://github.com/apache/activemq-artemis/pull/3041#discussion_r396492060", "createdAt": "2020-03-23T14:28:38Z", "author": {"login": "franz1981"}, "path": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/actors/ProcessorBase.java", "diffHunk": "@@ -99,45 +98,23 @@ public void shutdown(long timeout, TimeUnit unit) {\n       }\n    }\n \n-   /**\n-    * It will wait the current execution (if there is one) to finish\n-    * but will not complete any further executions\n-    */\n+   /** It will shutdown the executor however it will not wait for finishing tasks*/\n    public int shutdownNow(Consumer<? super T> onPendingItem) {\n       //alert anyone that has been requested (at least) an immediate shutdown\n       requestedForcedShutdown = true;\n       requestedShutdown = true;\n \n-      if (inHandler()) {\n-         stateUpdater.set(this, STATE_FORCED_SHUTDOWN);\n-      } else {\n-         //it could take a very long time depending on the current executing task\n-         do {\n-            //alert the ExecutorTask (if is running) to just drain the current backlog of tasks\n-            final int startState = stateUpdater.get(this);\n-            if (startState == STATE_FORCED_SHUTDOWN) {\n-               //another thread has completed a forced shutdown: let it to manage the tasks cleanup\n-               break;\n-            }\n-            if (startState == STATE_RUNNING) {\n-               //wait 100 ms to avoid burning CPU while waiting and\n-               //give other threads a chance to make progress\n-               LockSupport.parkNanos(100_000_000L);\n-            }\n-         }\n-         while (!stateUpdater.compareAndSet(this, STATE_NOT_RUNNING, STATE_FORCED_SHUTDOWN));\n-         //this could happen just one time: the forced shutdown state is the last one and\n-         //can be set by just one caller.\n-         //As noted on the execute method there is a small chance that some tasks would be enqueued\n+      if (!inHandler()) {\n+         flush(1, TimeUnit.SECONDS);\n       }\n+\n+      stateUpdater.set(this, STATE_FORCED_SHUTDOWN);\n       int pendingItems = 0;\n-      //there is a small chance that execute() could race with this cleanup: the lock allow an all-or-nothing behaviour between them\n-      synchronized (tasks) {\n-         T item;\n-         while ((item = tasks.poll()) != null) {\n-            onPendingItem.accept(item);\n-            pendingItems++;\n-         }\n+\n+      T item;\n+      while ((item = tasks.poll()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a691b01e3adfae0e8afa498596be9d616c2e3e2a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwODc0Nw==", "bodyText": "I am removing the clear on onAddedTaskifNotRunning", "url": "https://github.com/apache/activemq-artemis/pull/3041#discussion_r396608747", "createdAt": "2020-03-23T17:02:06Z", "author": {"login": "clebertsuconic"}, "path": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/actors/ProcessorBase.java", "diffHunk": "@@ -99,45 +98,23 @@ public void shutdown(long timeout, TimeUnit unit) {\n       }\n    }\n \n-   /**\n-    * It will wait the current execution (if there is one) to finish\n-    * but will not complete any further executions\n-    */\n+   /** It will shutdown the executor however it will not wait for finishing tasks*/\n    public int shutdownNow(Consumer<? super T> onPendingItem) {\n       //alert anyone that has been requested (at least) an immediate shutdown\n       requestedForcedShutdown = true;\n       requestedShutdown = true;\n \n-      if (inHandler()) {\n-         stateUpdater.set(this, STATE_FORCED_SHUTDOWN);\n-      } else {\n-         //it could take a very long time depending on the current executing task\n-         do {\n-            //alert the ExecutorTask (if is running) to just drain the current backlog of tasks\n-            final int startState = stateUpdater.get(this);\n-            if (startState == STATE_FORCED_SHUTDOWN) {\n-               //another thread has completed a forced shutdown: let it to manage the tasks cleanup\n-               break;\n-            }\n-            if (startState == STATE_RUNNING) {\n-               //wait 100 ms to avoid burning CPU while waiting and\n-               //give other threads a chance to make progress\n-               LockSupport.parkNanos(100_000_000L);\n-            }\n-         }\n-         while (!stateUpdater.compareAndSet(this, STATE_NOT_RUNNING, STATE_FORCED_SHUTDOWN));\n-         //this could happen just one time: the forced shutdown state is the last one and\n-         //can be set by just one caller.\n-         //As noted on the execute method there is a small chance that some tasks would be enqueued\n+      if (!inHandler()) {\n+         flush(1, TimeUnit.SECONDS);\n       }\n+\n+      stateUpdater.set(this, STATE_FORCED_SHUTDOWN);\n       int pendingItems = 0;\n-      //there is a small chance that execute() could race with this cleanup: the lock allow an all-or-nothing behaviour between them\n-      synchronized (tasks) {\n-         T item;\n-         while ((item = tasks.poll()) != null) {\n-            onPendingItem.accept(item);\n-            pendingItems++;\n-         }\n+\n+      T item;\n+      while ((item = tasks.poll()) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MjA2MA=="}, "originalCommit": {"oid": "a691b01e3adfae0e8afa498596be9d616c2e3e2a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzkzNzE1OnYy", "diffSide": "RIGHT", "path": "artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerReceiverContextTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo0MTowM1rOF6IhDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjo1NTo1NVrOF6OzSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMTI2Mg==", "bodyText": "that's safe in any env?", "url": "https://github.com/apache/activemq-artemis/pull/3041#discussion_r396501262", "createdAt": "2020-03-23T14:41:03Z", "author": {"login": "franz1981"}, "path": "artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerReceiverContextTest.java", "diffHunk": "@@ -154,6 +160,8 @@ private void doOnMessageWithDeliveryException(List<Symbol> sourceSymbols,\n \n       rc.onMessage(mockDelivery);\n \n+      Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a691b01e3adfae0e8afa498596be9d616c2e3e2a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYwNDIzNQ==", "bodyText": "I forgot to remove this sleep", "url": "https://github.com/apache/activemq-artemis/pull/3041#discussion_r396604235", "createdAt": "2020-03-23T16:55:55Z", "author": {"login": "clebertsuconic"}, "path": "artemis-protocols/artemis-amqp-protocol/src/test/java/org/apache/activemq/artemis/protocol/amqp/proton/ProtonServerReceiverContextTest.java", "diffHunk": "@@ -154,6 +160,8 @@ private void doOnMessageWithDeliveryException(List<Symbol> sourceSymbols,\n \n       rc.onMessage(mockDelivery);\n \n+      Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwMTI2Mg=="}, "originalCommit": {"oid": "a691b01e3adfae0e8afa498596be9d616c2e3e2a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODAwODAzOnYy", "diffSide": "RIGHT", "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/OperationContextImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo1NjowMVrOF6JOxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDo1NjowMVrOF6JOxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxMjk2Nw==", "bodyText": "is this logger used?", "url": "https://github.com/apache/activemq-artemis/pull/3041#discussion_r396512967", "createdAt": "2020-03-23T14:56:01Z", "author": {"login": "brusdev"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/persistence/impl/journal/OperationContextImpl.java", "diffHunk": "@@ -43,6 +44,8 @@\n  */\n public class OperationContextImpl implements OperationContext {\n \n+   private static final Logger logger = Logger.getLogger(OperationContextImpl.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a691b01e3adfae0e8afa498596be9d616c2e3e2a"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3968, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}