{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTgzNjg1", "number": 3129, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyNzowOFrOD7_BBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo0MDo1NVrOD8EjAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI1MDMxOnYy", "diffSide": "RIGHT", "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyNzowOFrOGUpNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOToyNzowOFrOGUpNNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI5OTgyOQ==", "bodyText": "Couldn't we just define the String to begin with instead?\nPerhaps over-eager optimisation, but would some sort of fixed mapping/lookup for the already-known/'popular' cases (or just recently-seen ones) be preferable to calling this and concat'ing and substring'ing and replacing the same things repeatedly for each applicable message?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424299829", "createdAt": "2020-05-13T09:27:08Z", "author": {"login": "gemmellr"}, "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "diffHunk": "@@ -285,6 +292,18 @@ public static Charset getCharsetForTextualContent(String contentType) {\n       }\n    }\n \n+   public static String toAnnotationName(String key) {\n+      if (!key.startsWith(X_OPT_PREFIX.toString())) {\n+         if (key.startsWith(AMQ_PROPERTY_PREFIX.toString())) {\n+            return X_OPT_PREFIX.toString().concat(key.substring(AMQ_PROPERTY_PREFIX.toString().length()).replace('_', '-'));\n+         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI2MzQyOnYy", "diffSide": "RIGHT", "path": "docs/user-manual/en/amqp.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMDoyOFrOGUpVsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMDoyOFrOGUpVsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMjAwMg==", "bodyText": "This second sentence would probably be better moved to just above the bit describing the Extra Properties (say L150 currently). It could then be simplified a little and would be far clearer on what it is saying given the added context that would then follow.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424302002", "createdAt": "2020-05-13T09:30:28Z", "author": {"login": "gemmellr"}, "path": "docs/user-manual/en/amqp.md", "diffHunk": "@@ -128,6 +128,62 @@ message for later delivery:\n If both annotations are present in the same message then the broker will prefer\n the more specific `x-opt-delivery-time` value.\n \n+## DLQ and Expiry transfer\n+\n+AMQP Messages will be copied before transferred to a DLQ or expiry queue, and will receive special annotations prefixed with x-opt.\n+The broker also keeps an internal only property (called extra property) that is not exposed to the clients, and AMQP Messages it will also receive properties when transferred to either DLQ or Expiry.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI3NDU2OnYy", "diffSide": "RIGHT", "path": "docs/user-manual/en/amqp.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMzoxOVrOGUpcoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMzoxOVrOGUpcoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMzc3Ng==", "bodyText": "The example doesn't work so its unclear why it should be here. As I noted on #2695 previously the JMS client doesn't know this 'hyphenated_props' prefix at all, so it will still error with that.\n(Doesn't really matter, but typically port 5672 is used if not doing TLS).", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424303776", "createdAt": "2020-05-13T09:33:19Z", "author": {"login": "gemmellr"}, "path": "docs/user-manual/en/amqp.md", "diffHunk": "@@ -128,6 +128,62 @@ message for later delivery:\n If both annotations are present in the same message then the broker will prefer\n the more specific `x-opt-delivery-time` value.\n \n+## DLQ and Expiry transfer\n+\n+AMQP Messages will be copied before transferred to a DLQ or expiry queue, and will receive special annotations prefixed with x-opt.\n+The broker also keeps an internal only property (called extra property) that is not exposed to the clients, and AMQP Messages it will also receive properties when transferred to either DLQ or Expiry.\n+\n+Follow here a list of Annotation names AMQP Messages will receive when transferred.\n+\n+- x-opt-ORIG-MESSAGE-ID\n+<br>The original message ID before the transfer\n+\n+- x-opt-ACTUAL-EXPIRY\n+<br>The time in epoch when the actual expiry took place\n+\n+- x-opt-ORIG-QUEUE\n+<br>The original queue name before the transfer took place\n+\n+- x-opt-ORIG-ADDRESS \n+<br>The original address name before the transfer took place\n+\n+\n+And follows a list of extra properties messages will receive. Notice there is a replacement pattern to identify the internal property name versus the annotation:\n+\n+- _AMQ-ORIG-MESSAGE-ID\n+- _AMQ_ACTUAL_EXPIRY\n+- _AMQ_ORIG_QUEUE\n+- _AMQ_ORIG_ADDRESS \n+\n+\n+## Filtering on AMQP Messages\n+\n+It is possible to on messaging annotations.\n+\n+As it is explained on [filter-expressions](filter-expressions.md) it is possible to use hyphaneted properties on selectors, and as AMQP message annotations usually have hyphens, you have to use the hyphanted properties.\n+\n+Also, the filters will only parse on message annotations if you specify m. as the prefix of a property.\n+\n+For example, if you want to filter messages sent to a specific annotation,  you have to create your filter accordingly to this:\n+\n+```java\n+ConnectionFactory factory = new JmsConnectionFactory(\"amqp://localhost:5671\");\n+Connection connection = factory.createConnection();\n+Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+connection.start();\n+javax.jms.Queue queue = session.createQueue(\"my-DLQ\");\n+MessageConsumer consumer = session.createConsumer(queue, \"hyphenated_props:m.x-opt-ORIG-ADDRESS='ORIGINAL_PLACE'\");\n+Message message = consumer.receive();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI4MzExOnYy", "diffSide": "RIGHT", "path": "docs/user-manual/en/amqp.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozNTo0M1rOGUpiJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozNTo0M1rOGUpiJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwNTE5MA==", "bodyText": "\"since the epoch in milliseconds\" perhaps?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424305190", "createdAt": "2020-05-13T09:35:43Z", "author": {"login": "gemmellr"}, "path": "docs/user-manual/en/amqp.md", "diffHunk": "@@ -128,6 +128,62 @@ message for later delivery:\n If both annotations are present in the same message then the broker will prefer\n the more specific `x-opt-delivery-time` value.\n \n+## DLQ and Expiry transfer\n+\n+AMQP Messages will be copied before transferred to a DLQ or expiry queue, and will receive special annotations prefixed with x-opt.\n+The broker also keeps an internal only property (called extra property) that is not exposed to the clients, and AMQP Messages it will also receive properties when transferred to either DLQ or Expiry.\n+\n+Follow here a list of Annotation names AMQP Messages will receive when transferred.\n+\n+- x-opt-ORIG-MESSAGE-ID\n+<br>The original message ID before the transfer\n+\n+- x-opt-ACTUAL-EXPIRY\n+<br>The time in epoch when the actual expiry took place", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI5MzQxOnYy", "diffSide": "RIGHT", "path": "docs/user-manual/en/amqp.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozODoyN1rOGUpopg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozODoyN1rOGUpopg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwNjg1NA==", "bodyText": "Rather than saying 'Notice there is a replacement pattern' perhaps just say what it is?\nMaybe a table showing both side by side could make the section more concise and obvious?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424306854", "createdAt": "2020-05-13T09:38:27Z", "author": {"login": "gemmellr"}, "path": "docs/user-manual/en/amqp.md", "diffHunk": "@@ -128,6 +128,62 @@ message for later delivery:\n If both annotations are present in the same message then the broker will prefer\n the more specific `x-opt-delivery-time` value.\n \n+## DLQ and Expiry transfer\n+\n+AMQP Messages will be copied before transferred to a DLQ or expiry queue, and will receive special annotations prefixed with x-opt.\n+The broker also keeps an internal only property (called extra property) that is not exposed to the clients, and AMQP Messages it will also receive properties when transferred to either DLQ or Expiry.\n+\n+Follow here a list of Annotation names AMQP Messages will receive when transferred.\n+\n+- x-opt-ORIG-MESSAGE-ID\n+<br>The original message ID before the transfer\n+\n+- x-opt-ACTUAL-EXPIRY\n+<br>The time in epoch when the actual expiry took place\n+\n+- x-opt-ORIG-QUEUE\n+<br>The original queue name before the transfer took place\n+\n+- x-opt-ORIG-ADDRESS \n+<br>The original address name before the transfer took place\n+\n+\n+And follows a list of extra properties messages will receive. Notice there is a replacement pattern to identify the internal property name versus the annotation:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI5NTM0OnYy", "diffSide": "RIGHT", "path": "docs/user-manual/en/amqp.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozODo1OVrOGUpp7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozODo1OVrOGUpp7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwNzE4Mw==", "bodyText": "Is this one still meant to be using hyphens?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424307183", "createdAt": "2020-05-13T09:38:59Z", "author": {"login": "gemmellr"}, "path": "docs/user-manual/en/amqp.md", "diffHunk": "@@ -128,6 +128,62 @@ message for later delivery:\n If both annotations are present in the same message then the broker will prefer\n the more specific `x-opt-delivery-time` value.\n \n+## DLQ and Expiry transfer\n+\n+AMQP Messages will be copied before transferred to a DLQ or expiry queue, and will receive special annotations prefixed with x-opt.\n+The broker also keeps an internal only property (called extra property) that is not exposed to the clients, and AMQP Messages it will also receive properties when transferred to either DLQ or Expiry.\n+\n+Follow here a list of Annotation names AMQP Messages will receive when transferred.\n+\n+- x-opt-ORIG-MESSAGE-ID\n+<br>The original message ID before the transfer\n+\n+- x-opt-ACTUAL-EXPIRY\n+<br>The time in epoch when the actual expiry took place\n+\n+- x-opt-ORIG-QUEUE\n+<br>The original queue name before the transfer took place\n+\n+- x-opt-ORIG-ADDRESS \n+<br>The original address name before the transfer took place\n+\n+\n+And follows a list of extra properties messages will receive. Notice there is a replacement pattern to identify the internal property name versus the annotation:\n+\n+- _AMQ-ORIG-MESSAGE-ID", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjI5NzcwOnYy", "diffSide": "RIGHT", "path": "docs/user-manual/en/amqp.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozOTo0NVrOGUprgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozOTo0NVrOGUprgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwNzU4NA==", "bodyText": "perhaps Message Annotations rather than Messages?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424307584", "createdAt": "2020-05-13T09:39:45Z", "author": {"login": "gemmellr"}, "path": "docs/user-manual/en/amqp.md", "diffHunk": "@@ -128,6 +128,62 @@ message for later delivery:\n If both annotations are present in the same message then the broker will prefer\n the more specific `x-opt-delivery-time` value.\n \n+## DLQ and Expiry transfer\n+\n+AMQP Messages will be copied before transferred to a DLQ or expiry queue, and will receive special annotations prefixed with x-opt.\n+The broker also keeps an internal only property (called extra property) that is not exposed to the clients, and AMQP Messages it will also receive properties when transferred to either DLQ or Expiry.\n+\n+Follow here a list of Annotation names AMQP Messages will receive when transferred.\n+\n+- x-opt-ORIG-MESSAGE-ID\n+<br>The original message ID before the transfer\n+\n+- x-opt-ACTUAL-EXPIRY\n+<br>The time in epoch when the actual expiry took place\n+\n+- x-opt-ORIG-QUEUE\n+<br>The original queue name before the transfer took place\n+\n+- x-opt-ORIG-ADDRESS \n+<br>The original address name before the transfer took place\n+\n+\n+And follows a list of extra properties messages will receive. Notice there is a replacement pattern to identify the internal property name versus the annotation:\n+\n+- _AMQ-ORIG-MESSAGE-ID\n+- _AMQ_ACTUAL_EXPIRY\n+- _AMQ_ORIG_QUEUE\n+- _AMQ_ORIG_ADDRESS \n+\n+\n+## Filtering on AMQP Messages", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjMwMTY0OnYy", "diffSide": "RIGHT", "path": "docs/user-manual/en/amqp.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo0MDo0NlrOGUpt_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo0MDo0NlrOGUpt_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwODIyMw==", "bodyText": "to filter on?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424308223", "createdAt": "2020-05-13T09:40:46Z", "author": {"login": "gemmellr"}, "path": "docs/user-manual/en/amqp.md", "diffHunk": "@@ -128,6 +128,62 @@ message for later delivery:\n If both annotations are present in the same message then the broker will prefer\n the more specific `x-opt-delivery-time` value.\n \n+## DLQ and Expiry transfer\n+\n+AMQP Messages will be copied before transferred to a DLQ or expiry queue, and will receive special annotations prefixed with x-opt.\n+The broker also keeps an internal only property (called extra property) that is not exposed to the clients, and AMQP Messages it will also receive properties when transferred to either DLQ or Expiry.\n+\n+Follow here a list of Annotation names AMQP Messages will receive when transferred.\n+\n+- x-opt-ORIG-MESSAGE-ID\n+<br>The original message ID before the transfer\n+\n+- x-opt-ACTUAL-EXPIRY\n+<br>The time in epoch when the actual expiry took place\n+\n+- x-opt-ORIG-QUEUE\n+<br>The original queue name before the transfer took place\n+\n+- x-opt-ORIG-ADDRESS \n+<br>The original address name before the transfer took place\n+\n+\n+And follows a list of extra properties messages will receive. Notice there is a replacement pattern to identify the internal property name versus the annotation:\n+\n+- _AMQ-ORIG-MESSAGE-ID\n+- _AMQ_ACTUAL_EXPIRY\n+- _AMQ_ORIG_QUEUE\n+- _AMQ_ORIG_ADDRESS \n+\n+\n+## Filtering on AMQP Messages\n+\n+It is possible to on messaging annotations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjMxMDQ4OnYy", "diffSide": "RIGHT", "path": "artemis-selector/src/main/javacc/HyphenatedParser.jj", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo0MzoxNlrOGUpztg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjoyMToyOFrOGUu4aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwOTY4Ng==", "bodyText": "Dots aren't hyphens, so it seems quite odd to modify this specific parser to have the brokers \"hyphenated_property:\" prefix allow that now just for this.\nPresumably that was rather than modify the parsing to do the quoted variable name thing though, if it doesn't already?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424309686", "createdAt": "2020-05-13T09:43:16Z", "author": {"login": "gemmellr"}, "path": "artemis-selector/src/main/javacc/HyphenatedParser.jj", "diffHunk": "@@ -130,7 +130,7 @@ TOKEN [IGNORE_CASE] :\n \n TOKEN [IGNORE_CASE] :\n {\n-    < ID : [\"a\"-\"z\", \"_\", \"$\"] ([\"a\"-\"z\",\"0\"-\"9\",\"_\", \"$\", \"-\"])* >\n+    < ID : [\"a\"-\"z\", \"_\", \"$\"] ([\"a\"-\"z\",\"0\"-\"9\",\"_\", \"$\", \"-\", \".\"])* >", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4MjAyOA==", "bodyText": "The parsing doesn't do quotes. and I don't know how to implement that.\nI didn't want to change the other parser to accept dots becuase of JMS TCK would probably fail it.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424382028", "createdAt": "2020-05-13T12:01:45Z", "author": {"login": "clebertsuconic"}, "path": "artemis-selector/src/main/javacc/HyphenatedParser.jj", "diffHunk": "@@ -130,7 +130,7 @@ TOKEN [IGNORE_CASE] :\n \n TOKEN [IGNORE_CASE] :\n {\n-    < ID : [\"a\"-\"z\", \"_\", \"$\"] ([\"a\"-\"z\",\"0\"-\"9\",\"_\", \"$\", \"-\"])* >\n+    < ID : [\"a\"-\"z\", \"_\", \"$\"] ([\"a\"-\"z\",\"0\"-\"9\",\"_\", \"$\", \"-\", \".\"])* >", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwOTY4Ng=="}, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4Njk4Ng==", "bodyText": "I see what you did to support quotes on qpid-jms. I will bring in that change.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424386986", "createdAt": "2020-05-13T12:11:16Z", "author": {"login": "clebertsuconic"}, "path": "artemis-selector/src/main/javacc/HyphenatedParser.jj", "diffHunk": "@@ -130,7 +130,7 @@ TOKEN [IGNORE_CASE] :\n \n TOKEN [IGNORE_CASE] :\n {\n-    < ID : [\"a\"-\"z\", \"_\", \"$\"] ([\"a\"-\"z\",\"0\"-\"9\",\"_\", \"$\", \"-\"])* >\n+    < ID : [\"a\"-\"z\", \"_\", \"$\"] ([\"a\"-\"z\",\"0\"-\"9\",\"_\", \"$\", \"-\", \".\"])* >", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwOTY4Ng=="}, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5MjgwOQ==", "bodyText": "That change alone is needed for supporting things like \"-\".", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424392809", "createdAt": "2020-05-13T12:21:28Z", "author": {"login": "clebertsuconic"}, "path": "artemis-selector/src/main/javacc/HyphenatedParser.jj", "diffHunk": "@@ -130,7 +130,7 @@ TOKEN [IGNORE_CASE] :\n \n TOKEN [IGNORE_CASE] :\n {\n-    < ID : [\"a\"-\"z\", \"_\", \"$\"] ([\"a\"-\"z\",\"0\"-\"9\",\"_\", \"$\", \"-\"])* >\n+    < ID : [\"a\"-\"z\", \"_\", \"$\"] ([\"a\"-\"z\",\"0\"-\"9\",\"_\", \"$\", \"-\", \".\"])* >", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwOTY4Ng=="}, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjMzNjA2OnYy", "diffSide": "RIGHT", "path": "docs/user-manual/en/amqp.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1MDoyMVrOGUqEpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1MDoyMVrOGUqEpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMxNDAyMQ==", "bodyText": "Perhaps \"sent to a specific destination before being moved to the DLQ\" rather than \"sent to a specific annotation\"?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424314021", "createdAt": "2020-05-13T09:50:21Z", "author": {"login": "gemmellr"}, "path": "docs/user-manual/en/amqp.md", "diffHunk": "@@ -128,6 +128,62 @@ message for later delivery:\n If both annotations are present in the same message then the broker will prefer\n the more specific `x-opt-delivery-time` value.\n \n+## DLQ and Expiry transfer\n+\n+AMQP Messages will be copied before transferred to a DLQ or expiry queue, and will receive special annotations prefixed with x-opt.\n+The broker also keeps an internal only property (called extra property) that is not exposed to the clients, and AMQP Messages it will also receive properties when transferred to either DLQ or Expiry.\n+\n+Follow here a list of Annotation names AMQP Messages will receive when transferred.\n+\n+- x-opt-ORIG-MESSAGE-ID\n+<br>The original message ID before the transfer\n+\n+- x-opt-ACTUAL-EXPIRY\n+<br>The time in epoch when the actual expiry took place\n+\n+- x-opt-ORIG-QUEUE\n+<br>The original queue name before the transfer took place\n+\n+- x-opt-ORIG-ADDRESS \n+<br>The original address name before the transfer took place\n+\n+\n+And follows a list of extra properties messages will receive. Notice there is a replacement pattern to identify the internal property name versus the annotation:\n+\n+- _AMQ-ORIG-MESSAGE-ID\n+- _AMQ_ACTUAL_EXPIRY\n+- _AMQ_ORIG_QUEUE\n+- _AMQ_ORIG_ADDRESS \n+\n+\n+## Filtering on AMQP Messages\n+\n+It is possible to on messaging annotations.\n+\n+As it is explained on [filter-expressions](filter-expressions.md) it is possible to use hyphaneted properties on selectors, and as AMQP message annotations usually have hyphens, you have to use the hyphanted properties.\n+\n+Also, the filters will only parse on message annotations if you specify m. as the prefix of a property.\n+\n+For example, if you want to filter messages sent to a specific annotation,  you have to create your filter accordingly to this:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjMzNzc2OnYy", "diffSide": "RIGHT", "path": "docs/user-manual/en/amqp.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1MDo0N1rOGUqFug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTo1MDo0N1rOGUqFug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMxNDI5OA==", "bodyText": "typo consuemr", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424314298", "createdAt": "2020-05-13T09:50:47Z", "author": {"login": "gemmellr"}, "path": "docs/user-manual/en/amqp.md", "diffHunk": "@@ -128,6 +128,62 @@ message for later delivery:\n If both annotations are present in the same message then the broker will prefer\n the more specific `x-opt-delivery-time` value.\n \n+## DLQ and Expiry transfer\n+\n+AMQP Messages will be copied before transferred to a DLQ or expiry queue, and will receive special annotations prefixed with x-opt.\n+The broker also keeps an internal only property (called extra property) that is not exposed to the clients, and AMQP Messages it will also receive properties when transferred to either DLQ or Expiry.\n+\n+Follow here a list of Annotation names AMQP Messages will receive when transferred.\n+\n+- x-opt-ORIG-MESSAGE-ID\n+<br>The original message ID before the transfer\n+\n+- x-opt-ACTUAL-EXPIRY\n+<br>The time in epoch when the actual expiry took place\n+\n+- x-opt-ORIG-QUEUE\n+<br>The original queue name before the transfer took place\n+\n+- x-opt-ORIG-ADDRESS \n+<br>The original address name before the transfer took place\n+\n+\n+And follows a list of extra properties messages will receive. Notice there is a replacement pattern to identify the internal property name versus the annotation:\n+\n+- _AMQ-ORIG-MESSAGE-ID\n+- _AMQ_ACTUAL_EXPIRY\n+- _AMQ_ORIG_QUEUE\n+- _AMQ_ORIG_ADDRESS \n+\n+\n+## Filtering on AMQP Messages\n+\n+It is possible to on messaging annotations.\n+\n+As it is explained on [filter-expressions](filter-expressions.md) it is possible to use hyphaneted properties on selectors, and as AMQP message annotations usually have hyphens, you have to use the hyphanted properties.\n+\n+Also, the filters will only parse on message annotations if you specify m. as the prefix of a property.\n+\n+For example, if you want to filter messages sent to a specific annotation,  you have to create your filter accordingly to this:\n+\n+```java\n+ConnectionFactory factory = new JmsConnectionFactory(\"amqp://localhost:5671\");\n+Connection connection = factory.createConnection();\n+Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+connection.start();\n+javax.jms.Queue queue = session.createQueue(\"my-DLQ\");\n+MessageConsumer consumer = session.createConsumer(queue, \"hyphenated_props:m.x-opt-ORIG-ADDRESS='ORIGINAL_PLACE'\");\n+Message message = consumer.receive();\n+```\n+\n+However, since the broker will set internal properties, as much as possible please use the internal properties on filtering, since it would be a lot simpler:\n+\n+```java\n+// Replace the consuemr creation on the previous example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjM3OTUxOnYy", "diffSide": "RIGHT", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDowMjoxNlrOGUqgXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDowMjoxNlrOGUqgXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMTExOQ==", "bodyText": "The test clients receiveNoWait is entirely local, so this is very likely to return null even if the broker does somehow send the consumer a message, likely making this branch and most of the potential loops never happen.\nThe test already has a proxy for the expiry queue, so perhaps just use a wait check that it goes to 0 after rejecting instead of the loops?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424321119", "createdAt": "2020-05-13T10:02:16Z", "author": {"login": "gemmellr"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();\n+         assertNull(received);\n+\n+\n+         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n+         assertNotNull(expiryView);\n+         Wait.assertEquals(1, expiryView::getMessageCount);\n+\n+         boolean dlqed = false;\n+\n+         HashMap<String, Object> annotations = new HashMap<>();\n+\n+         for (int i = 0; i < 10; i++) {\n+            AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"hyphenated_props:m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"='\" + getQueueName() + \"'\");\n+            receiverDLQ.flow(1);\n+            if (i == 0) {\n+               received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n+               Assert.assertNotNull(received);\n+               Map<Symbol, Object> avAnnotations = received.getWrappedMessage().getMessageAnnotations().getValue();\n+               for (Symbol an : avAnnotations.keySet()) {\n+                  annotations.put(an.toString(), avAnnotations.get(an));\n+               }\n+               received.reject();\n+            } else {\n+               received = receiverDLQ.receiveNoWait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjM5MTE4OnYy", "diffSide": "RIGHT", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDowNTo0MFrOGUqnyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMDowNTo0MFrOGUqnyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMyMzAxNg==", "bodyText": "Comment looks to be about the commented out code, c&p error? There isn't selection at this point in the actual test.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424323016", "createdAt": "2020-05-13T10:05:40Z", "author": {"login": "gemmellr"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();\n+         assertNull(received);\n+\n+\n+         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n+         assertNotNull(expiryView);\n+         Wait.assertEquals(1, expiryView::getMessageCount);\n+\n+         boolean dlqed = false;\n+\n+         HashMap<String, Object> annotations = new HashMap<>();\n+\n+         for (int i = 0; i < 10; i++) {\n+            AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"hyphenated_props:m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"='\" + getQueueName() + \"'\");\n+            receiverDLQ.flow(1);\n+            if (i == 0) {\n+               received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n+               Assert.assertNotNull(received);\n+               Map<Symbol, Object> avAnnotations = received.getWrappedMessage().getMessageAnnotations().getValue();\n+               for (Symbol an : avAnnotations.keySet()) {\n+                  annotations.put(an.toString(), avAnnotations.get(an));\n+               }\n+               received.reject();\n+            } else {\n+               received = receiverDLQ.receiveNoWait();\n+               if (received == null) {\n+                  dlqed = true;\n+                  break;\n+               }\n+            }\n+            receiverDLQ.close();\n+         }\n+\n+         Assert.assertTrue(dlqed);\n+\n+         // Redo the selection, however now using the extra-properties, since the broker will store these as extra properties on AMQP Messages\n+         //receiverDLQ = session.createReceiver(getDeadLetterAddress(), \"_AMQ_ORIG_ADDRESS='\" + getQueueName() + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8925b3760a56c37745ab39ee7da1d97610dffcba"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjYwNjk0OnYy", "diffSide": "RIGHT", "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMToxNDo0OFrOGUswtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMToxODo1OVrOGUs4fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1ODA2OQ==", "bodyText": "@gemmellr I saw an email from you asking about Strings defined here but I can't see the comment. (was it deleted?)\nI see your point ... I needed this as SimpleString at some point, and my code changes along the way in a way I don't need it any more.. thanks... ammended.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424358069", "createdAt": "2020-05-13T11:14:48Z", "author": {"login": "clebertsuconic"}, "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "diffHunk": "@@ -178,6 +182,9 @@\n    public static final Binary EMPTY_BINARY = new Binary(new byte[0]);\n    public static final Data EMPTY_BODY = new Data(EMPTY_BINARY);\n \n+   public static final String X_OPT_PREFIX = \"x-opt-\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc4342e4f21c458c82f937839343c93ed0cdc25"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM2MDA2Mg==", "bodyText": "I did delete it yes, I hit the wrong button, was starting a review and instead hit the comment button. I've just finished the review so its sort of back now.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424360062", "createdAt": "2020-05-13T11:18:59Z", "author": {"login": "gemmellr"}, "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "diffHunk": "@@ -178,6 +182,9 @@\n    public static final Binary EMPTY_BINARY = new Binary(new byte[0]);\n    public static final Data EMPTY_BODY = new Data(EMPTY_BINARY);\n \n+   public static final String X_OPT_PREFIX = \"x-opt-\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM1ODA2OQ=="}, "originalCommit": {"oid": "2cc4342e4f21c458c82f937839343c93ed0cdc25"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzAyMDY2OnYy", "diffSide": "RIGHT", "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoxMDo0NVrOGUwyyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyNjo0M1rOGU0RAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDEzNg==", "bodyText": "Though the constant changed to a String, this is still calling toString() on it.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424424136", "createdAt": "2020-05-13T13:10:45Z", "author": {"login": "gemmellr"}, "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "diffHunk": "@@ -285,6 +292,18 @@ public static Charset getCharsetForTextualContent(String contentType) {\n       }\n    }\n \n+   public static String toAnnotationName(String key) {\n+      if (!key.startsWith(X_OPT_PREFIX.toString())) {\n+         if (key.startsWith(AMQ_PROPERTY_PREFIX)) {\n+            return X_OPT_PREFIX.toString().concat(key.substring(AMQ_PROPERTY_PREFIX.length()).replace('_', '-'));\n+         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a3a2a947e0f48e99e35a8dd761559e5f98f3ca"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTAyNw==", "bodyText": "thx", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424481027", "createdAt": "2020-05-13T14:26:43Z", "author": {"login": "clebertsuconic"}, "path": "artemis-protocols/artemis-amqp-protocol/src/main/java/org/apache/activemq/artemis/protocol/amqp/converter/AMQPMessageSupport.java", "diffHunk": "@@ -285,6 +292,18 @@ public static Charset getCharsetForTextualContent(String contentType) {\n       }\n    }\n \n+   public static String toAnnotationName(String key) {\n+      if (!key.startsWith(X_OPT_PREFIX.toString())) {\n+         if (key.startsWith(AMQ_PROPERTY_PREFIX)) {\n+            return X_OPT_PREFIX.toString().concat(key.substring(AMQ_PROPERTY_PREFIX.length()).replace('_', '-'));\n+         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDEzNg=="}, "originalCommit": {"oid": "41a3a2a947e0f48e99e35a8dd761559e5f98f3ca"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzAyNDM2OnYy", "diffSide": "RIGHT", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoxMTo0MVrOGUw1NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyNzowMlrOGU0R_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDc1Nw==", "bodyText": "Can we change it to use an x-opt- prefixed annotation.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424424757", "createdAt": "2020-05-13T13:11:41Z", "author": {"login": "gemmellr"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java", "diffHunk": "@@ -408,7 +408,7 @@ public void testSendFilterAnnotation() throws Exception {\n       sender.close();\n \n       LOG.debug(\"Attempting to read message with receiver\");\n-      AmqpReceiver receiver = session.createReceiver(getQueueName(), \"serialNo=2\");\n+      AmqpReceiver receiver = session.createReceiver(getQueueName(), \"\\\"m.serialNo\\\"=2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41a3a2a947e0f48e99e35a8dd761559e5f98f3ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTI3OA==", "bodyText": "sure.. will be on my next commit", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424481278", "createdAt": "2020-05-13T14:27:02Z", "author": {"login": "clebertsuconic"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpSendReceiveTest.java", "diffHunk": "@@ -408,7 +408,7 @@ public void testSendFilterAnnotation() throws Exception {\n       sender.close();\n \n       LOG.debug(\"Attempting to read message with receiver\");\n-      AmqpReceiver receiver = session.createReceiver(getQueueName(), \"serialNo=2\");\n+      AmqpReceiver receiver = session.createReceiver(getQueueName(), \"\\\"m.serialNo\\\"=2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDc1Nw=="}, "originalCommit": {"oid": "41a3a2a947e0f48e99e35a8dd761559e5f98f3ca"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzAzNTkwOnYy", "diffSide": "RIGHT", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoxNDoyMFrOGUw8bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyNzoxMFrOGU0SXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNjYwNg==", "bodyText": "Seems like this might be unused now that the loop it was in before is gone?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424426606", "createdAt": "2020-05-13T13:14:20Z", "author": {"login": "gemmellr"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();\n+         assertNull(received);\n+\n+\n+         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n+         assertNotNull(expiryView);\n+         Wait.assertEquals(1, expiryView::getMessageCount);\n+\n+         boolean dlqed = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "179dbb516cadc3b8e42eb34c4c516e5ee3e5b10d"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTM3NA==", "bodyText": "thx", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424481374", "createdAt": "2020-05-13T14:27:10Z", "author": {"login": "clebertsuconic"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();\n+         assertNull(received);\n+\n+\n+         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n+         assertNotNull(expiryView);\n+         Wait.assertEquals(1, expiryView::getMessageCount);\n+\n+         boolean dlqed = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNjYwNg=="}, "originalCommit": {"oid": "179dbb516cadc3b8e42eb34c4c516e5ee3e5b10d"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzA1MjEwOnYy", "diffSide": "RIGHT", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoxNzo1OVrOGUxGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyNjowMlrOGU0Ozg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyOTE4Nw==", "bodyText": "This is likely to return null even if the broker somehow sends a message, given it operates local to the test client and so can easily return before anything put in flight after the flow(1) arrives at the broker. Need to either wait on the receive a bit or do something else, to get a proper validation nothing arrives.\nPerhaps just check the count goes to 0 using the proxy already being used just above?", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424429187", "createdAt": "2020-05-13T13:17:59Z", "author": {"login": "gemmellr"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3NzY0Ng==", "bodyText": "It would eventually fail if there's a message.\nI have been using as a rule, if the expected is no delievery, it should asserNull(receiveNoWait());\nThere's already an assertion before on the number of expires.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424477646", "createdAt": "2020-05-13T14:22:30Z", "author": {"login": "clebertsuconic"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyOTE4Nw=="}, "originalCommit": {"oid": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MDQ2Mg==", "bodyText": "I don't need that here... I'm already asserting before.\nI was just explaining why I prefer using receiveNoWait();\nI had some major cleanup on the testsuite weeks ago where I fixed a lot of receive(1000); that was intended to noWait.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424480462", "createdAt": "2020-05-13T14:26:02Z", "author": {"login": "clebertsuconic"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyOTE4Nw=="}, "originalCommit": {"oid": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzEyMzQzOnYy", "diffSide": "RIGHT", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozMzozNlrOGUxzwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyNDo1N1rOGU0LJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDc3MA==", "bodyText": "Nothing wrong with this, but just noting some newer syntactic sugar here (/below) might be nicer:\navAnnotations.forEach((key, value) -> {\n    annotations.put(key.toString(), value);\n});", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424440770", "createdAt": "2020-05-13T13:33:36Z", "author": {"login": "gemmellr"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();\n+         assertNull(received);\n+\n+\n+         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n+         assertNotNull(expiryView);\n+         Wait.assertEquals(1, expiryView::getMessageCount);\n+\n+         boolean dlqed = false;\n+\n+         HashMap<String, Object> annotations = new HashMap<>();\n+\n+         AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"\\\"m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n+         receiverDLQ.flow(1);\n+         received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n+         Assert.assertNotNull(received);\n+         Map<Symbol, Object> avAnnotations = received.getWrappedMessage().getMessageAnnotations().getValue();\n+         for (Symbol an : avAnnotations.keySet()) {\n+            annotations.put(an.toString(), avAnnotations.get(an));\n+         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3OTUyNQ==", "bodyText": "thx :)", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424479525", "createdAt": "2020-05-13T14:24:57Z", "author": {"login": "clebertsuconic"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/DLQAfterExpiredMessageTest.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.activemq.artemis.tests.integration.amqp;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.activemq.artemis.api.core.QueueConfiguration;\n+import org.apache.activemq.artemis.api.core.RoutingType;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.server.ActiveMQServer;\n+import org.apache.activemq.artemis.core.server.Queue;\n+import org.apache.activemq.artemis.core.server.impl.AddressInfo;\n+import org.apache.activemq.artemis.core.settings.impl.AddressFullMessagePolicy;\n+import org.apache.activemq.artemis.core.settings.impl.AddressSettings;\n+import org.apache.activemq.artemis.protocol.amqp.converter.AMQPMessageSupport;\n+import org.apache.activemq.artemis.tests.util.Wait;\n+import org.apache.activemq.transport.amqp.client.AmqpClient;\n+import org.apache.activemq.transport.amqp.client.AmqpConnection;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.activemq.transport.amqp.client.AmqpReceiver;\n+import org.apache.activemq.transport.amqp.client.AmqpSender;\n+import org.apache.activemq.transport.amqp.client.AmqpSession;\n+import org.apache.qpid.proton.amqp.Symbol;\n+import org.jboss.logging.Logger;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * This is testing a double transfer (copy).\n+ * First messages will expire, then DLQ.\n+ * This will validate the data added to the queues.\n+ */\n+public class DLQAfterExpiredMessageTest extends AmqpClientTestSupport {\n+   private static final Logger log = Logger.getLogger(DLQAfterExpiredMessageTest.class);\n+\n+   protected String getExpiryQueue() {\n+      return \"ActiveMQ.Expiry\";\n+   }\n+\n+   @Override\n+   protected void createAddressAndQueues(ActiveMQServer server) throws Exception {\n+      // Default Queue\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getQueueName()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default DLQ\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getDeadLetterAddress()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getDeadLetterAddress()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Expiry\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getExpiryQueue()), RoutingType.ANYCAST));\n+      server.createQueue(new QueueConfiguration(getExpiryQueue()).setRoutingType(RoutingType.ANYCAST));\n+\n+      // Default Topic\n+      server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getTopicName()), RoutingType.MULTICAST));\n+      server.createQueue(new QueueConfiguration(getTopicName()));\n+\n+      // Additional Test Queues\n+      for (int i = 0; i < getPrecreatedQueueSize(); ++i) {\n+         server.addAddressInfo(new AddressInfo(SimpleString.toSimpleString(getQueueName(i)), RoutingType.ANYCAST));\n+         server.createQueue(new QueueConfiguration(getQueueName(i)).setRoutingType(RoutingType.ANYCAST));\n+      }\n+   }\n+\n+   @Override\n+   protected void configureAddressPolicy(ActiveMQServer server) {\n+      // Address configuration\n+      AddressSettings addressSettings = new AddressSettings();\n+\n+      addressSettings.setAddressFullMessagePolicy(AddressFullMessagePolicy.PAGE);\n+      addressSettings.setAutoCreateQueues(isAutoCreateQueues());\n+      addressSettings.setAutoCreateAddresses(isAutoCreateAddresses());\n+      addressSettings.setDeadLetterAddress(SimpleString.toSimpleString(getDeadLetterAddress()));\n+      addressSettings.setExpiryAddress(SimpleString.toSimpleString(getExpiryQueue()));\n+      addressSettings.setMaxDeliveryAttempts(1);\n+      server.getConfiguration().getAddressesSettings().put(\"#\", addressSettings);\n+      server.getConfiguration().getAddressesSettings().put(getExpiryQueue(), addressSettings);\n+   }\n+\n+   @Test\n+   public void testDoubleTransfer() throws Throwable {\n+\n+      AmqpClient client = createAmqpClient();\n+      AmqpConnection connection = addConnection(client.connect());\n+      try {\n+         AmqpSession session = connection.createSession();\n+\n+         AmqpSender sender = session.createSender(getQueueName());\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         AmqpMessage message = new AmqpMessage();\n+         message.setTimeToLive(1);\n+         message.setText(\"Test-Message\");\n+         message.setDurable(true);\n+         message.setApplicationProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+\n+         // Now try and get the message\n+         AmqpReceiver receiver = session.createReceiver(getQueueName());\n+         receiver.flow(1);\n+         AmqpMessage received = receiver.receiveNoWait();\n+         assertNull(received);\n+\n+\n+         final Queue expiryView = getProxyToQueue(getExpiryQueue());\n+         assertNotNull(expiryView);\n+         Wait.assertEquals(1, expiryView::getMessageCount);\n+\n+         boolean dlqed = false;\n+\n+         HashMap<String, Object> annotations = new HashMap<>();\n+\n+         AmqpReceiver receiverDLQ = session.createReceiver(getExpiryQueue(), \"\\\"m.\" + AMQPMessageSupport.HDR_ORIGINAL_ADDRESS_ANNOTATION + \"\\\"='\" + getQueueName() + \"'\");\n+         receiverDLQ.flow(1);\n+         received = receiverDLQ.receive(5, TimeUnit.SECONDS);\n+         Assert.assertNotNull(received);\n+         Map<Symbol, Object> avAnnotations = received.getWrappedMessage().getMessageAnnotations().getValue();\n+         for (Symbol an : avAnnotations.keySet()) {\n+            annotations.put(an.toString(), avAnnotations.get(an));\n+         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0MDc3MA=="}, "originalCommit": {"oid": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzE0NDc5OnYy", "diffSide": "RIGHT", "path": "docs/user-manual/en/amqp.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozODoxOFrOGUyBWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzozODoxOFrOGUyBWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NDI0OQ==", "bodyText": "Port should probably be 5672 (or change to amqps://).", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424444249", "createdAt": "2020-05-13T13:38:18Z", "author": {"login": "gemmellr"}, "path": "docs/user-manual/en/amqp.md", "diffHunk": "@@ -128,6 +128,45 @@ message for later delivery:\n If both annotations are present in the same message then the broker will prefer\n the more specific `x-opt-delivery-time` value.\n \n+## DLQ and Expiry transfer\n+\n+AMQP Messages will be copied before transferred to a DLQ or ExpiryQueue and will receive properties and annotations during this process.\n+\n+The broker also keeps an internal only property (called extra property) that is not exposed to the clients, and those will also be filled during this process.\n+\n+Here is a list of Annotations and Property names AMQP Messages will receive when transferred:\n+\n+|Annotation name| Internal Property Name|Description|\n+|---------------|-----------------------|-----------|\n+|x-opt-ORIG-MESSAGE-ID|_AMQ_ORIG_MESSAGE_ID|The original message ID before the transfer|\n+|x-opt-ACTUAL-EXPIRY|_AMQ_ACTUAL_EXPIRY|When the expiry took place. Milliseconds since epoch times|\n+|x-opt-ORIG-QUEUE|_AMQ_ORIG_QUEUE|The original queue name before the transfer|\n+|x-opt-ORIG-ADDRESS|_AMQ_ORIG_ADDRESS|The original address name before the transfer|\n+\n+## Filtering on Message Annotations\n+\n+It is possible to filter on messaging annotations if you use the prefix \"m.\" before the annotation name.\n+\n+For example if you want to filter messages sent to a specific destination, you could create your filter accordingly to this:\n+\n+```java\n+ConnectionFactory factory = new JmsConnectionFactory(\"amqp://localhost:5671\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MzE1NjUxOnYy", "diffSide": "RIGHT", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpExpiredMessageTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzo0MDo1NVrOGUyJIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoyNDo1MVrOGU0K2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NjI0MQ==", "bodyText": "Stale / c&p comment? There is no second filter here.", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424446241", "createdAt": "2020-05-13T13:40:55Z", "author": {"login": "gemmellr"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpExpiredMessageTest.java", "diffHunk": "@@ -182,6 +200,45 @@ public void testExpiryThroughTTLValidateAnnotation() throws Exception {\n       connection.close();\n    }\n \n+   /** This test is validating a broker feature where the message copy through the DLQ will receive an annotation.\n+    *  It is also testing filter on that annotation. */\n+   @Test(timeout = 60000)\n+   public void testExpiryQpidJMS() throws Exception {\n+      ConnectionFactory factory = CFUtil.createConnectionFactory(\"AMQP\", getBrokerAmqpConnectionURI().toString());\n+      Connection connection = factory.createConnection();\n+      try {\n+         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         javax.jms.Queue queue = session.createQueue(getQueueName());\n+         MessageProducer sender = session.createProducer(queue);\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         sender.setTimeToLive(1);\n+         TextMessage message = session.createTextMessage(\"Test-Message\");\n+         message.setStringProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+         final Queue dlqView = getProxyToQueue(getDeadLetterAddress());\n+         assertNotNull(dlqView);\n+         Wait.assertEquals(1, dlqView::getMessageCount);\n+\n+         connection.start();\n+         javax.jms.Queue queueDLQ = session.createQueue(getDeadLetterAddress());\n+         MessageConsumer receiverDLQ = session.createConsumer(queueDLQ, \"\\\"m.x-opt-ORIG-ADDRESS\\\"='\" + getQueueName() + \"'\");\n+         Message received = receiverDLQ.receive(5000);\n+         Assert.assertNotNull(received);\n+         // close without accepting on purpose, it will issue a redelivery on the second filter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3OTQ1MA==", "bodyText": "thx", "url": "https://github.com/apache/activemq-artemis/pull/3129#discussion_r424479450", "createdAt": "2020-05-13T14:24:51Z", "author": {"login": "clebertsuconic"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/AmqpExpiredMessageTest.java", "diffHunk": "@@ -182,6 +200,45 @@ public void testExpiryThroughTTLValidateAnnotation() throws Exception {\n       connection.close();\n    }\n \n+   /** This test is validating a broker feature where the message copy through the DLQ will receive an annotation.\n+    *  It is also testing filter on that annotation. */\n+   @Test(timeout = 60000)\n+   public void testExpiryQpidJMS() throws Exception {\n+      ConnectionFactory factory = CFUtil.createConnectionFactory(\"AMQP\", getBrokerAmqpConnectionURI().toString());\n+      Connection connection = factory.createConnection();\n+      try {\n+         Session session = connection.createSession(false, Session.AUTO_ACKNOWLEDGE);\n+         javax.jms.Queue queue = session.createQueue(getQueueName());\n+         MessageProducer sender = session.createProducer(queue);\n+\n+         // Get the Queue View early to avoid racing the delivery.\n+         final Queue queueView = getProxyToQueue(getQueueName());\n+         assertNotNull(queueView);\n+\n+         sender.setTimeToLive(1);\n+         TextMessage message = session.createTextMessage(\"Test-Message\");\n+         message.setStringProperty(\"key1\", \"Value1\");\n+         sender.send(message);\n+         sender.close();\n+\n+         Wait.assertEquals(1, queueView::getMessagesExpired);\n+         final Queue dlqView = getProxyToQueue(getDeadLetterAddress());\n+         assertNotNull(dlqView);\n+         Wait.assertEquals(1, dlqView::getMessageCount);\n+\n+         connection.start();\n+         javax.jms.Queue queueDLQ = session.createQueue(getDeadLetterAddress());\n+         MessageConsumer receiverDLQ = session.createConsumer(queueDLQ, \"\\\"m.x-opt-ORIG-ADDRESS\\\"='\" + getQueueName() + \"'\");\n+         Message received = receiverDLQ.receive(5000);\n+         Assert.assertNotNull(received);\n+         // close without accepting on purpose, it will issue a redelivery on the second filter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ0NjI0MQ=="}, "originalCommit": {"oid": "6f12fdf3b9fea5f8b2b79c70f83dac4ed3468e4c"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3957, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}