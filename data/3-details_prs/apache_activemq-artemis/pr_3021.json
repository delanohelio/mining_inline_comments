{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTczMzg0", "number": 3021, "title": "ARTEMIS-2662 Using previously stored encodeSize on page record offset", "bodyText": "There is no guarantee that the encodeSize size is the same in AMQP right after read.\nAs the protocol may add additional bytes right after decoded such as header, extra properties.. etc.", "createdAt": "2020-03-17T01:33:00Z", "url": "https://github.com/apache/activemq-artemis/pull/3021", "merged": true, "mergeCommit": {"oid": "10ed0094ab718b8973c1d0c0e79f8dc477b80e08"}, "closed": true, "closedAt": "2020-03-17T10:20:02Z", "author": {"login": "clebertsuconic"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOYfuqABqjMxMzU0OTUyOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOgAu1gFqTM3NTkwMTA3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "712b957c6401ee6cb4856f2f37b911dc684f6933", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/712b957c6401ee6cb4856f2f37b911dc684f6933", "committedDate": "2020-03-17T01:32:16Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThe encodeSize wouldn't be guaranteed to be equivalent to a value just read from some protcols.\nAs the protocol may add additional bytes right after decoded.\n\nWe may avoid that and make it safe, but at this point I would rather make it independent."}, "afterCommit": {"oid": "655b317919fc3b005ab00db630820132f8bc46be", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/655b317919fc3b005ab00db630820132f8bc46be", "committedDate": "2020-03-17T01:33:09Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThe encodeSize wouldn't be guaranteed to be equivalent to a value just read from some protcols.\nAs the protocol may add additional bytes right after decoded."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "655b317919fc3b005ab00db630820132f8bc46be", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/655b317919fc3b005ab00db630820132f8bc46be", "committedDate": "2020-03-17T01:33:09Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThe encodeSize wouldn't be guaranteed to be equivalent to a value just read from some protcols.\nAs the protocol may add additional bytes right after decoded."}, "afterCommit": {"oid": "aea657573ab46b8097f18ceb5178b088b1ffa16b", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/aea657573ab46b8097f18ceb5178b088b1ffa16b", "committedDate": "2020-03-17T02:10:48Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThe encodeSize wouldn't be guaranteed to be equivalent to a value just read from some protcols.\nAs the protocol may add additional bytes right after decoded."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aea657573ab46b8097f18ceb5178b088b1ffa16b", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/aea657573ab46b8097f18ceb5178b088b1ffa16b", "committedDate": "2020-03-17T02:10:48Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThe encodeSize wouldn't be guaranteed to be equivalent to a value just read from some protcols.\nAs the protocol may add additional bytes right after decoded."}, "afterCommit": {"oid": "15758fec5d9d9eb7c046c37c8843e8f23a096ac6", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/15758fec5d9d9eb7c046c37c8843e8f23a096ac6", "committedDate": "2020-03-17T02:45:22Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThe encodeSize wouldn't be guaranteed to be equivalent to a value just read from some protcols.\nAs the protocol may add additional bytes right after decoded."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15758fec5d9d9eb7c046c37c8843e8f23a096ac6", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/15758fec5d9d9eb7c046c37c8843e8f23a096ac6", "committedDate": "2020-03-17T02:45:22Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThe encodeSize wouldn't be guaranteed to be equivalent to a value just read from some protcols.\nAs the protocol may add additional bytes right after decoded."}, "afterCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "committedDate": "2020-03-17T02:49:56Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThere is no guarantee that the encodeSize size is the same in AMQP right after read.\nAs the protocol may add additional bytes right after decoded such as header, extra properties.. etc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1ODQyNjM4", "url": "https://github.com/apache/activemq-artemis/pull/3021#pullrequestreview-375842638", "createdAt": "2020-03-17T08:57:14Z", "commit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODo1NzoxNFrOF3S--Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODo1NzoxNFrOF3S--Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzAzMw==", "bodyText": "This test class should be cleaned up a bit", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393527033", "createdAt": "2020-03-17T08:57:14Z", "author": {"login": "franz1981"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/paging/AmqpPageReaderTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.activemq.artemis.tests.integration.amqp.paging;\n+\n+import org.apache.activemq.artemis.api.core.ActiveMQBuffer;\n+import org.apache.activemq.artemis.api.core.ActiveMQBuffers;\n+import org.apache.activemq.artemis.api.core.Message;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.paging.cursor.impl.PageReaderTest;\n+import org.apache.activemq.artemis.protocol.amqp.broker.AMQPStandardMessage;\n+import org.apache.activemq.artemis.spi.core.protocol.MessagePersister;\n+import org.apache.activemq.artemis.tests.integration.amqp.AmqpTestSupport;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class AmqpPageReaderTest extends PageReaderTest {\n+\n+   public MessageImpl createProtonMessage(String address) {\n+      AmqpMessage message = new AmqpMessage();\n+      final StringBuilder builder = new StringBuilder();\n+      for (int i = 0; i < 1000; i++) {\n+         builder.append('0');\n+      }\n+      final String data = builder.toString();\n+      message.setText(data);\n+      message.setAddress(address);\n+      message.setDurable(true);\n+\n+      MessageImpl protonMessage = (MessageImpl) message.getWrappedMessage();\n+\n+      return protonMessage;\n+   }\n+\n+   @Override\n+   protected Message createMessage(SimpleString address, int msgId, byte[] content) {\n+      MessageImpl protonMessage = createProtonMessage(address.toString());\n+      AMQPStandardMessage amqpStandardMessage =  AmqpTestSupport.encodeAndDecodeMessage(0, protonMessage, 2 * 1024);\n+      amqpStandardMessage.setMessageID(msgId);\n+\n+      return amqpStandardMessage;\n+   }\n+\n+\n+   @Test\n+   public void testEncodeSize() throws Exception {\n+\n+      Message message = createMessage(SimpleString.toSimpleString(\"Test\"), 1, new byte[10]);\n+\n+      MessagePersister persister = (MessagePersister)message.getPersister();\n+\n+      ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(1024);\n+      persister.encode(buffer, message);\n+\n+      Assert.assertEquals(persister.getEncodeSize(message), buffer.writerIndex());\n+\n+      // the very first byte is the persisterID, we skip that since we are calling the Persister directly\n+      buffer.readerIndex(1);\n+      Message messageRead = persister.decode(buffer, null, null);\n+\n+      // The current persister does not guarantee the same encode size after loading\n+      // and it does not need to\n+      // Assert.assertEquals(persister.getEncodeSize(message), persister.getEncodeSize(messageRead));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1ODYyMDg3", "url": "https://github.com/apache/activemq-artemis/pull/3021#pullrequestreview-375862087", "createdAt": "2020-03-17T09:24:46Z", "commit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToyNDo0NlrOF3T7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToyODo1OVrOF3UFaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0MjQ1OA==", "bodyText": "I would encapsulate this computation as part of PagedMessage or PagePosition , possibly adding a test", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393542458", "createdAt": "2020-03-17T09:24:46Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageSubscriptionImpl.java", "diffHunk": "@@ -1357,7 +1357,7 @@ private PagedReference moveNext() {\n                   break;\n                }\n \n-               int nextFileOffset = message.getPosition().getFileOffset() == -1 ? -1 : message.getPosition().getFileOffset() + message.getPagedMessage().getEncodeSize() + Page.SIZE_RECORD;\n+               int nextFileOffset = message.getPosition().getFileOffset() == -1 ? -1 : message.getPosition().getFileOffset() + message.getPagedMessage().getStoredSize() + Page.SIZE_RECORD;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDAwMg==", "bodyText": "Instead of using this logic, woudn't simpler to correctly initialize storedSize for both protocols: for core == encodeSize, for AMQP, using a different value?", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393544002", "createdAt": "2020-03-17T09:27:15Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "diffHunk": "@@ -59,8 +61,19 @@ public PagedMessageImpl(final Message message, final long[] queueIDs) {\n       this.message = message;\n    }\n \n-   public PagedMessageImpl(StorageManager storageManager) {\n+   public PagedMessageImpl(int storedSize, StorageManager storageManager) {\n       this.storageManager = storageManager;\n+      this.storedSize = storedSize;\n+   }\n+\n+\n+   @Override\n+   public int getStoredSize() {\n+      if (storedSize <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDQ1NA==", "bodyText": "If it cannot change anymore, I would make it final instead", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393544454", "createdAt": "2020-03-17T09:27:59Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "diffHunk": "@@ -47,6 +47,8 @@\n \n    private long transactionID = 0;\n \n+   private int storedSize = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA2NA==", "bodyText": "I don't know why, but my IDEA isn't happy with this test, see\n\nAlthough I can run it and it compiles correctly...:(", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393545064", "createdAt": "2020-03-17T09:28:59Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/test/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageReaderTest.java", "diffHunk": "@@ -58,7 +58,7 @@ public void testPageReadMessage() throws Exception {\n             PagePosition pagePosition = new PagePositionImpl(10, i);\n             pagedMessage = pageReader.getMessage(pagePosition);\n          } else {\n-            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getEncodeSize() + Page.SIZE_RECORD;\n+            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getStoredSize() + Page.SIZE_RECORD;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c801c00e335272e71c8b659efdf4067da644e637", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/c801c00e335272e71c8b659efdf4067da644e637", "committedDate": "2020-03-17T09:55:25Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThere is no guarantee that the encodeSize size is the same in AMQP right after read.\nAs the protocol may add additional bytes right after decoded such as header, extra properties.. etc."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d", "committedDate": "2020-03-17T02:49:56Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThere is no guarantee that the encodeSize size is the same in AMQP right after read.\nAs the protocol may add additional bytes right after decoded such as header, extra properties.. etc."}, "afterCommit": {"oid": "c801c00e335272e71c8b659efdf4067da644e637", "author": {"user": {"login": "clebertsuconic", "name": null}}, "url": "https://github.com/apache/activemq-artemis/commit/c801c00e335272e71c8b659efdf4067da644e637", "committedDate": "2020-03-17T09:55:25Z", "message": "ARTEMIS-2662 Using previously stored encodeSize on page record offset\n\nThere is no guarantee that the encodeSize size is the same in AMQP right after read.\nAs the protocol may add additional bytes right after decoded such as header, extra properties.. etc."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTAxMDc4", "url": "https://github.com/apache/activemq-artemis/pull/3021#pullrequestreview-375901078", "createdAt": "2020-03-17T10:18:47Z", "commit": {"oid": "c801c00e335272e71c8b659efdf4067da644e637"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1631, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}