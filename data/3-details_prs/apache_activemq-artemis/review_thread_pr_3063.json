{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTMxOTgx", "number": 3063, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNzoxMjoxNFrODu5dyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODozMTozOFrODvBZ6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTAyNjAyOnYy", "diffSide": "RIGHT", "path": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/client/impl/ClientSessionImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNzoxMjoxNFrOGBBv1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMjo0NDo1NFrOGBGMNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczMDM5MA==", "bodyText": "I'm wondering, do we still need all these overloads like createSharedQueue and createTemporaryQueue. Shouldn't the intent be expressed by the state of QueueConfiguration object itself? As the client of the api, I wouldn't expect that the configuration I am passing will be mutated.", "url": "https://github.com/apache/activemq-artemis/pull/3063#discussion_r403730390", "createdAt": "2020-04-05T17:12:14Z", "author": {"login": "Havret"}, "path": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/client/impl/ClientSessionImpl.java", "diffHunk": "@@ -298,6 +299,28 @@ public void createAddress(final SimpleString address, RoutingType routingType, b\n       createAddress(address, EnumSet.of(routingType), autoCreated);\n    }\n \n+   @Override\n+   public void createQueue(QueueConfiguration queueConfiguration) throws ActiveMQException {\n+      internalCreateQueue(queueConfiguration);\n+   }\n+\n+   @Override\n+   public void createSharedQueue(QueueConfiguration queueConfiguration) throws ActiveMQException {\n+      checkClosed();\n+\n+      startCall();\n+      try {\n+         sessionContext.createSharedQueue(queueConfiguration);\n+      } finally {\n+         endCall();\n+      }\n+   }\n+\n+   @Override\n+   public void createTemporaryQueue(QueueConfiguration queueConfiguration) throws ActiveMQException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40bab72d61b1c5972da0c356edb2f21de1b87ad6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczMzgxOQ==", "bodyText": "I would agree, essentially a shared queue or temporary queue is just all attributes of a queue. As such having a more simplified single createQueue method will be cleaner.", "url": "https://github.com/apache/activemq-artemis/pull/3063#discussion_r403733819", "createdAt": "2020-04-05T17:40:21Z", "author": {"login": "michaelandrepearce"}, "path": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/client/impl/ClientSessionImpl.java", "diffHunk": "@@ -298,6 +299,28 @@ public void createAddress(final SimpleString address, RoutingType routingType, b\n       createAddress(address, EnumSet.of(routingType), autoCreated);\n    }\n \n+   @Override\n+   public void createQueue(QueueConfiguration queueConfiguration) throws ActiveMQException {\n+      internalCreateQueue(queueConfiguration);\n+   }\n+\n+   @Override\n+   public void createSharedQueue(QueueConfiguration queueConfiguration) throws ActiveMQException {\n+      checkClosed();\n+\n+      startCall();\n+      try {\n+         sessionContext.createSharedQueue(queueConfiguration);\n+      } finally {\n+         endCall();\n+      }\n+   }\n+\n+   @Override\n+   public void createTemporaryQueue(QueueConfiguration queueConfiguration) throws ActiveMQException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczMDM5MA=="}, "originalCommit": {"oid": "40bab72d61b1c5972da0c356edb2f21de1b87ad6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgwMzE4OQ==", "bodyText": "I'm in favor of that. I'll take those out to simplify it even further.", "url": "https://github.com/apache/activemq-artemis/pull/3063#discussion_r403803189", "createdAt": "2020-04-06T02:44:54Z", "author": {"login": "jbertram"}, "path": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/client/impl/ClientSessionImpl.java", "diffHunk": "@@ -298,6 +299,28 @@ public void createAddress(final SimpleString address, RoutingType routingType, b\n       createAddress(address, EnumSet.of(routingType), autoCreated);\n    }\n \n+   @Override\n+   public void createQueue(QueueConfiguration queueConfiguration) throws ActiveMQException {\n+      internalCreateQueue(queueConfiguration);\n+   }\n+\n+   @Override\n+   public void createSharedQueue(QueueConfiguration queueConfiguration) throws ActiveMQException {\n+      checkClosed();\n+\n+      startCall();\n+      try {\n+         sessionContext.createSharedQueue(queueConfiguration);\n+      } finally {\n+         endCall();\n+      }\n+   }\n+\n+   @Override\n+   public void createTemporaryQueue(QueueConfiguration queueConfiguration) throws ActiveMQException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczMDM5MA=="}, "originalCommit": {"oid": "40bab72d61b1c5972da0c356edb2f21de1b87ad6"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjMyNTI0OnYy", "diffSide": "RIGHT", "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/protocol/core/ServerSessionPacketHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODozMToxM1rOGBNDsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo1MTowNFrOGBnZig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNTY5Ng==", "bodyText": "I would encapsulate this logic in a separate method on a separate class to make it more readeable an d shorter ie translation from request to QueueConfiguration", "url": "https://github.com/apache/activemq-artemis/pull/3063#discussion_r403915696", "createdAt": "2020-04-06T08:31:13Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/protocol/core/ServerSessionPacketHandler.java", "diffHunk": "@@ -357,9 +363,29 @@ private void slowPacketHandler(final Packet packet) {\n                case CREATE_QUEUE_V2: {\n                   CreateQueueMessage_V2 request = (CreateQueueMessage_V2) packet;\n                   requiresResponse = request.isRequiresResponse();\n-                  session.createQueue(request.getAddress(), request.getQueueName(), request.getRoutingType(), request.getFilterString(), request.isTemporary(), request.isDurable(), request.getMaxConsumers(), request.isPurgeOnNoConsumers(),\n-                                      request.isExclusive(), request.isGroupRebalance(), request.getGroupBuckets(), request.getGroupFirstKey(), request.isLastValue(), request.getLastValueKey(), request.isNonDestructive(), request.getConsumersBeforeDispatch(), request.getDelayBeforeDispatch(),\n-                                      request.isAutoDelete(), request.getAutoDeleteDelay(), request.getAutoDeleteMessageCount(), request.isAutoCreated(), request.getRingSize());\n+                  session.createQueue(new QueueConfiguration(request.getQueueName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40bab72d61b1c5972da0c356edb2f21de1b87ad6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NzI3NA==", "bodyText": "Will do.", "url": "https://github.com/apache/activemq-artemis/pull/3063#discussion_r404347274", "createdAt": "2020-04-06T19:51:04Z", "author": {"login": "jbertram"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/protocol/core/ServerSessionPacketHandler.java", "diffHunk": "@@ -357,9 +363,29 @@ private void slowPacketHandler(final Packet packet) {\n                case CREATE_QUEUE_V2: {\n                   CreateQueueMessage_V2 request = (CreateQueueMessage_V2) packet;\n                   requiresResponse = request.isRequiresResponse();\n-                  session.createQueue(request.getAddress(), request.getQueueName(), request.getRoutingType(), request.getFilterString(), request.isTemporary(), request.isDurable(), request.getMaxConsumers(), request.isPurgeOnNoConsumers(),\n-                                      request.isExclusive(), request.isGroupRebalance(), request.getGroupBuckets(), request.getGroupFirstKey(), request.isLastValue(), request.getLastValueKey(), request.isNonDestructive(), request.getConsumersBeforeDispatch(), request.getDelayBeforeDispatch(),\n-                                      request.isAutoDelete(), request.getAutoDeleteDelay(), request.getAutoDeleteMessageCount(), request.isAutoCreated(), request.getRingSize());\n+                  session.createQueue(new QueueConfiguration(request.getQueueName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNTY5Ng=="}, "originalCommit": {"oid": "40bab72d61b1c5972da0c356edb2f21de1b87ad6"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjMyNjgwOnYy", "diffSide": "RIGHT", "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/protocol/core/ServerSessionPacketHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODozMTozOFrOGBNEoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOTo1MToxMlrOGBnZwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNTkzNg==", "bodyText": "I would encapsulate this logic in a separate method on a separate class to make it more readeable an d shorter ie translation from request to QueueConfiguration", "url": "https://github.com/apache/activemq-artemis/pull/3063#discussion_r403915936", "createdAt": "2020-04-06T08:31:38Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/protocol/core/ServerSessionPacketHandler.java", "diffHunk": "@@ -382,9 +411,25 @@ private void slowPacketHandler(final Packet packet) {\n                   requiresResponse = request.isRequiresResponse();\n                   QueueQueryResult result = session.executeQueueQuery(request.getQueueName());\n                   if (!(result.isExists() && Objects.equals(result.getAddress(), request.getAddress()) && Objects.equals(result.getFilterString(), request.getFilterString()))) {\n-                     session.createSharedQueue(request.getAddress(), request.getQueueName(), request.getRoutingType(), request.getFilterString(), request.isDurable(), request.getMaxConsumers(), request.isPurgeOnNoConsumers(),\n-                                               request.isExclusive(), request.isGroupRebalance(), request.getGroupBuckets(), request.getGroupFirstKey(), request.isLastValue(), request.getLastValueKey(), request.isNonDestructive(), request.getConsumersBeforeDispatch(), request.getDelayBeforeDispatch(),\n-                                               request.isAutoDelete(), request.getAutoDeleteDelay(), request.getAutoDeleteMessageCount());\n+                     session.createSharedQueue(new QueueConfiguration(request.getQueueName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40bab72d61b1c5972da0c356edb2f21de1b87ad6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM0NzMzMA==", "bodyText": "Will do.", "url": "https://github.com/apache/activemq-artemis/pull/3063#discussion_r404347330", "createdAt": "2020-04-06T19:51:12Z", "author": {"login": "jbertram"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/protocol/core/ServerSessionPacketHandler.java", "diffHunk": "@@ -382,9 +411,25 @@ private void slowPacketHandler(final Packet packet) {\n                   requiresResponse = request.isRequiresResponse();\n                   QueueQueryResult result = session.executeQueueQuery(request.getQueueName());\n                   if (!(result.isExists() && Objects.equals(result.getAddress(), request.getAddress()) && Objects.equals(result.getFilterString(), request.getFilterString()))) {\n-                     session.createSharedQueue(request.getAddress(), request.getQueueName(), request.getRoutingType(), request.getFilterString(), request.isDurable(), request.getMaxConsumers(), request.isPurgeOnNoConsumers(),\n-                                               request.isExclusive(), request.isGroupRebalance(), request.getGroupBuckets(), request.getGroupFirstKey(), request.isLastValue(), request.getLastValueKey(), request.isNonDestructive(), request.getConsumersBeforeDispatch(), request.getDelayBeforeDispatch(),\n-                                               request.isAutoDelete(), request.getAutoDeleteDelay(), request.getAutoDeleteMessageCount());\n+                     session.createSharedQueue(new QueueConfiguration(request.getQueueName())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkxNTkzNg=="}, "originalCommit": {"oid": "40bab72d61b1c5972da0c356edb2f21de1b87ad6"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3970, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}