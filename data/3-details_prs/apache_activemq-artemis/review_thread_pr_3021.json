{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTczMzg0", "number": 3021, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODo1NzoxNFrODooc-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToyODo1OVrODopIKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTMyNDA5OnYy", "diffSide": "RIGHT", "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/paging/AmqpPageReaderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODo1NzoxNFrOF3S--Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTo0NDo1OVrOF3UpZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzAzMw==", "bodyText": "This test class should be cleaned up a bit", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393527033", "createdAt": "2020-03-17T08:57:14Z", "author": {"login": "franz1981"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/paging/AmqpPageReaderTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.activemq.artemis.tests.integration.amqp.paging;\n+\n+import org.apache.activemq.artemis.api.core.ActiveMQBuffer;\n+import org.apache.activemq.artemis.api.core.ActiveMQBuffers;\n+import org.apache.activemq.artemis.api.core.Message;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.paging.cursor.impl.PageReaderTest;\n+import org.apache.activemq.artemis.protocol.amqp.broker.AMQPStandardMessage;\n+import org.apache.activemq.artemis.spi.core.protocol.MessagePersister;\n+import org.apache.activemq.artemis.tests.integration.amqp.AmqpTestSupport;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class AmqpPageReaderTest extends PageReaderTest {\n+\n+   public MessageImpl createProtonMessage(String address) {\n+      AmqpMessage message = new AmqpMessage();\n+      final StringBuilder builder = new StringBuilder();\n+      for (int i = 0; i < 1000; i++) {\n+         builder.append('0');\n+      }\n+      final String data = builder.toString();\n+      message.setText(data);\n+      message.setAddress(address);\n+      message.setDurable(true);\n+\n+      MessageImpl protonMessage = (MessageImpl) message.getWrappedMessage();\n+\n+      return protonMessage;\n+   }\n+\n+   @Override\n+   protected Message createMessage(SimpleString address, int msgId, byte[] content) {\n+      MessageImpl protonMessage = createProtonMessage(address.toString());\n+      AMQPStandardMessage amqpStandardMessage =  AmqpTestSupport.encodeAndDecodeMessage(0, protonMessage, 2 * 1024);\n+      amqpStandardMessage.setMessageID(msgId);\n+\n+      return amqpStandardMessage;\n+   }\n+\n+\n+   @Test\n+   public void testEncodeSize() throws Exception {\n+\n+      Message message = createMessage(SimpleString.toSimpleString(\"Test\"), 1, new byte[10]);\n+\n+      MessagePersister persister = (MessagePersister)message.getPersister();\n+\n+      ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(1024);\n+      persister.encode(buffer, message);\n+\n+      Assert.assertEquals(persister.getEncodeSize(message), buffer.writerIndex());\n+\n+      // the very first byte is the persisterID, we skip that since we are calling the Persister directly\n+      buffer.readerIndex(1);\n+      Message messageRead = persister.decode(buffer, null, null);\n+\n+      // The current persister does not guarantee the same encode size after loading\n+      // and it does not need to\n+      // Assert.assertEquals(persister.getEncodeSize(message), persister.getEncodeSize(messageRead));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NDI3OQ==", "bodyText": "I intended to keep it commented out, as it would fail if commented out.. nothing to be cleaned.", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393554279", "createdAt": "2020-03-17T09:44:59Z", "author": {"login": "clebertsuconic"}, "path": "tests/integration-tests/src/test/java/org/apache/activemq/artemis/tests/integration/amqp/paging/AmqpPageReaderTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.activemq.artemis.tests.integration.amqp.paging;\n+\n+import org.apache.activemq.artemis.api.core.ActiveMQBuffer;\n+import org.apache.activemq.artemis.api.core.ActiveMQBuffers;\n+import org.apache.activemq.artemis.api.core.Message;\n+import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.core.paging.cursor.impl.PageReaderTest;\n+import org.apache.activemq.artemis.protocol.amqp.broker.AMQPStandardMessage;\n+import org.apache.activemq.artemis.spi.core.protocol.MessagePersister;\n+import org.apache.activemq.artemis.tests.integration.amqp.AmqpTestSupport;\n+import org.apache.activemq.transport.amqp.client.AmqpMessage;\n+import org.apache.qpid.proton.message.impl.MessageImpl;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class AmqpPageReaderTest extends PageReaderTest {\n+\n+   public MessageImpl createProtonMessage(String address) {\n+      AmqpMessage message = new AmqpMessage();\n+      final StringBuilder builder = new StringBuilder();\n+      for (int i = 0; i < 1000; i++) {\n+         builder.append('0');\n+      }\n+      final String data = builder.toString();\n+      message.setText(data);\n+      message.setAddress(address);\n+      message.setDurable(true);\n+\n+      MessageImpl protonMessage = (MessageImpl) message.getWrappedMessage();\n+\n+      return protonMessage;\n+   }\n+\n+   @Override\n+   protected Message createMessage(SimpleString address, int msgId, byte[] content) {\n+      MessageImpl protonMessage = createProtonMessage(address.toString());\n+      AMQPStandardMessage amqpStandardMessage =  AmqpTestSupport.encodeAndDecodeMessage(0, protonMessage, 2 * 1024);\n+      amqpStandardMessage.setMessageID(msgId);\n+\n+      return amqpStandardMessage;\n+   }\n+\n+\n+   @Test\n+   public void testEncodeSize() throws Exception {\n+\n+      Message message = createMessage(SimpleString.toSimpleString(\"Test\"), 1, new byte[10]);\n+\n+      MessagePersister persister = (MessagePersister)message.getPersister();\n+\n+      ActiveMQBuffer buffer = ActiveMQBuffers.dynamicBuffer(1024);\n+      persister.encode(buffer, message);\n+\n+      Assert.assertEquals(persister.getEncodeSize(message), buffer.writerIndex());\n+\n+      // the very first byte is the persisterID, we skip that since we are calling the Persister directly\n+      buffer.readerIndex(1);\n+      Message messageRead = persister.decode(buffer, null, null);\n+\n+      // The current persister does not guarantee the same encode size after loading\n+      // and it does not need to\n+      // Assert.assertEquals(persister.getEncodeSize(message), persister.getEncodeSize(messageRead));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyNzAzMw=="}, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTQxODQ3OnYy", "diffSide": "RIGHT", "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageSubscriptionImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToyNDo0NlrOF3T7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTo0OToxOFrOF3Uzxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0MjQ1OA==", "bodyText": "I would encapsulate this computation as part of PagedMessage or PagePosition , possibly adding a test", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393542458", "createdAt": "2020-03-17T09:24:46Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageSubscriptionImpl.java", "diffHunk": "@@ -1357,7 +1357,7 @@ private PagedReference moveNext() {\n                   break;\n                }\n \n-               int nextFileOffset = message.getPosition().getFileOffset() == -1 ? -1 : message.getPosition().getFileOffset() + message.getPagedMessage().getEncodeSize() + Page.SIZE_RECORD;\n+               int nextFileOffset = message.getPosition().getFileOffset() == -1 ? -1 : message.getPosition().getFileOffset() + message.getPagedMessage().getStoredSize() + Page.SIZE_RECORD;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NjkzNA==", "bodyText": "I agree, and I raised that with you. but this is not part of my change here though. this could be a different PR.", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393556934", "createdAt": "2020-03-17T09:49:18Z", "author": {"login": "clebertsuconic"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageSubscriptionImpl.java", "diffHunk": "@@ -1357,7 +1357,7 @@ private PagedReference moveNext() {\n                   break;\n                }\n \n-               int nextFileOffset = message.getPosition().getFileOffset() == -1 ? -1 : message.getPosition().getFileOffset() + message.getPagedMessage().getEncodeSize() + Page.SIZE_RECORD;\n+               int nextFileOffset = message.getPosition().getFileOffset() == -1 ? -1 : message.getPosition().getFileOffset() + message.getPagedMessage().getStoredSize() + Page.SIZE_RECORD;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0MjQ1OA=="}, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTQyODEwOnYy", "diffSide": "RIGHT", "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToyNzoxNVrOF3UBQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowNDo1NlrOF3VX4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDAwMg==", "bodyText": "Instead of using this logic, woudn't simpler to correctly initialize storedSize for both protocols: for core == encodeSize, for AMQP, using a different value?", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393544002", "createdAt": "2020-03-17T09:27:15Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "diffHunk": "@@ -59,8 +61,19 @@ public PagedMessageImpl(final Message message, final long[] queueIDs) {\n       this.message = message;\n    }\n \n-   public PagedMessageImpl(StorageManager storageManager) {\n+   public PagedMessageImpl(int storedSize, StorageManager storageManager) {\n       this.storageManager = storageManager;\n+      this.storedSize = storedSize;\n+   }\n+\n+\n+   @Override\n+   public int getStoredSize() {\n+      if (storedSize <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NzE4Mg==", "bodyText": "I am not sure it's safe to do that in case the encodeSize changed between the contruction and when getStoredSize is used.\nWe can change this If you're sure it's safe. I wasn't bold enough.", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393557182", "createdAt": "2020-03-17T09:49:42Z", "author": {"login": "clebertsuconic"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "diffHunk": "@@ -59,8 +61,19 @@ public PagedMessageImpl(final Message message, final long[] queueIDs) {\n       this.message = message;\n    }\n \n-   public PagedMessageImpl(StorageManager storageManager) {\n+   public PagedMessageImpl(int storedSize, StorageManager storageManager) {\n       this.storageManager = storageManager;\n+      this.storedSize = storedSize;\n+   }\n+\n+\n+   @Override\n+   public int getStoredSize() {\n+      if (storedSize <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDAwMg=="}, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2NjE3OQ==", "bodyText": "We can change this If you're sure it's safe. I wasn't bold enough.\n\nAgree, I'm not sure of it as well (let me check around on the code)", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393566179", "createdAt": "2020-03-17T10:04:56Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "diffHunk": "@@ -59,8 +61,19 @@ public PagedMessageImpl(final Message message, final long[] queueIDs) {\n       this.message = message;\n    }\n \n-   public PagedMessageImpl(StorageManager storageManager) {\n+   public PagedMessageImpl(int storedSize, StorageManager storageManager) {\n       this.storageManager = storageManager;\n+      this.storedSize = storedSize;\n+   }\n+\n+\n+   @Override\n+   public int getStoredSize() {\n+      if (storedSize <= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDAwMg=="}, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTQzMDg5OnYy", "diffSide": "RIGHT", "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToyNzo1OVrOF3UDBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTo0Nzo1NVrOF3UwYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDQ1NA==", "bodyText": "If it cannot change anymore, I would make it final instead", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393544454", "createdAt": "2020-03-17T09:27:59Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "diffHunk": "@@ -47,6 +47,8 @@\n \n    private long transactionID = 0;\n \n+   private int storedSize = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NjA2NA==", "bodyText": "I didn't think it was final.. I thought I was going to have a setter when I wrote this.. changing it.", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393556064", "createdAt": "2020-03-17T09:47:55Z", "author": {"login": "clebertsuconic"}, "path": "artemis-server/src/main/java/org/apache/activemq/artemis/core/paging/impl/PagedMessageImpl.java", "diffHunk": "@@ -47,6 +47,8 @@\n \n    private long transactionID = 0;\n \n+   private int storedSize = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NDQ1NA=="}, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTQzNDY3OnYy", "diffSide": "RIGHT", "path": "artemis-server/src/test/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageReaderTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToyODo1OVrOF3UFaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDowNjoxNFrOF3Vaqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA2NA==", "bodyText": "I don't know why, but my IDEA isn't happy with this test, see\n\nAlthough I can run it and it compiles correctly...:(", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393545064", "createdAt": "2020-03-17T09:28:59Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/test/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageReaderTest.java", "diffHunk": "@@ -58,7 +58,7 @@ public void testPageReadMessage() throws Exception {\n             PagePosition pagePosition = new PagePositionImpl(10, i);\n             pagedMessage = pageReader.getMessage(pagePosition);\n          } else {\n-            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getEncodeSize() + Page.SIZE_RECORD;\n+            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getStoredSize() + Page.SIZE_RECORD;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU1NzUyNQ==", "bodyText": "PageReaderTest is from a different testsuite. IDEA may not like it.", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393557525", "createdAt": "2020-03-17T09:50:15Z", "author": {"login": "clebertsuconic"}, "path": "artemis-server/src/test/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageReaderTest.java", "diffHunk": "@@ -58,7 +58,7 @@ public void testPageReadMessage() throws Exception {\n             PagePosition pagePosition = new PagePositionImpl(10, i);\n             pagedMessage = pageReader.getMessage(pagePosition);\n          } else {\n-            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getEncodeSize() + Page.SIZE_RECORD;\n+            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getStoredSize() + Page.SIZE_RECORD;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA2NA=="}, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2Mjc5OQ==", "bodyText": "It's not that simple to move this test. it uses a lot of package private methods.. moving would need to make them public or a bigger refactoring.\nI had a version where I did this at some point. I would go for the simpler version now in case we ever need to cherry-pick to a point release.", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393562799", "createdAt": "2020-03-17T09:59:10Z", "author": {"login": "clebertsuconic"}, "path": "artemis-server/src/test/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageReaderTest.java", "diffHunk": "@@ -58,7 +58,7 @@ public void testPageReadMessage() throws Exception {\n             PagePosition pagePosition = new PagePositionImpl(10, i);\n             pagedMessage = pageReader.getMessage(pagePosition);\n          } else {\n-            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getEncodeSize() + Page.SIZE_RECORD;\n+            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getStoredSize() + Page.SIZE_RECORD;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA2NA=="}, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU2Njg5MA==", "bodyText": "PageReaderTest is from a different testsuite. IDEA may not like it.\n\nWhat's strange is that I rememeber while doing it the same (basically same code) IDEA wasn't complaining that much, but is really a minor eh, can be ignored", "url": "https://github.com/apache/activemq-artemis/pull/3021#discussion_r393566890", "createdAt": "2020-03-17T10:06:14Z", "author": {"login": "franz1981"}, "path": "artemis-server/src/test/java/org/apache/activemq/artemis/core/paging/cursor/impl/PageReaderTest.java", "diffHunk": "@@ -58,7 +58,7 @@ public void testPageReadMessage() throws Exception {\n             PagePosition pagePosition = new PagePositionImpl(10, i);\n             pagedMessage = pageReader.getMessage(pagePosition);\n          } else {\n-            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getEncodeSize() + Page.SIZE_RECORD;\n+            int nextFileOffset = pagedMessage == null ? -1 : offsets[i - 1] + pagedMessage.getStoredSize() + Page.SIZE_RECORD;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0NTA2NA=="}, "originalCommit": {"oid": "6a60ed92fb08acdc012e5e0b86a2a05ac1237f6d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3964, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}