{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMjcyNzMw", "number": 312, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMToyMjozMVrOFH_OKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMTo0NDoxOFrOFIW5iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTIwMTY5OnYy", "diffSide": "RIGHT", "path": "governance/src/main/java/com/huaweicloud/governance/handler/AbstractGovHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMToyMjozMVrOIJrGZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxMzo1MDoyN1rOIJ70aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxNDI0NA==", "bodyText": "map clear\u4f1a\u5bfc\u81f4\u6574\u4e2amap\u91cd\u5efa\uff0c\u5efa\u8bae\u6839\u636ekey\u7528 map remove", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/312#discussion_r547014244", "createdAt": "2020-12-22T01:22:31Z", "author": {"login": "GuoYL123"}, "path": "governance/src/main/java/com/huaweicloud/governance/handler/AbstractGovHandler.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.huaweicloud.governance.handler;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+import com.google.common.eventbus.Subscribe;\n+import com.huaweicloud.governance.event.ConfigurationChangedEvent;\n+import com.huaweicloud.governance.event.EventManager;\n+\n+public abstract class AbstractGovHandler<PROCESSOR> implements GovHandler {\n+  private Map<String, PROCESSOR> map = new ConcurrentHashMap<>();\n+\n+  protected AbstractGovHandler() {\n+    EventManager.register(this);\n+  }\n+\n+  protected <R> PROCESSOR getActuator(String key, R policy, Function<R, PROCESSOR> func) {\n+    PROCESSOR processor = map.get(key);\n+    if (processor == null) {\n+      processor = func.apply(policy);\n+      map.put(key, processor);\n+    }\n+    return processor;\n+  }\n+\n+  @Subscribe\n+  public void onDynamicConfigurationListener(ConfigurationChangedEvent event) {\n+    map.clear();\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c82364eef38e7172658622c2222c1ebb9502a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI4ODE2OA==", "bodyText": "fixed in [#311]\u57fa\u4e8e\u6d41\u91cf\u7279\u5f81\u6807\u8bb0\u7684\u6cbb\u7406\u529f\u80fd\uff1a\u914d\u7f6e\u53d8\u66f4\u903b\u8f91\u5904\u7406", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/312#discussion_r547288168", "createdAt": "2020-12-22T13:50:27Z", "author": {"login": "liubao68"}, "path": "governance/src/main/java/com/huaweicloud/governance/handler/AbstractGovHandler.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package com.huaweicloud.governance.handler;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+import com.google.common.eventbus.Subscribe;\n+import com.huaweicloud.governance.event.ConfigurationChangedEvent;\n+import com.huaweicloud.governance.event.EventManager;\n+\n+public abstract class AbstractGovHandler<PROCESSOR> implements GovHandler {\n+  private Map<String, PROCESSOR> map = new ConcurrentHashMap<>();\n+\n+  protected AbstractGovHandler() {\n+    EventManager.register(this);\n+  }\n+\n+  protected <R> PROCESSOR getActuator(String key, R policy, Function<R, PROCESSOR> func) {\n+    PROCESSOR processor = map.get(key);\n+    if (processor == null) {\n+      processor = func.apply(policy);\n+      map.put(key, processor);\n+    }\n+    return processor;\n+  }\n+\n+  @Subscribe\n+  public void onDynamicConfigurationListener(ConfigurationChangedEvent event) {\n+    map.clear();\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAxNDI0NA=="}, "originalCommit": {"oid": "ca6c82364eef38e7172658622c2222c1ebb9502a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzA3OTI3OnYy", "diffSide": "RIGHT", "path": "governance/src/main/java/com/huaweicloud/governance/util/MD5Util.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMTo0MzowOFrOIKOe4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzowMzoxN1rOIKPrmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5Mzk1Mw==", "bodyText": "\u8fd9\u4e2a\u7c7b\u5df2\u7ecf\u6ca1\u7528\u4e86", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/312#discussion_r547593953", "createdAt": "2020-12-23T01:43:08Z", "author": {"login": "GuoYL123"}, "path": "governance/src/main/java/com/huaweicloud/governance/util/MD5Util.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.huaweicloud.governance.util;\n+\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MD5Util {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(MD5Util.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "673d0246e935ace0189eed25e77a1da6278a4ca4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMzU5Mg==", "bodyText": "OK\u3002\u5220\u9664\u3002", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/312#discussion_r547613592", "createdAt": "2020-12-23T03:03:17Z", "author": {"login": "liubao68"}, "path": "governance/src/main/java/com/huaweicloud/governance/util/MD5Util.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.huaweicloud.governance.util;\n+\n+import java.math.BigInteger;\n+import java.nio.charset.StandardCharsets;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MD5Util {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(MD5Util.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5Mzk1Mw=="}, "originalCommit": {"oid": "673d0246e935ace0189eed25e77a1da6278a4ca4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzA4MTA1OnYy", "diffSide": "RIGHT", "path": "governance/src/main/java/com/huaweicloud/governance/properties/GovProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMTo0NDoxOFrOIKOf3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwMzowMjo1N1rOIKPrSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5NDIwNw==", "bodyText": "\u4f20\u4e00\u4e2aSet\u4f5c\u4e3a\u53c2\u6570\u4e0d\u5982\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2aSet", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/312#discussion_r547594207", "createdAt": "2020-12-23T01:44:18Z", "author": {"login": "GuoYL123"}, "path": "governance/src/main/java/com/huaweicloud/governance/properties/GovProperties.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.huaweicloud.governance.properties;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.env.CompositePropertySource;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.EnumerablePropertySource;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.util.StringUtils;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+import org.yaml.snakeyaml.error.YAMLException;\n+import org.yaml.snakeyaml.representer.Representer;\n+\n+import com.google.common.eventbus.Subscribe;\n+import com.huaweicloud.governance.event.ConfigurationChangedEvent;\n+import com.huaweicloud.governance.event.EventManager;\n+\n+public abstract class GovProperties<T> implements InitializingBean {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(GovProperties.class);\n+\n+  private final Representer representer = new Representer();\n+\n+  private final String configKey;\n+\n+  @Autowired\n+  protected Environment environment;\n+\n+  protected Map<String, T> parsedEntity;\n+\n+  protected Class<T> entityClass;\n+\n+  protected GovProperties(String key) {\n+    configKey = key;\n+    representer.getPropertyUtils().setSkipMissingProperties(true);\n+    EventManager.register(this);\n+    entityClass = getEntityClass();\n+  }\n+\n+  @Override\n+  public void afterPropertiesSet() {\n+    parsedEntity = parseEntity(readPropertiesFromPrefix());\n+  }\n+\n+  @Subscribe\n+  public void onConfigurationChangedEvent(ConfigurationChangedEvent event) {\n+    for (String key : event.getChangedConfigurations()) {\n+      if (key.startsWith(configKey + \".\")) {\n+        // \u5220\u9664\u7684\u60c5\u51b5\uff0c \u4ece\u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6\u914d\u7f6e\u3002 \u9700\u8981\u4fdd\u8bc1 environment \u5df2\u7ecf\u5237\u65b0\u914d\u7f6e\u503c\u3002\n+        T entityItem = parseEntityItem(environment.getProperty(key));\n+        String mapKey = key.substring((configKey + \".\").length());\n+        if (entityItem == null) {\n+          parsedEntity.remove(mapKey);\n+        } else {\n+          parsedEntity.put(mapKey, entityItem);\n+        }\n+      }\n+    }\n+  }\n+\n+  private Map<String, String> readPropertiesFromPrefix() {\n+    Set<String> allKeys = getAllKeys(environment);\n+    Map<String, String> result = new HashMap<>();\n+    allKeys.forEach(key -> {\n+      if (key.startsWith(configKey + \".\")) {\n+        result.put(key.substring(configKey.length() + 1), environment.getProperty(key));\n+      }\n+    });\n+    return result;\n+  }\n+\n+  private Set<String> getAllKeys(Environment environment) {\n+    Set<String> allKeys = new HashSet<>();\n+\n+    if (!(environment instanceof ConfigurableEnvironment)) {\n+      LOGGER.warn(\"None ConfigurableEnvironment is ignored in {}\", this.getClass().getName());\n+      return allKeys;\n+    }\n+\n+    ConfigurableEnvironment configurableEnvironment = (ConfigurableEnvironment) environment;\n+\n+    for (PropertySource<?> propertySource : configurableEnvironment.getPropertySources()) {\n+      getProperties(propertySource, allKeys);\n+    }\n+    return allKeys;\n+  }\n+\n+  private void getProperties(PropertySource<?> propertySource,\n+      Set<String> allKeys) {\n+    if (propertySource instanceof CompositePropertySource) {\n+      // recursively get EnumerablePropertySource", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "673d0246e935ace0189eed25e77a1da6278a4ca4"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzYxMzUxNQ==", "bodyText": "\u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u8c03\u7528\u7684\u903b\u8f91\uff0c\u4f7f\u7528\u4f20\u53c2\u7684\u65b9\u5f0f\u6bd4\u8f83\u7b80\u6d01\u3002", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/312#discussion_r547613515", "createdAt": "2020-12-23T03:02:57Z", "author": {"login": "liubao68"}, "path": "governance/src/main/java/com/huaweicloud/governance/properties/GovProperties.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.huaweicloud.governance.properties;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.env.CompositePropertySource;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.core.env.EnumerablePropertySource;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.PropertySource;\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.util.StringUtils;\n+import org.yaml.snakeyaml.TypeDescription;\n+import org.yaml.snakeyaml.Yaml;\n+import org.yaml.snakeyaml.constructor.Constructor;\n+import org.yaml.snakeyaml.error.YAMLException;\n+import org.yaml.snakeyaml.representer.Representer;\n+\n+import com.google.common.eventbus.Subscribe;\n+import com.huaweicloud.governance.event.ConfigurationChangedEvent;\n+import com.huaweicloud.governance.event.EventManager;\n+\n+public abstract class GovProperties<T> implements InitializingBean {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(GovProperties.class);\n+\n+  private final Representer representer = new Representer();\n+\n+  private final String configKey;\n+\n+  @Autowired\n+  protected Environment environment;\n+\n+  protected Map<String, T> parsedEntity;\n+\n+  protected Class<T> entityClass;\n+\n+  protected GovProperties(String key) {\n+    configKey = key;\n+    representer.getPropertyUtils().setSkipMissingProperties(true);\n+    EventManager.register(this);\n+    entityClass = getEntityClass();\n+  }\n+\n+  @Override\n+  public void afterPropertiesSet() {\n+    parsedEntity = parseEntity(readPropertiesFromPrefix());\n+  }\n+\n+  @Subscribe\n+  public void onConfigurationChangedEvent(ConfigurationChangedEvent event) {\n+    for (String key : event.getChangedConfigurations()) {\n+      if (key.startsWith(configKey + \".\")) {\n+        // \u5220\u9664\u7684\u60c5\u51b5\uff0c \u4ece\u914d\u7f6e\u6587\u4ef6\u8bfb\u53d6\u914d\u7f6e\u3002 \u9700\u8981\u4fdd\u8bc1 environment \u5df2\u7ecf\u5237\u65b0\u914d\u7f6e\u503c\u3002\n+        T entityItem = parseEntityItem(environment.getProperty(key));\n+        String mapKey = key.substring((configKey + \".\").length());\n+        if (entityItem == null) {\n+          parsedEntity.remove(mapKey);\n+        } else {\n+          parsedEntity.put(mapKey, entityItem);\n+        }\n+      }\n+    }\n+  }\n+\n+  private Map<String, String> readPropertiesFromPrefix() {\n+    Set<String> allKeys = getAllKeys(environment);\n+    Map<String, String> result = new HashMap<>();\n+    allKeys.forEach(key -> {\n+      if (key.startsWith(configKey + \".\")) {\n+        result.put(key.substring(configKey.length() + 1), environment.getProperty(key));\n+      }\n+    });\n+    return result;\n+  }\n+\n+  private Set<String> getAllKeys(Environment environment) {\n+    Set<String> allKeys = new HashSet<>();\n+\n+    if (!(environment instanceof ConfigurableEnvironment)) {\n+      LOGGER.warn(\"None ConfigurableEnvironment is ignored in {}\", this.getClass().getName());\n+      return allKeys;\n+    }\n+\n+    ConfigurableEnvironment configurableEnvironment = (ConfigurableEnvironment) environment;\n+\n+    for (PropertySource<?> propertySource : configurableEnvironment.getPropertySources()) {\n+      getProperties(propertySource, allKeys);\n+    }\n+    return allKeys;\n+  }\n+\n+  private void getProperties(PropertySource<?> propertySource,\n+      Set<String> allKeys) {\n+    if (propertySource instanceof CompositePropertySource) {\n+      // recursively get EnumerablePropertySource", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzU5NDIwNw=="}, "originalCommit": {"oid": "673d0246e935ace0189eed25e77a1da6278a4ca4"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1972, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}