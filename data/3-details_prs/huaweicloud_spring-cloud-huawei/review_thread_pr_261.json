{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjgzMTky", "number": 261, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMToxMDo1OVrOEl5CqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMToxMDo1OVrOEl5CqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTY3MzM2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-dtm/src/main/java/com/huaweicloud/dtm/DtmConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMToxMDo1OVrOHVnZqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNjo0NTo0MVrOHVsKhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNzY5MA==", "bodyText": "reflect is not a good way. Why not use jar dependency directly.", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/261#discussion_r492427690", "createdAt": "2020-09-22T01:10:59Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-dtm/src/main/java/com/huaweicloud/dtm/DtmConstants.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.huaweicloud.dtm;\n+\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DtmConstants {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DtmConstants.class);\n+\n+  public static final String DTM_CONTEXT = \"DTM_CONTEXT\";\n+\n+  private static final String DTM_CONTEXT_DEFAULT_CLASS_NAME = \"com.huawei.middleware.dtm.client.context.DTMContext\";\n+\n+  private static final String DTM_EXPORT_METHOD_NAME = \"getContextData\";\n+\n+  private static final String DTM_IMPORT_METHOD_NAME = \"setContextData\";\n+\n+  public static Method DTM_CONTEXT_EX_METHOD;\n+\n+  public static Method DTM_CONTEXT_IM_METHOD;\n+\n+  static {\n+    try {\n+      Class<?> clazz = Class.forName(DTM_CONTEXT_DEFAULT_CLASS_NAME);\n+      DTM_CONTEXT_EX_METHOD = clazz.getMethod(DTM_EXPORT_METHOD_NAME);\n+      DTM_CONTEXT_IM_METHOD = clazz.getMethod(DTM_IMPORT_METHOD_NAME, Map.class);\n+    } catch (Throwable e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fae7d1479fda5078e62901a204dba8a3dd0f031"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNTczMg==", "bodyText": "avoid springcloud hw from relying on DTM directly. we have a talk about it and jiangyu give the solution that useing the reflect instead of useing jar dependency.", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/261#discussion_r492505732", "createdAt": "2020-09-22T06:45:41Z", "author": {"login": "heyile"}, "path": "spring-cloud-huawei-dtm/src/main/java/com/huaweicloud/dtm/DtmConstants.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.huaweicloud.dtm;\n+\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DtmConstants {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DtmConstants.class);\n+\n+  public static final String DTM_CONTEXT = \"DTM_CONTEXT\";\n+\n+  private static final String DTM_CONTEXT_DEFAULT_CLASS_NAME = \"com.huawei.middleware.dtm.client.context.DTMContext\";\n+\n+  private static final String DTM_EXPORT_METHOD_NAME = \"getContextData\";\n+\n+  private static final String DTM_IMPORT_METHOD_NAME = \"setContextData\";\n+\n+  public static Method DTM_CONTEXT_EX_METHOD;\n+\n+  public static Method DTM_CONTEXT_IM_METHOD;\n+\n+  static {\n+    try {\n+      Class<?> clazz = Class.forName(DTM_CONTEXT_DEFAULT_CLASS_NAME);\n+      DTM_CONTEXT_EX_METHOD = clazz.getMethod(DTM_EXPORT_METHOD_NAME);\n+      DTM_CONTEXT_IM_METHOD = clazz.getMethod(DTM_IMPORT_METHOD_NAME, Map.class);\n+    } catch (Throwable e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQyNzY5MA=="}, "originalCommit": {"oid": "7fae7d1479fda5078e62901a204dba8a3dd0f031"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1948, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}