{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDA2NDQ3", "number": 150, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1NzozMlrODrFZPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDowNDo0OVrODre79g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTAzNzQxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1NzozMlrOF7OFmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzozMjozN1rOF7O1Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MTExMg==", "bodyText": "log\u65e5\u5fd7\u90fd\u4f7f\u7528{} \u53c2\u6570\u7684\u5f62\u5f0f\uff0c\u4e0d\u8981\u7528\u5b57\u7b26\u4e32\u62fc\u63a5", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r397641112", "createdAt": "2020-03-25T06:57:32Z", "author": {"login": "jeho0815"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatTask.java", "diffHunk": "@@ -35,17 +42,86 @@\n \n   private ServiceCombClient serviceCombClient;\n \n+  private AtomicBoolean isInitialize = new AtomicBoolean(true);\n+\n+  private ServiceCombSwaggerHandler serviceCombSwaggerHandler;\n+\n+  private ServiceCombDiscoveryProperties serviceCombDiscoveryProperties;\n+\n+  private TagsProperties tagsProperties;\n+\n+  private ServiceCombRegistration registration;\n+\n   public HeartbeatTask(HeartbeatRequest heartbeatRequest, ServiceCombClient serviceCombClient) {\n     this.heartbeatRequest = heartbeatRequest;\n     this.serviceCombClient = serviceCombClient;\n   }\n \n+  public void setServiceCombSwaggerHandler(\n+      ServiceCombSwaggerHandler serviceCombSwaggerHandler) {\n+    this.serviceCombSwaggerHandler = serviceCombSwaggerHandler;\n+  }\n+\n+  public void setServiceCombDiscoveryProperties(\n+      ServiceCombDiscoveryProperties serviceCombDiscoveryProperties) {\n+    this.serviceCombDiscoveryProperties = serviceCombDiscoveryProperties;\n+  }\n+\n+  public void setTagsProperties(\n+      TagsProperties tagsProperties) {\n+    this.tagsProperties = tagsProperties;\n+  }\n+\n+  public void setRegistration(\n+      ServiceCombRegistration registration) {\n+    this.registration = registration;\n+  }\n+\n   @Override\n   public void run() {\n     try {\n-      serviceCombClient.heartbeat(heartbeatRequest);\n+      HeardBeatStatus result = serviceCombClient.heartbeat(heartbeatRequest);\n+      if (result.equals(HeardBeatStatus.FAILED)) {\n+        retryRegister(registration);\n+      }\n     } catch (ServiceCombException e) {\n       LOGGER.warn(\"heartbeat failed.\", e);\n     }\n   }\n+\n+  private void retryRegister(ServiceCombRegistration registration) {\n+    LOGGER.info(\"retry registry to service center.\");\n+    Microservice microservice = RegistryHandler.buildMicroservice(registration);\n+    if (serviceCombSwaggerHandler != null) {\n+      serviceCombSwaggerHandler.init(serviceCombDiscoveryProperties.getAppName(),\n+          serviceCombDiscoveryProperties.getServiceName());\n+      microservice.setSchemas(serviceCombSwaggerHandler.getSchemas());\n+    }\n+    try {\n+      String serviceID = serviceCombClient.getServiceId(microservice);\n+      if (null == serviceID) {\n+        serviceID = serviceCombClient.registerMicroservice(microservice);\n+      }\n+      if (serviceCombSwaggerHandler != null) {\n+        serviceCombSwaggerHandler.registerSwagger(serviceID, microservice.getSchemas());\n+      }\n+      MicroserviceInstance microserviceInstance = RegistryHandler\n+          .buildMicroServiceInstances(serviceID, microservice, serviceCombDiscoveryProperties,\n+              tagsProperties);\n+      String instanceID = serviceCombClient.registerInstance(microserviceInstance);\n+      if (null != instanceID) {\n+        serviceCombClient.autoDiscovery(serviceCombDiscoveryProperties.isAutoDiscovery());\n+        return;\n+      }\n+      RegisterCache.setInstanceID(instanceID);\n+      RegisterCache.setServiceID(serviceID);\n+      LOGGER.info(\"register success,instanceID=\" + instanceID + \";serviceID=\" + serviceID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f210693ceb99db188cd2466899c4e24ad6f49ba"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1MzI4Ng==", "bodyText": "done", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r397653286", "createdAt": "2020-03-25T07:32:37Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatTask.java", "diffHunk": "@@ -35,17 +42,86 @@\n \n   private ServiceCombClient serviceCombClient;\n \n+  private AtomicBoolean isInitialize = new AtomicBoolean(true);\n+\n+  private ServiceCombSwaggerHandler serviceCombSwaggerHandler;\n+\n+  private ServiceCombDiscoveryProperties serviceCombDiscoveryProperties;\n+\n+  private TagsProperties tagsProperties;\n+\n+  private ServiceCombRegistration registration;\n+\n   public HeartbeatTask(HeartbeatRequest heartbeatRequest, ServiceCombClient serviceCombClient) {\n     this.heartbeatRequest = heartbeatRequest;\n     this.serviceCombClient = serviceCombClient;\n   }\n \n+  public void setServiceCombSwaggerHandler(\n+      ServiceCombSwaggerHandler serviceCombSwaggerHandler) {\n+    this.serviceCombSwaggerHandler = serviceCombSwaggerHandler;\n+  }\n+\n+  public void setServiceCombDiscoveryProperties(\n+      ServiceCombDiscoveryProperties serviceCombDiscoveryProperties) {\n+    this.serviceCombDiscoveryProperties = serviceCombDiscoveryProperties;\n+  }\n+\n+  public void setTagsProperties(\n+      TagsProperties tagsProperties) {\n+    this.tagsProperties = tagsProperties;\n+  }\n+\n+  public void setRegistration(\n+      ServiceCombRegistration registration) {\n+    this.registration = registration;\n+  }\n+\n   @Override\n   public void run() {\n     try {\n-      serviceCombClient.heartbeat(heartbeatRequest);\n+      HeardBeatStatus result = serviceCombClient.heartbeat(heartbeatRequest);\n+      if (result.equals(HeardBeatStatus.FAILED)) {\n+        retryRegister(registration);\n+      }\n     } catch (ServiceCombException e) {\n       LOGGER.warn(\"heartbeat failed.\", e);\n     }\n   }\n+\n+  private void retryRegister(ServiceCombRegistration registration) {\n+    LOGGER.info(\"retry registry to service center.\");\n+    Microservice microservice = RegistryHandler.buildMicroservice(registration);\n+    if (serviceCombSwaggerHandler != null) {\n+      serviceCombSwaggerHandler.init(serviceCombDiscoveryProperties.getAppName(),\n+          serviceCombDiscoveryProperties.getServiceName());\n+      microservice.setSchemas(serviceCombSwaggerHandler.getSchemas());\n+    }\n+    try {\n+      String serviceID = serviceCombClient.getServiceId(microservice);\n+      if (null == serviceID) {\n+        serviceID = serviceCombClient.registerMicroservice(microservice);\n+      }\n+      if (serviceCombSwaggerHandler != null) {\n+        serviceCombSwaggerHandler.registerSwagger(serviceID, microservice.getSchemas());\n+      }\n+      MicroserviceInstance microserviceInstance = RegistryHandler\n+          .buildMicroServiceInstances(serviceID, microservice, serviceCombDiscoveryProperties,\n+              tagsProperties);\n+      String instanceID = serviceCombClient.registerInstance(microserviceInstance);\n+      if (null != instanceID) {\n+        serviceCombClient.autoDiscovery(serviceCombDiscoveryProperties.isAutoDiscovery());\n+        return;\n+      }\n+      RegisterCache.setInstanceID(instanceID);\n+      RegisterCache.setServiceID(serviceID);\n+      LOGGER.info(\"register success,instanceID=\" + instanceID + \";serviceID=\" + serviceID);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MTExMg=="}, "originalCommit": {"oid": "5f210693ceb99db188cd2466899c4e24ad6f49ba"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NTAzODQ0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo1ODowNVrOF7OGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNzozMjo0NFrOF7O1Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MTI3OQ==", "bodyText": "enum\u7c7b\u578b\u6700\u597d\u76f4\u63a5\u7528 ==", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r397641279", "createdAt": "2020-03-25T06:58:05Z", "author": {"login": "jeho0815"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatTask.java", "diffHunk": "@@ -35,17 +42,86 @@\n \n   private ServiceCombClient serviceCombClient;\n \n+  private AtomicBoolean isInitialize = new AtomicBoolean(true);\n+\n+  private ServiceCombSwaggerHandler serviceCombSwaggerHandler;\n+\n+  private ServiceCombDiscoveryProperties serviceCombDiscoveryProperties;\n+\n+  private TagsProperties tagsProperties;\n+\n+  private ServiceCombRegistration registration;\n+\n   public HeartbeatTask(HeartbeatRequest heartbeatRequest, ServiceCombClient serviceCombClient) {\n     this.heartbeatRequest = heartbeatRequest;\n     this.serviceCombClient = serviceCombClient;\n   }\n \n+  public void setServiceCombSwaggerHandler(\n+      ServiceCombSwaggerHandler serviceCombSwaggerHandler) {\n+    this.serviceCombSwaggerHandler = serviceCombSwaggerHandler;\n+  }\n+\n+  public void setServiceCombDiscoveryProperties(\n+      ServiceCombDiscoveryProperties serviceCombDiscoveryProperties) {\n+    this.serviceCombDiscoveryProperties = serviceCombDiscoveryProperties;\n+  }\n+\n+  public void setTagsProperties(\n+      TagsProperties tagsProperties) {\n+    this.tagsProperties = tagsProperties;\n+  }\n+\n+  public void setRegistration(\n+      ServiceCombRegistration registration) {\n+    this.registration = registration;\n+  }\n+\n   @Override\n   public void run() {\n     try {\n-      serviceCombClient.heartbeat(heartbeatRequest);\n+      HeardBeatStatus result = serviceCombClient.heartbeat(heartbeatRequest);\n+      if (result.equals(HeardBeatStatus.FAILED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f210693ceb99db188cd2466899c4e24ad6f49ba"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY1MzMzNA==", "bodyText": "done", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r397653334", "createdAt": "2020-03-25T07:32:44Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatTask.java", "diffHunk": "@@ -35,17 +42,86 @@\n \n   private ServiceCombClient serviceCombClient;\n \n+  private AtomicBoolean isInitialize = new AtomicBoolean(true);\n+\n+  private ServiceCombSwaggerHandler serviceCombSwaggerHandler;\n+\n+  private ServiceCombDiscoveryProperties serviceCombDiscoveryProperties;\n+\n+  private TagsProperties tagsProperties;\n+\n+  private ServiceCombRegistration registration;\n+\n   public HeartbeatTask(HeartbeatRequest heartbeatRequest, ServiceCombClient serviceCombClient) {\n     this.heartbeatRequest = heartbeatRequest;\n     this.serviceCombClient = serviceCombClient;\n   }\n \n+  public void setServiceCombSwaggerHandler(\n+      ServiceCombSwaggerHandler serviceCombSwaggerHandler) {\n+    this.serviceCombSwaggerHandler = serviceCombSwaggerHandler;\n+  }\n+\n+  public void setServiceCombDiscoveryProperties(\n+      ServiceCombDiscoveryProperties serviceCombDiscoveryProperties) {\n+    this.serviceCombDiscoveryProperties = serviceCombDiscoveryProperties;\n+  }\n+\n+  public void setTagsProperties(\n+      TagsProperties tagsProperties) {\n+    this.tagsProperties = tagsProperties;\n+  }\n+\n+  public void setRegistration(\n+      ServiceCombRegistration registration) {\n+    this.registration = registration;\n+  }\n+\n   @Override\n   public void run() {\n     try {\n-      serviceCombClient.heartbeat(heartbeatRequest);\n+      HeardBeatStatus result = serviceCombClient.heartbeat(heartbeatRequest);\n+      if (result.equals(HeardBeatStatus.FAILED)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MTI3OQ=="}, "originalCommit": {"oid": "5f210693ceb99db188cd2466899c4e24ad6f49ba"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTIxODY1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-common/src/main/java/com/huaweicloud/common/auth/AuthHeaderStrategyMount.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDowMjoxOFrOF72oQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNjo0NzoyNVrOF75OvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwNTM0NA==", "bodyText": "Why need add this line ?\nDefinition private WatchService watchService is never read after initialize in constructor, can removed", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r398305344", "createdAt": "2020-03-26T04:02:18Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-common/src/main/java/com/huaweicloud/common/auth/AuthHeaderStrategyMount.java", "diffHunk": "@@ -51,6 +52,8 @@ public AuthHeaderStrategyMount() {\n           StandardWatchEventKinds.ENTRY_MODIFY,\n           StandardWatchEventKinds.ENTRY_CREATE);\n       executor.execute(new FileUpdateCheckThread(watchService));\n+    } catch (NoSuchFileException e) {\n+      //ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba01a785a9210c7c8bfa9549b1965a4f1211f273"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNTkwNg==", "bodyText": "because if there is no path like this, the code will log a meaningless warn.\nok.", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r398315906", "createdAt": "2020-03-26T04:48:26Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-common/src/main/java/com/huaweicloud/common/auth/AuthHeaderStrategyMount.java", "diffHunk": "@@ -51,6 +52,8 @@ public AuthHeaderStrategyMount() {\n           StandardWatchEventKinds.ENTRY_MODIFY,\n           StandardWatchEventKinds.ENTRY_CREATE);\n       executor.execute(new FileUpdateCheckThread(watchService));\n+    } catch (NoSuchFileException e) {\n+      //ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwNTM0NA=="}, "originalCommit": {"oid": "ba01a785a9210c7c8bfa9549b1965a4f1211f273"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzNDU3Ng==", "bodyText": "\u8fd8\u662f\u8981\u52a0\u4e0a\u65e5\u5fd7", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r398334576", "createdAt": "2020-03-26T06:02:16Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-common/src/main/java/com/huaweicloud/common/auth/AuthHeaderStrategyMount.java", "diffHunk": "@@ -51,6 +52,8 @@ public AuthHeaderStrategyMount() {\n           StandardWatchEventKinds.ENTRY_MODIFY,\n           StandardWatchEventKinds.ENTRY_CREATE);\n       executor.execute(new FileUpdateCheckThread(watchService));\n+    } catch (NoSuchFileException e) {\n+      //ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwNTM0NA=="}, "originalCommit": {"oid": "ba01a785a9210c7c8bfa9549b1965a4f1211f273"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMzNjg5OA==", "bodyText": "\u5982\u679c\u4e0dcatch\uff0c\u5728\u975eservicestage\u73af\u5883\u4e0b\uff0c\u4f1a\u5bfc\u81f4100%\u51fa\u73b0\u4e00\u6761\u8b66\u544a\u65e5\u5fd7\u548c\u4e00\u6761\u5f02\u5e38\uff0c\u5bf9\u4e8e\u7528\u6237\u5b8c\u5168\u65e0\u610f\u4e49\u4e14\u5f15\u8d77\u56f0\u60d1\u3002", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r398336898", "createdAt": "2020-03-26T06:10:50Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-common/src/main/java/com/huaweicloud/common/auth/AuthHeaderStrategyMount.java", "diffHunk": "@@ -51,6 +52,8 @@ public AuthHeaderStrategyMount() {\n           StandardWatchEventKinds.ENTRY_MODIFY,\n           StandardWatchEventKinds.ENTRY_CREATE);\n       executor.execute(new FileUpdateCheckThread(watchService));\n+    } catch (NoSuchFileException e) {\n+      //ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwNTM0NA=="}, "originalCommit": {"oid": "ba01a785a9210c7c8bfa9549b1965a4f1211f273"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM0Nzk2NA==", "bodyText": "\u5df2\u7ecf\u4fee\u6539\uff0c\u5224\u65ad\u4e0d\u5b58\u5728\u76f4\u63a5return", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r398347964", "createdAt": "2020-03-26T06:47:25Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-common/src/main/java/com/huaweicloud/common/auth/AuthHeaderStrategyMount.java", "diffHunk": "@@ -51,6 +52,8 @@ public AuthHeaderStrategyMount() {\n           StandardWatchEventKinds.ENTRY_MODIFY,\n           StandardWatchEventKinds.ENTRY_CREATE);\n       executor.execute(new FileUpdateCheckThread(watchService));\n+    } catch (NoSuchFileException e) {\n+      //ignore", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwNTM0NA=="}, "originalCommit": {"oid": "ba01a785a9210c7c8bfa9549b1965a4f1211f273"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTIyMjMwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatScheduler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDowNDo0OVrOF72qcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwNDo1MDoyNlrOF73TYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwNTkwNQ==", "bodyText": "After  line 92 is better", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r398305905", "createdAt": "2020-03-26T04:04:49Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatScheduler.java", "diffHunk": "@@ -42,31 +52,86 @@\n \n   private ServiceCombClient serviceCombClient;\n \n+  private TagsProperties tagsProperties;\n+\n+  private ServiceCombSwaggerHandler serviceCombSwaggerHandler;\n+\n   public HeartbeatScheduler(ServiceCombDiscoveryProperties serviceCombDiscoveryProperties,\n-      ServiceCombClient serviceCombClient) {\n+      ServiceCombClient serviceCombClient, TagsProperties tagsProperties) {\n     this.serviceCombDiscoveryProperties = serviceCombDiscoveryProperties;\n     this.serviceCombClient = serviceCombClient;\n+    this.tagsProperties = tagsProperties;\n   }\n \n-  public void add(String instanceId, String serviceId) {\n+  public void add(ServiceCombRegistration registration,\n+      ServiceCombSwaggerHandler serviceCombSwaggerHandler) {\n     if (!serviceCombDiscoveryProperties.isHealthCheck()) {\n       return;\n     }\n-    HeartbeatRequest heartbeatRequest = new HeartbeatRequest(serviceId, instanceId);\n+    this.serviceCombSwaggerHandler = serviceCombSwaggerHandler;\n     ScheduledFuture currentTask = this.scheduler\n-        .scheduleWithFixedDelay(new HeartbeatTask(heartbeatRequest, serviceCombClient),\n+        .scheduleWithFixedDelay(() -> {\n+              try {\n+                HeartbeatRequest heartbeatRequest = new HeartbeatRequest(RegisterCache.getServiceID(),\n+                    RegisterCache.getInstanceID());\n+                HeardBeatStatus result = serviceCombClient.heartbeat(heartbeatRequest);\n+                if (result == HeardBeatStatus.FAILED) {\n+                  retryRegister(registration, heartbeatRequest.getInstances().get(0).getInstanceId());\n+                }\n+              } catch (ServiceCombException e) {\n+                LOGGER.warn(\"heartbeat failed.\", e);\n+              }\n+            },\n             serviceCombDiscoveryProperties.getHealthCheckInterval() * 1000);\n+    refreshLocalMap(RegisterCache.getInstanceID(), currentTask);\n+  }\n+\n+  public void remove() {\n+    ScheduledFuture scheduled = heartbeatRequestMap.get(RegisterCache.getInstanceID());\n+    if (null != scheduled) {\n+      scheduled.cancel(true);\n+    }\n+    heartbeatRequestMap.remove(RegisterCache.getInstanceID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba01a785a9210c7c8bfa9549b1965a4f1211f273"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxNjM4Nw==", "bodyText": "modified by a better way", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/150#discussion_r398316387", "createdAt": "2020-03-26T04:50:26Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatScheduler.java", "diffHunk": "@@ -42,31 +52,86 @@\n \n   private ServiceCombClient serviceCombClient;\n \n+  private TagsProperties tagsProperties;\n+\n+  private ServiceCombSwaggerHandler serviceCombSwaggerHandler;\n+\n   public HeartbeatScheduler(ServiceCombDiscoveryProperties serviceCombDiscoveryProperties,\n-      ServiceCombClient serviceCombClient) {\n+      ServiceCombClient serviceCombClient, TagsProperties tagsProperties) {\n     this.serviceCombDiscoveryProperties = serviceCombDiscoveryProperties;\n     this.serviceCombClient = serviceCombClient;\n+    this.tagsProperties = tagsProperties;\n   }\n \n-  public void add(String instanceId, String serviceId) {\n+  public void add(ServiceCombRegistration registration,\n+      ServiceCombSwaggerHandler serviceCombSwaggerHandler) {\n     if (!serviceCombDiscoveryProperties.isHealthCheck()) {\n       return;\n     }\n-    HeartbeatRequest heartbeatRequest = new HeartbeatRequest(serviceId, instanceId);\n+    this.serviceCombSwaggerHandler = serviceCombSwaggerHandler;\n     ScheduledFuture currentTask = this.scheduler\n-        .scheduleWithFixedDelay(new HeartbeatTask(heartbeatRequest, serviceCombClient),\n+        .scheduleWithFixedDelay(() -> {\n+              try {\n+                HeartbeatRequest heartbeatRequest = new HeartbeatRequest(RegisterCache.getServiceID(),\n+                    RegisterCache.getInstanceID());\n+                HeardBeatStatus result = serviceCombClient.heartbeat(heartbeatRequest);\n+                if (result == HeardBeatStatus.FAILED) {\n+                  retryRegister(registration, heartbeatRequest.getInstances().get(0).getInstanceId());\n+                }\n+              } catch (ServiceCombException e) {\n+                LOGGER.warn(\"heartbeat failed.\", e);\n+              }\n+            },\n             serviceCombDiscoveryProperties.getHealthCheckInterval() * 1000);\n+    refreshLocalMap(RegisterCache.getInstanceID(), currentTask);\n+  }\n+\n+  public void remove() {\n+    ScheduledFuture scheduled = heartbeatRequestMap.get(RegisterCache.getInstanceID());\n+    if (null != scheduled) {\n+      scheduled.cancel(true);\n+    }\n+    heartbeatRequestMap.remove(RegisterCache.getInstanceID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwNTkwNQ=="}, "originalCommit": {"oid": "ba01a785a9210c7c8bfa9549b1965a4f1211f273"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1991, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}