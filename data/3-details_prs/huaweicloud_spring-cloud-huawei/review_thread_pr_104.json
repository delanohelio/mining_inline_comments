{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4Njg5OTYw", "number": 104, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMTowNjoyNlrODVk9Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMTowNjoyNlrODVk9Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjIzOTUyMjIzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-common/src/main/java/com/huaweicloud/common/transport/DealHeaderUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMTowNjoyNlrOFZ4bjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMTo1ODoxNlrOFZ4znQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4MzI3OA==", "bodyText": "ShaAKSKCipher can be a constant in AkSkConfig", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/104#discussion_r362683278", "createdAt": "2020-01-03T01:06:26Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-common/src/main/java/com/huaweicloud/common/transport/DealHeaderUtil.java", "diffHunk": "@@ -59,35 +60,29 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(DealHeaderUtil.class);\n \n   public static void addAKSKHeader(HttpUriRequest httpRequest,\n-      SSLConfig sslConfig) {\n+      AkSkConfig akSkConfig) {\n     AuthHeaderUtils authHeaderUtils = AuthHeaderUtils.getInstance();\n     Map<String, String> headerMap = authHeaderUtils.genAuthHeaders();\n-    for (Map.Entry<String, String> entry : headerMap.entrySet()) {\n-      httpRequest.addHeader(entry.getKey(), entry.getValue());\n+    if (akSkConfig.isAkSkEmpty() && !CollectionUtils.isEmpty(headerMap)) {\n+      httpRequest.addHeader(X_SERVICE_AK, headerMap.get(X_SERVICE_AK));\n+      httpRequest.addHeader(X_SERVICE_SHA_AKSK, headerMap.get(X_SERVICE_SHA_AKSK));\n+    } else {\n+      httpRequest.addHeader(X_SERVICE_AK, akSkConfig.getAccessKey());\n+      httpRequest.addHeader(X_SERVICE_SHA_AKSK, encode(akSkConfig));\n     }\n-    if (isHeaderMapEmpty(headerMap) && isSSLConfigNotEmpty(sslConfig)) {\n-      httpRequest.addHeader(X_SERVICE_AK, sslConfig.getAccessKey());\n-      httpRequest.addHeader(X_SERVICE_SHA_AKSK,\n-          encode(sslConfig));\n-      httpRequest.addHeader(X_SERVICE_PROJECT, sslConfig.getProject());\n+    if (akSkConfig.isProjectEmpty() && !CollectionUtils.isEmpty(headerMap)) {\n+      httpRequest.addHeader(X_SERVICE_PROJECT, headerMap.get(X_SERVICE_PROJECT));\n+    } else {\n+      httpRequest.addHeader(X_SERVICE_PROJECT, akSkConfig.getProject());\n     }\n   }\n \n-  public static boolean isHeaderMapEmpty(Map<String, String> headerMap) {\n-    return headerMap == null || headerMap.size() == 0;\n-  }\n-\n-  public static boolean isSSLConfigNotEmpty(SSLConfig sslConfig) {\n-    return sslConfig.getAccessKey() != null && sslConfig.getSecretKey() != null && sslConfig.getProject() != null;\n-  }\n-\n-  private static String encode(SSLConfig sslConfig) {\n-\n-    if (\"ShaAKSKCipher\".equalsIgnoreCase(sslConfig.getAkskCustomCipher())) {\n-      return sslConfig.getSecretKey();\n+  private static String encode(AkSkConfig akSkConfig) {\n+    if (\"ShaAKSKCipher\".equalsIgnoreCase(akSkConfig.getAkskCustomCipher())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10dcc0cfaf5efab805e44e6b53f0ef8ecdab811e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4OTQzNw==", "bodyText": "done", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/104#discussion_r362689437", "createdAt": "2020-01-03T01:58:16Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-common/src/main/java/com/huaweicloud/common/transport/DealHeaderUtil.java", "diffHunk": "@@ -59,35 +60,29 @@\n   private static final Logger LOGGER = LoggerFactory.getLogger(DealHeaderUtil.class);\n \n   public static void addAKSKHeader(HttpUriRequest httpRequest,\n-      SSLConfig sslConfig) {\n+      AkSkConfig akSkConfig) {\n     AuthHeaderUtils authHeaderUtils = AuthHeaderUtils.getInstance();\n     Map<String, String> headerMap = authHeaderUtils.genAuthHeaders();\n-    for (Map.Entry<String, String> entry : headerMap.entrySet()) {\n-      httpRequest.addHeader(entry.getKey(), entry.getValue());\n+    if (akSkConfig.isAkSkEmpty() && !CollectionUtils.isEmpty(headerMap)) {\n+      httpRequest.addHeader(X_SERVICE_AK, headerMap.get(X_SERVICE_AK));\n+      httpRequest.addHeader(X_SERVICE_SHA_AKSK, headerMap.get(X_SERVICE_SHA_AKSK));\n+    } else {\n+      httpRequest.addHeader(X_SERVICE_AK, akSkConfig.getAccessKey());\n+      httpRequest.addHeader(X_SERVICE_SHA_AKSK, encode(akSkConfig));\n     }\n-    if (isHeaderMapEmpty(headerMap) && isSSLConfigNotEmpty(sslConfig)) {\n-      httpRequest.addHeader(X_SERVICE_AK, sslConfig.getAccessKey());\n-      httpRequest.addHeader(X_SERVICE_SHA_AKSK,\n-          encode(sslConfig));\n-      httpRequest.addHeader(X_SERVICE_PROJECT, sslConfig.getProject());\n+    if (akSkConfig.isProjectEmpty() && !CollectionUtils.isEmpty(headerMap)) {\n+      httpRequest.addHeader(X_SERVICE_PROJECT, headerMap.get(X_SERVICE_PROJECT));\n+    } else {\n+      httpRequest.addHeader(X_SERVICE_PROJECT, akSkConfig.getProject());\n     }\n   }\n \n-  public static boolean isHeaderMapEmpty(Map<String, String> headerMap) {\n-    return headerMap == null || headerMap.size() == 0;\n-  }\n-\n-  public static boolean isSSLConfigNotEmpty(SSLConfig sslConfig) {\n-    return sslConfig.getAccessKey() != null && sslConfig.getSecretKey() != null && sslConfig.getProject() != null;\n-  }\n-\n-  private static String encode(SSLConfig sslConfig) {\n-\n-    if (\"ShaAKSKCipher\".equalsIgnoreCase(sslConfig.getAkskCustomCipher())) {\n-      return sslConfig.getSecretKey();\n+  private static String encode(AkSkConfig akSkConfig) {\n+    if (\"ShaAKSKCipher\".equalsIgnoreCase(akSkConfig.getAkskCustomCipher())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4MzI3OA=="}, "originalCommit": {"oid": "10dcc0cfaf5efab805e44e6b53f0ef8ecdab811e"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1977, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}