{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODM3NzA1", "number": 230, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoxNTo0NlrOEO-jCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozODoyMVrOEO-71Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQwMjk4OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ConfigCenterClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoxNTo0NlrOGybiIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjowODoyOFrOGyoALA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzMzA5MA==", "bodyText": "Can be replace with StringUtils.isEmpty", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455533090", "createdAt": "2020-07-16T06:15:46Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ConfigCenterClient.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.huaweicloud.config.client;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.huaweicloud.common.exception.RemoteOperationException;\n+import com.huaweicloud.common.exception.RemoteServerUnavailableException;\n+import com.huaweicloud.common.transport.HttpTransport;\n+import com.huaweicloud.common.transport.Response;\n+import com.huaweicloud.config.ServiceCombConfigProperties;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.http.HttpStatus;\n+import org.apache.servicecomb.foundation.common.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @Author GuoYl123\n+ * @Date 2020/7/14\n+ **/\n+public class ConfigCenterClient extends ServiceCombConfigClient {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ConfigCenterClient.class);\n+\n+  public ConfigCenterClient(String urls,\n+      HttpTransport httpTransport) {\n+    super(urls, httpTransport);\n+  }\n+\n+  public Map<String, String> loadAll(ServiceCombConfigProperties serviceCombConfigProperties,\n+      String project) throws RemoteOperationException {\n+    project = project != null && !project.isEmpty() ? project : ConfigConstants.DEFAULT_PROJECT;\n+    String dimensionsInfo = spliceDimensionsInfo(serviceCombConfigProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNzM4OA==", "bodyText": "done", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455737388", "createdAt": "2020-07-16T12:08:28Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ConfigCenterClient.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.huaweicloud.config.client;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.huaweicloud.common.exception.RemoteOperationException;\n+import com.huaweicloud.common.exception.RemoteServerUnavailableException;\n+import com.huaweicloud.common.transport.HttpTransport;\n+import com.huaweicloud.common.transport.Response;\n+import com.huaweicloud.config.ServiceCombConfigProperties;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.http.HttpStatus;\n+import org.apache.servicecomb.foundation.common.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @Author GuoYl123\n+ * @Date 2020/7/14\n+ **/\n+public class ConfigCenterClient extends ServiceCombConfigClient {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ConfigCenterClient.class);\n+\n+  public ConfigCenterClient(String urls,\n+      HttpTransport httpTransport) {\n+    super(urls, httpTransport);\n+  }\n+\n+  public Map<String, String> loadAll(ServiceCombConfigProperties serviceCombConfigProperties,\n+      String project) throws RemoteOperationException {\n+    project = project != null && !project.isEmpty() ? project : ConfigConstants.DEFAULT_PROJECT;\n+    String dimensionsInfo = spliceDimensionsInfo(serviceCombConfigProperties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzMzA5MA=="}, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQwOTgyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ConfigCenterClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoxODo1NlrOGybmMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjowODozNVrOGyoAYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNDEzMA==", "bodyText": "replace with StringUtils.isEmpty", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455534130", "createdAt": "2020-07-16T06:18:56Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ConfigCenterClient.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.huaweicloud.config.client;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.huaweicloud.common.exception.RemoteOperationException;\n+import com.huaweicloud.common.exception.RemoteServerUnavailableException;\n+import com.huaweicloud.common.transport.HttpTransport;\n+import com.huaweicloud.common.transport.Response;\n+import com.huaweicloud.config.ServiceCombConfigProperties;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.http.HttpStatus;\n+import org.apache.servicecomb.foundation.common.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @Author GuoYl123\n+ * @Date 2020/7/14\n+ **/\n+public class ConfigCenterClient extends ServiceCombConfigClient {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ConfigCenterClient.class);\n+\n+  public ConfigCenterClient(String urls,\n+      HttpTransport httpTransport) {\n+    super(urls, httpTransport);\n+  }\n+\n+  public Map<String, String> loadAll(ServiceCombConfigProperties serviceCombConfigProperties,\n+      String project) throws RemoteOperationException {\n+    project = project != null && !project.isEmpty() ? project : ConfigConstants.DEFAULT_PROJECT;\n+    String dimensionsInfo = spliceDimensionsInfo(serviceCombConfigProperties);\n+    Response response = null;\n+    Map<String, String> result = new HashMap<>();\n+    try {\n+      response = httpTransport.sendGetRequest(\n+          configCenterConfig.getUrl() + \"/\" + ConfigConstants.DEFAULT_API_VERSION\n+              + \"/\" + project + \"/configuration/items?dimensionsInfo=\"\n+              + URLEncoder.encode(dimensionsInfo, \"UTF-8\") + \"&revision=\" + revision);\n+      if (response == null) {\n+        return result;\n+      }\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        LOGGER.debug(response.getContent());\n+        Map<String, Map<String, String>> allConfigMap = JsonUtils.OBJ_MAPPER\n+            .readValue(response.getContent(),\n+                new TypeReference<Map<String, Map<String, String>>>() {\n+                });\n+        if (allConfigMap != null) {\n+          if (allConfigMap.get(ConfigConstants.REVISION) != null) {\n+            revision = allConfigMap.get(ConfigConstants.REVISION).get(\"version\");\n+          }\n+          if (allConfigMap.get(ConfigConstants.APPLICATION_CONFIG) != null) {\n+            result.putAll(allConfigMap.get(ConfigConstants.APPLICATION_CONFIG));\n+          }\n+          if (dimensionsInfo.contains(ConfigConstants.DEFAULT_SERVICE_SEPARATOR)\n+              && allConfigMap.get(dimensionsInfo\n+              .substring(0, dimensionsInfo.indexOf(ConfigConstants.DEFAULT_SERVICE_SEPARATOR)))\n+              != null) {\n+            result.putAll(allConfigMap.get(dimensionsInfo\n+                .substring(0, dimensionsInfo.indexOf(ConfigConstants.DEFAULT_SERVICE_SEPARATOR))));\n+          }\n+          if (allConfigMap.get(dimensionsInfo) != null) {\n+            result.putAll(allConfigMap.get(dimensionsInfo));\n+          }\n+        }\n+        return result;\n+      } else if (response.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {\n+        return null;\n+      } else if (response.getStatusCode() == HttpStatus.SC_BAD_REQUEST) {\n+        LOGGER.info(response.getStatusMessage());\n+        return null;\n+      } else {\n+        throw new RemoteOperationException(\n+            \"read response failed. status:\"\n+                + response.getStatusCode()\n+                + \"; message:\"\n+                + response.getStatusMessage()\n+                + \"; content:\"\n+                + response.getContent());\n+      }\n+    } catch (RemoteServerUnavailableException e) {\n+      configCenterConfig.toggle();\n+      throw new RemoteOperationException(\n+          \"config center address is not available , will retry.\", e);\n+    } catch (IOException e) {\n+      configCenterConfig.toggle();\n+      throw new RemoteOperationException(\"read response failed. \" + response, e);\n+    }\n+  }\n+\n+\n+  private String spliceDimensionsInfo(ServiceCombConfigProperties serviceCombConfigProperties) {\n+    String result =\n+        serviceCombConfigProperties.getServiceName() + ConfigConstants.DEFAULT_APP_SEPARATOR\n+            + serviceCombConfigProperties.getAppName();\n+    if (serviceCombConfigProperties.getVersion() != null && !serviceCombConfigProperties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNzQ0Mg==", "bodyText": "done", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455737442", "createdAt": "2020-07-16T12:08:35Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ConfigCenterClient.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.huaweicloud.config.client;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.huaweicloud.common.exception.RemoteOperationException;\n+import com.huaweicloud.common.exception.RemoteServerUnavailableException;\n+import com.huaweicloud.common.transport.HttpTransport;\n+import com.huaweicloud.common.transport.Response;\n+import com.huaweicloud.config.ServiceCombConfigProperties;\n+import java.io.IOException;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.http.HttpStatus;\n+import org.apache.servicecomb.foundation.common.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * @Author GuoYl123\n+ * @Date 2020/7/14\n+ **/\n+public class ConfigCenterClient extends ServiceCombConfigClient {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ConfigCenterClient.class);\n+\n+  public ConfigCenterClient(String urls,\n+      HttpTransport httpTransport) {\n+    super(urls, httpTransport);\n+  }\n+\n+  public Map<String, String> loadAll(ServiceCombConfigProperties serviceCombConfigProperties,\n+      String project) throws RemoteOperationException {\n+    project = project != null && !project.isEmpty() ? project : ConfigConstants.DEFAULT_PROJECT;\n+    String dimensionsInfo = spliceDimensionsInfo(serviceCombConfigProperties);\n+    Response response = null;\n+    Map<String, String> result = new HashMap<>();\n+    try {\n+      response = httpTransport.sendGetRequest(\n+          configCenterConfig.getUrl() + \"/\" + ConfigConstants.DEFAULT_API_VERSION\n+              + \"/\" + project + \"/configuration/items?dimensionsInfo=\"\n+              + URLEncoder.encode(dimensionsInfo, \"UTF-8\") + \"&revision=\" + revision);\n+      if (response == null) {\n+        return result;\n+      }\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        LOGGER.debug(response.getContent());\n+        Map<String, Map<String, String>> allConfigMap = JsonUtils.OBJ_MAPPER\n+            .readValue(response.getContent(),\n+                new TypeReference<Map<String, Map<String, String>>>() {\n+                });\n+        if (allConfigMap != null) {\n+          if (allConfigMap.get(ConfigConstants.REVISION) != null) {\n+            revision = allConfigMap.get(ConfigConstants.REVISION).get(\"version\");\n+          }\n+          if (allConfigMap.get(ConfigConstants.APPLICATION_CONFIG) != null) {\n+            result.putAll(allConfigMap.get(ConfigConstants.APPLICATION_CONFIG));\n+          }\n+          if (dimensionsInfo.contains(ConfigConstants.DEFAULT_SERVICE_SEPARATOR)\n+              && allConfigMap.get(dimensionsInfo\n+              .substring(0, dimensionsInfo.indexOf(ConfigConstants.DEFAULT_SERVICE_SEPARATOR)))\n+              != null) {\n+            result.putAll(allConfigMap.get(dimensionsInfo\n+                .substring(0, dimensionsInfo.indexOf(ConfigConstants.DEFAULT_SERVICE_SEPARATOR))));\n+          }\n+          if (allConfigMap.get(dimensionsInfo) != null) {\n+            result.putAll(allConfigMap.get(dimensionsInfo));\n+          }\n+        }\n+        return result;\n+      } else if (response.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {\n+        return null;\n+      } else if (response.getStatusCode() == HttpStatus.SC_BAD_REQUEST) {\n+        LOGGER.info(response.getStatusMessage());\n+        return null;\n+      } else {\n+        throw new RemoteOperationException(\n+            \"read response failed. status:\"\n+                + response.getStatusCode()\n+                + \"; message:\"\n+                + response.getStatusMessage()\n+                + \"; content:\"\n+                + response.getContent());\n+      }\n+    } catch (RemoteServerUnavailableException e) {\n+      configCenterConfig.toggle();\n+      throw new RemoteOperationException(\n+          \"config center address is not available , will retry.\", e);\n+    } catch (IOException e) {\n+      configCenterConfig.toggle();\n+      throw new RemoteOperationException(\"read response failed. \" + response, e);\n+    }\n+  }\n+\n+\n+  private String spliceDimensionsInfo(ServiceCombConfigProperties serviceCombConfigProperties) {\n+    String result =\n+        serviceCombConfigProperties.getServiceName() + ConfigConstants.DEFAULT_APP_SEPARATOR\n+            + serviceCombConfigProperties.getAppName();\n+    if (serviceCombConfigProperties.getVersion() != null && !serviceCombConfigProperties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzNDEzMA=="}, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQzOTc5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ServiceCombConfigClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjoyOTowNlrOGyb2sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjowODo0NlrOGyoAtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzODM1Mg==", "bodyText": "loadAll can be declare abstract", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455538352", "createdAt": "2020-07-16T06:29:06Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ServiceCombConfigClient.java", "diffHunk": "@@ -77,171 +52,6 @@ public ServiceCombConfigClient(String urls, HttpTransport httpTransport) {\n    */\n   public Map<String, String> loadAll(ServiceCombConfigProperties serviceCombConfigProperties,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNzUyNQ==", "bodyText": "done", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455737525", "createdAt": "2020-07-16T12:08:46Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ServiceCombConfigClient.java", "diffHunk": "@@ -77,171 +52,6 @@ public ServiceCombConfigClient(String urls, HttpTransport httpTransport) {\n    */\n   public Map<String, String> loadAll(ServiceCombConfigProperties serviceCombConfigProperties,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzODM1Mg=="}, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQ0NzY3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/model/KVBody.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozMTo0NFrOGyb7Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjo1NzoxN1rOGypsGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzOTQ5NA==", "bodyText": "This model is only used for kie. So I think you do not give a properpy direrctory structure to hold different implementations.", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455539494", "createdAt": "2020-07-16T06:31:44Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/model/KVBody.java", "diffHunk": "@@ -15,7 +15,7 @@\n  * limitations under the License.\n  */\n \n-package com.huaweicloud.config.kie;\n+package com.huaweicloud.config.model;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc2NTAxNg==", "bodyText": "I think model is better than kie , it's hard to call a higher better name", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455765016", "createdAt": "2020-07-16T12:57:17Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/model/KVBody.java", "diffHunk": "@@ -15,7 +15,7 @@\n  * limitations under the License.\n  */\n \n-package com.huaweicloud.config.kie;\n+package com.huaweicloud.config.model;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUzOTQ5NA=="}, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQ1MTMxOnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ServiceCombConfigClientBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozMzowNVrOGyb9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjowOToyMlrOGyoCCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0MDA0Ng==", "bodyText": "You can use \"kie\".equalsIgnoreCase to make logic simpler.", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455540046", "createdAt": "2020-07-16T06:33:05Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ServiceCombConfigClientBuilder.java", "diffHunk": "@@ -45,14 +47,19 @@ public ServiceCombConfigClientBuilder setServiceCombSSLProperties(\n     return this;\n   }\n \n-  public ServiceCombConfigClientBuilder setUrl(String url) {\n-    this.url = url;\n+  public ServiceCombConfigClientBuilder setServiceCombConfigProperties(\n+      ServiceCombConfigProperties serviceCombConfigProperties) {\n+    this.serviceCombConfigProperties = serviceCombConfigProperties;\n     return this;\n   }\n \n   public ServiceCombConfigClient createServiceCombConfigClient() {\n     DefaultHttpTransport httpTransport = DefaultHttpTransport.getInstance(serviceCombSSLProperties);\n     httpTransport.setServiceCombAkSkProperties(serviceCombAkSkProperties);\n-    return new ServiceCombConfigClient(url, httpTransport);\n+    if (!StringUtils.isEmpty(serviceCombConfigProperties.getServerType())\n+        && serviceCombConfigProperties.getServerType().equals(\"kie\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNzg2Nw==", "bodyText": "very useful", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455737867", "createdAt": "2020-07-16T12:09:22Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/ServiceCombConfigClientBuilder.java", "diffHunk": "@@ -45,14 +47,19 @@ public ServiceCombConfigClientBuilder setServiceCombSSLProperties(\n     return this;\n   }\n \n-  public ServiceCombConfigClientBuilder setUrl(String url) {\n-    this.url = url;\n+  public ServiceCombConfigClientBuilder setServiceCombConfigProperties(\n+      ServiceCombConfigProperties serviceCombConfigProperties) {\n+    this.serviceCombConfigProperties = serviceCombConfigProperties;\n     return this;\n   }\n \n   public ServiceCombConfigClient createServiceCombConfigClient() {\n     DefaultHttpTransport httpTransport = DefaultHttpTransport.getInstance(serviceCombSSLProperties);\n     httpTransport.setServiceCombAkSkProperties(serviceCombAkSkProperties);\n-    return new ServiceCombConfigClient(url, httpTransport);\n+    if (!StringUtils.isEmpty(serviceCombConfigProperties.getServerType())\n+        && serviceCombConfigProperties.getServerType().equals(\"kie\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0MDA0Ng=="}, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQ1ODgwOnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/KieClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozNTo0MlrOGycBsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjozMjo1NlrOGyo0Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0MTE3MA==", "bodyText": "This code is very complicated, you can use some desgin patterns to make it simpler, such Factory based on valueType.", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455541170", "createdAt": "2020-07-16T06:35:42Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/KieClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package com.huaweicloud.config.client;\n+\n+import com.huaweicloud.common.exception.RemoteOperationException;\n+import com.huaweicloud.common.exception.ServiceCombRuntimeException;\n+import com.huaweicloud.common.transport.HttpTransport;\n+import com.huaweicloud.common.transport.Response;\n+import com.huaweicloud.config.ServiceCombConfigProperties;\n+import com.huaweicloud.config.model.KVDoc;\n+import com.huaweicloud.config.model.KVResponse;\n+import com.huaweicloud.config.model.ValueType;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.http.HttpStatus;\n+import org.apache.servicecomb.foundation.common.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @Author GuoYl123\n+ * @Date 2020/7/14\n+ **/\n+public class KieClient extends ServiceCombConfigClient {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(KieClient.class);\n+\n+\n+  private AtomicBoolean isFirst = new AtomicBoolean(true);\n+\n+  public KieClient(String urls,\n+      HttpTransport httpTransport) {\n+    super(urls, httpTransport);\n+  }\n+\n+  public Map<String, String> loadAll(ServiceCombConfigProperties serviceCombConfigProperties,\n+      String project) throws RemoteOperationException {\n+    project = project != null && !project.isEmpty() ? project : ConfigConstants.DEFAULT_PROJECT;\n+    boolean isWatch = false;\n+    if (serviceCombConfigProperties.getEnableLongPolling()) {\n+      isWatch = true;\n+    }\n+    Response response = null;\n+    try {\n+      String stringBuilder = configCenterConfig.getUrl()\n+          + \"/\"\n+          + ConfigConstants.DEFAULT_KIE_API_VERSION\n+          + \"/\"\n+          + project\n+          + \"/kie/kv?label=app:\"\n+          + serviceCombConfigProperties.getAppName()\n+          + \"&revision=\"\n+          + revision;\n+      if (isWatch && !isFirst.get()) {\n+        stringBuilder +=\n+            \"&wait=\" + serviceCombConfigProperties.getWatch().getPollingWaitTimeInSeconds() + \"s\";\n+      }\n+      isFirst.compareAndSet(true, false);\n+      response = httpTransport.sendGetRequest(stringBuilder);\n+      if (response == null) {\n+        return null;\n+      }\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        revision = response.getHeader(\"X-Kie-Revision\");\n+        LOGGER.debug(response.getContent());\n+        KVResponse allConfigList = JsonUtils.OBJ_MAPPER\n+            .readValue(response.getContent(), KVResponse.class);\n+        return getConfigByLabel(serviceCombConfigProperties, allConfigList);\n+      } else if (response.getStatusCode() == HttpStatus.SC_BAD_REQUEST) {\n+        LOGGER.info(response.getStatusMessage());\n+        return null;\n+      } else if (response.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {\n+        return null;\n+      } else {\n+        throw new RemoteOperationException(\n+            \"read response failed. status:\" + response.getStatusCode() + \"; message:\" + response\n+                .getStatusMessage() + \"; content:\" + response.getContent());\n+      }\n+    } catch (Exception e) {\n+      configCenterConfig.toggle();\n+      throw new RemoteOperationException(\"read response failed. \" + response, e);\n+    }\n+  }\n+\n+\n+  private Map<String, String> getConfigByLabel(\n+      ServiceCombConfigProperties serviceCombConfigProperties, KVResponse resp) {\n+    Map<String, String> resultMap = new HashMap<>();\n+    List<KVDoc> appList = new ArrayList<>();\n+    List<KVDoc> serviceList = new ArrayList<>();\n+    List<KVDoc> versionList = new ArrayList<>();\n+    for (KVDoc kvDoc : resp.getData()) {\n+      if (!StringUtils.isEmpty(kvDoc.getStatus()) && !kvDoc.getStatus()\n+          .equals(ConfigConstants.STATUS_ENABLED)) {\n+        continue;\n+      }\n+      Map<String, String> labelsMap = kvDoc.getLabels();\n+      if (labelsMap.containsKey(ConfigConstants.LABEL_APP) && labelsMap\n+          .get(ConfigConstants.LABEL_APP)\n+          .equals(serviceCombConfigProperties.getAppName())\n+          && labelsMap.containsKey(ConfigConstants.LABEL_ENV) && labelsMap\n+          .get(ConfigConstants.LABEL_ENV)\n+          .equals(serviceCombConfigProperties.getEnv())) {\n+        if (!labelsMap.containsKey(ConfigConstants.LABEL_SERVICE)) {\n+          appList.add(kvDoc);\n+        }\n+        if (labelsMap.containsKey(ConfigConstants.LABEL_SERVICE) && labelsMap\n+            .get(ConfigConstants.LABEL_SERVICE)\n+            .equals(serviceCombConfigProperties.getServiceName())) {\n+          if (!kvDoc.getLabels().containsKey(ConfigConstants.LABEL_VERSION)) {\n+            serviceList.add(kvDoc);\n+          }\n+          if (labelsMap.containsKey(ConfigConstants.LABEL_VERSION) && labelsMap\n+              .get(ConfigConstants.LABEL_VERSION)\n+              .equals(serviceCombConfigProperties.getServiceName())) {\n+            versionList.add(kvDoc);\n+          }\n+        }\n+      }\n+    }\n+    //kv is priority\n+    for (KVDoc kvDoc : appList) {\n+      resultMap.putAll(processValueType(kvDoc));\n+    }\n+    for (KVDoc kvDoc : serviceList) {\n+      resultMap.putAll(processValueType(kvDoc));\n+    }\n+    for (KVDoc kvDoc : versionList) {\n+      resultMap.putAll(processValueType(kvDoc));\n+    }\n+    return resultMap;\n+  }\n+\n+\n+  private Map<String, String> processValueType(KVDoc kvDoc) {\n+    ValueType vtype;\n+    try {\n+      vtype = ValueType.valueOf(kvDoc.getValueType());\n+    } catch (IllegalArgumentException e) {\n+      throw new ServiceCombRuntimeException(\"value type not support\");\n+    }\n+    Properties properties = new Properties();\n+    Map<String, String> kvMap = new HashMap<>();\n+    try {\n+      if (vtype == (ValueType.yaml) || vtype == (ValueType.yml)) {\n+        YamlPropertiesFactoryBean yamlFactory = new YamlPropertiesFactoryBean();\n+        yamlFactory.setResources(new ByteArrayResource(kvDoc.getValue().getBytes()));\n+        properties = yamlFactory.getObject();\n+      } else if (vtype == (ValueType.properties)) {\n+        properties.load(new StringReader(kvDoc.getValue()));\n+      } else if (vtype == (ValueType.text) || vtype == (ValueType.string)) {\n+        kvMap.put(kvDoc.getKey(), kvDoc.getValue());\n+        return kvMap;\n+      } else {\n+        kvMap.put(kvDoc.getKey(), kvDoc.getValue());\n+        return kvMap;\n+      }\n+      kvMap = toMap(kvDoc.getKey(), properties);\n+      return kvMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc1MDY4Ng==", "bodyText": "using switch to simplify", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455750686", "createdAt": "2020-07-16T12:32:56Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/KieClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package com.huaweicloud.config.client;\n+\n+import com.huaweicloud.common.exception.RemoteOperationException;\n+import com.huaweicloud.common.exception.ServiceCombRuntimeException;\n+import com.huaweicloud.common.transport.HttpTransport;\n+import com.huaweicloud.common.transport.Response;\n+import com.huaweicloud.config.ServiceCombConfigProperties;\n+import com.huaweicloud.config.model.KVDoc;\n+import com.huaweicloud.config.model.KVResponse;\n+import com.huaweicloud.config.model.ValueType;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.http.HttpStatus;\n+import org.apache.servicecomb.foundation.common.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @Author GuoYl123\n+ * @Date 2020/7/14\n+ **/\n+public class KieClient extends ServiceCombConfigClient {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(KieClient.class);\n+\n+\n+  private AtomicBoolean isFirst = new AtomicBoolean(true);\n+\n+  public KieClient(String urls,\n+      HttpTransport httpTransport) {\n+    super(urls, httpTransport);\n+  }\n+\n+  public Map<String, String> loadAll(ServiceCombConfigProperties serviceCombConfigProperties,\n+      String project) throws RemoteOperationException {\n+    project = project != null && !project.isEmpty() ? project : ConfigConstants.DEFAULT_PROJECT;\n+    boolean isWatch = false;\n+    if (serviceCombConfigProperties.getEnableLongPolling()) {\n+      isWatch = true;\n+    }\n+    Response response = null;\n+    try {\n+      String stringBuilder = configCenterConfig.getUrl()\n+          + \"/\"\n+          + ConfigConstants.DEFAULT_KIE_API_VERSION\n+          + \"/\"\n+          + project\n+          + \"/kie/kv?label=app:\"\n+          + serviceCombConfigProperties.getAppName()\n+          + \"&revision=\"\n+          + revision;\n+      if (isWatch && !isFirst.get()) {\n+        stringBuilder +=\n+            \"&wait=\" + serviceCombConfigProperties.getWatch().getPollingWaitTimeInSeconds() + \"s\";\n+      }\n+      isFirst.compareAndSet(true, false);\n+      response = httpTransport.sendGetRequest(stringBuilder);\n+      if (response == null) {\n+        return null;\n+      }\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        revision = response.getHeader(\"X-Kie-Revision\");\n+        LOGGER.debug(response.getContent());\n+        KVResponse allConfigList = JsonUtils.OBJ_MAPPER\n+            .readValue(response.getContent(), KVResponse.class);\n+        return getConfigByLabel(serviceCombConfigProperties, allConfigList);\n+      } else if (response.getStatusCode() == HttpStatus.SC_BAD_REQUEST) {\n+        LOGGER.info(response.getStatusMessage());\n+        return null;\n+      } else if (response.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {\n+        return null;\n+      } else {\n+        throw new RemoteOperationException(\n+            \"read response failed. status:\" + response.getStatusCode() + \"; message:\" + response\n+                .getStatusMessage() + \"; content:\" + response.getContent());\n+      }\n+    } catch (Exception e) {\n+      configCenterConfig.toggle();\n+      throw new RemoteOperationException(\"read response failed. \" + response, e);\n+    }\n+  }\n+\n+\n+  private Map<String, String> getConfigByLabel(\n+      ServiceCombConfigProperties serviceCombConfigProperties, KVResponse resp) {\n+    Map<String, String> resultMap = new HashMap<>();\n+    List<KVDoc> appList = new ArrayList<>();\n+    List<KVDoc> serviceList = new ArrayList<>();\n+    List<KVDoc> versionList = new ArrayList<>();\n+    for (KVDoc kvDoc : resp.getData()) {\n+      if (!StringUtils.isEmpty(kvDoc.getStatus()) && !kvDoc.getStatus()\n+          .equals(ConfigConstants.STATUS_ENABLED)) {\n+        continue;\n+      }\n+      Map<String, String> labelsMap = kvDoc.getLabels();\n+      if (labelsMap.containsKey(ConfigConstants.LABEL_APP) && labelsMap\n+          .get(ConfigConstants.LABEL_APP)\n+          .equals(serviceCombConfigProperties.getAppName())\n+          && labelsMap.containsKey(ConfigConstants.LABEL_ENV) && labelsMap\n+          .get(ConfigConstants.LABEL_ENV)\n+          .equals(serviceCombConfigProperties.getEnv())) {\n+        if (!labelsMap.containsKey(ConfigConstants.LABEL_SERVICE)) {\n+          appList.add(kvDoc);\n+        }\n+        if (labelsMap.containsKey(ConfigConstants.LABEL_SERVICE) && labelsMap\n+            .get(ConfigConstants.LABEL_SERVICE)\n+            .equals(serviceCombConfigProperties.getServiceName())) {\n+          if (!kvDoc.getLabels().containsKey(ConfigConstants.LABEL_VERSION)) {\n+            serviceList.add(kvDoc);\n+          }\n+          if (labelsMap.containsKey(ConfigConstants.LABEL_VERSION) && labelsMap\n+              .get(ConfigConstants.LABEL_VERSION)\n+              .equals(serviceCombConfigProperties.getServiceName())) {\n+            versionList.add(kvDoc);\n+          }\n+        }\n+      }\n+    }\n+    //kv is priority\n+    for (KVDoc kvDoc : appList) {\n+      resultMap.putAll(processValueType(kvDoc));\n+    }\n+    for (KVDoc kvDoc : serviceList) {\n+      resultMap.putAll(processValueType(kvDoc));\n+    }\n+    for (KVDoc kvDoc : versionList) {\n+      resultMap.putAll(processValueType(kvDoc));\n+    }\n+    return resultMap;\n+  }\n+\n+\n+  private Map<String, String> processValueType(KVDoc kvDoc) {\n+    ValueType vtype;\n+    try {\n+      vtype = ValueType.valueOf(kvDoc.getValueType());\n+    } catch (IllegalArgumentException e) {\n+      throw new ServiceCombRuntimeException(\"value type not support\");\n+    }\n+    Properties properties = new Properties();\n+    Map<String, String> kvMap = new HashMap<>();\n+    try {\n+      if (vtype == (ValueType.yaml) || vtype == (ValueType.yml)) {\n+        YamlPropertiesFactoryBean yamlFactory = new YamlPropertiesFactoryBean();\n+        yamlFactory.setResources(new ByteArrayResource(kvDoc.getValue().getBytes()));\n+        properties = yamlFactory.getObject();\n+      } else if (vtype == (ValueType.properties)) {\n+        properties.load(new StringReader(kvDoc.getValue()));\n+      } else if (vtype == (ValueType.text) || vtype == (ValueType.string)) {\n+        kvMap.put(kvDoc.getKey(), kvDoc.getValue());\n+        return kvMap;\n+      } else {\n+        kvMap.put(kvDoc.getKey(), kvDoc.getValue());\n+        return kvMap;\n+      }\n+      kvMap = toMap(kvDoc.getKey(), properties);\n+      return kvMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0MTE3MA=="}, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTQ2NjQ1OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/KieClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjozODoyMVrOGycGCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMjo1NTo1M1rOGypovg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0MjI4Mg==", "bodyText": "This code is very long, and seams you process serviceList, versionList, etc with the same code resultMap.putAll(processValueType(kvDoc)); , and the logic can be refactored.", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455542282", "createdAt": "2020-07-16T06:38:21Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/KieClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package com.huaweicloud.config.client;\n+\n+import com.huaweicloud.common.exception.RemoteOperationException;\n+import com.huaweicloud.common.exception.ServiceCombRuntimeException;\n+import com.huaweicloud.common.transport.HttpTransport;\n+import com.huaweicloud.common.transport.Response;\n+import com.huaweicloud.config.ServiceCombConfigProperties;\n+import com.huaweicloud.config.model.KVDoc;\n+import com.huaweicloud.config.model.KVResponse;\n+import com.huaweicloud.config.model.ValueType;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.http.HttpStatus;\n+import org.apache.servicecomb.foundation.common.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @Author GuoYl123\n+ * @Date 2020/7/14\n+ **/\n+public class KieClient extends ServiceCombConfigClient {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(KieClient.class);\n+\n+\n+  private AtomicBoolean isFirst = new AtomicBoolean(true);\n+\n+  public KieClient(String urls,\n+      HttpTransport httpTransport) {\n+    super(urls, httpTransport);\n+  }\n+\n+  public Map<String, String> loadAll(ServiceCombConfigProperties serviceCombConfigProperties,\n+      String project) throws RemoteOperationException {\n+    project = project != null && !project.isEmpty() ? project : ConfigConstants.DEFAULT_PROJECT;\n+    boolean isWatch = false;\n+    if (serviceCombConfigProperties.getEnableLongPolling()) {\n+      isWatch = true;\n+    }\n+    Response response = null;\n+    try {\n+      String stringBuilder = configCenterConfig.getUrl()\n+          + \"/\"\n+          + ConfigConstants.DEFAULT_KIE_API_VERSION\n+          + \"/\"\n+          + project\n+          + \"/kie/kv?label=app:\"\n+          + serviceCombConfigProperties.getAppName()\n+          + \"&revision=\"\n+          + revision;\n+      if (isWatch && !isFirst.get()) {\n+        stringBuilder +=\n+            \"&wait=\" + serviceCombConfigProperties.getWatch().getPollingWaitTimeInSeconds() + \"s\";\n+      }\n+      isFirst.compareAndSet(true, false);\n+      response = httpTransport.sendGetRequest(stringBuilder);\n+      if (response == null) {\n+        return null;\n+      }\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        revision = response.getHeader(\"X-Kie-Revision\");\n+        LOGGER.debug(response.getContent());\n+        KVResponse allConfigList = JsonUtils.OBJ_MAPPER\n+            .readValue(response.getContent(), KVResponse.class);\n+        return getConfigByLabel(serviceCombConfigProperties, allConfigList);\n+      } else if (response.getStatusCode() == HttpStatus.SC_BAD_REQUEST) {\n+        LOGGER.info(response.getStatusMessage());\n+        return null;\n+      } else if (response.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {\n+        return null;\n+      } else {\n+        throw new RemoteOperationException(\n+            \"read response failed. status:\" + response.getStatusCode() + \"; message:\" + response\n+                .getStatusMessage() + \"; content:\" + response.getContent());\n+      }\n+    } catch (Exception e) {\n+      configCenterConfig.toggle();\n+      throw new RemoteOperationException(\"read response failed. \" + response, e);\n+    }\n+  }\n+\n+\n+  private Map<String, String> getConfigByLabel(\n+      ServiceCombConfigProperties serviceCombConfigProperties, KVResponse resp) {\n+    Map<String, String> resultMap = new HashMap<>();\n+    List<KVDoc> appList = new ArrayList<>();\n+    List<KVDoc> serviceList = new ArrayList<>();\n+    List<KVDoc> versionList = new ArrayList<>();\n+    for (KVDoc kvDoc : resp.getData()) {\n+      if (!StringUtils.isEmpty(kvDoc.getStatus()) && !kvDoc.getStatus()\n+          .equals(ConfigConstants.STATUS_ENABLED)) {\n+        continue;\n+      }\n+      Map<String, String> labelsMap = kvDoc.getLabels();\n+      if (labelsMap.containsKey(ConfigConstants.LABEL_APP) && labelsMap\n+          .get(ConfigConstants.LABEL_APP)\n+          .equals(serviceCombConfigProperties.getAppName())\n+          && labelsMap.containsKey(ConfigConstants.LABEL_ENV) && labelsMap\n+          .get(ConfigConstants.LABEL_ENV)\n+          .equals(serviceCombConfigProperties.getEnv())) {\n+        if (!labelsMap.containsKey(ConfigConstants.LABEL_SERVICE)) {\n+          appList.add(kvDoc);\n+        }\n+        if (labelsMap.containsKey(ConfigConstants.LABEL_SERVICE) && labelsMap\n+            .get(ConfigConstants.LABEL_SERVICE)\n+            .equals(serviceCombConfigProperties.getServiceName())) {\n+          if (!kvDoc.getLabels().containsKey(ConfigConstants.LABEL_VERSION)) {\n+            serviceList.add(kvDoc);\n+          }\n+          if (labelsMap.containsKey(ConfigConstants.LABEL_VERSION) && labelsMap\n+              .get(ConfigConstants.LABEL_VERSION)\n+              .equals(serviceCombConfigProperties.getServiceName())) {\n+            versionList.add(kvDoc);\n+          }\n+        }\n+      }\n+    }\n+    //kv is priority\n+    for (KVDoc kvDoc : appList) {\n+      resultMap.putAll(processValueType(kvDoc));\n+    }\n+    for (KVDoc kvDoc : serviceList) {\n+      resultMap.putAll(processValueType(kvDoc));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc2NDE1OA==", "bodyText": "seems not easy to refactory", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/230#discussion_r455764158", "createdAt": "2020-07-16T12:55:53Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-config/src/main/java/com/huaweicloud/config/client/KieClient.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package com.huaweicloud.config.client;\n+\n+import com.huaweicloud.common.exception.RemoteOperationException;\n+import com.huaweicloud.common.exception.ServiceCombRuntimeException;\n+import com.huaweicloud.common.transport.HttpTransport;\n+import com.huaweicloud.common.transport.Response;\n+import com.huaweicloud.config.ServiceCombConfigProperties;\n+import com.huaweicloud.config.model.KVDoc;\n+import com.huaweicloud.config.model.KVResponse;\n+import com.huaweicloud.config.model.ValueType;\n+import java.io.StringReader;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.http.HttpStatus;\n+import org.apache.servicecomb.foundation.common.utils.JsonUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * @Author GuoYl123\n+ * @Date 2020/7/14\n+ **/\n+public class KieClient extends ServiceCombConfigClient {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(KieClient.class);\n+\n+\n+  private AtomicBoolean isFirst = new AtomicBoolean(true);\n+\n+  public KieClient(String urls,\n+      HttpTransport httpTransport) {\n+    super(urls, httpTransport);\n+  }\n+\n+  public Map<String, String> loadAll(ServiceCombConfigProperties serviceCombConfigProperties,\n+      String project) throws RemoteOperationException {\n+    project = project != null && !project.isEmpty() ? project : ConfigConstants.DEFAULT_PROJECT;\n+    boolean isWatch = false;\n+    if (serviceCombConfigProperties.getEnableLongPolling()) {\n+      isWatch = true;\n+    }\n+    Response response = null;\n+    try {\n+      String stringBuilder = configCenterConfig.getUrl()\n+          + \"/\"\n+          + ConfigConstants.DEFAULT_KIE_API_VERSION\n+          + \"/\"\n+          + project\n+          + \"/kie/kv?label=app:\"\n+          + serviceCombConfigProperties.getAppName()\n+          + \"&revision=\"\n+          + revision;\n+      if (isWatch && !isFirst.get()) {\n+        stringBuilder +=\n+            \"&wait=\" + serviceCombConfigProperties.getWatch().getPollingWaitTimeInSeconds() + \"s\";\n+      }\n+      isFirst.compareAndSet(true, false);\n+      response = httpTransport.sendGetRequest(stringBuilder);\n+      if (response == null) {\n+        return null;\n+      }\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        revision = response.getHeader(\"X-Kie-Revision\");\n+        LOGGER.debug(response.getContent());\n+        KVResponse allConfigList = JsonUtils.OBJ_MAPPER\n+            .readValue(response.getContent(), KVResponse.class);\n+        return getConfigByLabel(serviceCombConfigProperties, allConfigList);\n+      } else if (response.getStatusCode() == HttpStatus.SC_BAD_REQUEST) {\n+        LOGGER.info(response.getStatusMessage());\n+        return null;\n+      } else if (response.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {\n+        return null;\n+      } else {\n+        throw new RemoteOperationException(\n+            \"read response failed. status:\" + response.getStatusCode() + \"; message:\" + response\n+                .getStatusMessage() + \"; content:\" + response.getContent());\n+      }\n+    } catch (Exception e) {\n+      configCenterConfig.toggle();\n+      throw new RemoteOperationException(\"read response failed. \" + response, e);\n+    }\n+  }\n+\n+\n+  private Map<String, String> getConfigByLabel(\n+      ServiceCombConfigProperties serviceCombConfigProperties, KVResponse resp) {\n+    Map<String, String> resultMap = new HashMap<>();\n+    List<KVDoc> appList = new ArrayList<>();\n+    List<KVDoc> serviceList = new ArrayList<>();\n+    List<KVDoc> versionList = new ArrayList<>();\n+    for (KVDoc kvDoc : resp.getData()) {\n+      if (!StringUtils.isEmpty(kvDoc.getStatus()) && !kvDoc.getStatus()\n+          .equals(ConfigConstants.STATUS_ENABLED)) {\n+        continue;\n+      }\n+      Map<String, String> labelsMap = kvDoc.getLabels();\n+      if (labelsMap.containsKey(ConfigConstants.LABEL_APP) && labelsMap\n+          .get(ConfigConstants.LABEL_APP)\n+          .equals(serviceCombConfigProperties.getAppName())\n+          && labelsMap.containsKey(ConfigConstants.LABEL_ENV) && labelsMap\n+          .get(ConfigConstants.LABEL_ENV)\n+          .equals(serviceCombConfigProperties.getEnv())) {\n+        if (!labelsMap.containsKey(ConfigConstants.LABEL_SERVICE)) {\n+          appList.add(kvDoc);\n+        }\n+        if (labelsMap.containsKey(ConfigConstants.LABEL_SERVICE) && labelsMap\n+            .get(ConfigConstants.LABEL_SERVICE)\n+            .equals(serviceCombConfigProperties.getServiceName())) {\n+          if (!kvDoc.getLabels().containsKey(ConfigConstants.LABEL_VERSION)) {\n+            serviceList.add(kvDoc);\n+          }\n+          if (labelsMap.containsKey(ConfigConstants.LABEL_VERSION) && labelsMap\n+              .get(ConfigConstants.LABEL_VERSION)\n+              .equals(serviceCombConfigProperties.getServiceName())) {\n+            versionList.add(kvDoc);\n+          }\n+        }\n+      }\n+    }\n+    //kv is priority\n+    for (KVDoc kvDoc : appList) {\n+      resultMap.putAll(processValueType(kvDoc));\n+    }\n+    for (KVDoc kvDoc : serviceList) {\n+      resultMap.putAll(processValueType(kvDoc));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU0MjI4Mg=="}, "originalCommit": {"oid": "24090e3aae771160a90892463d6c93ffc08602ff"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1931, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}