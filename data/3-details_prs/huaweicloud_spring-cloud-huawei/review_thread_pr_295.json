{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMzIxNjM4", "number": 295, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo0NToyNFrOE5UhyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoyMjozOFrOE6fzZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTQwNjE2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-servicecomb-discovery/src/test/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatSchedulerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo0NToyNFrOHzs_4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo0NToyNFrOHzs_4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3NjY3Mg==", "bodyText": "\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6ca1\u6709\u4efb\u4f55\u6709\u6548\u7684\u68c0\u67e5\uff0c\u5efa\u8bae\u5220\u9664\u3002", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/295#discussion_r523976672", "createdAt": "2020-11-16T08:45:24Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/test/java/com/huaweicloud/servicecomb/discovery/registry/HeartbeatSchedulerTest.java", "diffHunk": "@@ -33,19 +35,14 @@\n   @Injectable\n   ServiceCombClient serviceCombClient;\n \n-  @Injectable\n-  ServiceCombDiscoveryProperties serviceCombDiscoveryProperties;\n-\n-  @Injectable\n-  TagsProperties tagsProperties;\n+  ServiceCombDiscoveryProperties serviceCombDiscoveryProperties = new ServiceCombDiscoveryProperties();\n \n   @Test\n   public void addAndRemove() {\n     serviceCombDiscoveryProperties.setHealthCheckInterval(10);\n-    HeartbeatScheduler heartbeatScheduler = new HeartbeatScheduler(serviceCombDiscoveryProperties,\n-        serviceCombClient, tagsProperties);\n+    HeartbeatScheduler heartbeatScheduler = new HeartbeatScheduler(serviceCombDiscoveryProperties, serviceCombClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6e8f362bafa0fe608bd825e0a2e3d9b1b68b85"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTQxMDUzOnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-servicecomb-discovery/src/test/java/com/huaweicloud/servicecomb/discovery/client/ServiceCombClientTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo0NjozMlrOHztCeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTozMzowNVrOH2JD-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3NzMzNg==", "bodyText": "\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6ca1\u6709\u4efb\u4f55\u6709\u6548\u68c0\u67e5\u3002", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/295#discussion_r523977336", "createdAt": "2020-11-16T08:46:32Z", "author": {"login": "liubao68"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/test/java/com/huaweicloud/servicecomb/discovery/client/ServiceCombClientTest.java", "diffHunk": "@@ -234,7 +235,7 @@ public void heartbeat(@Injectable\n       }\n     };\n     ServiceCombClient serviceCombClient = new ServiceCombClient(url, httpTransport);\n-    serviceCombClient.heartbeat(heartbeatRequest);\n+    serviceCombClient.heartbeat(\"1\", \"2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a6e8f362bafa0fe608bd825e0a2e3d9b1b68b85"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzMzYyNA==", "bodyText": "\u589e\u52a0check", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/295#discussion_r526533624", "createdAt": "2020-11-19T01:33:05Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/test/java/com/huaweicloud/servicecomb/discovery/client/ServiceCombClientTest.java", "diffHunk": "@@ -234,7 +235,7 @@ public void heartbeat(@Injectable\n       }\n     };\n     ServiceCombClient serviceCombClient = new ServiceCombClient(url, httpTransport);\n-    serviceCombClient.heartbeat(heartbeatRequest);\n+    serviceCombClient.heartbeat(\"1\", \"2\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3NzMzNg=="}, "originalCommit": {"oid": "4a6e8f362bafa0fe608bd825e0a2e3d9b1b68b85"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzY5MjU3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/ServiceCombServiceRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoxMTozNFrOH1mYAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTozMjoyOFrOH2JDPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NTMxMw==", "bodyText": "if \u548cif else\u957f\u5f97\u4e00\u6837", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/295#discussion_r525965313", "createdAt": "2020-11-18T10:11:34Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/ServiceCombServiceRegistry.java", "diffHunk": "@@ -120,39 +119,53 @@ private void startWatch() {\n     }\n   }\n \n-  private void loopRegister(ServiceCombRegistration registration) {\n+  private void loopRegister(Microservice microservice) {\n+    while (true) {\n+      if (doRegister(microservice)) {\n+        break;\n+      }\n+    }\n+  }\n+\n+  private Microservice getMicroservice(ServiceCombRegistration registration) {\n     Microservice microservice = RegistryHandler.buildMicroservice(registration);\n     if (serviceCombSwaggerHandler != null) {\n       serviceCombSwaggerHandler.init(serviceCombDiscoveryProperties.getAppName(),\n           serviceCombDiscoveryProperties.getServiceName());\n       microservice.setSchemas(serviceCombSwaggerHandler.getSchemaIds());\n     }\n-    while (true) {\n-      try {\n-        serviceID = serviceCombClient.getServiceId(microservice);\n-        if (null == serviceID) {\n-          serviceID = serviceCombClient.registerMicroservice(microservice);\n-          if (serviceCombSwaggerHandler != null) {\n-            serviceCombSwaggerHandler.registerSwagger(serviceID, microservice.getSchemas());\n-          }\n-        } else if (serviceCombSwaggerHandler != null) {\n-          List<String> schemas = filterSchema(serviceCombSwaggerHandler.getSchemasSummaryMap());\n-          serviceCombSwaggerHandler.registerSwagger(serviceID, schemas);\n-        }\n-        MicroserviceInstance microserviceInstance = RegistryHandler\n-            .buildMicroServiceInstances(serviceID, microservice, serviceCombDiscoveryProperties,\n-                tagsProperties);\n-        instanceID = serviceCombClient.registerInstance(microserviceInstance);\n-        if (null != instanceID) {\n-          serviceCombClient.autoDiscovery(serviceCombDiscoveryProperties.isAutoDiscovery());\n-          break;\n+    return microservice;\n+  }\n+\n+  private boolean doRegister(Microservice microservice) {\n+    try {\n+      serviceID = serviceCombClient.getServiceId(microservice);\n+      if (null == serviceID) {\n+        serviceID = serviceCombClient.registerMicroservice(microservice);\n+        if (serviceCombSwaggerHandler != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5109f7dd286ab3e60616ca79d7c7448f92bef3a5"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzMzQzOQ==", "bodyText": "\u5b9e\u9645\u4e0d\u5728\u540c\u4e00\u5c42\u7ea7\uff0c\u903b\u8f91\u6ca1\u95ee\u9898\uff1b\n\u4f46\u786e\u5b9e\u4e0d\u6613\u8bfb\uff0c\u53ef\u4ee5\u4f18\u5316\u4e0b", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/295#discussion_r526533439", "createdAt": "2020-11-19T01:32:28Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/ServiceCombServiceRegistry.java", "diffHunk": "@@ -120,39 +119,53 @@ private void startWatch() {\n     }\n   }\n \n-  private void loopRegister(ServiceCombRegistration registration) {\n+  private void loopRegister(Microservice microservice) {\n+    while (true) {\n+      if (doRegister(microservice)) {\n+        break;\n+      }\n+    }\n+  }\n+\n+  private Microservice getMicroservice(ServiceCombRegistration registration) {\n     Microservice microservice = RegistryHandler.buildMicroservice(registration);\n     if (serviceCombSwaggerHandler != null) {\n       serviceCombSwaggerHandler.init(serviceCombDiscoveryProperties.getAppName(),\n           serviceCombDiscoveryProperties.getServiceName());\n       microservice.setSchemas(serviceCombSwaggerHandler.getSchemaIds());\n     }\n-    while (true) {\n-      try {\n-        serviceID = serviceCombClient.getServiceId(microservice);\n-        if (null == serviceID) {\n-          serviceID = serviceCombClient.registerMicroservice(microservice);\n-          if (serviceCombSwaggerHandler != null) {\n-            serviceCombSwaggerHandler.registerSwagger(serviceID, microservice.getSchemas());\n-          }\n-        } else if (serviceCombSwaggerHandler != null) {\n-          List<String> schemas = filterSchema(serviceCombSwaggerHandler.getSchemasSummaryMap());\n-          serviceCombSwaggerHandler.registerSwagger(serviceID, schemas);\n-        }\n-        MicroserviceInstance microserviceInstance = RegistryHandler\n-            .buildMicroServiceInstances(serviceID, microservice, serviceCombDiscoveryProperties,\n-                tagsProperties);\n-        instanceID = serviceCombClient.registerInstance(microserviceInstance);\n-        if (null != instanceID) {\n-          serviceCombClient.autoDiscovery(serviceCombDiscoveryProperties.isAutoDiscovery());\n-          break;\n+    return microservice;\n+  }\n+\n+  private boolean doRegister(Microservice microservice) {\n+    try {\n+      serviceID = serviceCombClient.getServiceId(microservice);\n+      if (null == serviceID) {\n+        serviceID = serviceCombClient.registerMicroservice(microservice);\n+        if (serviceCombSwaggerHandler != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NTMxMw=="}, "originalCommit": {"oid": "5109f7dd286ab3e60616ca79d7c7448f92bef3a5"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzczOTI2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/ServiceCombServiceRegistry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoyMjozOFrOH1m0aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTozODo0OVrOH2JLNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3MjU4NQ==", "bodyText": "\u8fd9\u91cc\u65e0\u9650\u91cd\u8bd5\u4e0b\u53bb\uff1f\u4f55\u65f6\u7ec8\u6b62", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/295#discussion_r525972585", "createdAt": "2020-11-18T10:22:38Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/ServiceCombServiceRegistry.java", "diffHunk": "@@ -94,21 +94,20 @@ public void register(ServiceCombRegistration registration) {\n   private void asyncRegister(ServiceCombRegistration registration) {\n     EXECUTOR.execute(() -> {\n       try {\n-        loopRegister(registration);\n-        RegisterCache.setInstanceID(instanceID);\n-        RegisterCache.setServiceID(serviceID);\n-        if (serviceCombDiscoveryProperties.isWatch()) {\n-          startWatch();\n-        }\n-        LOGGER.info(\"register success,instanceID=\" + instanceID + \";serviceID=\" + serviceID);\n-        heartbeatScheduler.add(registration);\n+        Microservice microservice = getMicroservice(registration);\n+        loopRegister(microservice);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5109f7dd286ab3e60616ca79d7c7448f92bef3a5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNjc3MA==", "bodyText": "\u5b9e\u4f8b\u6ce8\u518c\u6210\u529f\u5c31\u4f1a\u7ec8\u6b62\uff0c\u5982\u679c\u6ca1\u6210\u529f\u5c31\u4e00\u76f4\u91cd\u8bd5\uff0c\u56e0\u4e3a\u662f\u5f02\u6b65\u6267\u884c\uff0c\u6240\u4ee5\u4e0d\u963b\u585e\u4e3b\u7ebf\u7a0b", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/295#discussion_r526526770", "createdAt": "2020-11-19T01:11:36Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/ServiceCombServiceRegistry.java", "diffHunk": "@@ -94,21 +94,20 @@ public void register(ServiceCombRegistration registration) {\n   private void asyncRegister(ServiceCombRegistration registration) {\n     EXECUTOR.execute(() -> {\n       try {\n-        loopRegister(registration);\n-        RegisterCache.setInstanceID(instanceID);\n-        RegisterCache.setServiceID(serviceID);\n-        if (serviceCombDiscoveryProperties.isWatch()) {\n-          startWatch();\n-        }\n-        LOGGER.info(\"register success,instanceID=\" + instanceID + \";serviceID=\" + serviceID);\n-        heartbeatScheduler.add(registration);\n+        Microservice microservice = getMicroservice(registration);\n+        loopRegister(microservice);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3MjU4NQ=="}, "originalCommit": {"oid": "5109f7dd286ab3e60616ca79d7c7448f92bef3a5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzNTQ3OA==", "bodyText": "\u55ef\u91cd\u8bd5\u8981\u505a\u9000\u8ba9\u7b97\u6cd5\u4fdd\u62a4", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/295#discussion_r526535478", "createdAt": "2020-11-19T01:38:49Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-servicecomb-discovery/src/main/java/com/huaweicloud/servicecomb/discovery/registry/ServiceCombServiceRegistry.java", "diffHunk": "@@ -94,21 +94,20 @@ public void register(ServiceCombRegistration registration) {\n   private void asyncRegister(ServiceCombRegistration registration) {\n     EXECUTOR.execute(() -> {\n       try {\n-        loopRegister(registration);\n-        RegisterCache.setInstanceID(instanceID);\n-        RegisterCache.setServiceID(serviceID);\n-        if (serviceCombDiscoveryProperties.isWatch()) {\n-          startWatch();\n-        }\n-        LOGGER.info(\"register success,instanceID=\" + instanceID + \";serviceID=\" + serviceID);\n-        heartbeatScheduler.add(registration);\n+        Microservice microservice = getMicroservice(registration);\n+        loopRegister(microservice);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk3MjU4NQ=="}, "originalCommit": {"oid": "5109f7dd286ab3e60616ca79d7c7448f92bef3a5"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1963, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}