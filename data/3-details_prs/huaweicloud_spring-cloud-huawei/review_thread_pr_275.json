{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNTczOTQ2", "number": 275, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxMzo0NlrOEyRg8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0NjowOFrOEywJlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTUxMjE2OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-sample/governance-demo/consumer/src/main/resources/application.yaml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoxMzo0NlrOHo0dQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMToxMDoyN1rOHpWbgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NDU0Nw==", "bodyText": "maxAttempts\u65e0\u6cd5\u8868\u8fbe\u91cd\u8bd5\u884c\u4e3a\u662f\u57fa\u4e8e\u7528\u540c\u4e00\u4e2aendpoint\u91cd\u8bd5\u8fd8\u662flb\u4e2d\u518dselect\u4e00\u4e2a\u91cd\u8bd5", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r512564547", "createdAt": "2020-10-27T10:13:46Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-sample/governance-demo/consumer/src/main/resources/application.yaml", "diffHunk": "@@ -21,4 +21,8 @@ servicecomb:\n   rateLimiting:\n     xxxxx: |\n       match: demo-mark\n-      rate: 1\n\\ No newline at end of file\n+      rate: 1\n+  retry:\n+    xxx: |\n+      match: none\n+      maxAttempts: 3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d419ac3c1700b5d8068330f7124b2e247998dd0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwODE0MA==", "bodyText": "\u76ee\u524d\u662f\u8fd9\u6837\u8bbe\u8ba1\nretry:\n  onsame: true/false\n  maxAttempts: 3\n\u5f53\u524d\u903b\u8f91\uff1a\nonsame\u5173\u95ed(\u9ed8\u8ba4\u5173\u95ed)\uff0c\u5c3d\u91cf\u9009\u62e9\u4e0d\u540c\u5b9e\u4f8b(\u662f\u5c3d\u91cf\uff0c\u5982\u679c\u6ca1\u6709\u5176\u4ed6\u5b9e\u4f8b\uff0c\u4e5f\u4f1a\u9009\u62e9\u8bf7\u6c42\u8fc7\u7684\u5b9e\u4f8b)\uff1b\nonsame\u5f00\u542f\uff0c\u4f1a\u9009\u62e9\u540c\u4e00\u5b9e\u4f8b\u91cd\u8bd5\u3002", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r512608140", "createdAt": "2020-10-27T11:19:35Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-sample/governance-demo/consumer/src/main/resources/application.yaml", "diffHunk": "@@ -21,4 +21,8 @@ servicecomb:\n   rateLimiting:\n     xxxxx: |\n       match: demo-mark\n-      rate: 1\n\\ No newline at end of file\n+      rate: 1\n+  retry:\n+    xxx: |\n+      match: none\n+      maxAttempts: 3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NDU0Nw=="}, "originalCommit": {"oid": "1d419ac3c1700b5d8068330f7124b2e247998dd0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyMTE1Mg==", "bodyText": "maxAttempts \u7b80\u5316\u4e3aattempts", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513121152", "createdAt": "2020-10-28T01:10:27Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-sample/governance-demo/consumer/src/main/resources/application.yaml", "diffHunk": "@@ -21,4 +21,8 @@ servicecomb:\n   rateLimiting:\n     xxxxx: |\n       match: demo-mark\n-      rate: 1\n\\ No newline at end of file\n+      rate: 1\n+  retry:\n+    xxx: |\n+      match: none\n+      maxAttempts: 3", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2NDU0Nw=="}, "originalCommit": {"oid": "1d419ac3c1700b5d8068330f7124b2e247998dd0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTUzOTA5OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-sample/governance-demo/consumer/src/main/resources/application.yaml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMDoyMDoyOFrOHo0tyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwMTowOToxMlrOHpWZ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODc3OA==", "bodyText": "retry\u662f\u9519\u8bef\u53d1\u751f\u65f6\u7684\u5904\u7406\u624b\u6bb5\uff0c\u4e0d\u8be5\u662f\u6cbb\u7406\u7c7b\u578b\uff0c\u5bb9\u9519\u624d\u662f\u6cbb\u7406\u7c7b\u578b", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r512568778", "createdAt": "2020-10-27T10:20:28Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-sample/governance-demo/consumer/src/main/resources/application.yaml", "diffHunk": "@@ -21,4 +21,8 @@ servicecomb:\n   rateLimiting:\n     xxxxx: |\n       match: demo-mark\n-      rate: 1\n\\ No newline at end of file\n+      rate: 1\n+  retry:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d419ac3c1700b5d8068330f7124b2e247998dd0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3MDM2NA==", "bodyText": "\u53ef\u80fd\u9700\u8981\u5728LB\u4e2d\u91cd\u65b0\u8fdb\u884cselect\n\u7c7b\u578b\u53ebfaultTolerance\n\u914d\u7f6e\u9879\nretry:\n  on: {next|same}\n  attempts: 3", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r512570364", "createdAt": "2020-10-27T10:22:59Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-sample/governance-demo/consumer/src/main/resources/application.yaml", "diffHunk": "@@ -21,4 +21,8 @@ servicecomb:\n   rateLimiting:\n     xxxxx: |\n       match: demo-mark\n-      rate: 1\n\\ No newline at end of file\n+      rate: 1\n+  retry:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODc3OA=="}, "originalCommit": {"oid": "1d419ac3c1700b5d8068330f7124b2e247998dd0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU3NjExNQ==", "bodyText": "\u914d\u7f6e\u9879\u89c4\u5212\u5c31\u8fd9\u6837\uff0c\u53ef\u4ee5\u5148\u652f\u6301attempts\uff0c\u6539\u4e0b\u6cbb\u7406\u7c7b\u578b", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r512576115", "createdAt": "2020-10-27T10:31:47Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-sample/governance-demo/consumer/src/main/resources/application.yaml", "diffHunk": "@@ -21,4 +21,8 @@ servicecomb:\n   rateLimiting:\n     xxxxx: |\n       match: demo-mark\n-      rate: 1\n\\ No newline at end of file\n+      rate: 1\n+  retry:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODc3OA=="}, "originalCommit": {"oid": "1d419ac3c1700b5d8068330f7124b2e247998dd0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxMzY3Mg==", "bodyText": "\u611f\u89c9\u5e7f\u4e49\u4e0a'\u91cd\u8bd5'\u7684\u6982\u5ff5\u66f4\u5bb9\u6613\u63a5\u53d7\uff0c\u4e0d\u7ba1\u662fsentinel\u8fd8\u662fresilience4j\u7684\u63cf\u8ff0\u90fd\u662f\u91cd\u8bd5\u3002\nservicecomb\u76ee\u524d\u7684\u5bb9\u9519\u7684\u5168\u90e8\u5185\u5bb9\u5176\u5b9e\u5c31\u662f\u91cd\u8bd5\uff0c\u8fd8\u6709\u7406\u89e3\u6210\u672c\uff0c\u611f\u89c9\u8fd8\u4e0d\u5982\u76f4\u63a5\u53eb\u91cd\u8bd5\u3002", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r512613672", "createdAt": "2020-10-27T11:29:28Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-sample/governance-demo/consumer/src/main/resources/application.yaml", "diffHunk": "@@ -21,4 +21,8 @@ servicecomb:\n   rateLimiting:\n     xxxxx: |\n       match: demo-mark\n-      rate: 1\n\\ No newline at end of file\n+      rate: 1\n+  retry:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODc3OA=="}, "originalCommit": {"oid": "1d419ac3c1700b5d8068330f7124b2e247998dd0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzEyMDc2Ng==", "bodyText": "\u597d", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513120766", "createdAt": "2020-10-28T01:09:12Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-sample/governance-demo/consumer/src/main/resources/application.yaml", "diffHunk": "@@ -21,4 +21,8 @@ servicecomb:\n   rateLimiting:\n     xxxxx: |\n       match: demo-mark\n-      rate: 1\n\\ No newline at end of file\n+      rate: 1\n+  retry:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU2ODc3OA=="}, "originalCommit": {"oid": "1d419ac3c1700b5d8068330f7124b2e247998dd0"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjA2MTQ0OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODo1MDo1M1rOHpflKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0NzowNVrOHpkI-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3MTA4MA==", "bodyText": "\u90a3\u4e48\u5982\u4f55\u533a\u5206\u5355\u4f4d\u5462", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513271080", "createdAt": "2020-10-28T08:50:53Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java", "diffHunk": "@@ -21,56 +21,58 @@\n \n import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;\n-import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.SlidingWindowType;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n-import io.github.resilience4j.decorators.Decorators.DecorateSupplier;\n+import io.github.resilience4j.decorators.Decorators.DecorateCheckedSupplier;\n+\n import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * @Author GuoYl123\n  * @Date 2020/5/11\n  **/\n public class CircuitBreakerHandler implements GovHandler {\n \n+  private Map<String, CircuitBreaker> map = new HashMap<>();\n+\n   @Override\n-  public DecorateSupplier process(DecorateSupplier supplier, Policy policy) {\n+  public DecorateCheckedSupplier process(DecorateCheckedSupplier supplier, Policy policy) {\n     return supplier.withCircuitBreaker(getCircuitBreaker((CircuitBreakerPolicy) policy));\n   }\n \n   /**\n-   * \u9700\u8981\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u907f\u514d\u7528\u6237\u7406\u89e3\u590d\u6742\u914d\u7f6e\uff0c\u540c\u65f6\u63d0\u4f9b\u9ad8\u7ea7\u914d\u7f6e\u529f\u80fd\n+   * todo: recordExceptions\n    *\n    * @param policy\n    * @return\n    */\n   private CircuitBreaker getCircuitBreaker(CircuitBreakerPolicy policy) {\n-    CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n-        //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n-        .failureRateThreshold(50)\n-        //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n-        .slowCallRateThreshold(50)\n-        //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n-        .waitDurationInOpenState(Duration.ofMillis(1000))\n-        //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n-        .slowCallDurationThreshold(Duration.ofSeconds(2))\n-        //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n-        .permittedNumberOfCallsInHalfOpenState(3)\n-        //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n-        .minimumNumberOfCalls(10)\n-        //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n-        .slidingWindowType(SlidingWindowType.TIME_BASED)\n-        //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n-        .slidingWindowSize(5)\n-        .build();\n-\n-// Create a CircuitBreakerRegistry with a custom global configuration\n-    CircuitBreakerRegistry circuitBreakerRegistry =\n-        CircuitBreakerRegistry.of(circuitBreakerConfig);\n-\n-// Get or create a CircuitBreaker from the CircuitBreakerRegistry\n-// with a custom configuration\n-    CircuitBreaker circuitBreakerWithCustomConfig = circuitBreakerRegistry\n-        .circuitBreaker(policy.name(), circuitBreakerConfig);\n-    return circuitBreakerWithCustomConfig;\n+    CircuitBreaker circuitBreaker = map.get(policy.name());\n+    if (circuitBreaker == null) {\n+      CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n+          //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n+          .failureRateThreshold(policy.getFailureRateThreshold())\n+          //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n+          .slowCallRateThreshold(policy.getSlowCallRateThreshold())\n+          //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n+          .waitDurationInOpenState(Duration.ofMillis(policy.getWaitDurationInOpenState()))\n+          //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n+          .slowCallDurationThreshold(Duration.ofMillis(policy.getSlowCallDurationThreshold()))\n+          //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n+          .permittedNumberOfCallsInHalfOpenState(policy.getPermittedNumberOfCallsInHalfOpenState())\n+          //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n+          .minimumNumberOfCalls(policy.getMinimumNumberOfCalls())\n+          //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n+          .slidingWindowType(policy.getSlidingWindowType())\n+          //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n+          .slidingWindowSize(policy.getSlidingWindowSize())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4432a8e1bbe58b2df586ad2064b138d1dce1180"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4MzcyOQ==", "bodyText": "resilience4j\u5b9a\u6b7b\u7684\uff0c\u53ea\u80fd\u662f\u79d2", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513283729", "createdAt": "2020-10-28T09:11:08Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java", "diffHunk": "@@ -21,56 +21,58 @@\n \n import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;\n-import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.SlidingWindowType;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n-import io.github.resilience4j.decorators.Decorators.DecorateSupplier;\n+import io.github.resilience4j.decorators.Decorators.DecorateCheckedSupplier;\n+\n import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * @Author GuoYl123\n  * @Date 2020/5/11\n  **/\n public class CircuitBreakerHandler implements GovHandler {\n \n+  private Map<String, CircuitBreaker> map = new HashMap<>();\n+\n   @Override\n-  public DecorateSupplier process(DecorateSupplier supplier, Policy policy) {\n+  public DecorateCheckedSupplier process(DecorateCheckedSupplier supplier, Policy policy) {\n     return supplier.withCircuitBreaker(getCircuitBreaker((CircuitBreakerPolicy) policy));\n   }\n \n   /**\n-   * \u9700\u8981\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u907f\u514d\u7528\u6237\u7406\u89e3\u590d\u6742\u914d\u7f6e\uff0c\u540c\u65f6\u63d0\u4f9b\u9ad8\u7ea7\u914d\u7f6e\u529f\u80fd\n+   * todo: recordExceptions\n    *\n    * @param policy\n    * @return\n    */\n   private CircuitBreaker getCircuitBreaker(CircuitBreakerPolicy policy) {\n-    CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n-        //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n-        .failureRateThreshold(50)\n-        //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n-        .slowCallRateThreshold(50)\n-        //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n-        .waitDurationInOpenState(Duration.ofMillis(1000))\n-        //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n-        .slowCallDurationThreshold(Duration.ofSeconds(2))\n-        //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n-        .permittedNumberOfCallsInHalfOpenState(3)\n-        //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n-        .minimumNumberOfCalls(10)\n-        //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n-        .slidingWindowType(SlidingWindowType.TIME_BASED)\n-        //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n-        .slidingWindowSize(5)\n-        .build();\n-\n-// Create a CircuitBreakerRegistry with a custom global configuration\n-    CircuitBreakerRegistry circuitBreakerRegistry =\n-        CircuitBreakerRegistry.of(circuitBreakerConfig);\n-\n-// Get or create a CircuitBreaker from the CircuitBreakerRegistry\n-// with a custom configuration\n-    CircuitBreaker circuitBreakerWithCustomConfig = circuitBreakerRegistry\n-        .circuitBreaker(policy.name(), circuitBreakerConfig);\n-    return circuitBreakerWithCustomConfig;\n+    CircuitBreaker circuitBreaker = map.get(policy.name());\n+    if (circuitBreaker == null) {\n+      CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n+          //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n+          .failureRateThreshold(policy.getFailureRateThreshold())\n+          //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n+          .slowCallRateThreshold(policy.getSlowCallRateThreshold())\n+          //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n+          .waitDurationInOpenState(Duration.ofMillis(policy.getWaitDurationInOpenState()))\n+          //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n+          .slowCallDurationThreshold(Duration.ofMillis(policy.getSlowCallDurationThreshold()))\n+          //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n+          .permittedNumberOfCallsInHalfOpenState(policy.getPermittedNumberOfCallsInHalfOpenState())\n+          //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n+          .minimumNumberOfCalls(policy.getMinimumNumberOfCalls())\n+          //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n+          .slidingWindowType(policy.getSlidingWindowType())\n+          //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n+          .slidingWindowSize(policy.getSlidingWindowSize())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3MTA4MA=="}, "originalCommit": {"oid": "b4432a8e1bbe58b2df586ad2064b138d1dce1180"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI4NjYyMg==", "bodyText": "\u901a\u8fc7slidingWindowType \u6765\u786e\u5b9a", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513286622", "createdAt": "2020-10-28T09:15:50Z", "author": {"login": "GuoYL123"}, "path": "spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java", "diffHunk": "@@ -21,56 +21,58 @@\n \n import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;\n-import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.SlidingWindowType;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n-import io.github.resilience4j.decorators.Decorators.DecorateSupplier;\n+import io.github.resilience4j.decorators.Decorators.DecorateCheckedSupplier;\n+\n import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * @Author GuoYl123\n  * @Date 2020/5/11\n  **/\n public class CircuitBreakerHandler implements GovHandler {\n \n+  private Map<String, CircuitBreaker> map = new HashMap<>();\n+\n   @Override\n-  public DecorateSupplier process(DecorateSupplier supplier, Policy policy) {\n+  public DecorateCheckedSupplier process(DecorateCheckedSupplier supplier, Policy policy) {\n     return supplier.withCircuitBreaker(getCircuitBreaker((CircuitBreakerPolicy) policy));\n   }\n \n   /**\n-   * \u9700\u8981\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u907f\u514d\u7528\u6237\u7406\u89e3\u590d\u6742\u914d\u7f6e\uff0c\u540c\u65f6\u63d0\u4f9b\u9ad8\u7ea7\u914d\u7f6e\u529f\u80fd\n+   * todo: recordExceptions\n    *\n    * @param policy\n    * @return\n    */\n   private CircuitBreaker getCircuitBreaker(CircuitBreakerPolicy policy) {\n-    CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n-        //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n-        .failureRateThreshold(50)\n-        //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n-        .slowCallRateThreshold(50)\n-        //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n-        .waitDurationInOpenState(Duration.ofMillis(1000))\n-        //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n-        .slowCallDurationThreshold(Duration.ofSeconds(2))\n-        //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n-        .permittedNumberOfCallsInHalfOpenState(3)\n-        //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n-        .minimumNumberOfCalls(10)\n-        //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n-        .slidingWindowType(SlidingWindowType.TIME_BASED)\n-        //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n-        .slidingWindowSize(5)\n-        .build();\n-\n-// Create a CircuitBreakerRegistry with a custom global configuration\n-    CircuitBreakerRegistry circuitBreakerRegistry =\n-        CircuitBreakerRegistry.of(circuitBreakerConfig);\n-\n-// Get or create a CircuitBreaker from the CircuitBreakerRegistry\n-// with a custom configuration\n-    CircuitBreaker circuitBreakerWithCustomConfig = circuitBreakerRegistry\n-        .circuitBreaker(policy.name(), circuitBreakerConfig);\n-    return circuitBreakerWithCustomConfig;\n+    CircuitBreaker circuitBreaker = map.get(policy.name());\n+    if (circuitBreaker == null) {\n+      CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n+          //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n+          .failureRateThreshold(policy.getFailureRateThreshold())\n+          //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n+          .slowCallRateThreshold(policy.getSlowCallRateThreshold())\n+          //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n+          .waitDurationInOpenState(Duration.ofMillis(policy.getWaitDurationInOpenState()))\n+          //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n+          .slowCallDurationThreshold(Duration.ofMillis(policy.getSlowCallDurationThreshold()))\n+          //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n+          .permittedNumberOfCallsInHalfOpenState(policy.getPermittedNumberOfCallsInHalfOpenState())\n+          //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n+          .minimumNumberOfCalls(policy.getMinimumNumberOfCalls())\n+          //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n+          .slidingWindowType(policy.getSlidingWindowType())\n+          //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n+          .slidingWindowSize(policy.getSlidingWindowSize())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3MTA4MA=="}, "originalCommit": {"oid": "b4432a8e1bbe58b2df586ad2064b138d1dce1180"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0NTc4Nw==", "bodyText": "\u53ea\u9700\u8981\u66b4\u9732\u79d2\u7684\u80fd\u529b\uff0c\u4e0d\u8981\u66b4\u9732\u6b21\u6570", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513345787", "createdAt": "2020-10-28T10:47:05Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java", "diffHunk": "@@ -21,56 +21,58 @@\n \n import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;\n-import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.SlidingWindowType;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n-import io.github.resilience4j.decorators.Decorators.DecorateSupplier;\n+import io.github.resilience4j.decorators.Decorators.DecorateCheckedSupplier;\n+\n import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * @Author GuoYl123\n  * @Date 2020/5/11\n  **/\n public class CircuitBreakerHandler implements GovHandler {\n \n+  private Map<String, CircuitBreaker> map = new HashMap<>();\n+\n   @Override\n-  public DecorateSupplier process(DecorateSupplier supplier, Policy policy) {\n+  public DecorateCheckedSupplier process(DecorateCheckedSupplier supplier, Policy policy) {\n     return supplier.withCircuitBreaker(getCircuitBreaker((CircuitBreakerPolicy) policy));\n   }\n \n   /**\n-   * \u9700\u8981\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u907f\u514d\u7528\u6237\u7406\u89e3\u590d\u6742\u914d\u7f6e\uff0c\u540c\u65f6\u63d0\u4f9b\u9ad8\u7ea7\u914d\u7f6e\u529f\u80fd\n+   * todo: recordExceptions\n    *\n    * @param policy\n    * @return\n    */\n   private CircuitBreaker getCircuitBreaker(CircuitBreakerPolicy policy) {\n-    CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n-        //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n-        .failureRateThreshold(50)\n-        //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n-        .slowCallRateThreshold(50)\n-        //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n-        .waitDurationInOpenState(Duration.ofMillis(1000))\n-        //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n-        .slowCallDurationThreshold(Duration.ofSeconds(2))\n-        //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n-        .permittedNumberOfCallsInHalfOpenState(3)\n-        //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n-        .minimumNumberOfCalls(10)\n-        //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n-        .slidingWindowType(SlidingWindowType.TIME_BASED)\n-        //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n-        .slidingWindowSize(5)\n-        .build();\n-\n-// Create a CircuitBreakerRegistry with a custom global configuration\n-    CircuitBreakerRegistry circuitBreakerRegistry =\n-        CircuitBreakerRegistry.of(circuitBreakerConfig);\n-\n-// Get or create a CircuitBreaker from the CircuitBreakerRegistry\n-// with a custom configuration\n-    CircuitBreaker circuitBreakerWithCustomConfig = circuitBreakerRegistry\n-        .circuitBreaker(policy.name(), circuitBreakerConfig);\n-    return circuitBreakerWithCustomConfig;\n+    CircuitBreaker circuitBreaker = map.get(policy.name());\n+    if (circuitBreaker == null) {\n+      CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n+          //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n+          .failureRateThreshold(policy.getFailureRateThreshold())\n+          //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n+          .slowCallRateThreshold(policy.getSlowCallRateThreshold())\n+          //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n+          .waitDurationInOpenState(Duration.ofMillis(policy.getWaitDurationInOpenState()))\n+          //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n+          .slowCallDurationThreshold(Duration.ofMillis(policy.getSlowCallDurationThreshold()))\n+          //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n+          .permittedNumberOfCallsInHalfOpenState(policy.getPermittedNumberOfCallsInHalfOpenState())\n+          //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n+          .minimumNumberOfCalls(policy.getMinimumNumberOfCalls())\n+          //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n+          .slidingWindowType(policy.getSlidingWindowType())\n+          //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n+          .slidingWindowSize(policy.getSlidingWindowSize())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3MTA4MA=="}, "originalCommit": {"oid": "b4432a8e1bbe58b2df586ad2064b138d1dce1180"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjA5MTM3OnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODo1ODowNFrOHpf28A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwODo1ODowNFrOHpf28A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI3NTYzMg==", "bodyText": "I noticed that some notes are in Chinese and some are in English. Is it necessary to unify the language of description?", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513275632", "createdAt": "2020-10-28T08:58:04Z", "author": {"login": "develpoerX"}, "path": "spring-cloud-huawei-governance/src/main/java/com/huaweicloud/governance/handler/CircuitBreakerHandler.java", "diffHunk": "@@ -21,56 +21,58 @@\n \n import io.github.resilience4j.circuitbreaker.CircuitBreaker;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig;\n-import io.github.resilience4j.circuitbreaker.CircuitBreakerConfig.SlidingWindowType;\n import io.github.resilience4j.circuitbreaker.CircuitBreakerRegistry;\n-import io.github.resilience4j.decorators.Decorators.DecorateSupplier;\n+import io.github.resilience4j.decorators.Decorators.DecorateCheckedSupplier;\n+\n import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * @Author GuoYl123\n  * @Date 2020/5/11\n  **/\n public class CircuitBreakerHandler implements GovHandler {\n \n+  private Map<String, CircuitBreaker> map = new HashMap<>();\n+\n   @Override\n-  public DecorateSupplier process(DecorateSupplier supplier, Policy policy) {\n+  public DecorateCheckedSupplier process(DecorateCheckedSupplier supplier, Policy policy) {\n     return supplier.withCircuitBreaker(getCircuitBreaker((CircuitBreakerPolicy) policy));\n   }\n \n   /**\n-   * \u9700\u8981\u63d0\u4f9b\u9ed8\u8ba4\u503c\uff0c\u907f\u514d\u7528\u6237\u7406\u89e3\u590d\u6742\u914d\u7f6e\uff0c\u540c\u65f6\u63d0\u4f9b\u9ad8\u7ea7\u914d\u7f6e\u529f\u80fd\n+   * todo: recordExceptions\n    *\n    * @param policy\n    * @return\n    */\n   private CircuitBreaker getCircuitBreaker(CircuitBreakerPolicy policy) {\n-    CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n-        //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n-        .failureRateThreshold(50)\n-        //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n-        .slowCallRateThreshold(50)\n-        //\u4ece\u5f00\u8fc7\u6e21\u5230\u534a\u5f00\u7684\u7b49\u5f85\u65f6\u95f4\n-        .waitDurationInOpenState(Duration.ofMillis(1000))\n-        //\u8bf7\u6c42\u65f6\u95f4\u5b9a\u4e49\n-        .slowCallDurationThreshold(Duration.ofSeconds(2))\n-        //\u8fdb\u5165\u534a\u5f00\u72b6\u6001\u65f6 \u5141\u8bb8\u7684\u8bf7\u6c42\u6570\u91cf\n-        .permittedNumberOfCallsInHalfOpenState(3)\n-        //\u53ef\u4ee5\u8fbe\u5230\u7194\u65ad\u6761\u4ef6\u7684\u8bf7\u6c42\u6570\u91cf\u4e0b\u9650\n-        .minimumNumberOfCalls(10)\n-        //\u53ef\u4ee5\u9009\u62e9\u57fa\u4e8e\u65f6\u95f4\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\u6216\u8005\u57fa\u4e8e\u8bf7\u6c42\u6570\u91cf\u7684\u6ed1\u52a8\u7a97\u53e3\u8ba1\u6570\n-        .slidingWindowType(SlidingWindowType.TIME_BASED)\n-        //\u6ed1\u52a8\u7a97\u53e3\uff0c\u5355\u4f4d\u53ef\u80fd\u662f\u8bf7\u6c42\u6570\u6216\u8005\u79d2\n-        .slidingWindowSize(5)\n-        .build();\n-\n-// Create a CircuitBreakerRegistry with a custom global configuration\n-    CircuitBreakerRegistry circuitBreakerRegistry =\n-        CircuitBreakerRegistry.of(circuitBreakerConfig);\n-\n-// Get or create a CircuitBreaker from the CircuitBreakerRegistry\n-// with a custom configuration\n-    CircuitBreaker circuitBreakerWithCustomConfig = circuitBreakerRegistry\n-        .circuitBreaker(policy.name(), circuitBreakerConfig);\n-    return circuitBreakerWithCustomConfig;\n+    CircuitBreaker circuitBreaker = map.get(policy.name());\n+    if (circuitBreaker == null) {\n+      CircuitBreakerConfig circuitBreakerConfig = CircuitBreakerConfig.custom()\n+          //\u7194\u65ad \u5931\u8d25\u7387(\u8bf7\u6c42)\u767e\u5206\u6bd4\u9608\u503c\n+          .failureRateThreshold(policy.getFailureRateThreshold())\n+          //\u7194\u65ad \u6162\u8bf7\u6c42\u767e\u5206\u6bd4\u9608\u503c\n+          .slowCallRateThreshold(policy.getSlowCallRateThreshold())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4432a8e1bbe58b2df586ad2064b138d1dce1180"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNjUzMTQyOnYy", "diffSide": "RIGHT", "path": "spring-cloud-huawei-sample/governance-demo/provider/src/main/resources/application.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0NjowOFrOHpkGzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0NjowOFrOHpkGzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0NTIzMQ==", "bodyText": "\u8003\u8651\u4e00\u4e2a\u6700\u5c0f\u5316\u914d\u7f6e\u5427\uff0c\u4e0d\u8981\u8fc7\u591a\u66b4\u9732\u592a\u591a\u4e1c\u897f\uff0c\u53ea\u8981\u6709\u4ee5\u4e0b\u573a\u666f\u5b9a\u4e49\u80fd\u529b\u5c31\u884c\uff1a\n\u5728\u4e00\u4e2ax\u7684\u65f6\u95f4\u7a97\u5185\uff0c\u6536\u5230\u5927\u4e8en\u6b21\u8bf7\u6c42\uff0c\u4ed6\u4eec\u7684\u9519\u8bef\u7387\u8fbe\u5230\u767e\u5206\u4e4by\uff0c\u5219\u89e6\u53d1\u7194\u65ad\n\u9664\u4e86\u8fd9\u4e09\u4e2a\u53c2\u6570\u5176\u4ed6\u4e00\u5f8b\u5148\u4e0d\u8981\u652f\u6301", "url": "https://github.com/huaweicloud/spring-cloud-huawei/pull/275#discussion_r513345231", "createdAt": "2020-10-28T10:46:08Z", "author": {"login": "tianxiaoliang"}, "path": "spring-cloud-huawei-sample/governance-demo/provider/src/main/resources/application.yaml", "diffHunk": "@@ -8,3 +8,14 @@ spring:\n     servicecomb:\n       discovery:\n         address: http://127.0.0.1:30100\n+\n+servicecomb:\n+  match:\n+    demo-circuitBreaker: |\n+      matches:\n+        - apiPath:\n+            exact: \"/circuitBreaker\"\n+  circuitBreaker:\n+    xxx: |\n+      match: demo-circuitBreaker\n+      minimumNumberOfCalls: 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0005737769b0035191a0dfd4ceeb93a9201e2895"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1956, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}