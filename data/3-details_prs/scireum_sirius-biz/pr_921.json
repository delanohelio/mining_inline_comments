{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NTA5MDEx", "number": 921, "title": "Provides some tooling for the VFS: Downloading URLs and auto-extracting VFS roots.", "bodyText": "", "createdAt": "2020-11-24T14:15:46Z", "url": "https://github.com/scireum/sirius-biz/pull/921", "merged": true, "mergeCommit": {"oid": "40455d64a496773f1d6ae7a339dfb83b38938726"}, "closed": true, "closedAt": "2020-11-26T08:18:48Z", "author": {"login": "andyHa"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfqZ9HgH2gAyNTI2NTA5MDExOmY1YTcyNzVhZWRjNjJhMDM2MTJiZjNiMjg5ODg4Mzc1NGM0MzY5NTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdf9poRAFqTUzODQ1MTIzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f5a7275aedc62a03612bf3b2898883754c436953", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/f5a7275aedc62a03612bf3b2898883754c436953", "committedDate": "2020-11-24T14:13:15Z", "message": "Extracts a common helper class to provide a VFSRoot which can start a Job."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6cf244af912ac93c19d90aa2f174c0d3b8aa020", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/a6cf244af912ac93c19d90aa2f174c0d3b8aa020", "committedDate": "2020-11-24T14:13:45Z", "message": "Simplifies shortening a path."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f19e7ccd748e7657b8b0d5ddfb27644b195062f8", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/f19e7ccd748e7657b8b0d5ddfb27644b195062f8", "committedDate": "2020-11-24T14:14:40Z", "message": "Provides a base class to provide a VFSRoot which automatically extracts files into a given destination."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e65c36c445b9960086cca8145c1e7837e2c8b94", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/4e65c36c445b9960086cca8145c1e7837e2c8b94", "committedDate": "2020-11-24T14:15:06Z", "message": "Permits to download an store a given URL as VirtualFile."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTQ1NDI5", "url": "https://github.com/scireum/sirius-biz/pull/921#pullrequestreview-537545429", "createdAt": "2020-11-24T14:28:01Z", "commit": {"oid": "f19e7ccd748e7657b8b0d5ddfb27644b195062f8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyODowMlrOH5DXYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyODowMlrOH5DXYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4NjAxNw==", "bodyText": "rename to createUnarchiveJob or createExtractJob?", "url": "https://github.com/scireum/sirius-biz/pull/921#discussion_r529586017", "createdAt": "2020-11-24T14:28:02Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/storage/layer3/AutoExtractRoot.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer3;\n+\n+import sirius.biz.jobs.JobStartingRoot;\n+import sirius.biz.jobs.presets.JobPreset;\n+import sirius.biz.jobs.presets.JobPresets;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.di.std.Part;\n+\n+import javax.annotation.Nullable;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+/**\n+ * Provides a base class to create a {@link VirtualFileSystem VFS} root which automatically extracts uploaded archives\n+ * like ZIP files.\n+ * <p>\n+ * This is done by automatically starting the {@link ExtractArchiveJob}.\n+ */\n+public abstract class AutoExtractRoot extends JobStartingRoot {\n+\n+    @Part\n+    protected ExtractArchiveJob extractArchiveJob;\n+\n+    @Part\n+    @Nullable\n+    protected JobPresets presets;\n+\n+    @Override\n+    protected void populateRoot(MutableVirtualFile rootDirectory) {\n+        rootDirectory.withChildren(new FindOnlyProvider(this::createUnzipJob));\n+    }\n+\n+    protected VirtualFile createUnzipJob(VirtualFile parent, String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19e7ccd748e7657b8b0d5ddfb27644b195062f8"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTQ3Mzcy", "url": "https://github.com/scireum/sirius-biz/pull/921#pullrequestreview-537547372", "createdAt": "2020-11-24T14:29:57Z", "commit": {"oid": "f5a7275aedc62a03612bf3b2898883754c436953"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyOTo1N1rOH5DdKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDozNDoxOVrOH5Dplg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4NzQ5Nw==", "bodyText": "ctz -> processContext", "url": "https://github.com/scireum/sirius-biz/pull/921#discussion_r529587497", "createdAt": "2020-11-24T14:29:57Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/jobs/JobStartingRoot.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs;\n+\n+import sirius.biz.jobs.params.Parameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.Processes;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer2.Blob;\n+import sirius.biz.storage.layer2.BlobStorage;\n+import sirius.biz.storage.layer2.BlobStorageSpace;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.storage.layer3.SingularVFSRoot;\n+import sirius.biz.storage.layer3.TmpRoot;\n+import sirius.biz.storage.layer3.VirtualFileSystem;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+\n+import java.io.OutputStream;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Provides a base class for all roots which sooner or later start a {@link JobFactory job} for an uploaded file.\n+ */\n+public abstract class JobStartingRoot extends SingularVFSRoot {\n+\n+    @Part\n+    protected BlobStorage blobStorage;\n+\n+    @Part\n+    protected VirtualFileSystem virtualFileSystem;\n+\n+    @Part\n+    protected Processes processes;\n+\n+    /**\n+     * Creates an <tt>OutputStream</tt> which triggers the given job with the given parameters once the stream is closed.\n+     *\n+     * @param jobToRun          the job to actually run\n+     * @param parameterProvider permits to control the parameter values for the job (the file is automatically used as\n+     *                          first {@link FileParameter} of the job)\n+     * @param filename          the actual filename of the file being processed\n+     * @return an output stream which triggers the job once the stream is closed\n+     */\n+    protected OutputStream uploadAndTrigger(JobFactory jobToRun,\n+                                            Function<String, Value> parameterProvider,\n+                                            String filename) {\n+        try {\n+            BlobStorageSpace temporaryStorageSpace = blobStorage.getSpace(TmpRoot.TMP_SPACE);\n+            Blob buffer = temporaryStorageSpace.createTemporaryBlob(UserContext.getCurrentUser().getTenantId());\n+            return buffer.createOutputStream(() -> {\n+                if (buffer.getSize() > 0) {\n+                    temporaryStorageSpace.markAsUsed(buffer);\n+                    trigger(jobToRun, parameterProvider, buffer, filename);\n+                } else {\n+                    buffer.delete();\n+                }\n+            }, filename);\n+        } catch (Exception e) {\n+            throw Exceptions.handle(e);\n+        }\n+    }\n+\n+    private void trigger(JobFactory jobToRun, Function<String, Value> parameterProvider, Blob buffer, String filename) {\n+        processes.executeInStandbyProcessForCurrentTenant(getStandbyProcessType(),\n+                                                          this::getStandbyProcessDescription,\n+                                                          ctx -> triggerInProcess(jobToRun,\n+                                                                                  parameterProvider,\n+                                                                                  buffer,\n+                                                                                  filename,\n+                                                                                  ctx));\n+    }\n+\n+    /**\n+     * Returns the type for the standby process which is used to start the job.\n+     * <p>\n+     * Starting jobs happens in a standy process so that we can log any problems and provide some debiggung capabilities.\n+     *\n+     * @return the type to be used in\n+     * {@link Processes#executeInStandbyProcessForCurrentTenant(String, Supplier, Consumer)}\n+     */\n+    protected abstract String getStandbyProcessType();\n+\n+    /**\n+     * Returns the description for the standby process which is used to start the job.\n+     * <p>\n+     * Starting jobs happens in a standy process so that we can log any problems and provide some debiggung capabilities.\n+     *\n+     * @return the description to be used in\n+     * {@link Processes#executeInStandbyProcessForCurrentTenant(String, Supplier, Consumer)}\n+     */\n+    protected abstract String getStandbyProcessDescription();\n+\n+    private void triggerInProcess(JobFactory jobToRun,\n+                                  Function<String, Value> parameterProvider,\n+                                  Blob buffer,\n+                                  String filename,\n+                                  ProcessContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a7275aedc62a03612bf3b2898883754c436953"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4ODE4Ng==", "bodyText": "No i18n?", "url": "https://github.com/scireum/sirius-biz/pull/921#discussion_r529588186", "createdAt": "2020-11-24T14:30:50Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/jobs/JobsRoot.java", "diffHunk": "@@ -145,77 +123,21 @@ private void listPresets(VirtualFile parent, FileSearch fileSearch) {\n     private VirtualFile unwrapPreset(VirtualFile parent, String name) {\n         JobPreset preset = parent.as(JobPreset.class);\n         MutableVirtualFile result = MutableVirtualFile.checkedCreate(parent, name);\n-        result.withOutputStreamSupplier(uploadFile -> uploadAndTrigger(preset, uploadFile.name()));\n+        result.withOutputStreamSupplier(uploadFile -> {\n+            JobConfigData jobConfigData = preset.getJobConfigData();\n+            return uploadAndTrigger(jobConfigData.getJobFactory(), jobConfigData::fetchParameter, uploadFile.name());\n+        });\n \n         return result;\n     }\n \n-    private OutputStream uploadAndTrigger(JobPreset preset, String filename) {\n-        try {\n-            BlobStorageSpace temporaryStorageSpace = blobStorage.getSpace(TmpRoot.TMP_SPACE);\n-            Blob buffer = temporaryStorageSpace.createTemporaryBlob(UserContext.getCurrentUser().getTenantId());\n-            return buffer.createOutputStream(() -> {\n-                if (buffer.getSize() > 0) {\n-                    temporaryStorageSpace.markAsUsed(buffer);\n-                    trigger(preset, buffer, filename);\n-                } else {\n-                    buffer.delete();\n-                }\n-            }, filename);\n-        } catch (Exception e) {\n-            throw Exceptions.handle(e);\n-        }\n-    }\n-\n-    private void trigger(JobPreset preset, Blob buffer, String filename) {\n-        processes.executeInStandbyProcessForCurrentTenant(\"biz-jobs-root\",\n-                                                          () -> \"/jobs Uploads\",\n-                                                          ctx -> triggerInProcess(preset, buffer, filename, ctx));\n-    }\n-\n-    private void triggerInProcess(JobPreset preset, Blob buffer, String filename, ProcessContext ctx) {\n-        if (ctx.isDebugging()) {\n-            ctx.debug(ProcessLog.info()\n-                                .withFormattedMessage(\n-                                        \"Starting preset '%s' for job '%s' and user '%s' using the uploaded file '%s' (%s')\",\n-                                        preset.getJobConfigData().getLabel(),\n-                                        preset.getJobConfigData().getJobName(),\n-                                        UserContext.getCurrentUser().getUserName(),\n-                                        buffer.getFilename(),\n-                                        NLS.formatSize(buffer.getSize())));\n-        }\n-\n-        String parameterName = findFileParameter(preset);\n-\n-        try {\n-            preset.getJobConfigData().getJobFactory().startInBackground(param -> {\n-                if (Strings.areEqual(param, parameterName)) {\n-                    return Value.of(virtualFileSystem.makePath(TmpRoot.TMP_PATH, buffer.getBlobKey(), filename));\n-                }\n-\n-                return preset.getJobConfigData().fetchParameter(param);\n-            });\n-        } catch (HandledException exception) {\n-            ctx.log(ProcessLog.error()\n-                              .withFormattedMessage(\n-                                      \"Failed to start preset '%s' for job '%s' and user '%s' using the uploaded file '%s' (%s'): %s\",\n-                                      preset.getJobConfigData().getLabel(),\n-                                      preset.getJobConfigData().getJobName(),\n-                                      UserContext.getCurrentUser().getUserName(),\n-                                      buffer.getFilename(),\n-                                      NLS.formatSize(buffer.getSize()),\n-                                      exception.getMessage()));\n-        }\n+    @Override\n+    protected String getStandbyProcessType() {\n+        return \"biz-jobs-root\";\n     }\n \n-    private String findFileParameter(JobPreset preset) {\n-        return preset.getJobConfigData()\n-                     .getJobFactory()\n-                     .getParameters()\n-                     .stream()\n-                     .filter(p -> FileParameter.class.isAssignableFrom(p.getBuilderType()))\n-                     .map(Parameter::getName)\n-                     .findFirst()\n-                     .orElse(null);\n+    @Override\n+    protected String getStandbyProcessDescription() {\n+        return \"/jobs Uploads\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5a7275aedc62a03612bf3b2898883754c436953"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MDQ3Nw==", "bodyText": "something went wrong here", "url": "https://github.com/scireum/sirius-biz/pull/921#discussion_r529590477", "createdAt": "2020-11-24T14:34:02Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer3/VirtualFile.java", "diffHunk": "@@ -1230,6 +1237,69 @@ private static void defaultTunnelHandler(VirtualFile file, Response response) {\n         }\n     }\n \n+    /**\n+     * Fetches the given URL and stores the contents in this file.\n+     * <p>\n+     * If the contents of the file are not newer than the last modification date of this file, nothing will happen\n+     * unless the <tt>force</tt> parameter is set to <tt>true</tt>.\n+     *\n+     * @param url   the URL to fetch\n+     * @param force indicates whether the \"if modified since\" check should be suppressed\n+     * @return <tt>true</tt> if the file was successfully fetched or <tt>false</tt> if the contents weren't updated\n+     * as no change was detected\n+     * @throws IOException in case of any IO error while downloading the contents\n+     */\n+    public boolean loadFromUrl(URL url, boolean force) throws IOException {\n+        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n+        if (!force && exists()) {\n+            urlConnection.addRequestProperty(HttpHeaderNames.IF_MODIFIED_SINCE.toString(),\n+                                             lastModifiedDate().format(DateTimeFormatter.RFC_1123_DATE_TIME));\n+        }\n+\n+        urlConnection.connect();\n+\n+        if (urlConnection.getResponseCode() == HttpResponseStatus.NOT_MODIFIED.code()) {\n+            return false;\n+        }\n+\n+        try (InputStream in = urlConnection.getInputStream()) {\n+            if (urlConnection.getContentLengthLong() >= 0) {\n+                consumeStream(in, urlConnection.getContentLengthLong());\n+            } else {\n+                try (OutputStream out = createOutputStream()) {\n+                    Streams.transfer(in, out);\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Performs a download just as {@link #loadFromUrl(URL, boolean)} but reports to the given process.\n+     * <p>\n+     * This will increment one of the timings (downloaded or download skipped) and also directly report IO\n+     * errors to the process without spamming the system logs.\n+     *\n+     * @param url            the url to fetch\n+     * @param force          indicates whether the \"if modified since\" check should be suppressed\n+     * @param processContext the process to report to\n+     */\n+    public void loadFromUrl(URL url, boolean force, ProcessContext processContext) {\n+        try {\n+            Watch watch = Watch.start();\n+            if (loadFromUrl(url, force)) {\n+                processContext.addTiming(NLS.get(\"VirtualFile.fileDownloaded\"), watch.elapsedMillis());\n+            } else {\n+                processContext.addTiming(NLS.get(\"VirtualFile.fileDownloadSkipped\"), watch.elapsedMillis());\n+            }\n+        } catch (IOException e) {\n+            processContext.log(ProcessLog.error()\n+                                         .withNLSKey(\"#<N          XXCS  XM\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e65c36c445b9960086cca8145c1e7837e2c8b94"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU5MDY3OA==", "bodyText": "Something went wrong here", "url": "https://github.com/scireum/sirius-biz/pull/921#discussion_r529590678", "createdAt": "2020-11-24T14:34:19Z", "author": {"login": "sabieber"}, "path": "src/main/resources/biz_de.properties", "diffHunk": "@@ -822,7 +822,10 @@ VirtualFile.cannotRename = Die Datei '${file}' konnte nicht umbenannt werden.\n VirtualFile.cannotResolveChild = Der Pfad '${child}' kann nicht in '${path}' aufgel\u00f6st werden.\n VirtualFile.cannotWrite = In die Datei '${file}' kann nicht geschrieben werden.\n VirtualFile.directoryDoesNotExist = Das Verzeichnis '${file}' existiert nicht.\n+VirtualFile.downloadFailed = Fehler beim Download 0,0,0v -CY    on '${url}': ${error}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e65c36c445b9960086cca8145c1e7837e2c8b94"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c40f220a75c7c4cce1cd02f966db3093d2c7eb0", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/1c40f220a75c7c4cce1cd02f966db3093d2c7eb0", "committedDate": "2020-11-24T19:49:33Z", "message": "Applies review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3ODU0OTQ0", "url": "https://github.com/scireum/sirius-biz/pull/921#pullrequestreview-537854944", "createdAt": "2020-11-24T19:52:38Z", "commit": {"oid": "1c40f220a75c7c4cce1cd02f966db3093d2c7eb0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MTk1OTkx", "url": "https://github.com/scireum/sirius-biz/pull/921#pullrequestreview-538195991", "createdAt": "2020-11-25T06:46:14Z", "commit": {"oid": "1c40f220a75c7c4cce1cd02f966db3093d2c7eb0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjo0NjoxNFrOH5lL2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNjo0NjoxNFrOH5lL2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE0MDEyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Starting jobs happens in a standy process so that we can log any problems and provide some debiggung capabilities.\n          \n          \n            \n                 * Starting jobs happens in a standby process so that we can log any problems and provide some debugging capabilities.", "url": "https://github.com/scireum/sirius-biz/pull/921#discussion_r530140121", "createdAt": "2020-11-25T06:46:14Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/jobs/JobStartingRoot.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs;\n+\n+import sirius.biz.jobs.params.Parameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.Processes;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer2.Blob;\n+import sirius.biz.storage.layer2.BlobStorage;\n+import sirius.biz.storage.layer2.BlobStorageSpace;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.storage.layer3.SingularVFSRoot;\n+import sirius.biz.storage.layer3.TmpRoot;\n+import sirius.biz.storage.layer3.VirtualFileSystem;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+\n+import java.io.OutputStream;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Provides a base class for all roots which sooner or later start a {@link JobFactory job} for an uploaded file.\n+ */\n+public abstract class JobStartingRoot extends SingularVFSRoot {\n+\n+    @Part\n+    protected BlobStorage blobStorage;\n+\n+    @Part\n+    protected VirtualFileSystem virtualFileSystem;\n+\n+    @Part\n+    protected Processes processes;\n+\n+    /**\n+     * Creates an <tt>OutputStream</tt> which triggers the given job with the given parameters once the stream is closed.\n+     *\n+     * @param jobToRun          the job to actually run\n+     * @param parameterProvider permits to control the parameter values for the job (the file is automatically used as\n+     *                          first {@link FileParameter} of the job)\n+     * @param filename          the actual filename of the file being processed\n+     * @return an output stream which triggers the job once the stream is closed\n+     */\n+    protected OutputStream uploadAndTrigger(JobFactory jobToRun,\n+                                            Function<String, Value> parameterProvider,\n+                                            String filename) {\n+        try {\n+            BlobStorageSpace temporaryStorageSpace = blobStorage.getSpace(TmpRoot.TMP_SPACE);\n+            Blob buffer = temporaryStorageSpace.createTemporaryBlob(UserContext.getCurrentUser().getTenantId());\n+            return buffer.createOutputStream(() -> {\n+                if (buffer.getSize() > 0) {\n+                    temporaryStorageSpace.markAsUsed(buffer);\n+                    trigger(jobToRun, parameterProvider, buffer, filename);\n+                } else {\n+                    buffer.delete();\n+                }\n+            }, filename);\n+        } catch (Exception e) {\n+            throw Exceptions.handle(e);\n+        }\n+    }\n+\n+    private void trigger(JobFactory jobToRun, Function<String, Value> parameterProvider, Blob buffer, String filename) {\n+        processes.executeInStandbyProcessForCurrentTenant(getStandbyProcessType(),\n+                                                          this::getStandbyProcessDescription,\n+                                                          ctx -> triggerInProcess(jobToRun,\n+                                                                                  parameterProvider,\n+                                                                                  buffer,\n+                                                                                  filename,\n+                                                                                  ctx));\n+    }\n+\n+    /**\n+     * Returns the type for the standby process which is used to start the job.\n+     * <p>\n+     * Starting jobs happens in a standy process so that we can log any problems and provide some debiggung capabilities.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c40f220a75c7c4cce1cd02f966db3093d2c7eb0"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3beb741c04c71f343da314c6c60e5bc50da3ba87", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/3beb741c04c71f343da314c6c60e5bc50da3ba87", "committedDate": "2020-11-25T08:59:29Z", "message": "Update src/main/java/sirius/biz/jobs/JobStartingRoot.java\n\nCo-authored-by: Matthias Keck <60612914+mkeckmkeck@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NDUxMjMy", "url": "https://github.com/scireum/sirius-biz/pull/921#pullrequestreview-538451232", "createdAt": "2020-11-25T12:36:11Z", "commit": {"oid": "3beb741c04c71f343da314c6c60e5bc50da3ba87"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjozNjoxMVrOH5xedQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjozNjoxMVrOH5xedQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0MTQ5Mw==", "bodyText": "Hat JobFactory noch kein @AutoRegister?", "url": "https://github.com/scireum/sirius-biz/pull/921#discussion_r530341493", "createdAt": "2020-11-25T12:36:11Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/storage/layer3/ExtractArchiveJob.java", "diffHunk": "@@ -39,9 +40,29 @@\n  * This uses the {@link ArchiveExtractor} so depending if 7-ZIP is enabled this supports either a whole bunch\n  * of formats (rar, 7z, tar etc.) or \"just\" ZIP files using the Java API.\n  */\n-@Register\n+@Register(classes = {JobFactory.class, ExtractArchiveJob.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3beb741c04c71f343da314c6c60e5bc50da3ba87"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4263, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}