{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NjE1Njgw", "number": 796, "title": "Provides the Performance Flags Framework", "bodyText": "https://github.com/scireum/sirius-biz/pull/796/files#diff-abb657b1eb547f3d898c7fe54f6a7c5e", "createdAt": "2020-06-23T14:37:12Z", "url": "https://github.com/scireum/sirius-biz/pull/796", "merged": true, "mergeCommit": {"oid": "fba986a59871a7d9c68885c7633e3b566bd5f451"}, "closed": true, "closedAt": "2020-06-24T09:07:42Z", "author": {"login": "andyHa"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuGYvRgH2gAyNDM4NjE1NjgwOmFhMWJkZjY1Y2EzZThkODE5ODlkMDZjNGRiMjkzMTUzOGM2OTg3MmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuWVFCAFqTQzNjQ2MjUzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aa1bdf65ca3e8d81989d06c4db2931538c69872d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/aa1bdf65ca3e8d81989d06c4db2931538c69872d", "committedDate": "2020-06-23T14:33:03Z", "message": "Marks analytical tasks as AutoRegister.\n\nThese are typically classes not interfaces so they need this\nannotation to be automatically picked up by the framework."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3067bb9618f4839368d8c7d67ac6f1e416db8e4", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/e3067bb9618f4839368d8c7d67ac6f1e416db8e4", "committedDate": "2020-06-23T14:33:28Z", "message": "Adds some boilerplate methods when checking execution flags."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/1fc9594624fbe94ccf46ee35b073f5e382c02aef", "committedDate": "2020-06-23T14:34:49Z", "message": "Provides the initial implementation of the performance flags framework.\n\nSee src/main/java/sirius/biz/analytics/flags/README.md for a description\nof the framework."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7552abe10ac216a99e993ce5ee28f2e036fef3", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/df7552abe10ac216a99e993ce5ee28f2e036fef3", "committedDate": "2020-06-23T14:35:10Z", "message": "Code formatting."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ad196b6a86536469a5c15348edd23b4b64f9897", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/3ad196b6a86536469a5c15348edd23b4b64f9897", "committedDate": "2020-06-23T14:35:30Z", "message": "Permits an analytical task to throw an exception as these are handled anyway."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60fbee3da26735104b777f7d73ee0c9dc5dbc611", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/60fbee3da26735104b777f7d73ee0c9dc5dbc611", "committedDate": "2020-06-23T14:53:50Z", "message": "Adds JavaDoc for PerformanceFlag."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1ODgwMTM2", "url": "https://github.com/scireum/sirius-biz/pull/796#pullrequestreview-435880136", "createdAt": "2020-06-23T15:07:00Z", "commit": {"oid": "e3067bb9618f4839368d8c7d67ac6f1e416db8e4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowNzowMFrOGntx7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxNDoyMlrOGnuGLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5NzcxMA==", "bodyText": "why not exactly above the overloaded method?", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444297710", "createdAt": "2020-06-23T15:07:00Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/ExecutionFlags.java", "diffHunk": "@@ -37,6 +38,19 @@\n         return readExecutionFlag(reference.getUniqueName(), flag);\n     }\n \n+    /**\n+     * Determines if the last execution of the given <tt>flag</tt> for the given <tt>reference</tt> was within the\n+     * given <tt>duration</tt>.\n+     *\n+     * @param reference the entity for which the execution flag is to be determined\n+     * @param flag      the flag or type of execution to read\n+     * @param duration  the reference duration\n+     * @return <tt>true</tt> was stored (set) within the given duration, <tt>false</tt> otherwise\n+     */\n+    public boolean wasExecuted(BaseEntity<?> reference, String flag, Duration duration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3067bb9618f4839368d8c7d67ac6f1e416db8e4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5ODA5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or\n          \n          \n            \n             * Note that this provides an abstract and database independent part. Use {@link SQLPerformanceData} or", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444298093", "createdAt": "2020-06-23T15:07:32Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/PerformanceData.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags;\n+\n+import sirius.biz.analytics.flags.jdbc.SQLPerformanceData;\n+import sirius.biz.analytics.flags.mongo.MongoPerformanceData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.Transient;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Can be embedded into an {@link BaseEntity entity} in order to record / toggle performance flags for it.\n+ * <p>\n+ * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5ODY0Mg==", "bodyText": "modify?", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444298642", "createdAt": "2020-06-23T15:08:21Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/PerformanceData.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags;\n+\n+import sirius.biz.analytics.flags.jdbc.SQLPerformanceData;\n+import sirius.biz.analytics.flags.mongo.MongoPerformanceData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.Transient;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Can be embedded into an {@link BaseEntity entity} in order to record / toggle performance flags for it.\n+ * <p>\n+ * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or\n+ * {@link MongoPerformanceData} depending on the actual entity type.\n+ */\n+public abstract class PerformanceData extends Composite {\n+\n+    /**\n+     * Contains the name of the field which stores the flags.\n+     */\n+    public static final Mapping FLAGS = Mapping.named(\"flags\");\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    protected PerformanceData(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Obtains a modifier which can be used to efficiently update the flags for the underlying entity.\n+     *\n+     * @return a modifier used to change the flags for the underlying entity\n+     */\n+    public abstract PerformanceFlagModifier modifier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMDA4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            be togglend on demand using the resepctive [PerformanceFlagModifier](PerformanceFlagModifier.java).\n          \n          \n            \n            be toggled on demand using the respective [PerformanceFlagModifier](PerformanceFlagModifier.java).", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444300084", "createdAt": "2020-06-23T15:10:25Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/README.md", "diffHunk": "@@ -7,4 +9,14 @@ schedulers which are only to be invoked once per month.\n \n This is a database independent framework. Use [ExecutionFlags](ExecutionFlags.java) as main entry point and\n enable either **biz.analytics-execution-flags-jdbc** or **biz.analytics-execution-flags-mongo** as framework\n-depending on the database being used.  \n+depending on the database being used.\n+\n+## Performance Flags\n+\n+Provides a framework which stores a set of flags per entity. This can be either an SQLEntity (which would\n+use [SQLPerformanceData](jdbc/SQLPerformanceData.java)) or a MongoEntity (which would use\n+[MongoPerformanceData](mongo/MongoPerformanceData.java)). Flags will be stored in a way optimized for the\n+underlying database. We use bit fields for JDBC/SQL and StringList for MongoDB. Most probably a performance\n+flag will be toggled when computing metrics e.g. via a **MonthlyMetricComputer**. However, they can also\n+be togglend on demand using the resepctive [PerformanceFlagModifier](PerformanceFlagModifier.java).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMTE2Nw==", "bodyText": "this sounds pretty generic and has performance flag specific implementation. maybe a more specific name is possible? Or a more generic implementation in sirius-db?", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444301167", "createdAt": "2020-06-23T15:11:56Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/jdbc/BitwiseConstraint.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags.jdbc;\n+\n+import sirius.biz.analytics.flags.PerformanceFlag;\n+import sirius.biz.analytics.flags.PerformanceFlagged;\n+import sirius.db.jdbc.SmartQuery;\n+import sirius.db.jdbc.constraints.SQLConstraint;\n+\n+/**\n+ * Provides a constraint which performs a bitwise check in order to determine if a performance flag is toggled.\n+ */\n+class BitwiseConstraint extends SQLConstraint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjU5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * As we use an optimized represnetation, each performance flag must be know ahead of time (declared as constant).\n          \n          \n            \n             * As we use an optimized representation, each performance flag must be know ahead of time (declared as constant).", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444302594", "createdAt": "2020-06-23T15:13:58Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java", "diffHunk": "@@ -17,6 +21,11 @@\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+/**\n+ * Represents a performance flag which can be toggled for an entity.\n+ * <p>\n+ * As we use an optimized represnetation, each performance flag must be know ahead of time (declared as constant).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fbee3da26735104b777f7d73ee0c9dc5dbc611"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjg5Mg==", "bodyText": "this isnt really descriptive in my eyes", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444302892", "createdAt": "2020-06-23T15:14:22Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java", "diffHunk": "@@ -17,6 +21,11 @@\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+/**\n+ * Represents a performance flag which can be toggled for an entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fbee3da26735104b777f7d73ee0c9dc5dbc611"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c409bfed0c75cf28b4b8aafe31addf5a250fc8c", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/0c409bfed0c75cf28b4b8aafe31addf5a250fc8c", "committedDate": "2020-06-23T15:31:51Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Sascha Bieberstein <sabieber@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cdc8e109a04c5b73d02b256419d268d112a2e4a", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/5cdc8e109a04c5b73d02b256419d268d112a2e4a", "committedDate": "2020-06-23T15:37:18Z", "message": "Uses a proper method name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ceba80ea0dad1a234513e8f3ebfd37569bbc1a39", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/ceba80ea0dad1a234513e8f3ebfd37569bbc1a39", "committedDate": "2020-06-23T15:37:39Z", "message": "Tries to improve the JavaDocs of PerformanceFlag."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "887cdbbab75f078bd1afeab8e01eb9838ce5d3c9", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/887cdbbab75f078bd1afeab8e01eb9838ce5d3c9", "committedDate": "2020-06-23T15:38:14Z", "message": "Uses a proper class name to better represent the specific nature of this constraint."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8aa63afe1408625f43b03758b851494e6dec87e", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/d8aa63afe1408625f43b03758b851494e6dec87e", "committedDate": "2020-06-23T16:01:18Z", "message": "Sorts method by their function not by their level of boilerplateism."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzM0Mjk0", "url": "https://github.com/scireum/sirius-biz/pull/796#pullrequestreview-436334294", "createdAt": "2020-06-24T05:30:25Z", "commit": {"oid": "d8aa63afe1408625f43b03758b851494e6dec87e"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTozMDoyNVrOGoDdnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTozMDoyNVrOGoDdnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1Mjk1Nw==", "bodyText": "Hat ein bisschen gedauert, bis ich geblickt hab, dass das bitwise operations sind... vllt n comment? Oder den column name auch als parameter in die query?", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444652957", "createdAt": "2020-06-24T05:30:25Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags.jdbc;\n+\n+import sirius.biz.analytics.flags.PerformanceFlag;\n+import sirius.biz.analytics.flags.PerformanceFlagged;\n+import sirius.db.jdbc.SmartQuery;\n+import sirius.db.jdbc.constraints.SQLConstraint;\n+\n+/**\n+ * Provides a constraint which performs a bitwise check in order to determine if a performance flag is toggled.\n+ */\n+class PerformanceFlagConstraint extends SQLConstraint {\n+\n+    private PerformanceFlag flag;\n+    private boolean expectedState;\n+\n+    /**\n+     * Generates a new constraint for the given flag and expected state.\n+     *\n+     * @param flag          the flag to check\n+     * @param expectedState the state to filter on\n+     */\n+    PerformanceFlagConstraint(PerformanceFlag flag, boolean expectedState) {\n+        this.flag = flag;\n+        this.expectedState = expectedState;\n+    }\n+\n+    @Override\n+    public void appendSQL(SmartQuery.Compiler compiler) {\n+        String columnName =\n+                compiler.translateColumnName(PerformanceFlagged.PERFORMANCE_DATA.inner(SQLPerformanceData.FLAGS));\n+        if (expectedState) {\n+            compiler.getWHEREBuilder().append(columnName).append(\" & ? <> 0\");\n+        } else {\n+            compiler.getWHEREBuilder().append(columnName).append(\" & ? = 0\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aa63afe1408625f43b03758b851494e6dec87e"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzQyMDQy", "url": "https://github.com/scireum/sirius-biz/pull/796#pullrequestreview-436342042", "createdAt": "2020-06-24T05:52:05Z", "commit": {"oid": "d8aa63afe1408625f43b03758b851494e6dec87e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzYxNzMy", "url": "https://github.com/scireum/sirius-biz/pull/796#pullrequestreview-436361732", "createdAt": "2020-06-24T06:36:16Z", "commit": {"oid": "d8aa63afe1408625f43b03758b851494e6dec87e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzY1Mzk3", "url": "https://github.com/scireum/sirius-biz/pull/796#pullrequestreview-436365397", "createdAt": "2020-06-24T06:43:30Z", "commit": {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efff6b568ff5ee40f89f0e5ed360c084403829df", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/efff6b568ff5ee40f89f0e5ed360c084403829df", "committedDate": "2020-06-24T07:09:42Z", "message": "Improves the documentation of the inner workings of SQL/JDBC impl. of performance flags."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a477ae59a9b15c3683cdbd0f9e1a0518c59a5487", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/a477ae59a9b15c3683cdbd0f9e1a0518c59a5487", "committedDate": "2020-06-24T07:10:00Z", "message": "Merge remote-tracking branch 'origin/master' into aha/performance-flags"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDQ4NzM2", "url": "https://github.com/scireum/sirius-biz/pull/796#pullrequestreview-436448736", "createdAt": "2020-06-24T08:49:35Z", "commit": {"oid": "a477ae59a9b15c3683cdbd0f9e1a0518c59a5487"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDYyNTM4", "url": "https://github.com/scireum/sirius-biz/pull/796#pullrequestreview-436462538", "createdAt": "2020-06-24T09:07:32Z", "commit": {"oid": "a477ae59a9b15c3683cdbd0f9e1a0518c59a5487"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4340, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}