{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4OTEwMzk4", "number": 655, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo0NTo0M1rODVod7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo0ODo1NVrODVogDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDA5NzEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tenants/UserAccountData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo0NTo0M1rOFZ9m3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTowNzoyM1rOFZ99XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2ODA5Mg==", "bodyText": "Requires a check if already saved data is lowercase (and a batch-convert) when not?", "url": "https://github.com/scireum/sirius-biz/pull/655#discussion_r362768092", "createdAt": "2020-01-03T10:45:43Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/tenants/UserAccountData.java", "diffHunk": "@@ -110,28 +109,35 @@ public UserAccountData(BaseEntity<?> userObject) {\n \n     @BeforeSave\n     protected void verifyData() {\n-        if (Strings.isFilled(email)) {\n-            if (ms.isValidMailAddress(email.trim(), null)) {\n-                email = email.toLowerCase();\n-            } else {\n-                throw Exceptions.createHandled().withNLSKey(\"Model.invalidEmail\").set(\"value\", email).handle();\n-            }\n-        }\n+        userObject.ifChangedAndFilled(UserAccount.USER_ACCOUNT_DATA.inner(UserAccountData.PERSON)\n+                                                                   .inner(PersonData.SALUTATION),\n+                                      getPerson()::verifySalutation);\n+\n+        userObject.ifChangedAndFilled(UserAccount.USER_ACCOUNT_DATA.inner(UserAccountData.EMAIL), () -> {\n+            email = email.trim().toLowerCase();\n+            ms.failForInvalidEmail(email, null);\n+        });\n+\n+        fillAndVerifyUsername();\n+    }\n \n+    private void fillAndVerifyUsername() {\n+        // Use email address if no explicit username is present\n         if (Strings.isEmpty(getLogin().getUsername())) {\n             getLogin().setUsername(getEmail());\n         }\n-        if (Strings.isFilled(getLogin().getUsername())) {\n-            getLogin().setUsername(getLogin().getUsername().toLowerCase());\n-        } else {\n-            throw Exceptions.createHandled()\n-                            .withNLSKey(\"Property.fieldNotNullable\")\n-                            .set(\"field\", NLS.get(\"LoginData.username\"))\n-                            .handle();\n-        }\n \n-        userObject.assertUnique(UserAccount.USER_ACCOUNT_DATA.inner(LOGIN).inner(LoginData.USERNAME),\n-                                getLogin().getUsername());\n+        // Ensure that the username is is filled and unique...\n+        userObject.verifyIfChangedFailIfEmpty(UserAccount.USER_ACCOUNT_DATA.inner(LOGIN).inner(LoginData.USERNAME),\n+                                              () -> {\n+                                                  // Make it lowercase...\n+                                                  getLogin().setUsername(getLogin().getUsername().toLowerCase());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd172680a0befe68133c7fce40ff35ad50318059"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3Mzg1Mw==", "bodyText": "this code isn't new, it was just moved to another place...", "url": "https://github.com/scireum/sirius-biz/pull/655#discussion_r362773853", "createdAt": "2020-01-03T11:07:23Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/tenants/UserAccountData.java", "diffHunk": "@@ -110,28 +109,35 @@ public UserAccountData(BaseEntity<?> userObject) {\n \n     @BeforeSave\n     protected void verifyData() {\n-        if (Strings.isFilled(email)) {\n-            if (ms.isValidMailAddress(email.trim(), null)) {\n-                email = email.toLowerCase();\n-            } else {\n-                throw Exceptions.createHandled().withNLSKey(\"Model.invalidEmail\").set(\"value\", email).handle();\n-            }\n-        }\n+        userObject.ifChangedAndFilled(UserAccount.USER_ACCOUNT_DATA.inner(UserAccountData.PERSON)\n+                                                                   .inner(PersonData.SALUTATION),\n+                                      getPerson()::verifySalutation);\n+\n+        userObject.ifChangedAndFilled(UserAccount.USER_ACCOUNT_DATA.inner(UserAccountData.EMAIL), () -> {\n+            email = email.trim().toLowerCase();\n+            ms.failForInvalidEmail(email, null);\n+        });\n+\n+        fillAndVerifyUsername();\n+    }\n \n+    private void fillAndVerifyUsername() {\n+        // Use email address if no explicit username is present\n         if (Strings.isEmpty(getLogin().getUsername())) {\n             getLogin().setUsername(getEmail());\n         }\n-        if (Strings.isFilled(getLogin().getUsername())) {\n-            getLogin().setUsername(getLogin().getUsername().toLowerCase());\n-        } else {\n-            throw Exceptions.createHandled()\n-                            .withNLSKey(\"Property.fieldNotNullable\")\n-                            .set(\"field\", NLS.get(\"LoginData.username\"))\n-                            .handle();\n-        }\n \n-        userObject.assertUnique(UserAccount.USER_ACCOUNT_DATA.inner(LOGIN).inner(LoginData.USERNAME),\n-                                getLogin().getUsername());\n+        // Ensure that the username is is filled and unique...\n+        userObject.verifyIfChangedFailIfEmpty(UserAccount.USER_ACCOUNT_DATA.inner(LOGIN).inner(LoginData.USERNAME),\n+                                              () -> {\n+                                                  // Make it lowercase...\n+                                                  getLogin().setUsername(getLogin().getUsername().toLowerCase());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2ODA5Mg=="}, "originalCommit": {"oid": "cd172680a0befe68133c7fce40ff35ad50318059"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDEwMTE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tenants/UserAccountData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo0ODoxMFrOFZ9paw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo0ODoxMFrOFZ9paw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2ODc0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Ensure that the username is is filled and unique...\n          \n          \n            \n                    // Ensure that the username is filled and unique...", "url": "https://github.com/scireum/sirius-biz/pull/655#discussion_r362768747", "createdAt": "2020-01-03T10:48:10Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/tenants/UserAccountData.java", "diffHunk": "@@ -110,28 +109,35 @@ public UserAccountData(BaseEntity<?> userObject) {\n \n     @BeforeSave\n     protected void verifyData() {\n-        if (Strings.isFilled(email)) {\n-            if (ms.isValidMailAddress(email.trim(), null)) {\n-                email = email.toLowerCase();\n-            } else {\n-                throw Exceptions.createHandled().withNLSKey(\"Model.invalidEmail\").set(\"value\", email).handle();\n-            }\n-        }\n+        userObject.ifChangedAndFilled(UserAccount.USER_ACCOUNT_DATA.inner(UserAccountData.PERSON)\n+                                                                   .inner(PersonData.SALUTATION),\n+                                      getPerson()::verifySalutation);\n+\n+        userObject.ifChangedAndFilled(UserAccount.USER_ACCOUNT_DATA.inner(UserAccountData.EMAIL), () -> {\n+            email = email.trim().toLowerCase();\n+            ms.failForInvalidEmail(email, null);\n+        });\n+\n+        fillAndVerifyUsername();\n+    }\n \n+    private void fillAndVerifyUsername() {\n+        // Use email address if no explicit username is present\n         if (Strings.isEmpty(getLogin().getUsername())) {\n             getLogin().setUsername(getEmail());\n         }\n-        if (Strings.isFilled(getLogin().getUsername())) {\n-            getLogin().setUsername(getLogin().getUsername().toLowerCase());\n-        } else {\n-            throw Exceptions.createHandled()\n-                            .withNLSKey(\"Property.fieldNotNullable\")\n-                            .set(\"field\", NLS.get(\"LoginData.username\"))\n-                            .handle();\n-        }\n \n-        userObject.assertUnique(UserAccount.USER_ACCOUNT_DATA.inner(LOGIN).inner(LoginData.USERNAME),\n-                                getLogin().getUsername());\n+        // Ensure that the username is is filled and unique...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9201152c11d7b568bab0a9f7f25a735b2022b7cb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MDEwMjU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/model/ContactData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMDo0ODo1NVrOFZ9qOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxMTowODo1MFrOFZ9-xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2ODk1Mg==", "bodyText": "Is this format valid internationally?", "url": "https://github.com/scireum/sirius-biz/pull/655#discussion_r362768952", "createdAt": "2020-01-03T10:48:55Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/model/ContactData.java", "diffHunk": "@@ -24,21 +22,24 @@\n import sirius.kernel.nls.NLS;\n import sirius.web.mails.Mails;\n \n+import java.util.function.Consumer;\n import java.util.regex.Pattern;\n \n /**\n  * Provides various contact information for a person or company which can be embedded into other entities or mixins.\n+ * <p>\n+ * Note that this class doesn't perform any save checks or validations at all. Any entity which contains this composite\n+ * must decide which checks have to be performed and then either call the <tt>verifyXXX</tt> method within an\n+ * {@link sirius.db.mixing.annotations.BeforeSave} handler or invoke <tt>validateXXX</tt> in an\n+ * {@link sirius.db.mixing.annotations.OnValidate} method. Most probably these checks should be surrounded with\n+ * a {@link sirius.db.mixing.BaseEntity#isChanged(Mapping...)} check to only validate or verify new values.\n  */\n public class ContactData extends Composite {\n \n     /**\n-     * Validates a phone numner.\n+     * Validates a phone number.\n      */\n-    public static final Pattern VALID_PHONE_NUMBER =\n-            Pattern.compile(\"\\\\+?\\\\d+( \\\\d+)*( */( *\\\\d+)+)?( *\\\\-( *\\\\d+)+)?\");\n-\n-    @Transient\n-    private boolean validatePhoneNumbers;\n+    public static final Pattern VALID_PHONE_NUMBER = Pattern.compile(\"\\\\+?\\\\d+( \\\\d+)*( */( *\\\\d+)+)?( *-( *\\\\d+)+)?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9201152c11d7b568bab0a9f7f25a735b2022b7cb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc3NDIxNQ==", "bodyText": "This regex isn't new / has not changed semantically. The \\- was a redundant escape which has been removed (as suggested by IntelliJ) - hopefully the regex was/is valid :)", "url": "https://github.com/scireum/sirius-biz/pull/655#discussion_r362774215", "createdAt": "2020-01-03T11:08:50Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/model/ContactData.java", "diffHunk": "@@ -24,21 +22,24 @@\n import sirius.kernel.nls.NLS;\n import sirius.web.mails.Mails;\n \n+import java.util.function.Consumer;\n import java.util.regex.Pattern;\n \n /**\n  * Provides various contact information for a person or company which can be embedded into other entities or mixins.\n+ * <p>\n+ * Note that this class doesn't perform any save checks or validations at all. Any entity which contains this composite\n+ * must decide which checks have to be performed and then either call the <tt>verifyXXX</tt> method within an\n+ * {@link sirius.db.mixing.annotations.BeforeSave} handler or invoke <tt>validateXXX</tt> in an\n+ * {@link sirius.db.mixing.annotations.OnValidate} method. Most probably these checks should be surrounded with\n+ * a {@link sirius.db.mixing.BaseEntity#isChanged(Mapping...)} check to only validate or verify new values.\n  */\n public class ContactData extends Composite {\n \n     /**\n-     * Validates a phone numner.\n+     * Validates a phone number.\n      */\n-    public static final Pattern VALID_PHONE_NUMBER =\n-            Pattern.compile(\"\\\\+?\\\\d+( \\\\d+)*( */( *\\\\d+)+)?( *\\\\-( *\\\\d+)+)?\");\n-\n-    @Transient\n-    private boolean validatePhoneNumbers;\n+    public static final Pattern VALID_PHONE_NUMBER = Pattern.compile(\"\\\\+?\\\\d+( \\\\d+)*( */( *\\\\d+)+)?( *-( *\\\\d+)+)?\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjc2ODk1Mg=="}, "originalCommit": {"oid": "9201152c11d7b568bab0a9f7f25a735b2022b7cb"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2079, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}