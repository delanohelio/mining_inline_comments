{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MDgzODg4", "number": 926, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTozNzo1MVrOE9rxHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1Mzo1OFrOE-iBkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTE1Njc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRef.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTozNzo1MVrOH6gOqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTozNzo1MVrOH6gOqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwNzQ5Nw==", "bodyText": "block delete handler of type Reject?", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531107497", "createdAt": "2020-11-26T15:37:51Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRef.java", "diffHunk": "@@ -24,27 +25,31 @@\n public class BlobSoftRef extends BlobHardRef {\n \n     private final boolean supportsURL;\n+    private final BaseEntityRef.OnDelete deleteHandler;\n \n     private static final Pattern URL_PATTERN = Pattern.compile(\"^https?://\", Pattern.CASE_INSENSITIVE);\n \n     /**\n      * Creates a new reference for the given space.\n      *\n-     * @param space       the space to place referenced objects in\n-     * @param supportsURL if <tt>true</tt> a URL can also be used instead of an object key\n+     * @param space         the space to place referenced objects in\n+     * @param deleteHandler determines what happens if the referenced entity is deleted\n+     * @param supportsURL   if <tt>true</tt> a URL can also be used instead of an object key\n      */\n-    public BlobSoftRef(String space, boolean supportsURL) {\n+    public BlobSoftRef(String space, BaseEntityRef.OnDelete deleteHandler, boolean supportsURL) {\n         super(space);\n+        this.deleteHandler = deleteHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3d9f468f1a6cd277c16674a3de69c422c502dff"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTE2NzQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo0MDo0NlrOH6gVFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo0MDo0NlrOH6gVFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEwOTE0Mw==", "bodyText": "I would actually throw the exception in the constructor of the ref so it gets thrown right as such a ref is introduced during development and not when a first deletion occurs (which might be during testing or in production)", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531109143", "createdAt": "2020-11-26T15:40:46Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,122 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));\n+            referencedDescriptors.add(mixing.getDescriptor(SQLBlob.class));\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));\n+            } else if (deleteHandler == BaseEntityRef.OnDelete.SET_NULL) {\n+                if (!isNullable()) {\n+                    Mixing.LOG.WARN(\"Error in property %s of %s: The field is not marked as NullAllowed,\"\n+                                    + \" therefore SET_NULL is not a valid delete handler!\", this, getDescriptor());\n+                }\n+\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));\n+            } else if (deleteHandler == BaseEntityRef.OnDelete.REJECT) {\n+                throw new IllegalArgumentException(\"BlobSoftRef references do not accept REJECT as deleteHandler.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d5d7f59b867754ddbc50b5e4b9479cc4760ca3"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTE3Njk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/mongo/ProcessChangedEntitiesLoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo0MzoyMlrOH6gamQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo0MzoyMlrOH6gamQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMDU1Mw==", "bodyText": "FIFTHEEN -> FIFTEEN", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531110553", "createdAt": "2020-11-26T15:43:22Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/ProcessChangedEntitiesLoop.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.mongo;\n+\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.mongo.Mango;\n+import sirius.db.mongo.Mongo;\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.PriorityParts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Processes {@link MongoBlob blobs} which have been marked as changed.\n+ * <p>\n+ * The actual processing is performed by the predefined {@link MongoBlobChangeHandler handlers}\n+ */\n+@Register(framework = MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)\n+public class ProcessChangedEntitiesLoop extends BackgroundLoop {\n+\n+    private static final double FREQUENCY_EVERY_FIFTHEEN_SECONDS = 1 / 15d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cb7c4833628500eef6120bcd427f36c866d4498"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTE4MTA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/mongo/ProcessChangedEntitiesLoop.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo0NDozMFrOH6gc_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNTo0ODo1NFrOH6gmnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMTE2Ng==", "bodyText": "Maybe include the word Blob in the Class Name and the Loop getName?", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531111166", "createdAt": "2020-11-26T15:44:30Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/ProcessChangedEntitiesLoop.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.mongo;\n+\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.mongo.Mango;\n+import sirius.db.mongo.Mongo;\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.PriorityParts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Processes {@link MongoBlob blobs} which have been marked as changed.\n+ * <p>\n+ * The actual processing is performed by the predefined {@link MongoBlobChangeHandler handlers}\n+ */\n+@Register(framework = MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)\n+public class ProcessChangedEntitiesLoop extends BackgroundLoop {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cb7c4833628500eef6120bcd427f36c866d4498"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMzYzMQ==", "bodyText": "Makes perfectly sense.\n@andyHa : OK to change the delete loop to match this naming?", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531113631", "createdAt": "2020-11-26T15:48:54Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/ProcessChangedEntitiesLoop.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.mongo;\n+\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.mongo.Mango;\n+import sirius.db.mongo.Mongo;\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.PriorityParts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Processes {@link MongoBlob blobs} which have been marked as changed.\n+ * <p>\n+ * The actual processing is performed by the predefined {@link MongoBlobChangeHandler handlers}\n+ */\n+@Register(framework = MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)\n+public class ProcessChangedEntitiesLoop extends BackgroundLoop {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTExMTE2Ng=="}, "originalCommit": {"oid": "2cb7c4833628500eef6120bcd427f36c866d4498"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTI1ODE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/jdbc/RemoveDeletedBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjowNTo1MVrOH6hL_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODoxMjozMVrOH60j7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzE5OQ==", "bodyText": "i think the config values for orchestration of the new loops is missing in the component-biz.conf", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531123199", "createdAt": "2020-11-26T16:05:51Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/jdbc/RemoveDeletedBlobsLoop.java", "diffHunk": "@@ -35,7 +35,7 @@\n     @Nonnull\n     @Override\n     public String getName() {\n-        return \"storage-layer2-delete\";\n+        return \"storage-layer2-blob-delete\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c882ffc711b5c49122cba631c0ea8cecc171e3ae"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzOTQ3NA==", "bodyText": "why rename this - layer2 only operates on blobs", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531439474", "createdAt": "2020-11-27T08:10:03Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/jdbc/RemoveDeletedBlobsLoop.java", "diffHunk": "@@ -35,7 +35,7 @@\n     @Nonnull\n     @Override\n     public String getName() {\n-        return \"storage-layer2-delete\";\n+        return \"storage-layer2-blob-delete\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzE5OQ=="}, "originalCommit": {"oid": "c882ffc711b5c49122cba631c0ea8cecc171e3ae"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MDYyMg==", "bodyText": "maybe we should extract common parts of the Mongo and JDBC impl and put them into a common base class.", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531440622", "createdAt": "2020-11-27T08:12:31Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/jdbc/RemoveDeletedBlobsLoop.java", "diffHunk": "@@ -35,7 +35,7 @@\n     @Nonnull\n     @Override\n     public String getName() {\n-        return \"storage-layer2-delete\";\n+        return \"storage-layer2-blob-delete\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEyMzE5OQ=="}, "originalCommit": {"oid": "c882ffc711b5c49122cba631c0ea8cecc171e3ae"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzM2MzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRef.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODowNToyMVrOH60XLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODowNToyMVrOH60XLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNzM1Ng==", "bodyText": "list accepted values", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531437356", "createdAt": "2020-11-27T08:05:21Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRef.java", "diffHunk": "@@ -24,27 +25,34 @@\n public class BlobSoftRef extends BlobHardRef {\n \n     private final boolean supportsURL;\n+    private final BaseEntityRef.OnDelete deleteHandler;\n \n     private static final Pattern URL_PATTERN = Pattern.compile(\"^https?://\", Pattern.CASE_INSENSITIVE);\n \n     /**\n      * Creates a new reference for the given space.\n      *\n-     * @param space       the space to place referenced objects in\n-     * @param supportsURL if <tt>true</tt> a URL can also be used instead of an object key\n+     * @param space         the space to place referenced objects in\n+     * @param deleteHandler determines what happens if the referenced entity is deleted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzM2NjI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODowNjozMVrOH60ZCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODoyOTo0MlrOH61ETQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNzgzMw==", "bodyText": "why?", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531437833", "createdAt": "2020-11-27T08:06:31Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0ODkwOQ==", "bodyText": "private void forEachBlobType(Consumer callback) {\nif (sql framework enabled) {\ncallback.accept(mixing.getDescriptor(SQLBlob.class));\n}\n.. mongo\n}", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531448909", "createdAt": "2020-11-27T08:29:42Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzNzgzMw=="}, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzM3NDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODowOTowOFrOH60dng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODowOTowOFrOH60dng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzOTAwNg==", "bodyText": "no need to cast on the DB impl here - Blob.getBlobKey() is abstract", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531439006", "createdAt": "2020-11-27T08:09:08Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));\n+            referencedDescriptors.add(mixing.getDescriptor(SQLBlob.class));\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));\n+            } else if (deleteHandler == BaseEntityRef.OnDelete.SET_NULL) {\n+                if (!isNullable()) {\n+                    Mixing.LOG.WARN(\"Error in property %s of %s: The field is not marked as NullAllowed,\"\n+                                    + \" therefore SET_NULL is not a valid delete handler!\", this, getDescriptor());\n+                }\n+\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));\n+            }\n+        } catch (Exception e) {\n+            Mixing.LOG.WARN(\"Error when linking property %s of %s: %s (%s)\",\n+                            this,\n+                            getDescriptor(),\n+                            e.getMessage(),\n+                            e.getClass().getSimpleName());\n+        }\n+    }\n+\n+    protected void onDeleteCascade(Object entity) {\n+        TaskContext taskContext = TaskContext.get();\n+\n+        taskContext.smartLogLimited(() -> NLS.fmtr(\"BaseEntityRefProperty.cascadeDelete\")\n+                                             .set(PARAM_TYPE, getDescriptor().getPluralLabel())\n+                                             .set(PARAM_OWNER, Strings.limit(entity, 30))\n+                                             .set(PARAM_FIELD, getLabel())\n+                                             .format());\n+\n+        processReferenceInstances(entity, reference -> cascadeDelete(taskContext, reference));\n+    }\n+\n+    private void cascadeDelete(TaskContext taskContext, BaseEntity<?> other) {\n+        Watch watch = Watch.start();\n+        other.getMapper().delete(other);\n+        taskContext.addTiming(NLS.get(\"BaseEntityRefProperty.cascadedDelete\"), watch.elapsedMillis(), true);\n+    }\n+\n+    protected void onDeleteSetNull(Object entity) {\n+        TaskContext taskContext = TaskContext.get();\n+        taskContext.smartLogLimited(() -> NLS.fmtr(\"BaseEntityRefProperty.cascadeSetNull\")\n+                                             .set(PARAM_TYPE, getDescriptor().getPluralLabel())\n+                                             .set(PARAM_OWNER, Strings.limit(entity, 30))\n+                                             .set(PARAM_FIELD, getLabel())\n+                                             .format());\n+\n+        processReferenceInstances(entity, reference -> cascadeSetNull(taskContext, reference));\n+    }\n+\n+    private void processReferenceInstances(Object entity, Consumer<BaseEntity<?>> handler) {\n+        BaseEntity<?> referenceInstance = (BaseEntity<?>) getDescriptor().getReferenceInstance();\n+        if (entity instanceof MongoBlob) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzM3OTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlobChangeHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODoxMDo0MFrOH60gjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODoxMDo0MFrOH60gjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzOTc1Ng==", "bodyText": "make abstract for Blob ? the actual database isn't important here", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531439756", "createdAt": "2020-11-27T08:10:40Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlobChangeHandler.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.mongo;\n+\n+import sirius.kernel.di.std.Priorized;\n+\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Defines handlers to process created or modified {@link MongoBlob blobs}.\n+ *\n+ * @see ProcessChangedBlobsLoop\n+ */\n+public interface MongoBlobChangeHandler extends Priorized {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzM4ODM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODoxMzozN1rOH60lzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODoxNToyMVrOH60pEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTEwMA==", "bodyText": "The same changes also have to be applied to the SQL parts", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531441100", "createdAt": "2020-11-27T08:13:37Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlob.java", "diffHunk": "@@ -190,6 +190,12 @@\n     public static final Mapping DELETED = Mapping.named(\"deleted\");\n     private boolean deleted;\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTkzNw==", "bodyText": "It's in the pipeline. Was waiting for your review first to avoid double-fixing!", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531441937", "createdAt": "2020-11-27T08:15:21Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlob.java", "diffHunk": "@@ -190,6 +190,12 @@\n     public static final Mapping DELETED = Mapping.named(\"deleted\");\n     private boolean deleted;\n \n+    /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTEwMA=="}, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzM5MDA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODoxNDowOVrOH60m2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODoxNTo0N1rOH60pyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTM2OQ==", "bodyText": "maybe we call it createdOrRenamed instead of changed then?", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531441369", "createdAt": "2020-11-27T08:14:09Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlob.java", "diffHunk": "@@ -209,6 +215,14 @@ protected void beforeSave() {\n         }\n \n         updateFilenameFields();\n+\n+        if (isNew() || isChanged(FILENAME, NORMALIZED_FILENAME, FILE_EXTENSION)) {\n+            changed = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MjEyMQ==", "bodyText": "What if we extend changed to cover other fields in the future?", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531442121", "createdAt": "2020-11-27T08:15:47Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlob.java", "diffHunk": "@@ -209,6 +215,14 @@ protected void beforeSave() {\n         }\n \n         updateFilenameFields();\n+\n+        if (isNew() || isChanged(FILENAME, NORMALIZED_FILENAME, FILE_EXTENSION)) {\n+            changed = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTM2OQ=="}, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzM5MjU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/mongo/ProcessChangedBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODoxNDo1NlrOH60oQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODoxNDo1NlrOH60oQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MTcyOQ==", "bodyText": "extract common parts in base class and add JDBC impl", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531441729", "createdAt": "2020-11-27T08:14:56Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/ProcessChangedBlobsLoop.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.mongo;\n+\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.mongo.Mango;\n+import sirius.db.mongo.Mongo;\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.PriorityParts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Processes {@link MongoBlob blobs} which have been marked as changed.\n+ * <p>\n+ * The actual processing is performed by the predefined {@link MongoBlobChangeHandler handlers}\n+ */\n+@Register(framework = MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)\n+public class ProcessChangedBlobsLoop extends BackgroundLoop {\n+\n+    private static final double FREQUENCY_EVERY_FIFTEEN_SECONDS = 1 / 15d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ0MDkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMDowNFrOH61E8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMDowNFrOH61E8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0OTA3Mg==", "bodyText": "forEachBlobType(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531449072", "createdAt": "2020-11-27T08:30:04Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));\n+            referencedDescriptors.add(mixing.getDescriptor(SQLBlob.class));\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzQ0MTQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMDoxMVrOH61FOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwODozMDoxMVrOH61FOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0OTE0Ng==", "bodyText": "s.a.", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531449146", "createdAt": "2020-11-27T08:30:11Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +87,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors == null) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            referencedDescriptors.add(mixing.getDescriptor(MongoBlob.class));\n+            referencedDescriptors.add(mixing.getDescriptor(SQLBlob.class));\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));\n+            } else if (deleteHandler == BaseEntityRef.OnDelete.SET_NULL) {\n+                if (!isNullable()) {\n+                    Mixing.LOG.WARN(\"Error in property %s of %s: The field is not marked as NullAllowed,\"\n+                                    + \" therefore SET_NULL is not a valid delete handler!\", this, getDescriptor());\n+                }\n+\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0eda483ed3cee82a70212aca6de7adcc6390d39"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDMwMjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLDeletedBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjo0NToxNlrOH69Leg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMjo0NToxNlrOH69Leg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU4MTgxOA==", "bodyText": "SQLProcessBlobsLoop?", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531581818", "createdAt": "2020-11-27T12:45:16Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLDeletedBlobsLoop.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.jdbc;\n+\n+import sirius.biz.storage.layer2.Directory;\n+import sirius.biz.storage.layer2.ProcessBlobsLoop;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.jdbc.OMA;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Finally deletes {@link SQLDirectory directories} and {@link SQLBlob blobs} which have been marked as deleted.\n+ */\n+@Register(framework = SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)\n+public class SQLDeletedBlobsLoop extends ProcessBlobsLoop {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9672bde2ba36d6ce0645de18ffc79d4efb4b1215"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQxMDQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMToyOFrOH6-NAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMToyOFrOH6-NAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5ODU5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected List<EntityDescriptor> referencedDescriptors = new ArrayList<>();", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531598595", "createdAt": "2020-11-27T13:21:28Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -8,30 +8,56 @@\n \n package sirius.biz.storage.layer2;\n \n+import sirius.biz.storage.layer2.jdbc.SQLBlob;\n+import sirius.biz.storage.layer2.jdbc.SQLBlobStorage;\n+import sirius.biz.storage.layer2.mongo.MongoBlob;\n+import sirius.biz.storage.layer2.mongo.MongoBlobStorage;\n import sirius.biz.storage.util.StorageUtils;\n import sirius.db.jdbc.OMA;\n import sirius.db.mixing.AccessPath;\n+import sirius.db.mixing.BaseEntity;\n import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n import sirius.db.mixing.Property;\n import sirius.db.mixing.PropertyFactory;\n+import sirius.db.mixing.types.BaseEntityRef;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.async.TaskContext;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n import sirius.kernel.di.std.Register;\n import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n \n import javax.annotation.Nonnull;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.function.Consumer;\n \n /**\n  * Handles fields of the type {@link BlobSoftRef} within an {@link sirius.db.mixing.BaseEntity}.\n  */\n public class BlobSoftRefProperty extends BlobRefProperty {\n \n+    @Part\n+    protected static Mixing mixing;\n+\n     /**\n      * Contains the field length to use if URLs are also supported for this field.\n      */\n     protected static final int URL_COMPATIBLE_LENGTH = 512;\n \n+    private static final String PARAM_TYPE = \"type\";\n+    private static final String PARAM_OWNER = \"owner\";\n+    private static final String PARAM_FIELD = \"field\";\n+\n+    private BlobSoftRef blobSoftRef;\n+    protected List<EntityDescriptor> referencedDescriptors = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQxMjkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMjoxMVrOH6-OkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMjoxMVrOH6-OkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5ODk5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Returns the {@link EntityDescriptor} of the referenced entity.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return the referenced entity descriptor\n          \n          \n            \n                 */\n          \n          \n            \n                public List<EntityDescriptor> getReferencedDescriptors() {\n          \n          \n            \n                    if (referencedDescriptors.isEmpty()) {\n          \n          \n            \n                        if (blobSoftRef == null) {\n          \n          \n            \n                            throw new IllegalStateException(\"Schema not linked!\");\n          \n          \n            \n                        }\n          \n          \n            \n                        forEachBlobType(referencedDescriptors::add);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return Collections.unmodifiableList(referencedDescriptors);\n          \n          \n            \n                }", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531598992", "createdAt": "2020-11-27T13:22:11Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +90,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors.isEmpty()) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            forEachBlobType(referencedDescriptors::add);\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQxNDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMjo0MFrOH6-Pfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMjo0MFrOH6-Pfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTIzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));\n          \n          \n            \n                            forEachBlobType(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531599231", "createdAt": "2020-11-27T13:22:40Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +90,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors.isEmpty()) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            forEachBlobType(referencedDescriptors::add);\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private void forEachBlobType(Consumer<EntityDescriptor> callback) {\n+        if (Sirius.isFrameworkEnabled(SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(SQLBlob.class));\n+        }\n+        if (Sirius.isFrameworkEnabled(MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(MongoBlob.class));\n+        }\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQxNTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMjo1M1rOH6-P4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMjo1M1rOH6-P4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTMzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));\n          \n          \n            \n                            forEachBlobType(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531599331", "createdAt": "2020-11-27T13:22:53Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +90,120 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    /**\n+     * Returns the {@link EntityDescriptor} of the referenced entity.\n+     *\n+     * @return the referenced entity descriptor\n+     */\n+    public List<EntityDescriptor> getReferencedDescriptors() {\n+        if (referencedDescriptors.isEmpty()) {\n+            if (blobSoftRef == null) {\n+                throw new IllegalStateException(\"Schema not linked!\");\n+            }\n+            forEachBlobType(referencedDescriptors::add);\n+        }\n+\n+        return Collections.unmodifiableList(referencedDescriptors);\n+    }\n+\n+    private void forEachBlobType(Consumer<EntityDescriptor> callback) {\n+        if (Sirius.isFrameworkEnabled(SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(SQLBlob.class));\n+        }\n+        if (Sirius.isFrameworkEnabled(MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(MongoBlob.class));\n+        }\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n+            } catch (Exception e) {\n+                throw Exceptions.handle()\n+                                .to(Mixing.LOG)\n+                                .error(e)\n+                                .withSystemErrorMessage(\n+                                        \"Unable to obtain a BlobSoftRef object from entity ref field ('%s' in '%s'): %s (%s)\",\n+                                        getName(),\n+                                        descriptor.getType().getName())\n+                                .handle();\n+            }\n+        }\n+\n+        return blobSoftRef;\n+    }\n+\n+    @Override\n+    protected void link() {\n+        super.link();\n+\n+        try {\n+            BaseEntityRef.OnDelete deleteHandler = getBlobSoftRef().getDeleteHandler();\n+\n+            if (deleteHandler == BaseEntityRef.OnDelete.CASCADE) {\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteCascade));\n+            } else if (deleteHandler == BaseEntityRef.OnDelete.SET_NULL) {\n+                if (!isNullable()) {\n+                    Mixing.LOG.WARN(\"Error in property %s of %s: The field is not marked as NullAllowed,\"\n+                                    + \" therefore SET_NULL is not a valid delete handler!\", this, getDescriptor());\n+                }\n+\n+                getReferencedDescriptors().forEach(entityDescriptor -> entityDescriptor.addCascadeDeleteHandler(this::onDeleteSetNull));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQxNzQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/ProcessBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMzozN1rOH6-RQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMzozN1rOH6-RQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTY4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public abstract class ProcessBlobsLoop extends BackgroundLoop {\n          \n          \n            \n            public abstract class ProcessBlobChangesLoop extends BackgroundLoop {", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531599682", "createdAt": "2020-11-27T13:23:37Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/ProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.PriorityParts;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Defines a loop to process creation, renaming and deletion of {@link Blob blobs} and deletion of {@link Directory directories}.\n+ *\n+ * @see ProcessBlobsLoop\n+ **/\n+public abstract class ProcessBlobsLoop extends BackgroundLoop {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQxODMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/ProcessBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMzo1M1rOH6-R1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyMzo1M1rOH6-R1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU5OTgyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * @see ProcessBlobsLoop", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531599828", "createdAt": "2020-11-27T13:23:53Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/ProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.PriorityParts;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Defines a loop to process creation, renaming and deletion of {@link Blob blobs} and deletion of {@link Directory directories}.\n+ *\n+ * @see ProcessBlobsLoop", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQxOTg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/ProcessBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyNDoyMlrOH6-SuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyNDoyMlrOH6-SuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMDA1Nw==", "bodyText": "Javadoc", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531600057", "createdAt": "2020-11-27T13:24:22Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/ProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import sirius.kernel.async.BackgroundLoop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.PriorityParts;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Defines a loop to process creation, renaming and deletion of {@link Blob blobs} and deletion of {@link Directory directories}.\n+ *\n+ * @see ProcessBlobsLoop\n+ **/\n+public abstract class ProcessBlobsLoop extends BackgroundLoop {\n+\n+    private static final double FREQUENCY_EVERY_FIFTEEN_SECONDS = 1 / 15d;\n+\n+    @PriorityParts(BlobCreatedRenamedHandler.class)\n+    protected List<BlobCreatedRenamedHandler> createdOrRenamedHandlers;\n+\n+    @Nonnull\n+    @Override\n+    public String getName() {\n+        return \"storage-layer2-process\";\n+    }\n+\n+    @Override\n+    public double maxCallFrequency() {\n+        return FREQUENCY_EVERY_FIFTEEN_SECONDS;\n+    }\n+\n+    @Nullable\n+    @Override\n+    protected String doWork() throws Exception {\n+        AtomicInteger deletedDirectories = deleteDirectories();\n+        AtomicInteger deletedBlobs = deleteBlobs();\n+        AtomicInteger createdRenamedBlobs = processCreatedOrRenamedBlobs();\n+\n+        if (deletedDirectories.get() == 0 && deletedBlobs.get() == 0 && createdRenamedBlobs.get() == 0) {\n+            return null;\n+        }\n+\n+        return Strings.apply(\"Deleted %s directories and %s blobs. Processed %s new or renamed blobs.\",\n+                             deletedDirectories.get(),\n+                             deletedBlobs.get(),\n+                             createdRenamedBlobs.get());\n+    }\n+\n+    protected abstract AtomicInteger deleteBlobs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQyNTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLProcessBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyNTo1NFrOH6-WDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyNTo1NFrOH6-WDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMDkxMA==", "bodyText": "catch within the loop so that a faulty handler doesn't kill all others", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531600910", "createdAt": "2020-11-27T13:25:54Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.jdbc;\n+\n+import sirius.biz.storage.layer2.Directory;\n+import sirius.biz.storage.layer2.ProcessBlobsLoop;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.jdbc.OMA;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements processing actions on {@link SQLDirectory directories} and {@link SQLBlob blobs}.\n+ */\n+@Register(framework = SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)\n+public class SQLProcessBlobsLoop extends ProcessBlobsLoop {\n+\n+    @Part\n+    private OMA oma;\n+\n+    @Override\n+    protected AtomicInteger deleteBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.DELETED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                if (Strings.isFilled(blob.getPhysicalObjectKey())) {\n+                    blob.getStorageSpace().getPhysicalSpace().delete(blob.getPhysicalObjectKey());\n+                }\n+\n+                oma.delete(blob);\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Layer 2/SQL: Failed to finally delete the blob %s (%s) in %s: (%s)\",\n+                                                  blob.getBlobKey(),\n+                                                  blob.getFilename(),\n+                                                  blob.getSpaceName())\n+                          .handle();\n+            }\n+        });\n+\n+        return numBlobs;\n+    }\n+\n+    @Override\n+    protected AtomicInteger deleteDirectories() {\n+        AtomicInteger numDirectories = new AtomicInteger();\n+        oma.select(SQLDirectory.class).eq(SQLDirectory.DELETED, true).limit(256).iterateAll(dir -> {\n+            try {\n+                propagateDelete(dir);\n+                oma.delete(dir);\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\n+                                  \"Layer 2/SQL: Failed to finally delete the directory %s (%s) in %s: (%s)\",\n+                                  dir.getId(),\n+                                  dir.getName(),\n+                                  dir.getSpaceName())\n+                          .handle();\n+            }\n+            numDirectories.incrementAndGet();\n+        });\n+\n+        return numDirectories;\n+    }\n+\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                createdOrRenamedHandlers.forEach(handler -> handler.execute(blob));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQyNjUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLProcessBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyNjoxOVrOH6-WvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyNzo0NVrOH6-Zhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTA4NA==", "bodyText": "move the inside .forEach and add the class name of the handler to the message", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531601084", "createdAt": "2020-11-27T13:26:19Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.jdbc;\n+\n+import sirius.biz.storage.layer2.Directory;\n+import sirius.biz.storage.layer2.ProcessBlobsLoop;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.jdbc.OMA;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements processing actions on {@link SQLDirectory directories} and {@link SQLBlob blobs}.\n+ */\n+@Register(framework = SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)\n+public class SQLProcessBlobsLoop extends ProcessBlobsLoop {\n+\n+    @Part\n+    private OMA oma;\n+\n+    @Override\n+    protected AtomicInteger deleteBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.DELETED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                if (Strings.isFilled(blob.getPhysicalObjectKey())) {\n+                    blob.getStorageSpace().getPhysicalSpace().delete(blob.getPhysicalObjectKey());\n+                }\n+\n+                oma.delete(blob);\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Layer 2/SQL: Failed to finally delete the blob %s (%s) in %s: (%s)\",\n+                                                  blob.getBlobKey(),\n+                                                  blob.getFilename(),\n+                                                  blob.getSpaceName())\n+                          .handle();\n+            }\n+        });\n+\n+        return numBlobs;\n+    }\n+\n+    @Override\n+    protected AtomicInteger deleteDirectories() {\n+        AtomicInteger numDirectories = new AtomicInteger();\n+        oma.select(SQLDirectory.class).eq(SQLDirectory.DELETED, true).limit(256).iterateAll(dir -> {\n+            try {\n+                propagateDelete(dir);\n+                oma.delete(dir);\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\n+                                  \"Layer 2/SQL: Failed to finally delete the directory %s (%s) in %s: (%s)\",\n+                                  dir.getId(),\n+                                  dir.getName(),\n+                                  dir.getSpaceName())\n+                          .handle();\n+            }\n+            numDirectories.incrementAndGet();\n+        });\n+\n+        return numDirectories;\n+    }\n+\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                createdOrRenamedHandlers.forEach(handler -> handler.execute(blob));\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTc5OA==", "bodyText": "also, this whole \"invoke all handlers\" could be a single method in the abstract base class as it is independent to the db", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531601798", "createdAt": "2020-11-27T13:27:45Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.jdbc;\n+\n+import sirius.biz.storage.layer2.Directory;\n+import sirius.biz.storage.layer2.ProcessBlobsLoop;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.jdbc.OMA;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements processing actions on {@link SQLDirectory directories} and {@link SQLBlob blobs}.\n+ */\n+@Register(framework = SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)\n+public class SQLProcessBlobsLoop extends ProcessBlobsLoop {\n+\n+    @Part\n+    private OMA oma;\n+\n+    @Override\n+    protected AtomicInteger deleteBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.DELETED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                if (Strings.isFilled(blob.getPhysicalObjectKey())) {\n+                    blob.getStorageSpace().getPhysicalSpace().delete(blob.getPhysicalObjectKey());\n+                }\n+\n+                oma.delete(blob);\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Layer 2/SQL: Failed to finally delete the blob %s (%s) in %s: (%s)\",\n+                                                  blob.getBlobKey(),\n+                                                  blob.getFilename(),\n+                                                  blob.getSpaceName())\n+                          .handle();\n+            }\n+        });\n+\n+        return numBlobs;\n+    }\n+\n+    @Override\n+    protected AtomicInteger deleteDirectories() {\n+        AtomicInteger numDirectories = new AtomicInteger();\n+        oma.select(SQLDirectory.class).eq(SQLDirectory.DELETED, true).limit(256).iterateAll(dir -> {\n+            try {\n+                propagateDelete(dir);\n+                oma.delete(dir);\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\n+                                  \"Layer 2/SQL: Failed to finally delete the directory %s (%s) in %s: (%s)\",\n+                                  dir.getId(),\n+                                  dir.getName(),\n+                                  dir.getSpaceName())\n+                          .handle();\n+            }\n+            numDirectories.incrementAndGet();\n+        });\n+\n+        return numDirectories;\n+    }\n+\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                createdOrRenamedHandlers.forEach(handler -> handler.execute(blob));\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTA4NA=="}, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQyODA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLProcessBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyNjo0OFrOH6-Xuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyNjo0OFrOH6-Xuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTMzOQ==", "bodyText": "extract lambda into method - this is quite long and nested", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531601339", "createdAt": "2020-11-27T13:26:48Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/jdbc/SQLProcessBlobsLoop.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.jdbc;\n+\n+import sirius.biz.storage.layer2.Directory;\n+import sirius.biz.storage.layer2.ProcessBlobsLoop;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.db.jdbc.OMA;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+\n+import java.sql.SQLException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Implements processing actions on {@link SQLDirectory directories} and {@link SQLBlob blobs}.\n+ */\n+@Register(framework = SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)\n+public class SQLProcessBlobsLoop extends ProcessBlobsLoop {\n+\n+    @Part\n+    private OMA oma;\n+\n+    @Override\n+    protected AtomicInteger deleteBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.DELETED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                if (Strings.isFilled(blob.getPhysicalObjectKey())) {\n+                    blob.getStorageSpace().getPhysicalSpace().delete(blob.getPhysicalObjectKey());\n+                }\n+\n+                oma.delete(blob);\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\"Layer 2/SQL: Failed to finally delete the blob %s (%s) in %s: (%s)\",\n+                                                  blob.getBlobKey(),\n+                                                  blob.getFilename(),\n+                                                  blob.getSpaceName())\n+                          .handle();\n+            }\n+        });\n+\n+        return numBlobs;\n+    }\n+\n+    @Override\n+    protected AtomicInteger deleteDirectories() {\n+        AtomicInteger numDirectories = new AtomicInteger();\n+        oma.select(SQLDirectory.class).eq(SQLDirectory.DELETED, true).limit(256).iterateAll(dir -> {\n+            try {\n+                propagateDelete(dir);\n+                oma.delete(dir);\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\n+                                  \"Layer 2/SQL: Failed to finally delete the directory %s (%s) in %s: (%s)\",\n+                                  dir.getId(),\n+                                  dir.getName(),\n+                                  dir.getSpaceName())\n+                          .handle();\n+            }\n+            numDirectories.incrementAndGet();\n+        });\n+\n+        return numDirectories;\n+    }\n+\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        oma.select(SQLBlob.class).eq(SQLBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQyOTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoProcessBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyNzoxMFrOH6-Ybw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyNzoxMFrOH6-Ybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMTUxOQ==", "bodyText": "s.a.", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531601519", "createdAt": "2020-11-27T13:27:10Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoProcessBlobsLoop.java", "diffHunk": "@@ -108,11 +84,41 @@ private AtomicInteger deleteDirectories() {\n         return numDirectories;\n     }\n \n-    private void propagateDelete(MongoDirectory dir) {\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        mango.select(MongoBlob.class).eq(MongoBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDQzMjk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoProcessBlobsLoop.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyODozMlrOH6-a3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyODozMlrOH6-a3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMjE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String directoryId = ((MongoDirectory) dir).getId();\n          \n          \n            \n                    String directoryId = dir.getIdAsString();", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r531602143", "createdAt": "2020-11-27T13:28:32Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoProcessBlobsLoop.java", "diffHunk": "@@ -108,11 +84,41 @@ private AtomicInteger deleteDirectories() {\n         return numDirectories;\n     }\n \n-    private void propagateDelete(MongoDirectory dir) {\n+    @Override\n+    protected AtomicInteger processCreatedOrRenamedBlobs() {\n+        AtomicInteger numBlobs = new AtomicInteger();\n+        mango.select(MongoBlob.class).eq(MongoBlob.CREATED_OR_RENAMED, true).limit(256).iterateAll(blob -> {\n+            try {\n+                createdOrRenamedHandlers.forEach(handler -> handler.execute(blob));\n+                numBlobs.incrementAndGet();\n+            } catch (Exception e) {\n+                Exceptions.handle()\n+                          .to(StorageUtils.LOG)\n+                          .error(e)\n+                          .withSystemErrorMessage(\n+                                  \"Layer 2/Mongo: Failed to process the changed blob %s (%s) in %s: %s (%s)\",\n+                                  blob.getBlobKey(),\n+                                  blob.getFilename(),\n+                                  blob.getSpaceName())\n+                          .handle();\n+            } finally {\n+                mongo.update()\n+                     .set(MongoBlob.CREATED_OR_RENAMED, false)\n+                     .where(MongoBlob.ID, blob.getId())\n+                     .executeFor(MongoBlob.class);\n+            }\n+        });\n+\n+        return numBlobs;\n+    }\n+\n+    @Override\n+    protected void propagateDelete(Directory dir) {\n+        String directoryId = ((MongoDirectory) dir).getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a586958b601d269ecbe1ff851c7b7d4cefbe40e"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MDA0NjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1Mzo1OFrOH7vNVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNzo1Mzo1OFrOH7vNVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjQwMTQ5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));\n          \n          \n            \n                            blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));", "url": "https://github.com/scireum/sirius-biz/pull/926#discussion_r532401492", "createdAt": "2020-11-30T07:53:58Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobSoftRefProperty.java", "diffHunk": "@@ -64,6 +86,104 @@ private BlobSoftRefProperty(@Nonnull EntityDescriptor descriptor,\n         super(descriptor, accessPath, field);\n     }\n \n+    private void forEachBlobType(Consumer<EntityDescriptor> callback) {\n+        if (Sirius.isFrameworkEnabled(SQLBlobStorage.FRAMEWORK_JDBC_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(SQLBlob.class));\n+        }\n+        if (Sirius.isFrameworkEnabled(MongoBlobStorage.FRAMEWORK_MONGO_BLOB_STORAGE)) {\n+            callback.accept(mixing.getDescriptor(MongoBlob.class));\n+        }\n+    }\n+\n+    private BlobSoftRef getBlobSoftRef() {\n+        if (blobSoftRef == null) {\n+            try {\n+                this.blobSoftRef = (BlobSoftRef) field.get(accessPath.apply(descriptor.getReferenceInstance()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbfee31e87277d23240dd81df8d14e06ab3e94a8"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1867, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}