{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxOTY3OTgz", "number": 760, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxOTo1OFrOD-_MIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozODo1NlrOD-_jtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzczNjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/importer/txn/ImportTransactionData.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxOTo1OFrOGZa-Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo1NzowNVrOGZcLog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwOTUxOA==", "bodyText": "find den feldname nicht gut, wieso nicht einfach transactionId oder importId oder sowas in die Richtung?", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429309518", "createdAt": "2020-05-22T15:19:58Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/importer/txn/ImportTransactionData.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.importer.txn;\n+\n+import sirius.biz.importer.AutoImport;\n+import sirius.biz.protocol.NoJournal;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+\n+/**\n+ * Contains an import transaction id.\n+ * <p>\n+ * This is used by the {@link ImportTransactionHelper} to identify and delete all unchanged\n+ * entities after an update transaction has beend completed.\n+ * <p>\n+ * Note that appropriate index should be added to the embedding entity.\n+ */\n+public class ImportTransactionData extends Composite {\n+\n+    /**\n+     * Represents the last import transaction id which was used to modify the owning entity.\n+     */\n+    public static final Mapping TXN_ID = Mapping.named(\"txnId\");\n+    @AutoImport\n+    @NoJournal\n+    private long txnId = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4fef7f86dac5c6fe1a7b44fdcb40190313ee23b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMTA1MA==", "bodyText": "Bzw rein theoretisch ginge ja wahrscheinlich auch nur ID weils ja n composite ist", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429311050", "createdAt": "2020-05-22T15:22:55Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/importer/txn/ImportTransactionData.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.importer.txn;\n+\n+import sirius.biz.importer.AutoImport;\n+import sirius.biz.protocol.NoJournal;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+\n+/**\n+ * Contains an import transaction id.\n+ * <p>\n+ * This is used by the {@link ImportTransactionHelper} to identify and delete all unchanged\n+ * entities after an update transaction has beend completed.\n+ * <p>\n+ * Note that appropriate index should be added to the embedding entity.\n+ */\n+public class ImportTransactionData extends Composite {\n+\n+    /**\n+     * Represents the last import transaction id which was used to modify the owning entity.\n+     */\n+    public static final Mapping TXN_ID = Mapping.named(\"txnId\");\n+    @AutoImport\n+    @NoJournal\n+    private long txnId = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwOTUxOA=="}, "originalCommit": {"oid": "b4fef7f86dac5c6fe1a7b44fdcb40190313ee23b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyOTMxNA==", "bodyText": "das ist halt bei S2 schon \u00fcberall so drin - un eigentlich ists wurst wie das feld heisst, auf das greifft man eig eh nie manuell zu", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429329314", "createdAt": "2020-05-22T15:57:05Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/importer/txn/ImportTransactionData.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.importer.txn;\n+\n+import sirius.biz.importer.AutoImport;\n+import sirius.biz.protocol.NoJournal;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+\n+/**\n+ * Contains an import transaction id.\n+ * <p>\n+ * This is used by the {@link ImportTransactionHelper} to identify and delete all unchanged\n+ * entities after an update transaction has beend completed.\n+ * <p>\n+ * Note that appropriate index should be added to the embedding entity.\n+ */\n+public class ImportTransactionData extends Composite {\n+\n+    /**\n+     * Represents the last import transaction id which was used to modify the owning entity.\n+     */\n+    public static final Mapping TXN_ID = Mapping.named(\"txnId\");\n+    @AutoImport\n+    @NoJournal\n+    private long txnId = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwOTUxOA=="}, "originalCommit": {"oid": "b4fef7f86dac5c6fe1a7b44fdcb40190313ee23b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzc1Mjc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToyNToxN1rOGZbJKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozMTozOFrOGZbWkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMjI5Nw==", "bodyText": "Find den Namen irgendwie nicht sehr deskriptiv, wieso nicht sowas wie TransactionalEntitiyImportJob oder RelationalEntityImportJob?", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429312297", "createdAt": "2020-05-22T15:25:17Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n+ * synchronized as described by {@link SyncMode}, which is handled by this implementation.\n+ * <p>\n+ * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the\n+ * framework can provide efficient delta updates.\n+ *\n+ * @param <E> the type of entities being imported by this job\n+ * @param <Q> the generic type of queries for the entities being procesed\n+ */\n+public class EntityImportSyncJob<E extends BaseEntity<?> & ImportTransactionalEntity, Q extends Query<Q, E, ?>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1107cbea7328ec7faf210d1c78585638a36af2f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNTcyOA==", "bodyText": "F\u00e4nd RelationalEntityImportJob auch besser", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429315728", "createdAt": "2020-05-22T15:31:38Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n+ * synchronized as described by {@link SyncMode}, which is handled by this implementation.\n+ * <p>\n+ * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the\n+ * framework can provide efficient delta updates.\n+ *\n+ * @param <E> the type of entities being imported by this job\n+ * @param <Q> the generic type of queries for the entities being procesed\n+ */\n+public class EntityImportSyncJob<E extends BaseEntity<?> & ImportTransactionalEntity, Q extends Query<Q, E, ?>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMjI5Nw=="}, "originalCommit": {"oid": "f1107cbea7328ec7faf210d1c78585638a36af2f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzc1NDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToyNTo1NVrOGZbKmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToyNTo1NVrOGZbKmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMjY2NQ==", "bodyText": "sollten parts ned eher \u00fcber klassenfelder?", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429312665", "createdAt": "2020-05-22T15:25:55Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n+ * synchronized as described by {@link SyncMode}, which is handled by this implementation.\n+ * <p>\n+ * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the\n+ * framework can provide efficient delta updates.\n+ *\n+ * @param <E> the type of entities being imported by this job\n+ * @param <Q> the generic type of queries for the entities being procesed\n+ */\n+public class EntityImportSyncJob<E extends BaseEntity<?> & ImportTransactionalEntity, Q extends Query<Q, E, ?>>\n+        extends DictionaryBasedImportJob {\n+\n+    protected final EntityDescriptor descriptor;\n+    protected Consumer<Context> contextExtender;\n+    protected ImportTransactionHelper importTransactionHelper;\n+    protected Class<E> type;\n+    protected SyncMode mode;\n+    protected BiConsumer<ProcessContext, Q> queryTuner;\n+\n+    @Part\n+    private static Mixing mixing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1107cbea7328ec7faf210d1c78585638a36af2f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzc1OTU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToyNzoxN1rOGZbNfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToyNzoxN1rOGZbNfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxMzQwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void createorUpdateEntity(E entity, Context context, Watch watch) {\n          \n          \n            \n                private void createOrUpdateEntity(E entity, Context context, Watch watch) {\n          \n      \n    \n    \n  \n\nund halt an den anderen stellen auch", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429313405", "createdAt": "2020-05-22T15:27:17Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n+ * synchronized as described by {@link SyncMode}, which is handled by this implementation.\n+ * <p>\n+ * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the\n+ * framework can provide efficient delta updates.\n+ *\n+ * @param <E> the type of entities being imported by this job\n+ * @param <Q> the generic type of queries for the entities being procesed\n+ */\n+public class EntityImportSyncJob<E extends BaseEntity<?> & ImportTransactionalEntity, Q extends Query<Q, E, ?>>\n+        extends DictionaryBasedImportJob {\n+\n+    protected final EntityDescriptor descriptor;\n+    protected Consumer<Context> contextExtender;\n+    protected ImportTransactionHelper importTransactionHelper;\n+    protected Class<E> type;\n+    protected SyncMode mode;\n+    protected BiConsumer<ProcessContext, Q> queryTuner;\n+\n+    @Part\n+    private static Mixing mixing;\n+\n+    @Part\n+    private static Tenants<?, ?, ?> rawTenants;\n+\n+    /**\n+     * Creates a new job for the given factory, name and process.\n+     *\n+     * @param fileParameter        the parameter which is used to derive the import file from\n+     * @param ignoreEmptyParameter the parameter which is used to determine if empty values should be ignored\n+     * @param syncModeParameter    the parameter which is used to determine the {@link SyncMode} to use\n+     * @param type                 the type of entities being imported\n+     * @param dictionary           the import dictionary to use\n+     * @param process              the process context itself\n+     * @param factoryName          the name of the factory which created this job\n+     */\n+    public EntityImportSyncJob(FileParameter fileParameter,\n+                               BooleanParameter ignoreEmptyParameter,\n+                               EnumParameter<SyncMode> syncModeParameter,\n+                               Class<E> type,\n+                               ImportDictionary dictionary,\n+                               ProcessContext process,\n+                               String factoryName) {\n+        super(fileParameter, ignoreEmptyParameter, dictionary, process);\n+        this.importer.setFactoryName(factoryName);\n+        this.importTransactionHelper = importer.findHelper(ImportTransactionHelper.class);\n+        this.mode = process.getParameter(syncModeParameter).orElse(SyncMode.NEW_AND_UPDATE_ONLY);\n+        this.type = type;\n+        this.descriptor = mixing.getDescriptor(type);\n+    }\n+\n+    /**\n+     * Specifies a context extender which can be used to transfer job parameters into the import context.\n+     *\n+     * @param contextExtender the extender to specify\n+     * @return the import job itself for fluent method calls\n+     */\n+    public EntityImportSyncJob<E, Q> withContextExtender(Consumer<Context> contextExtender) {\n+        this.contextExtender = contextExtender;\n+        return this;\n+    }\n+\n+    public EntityImportSyncJob<E, Q> withDeleteQueryTuner(BiConsumer<ProcessContext, Q> queryTuner) {\n+        this.queryTuner = queryTuner;\n+        return this;\n+    }\n+\n+    @Override\n+    protected void executeForStream(String filename, InputStream in) throws Exception {\n+        importTransactionHelper.start();\n+        LineBasedProcessor.create(filename, in).run(this, error -> {\n+            process.handle(error);\n+            return true;\n+        });\n+        commitImportTransaction();\n+    }\n+\n+    /**\n+     * Commits the import transaction by deleting all untouched entities.\n+     */\n+    protected void commitImportTransaction() {\n+        if (mode != SyncMode.SYNC) {\n+            return;\n+        }\n+\n+        Watch watch = Watch.start();\n+        importTransactionHelper.deleteUnmarked(type, this::tuneImportTransactionDeleteQuery, entity -> {\n+            process.addTiming(NLS.get(\"EntityImportJob.entityDeleted\"), watch.elapsed(TimeUnit.MILLISECONDS, true));\n+        });\n+    }\n+\n+    /**\n+     * Tunes the delete query of the import transaction so that all untouched entities will be deleted.\n+     *\n+     * @param deleteQuery the query to enhance\n+     */\n+    protected void tuneImportTransactionDeleteQuery(Q deleteQuery) {\n+        queryTuner.accept(process, deleteQuery);\n+    }\n+\n+    @Override\n+    protected final void handleRow(int index, Context context) {\n+        Watch watch = Watch.start();\n+\n+        if (contextExtender != null) {\n+            contextExtender.accept(context);\n+        }\n+\n+        E entity = findAndLoad(context);\n+        if (mode == SyncMode.DELETE_EXISTING) {\n+            if (!entity.isNew()) {\n+                importer.deleteNow(entity);\n+                process.addTiming(NLS.get(\"EntityImportJob.entityDeleted\"), watch.elapsedMillis());\n+            }\n+        } else {\n+            createorUpdateEntity(entity, context, watch);\n+        }\n+    }\n+\n+    private void createorUpdateEntity(E entity, Context context, Watch watch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1107cbea7328ec7faf210d1c78585638a36af2f"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzc3NjgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozMjo0MFrOGZbYgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozMjo0MFrOGZbYgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNjIyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n          \n          \n            \n             * \"relational\" entities (entities which represent a relation between two other entities). These are often", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429316224", "createdAt": "2020-05-22T15:32:40Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1107cbea7328ec7faf210d1c78585638a36af2f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzc3ODAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozMzowNFrOGZbZPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozMzowNFrOGZbZPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNjQxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the\n          \n          \n            \n             * To support an efficient operation, such entities should implement {@link ImportTransactionalEntity} to that the", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429316413", "createdAt": "2020-05-22T15:33:04Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportSyncJob.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.importer.format.ImportDictionary;\n+import sirius.biz.importer.txn.ImportTransactionHelper;\n+import sirius.biz.importer.txn.ImportTransactionalEntity;\n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.tenants.Tenants;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Context;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.HandledException;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.data.LineBasedProcessor;\n+\n+import java.io.InputStream;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a job for importing line based files (CSV, Excel) as relational entities.\n+ * <p>\n+ * This job behaves alomost exactly like {@link EntityImportJob}. The only difference is that it is suited for\n+ * \"relational\" entities (entities which represent a relation between two other entities). Theser are often\n+ * synchronized as described by {@link SyncMode}, which is handled by this implementation.\n+ * <p>\n+ * To support an ideal operation, such entities should implement {@link ImportTransactionalEntity} to that the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1107cbea7328ec7faf210d1c78585638a36af2f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzc5MzM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/SyncMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozODowNFrOGZbjJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozODowNFrOGZbjJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxODk1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Only updates existing entities.\n          \n          \n            \n                 * Creates new entities and also updates existing ones.", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429318950", "createdAt": "2020-05-22T15:38:04Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/jobs/batch/file/SyncMode.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.kernel.nls.NLS;\n+\n+/**\n+ * Declares the modes of operation for an {@link EntityImportJob}.\n+ */\n+public enum SyncMode {\n+\n+    /**\n+     * Only updates existing entities.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1107cbea7328ec7faf210d1c78585638a36af2f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzc5NjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/SyncMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozODo1NlrOGZblIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozODo1NlrOGZblIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxOTQ1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Creates new entities and also updates existing ones.\n          \n          \n            \n                 * Creates new entities, updates existing ones and deletes outdated entities.", "url": "https://github.com/scireum/sirius-biz/pull/760#discussion_r429319456", "createdAt": "2020-05-22T15:38:56Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/jobs/batch/file/SyncMode.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.kernel.nls.NLS;\n+\n+/**\n+ * Declares the modes of operation for an {@link EntityImportJob}.\n+ */\n+public enum SyncMode {\n+\n+    /**\n+     * Only updates existing entities.\n+     */\n+    NEW_AND_UPDATE_ONLY,\n+\n+    /**\n+     * Only updates existing entities.\n+     */\n+    UPDATE_ONLY,\n+\n+    /**\n+     * Only creates new entities.\n+     */\n+    NEW_ONLY,\n+\n+    /**\n+     * Creates new entities and also updates existing ones.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1107cbea7328ec7faf210d1c78585638a36af2f"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1896, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}