{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0Mjk0MTA3", "number": 722, "title": "SIRI-96: Provides a rudimentary UI for  BlobHardRefs", "bodyText": "The UI provided is a rudimentary approach (mostly copied from storedObjectUploader.html.pasta) as a harsh timeframe was given. This will need some love+work in the near future.", "createdAt": "2020-04-16T11:22:30Z", "url": "https://github.com/scireum/sirius-biz/pull/722", "merged": true, "mergeCommit": {"oid": "b0ad0eacf394583828e5e069c722703b59c0aca8"}, "closed": true, "closedAt": "2020-04-17T11:51:59Z", "author": {"login": "andyHa"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYN13cAFqTM5NDcwOTE1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYcwl-gFqTM5NTI0Nzc0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NzA5MTU2", "url": "https://github.com/scireum/sirius-biz/pull/722#pullrequestreview-394709156", "createdAt": "2020-04-16T14:46:59Z", "commit": {"oid": "341d2f3aee5582fda9ea22648a12581277606ea3"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0Njo1OVrOGGo_3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0NzoyMFrOGGpA_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNjM1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Note that this blob object itself will also be update with the aprropriate metadata\n          \n          \n            \n                 * Note that this blob object itself will also be updated with the appropriate metadata", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r409616351", "createdAt": "2020-04-16T14:46:59Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/storage/layer2/Blob.java", "diffHunk": "@@ -160,6 +160,9 @@\n      * <p>\n      * Also note that if a file is used to provide the new contents of this blob, use\n      * {@link #updateContent(String, File)} as this is likely way more efficient.\n+     * <p>\n+     * Note that this blob object itself will also be update with the aprropriate metadata", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341d2f3aee5582fda9ea22648a12581277606ea3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNjYzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void uploaduploadFile(final WebContext ctx,\n          \n          \n            \n                public void uploadFile(final WebContext ctx,", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r409616638", "createdAt": "2020-04-16T14:47:20Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.InputStreamHandler;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides some helper routes for managing and uploading {@link Blob blobs}.\n+ * <p>\n+ * Note that most of the management UI is handled via the VFS (layer 3) in the\n+ * {@link sirius.biz.storage.layer3.VFSController}.\n+ */\n+@Register(framework = StorageUtils.FRAMEWORK_STORAGE, classes = Controller.class)\n+public class BlobController extends BizController {\n+\n+    @Part\n+    private BlobStorage blobStorage;\n+\n+    /**\n+     * Uploads a file into a temporary Blob, to be later persisted via a {@link BlobHardRef}.\n+     * <p>\n+     * As long as the blob remains unreferenced, it will be marked as temporary and will be eventually\n+     * deleted. However, if an entity references the blob via a {@link BlobHardRef}, it will be marked\n+     * as permanent.\n+     *\n+     * @param ctx       the request to handle\n+     * @param out       the response to the AJAX call\n+     * @param spaceName the {@link BlobStorageSpace} to store the object in\n+     * @param upload    the content of the upload\n+     */\n+    @Routed(value = \"/dasd/upload-file/:1\", preDispatchable = true, jsonCall = true)\n+    @LoginRequired\n+    public void uploaduploadFile(final WebContext ctx,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341d2f3aee5582fda9ea22648a12581277606ea3"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NzE4Mjgx", "url": "https://github.com/scireum/sirius-biz/pull/722#pullrequestreview-394718281", "createdAt": "2020-04-16T14:55:49Z", "commit": {"oid": "d693cd2c4cb0a1e50983b39cdf104f2e4de0f446"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MjM2Mjk4", "url": "https://github.com/scireum/sirius-biz/pull/722#pullrequestreview-395236298", "createdAt": "2020-04-17T07:52:55Z", "commit": {"oid": "d693cd2c4cb0a1e50983b39cdf104f2e4de0f446"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MjM1MzMz", "url": "https://github.com/scireum/sirius-biz/pull/722#pullrequestreview-395235333", "createdAt": "2020-04-17T07:51:22Z", "commit": {"oid": "319097dcc543f3c405177555f124b70d89a96168"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1MToyM1rOGHDnLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1MToyM1rOGHDnLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1MjM5Ng==", "bodyText": "This also changes the logic not only readability??", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410052396", "createdAt": "2020-04-17T07:51:23Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobHardRefProperty.java", "diffHunk": "@@ -151,13 +151,14 @@ protected void onBeforeSaveChecks(Object entity) {\n     @Override\n     protected void onAfterSave(Object entity) {\n         BlobHardRef ref = getRef(entity);\n-        if (ref.changed && ref.isFilled()) {\n-            ref.getBlob()\n-               .getStorageSpace()\n-               .markAsUsed(((BaseEntity<?>) entity).getUniqueName(), getName(), ref.getKey());\n-            ref.getBlob()\n-               .getStorageSpace()\n-               .deleteReferencedBlobs(((BaseEntity<?>) entity).getUniqueName(), getName(), ref.getKey());\n+        if (ref.changed) {\n+            BlobStorageSpace storageSpace = ref.getBlob().getStorageSpace();\n+            String uniqueName = ((BaseEntity<?>) entity).getUniqueName();\n+\n+            if (ref.isFilled()) {\n+                storageSpace.markAsUsed(uniqueName, getName(), ref.getKey());\n+            }\n+            storageSpace.deleteReferencedBlobs(uniqueName, getName(), ref.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "319097dcc543f3c405177555f124b70d89a96168"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MjM4Njk1", "url": "https://github.com/scireum/sirius-biz/pull/722#pullrequestreview-395238695", "createdAt": "2020-04-17T07:56:47Z", "commit": {"oid": "acbfc23b65b0ccf07cb0ffb39f0993f50d172f91"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1Njo0N1rOGHDyIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1ODoyOVrOGHD1qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NTIwMQ==", "bodyText": "Das Kommentar von oben \u00fcbernehmen?", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410055201", "createdAt": "2020-04-17T07:56:47Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlobStorageSpace.java", "diffHunk": "@@ -341,7 +341,14 @@ protected MongoDirectory fetchBlobParent(MongoBlob blob) {\n                                      .executeFor(MongoBlob.class)\n                                      .getModifiedCount();\n             if (numUpdated == 1) {\n-                return Optional.ofNullable(blob.getPhysicalObjectKey());\n+                String previousPhysicalObjectKey = blob.getPhysicalObjectKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acbfc23b65b0ccf07cb0ffb39f0993f50d172f91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NTgyMQ==", "bodyText": "link blob?", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410055821", "createdAt": "2020-04-17T07:57:58Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.InputStreamHandler;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides some helper routes for managing and uploading {@link Blob blobs}.\n+ * <p>\n+ * Note that most of the management UI is handled via the VFS (layer 3) in the\n+ * {@link sirius.biz.storage.layer3.VFSController}.\n+ */\n+@Register(framework = StorageUtils.FRAMEWORK_STORAGE, classes = Controller.class)\n+public class BlobController extends BizController {\n+\n+    @Part\n+    private BlobStorage blobStorage;\n+\n+    /**\n+     * Uploads a file into a temporary Blob, to be later persisted via a {@link BlobHardRef}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13fcbea08602ad3ce5e1579f0d125f1d15ae530"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NjAyMA==", "bodyText": "TODO ohne Ticket referenz?", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410056020", "createdAt": "2020-04-17T07:58:20Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.InputStreamHandler;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides some helper routes for managing and uploading {@link Blob blobs}.\n+ * <p>\n+ * Note that most of the management UI is handled via the VFS (layer 3) in the\n+ * {@link sirius.biz.storage.layer3.VFSController}.\n+ */\n+@Register(framework = StorageUtils.FRAMEWORK_STORAGE, classes = Controller.class)\n+public class BlobController extends BizController {\n+\n+    @Part\n+    private BlobStorage blobStorage;\n+\n+    /**\n+     * Uploads a file into a temporary Blob, to be later persisted via a {@link BlobHardRef}.\n+     * <p>\n+     * As long as the blob remains unreferenced, it will be marked as temporary and will be eventually\n+     * deleted. However, if an entity references the blob via a {@link BlobHardRef}, it will be marked\n+     * as permanent.\n+     *\n+     * @param ctx       the request to handle\n+     * @param out       the response to the AJAX call\n+     * @param spaceName the {@link BlobStorageSpace} to store the object in\n+     * @param upload    the content of the upload\n+     */\n+    @Routed(value = \"/dasd/upload-file/:1\", preDispatchable = true, jsonCall = true)\n+    @LoginRequired\n+    public void uploaduploadFile(final WebContext ctx,\n+                                 JSONStructuredOutput out,\n+                                 String spaceName,\n+                                 InputStreamHandler upload) {\n+        Blob blob = blobStorage.getSpace(spaceName).createTemporaryBlob();\n+        try {\n+            try {\n+                ctx.markAsLongCall();\n+                //TODO remove legacy qqfile once library is updated...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13fcbea08602ad3ce5e1579f0d125f1d15ae530"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NjEwNA==", "bodyText": "TODO ohne Ticket Referenz?", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410056104", "createdAt": "2020-04-17T07:58:29Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.InputStreamHandler;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides some helper routes for managing and uploading {@link Blob blobs}.\n+ * <p>\n+ * Note that most of the management UI is handled via the VFS (layer 3) in the\n+ * {@link sirius.biz.storage.layer3.VFSController}.\n+ */\n+@Register(framework = StorageUtils.FRAMEWORK_STORAGE, classes = Controller.class)\n+public class BlobController extends BizController {\n+\n+    @Part\n+    private BlobStorage blobStorage;\n+\n+    /**\n+     * Uploads a file into a temporary Blob, to be later persisted via a {@link BlobHardRef}.\n+     * <p>\n+     * As long as the blob remains unreferenced, it will be marked as temporary and will be eventually\n+     * deleted. However, if an entity references the blob via a {@link BlobHardRef}, it will be marked\n+     * as permanent.\n+     *\n+     * @param ctx       the request to handle\n+     * @param out       the response to the AJAX call\n+     * @param spaceName the {@link BlobStorageSpace} to store the object in\n+     * @param upload    the content of the upload\n+     */\n+    @Routed(value = \"/dasd/upload-file/:1\", preDispatchable = true, jsonCall = true)\n+    @LoginRequired\n+    public void uploaduploadFile(final WebContext ctx,\n+                                 JSONStructuredOutput out,\n+                                 String spaceName,\n+                                 InputStreamHandler upload) {\n+        Blob blob = blobStorage.getSpace(spaceName).createTemporaryBlob();\n+        try {\n+            try {\n+                ctx.markAsLongCall();\n+                //TODO remove legacy qqfile once library is updated...\n+                String name = ctx.get(\"filename\").asString(ctx.get(\"qqfile\").asString());\n+                blob.updateContent(name, upload, Long.parseLong(ctx.getHeader(HttpHeaderNames.CONTENT_LENGTH)));\n+\n+                out.property(\"fileId\", blob.getBlobKey());\n+\n+                // TODO remove once the blobHardRefField has been refactored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13fcbea08602ad3ce5e1579f0d125f1d15ae530"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30a5620e8be131405564023f1fd94609e13ed6d2", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/30a5620e8be131405564023f1fd94609e13ed6d2", "committedDate": "2020-04-17T08:02:50Z", "message": "Always deletes left-over blobs if a reference changes.\n\nIf a new blob key is placed in a reference, we previously\nonly marked the old blob as deleted, if a new one was given.\n\nHowever, if the reference is cleared (set to null), we still should\nmark the previously referenced blob as deleted."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "532115d05c4415e69f6f1bd24c4d8956e56df14f", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/532115d05c4415e69f6f1bd24c4d8956e56df14f", "committedDate": "2020-04-17T08:04:29Z", "message": "Also updates the in memory blob when updating the metadata store.\n\nWe previously only updated the underlying database but left the given\nblob filled with the previous values. This is kind of unexpected for\nthe caller of \"update\", therefore we also update the in-memory blob\n(without a fetch from the database).\n\nFixes: SIRI-96"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90c0d904494b4e9ab4c1ca6cf45280532d2a20ad", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/90c0d904494b4e9ab4c1ca6cf45280532d2a20ad", "committedDate": "2020-04-17T08:04:59Z", "message": "Uses the filename in the given blob if available.\n\nThis will avoid an unnecessary cache lookup."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "241e9d0f10484aa2fa0e990ce067a4be80f34c19", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/241e9d0f10484aa2fa0e990ce067a4be80f34c19", "committedDate": "2020-04-17T08:07:04Z", "message": "Provides a UI component to update the value of a BlobHardRef.\n\nThis is done by performing an AJAX upload into a temporary blob.\nOnce the entity containing the BlobHardRef is persisted,\nthe blob is marked as non-temporary. Otherwise, the blob is\nautomatically deleted after a timeout.\n\nThe controller provided here supports the actual AJAX call.\n\nNote that the UI is very rudimentary and more or less a copy of\nstoredObjectUploader.html.pasta. This needs some love+work\nin the near future.\n\nFixes: SIRI-96"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "666bf83502d3cd94c9eb1bfbeba61f1d6ecce654", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/666bf83502d3cd94c9eb1bfbeba61f1d6ecce654", "committedDate": "2020-04-17T08:07:49Z", "message": "Prevents a NPE when a BlobHardRef is set to null.\n\nPreviously we tried to determine which space is used\nby using ref.getBlob().getStorageSpace(), we now use\na newly helper method provided by the BlobHardRef which\nis smart enough to lookup the space, if no blob is present.\n\nFixes: SIRI-96"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d693cd2c4cb0a1e50983b39cdf104f2e4de0f446", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/d693cd2c4cb0a1e50983b39cdf104f2e4de0f446", "committedDate": "2020-04-16T14:51:15Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Matthias Keck <60612914+mkeckmkeck@users.noreply.github.com>"}, "afterCommit": {"oid": "666bf83502d3cd94c9eb1bfbeba61f1d6ecce654", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/666bf83502d3cd94c9eb1bfbeba61f1d6ecce654", "committedDate": "2020-04-17T08:07:49Z", "message": "Prevents a NPE when a BlobHardRef is set to null.\n\nPreviously we tried to determine which space is used\nby using ref.getBlob().getStorageSpace(), we now use\na newly helper method provided by the BlobHardRef which\nis smart enough to lookup the space, if no blob is present.\n\nFixes: SIRI-96"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MjQ3NzQ1", "url": "https://github.com/scireum/sirius-biz/pull/722#pullrequestreview-395247745", "createdAt": "2020-04-17T08:10:41Z", "commit": {"oid": "666bf83502d3cd94c9eb1bfbeba61f1d6ecce654"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4447, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}