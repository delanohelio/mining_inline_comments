{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4MzU4Njgz", "number": 836, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTozMTozMlrOETNmVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0MTowMFrOETSWwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTgxMjA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/web/BizController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTozMTozMlrOG40Tzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTozMTozMlrOG40Tzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIzMDQ3OQ==", "bodyText": "this comment makes more sense inside right before or inside the if", "url": "https://github.com/scireum/sirius-biz/pull/836#discussion_r462230479", "createdAt": "2020-07-29T11:31:32Z", "author": {"login": "meg1502"}, "path": "src/main/java/sirius/biz/web/BizController.java", "diffHunk": "@@ -256,11 +257,19 @@ protected void load(WebContext ctx, BaseEntity<?> entity, List<Mapping> properti\n             Property property = entity.getDescriptor().getProperty(columnProperty);\n             String propertyName = property.getName();\n \n+            // If the parameter is not present in the request we just skip it to prevent resetting the field to null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c6086db638c05156d4b1cf999f453c23999ff1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTg0MTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/web/BizController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo0MToyN1rOG40mEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo0MzowNFrOG40pIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIzNTE1Mw==", "bodyText": "this looks weird, maybe long term we should look at properties only parsing a Value and the properties that actually support multiple values to look for a list inside of the value", "url": "https://github.com/scireum/sirius-biz/pull/836#discussion_r462235153", "createdAt": "2020-07-29T11:41:27Z", "author": {"login": "meg1502"}, "path": "src/main/java/sirius/biz/web/BizController.java", "diffHunk": "@@ -256,11 +257,19 @@ protected void load(WebContext ctx, BaseEntity<?> entity, List<Mapping> properti\n             Property property = entity.getDescriptor().getProperty(columnProperty);\n             String propertyName = property.getName();\n \n+            // If the parameter is not present in the request we just skip it to prevent resetting the field to null\n+            final Value parameterValue = ctx.get(propertyName);\n+            if (parameterValue.isNull()) {\n+                continue;\n+            }\n+\n             try {\n-                property.parseValues(entity, Values.of(ctx.getParameters(propertyName)));\n+                property.parseValues(entity,\n+                                     Values.of(parameterValue.get(List.class,\n+                                                                  Collections.singletonList(parameterValue.get()))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37c6086db638c05156d4b1cf999f453c23999ff1"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIzNTkzNg==", "bodyText": "Yes, although this would probably require quite a lot of changes in sirius-db", "url": "https://github.com/scireum/sirius-biz/pull/836#discussion_r462235936", "createdAt": "2020-07-29T11:43:04Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/web/BizController.java", "diffHunk": "@@ -256,11 +257,19 @@ protected void load(WebContext ctx, BaseEntity<?> entity, List<Mapping> properti\n             Property property = entity.getDescriptor().getProperty(columnProperty);\n             String propertyName = property.getName();\n \n+            // If the parameter is not present in the request we just skip it to prevent resetting the field to null\n+            final Value parameterValue = ctx.get(propertyName);\n+            if (parameterValue.isNull()) {\n+                continue;\n+            }\n+\n             try {\n-                property.parseValues(entity, Values.of(ctx.getParameters(propertyName)));\n+                property.parseValues(entity,\n+                                     Values.of(parameterValue.get(List.class,\n+                                                                  Collections.singletonList(parameterValue.get()))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIzNTE1Mw=="}, "originalCommit": {"oid": "37c6086db638c05156d4b1cf999f453c23999ff1"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjQ5ODA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/web/BizController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyMjoyNFrOG464jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyMjoyNFrOG464jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzODE5MQ==", "bodyText": "couldn't this be handled via a stream + filter or a sub method + return?", "url": "https://github.com/scireum/sirius-biz/pull/836#discussion_r462338191", "createdAt": "2020-07-29T14:22:24Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/web/BizController.java", "diffHunk": "@@ -222,46 +221,54 @@ public static String getBaseUrl() {\n     /**\n      * Fetches all <tt>autoloaded</tt> fields of the given entity from the given request and populates the entity.\n      *\n-     * @param ctx    the request to read parameters from\n-     * @param entity the entity to fill\n+     * @param webContext the request to read parameters from\n+     * @param entity     the entity to fill\n      * @see Autoloaded\n      */\n-    protected void load(WebContext ctx, BaseEntity<?> entity) {\n+    protected void load(WebContext webContext, BaseEntity<?> entity) {\n         List<Mapping> columns = entity.getDescriptor()\n                                       .getProperties()\n                                       .stream()\n-                                      .filter(property -> shouldAutoload(ctx, property))\n+                                      .filter(property -> shouldAutoload(webContext, property))\n                                       .map(Property::getName)\n                                       .map(Mapping::named)\n                                       .collect(Collectors.toList());\n \n-        load(ctx, entity, columns);\n+        load(webContext, entity, columns);\n     }\n \n     /**\n      * Reads the given properties from the given request and populates the given entity.\n      *\n-     * @param ctx        the request to read parameters from\n+     * @param webContext the request to read parameters from\n      * @param entity     the entity to fill\n      * @param properties the list of properties to transfer\n      */\n-    protected void load(WebContext ctx, BaseEntity<?> entity, Mapping... properties) {\n-        load(ctx, entity, Arrays.asList(properties));\n+    protected void load(WebContext webContext, BaseEntity<?> entity, Mapping... properties) {\n+        load(webContext, entity, Arrays.asList(properties));\n     }\n \n-    protected void load(WebContext ctx, BaseEntity<?> entity, List<Mapping> properties) {\n+    protected void load(WebContext webContext, BaseEntity<?> entity, List<Mapping> properties) {\n         boolean hasError = false;\n \n         for (Mapping columnProperty : properties) {\n             Property property = entity.getDescriptor().getProperty(columnProperty);\n             String propertyName = property.getName();\n \n+            final Value parameterValue = webContext.get(propertyName);\n+            if (parameterValue.isNull()) {\n+                // If the parameter is not present in the request we just skip it to prevent resetting the field to null\n+                continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bf18b463d533610c70350a4114efb3f1d6d7eab"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjU5MTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/web/BizController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0MTowMFrOG47yLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0MTowMFrOG47yLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1Mjk0Mw==", "bodyText": "maybe invert here so that true = success and false = failure?", "url": "https://github.com/scireum/sirius-biz/pull/836#discussion_r462352943", "createdAt": "2020-07-29T14:41:00Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/web/BizController.java", "diffHunk": "@@ -272,6 +264,28 @@ protected void load(WebContext ctx, BaseEntity<?> entity, List<Mapping> properti\n         }\n     }\n \n+    private boolean tryLoadProperty(WebContext webContext, BaseEntity<?> entity, Property property) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e93cf5626f0d52fd02f21ea7c8024a95cc4607"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1995, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}