{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NjE1Njgw", "number": 796, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowNzowMFrOEIAzlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTozMDoyNVrOEIOQ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODM3MjcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/analytics/flags/ExecutionFlags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowNzowMFrOGntx7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowNzowMFrOGntx7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5NzcxMA==", "bodyText": "why not exactly above the overloaded method?", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444297710", "createdAt": "2020-06-23T15:07:00Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/ExecutionFlags.java", "diffHunk": "@@ -37,6 +38,19 @@\n         return readExecutionFlag(reference.getUniqueName(), flag);\n     }\n \n+    /**\n+     * Determines if the last execution of the given <tt>flag</tt> for the given <tt>reference</tt> was within the\n+     * given <tt>duration</tt>.\n+     *\n+     * @param reference the entity for which the execution flag is to be determined\n+     * @param flag      the flag or type of execution to read\n+     * @param duration  the reference duration\n+     * @return <tt>true</tt> was stored (set) within the given duration, <tt>false</tt> otherwise\n+     */\n+    public boolean wasExecuted(BaseEntity<?> reference, String flag, Duration duration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3067bb9618f4839368d8c7d67ac6f1e416db8e4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODM3NDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/analytics/flags/PerformanceData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowNzozMlrOGntzbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowNzozMlrOGntzbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5ODA5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or\n          \n          \n            \n             * Note that this provides an abstract and database independent part. Use {@link SQLPerformanceData} or", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444298093", "createdAt": "2020-06-23T15:07:32Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/PerformanceData.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags;\n+\n+import sirius.biz.analytics.flags.jdbc.SQLPerformanceData;\n+import sirius.biz.analytics.flags.mongo.MongoPerformanceData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.Transient;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Can be embedded into an {@link BaseEntity entity} in order to record / toggle performance flags for it.\n+ * <p>\n+ * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODM3ODQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/analytics/flags/PerformanceData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowODoyMVrOGnt1kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTowODoyMVrOGnt1kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5ODY0Mg==", "bodyText": "modify?", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444298642", "createdAt": "2020-06-23T15:08:21Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/PerformanceData.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags;\n+\n+import sirius.biz.analytics.flags.jdbc.SQLPerformanceData;\n+import sirius.biz.analytics.flags.mongo.MongoPerformanceData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.Transient;\n+\n+import java.util.stream.Stream;\n+\n+/**\n+ * Can be embedded into an {@link BaseEntity entity} in order to record / toggle performance flags for it.\n+ * <p>\n+ * Note that this provides a abstract and database independent part. Use {@link SQLPerformanceData} or\n+ * {@link MongoPerformanceData} depending on the actual entity type.\n+ */\n+public abstract class PerformanceData extends Composite {\n+\n+    /**\n+     * Contains the name of the field which stores the flags.\n+     */\n+    public static final Mapping FLAGS = Mapping.named(\"flags\");\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    protected PerformanceData(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Obtains a modifier which can be used to efficiently update the flags for the underlying entity.\n+     *\n+     * @return a modifier used to change the flags for the underlying entity\n+     */\n+    public abstract PerformanceFlagModifier modifier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODM4Njk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/analytics/flags/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxMDoyNVrOGnt7NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxMDoyNVrOGnt7NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMDA4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            be togglend on demand using the resepctive [PerformanceFlagModifier](PerformanceFlagModifier.java).\n          \n          \n            \n            be toggled on demand using the respective [PerformanceFlagModifier](PerformanceFlagModifier.java).", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444300084", "createdAt": "2020-06-23T15:10:25Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/README.md", "diffHunk": "@@ -7,4 +9,14 @@ schedulers which are only to be invoked once per month.\n \n This is a database independent framework. Use [ExecutionFlags](ExecutionFlags.java) as main entry point and\n enable either **biz.analytics-execution-flags-jdbc** or **biz.analytics-execution-flags-mongo** as framework\n-depending on the database being used.  \n+depending on the database being used.\n+\n+## Performance Flags\n+\n+Provides a framework which stores a set of flags per entity. This can be either an SQLEntity (which would\n+use [SQLPerformanceData](jdbc/SQLPerformanceData.java)) or a MongoEntity (which would use\n+[MongoPerformanceData](mongo/MongoPerformanceData.java)). Flags will be stored in a way optimized for the\n+underlying database. We use bit fields for JDBC/SQL and StringList for MongoDB. Most probably a performance\n+flag will be toggled when computing metrics e.g. via a **MonthlyMetricComputer**. However, they can also\n+be togglend on demand using the resepctive [PerformanceFlagModifier](PerformanceFlagModifier.java).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODM5MzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/analytics/flags/jdbc/BitwiseConstraint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxMTo1NlrOGnt_bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxMTo1NlrOGnt_bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMTE2Nw==", "bodyText": "this sounds pretty generic and has performance flag specific implementation. maybe a more specific name is possible? Or a more generic implementation in sirius-db?", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444301167", "createdAt": "2020-06-23T15:11:56Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/jdbc/BitwiseConstraint.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags.jdbc;\n+\n+import sirius.biz.analytics.flags.PerformanceFlag;\n+import sirius.biz.analytics.flags.PerformanceFlagged;\n+import sirius.db.jdbc.SmartQuery;\n+import sirius.db.jdbc.constraints.SQLConstraint;\n+\n+/**\n+ * Provides a constraint which performs a bitwise check in order to determine if a performance flag is toggled.\n+ */\n+class BitwiseConstraint extends SQLConstraint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fc9594624fbe94ccf46ee35b073f5e382c02aef"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQwMjE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxMzo1OFrOGnuFAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxMzo1OFrOGnuFAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjU5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * As we use an optimized represnetation, each performance flag must be know ahead of time (declared as constant).\n          \n          \n            \n             * As we use an optimized representation, each performance flag must be know ahead of time (declared as constant).", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444302594", "createdAt": "2020-06-23T15:13:58Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java", "diffHunk": "@@ -17,6 +21,11 @@\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+/**\n+ * Represents a performance flag which can be toggled for an entity.\n+ * <p>\n+ * As we use an optimized represnetation, each performance flag must be know ahead of time (declared as constant).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fbee3da26735104b777f7d73ee0c9dc5dbc611"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODQwNDA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxNDoyMlrOGnuGLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxNDoyMlrOGnuGLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjg5Mg==", "bodyText": "this isnt really descriptive in my eyes", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444302892", "createdAt": "2020-06-23T15:14:22Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/flags/PerformanceFlag.java", "diffHunk": "@@ -17,6 +21,11 @@\n import java.util.Optional;\n import java.util.stream.Stream;\n \n+/**\n+ * Represents a performance flag which can be toggled for an entity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fbee3da26735104b777f7d73ee0c9dc5dbc611"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDU3NzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTozMDoyNVrOGoDdnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNTozMDoyNVrOGoDdnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY1Mjk1Nw==", "bodyText": "Hat ein bisschen gedauert, bis ich geblickt hab, dass das bitwise operations sind... vllt n comment? Oder den column name auch als parameter in die query?", "url": "https://github.com/scireum/sirius-biz/pull/796#discussion_r444652957", "createdAt": "2020-06-24T05:30:25Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/analytics/flags/jdbc/PerformanceFlagConstraint.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.flags.jdbc;\n+\n+import sirius.biz.analytics.flags.PerformanceFlag;\n+import sirius.biz.analytics.flags.PerformanceFlagged;\n+import sirius.db.jdbc.SmartQuery;\n+import sirius.db.jdbc.constraints.SQLConstraint;\n+\n+/**\n+ * Provides a constraint which performs a bitwise check in order to determine if a performance flag is toggled.\n+ */\n+class PerformanceFlagConstraint extends SQLConstraint {\n+\n+    private PerformanceFlag flag;\n+    private boolean expectedState;\n+\n+    /**\n+     * Generates a new constraint for the given flag and expected state.\n+     *\n+     * @param flag          the flag to check\n+     * @param expectedState the state to filter on\n+     */\n+    PerformanceFlagConstraint(PerformanceFlag flag, boolean expectedState) {\n+        this.flag = flag;\n+        this.expectedState = expectedState;\n+    }\n+\n+    @Override\n+    public void appendSQL(SmartQuery.Compiler compiler) {\n+        String columnName =\n+                compiler.translateColumnName(PerformanceFlagged.PERFORMANCE_DATA.inner(SQLPerformanceData.FLAGS));\n+        if (expectedState) {\n+            compiler.getWHEREBuilder().append(columnName).append(\" & ? <> 0\");\n+        } else {\n+            compiler.getWHEREBuilder().append(columnName).append(\" & ? = 0\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8aa63afe1408625f43b03758b851494e6dec87e"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1942, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}