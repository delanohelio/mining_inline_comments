{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2OTQ3ODIz", "number": 870, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozOTo1MVrOEp1s2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTo0NTowM1rOEqR_tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzA2OTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/process/Processes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozOTo1MVrOHbwOHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozOTo1MVrOHbwOHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MzY0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Note that it the responsibility of the caller to close the stream upon usage.\n          \n          \n            \n                 * Note that it is the responsibility of the caller to close the stream upon usage.", "url": "https://github.com/scireum/sirius-biz/pull/870#discussion_r498863645", "createdAt": "2020-10-02T14:39:51Z", "author": {"login": "bwiedmann"}, "path": "src/main/java/sirius/biz/process/Processes.java", "diffHunk": "@@ -631,6 +633,24 @@ public OutputStream addFile(String processId, String filename) {\n         return process.getFiles().findOrCreateAttachedBlobByName(filename).createOutputStream(filename);\n     }\n \n+    /**\n+     * Returns an input stream to a file stored in the process.\n+     * <p>\n+     * Note that it the responsibility of the caller to close the stream upon usage.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "423235f0b390788dad5111e98bb5f0768a74e719"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzU1MzUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/XMLExportJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowMToxMVrOHcX8yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTowNTowOVrOHcYEOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNDU2OQ==", "bodyText": "Careful: super.close may throw an exception, in which case the digestExportedFile wont get executed", "url": "https://github.com/scireum/sirius-biz/pull/870#discussion_r499514569", "createdAt": "2020-10-05T11:01:11Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/jobs/batch/file/XMLExportJob.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileOrDirectoryParameter;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.xml.XMLStructuredOutput;\n+import sirius.web.resources.Resource;\n+import sirius.web.resources.Resources;\n+\n+import javax.annotation.Nonnull;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * Provides basic functionalities to write data into XML file entries inside an archive.\n+ */\n+public abstract class XMLExportJob extends ArchiveExportJob {\n+\n+    @Part\n+    private static Resources resources;\n+\n+    private final boolean requireValidFile;\n+    private final String xsdResourcePath;\n+    protected XMLStructuredOutput xml;\n+    private OutputStream xmlOutputStream;\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param destinationParameter the parameter used to select the destination for the file being written\n+     * @param process              the context in which the process will be executed\n+     */\n+    protected XMLExportJob(@Nonnull XMLExportJobFactory factory,\n+                           FileOrDirectoryParameter destinationParameter,\n+                           ProcessContext process) {\n+        super(destinationParameter, process);\n+        requireValidFile = process.getParameter(factory.requireValidFile).orElse(false);\n+        xsdResourcePath = factory.getXsdResourcePath();\n+    }\n+\n+    protected void initializeXmlFile(String filename) throws IOException {\n+        closeOpenStream();\n+        xmlOutputStream = createEntry(filename);\n+        xml = new XMLStructuredOutput(xmlOutputStream);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        closeOpenStream();\n+        super.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402ea5bb53185e0ef089b882b03328aa2d2229bd"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNjQ3Mg==", "bodyText": "Yup, but if we can't save the target file then there is not much to validate anyway. Besides, the job will also fail.", "url": "https://github.com/scireum/sirius-biz/pull/870#discussion_r499516472", "createdAt": "2020-10-05T11:05:09Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/jobs/batch/file/XMLExportJob.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileOrDirectoryParameter;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.xml.XMLStructuredOutput;\n+import sirius.web.resources.Resource;\n+import sirius.web.resources.Resources;\n+\n+import javax.annotation.Nonnull;\n+import javax.xml.transform.Source;\n+import javax.xml.transform.stream.StreamSource;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * Provides basic functionalities to write data into XML file entries inside an archive.\n+ */\n+public abstract class XMLExportJob extends ArchiveExportJob {\n+\n+    @Part\n+    private static Resources resources;\n+\n+    private final boolean requireValidFile;\n+    private final String xsdResourcePath;\n+    protected XMLStructuredOutput xml;\n+    private OutputStream xmlOutputStream;\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param destinationParameter the parameter used to select the destination for the file being written\n+     * @param process              the context in which the process will be executed\n+     */\n+    protected XMLExportJob(@Nonnull XMLExportJobFactory factory,\n+                           FileOrDirectoryParameter destinationParameter,\n+                           ProcessContext process) {\n+        super(destinationParameter, process);\n+        requireValidFile = process.getParameter(factory.requireValidFile).orElse(false);\n+        xsdResourcePath = factory.getXsdResourcePath();\n+    }\n+\n+    protected void initializeXmlFile(String filename) throws IOException {\n+        closeOpenStream();\n+        xmlOutputStream = createEntry(filename);\n+        xml = new XMLStructuredOutput(xmlOutputStream);\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        closeOpenStream();\n+        super.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUxNDU2OQ=="}, "originalCommit": {"oid": "402ea5bb53185e0ef089b882b03328aa2d2229bd"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzcwNDg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveExportJob.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTo0NTowM1rOHcZVZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMTo1NzozNFrOHcZwew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzNzI1NQ==", "bodyText": "why should this be overwritten?\nwhen is this invoked where?", "url": "https://github.com/scireum/sirius-biz/pull/870#discussion_r499537255", "createdAt": "2020-10-05T11:45:03Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveExportJob.java", "diffHunk": "@@ -79,5 +83,28 @@ protected void collectParameters(Consumer<Parameter<?, ?>> parameterCollector) {\n             super.collectParameters(parameterCollector);\n         }\n     }\n+\n+    /**\n+     * Digests every entry of a fresh created export archive.\n+     * <p>\n+     * Override this method in order to perform validations on contents of the final archive.\n+     *\n+     * @param digester a consumer receiving the name and the {@link InputStream} of each entry\n+     */\n+    protected void digestExportedFile(BiConsumer<String, InputStream> digester) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "402ea5bb53185e0ef089b882b03328aa2d2229bd"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU0NDE4Nw==", "bodyText": "Bad JavaDoc... method is not supposed to be overwritten but just called...\nAs the method name says, this method provides access to the InputStream of the fresh exported file (does not matter which type: could be a CSV, or a ZIP containing several files). Since getting access to this stream is not always needed, I find it more elegant that the caller explicitly does it if needed. For this there are different methods depending on the parent class (FileExportJob or ArchiveExportJob).\nXMLExportJob is one place calling this digester, in order to run the XSD validation on the export file.", "url": "https://github.com/scireum/sirius-biz/pull/870#discussion_r499544187", "createdAt": "2020-10-05T11:57:34Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveExportJob.java", "diffHunk": "@@ -79,5 +83,28 @@ protected void collectParameters(Consumer<Parameter<?, ?>> parameterCollector) {\n             super.collectParameters(parameterCollector);\n         }\n     }\n+\n+    /**\n+     * Digests every entry of a fresh created export archive.\n+     * <p>\n+     * Override this method in order to perform validations on contents of the final archive.\n+     *\n+     * @param digester a consumer receiving the name and the {@link InputStream} of each entry\n+     */\n+    protected void digestExportedFile(BiConsumer<String, InputStream> digester) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTUzNzI1NQ=="}, "originalCommit": {"oid": "402ea5bb53185e0ef089b882b03328aa2d2229bd"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1782, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}