{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MzAzMjIw", "number": 887, "title": "Tycho: OpenSearch Framework", "bodyText": "Note that this is mainly the technical implementation. The provided UI is rather a proof of concept than anything finished. This will be done once the dashboard is built.", "createdAt": "2020-10-22T13:44:38Z", "url": "https://github.com/scireum/sirius-biz/pull/887", "merged": true, "mergeCommit": {"oid": "868b49dd16689183f3bd0cfdff72ac4eb25055a3"}, "closed": true, "closedAt": "2020-10-29T09:06:53Z", "author": {"login": "andyHa"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVRivxgH2gAyNTA4MzAzMjIwOmE5ZjJkODQ2MjgyOTc0NDg4MmZmZjdmZjcyYzgyNTE4NTY3NTFjYjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdW8D4pgFqTUxODU3MjYwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a9f2d8462829744882fff7ff72c8251856751cb9", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/a9f2d8462829744882fff7ff72c8251856751cb9", "committedDate": "2020-10-23T07:35:59Z", "message": "Provides an initial implementation of the Tycho Search Framework."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7188fd45f34fe7ffa998e83ba4ee5bee249ddb16", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/7188fd45f34fe7ffa998e83ba4ee5bee249ddb16", "committedDate": "2020-10-23T12:19:53Z", "message": "Makes a permission check reusable."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e525e03d7c9a22d8d6ca0bf9d68e3f7a59ce09ad", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/e525e03d7c9a22d8d6ca0bf9d68e3f7a59ce09ad", "committedDate": "2020-10-23T12:20:28Z", "message": "Also selects the title and salutation when rendering a list of users."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8843da01f977ac101eeb8105879f620f4ccf2180", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/8843da01f977ac101eeb8105879f620f4ccf2180", "committedDate": "2020-10-23T12:20:56Z", "message": "Provides open search providers for user accounts."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "044778e8e70081c86f3d3f7aa3b4a75d5f65f2bd", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/044778e8e70081c86f3d3f7aa3b4a75d5f65f2bd", "committedDate": "2020-10-23T12:21:09Z", "message": "Provides open search providers for user tenants."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd1de1b2dbafd8e7f07f5fee91a7d5c40c007716", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/dd1de1b2dbafd8e7f07f5fee91a7d5c40c007716", "committedDate": "2020-10-23T12:21:25Z", "message": "Provides an open search provider for jobs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efbfaf8baa40f74281f8584cde6154147d594644", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/efbfaf8baa40f74281f8584cde6154147d594644", "committedDate": "2020-10-23T12:21:38Z", "message": "Provides an open search provider for VFS roots."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf1c669b29d20c492d1c40eb5c82afd8c31e79bc", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/cf1c669b29d20c492d1c40eb5c82afd8c31e79bc", "committedDate": "2020-10-23T12:22:00Z", "message": "Fixes a JS bug in the scaffolding UI."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17389b97f3772f2de7a6ebb4139e985b934ac807", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/17389b97f3772f2de7a6ebb4139e985b934ac807", "committedDate": "2020-10-22T13:21:10Z", "message": "Provides an initial implementation of the Tycho Search Framework."}, "afterCommit": {"oid": "cf1c669b29d20c492d1c40eb5c82afd8c31e79bc", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/cf1c669b29d20c492d1c40eb5c82afd8c31e79bc", "committedDate": "2020-10-23T12:22:00Z", "message": "Fixes a JS bug in the scaffolding UI."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/ad866481e0e866ee90aa966c4b9e222606adee81", "committedDate": "2020-10-26T09:20:23Z", "message": "Adds an initial and minimal documentation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjM4MzE4", "url": "https://github.com/scireum/sirius-biz/pull/887#pullrequestreview-516638318", "createdAt": "2020-10-26T10:22:47Z", "commit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMjo0N1rOHoJHwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDozMzoyNVrOHoJhMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDUyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n          \n          \n            \n             * searches being executed. This is done in order to protect the system as each search invokes multiple providers", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511854528", "createdAt": "2020-10-26T10:22:47Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDg0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n          \n          \n            \n             * JSON response as that way we'd have to wait for even the slowest provider to show any results. We rather use", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511854849", "createdAt": "2020-10-26T10:23:20Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NTAyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n          \n          \n            \n             * a \"comet\" link which sends individual search results as generated by each provider as single JSON objects, each", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511855021", "createdAt": "2020-10-26T10:23:35Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NjI4Nw==", "bodyText": "Should this be bound to a framework/role ?", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511856287", "createdAt": "2020-10-26T10:25:38Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f2d8462829744882fff7ff72c8251856751cb9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NzA1MQ==", "bodyText": "Shouldnt this be priorized as well?", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511857051", "createdAt": "2020-10-26T10:26:53Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register\n+public class OpenSearchController extends BizController {\n+\n+    /**\n+     * Contains a readily built byte array to separate messages.\n+     * <p>\n+     * The client library expects that we sent the results as \"comets\" - that are JSON objects separated by a new line.\n+     * This way, we can immediatelly render the first results even while other providers are still searching for\n+     * possible matches.\n+     */\n+    private static final byte[] NEWLINE = \"\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    /**\n+     * Specifies the maximal search duration before a search is canceled.\n+     * <p>\n+     * As we want to prevent a system overload if too many or too intense searches are performed, we abort once\n+     * a query has been running for 5 seconds. Note that we don't necessarily interrupt any provider itself as\n+     * this is not supported by the JVM - we however can close the connection to the client and free up the spot\n+     * in the main thread pool.\n+     */\n+    private static final Duration SEARCH_TIMEOUT = Duration.ofSeconds(5);\n+\n+    /**\n+     * To ensure that all possible results are rendered properly, we limit each provider to only 8 results at most.\n+     */\n+    private static final int MAX_RESULTS_PER_CATEGORY = 8;\n+\n+    /**\n+     * Contains the name of the main thread pool which executes all searches.\n+     */\n+    private static final String TYCHO_OPEN_SEARCH_POOL = \"tycho-open-search\";\n+\n+    /**\n+     * Contains the name of the inner thread pool which actually executes the query of a single provider. We use this\n+     * additional thread pool so that a slow provider does not slow down other providers.\n+     */\n+    private static final String TYCHO_OPEN_SEARCH_TASK_POOL = \"tycho-open-search-task\";\n+\n+    private static final String PARAM_QUERY = \"query\";\n+    private static final String RESPONSE_OVERLOAD = \"overload\";\n+    private static final String CONTENT_TYPE_APPLICATION_JSON = \"application/json\";\n+    private static final byte[] RESPONSE_COMPLETED_MESSAGE = \"{\\\"completed\\\":true}\\n\".getBytes(StandardCharsets.UTF_8);\n+    private static final String RESPONSE_CATEGORY = \"category\";\n+    private static final String RESPONSE_CATEGORY_URL = \"categoryUrl\";\n+    private static final String RESPONSE_PRIORITY = \"priority\";\n+    private static final String RESPONSE_LABEL = \"label\";\n+    private static final String RESPONSE_DESCRIPTION = \"description\";\n+    private static final String RESPONSE_URL = \"url\";\n+    private static final String RESPONSE_ACTIONS = \"actions\";\n+\n+    @Parts(OpenSearchProvider.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f2d8462829744882fff7ff72c8251856751cb9"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1ODMyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # task, we pick quite a small number here but provide a queue to provider some backlog.\n          \n          \n            \n                # task, we pick quite a small number here but provide a queue to provide some backlog.", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511858326", "createdAt": "2020-10-26T10:29:05Z", "author": {"login": "sabieber"}, "path": "src/main/resources/component-biz.conf", "diffHunk": "@@ -211,6 +211,23 @@ async {\n         queueLength = 100\n     }\n \n+    # Used to handle all OpenSearch requests in Tycho. As this is quite a database intense\n+    # task, we pick quite a small number here but provide a queue to provider some backlog.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MDI2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Provides the base implementation to mak implementations of {@link Tenant} viaible in the\n          \n          \n            \n             * Provides the base implementation to make implementations of {@link Tenant} visible in the", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511860263", "createdAt": "2020-10-26T10:32:06Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tenants/TenantSearchProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.tycho.search.OpenSearchProvider;\n+import sirius.biz.tycho.search.OpenSearchResult;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.nls.Formatter;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+import sirius.web.security.UserInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides the base implementation to mak implementations of {@link Tenant} viaible in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MTA0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Provides the base implementation to mak implementations of {@link UserAccount} viaible in the\n          \n          \n            \n             * Provides the base implementation to make implementations of {@link UserAccount} visible in the", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511861043", "createdAt": "2020-10-26T10:33:25Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tenants/UserAccountSearchProvider.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tenants.jdbc.SQLUserAccount;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.tycho.search.OpenSearchProvider;\n+import sirius.biz.tycho.search.OpenSearchResult;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+import sirius.web.security.UserInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides the base implementation to mak implementations of {@link UserAccount} viaible in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2OTcyMDM1", "url": "https://github.com/scireum/sirius-biz/pull/887#pullrequestreview-516972035", "createdAt": "2020-10-26T16:44:07Z", "commit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo0NDowN1rOHoYixA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzowMDo1NlrOHoZf1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwNzIwNA==", "bodyText": "Space f\u00fcr Evaluation evtl. notwendig? Sonst weg.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        openSearchResult.withDescription(Formatter.create(\"[${zip}][ ${city}]\")\n          \n          \n            \n                        openSearchResult.withDescription(Formatter.create(\"[${zip}][${city}]\")", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512107204", "createdAt": "2020-10-26T16:44:07Z", "author": {"login": "bwiedmann"}, "path": "src/main/java/sirius/biz/tenants/TenantSearchProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.tycho.search.OpenSearchProvider;\n+import sirius.biz.tycho.search.OpenSearchResult;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.nls.Formatter;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+import sirius.web.security.UserInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides the base implementation to mak implementations of {@link Tenant} viaible in the\n+ * {@link sirius.biz.tycho.search.OpenSearchController}.\n+ *\n+ * @param <I> the type of database IDs used by the concrete implementation\n+ * @param <T> specifies the effective entity type used to represent Tenants\n+ */\n+public abstract class TenantSearchProvider<I, T extends BaseEntity<I> & Tenant<I>> implements OpenSearchProvider {\n+\n+    @Part\n+    private Tenants<I, T, ?> tenants;\n+\n+    @Override\n+    public String getLabel() {\n+        return NLS.get(\"Tenant.plural\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getUrl() {\n+        return \"/tenants\";\n+    }\n+\n+    @Override\n+    public boolean ensureAccess() {\n+        UserInfo currentUser = UserContext.getCurrentUser();\n+        return currentUser.hasPermission(TenantController.PERMISSION_MANAGE_TENANTS);\n+    }\n+\n+    @Override\n+    public void query(String query, int maxResults, Consumer<OpenSearchResult> resultCollector) {\n+        UserInfo currentUser = UserContext.getCurrentUser();\n+\n+        Query<?, T, ?> tenantQuery = createBaseQuery(query);\n+        tenantQuery.limit(maxResults);\n+\n+        tenantQuery.iterateAll(tenant -> {\n+            OpenSearchResult openSearchResult = new OpenSearchResult().withLabel(tenant.getTenantData().getName());\n+            openSearchResult.withDescription(Formatter.create(\"[${zip}][ ${city}]\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExMjgwOA==", "bodyText": "TODO insights Kommt noch?", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512112808", "createdAt": "2020-10-26T16:49:57Z", "author": {"login": "bwiedmann"}, "path": "src/main/java/sirius/biz/tycho/QuickAction.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho;\n+\n+import com.alibaba.fastjson.JSONObject;\n+\n+/**\n+ * Represents a secondary action which can be attached to a data object.\n+ * <p>\n+ * This is used for both, {@link sirius.biz.tycho.search.OpenSearchResult} as well as for TODO insights.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExODc3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This way, we can immediatelly render the first results even while other providers are still searching for\n          \n          \n            \n                 * This way, we can immediately render the first results even while other providers are still searching for", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512118774", "createdAt": "2020-10-26T16:55:11Z", "author": {"login": "bwiedmann"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register\n+public class OpenSearchController extends BizController {\n+\n+    /**\n+     * Contains a readily built byte array to separate messages.\n+     * <p>\n+     * The client library expects that we sent the results as \"comets\" - that are JSON objects separated by a new line.\n+     * This way, we can immediatelly render the first results even while other providers are still searching for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEyMjgzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the URL to be naviagated to when the user clicks on the category label.\n          \n          \n            \n                 * Returns the URL to be navigated to when the user clicks on the category label.", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512122837", "createdAt": "2020-10-26T17:00:56Z", "author": {"login": "bwiedmann"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import sirius.kernel.di.std.AutoRegister;\n+import sirius.kernel.di.std.Priorized;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Represents a provider which participates in the system wide search of the Tycho UI.\n+ * <p>\n+ * A provider needs to wear a {@link sirius.kernel.di.std.Register} annotation in order to be discovered by the\n+ * framework.\n+ */\n+@AutoRegister\n+public interface OpenSearchProvider extends Priorized {\n+\n+    /**\n+     * Contains the label to show for the card generated for results yielded by this provider.\n+     *\n+     * @return the label of the category of results as yielded by this provider\n+     */\n+    String getLabel();\n+\n+    /**\n+     * Returns the URL to be naviagated to when the user clicks on the category label.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96ed84a7ffa40307b378cac6f8a59992b88cdece", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/96ed84a7ffa40307b378cac6f8a59992b88cdece", "committedDate": "2020-10-28T09:27:22Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Sascha Bieberstein <sabieber@users.noreply.github.com>\nCo-authored-by: Benjamin Wiedmann <bwi@scireum.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NDg4OTE4", "url": "https://github.com/scireum/sirius-biz/pull/887#pullrequestreview-518488918", "createdAt": "2020-10-28T09:53:46Z", "commit": {"oid": "96ed84a7ffa40307b378cac6f8a59992b88cdece"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NTcyNjA2", "url": "https://github.com/scireum/sirius-biz/pull/887#pullrequestreview-518572606", "createdAt": "2020-10-28T11:42:07Z", "commit": {"oid": "96ed84a7ffa40307b378cac6f8a59992b88cdece"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4214, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}