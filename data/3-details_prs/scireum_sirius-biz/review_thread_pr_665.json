{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NDQyNjA3", "number": 665, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxODoxNDo0MlrODZAf8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTowODowMlrODZLMSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTQ5MTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/params/StringParameter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxODoxNDo0MlrOFfLngw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjo0MTo0MlrOFfdJAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDUxNQ==", "bodyText": "shouldn't this be the default? null instead of \"\" - even ifthe parameter isn marked as nullable it still might yield null as Value.getString() does filter null - asString would do this?", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368240515", "createdAt": "2020-01-18T18:14:42Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jobs/params/StringParameter.java", "diffHunk": "@@ -28,8 +30,35 @@ public StringParameter(String name, String label) {\n         super(name, label);\n     }\n \n+    /**\n+     * Marks the parameter as nullable.\n+     * <p>\n+     * When set, forces empty strings to be returned as {@code null} and makes it no longer required.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public StringParameter markNullable() {\n+        this.nullable = true;\n+        this.required = false;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks the parameter as required and resets the nullable state if set.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    @Override\n+    public StringParameter markRequired() {\n+        this.nullable = false;\n+        return super.markRequired();\n+    }\n+\n     @Override\n     protected String checkAndTransformValue(Value input) {\n+        if (nullable && input.isEmptyString()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56eef4c4982438cee68f9b2cfc8a9bc7673bd773"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MTU0Mg==", "bodyText": "I like that! If we agree on returning null instead of \"\" for a zero-length input, then there is no need for a markNullable method. I just didn't wanna break the previous behaviour.", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368241542", "createdAt": "2020-01-18T18:33:23Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/jobs/params/StringParameter.java", "diffHunk": "@@ -28,8 +30,35 @@ public StringParameter(String name, String label) {\n         super(name, label);\n     }\n \n+    /**\n+     * Marks the parameter as nullable.\n+     * <p>\n+     * When set, forces empty strings to be returned as {@code null} and makes it no longer required.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public StringParameter markNullable() {\n+        this.nullable = true;\n+        this.required = false;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks the parameter as required and resets the nullable state if set.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    @Override\n+    public StringParameter markRequired() {\n+        this.nullable = false;\n+        return super.markRequired();\n+    }\n+\n     @Override\n     protected String checkAndTransformValue(Value input) {\n+        if (nullable && input.isEmptyString()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDUxNQ=="}, "originalCommit": {"oid": "56eef4c4982438cee68f9b2cfc8a9bc7673bd773"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyNzYxOQ==", "bodyText": "After analysis, makeNullable made obsolete and defaults to null", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368527619", "createdAt": "2020-01-20T12:41:42Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/jobs/params/StringParameter.java", "diffHunk": "@@ -28,8 +30,35 @@ public StringParameter(String name, String label) {\n         super(name, label);\n     }\n \n+    /**\n+     * Marks the parameter as nullable.\n+     * <p>\n+     * When set, forces empty strings to be returned as {@code null} and makes it no longer required.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public StringParameter markNullable() {\n+        this.nullable = true;\n+        this.required = false;\n+        return self();\n+    }\n+\n+    /**\n+     * Marks the parameter as required and resets the nullable state if set.\n+     *\n+     * @return the parameter itself for fluent method calls\n+     */\n+    @Override\n+    public StringParameter markRequired() {\n+        this.nullable = false;\n+        return super.markRequired();\n+    }\n+\n     @Override\n     protected String checkAndTransformValue(Value input) {\n+        if (nullable && input.isEmptyString()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI0MDUxNQ=="}, "originalCommit": {"oid": "56eef4c4982438cee68f9b2cfc8a9bc7673bd773"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzIzOTg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/params/StringListParameter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTowNjozMlrOFfa4TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjoxMzo0OFrOFfce6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MDU3Mw==", "bodyText": "shouldn't i be receiving the whole Tuple in the job? There should be a lot of instance where the display value is never used in the job", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368490573", "createdAt": "2020-01-20T11:06:32Z", "author": {"login": "meg1502"}, "path": "src/main/java/sirius/biz/jobs/params/StringListParameter.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides a string list select parameter.\n+ */\n+public class StringListParameter extends Parameter<String, StringListParameter> {\n+\n+    private Map<String, String> entries = new LinkedHashMap<>();\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    public StringListParameter(String name, String label) {\n+        super(name, label);\n+    }\n+\n+    /**\n+     * Adds an entry to the list.\n+     *\n+     * @param key   the entry key\n+     * @param value the display value, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public StringListParameter withEntry(String key, String value) {\n+        this.entries.put(key, NLS.smartGet(value));\n+        return self();\n+    }\n+\n+    /**\n+     * Enumerates all values provided by the parameter.\n+     *\n+     * @return list of {@link Tuple entries} with the key as first and display value as second tuple items.\n+     */\n+    public List<Tuple<String, String>> getValues() {\n+        return entries.keySet()\n+                      .stream()\n+                      .map(entry -> Tuple.create(entry, entries.get(entry)))\n+                      .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public String getTemplateName() {\n+        return \"/templates/biz/jobs/params/selectString.html.pasta\";\n+    }\n+\n+    @Override\n+    protected String checkAndTransformValue(Value input) {\n+        if (Strings.isEmpty(input) || !entries.containsKey(input.asString())) {\n+            return null;\n+        }\n+        return input.asString();\n+    }\n+\n+    @Override\n+    protected Optional<String> resolveFromString(@Nonnull Value input) {\n+        if (!entries.containsKey(input.asString())) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(entries.get(input.asString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14917b142385b3b0fc0e2a7107012ef569f7f665"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxNjg0MQ==", "bodyText": "Refactored to SingleSelectParameter", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368516841", "createdAt": "2020-01-20T12:13:48Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/jobs/params/StringListParameter.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides a string list select parameter.\n+ */\n+public class StringListParameter extends Parameter<String, StringListParameter> {\n+\n+    private Map<String, String> entries = new LinkedHashMap<>();\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    public StringListParameter(String name, String label) {\n+        super(name, label);\n+    }\n+\n+    /**\n+     * Adds an entry to the list.\n+     *\n+     * @param key   the entry key\n+     * @param value the display value, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public StringListParameter withEntry(String key, String value) {\n+        this.entries.put(key, NLS.smartGet(value));\n+        return self();\n+    }\n+\n+    /**\n+     * Enumerates all values provided by the parameter.\n+     *\n+     * @return list of {@link Tuple entries} with the key as first and display value as second tuple items.\n+     */\n+    public List<Tuple<String, String>> getValues() {\n+        return entries.keySet()\n+                      .stream()\n+                      .map(entry -> Tuple.create(entry, entries.get(entry)))\n+                      .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public String getTemplateName() {\n+        return \"/templates/biz/jobs/params/selectString.html.pasta\";\n+    }\n+\n+    @Override\n+    protected String checkAndTransformValue(Value input) {\n+        if (Strings.isEmpty(input) || !entries.containsKey(input.asString())) {\n+            return null;\n+        }\n+        return input.asString();\n+    }\n+\n+    @Override\n+    protected Optional<String> resolveFromString(@Nonnull Value input) {\n+        if (!entries.containsKey(input.asString())) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(entries.get(input.asString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MDU3Mw=="}, "originalCommit": {"oid": "14917b142385b3b0fc0e2a7107012ef569f7f665"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI0MzYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/params/StringListParameter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMTowODowMlrOFfa6mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjoxMzoxNFrOFfceGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MTE2MA==", "bodyText": "shouldnt this also return empty for null/\"\" ?", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368491160", "createdAt": "2020-01-20T11:08:02Z", "author": {"login": "meg1502"}, "path": "src/main/java/sirius/biz/jobs/params/StringListParameter.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides a string list select parameter.\n+ */\n+public class StringListParameter extends Parameter<String, StringListParameter> {\n+\n+    private Map<String, String> entries = new LinkedHashMap<>();\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    public StringListParameter(String name, String label) {\n+        super(name, label);\n+    }\n+\n+    /**\n+     * Adds an entry to the list.\n+     *\n+     * @param key   the entry key\n+     * @param value the display value, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public StringListParameter withEntry(String key, String value) {\n+        this.entries.put(key, NLS.smartGet(value));\n+        return self();\n+    }\n+\n+    /**\n+     * Enumerates all values provided by the parameter.\n+     *\n+     * @return list of {@link Tuple entries} with the key as first and display value as second tuple items.\n+     */\n+    public List<Tuple<String, String>> getValues() {\n+        return entries.keySet()\n+                      .stream()\n+                      .map(entry -> Tuple.create(entry, entries.get(entry)))\n+                      .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public String getTemplateName() {\n+        return \"/templates/biz/jobs/params/selectString.html.pasta\";\n+    }\n+\n+    @Override\n+    protected String checkAndTransformValue(Value input) {\n+        if (Strings.isEmpty(input) || !entries.containsKey(input.asString())) {\n+            return null;\n+        }\n+        return input.asString();\n+    }\n+\n+    @Override\n+    protected Optional<String> resolveFromString(@Nonnull Value input) {\n+        if (!entries.containsKey(input.asString())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14917b142385b3b0fc0e2a7107012ef569f7f665"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxNjYzMg==", "bodyText": "null.asString resolves to \"\" and there will likely be no key inside the map matching an empty string.", "url": "https://github.com/scireum/sirius-biz/pull/665#discussion_r368516632", "createdAt": "2020-01-20T12:13:14Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/jobs/params/StringListParameter.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package sirius.biz.jobs.params;\n+\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.commons.Value;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nonnull;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides a string list select parameter.\n+ */\n+public class StringListParameter extends Parameter<String, StringListParameter> {\n+\n+    private Map<String, String> entries = new LinkedHashMap<>();\n+\n+    /**\n+     * Creates a new parameter with the given name and label.\n+     *\n+     * @param name  the name of the parameter\n+     * @param label the label of the parameter, which will be {@link NLS#smartGet(String) auto translated}\n+     */\n+    public StringListParameter(String name, String label) {\n+        super(name, label);\n+    }\n+\n+    /**\n+     * Adds an entry to the list.\n+     *\n+     * @param key   the entry key\n+     * @param value the display value, which will be {@link NLS#smartGet(String) auto translated}\n+     * @return the parameter itself for fluent method calls\n+     */\n+    public StringListParameter withEntry(String key, String value) {\n+        this.entries.put(key, NLS.smartGet(value));\n+        return self();\n+    }\n+\n+    /**\n+     * Enumerates all values provided by the parameter.\n+     *\n+     * @return list of {@link Tuple entries} with the key as first and display value as second tuple items.\n+     */\n+    public List<Tuple<String, String>> getValues() {\n+        return entries.keySet()\n+                      .stream()\n+                      .map(entry -> Tuple.create(entry, entries.get(entry)))\n+                      .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public String getTemplateName() {\n+        return \"/templates/biz/jobs/params/selectString.html.pasta\";\n+    }\n+\n+    @Override\n+    protected String checkAndTransformValue(Value input) {\n+        if (Strings.isEmpty(input) || !entries.containsKey(input.asString())) {\n+            return null;\n+        }\n+        return input.asString();\n+    }\n+\n+    @Override\n+    protected Optional<String> resolveFromString(@Nonnull Value input) {\n+        if (!entries.containsKey(input.asString())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5MTE2MA=="}, "originalCommit": {"oid": "14917b142385b3b0fc0e2a7107012ef569f7f665"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2096, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}