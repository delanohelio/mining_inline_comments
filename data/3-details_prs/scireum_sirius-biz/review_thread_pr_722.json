{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0Mjk0MTA3", "number": 722, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0Njo1OVrODyibjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1ODoyOVrODyzcFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzE5NTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/Blob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0Njo1OVrOGGo_3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0Njo1OVrOGGo_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNjM1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Note that this blob object itself will also be update with the aprropriate metadata\n          \n          \n            \n                 * Note that this blob object itself will also be updated with the appropriate metadata", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r409616351", "createdAt": "2020-04-16T14:46:59Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/storage/layer2/Blob.java", "diffHunk": "@@ -160,6 +160,9 @@\n      * <p>\n      * Also note that if a file is used to provide the new contents of this blob, use\n      * {@link #updateContent(String, File)} as this is likely way more efficient.\n+     * <p>\n+     * Note that this blob object itself will also be update with the aprropriate metadata", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341d2f3aee5582fda9ea22648a12581277606ea3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzE5NjYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0NzoyMFrOGGpA_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNDo0NzoyMFrOGGpA_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYxNjYzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void uploaduploadFile(final WebContext ctx,\n          \n          \n            \n                public void uploadFile(final WebContext ctx,", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r409616638", "createdAt": "2020-04-16T14:47:20Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.InputStreamHandler;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides some helper routes for managing and uploading {@link Blob blobs}.\n+ * <p>\n+ * Note that most of the management UI is handled via the VFS (layer 3) in the\n+ * {@link sirius.biz.storage.layer3.VFSController}.\n+ */\n+@Register(framework = StorageUtils.FRAMEWORK_STORAGE, classes = Controller.class)\n+public class BlobController extends BizController {\n+\n+    @Part\n+    private BlobStorage blobStorage;\n+\n+    /**\n+     * Uploads a file into a temporary Blob, to be later persisted via a {@link BlobHardRef}.\n+     * <p>\n+     * As long as the blob remains unreferenced, it will be marked as temporary and will be eventually\n+     * deleted. However, if an entity references the blob via a {@link BlobHardRef}, it will be marked\n+     * as permanent.\n+     *\n+     * @param ctx       the request to handle\n+     * @param out       the response to the AJAX call\n+     * @param spaceName the {@link BlobStorageSpace} to store the object in\n+     * @param upload    the content of the upload\n+     */\n+    @Routed(value = \"/dasd/upload-file/:1\", preDispatchable = true, jsonCall = true)\n+    @LoginRequired\n+    public void uploaduploadFile(final WebContext ctx,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "341d2f3aee5582fda9ea22648a12581277606ea3"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTk1ODYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobHardRefProperty.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1MToyM1rOGHDnLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1MToyM1rOGHDnLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1MjM5Ng==", "bodyText": "This also changes the logic not only readability??", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410052396", "createdAt": "2020-04-17T07:51:23Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobHardRefProperty.java", "diffHunk": "@@ -151,13 +151,14 @@ protected void onBeforeSaveChecks(Object entity) {\n     @Override\n     protected void onAfterSave(Object entity) {\n         BlobHardRef ref = getRef(entity);\n-        if (ref.changed && ref.isFilled()) {\n-            ref.getBlob()\n-               .getStorageSpace()\n-               .markAsUsed(((BaseEntity<?>) entity).getUniqueName(), getName(), ref.getKey());\n-            ref.getBlob()\n-               .getStorageSpace()\n-               .deleteReferencedBlobs(((BaseEntity<?>) entity).getUniqueName(), getName(), ref.getKey());\n+        if (ref.changed) {\n+            BlobStorageSpace storageSpace = ref.getBlob().getStorageSpace();\n+            String uniqueName = ((BaseEntity<?>) entity).getUniqueName();\n+\n+            if (ref.isFilled()) {\n+                storageSpace.markAsUsed(uniqueName, getName(), ref.getKey());\n+            }\n+            storageSpace.deleteReferencedBlobs(uniqueName, getName(), ref.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "319097dcc543f3c405177555f124b70d89a96168"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTk3NjA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlobStorageSpace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1Njo0N1rOGHDyIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwODowNDo0NFrOGHEB7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NTIwMQ==", "bodyText": "Das Kommentar von oben \u00fcbernehmen?", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410055201", "createdAt": "2020-04-17T07:56:47Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlobStorageSpace.java", "diffHunk": "@@ -341,7 +341,14 @@ protected MongoDirectory fetchBlobParent(MongoBlob blob) {\n                                      .executeFor(MongoBlob.class)\n                                      .getModifiedCount();\n             if (numUpdated == 1) {\n-                return Optional.ofNullable(blob.getPhysicalObjectKey());\n+                String previousPhysicalObjectKey = blob.getPhysicalObjectKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acbfc23b65b0ccf07cb0ffb39f0993f50d172f91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1OTI0Nw==", "bodyText": "Oder kann man das vllt in ne Methode auslagern?", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410059247", "createdAt": "2020-04-17T08:04:44Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/mongo/MongoBlobStorageSpace.java", "diffHunk": "@@ -341,7 +341,14 @@ protected MongoDirectory fetchBlobParent(MongoBlob blob) {\n                                      .executeFor(MongoBlob.class)\n                                      .getModifiedCount();\n             if (numUpdated == 1) {\n-                return Optional.ofNullable(blob.getPhysicalObjectKey());\n+                String previousPhysicalObjectKey = blob.getPhysicalObjectKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NTIwMQ=="}, "originalCommit": {"oid": "acbfc23b65b0ccf07cb0ffb39f0993f50d172f91"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTk3OTg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1Nzo1OFrOGHD0jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1Nzo1OFrOGHD0jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NTgyMQ==", "bodyText": "link blob?", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410055821", "createdAt": "2020-04-17T07:57:58Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.InputStreamHandler;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides some helper routes for managing and uploading {@link Blob blobs}.\n+ * <p>\n+ * Note that most of the management UI is handled via the VFS (layer 3) in the\n+ * {@link sirius.biz.storage.layer3.VFSController}.\n+ */\n+@Register(framework = StorageUtils.FRAMEWORK_STORAGE, classes = Controller.class)\n+public class BlobController extends BizController {\n+\n+    @Part\n+    private BlobStorage blobStorage;\n+\n+    /**\n+     * Uploads a file into a temporary Blob, to be later persisted via a {@link BlobHardRef}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13fcbea08602ad3ce5e1579f0d125f1d15ae530"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTk4MTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1ODoyMFrOGHD1VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1ODoyMFrOGHD1VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NjAyMA==", "bodyText": "TODO ohne Ticket referenz?", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410056020", "createdAt": "2020-04-17T07:58:20Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.InputStreamHandler;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides some helper routes for managing and uploading {@link Blob blobs}.\n+ * <p>\n+ * Note that most of the management UI is handled via the VFS (layer 3) in the\n+ * {@link sirius.biz.storage.layer3.VFSController}.\n+ */\n+@Register(framework = StorageUtils.FRAMEWORK_STORAGE, classes = Controller.class)\n+public class BlobController extends BizController {\n+\n+    @Part\n+    private BlobStorage blobStorage;\n+\n+    /**\n+     * Uploads a file into a temporary Blob, to be later persisted via a {@link BlobHardRef}.\n+     * <p>\n+     * As long as the blob remains unreferenced, it will be marked as temporary and will be eventually\n+     * deleted. However, if an entity references the blob via a {@link BlobHardRef}, it will be marked\n+     * as permanent.\n+     *\n+     * @param ctx       the request to handle\n+     * @param out       the response to the AJAX call\n+     * @param spaceName the {@link BlobStorageSpace} to store the object in\n+     * @param upload    the content of the upload\n+     */\n+    @Routed(value = \"/dasd/upload-file/:1\", preDispatchable = true, jsonCall = true)\n+    @LoginRequired\n+    public void uploaduploadFile(final WebContext ctx,\n+                                 JSONStructuredOutput out,\n+                                 String spaceName,\n+                                 InputStreamHandler upload) {\n+        Blob blob = blobStorage.getSpace(spaceName).createTemporaryBlob();\n+        try {\n+            try {\n+                ctx.markAsLongCall();\n+                //TODO remove legacy qqfile once library is updated...", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13fcbea08602ad3ce5e1579f0d125f1d15ae530"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTk4MTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1ODoyOVrOGHD1qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo1ODoyOVrOGHD1qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA1NjEwNA==", "bodyText": "TODO ohne Ticket Referenz?", "url": "https://github.com/scireum/sirius-biz/pull/722#discussion_r410056104", "createdAt": "2020-04-17T07:58:29Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BlobController.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2;\n+\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import sirius.biz.storage.util.StorageUtils;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.InputStreamHandler;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides some helper routes for managing and uploading {@link Blob blobs}.\n+ * <p>\n+ * Note that most of the management UI is handled via the VFS (layer 3) in the\n+ * {@link sirius.biz.storage.layer3.VFSController}.\n+ */\n+@Register(framework = StorageUtils.FRAMEWORK_STORAGE, classes = Controller.class)\n+public class BlobController extends BizController {\n+\n+    @Part\n+    private BlobStorage blobStorage;\n+\n+    /**\n+     * Uploads a file into a temporary Blob, to be later persisted via a {@link BlobHardRef}.\n+     * <p>\n+     * As long as the blob remains unreferenced, it will be marked as temporary and will be eventually\n+     * deleted. However, if an entity references the blob via a {@link BlobHardRef}, it will be marked\n+     * as permanent.\n+     *\n+     * @param ctx       the request to handle\n+     * @param out       the response to the AJAX call\n+     * @param spaceName the {@link BlobStorageSpace} to store the object in\n+     * @param upload    the content of the upload\n+     */\n+    @Routed(value = \"/dasd/upload-file/:1\", preDispatchable = true, jsonCall = true)\n+    @LoginRequired\n+    public void uploaduploadFile(final WebContext ctx,\n+                                 JSONStructuredOutput out,\n+                                 String spaceName,\n+                                 InputStreamHandler upload) {\n+        Blob blob = blobStorage.getSpace(spaceName).createTemporaryBlob();\n+        try {\n+            try {\n+                ctx.markAsLongCall();\n+                //TODO remove legacy qqfile once library is updated...\n+                String name = ctx.get(\"filename\").asString(ctx.get(\"qqfile\").asString());\n+                blob.updateContent(name, upload, Long.parseLong(ctx.getHeader(HttpHeaderNames.CONTENT_LENGTH)));\n+\n+                out.property(\"fileId\", blob.getBlobKey());\n+\n+                // TODO remove once the blobHardRefField has been refactored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13fcbea08602ad3ce5e1579f0d125f1d15ae530"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2042, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}