{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3OTA2MzY2", "number": 732, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyMjowNlrOD1ob_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyODo1NlrOD1omDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTYzNjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/variants/ConversionEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyMjowNlrOGLKHBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyMjowNlrOGLKHBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MzE1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Contains the database ID (if available) of the file used as a source for the conversion.\n          \n          \n            \n                 * Contains the database ID (if available) of the file used as the target or destination for the conversion.", "url": "https://github.com/scireum/sirius-biz/pull/732#discussion_r414353156", "createdAt": "2020-04-24T07:22:06Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/variants/ConversionEvent.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.variants;\n+\n+import sirius.biz.analytics.events.Event;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.NullAllowed;\n+\n+/**\n+ * Records the successful/failed conversion of a {@link BlobVariant} by a {@link Converter}.\n+ */\n+public class ConversionEvent extends Event {\n+\n+    /**\n+     * Contains the database ID (if available) of the file used as a source for the conversion.\n+     */\n+    public static final Mapping SOURCE_ID = Mapping.named(\"sourceId\");\n+    @NullAllowed\n+    private String sourceId;\n+\n+    /**\n+     * Contains the file name of the file used as a source for the conversion.\n+     */\n+    public static final Mapping SOURCE_FILE_NAME = Mapping.named(\"sourceFileName\");\n+    private String sourceFileName;\n+\n+    /**\n+     * Contains the file type / extension of the file used as a source for the conversion.\n+     */\n+    public static final Mapping SOURCE_TYPE = Mapping.named(\"sourceType\");\n+    private String sourceType;\n+\n+    /**\n+     * Contains the database ID (if available) of the file used as a source for the conversion.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d9271e898b67983e1b3869f28138d7550f23392"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTY2MjIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/variants/ConversionEvent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyODo1NlrOGLKV6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyODo1NlrOGLKV6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1Njk3MQ==", "bodyText": "in the other 2 events with tenants already defined in biz, this field is simply called \"tenant\"  - unify these?", "url": "https://github.com/scireum/sirius-biz/pull/732#discussion_r414356971", "createdAt": "2020-04-24T07:28:56Z", "author": {"login": "meg1502"}, "path": "src/main/java/sirius/biz/storage/layer2/variants/ConversionEvent.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer2.variants;\n+\n+import sirius.biz.analytics.events.Event;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.NullAllowed;\n+\n+/**\n+ * Records the successful/failed conversion of a {@link BlobVariant} by a {@link Converter}.\n+ */\n+public class ConversionEvent extends Event {\n+\n+    /**\n+     * Contains the database ID (if available) of the file used as a source for the conversion.\n+     */\n+    public static final Mapping SOURCE_ID = Mapping.named(\"sourceId\");\n+    @NullAllowed\n+    private String sourceId;\n+\n+    /**\n+     * Contains the file name of the file used as a source for the conversion.\n+     */\n+    public static final Mapping SOURCE_FILE_NAME = Mapping.named(\"sourceFileName\");\n+    private String sourceFileName;\n+\n+    /**\n+     * Contains the file type / extension of the file used as a source for the conversion.\n+     */\n+    public static final Mapping SOURCE_TYPE = Mapping.named(\"sourceType\");\n+    private String sourceType;\n+\n+    /**\n+     * Contains the database ID (if available) of the file used as the target or destination for the conversion.\n+     */\n+    public static final Mapping TARGET_ID = Mapping.named(\"targetId\");\n+    @NullAllowed\n+    private String targetId;\n+\n+    /**\n+     * Contains the name of the type / variant being created during conversion.\n+     */\n+    public static final Mapping TARGET_TYPE = Mapping.named(\"targetType\");\n+    private String targetType;\n+\n+    /**\n+     * Contains the key of the {@link Converter} running the conversion.\n+     */\n+    public static final Mapping CONVERTER = Mapping.named(\"converter\");\n+    @NullAllowed\n+    private String converter;\n+\n+    /**\n+     * Contains the name of the actual tool / application used for the conversion.\n+     */\n+    public static final Mapping TOOL_NAME = Mapping.named(\"toolName\");\n+    @NullAllowed\n+    private String toolName;\n+\n+    /**\n+     * Contains whether or not the conversion resulted in the desired output file.\n+     */\n+    public static final Mapping SUCCESSFUL = Mapping.named(\"successful\");\n+    private boolean successful;\n+\n+    /**\n+     * Contains an optional descriptive reason when the conversion failed.\n+     */\n+    public static final Mapping FAIL_REASON = Mapping.named(\"failReason\");\n+    @NullAllowed\n+    private String failReason;\n+\n+    /**\n+     * Contains how long the conversion took in milliseconds.\n+     */\n+    public static final Mapping DURATION = Mapping.named(\"duration\");\n+    private long duration = 0;\n+\n+    /**\n+     * Contains the tenant owning the source and target files being converted.\n+     */\n+    public static final Mapping TENANT_ID = Mapping.named(\"tenantId\");\n+    @NullAllowed\n+    private String tenantId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1a3f0770a12e031f09dab0d7b8c4ad822ac219b"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2055, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}