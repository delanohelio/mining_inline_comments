{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MzAzMjIw", "number": 887, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMjo0N1rOEx1g_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzowMDo1NVrOEx_8og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjkyNDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMjo0N1rOHoJHwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMjo0N1rOHoJHwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDUyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n          \n          \n            \n             * searches being executed. This is done in order to protect the system as each search invokes multiple providers", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511854528", "createdAt": "2020-10-26T10:22:47Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjkyNjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMzoyMFrOHoJJAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMzoyMFrOHoJJAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NDg0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n          \n          \n            \n             * JSON response as that way we'd have to wait for even the slowest provider to show any results. We rather use", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511854849", "createdAt": "2020-10-26T10:23:20Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjkyNzg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMzozNVrOHoJJrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyMzozNVrOHoJJrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NTAyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n          \n          \n            \n             * a \"comet\" link which sends individual search results as generated by each provider as single JSON objects, each", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511855021", "createdAt": "2020-10-26T10:23:35Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjkzNTg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyNTozOFrOHoJOnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyNjoyMVrOHpg8CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NjI4Nw==", "bodyText": "Should this be bound to a framework/role ?", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511856287", "createdAt": "2020-10-26T10:25:38Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f2d8462829744882fff7ff72c8251856751cb9"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MzMyMA==", "bodyText": "As this will be part of the default UI of sirius I'd always turn it on.\nIf someone wants to use the URIs differently, a lower prio value could be used.\nI'd say this is more convenient than having to remember to turn on all kinds of frameworks for the UI to work...", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r513293320", "createdAt": "2020-10-28T09:26:21Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NjI4Nw=="}, "originalCommit": {"oid": "a9f2d8462829744882fff7ff72c8251856751cb9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjk0MDc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyNjo1M1rOHoJRmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyNzowMlrOHpg9xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NzA1MQ==", "bodyText": "Shouldnt this be priorized as well?", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511857051", "createdAt": "2020-10-26T10:26:53Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register\n+public class OpenSearchController extends BizController {\n+\n+    /**\n+     * Contains a readily built byte array to separate messages.\n+     * <p>\n+     * The client library expects that we sent the results as \"comets\" - that are JSON objects separated by a new line.\n+     * This way, we can immediatelly render the first results even while other providers are still searching for\n+     * possible matches.\n+     */\n+    private static final byte[] NEWLINE = \"\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    /**\n+     * Specifies the maximal search duration before a search is canceled.\n+     * <p>\n+     * As we want to prevent a system overload if too many or too intense searches are performed, we abort once\n+     * a query has been running for 5 seconds. Note that we don't necessarily interrupt any provider itself as\n+     * this is not supported by the JVM - we however can close the connection to the client and free up the spot\n+     * in the main thread pool.\n+     */\n+    private static final Duration SEARCH_TIMEOUT = Duration.ofSeconds(5);\n+\n+    /**\n+     * To ensure that all possible results are rendered properly, we limit each provider to only 8 results at most.\n+     */\n+    private static final int MAX_RESULTS_PER_CATEGORY = 8;\n+\n+    /**\n+     * Contains the name of the main thread pool which executes all searches.\n+     */\n+    private static final String TYCHO_OPEN_SEARCH_POOL = \"tycho-open-search\";\n+\n+    /**\n+     * Contains the name of the inner thread pool which actually executes the query of a single provider. We use this\n+     * additional thread pool so that a slow provider does not slow down other providers.\n+     */\n+    private static final String TYCHO_OPEN_SEARCH_TASK_POOL = \"tycho-open-search-task\";\n+\n+    private static final String PARAM_QUERY = \"query\";\n+    private static final String RESPONSE_OVERLOAD = \"overload\";\n+    private static final String CONTENT_TYPE_APPLICATION_JSON = \"application/json\";\n+    private static final byte[] RESPONSE_COMPLETED_MESSAGE = \"{\\\"completed\\\":true}\\n\".getBytes(StandardCharsets.UTF_8);\n+    private static final String RESPONSE_CATEGORY = \"category\";\n+    private static final String RESPONSE_CATEGORY_URL = \"categoryUrl\";\n+    private static final String RESPONSE_PRIORITY = \"priority\";\n+    private static final String RESPONSE_LABEL = \"label\";\n+    private static final String RESPONSE_DESCRIPTION = \"description\";\n+    private static final String RESPONSE_URL = \"url\";\n+    private static final String RESPONSE_ACTIONS = \"actions\";\n+\n+    @Parts(OpenSearchProvider.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f2d8462829744882fff7ff72c8251856751cb9"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5Mzc2NQ==", "bodyText": "nope, the results are - these providers are executed in parallel so sorting them doesn't make too much sense...", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r513293765", "createdAt": "2020-10-28T09:27:02Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register\n+public class OpenSearchController extends BizController {\n+\n+    /**\n+     * Contains a readily built byte array to separate messages.\n+     * <p>\n+     * The client library expects that we sent the results as \"comets\" - that are JSON objects separated by a new line.\n+     * This way, we can immediatelly render the first results even while other providers are still searching for\n+     * possible matches.\n+     */\n+    private static final byte[] NEWLINE = \"\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    /**\n+     * Specifies the maximal search duration before a search is canceled.\n+     * <p>\n+     * As we want to prevent a system overload if too many or too intense searches are performed, we abort once\n+     * a query has been running for 5 seconds. Note that we don't necessarily interrupt any provider itself as\n+     * this is not supported by the JVM - we however can close the connection to the client and free up the spot\n+     * in the main thread pool.\n+     */\n+    private static final Duration SEARCH_TIMEOUT = Duration.ofSeconds(5);\n+\n+    /**\n+     * To ensure that all possible results are rendered properly, we limit each provider to only 8 results at most.\n+     */\n+    private static final int MAX_RESULTS_PER_CATEGORY = 8;\n+\n+    /**\n+     * Contains the name of the main thread pool which executes all searches.\n+     */\n+    private static final String TYCHO_OPEN_SEARCH_POOL = \"tycho-open-search\";\n+\n+    /**\n+     * Contains the name of the inner thread pool which actually executes the query of a single provider. We use this\n+     * additional thread pool so that a slow provider does not slow down other providers.\n+     */\n+    private static final String TYCHO_OPEN_SEARCH_TASK_POOL = \"tycho-open-search-task\";\n+\n+    private static final String PARAM_QUERY = \"query\";\n+    private static final String RESPONSE_OVERLOAD = \"overload\";\n+    private static final String CONTENT_TYPE_APPLICATION_JSON = \"application/json\";\n+    private static final byte[] RESPONSE_COMPLETED_MESSAGE = \"{\\\"completed\\\":true}\\n\".getBytes(StandardCharsets.UTF_8);\n+    private static final String RESPONSE_CATEGORY = \"category\";\n+    private static final String RESPONSE_CATEGORY_URL = \"categoryUrl\";\n+    private static final String RESPONSE_PRIORITY = \"priority\";\n+    private static final String RESPONSE_LABEL = \"label\";\n+    private static final String RESPONSE_DESCRIPTION = \"description\";\n+    private static final String RESPONSE_URL = \"url\";\n+    private static final String RESPONSE_ACTIONS = \"actions\";\n+\n+    @Parts(OpenSearchProvider.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1NzA1MQ=="}, "originalCommit": {"oid": "a9f2d8462829744882fff7ff72c8251856751cb9"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjk0ODkxOnYy", "diffSide": "RIGHT", "path": "src/main/resources/component-biz.conf", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyOTowNVrOHoJWlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDoyOTowNVrOHoJWlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg1ODMyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # task, we pick quite a small number here but provide a queue to provider some backlog.\n          \n          \n            \n                # task, we pick quite a small number here but provide a queue to provide some backlog.", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511858326", "createdAt": "2020-10-26T10:29:05Z", "author": {"login": "sabieber"}, "path": "src/main/resources/component-biz.conf", "diffHunk": "@@ -211,6 +211,23 @@ async {\n         queueLength = 100\n     }\n \n+    # Used to handle all OpenSearch requests in Tycho. As this is quite a database intense\n+    # task, we pick quite a small number here but provide a queue to provider some backlog.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjk2MTgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tenants/TenantSearchProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDozMjowNlrOHoJeJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDozMjowNlrOHoJeJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MDI2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Provides the base implementation to mak implementations of {@link Tenant} viaible in the\n          \n          \n            \n             * Provides the base implementation to make implementations of {@link Tenant} visible in the", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511860263", "createdAt": "2020-10-26T10:32:06Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tenants/TenantSearchProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.tycho.search.OpenSearchProvider;\n+import sirius.biz.tycho.search.OpenSearchResult;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.nls.Formatter;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+import sirius.web.security.UserInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides the base implementation to mak implementations of {@link Tenant} viaible in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjk2Njg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tenants/UserAccountSearchProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDozMzoyNVrOHoJhMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMDozMzoyNVrOHoJhMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTg2MTA0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Provides the base implementation to mak implementations of {@link UserAccount} viaible in the\n          \n          \n            \n             * Provides the base implementation to make implementations of {@link UserAccount} visible in the", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r511861043", "createdAt": "2020-10-26T10:33:25Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tenants/UserAccountSearchProvider.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tenants.jdbc.SQLUserAccount;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.tycho.search.OpenSearchProvider;\n+import sirius.biz.tycho.search.OpenSearchResult;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+import sirius.web.security.UserInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides the base implementation to mak implementations of {@link UserAccount} viaible in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODUzODgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tenants/TenantSearchProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo0NDowN1rOHoYixA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyMzoyOFrOHpg0iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwNzIwNA==", "bodyText": "Space f\u00fcr Evaluation evtl. notwendig? Sonst weg.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        openSearchResult.withDescription(Formatter.create(\"[${zip}][ ${city}]\")\n          \n          \n            \n                        openSearchResult.withDescription(Formatter.create(\"[${zip}][${city}]\")", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512107204", "createdAt": "2020-10-26T16:44:07Z", "author": {"login": "bwiedmann"}, "path": "src/main/java/sirius/biz/tenants/TenantSearchProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.tycho.search.OpenSearchProvider;\n+import sirius.biz.tycho.search.OpenSearchResult;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.nls.Formatter;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+import sirius.web.security.UserInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides the base implementation to mak implementations of {@link Tenant} viaible in the\n+ * {@link sirius.biz.tycho.search.OpenSearchController}.\n+ *\n+ * @param <I> the type of database IDs used by the concrete implementation\n+ * @param <T> specifies the effective entity type used to represent Tenants\n+ */\n+public abstract class TenantSearchProvider<I, T extends BaseEntity<I> & Tenant<I>> implements OpenSearchProvider {\n+\n+    @Part\n+    private Tenants<I, T, ?> tenants;\n+\n+    @Override\n+    public String getLabel() {\n+        return NLS.get(\"Tenant.plural\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getUrl() {\n+        return \"/tenants\";\n+    }\n+\n+    @Override\n+    public boolean ensureAccess() {\n+        UserInfo currentUser = UserContext.getCurrentUser();\n+        return currentUser.hasPermission(TenantController.PERMISSION_MANAGE_TENANTS);\n+    }\n+\n+    @Override\n+    public void query(String query, int maxResults, Consumer<OpenSearchResult> resultCollector) {\n+        UserInfo currentUser = UserContext.getCurrentUser();\n+\n+        Query<?, T, ?> tenantQuery = createBaseQuery(query);\n+        tenantQuery.limit(maxResults);\n+\n+        tenantQuery.iterateAll(tenant -> {\n+            OpenSearchResult openSearchResult = new OpenSearchResult().withLabel(tenant.getTenantData().getName());\n+            openSearchResult.withDescription(Formatter.create(\"[${zip}][ ${city}]\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MTQwMw==", "bodyText": "The intended output is 1245 Fun City not 12345Fun City", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r513291403", "createdAt": "2020-10-28T09:23:28Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/tenants/TenantSearchProvider.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.tycho.search.OpenSearchProvider;\n+import sirius.biz.tycho.search.OpenSearchResult;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.query.Query;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.nls.Formatter;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.security.UserContext;\n+import sirius.web.security.UserInfo;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides the base implementation to mak implementations of {@link Tenant} viaible in the\n+ * {@link sirius.biz.tycho.search.OpenSearchController}.\n+ *\n+ * @param <I> the type of database IDs used by the concrete implementation\n+ * @param <T> specifies the effective entity type used to represent Tenants\n+ */\n+public abstract class TenantSearchProvider<I, T extends BaseEntity<I> & Tenant<I>> implements OpenSearchProvider {\n+\n+    @Part\n+    private Tenants<I, T, ?> tenants;\n+\n+    @Override\n+    public String getLabel() {\n+        return NLS.get(\"Tenant.plural\");\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getUrl() {\n+        return \"/tenants\";\n+    }\n+\n+    @Override\n+    public boolean ensureAccess() {\n+        UserInfo currentUser = UserContext.getCurrentUser();\n+        return currentUser.hasPermission(TenantController.PERMISSION_MANAGE_TENANTS);\n+    }\n+\n+    @Override\n+    public void query(String query, int maxResults, Consumer<OpenSearchResult> resultCollector) {\n+        UserInfo currentUser = UserContext.getCurrentUser();\n+\n+        Query<?, T, ?> tenantQuery = createBaseQuery(query);\n+        tenantQuery.limit(maxResults);\n+\n+        tenantQuery.iterateAll(tenant -> {\n+            OpenSearchResult openSearchResult = new OpenSearchResult().withLabel(tenant.getTenantData().getName());\n+            openSearchResult.withDescription(Formatter.create(\"[${zip}][ ${city}]\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEwNzIwNA=="}, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODU3MjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tycho/QuickAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo0OTo1N1rOHoY4qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwOToyNDoyNVrOHpg3Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExMjgwOA==", "bodyText": "TODO insights Kommt noch?", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512112808", "createdAt": "2020-10-26T16:49:57Z", "author": {"login": "bwiedmann"}, "path": "src/main/java/sirius/biz/tycho/QuickAction.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho;\n+\n+import com.alibaba.fastjson.JSONObject;\n+\n+/**\n+ * Represents a secondary action which can be attached to a data object.\n+ * <p>\n+ * This is used for both, {@link sirius.biz.tycho.search.OpenSearchResult} as well as for TODO insights.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzI5MjA2Nw==", "bodyText": "yep - this will be placed in a separate PR and is a marker to updat the docs once all are merged.", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r513292067", "createdAt": "2020-10-28T09:24:25Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/tycho/QuickAction.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho;\n+\n+import com.alibaba.fastjson.JSONObject;\n+\n+/**\n+ * Represents a secondary action which can be attached to a data object.\n+ * <p>\n+ * This is used for both, {@link sirius.biz.tycho.search.OpenSearchResult} as well as for TODO insights.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExMjgwOA=="}, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODYwODc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo1NToxMVrOHoZP9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNjo1NToxMVrOHoZP9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjExODc3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * This way, we can immediatelly render the first results even while other providers are still searching for\n          \n          \n            \n                 * This way, we can immediately render the first results even while other providers are still searching for", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512118774", "createdAt": "2020-10-26T16:55:11Z", "author": {"login": "bwiedmann"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchController.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import com.alibaba.fastjson.JSONArray;\n+import com.alibaba.fastjson.JSONObject;\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+import sirius.biz.tycho.QuickAction;\n+import sirius.biz.web.BizController;\n+import sirius.kernel.async.Barrier;\n+import sirius.kernel.async.Future;\n+import sirius.kernel.async.Tasks;\n+import sirius.kernel.commons.Explain;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Timeout;\n+import sirius.kernel.di.PartCollection;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Parts;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.LoginRequired;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Contains the main parts of the OpenSearch engine for the Tycho UI.\n+ * <p>\n+ * The task of the OpenSearch is to search all matching entities for a given search query. As this yields quite a lot\n+ * of queries, we use two thread pools. This first (<tt>tycho-open-search</tt>) limits the maximal number of parallel\n+ * searches being executed. This is done in order to protect the system as each search invoked multiple providers\n+ * which each execute one or more database queries. Now as some providers will be faster than others and as we want\n+ * to optimize the user experience, we execute each provider in a separate thread in the second thread pool\n+ * (<tt>tycho-open-search-task</tt>). Now in order for all this to make sense, we're not simply generating a plain\n+ * JSON response as that way we'd had to wait for even the slowest provider to show any results. We rather use\n+ * a \"comet\" link which sends individual search results as genrated by each provider as single JSON objects, each\n+ * in its own line (separated by a <tt>\\n</tt>).\n+ * <p>\n+ * On the client side we use the <tt>oboe</tt> library which handles this kind of incoming JSON objects and renders\n+ * any incoming results as fast as possible.\n+ */\n+@Register\n+public class OpenSearchController extends BizController {\n+\n+    /**\n+     * Contains a readily built byte array to separate messages.\n+     * <p>\n+     * The client library expects that we sent the results as \"comets\" - that are JSON objects separated by a new line.\n+     * This way, we can immediatelly render the first results even while other providers are still searching for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODYzMzk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/tycho/search/OpenSearchProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzowMDo1NlrOHoZf1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzowMDo1NlrOHoZf1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjEyMjgzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the URL to be naviagated to when the user clicks on the category label.\n          \n          \n            \n                 * Returns the URL to be navigated to when the user clicks on the category label.", "url": "https://github.com/scireum/sirius-biz/pull/887#discussion_r512122837", "createdAt": "2020-10-26T17:00:56Z", "author": {"login": "bwiedmann"}, "path": "src/main/java/sirius/biz/tycho/search/OpenSearchProvider.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.search;\n+\n+import sirius.kernel.di.std.AutoRegister;\n+import sirius.kernel.di.std.Priorized;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Represents a provider which participates in the system wide search of the Tycho UI.\n+ * <p>\n+ * A provider needs to wear a {@link sirius.kernel.di.std.Register} annotation in order to be discovered by the\n+ * framework.\n+ */\n+@AutoRegister\n+public interface OpenSearchProvider extends Priorized {\n+\n+    /**\n+     * Contains the label to show for the card generated for results yielded by this provider.\n+     *\n+     * @return the label of the category of results as yielded by this provider\n+     */\n+    String getLabel();\n+\n+    /**\n+     * Returns the URL to be naviagated to when the user clicks on the category label.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad866481e0e866ee90aa966c4b9e222606adee81"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1812, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}