{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNDE0NTk3", "number": 866, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0MDowMFrOEnBgbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNToxNDowN1rOEnT0-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzU0NjA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/XMLImportJobFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0MDowMFrOHXYrXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0MDowMFrOHXYrXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MzYxNA==", "bodyText": "only add if getXsdResourcePath() != null?", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494283614", "createdAt": "2020-09-24T12:40:00Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jobs/batch/file/XMLImportJobFactory.java", "diffHunk": "@@ -8,13 +8,27 @@\n \n package sirius.biz.jobs.batch.file;\n \n+import sirius.biz.jobs.params.BooleanParameter;\n+import sirius.biz.jobs.params.Parameter;\n import sirius.biz.process.ProcessContext;\n \n+import java.util.function.Consumer;\n+\n /**\n  * Provides a base implementation for batch jobs which import XML files using a {@link XMLImportJob}.\n  */\n public abstract class XMLImportJobFactory extends FileImportJobFactory {\n \n+    protected final BooleanParameter requireValidFile =\n+            new BooleanParameter(\"requireValidFile\", \"$XMLImportJobFactory.requireValidFile\").hidden()\n+                                                                                                       .logInSystem();\n+\n+    @Override\n+    protected void collectParameters(Consumer<Parameter<?, ?>> parameterCollector) {\n+        parameterCollector.accept(requireValidFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15733117aa35b7fef04bcf848ed3d8587525850c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzU0NjgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/SimpleXMLValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0MDoxM1rOHXYr2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0MDoxM1rOHXYr2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4MzczNw==", "bodyText": "Add javadoc", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494283737", "createdAt": "2020-09-24T12:40:13Z", "author": {"login": "bwiedmann"}, "path": "src/main/java/sirius/biz/jobs/batch/file/SimpleXMLValidator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.kernel.commons.Monoflop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+import sirius.web.security.UserContext;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+/**\n+ * wra", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15733117aa35b7fef04bcf848ed3d8587525850c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzU0OTAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/SimpleXMLValidator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0MDo0N1rOHXYtOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxMjoxMVrOHXZ9pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NDA4OQ==", "bodyText": "Why is this simple and what would be a complex one?", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494284089", "createdAt": "2020-09-24T12:40:47Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jobs/batch/file/SimpleXMLValidator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.kernel.commons.Monoflop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+import sirius.web.security.UserContext;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+/**\n+ * wra\n+ */\n+public class SimpleXMLValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15733117aa35b7fef04bcf848ed3d8587525850c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NzI0Nw==", "bodyText": "I would say that it is simple as only one xml and xsd source can be provided without additional settings. But I can rename it to XMLValidator as this class might evolve in time.", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494287247", "createdAt": "2020-09-24T12:46:05Z", "author": {"login": "fhaScireum"}, "path": "src/main/java/sirius/biz/jobs/batch/file/SimpleXMLValidator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.kernel.commons.Monoflop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+import sirius.web.security.UserContext;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+/**\n+ * wra\n+ */\n+public class SimpleXMLValidator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NDA4OQ=="}, "originalCommit": {"oid": "15733117aa35b7fef04bcf848ed3d8587525850c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4OTY5OQ==", "bodyText": "XsdParser or XsdValidator would be my call", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494289699", "createdAt": "2020-09-24T12:49:45Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/jobs/batch/file/SimpleXMLValidator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.kernel.commons.Monoflop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+import sirius.web.security.UserContext;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+/**\n+ * wra\n+ */\n+public class SimpleXMLValidator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NDA4OQ=="}, "originalCommit": {"oid": "15733117aa35b7fef04bcf848ed3d8587525850c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNDY3OA==", "bodyText": "In my opinion, XsdValidator makes it seem like it validates XSD's.", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494304678", "createdAt": "2020-09-24T13:12:11Z", "author": {"login": "fhaScireum"}, "path": "src/main/java/sirius/biz/jobs/batch/file/SimpleXMLValidator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.kernel.commons.Monoflop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+import sirius.web.security.UserContext;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+/**\n+ * wra\n+ */\n+public class SimpleXMLValidator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NDA4OQ=="}, "originalCommit": {"oid": "15733117aa35b7fef04bcf848ed3d8587525850c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzU1MDQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/SimpleXMLValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0MTowOVrOHXYuEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0MToyOVrOHXYu4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NDMwNQ==", "bodyText": ":)", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494284305", "createdAt": "2020-09-24T12:41:09Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jobs/batch/file/SimpleXMLValidator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.kernel.commons.Monoflop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+import sirius.web.security.UserContext;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+/**\n+ * wra", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15733117aa35b7fef04bcf848ed3d8587525850c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NDUxNA==", "bodyText": ":)", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494284514", "createdAt": "2020-09-24T12:41:29Z", "author": {"login": "fhaScireum"}, "path": "src/main/java/sirius/biz/jobs/batch/file/SimpleXMLValidator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.kernel.commons.Monoflop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+import sirius.web.security.UserContext;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+/**\n+ * wra", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NDMwNQ=="}, "originalCommit": {"oid": "15733117aa35b7fef04bcf848ed3d8587525850c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzU2NzY3OnYy", "diffSide": "RIGHT", "path": "src/main/resources/biz_de.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0NTo0N1rOHXY4zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjo0NTo0N1rOHXY4zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI4NzA1Mw==", "bodyText": "Du willst damit ja ausdr\u00fccken dass diese nicht gegen das XSD Schema validierte oder? Gerne noch etwas sprechender formulieren \ud83d\udc4d", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494287053", "createdAt": "2020-09-24T12:45:47Z", "author": {"login": "bwiedmann"}, "path": "src/main/resources/biz_de.properties", "diffHunk": "@@ -821,3 +821,6 @@ VirtualObject.rename = Umbenennen\n VirtualObject.replaceContents = Inhalt ersetzen\n VirtualObject.unreference = Referenzierung l\u00f6schen\n VirtualObject.versions = Versionen\n+XMLImportJob.importCanceled = Der Import der Datei '${fileName}' wurde verhindert, da diese invalide ist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15733117aa35b7fef04bcf848ed3d8587525850c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzcwMjYwOnYy", "diffSide": "RIGHT", "path": "src/main/resources/biz_de.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxNjo1MFrOHXaKxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxNjo1MFrOHXaKxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwODAzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            XMLImportJob.importCanceled = Der Import der Datei '${fileName}' wurde verhindert, da diese gegen\u00fcber dem hinterlegten XML Schema ung\u00fcltig ist.\n          \n          \n            \n            XMLImportJob.importCanceled = Der Import der Datei '${fileName}' wurde abgebrochen, da diese gegen\u00fcber dem vordefinierte XML Schema ung\u00fcltig ist.", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494308038", "createdAt": "2020-09-24T13:16:50Z", "author": {"login": "idlira"}, "path": "src/main/resources/biz_de.properties", "diffHunk": "@@ -821,6 +821,6 @@ VirtualObject.rename = Umbenennen\n VirtualObject.replaceContents = Inhalt ersetzen\n VirtualObject.unreference = Referenzierung l\u00f6schen\n VirtualObject.versions = Versionen\n-XMLImportJob.importCanceled = Der Import der Datei '${fileName}' wurde verhindert, da diese invalide ist.\n+XMLImportJob.importCanceled = Der Import der Datei '${fileName}' wurde verhindert, da diese gegen\u00fcber dem hinterlegten XML Schema ung\u00fcltig ist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc406a6cafe105e8f67f79ece8eb35a03d859666"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzcwNjc4OnYy", "diffSide": "RIGHT", "path": "src/main/resources/biz_en.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxNzo0NFrOHXaNRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxNzo0NFrOHXaNRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwODY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            XMLImportJob.importCanceled = Importing the file '${fileName}' was prevented as the file is invalid against the stored XML Schema.\n          \n          \n            \n            XMLImportJob.importCanceled = Importing the file '${fileName}' was cancelled as the file is invalid against the defined XML Schema.", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494308678", "createdAt": "2020-09-24T13:17:44Z", "author": {"login": "idlira"}, "path": "src/main/resources/biz_en.properties", "diffHunk": "@@ -777,6 +777,6 @@ VirtualObject.rename = Rename\n VirtualObject.replaceContents = Replace contents\n VirtualObject.unreference = Delete reference\n VirtualObject.versions = Versions\n-XMLImportJob.importCanceled = Importing the file '${fileName}' was prevented as the file is invalid.\n+XMLImportJob.importCanceled = Importing the file '${fileName}' was prevented as the file is invalid against the stored XML Schema.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc406a6cafe105e8f67f79ece8eb35a03d859666"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjU0NTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/XMLValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNToxMjo1MlrOHX1Ncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNToxMjo1MlrOHX1Ncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1MTA5MA==", "bodyText": "Error handler will only handle SAXParseException. So we will swallow IOExceptions here.", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494751090", "createdAt": "2020-09-25T05:12:52Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/jobs/batch/file/XMLValidator.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.xml.sax.ErrorHandler;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.kernel.commons.Monoflop;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+import sirius.web.security.UserContext;\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.transform.Source;\n+import javax.xml.validation.Schema;\n+import javax.xml.validation.SchemaFactory;\n+import javax.xml.validation.Validator;\n+import java.io.IOException;\n+import java.util.Locale;\n+\n+/**\n+ * Validates an XML source against an XSD source and keeps track if any error occurred during validation.\n+ */\n+public class XMLValidator {\n+\n+    private final ProcessContext process;\n+\n+    /**\n+     * Creates a validator that logs errors into the given process context.\n+     *\n+     * @param process the context to log errors into\n+     */\n+    public XMLValidator(ProcessContext process) {\n+        this.process = process;\n+    }\n+\n+    /**\n+     * Determines if the \u00a0{@link Source xml source} is valid by validating it with the given {@link Source xsd source}.\n+     *\n+     * @param xml the XML source to be validated\n+     * @param xsd the XSD source used as the schema for the validator\n+     * @return <tt>true</tt> if the xml source is valid, <tt>false</tt> otherwise\n+     * @throws SAXException in case of an invalid xsd source\n+     */\n+    public boolean validate(Source xml, Source xsd) throws SAXException {\n+        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n+        Schema schema = schemaFactory.newSchema(xsd);\n+\n+        Validator validator = schema.newValidator();\n+        String language = UserContext.getCurrentUser().getLang();\n+        // Apply a workaround for using the english translations as those are not stored in an extra \"en\" resource\n+        // bundle but in the root one instead.\n+        Locale locale = Strings.areEqual(language, \"en\") ? Locale.ROOT : new Locale(language);\n+        validator.setProperty(\"http://apache.org/xml/properties/locale\", locale);\n+\n+        XMLValidatorErrorHandler errorHandler = new XMLValidatorErrorHandler(process);\n+        validator.setErrorHandler(errorHandler);\n+\n+        try {\n+            validator.validate(xml);\n+        } catch (SAXParseException | IOException e) {\n+            // Cause of the exception is already logged via validator's error handler.\n+            Exceptions.ignore(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "721604dac8e8af7f755b84fbf1502a7002177aba"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjU0Nzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/XMLImportJob.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNToxNDowN1rOHX1Opw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjozMjoyMlrOHYBraA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1MTM5OQ==", "bodyText": "Is therre a use case for having a validation on xml file import and ignoring the result? If not, then why not just use the xsdPath parameter to determine if a validation should happen?", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494751399", "createdAt": "2020-09-25T05:14:07Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/jobs/batch/file/XMLImportJob.java", "diffHunk": "@@ -27,6 +47,93 @@\n      */\n     protected XMLImportJob(XMLImportJobFactory factory, ProcessContext process) {\n         super(factory.fileParameter, process);\n+        requireValidFile = process.getParameter(factory.requireValidFile).orElse(false);\n+        xsdResourcePath = factory.getXsdResourcePath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "721604dac8e8af7f755b84fbf1502a7002177aba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc2OTMyOQ==", "bodyText": "The path dictates if a validation should happen. The flag controls the behavior of the job:\n\nImport: Abort or try to import anyway.\nExport: finish the job with either failed or success.\nIn both cases, validation errors will be logged accordingly as warning/error.", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494769329", "createdAt": "2020-09-25T06:15:51Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/jobs/batch/file/XMLImportJob.java", "diffHunk": "@@ -27,6 +47,93 @@\n      */\n     protected XMLImportJob(XMLImportJobFactory factory, ProcessContext process) {\n         super(factory.fileParameter, process);\n+        requireValidFile = process.getParameter(factory.requireValidFile).orElse(false);\n+        xsdResourcePath = factory.getXsdResourcePath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1MTM5OQ=="}, "originalCommit": {"oid": "721604dac8e8af7f755b84fbf1502a7002177aba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk0ODYzOA==", "bodyText": "We are inside an import job here. If you have a use case for validation and ignoring the results, than that is fine. Just I don't see that use case :-)", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494948638", "createdAt": "2020-09-25T12:19:35Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/jobs/batch/file/XMLImportJob.java", "diffHunk": "@@ -27,6 +47,93 @@\n      */\n     protected XMLImportJob(XMLImportJobFactory factory, ProcessContext process) {\n         super(factory.fileParameter, process);\n+        requireValidFile = process.getParameter(factory.requireValidFile).orElse(false);\n+        xsdResourcePath = factory.getXsdResourcePath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1MTM5OQ=="}, "originalCommit": {"oid": "721604dac8e8af7f755b84fbf1502a7002177aba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1NTM2OA==", "bodyText": "Fine for me", "url": "https://github.com/scireum/sirius-biz/pull/866#discussion_r494955368", "createdAt": "2020-09-25T12:32:22Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/jobs/batch/file/XMLImportJob.java", "diffHunk": "@@ -27,6 +47,93 @@\n      */\n     protected XMLImportJob(XMLImportJobFactory factory, ProcessContext process) {\n         super(factory.fileParameter, process);\n+        requireValidFile = process.getParameter(factory.requireValidFile).orElse(false);\n+        xsdResourcePath = factory.getXsdResourcePath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc1MTM5OQ=="}, "originalCommit": {"oid": "721604dac8e8af7f755b84fbf1502a7002177aba"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1775, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}