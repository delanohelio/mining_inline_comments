{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNTk3NDg0", "number": 808, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoyNToxOVrOEMWPBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowMToyN1rOESZpDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzgyNjYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoyNToxOVrOGuZxvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoyNToxOVrOGuZxvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxMDAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Optional<MongoTranslation> translation = fetchTranslation(field, lang);\n          \n          \n            \n                    translation.ifPresent(mongoTranslation -> mango.delete(mongoTranslation));\n          \n          \n            \n                    fetchTranslation(field, lang).ifPresent(mango::delete);", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r451310013", "createdAt": "2020-07-08T06:25:19Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        MongoTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        mango.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        Optional<MongoTranslation> translation = fetchTranslation(field, lang);\n+        translation.ifPresent(mongoTranslation -> mango.delete(mongoTranslation));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1800d6c23c6eeb22029b7ac3669a2e6425e7e97"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzgzMTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoyNzowOVrOGuZ0eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzoxNDoxMlrOGvEizw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxMDcxMg==", "bodyText": "Why not empty list instead of empty optional? Saves a lot of extra code in the calls to this method", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r451310712", "createdAt": "2020-07-08T06:27:09Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")\n+    protected static Set<String> supportedLanguages;\n+\n+    @Transient\n+    @Part\n+    private static FieldLookupCache fieldLookupCache;\n+\n+    protected BasicTranslations(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Provides a validator so translations can only be added for supported languages.\n+     *\n+     * @param lang the language code in question\n+     * @return true if language is supported by the system, false otherwise\n+     */\n+    protected boolean isSupportedLanguage(String lang) {\n+        return supportedLanguages.contains(lang);\n+    }\n+\n+    /**\n+     * Updates the translation for the given field and language, or adds a new translation if it does not exist.\n+     * <p>\n+     * Note that an existing translation is deleted when calling this with empty text.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     */\n+    public abstract void updateText(Mapping field, String lang, String text);\n+\n+    /**\n+     * Deletes the translation for the given field and language\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  code of the language to be deleted\n+     */\n+    public abstract void deleteText(Mapping field, String lang);\n+\n+    /**\n+     * Deletes all translations for the given field\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     */\n+    public abstract void deleteAllTexts(Mapping field);\n+\n+    /**\n+     * Checks, if the given language is supported by the system and returns the translation for the given parameters,\n+     * or creates a new one if none exists.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     * @return the translation entity matching the database in use (Mongo or SQL), null if language not supported\n+     */\n+    protected abstract T findOrCreateTranslation(Mapping field, String lang, String text);\n+\n+    /**\n+     * Gets the translated text for the given field and language.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @return {@link Optional} with translated text for the given language, or empty if none is found\n+     */\n+    public Optional<String> getText(Mapping field, String lang) {\n+        if (!isSupportedLanguage(lang)) {\n+            return Optional.empty();\n+        }\n+\n+        Optional<T> translation = fetchTranslation(field, lang);\n+        return translation.map(t -> t.getTranslationData().getText());\n+    }\n+\n+    /**\n+     * Returns the translated text for the given field and language. Uses fallback language if no translation is found.\n+     * If the fallback also has no translation, the default text from the owner entity is returned.\n+     *\n+     * @param field        {@link Mapping} of the translated field\n+     * @param lang         language code\n+     * @param fallbackLang language code for fallback\n+     * @return translated text for the given language, fallback, or the default text from owner entity\n+     */\n+    public String getRequiredText(Mapping field, String lang, String fallbackLang) {\n+        Optional<String> text = getText(field, lang);\n+        if (!text.isPresent()) {\n+            text = getText(field, fallbackLang);\n+            if (!text.isPresent()) {\n+                return fetchDefaultText(field);\n+            }\n+        }\n+        return text.get();\n+    }\n+\n+    /**\n+     * Fetches the default text by querying {@link sirius.db.mixing.FieldLookupCache} for the owner entity's given field.\n+     *\n+     * @param field {@link Mapping field} to fetch the the text from\n+     * @return the text as String, or null if lookup was unsuccessful\n+     */\n+    protected String fetchDefaultText(Mapping field) {\n+        return fieldLookupCache.lookup(owner.getClass(), owner.getId(), field).asString();\n+    }\n+\n+    /**\n+     * Returns all available translated texts for the given field.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @return a {@link Map} of all translated texts with corresponding language code as key, empty map if none present\n+     */\n+    public Map<String, String> getAllTexts(Mapping field) {\n+        Optional<List<T>> translations = fetchAllTranslations(field);\n+        if (!translations.isPresent()) {\n+            return new HashMap<>();\n+        }\n+        Map<String, String> translatedTexts = new HashMap<>();\n+        for (T t : translations.get()) {\n+            translatedTexts.put(t.getTranslationData().getLang(), t.getTranslationData().getText());\n+        }\n+        return translatedTexts;\n+    }\n+\n+    /**\n+     * Looks up the translation entity for the database in use (e.g. MongoDB or SQL).\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @return the resolved translation entity wrapped as optional or an empty optional if the value couldn't be resolved\n+     */\n+    protected abstract Optional<T> fetchTranslation(Mapping field, String lang);\n+\n+    /**\n+     * Looks up and returns all available {@link Translation translation} entities for the given field\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @return {@link Optional} with a {@link java.util.List} of all {@link Translation translations}, or empty if none are found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1800d6c23c6eeb22029b7ac3669a2e6425e7e97"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAxMDcwMw==", "bodyText": "Thanks for the hint! The optional was definitely unnecessary here", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r452010703", "createdAt": "2020-07-09T07:14:12Z", "author": {"login": "cschierle"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")\n+    protected static Set<String> supportedLanguages;\n+\n+    @Transient\n+    @Part\n+    private static FieldLookupCache fieldLookupCache;\n+\n+    protected BasicTranslations(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Provides a validator so translations can only be added for supported languages.\n+     *\n+     * @param lang the language code in question\n+     * @return true if language is supported by the system, false otherwise\n+     */\n+    protected boolean isSupportedLanguage(String lang) {\n+        return supportedLanguages.contains(lang);\n+    }\n+\n+    /**\n+     * Updates the translation for the given field and language, or adds a new translation if it does not exist.\n+     * <p>\n+     * Note that an existing translation is deleted when calling this with empty text.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     */\n+    public abstract void updateText(Mapping field, String lang, String text);\n+\n+    /**\n+     * Deletes the translation for the given field and language\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  code of the language to be deleted\n+     */\n+    public abstract void deleteText(Mapping field, String lang);\n+\n+    /**\n+     * Deletes all translations for the given field\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     */\n+    public abstract void deleteAllTexts(Mapping field);\n+\n+    /**\n+     * Checks, if the given language is supported by the system and returns the translation for the given parameters,\n+     * or creates a new one if none exists.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     * @return the translation entity matching the database in use (Mongo or SQL), null if language not supported\n+     */\n+    protected abstract T findOrCreateTranslation(Mapping field, String lang, String text);\n+\n+    /**\n+     * Gets the translated text for the given field and language.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @return {@link Optional} with translated text for the given language, or empty if none is found\n+     */\n+    public Optional<String> getText(Mapping field, String lang) {\n+        if (!isSupportedLanguage(lang)) {\n+            return Optional.empty();\n+        }\n+\n+        Optional<T> translation = fetchTranslation(field, lang);\n+        return translation.map(t -> t.getTranslationData().getText());\n+    }\n+\n+    /**\n+     * Returns the translated text for the given field and language. Uses fallback language if no translation is found.\n+     * If the fallback also has no translation, the default text from the owner entity is returned.\n+     *\n+     * @param field        {@link Mapping} of the translated field\n+     * @param lang         language code\n+     * @param fallbackLang language code for fallback\n+     * @return translated text for the given language, fallback, or the default text from owner entity\n+     */\n+    public String getRequiredText(Mapping field, String lang, String fallbackLang) {\n+        Optional<String> text = getText(field, lang);\n+        if (!text.isPresent()) {\n+            text = getText(field, fallbackLang);\n+            if (!text.isPresent()) {\n+                return fetchDefaultText(field);\n+            }\n+        }\n+        return text.get();\n+    }\n+\n+    /**\n+     * Fetches the default text by querying {@link sirius.db.mixing.FieldLookupCache} for the owner entity's given field.\n+     *\n+     * @param field {@link Mapping field} to fetch the the text from\n+     * @return the text as String, or null if lookup was unsuccessful\n+     */\n+    protected String fetchDefaultText(Mapping field) {\n+        return fieldLookupCache.lookup(owner.getClass(), owner.getId(), field).asString();\n+    }\n+\n+    /**\n+     * Returns all available translated texts for the given field.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @return a {@link Map} of all translated texts with corresponding language code as key, empty map if none present\n+     */\n+    public Map<String, String> getAllTexts(Mapping field) {\n+        Optional<List<T>> translations = fetchAllTranslations(field);\n+        if (!translations.isPresent()) {\n+            return new HashMap<>();\n+        }\n+        Map<String, String> translatedTexts = new HashMap<>();\n+        for (T t : translations.get()) {\n+            translatedTexts.put(t.getTranslationData().getLang(), t.getTranslationData().getText());\n+        }\n+        return translatedTexts;\n+    }\n+\n+    /**\n+     * Looks up the translation entity for the database in use (e.g. MongoDB or SQL).\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @return the resolved translation entity wrapped as optional or an empty optional if the value couldn't be resolved\n+     */\n+    protected abstract Optional<T> fetchTranslation(Mapping field, String lang);\n+\n+    /**\n+     * Looks up and returns all available {@link Translation translation} entities for the given field\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @return {@link Optional} with a {@link java.util.List} of all {@link Translation translations}, or empty if none are found", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxMDcxMg=="}, "originalCommit": {"oid": "e1800d6c23c6eeb22029b7ac3669a2e6425e7e97"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzgzNTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoyODo1MlrOGuZ3Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjoyODo1MlrOGuZ3Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxMTM4Mg==", "bodyText": "for example here:\nMap<String, String> translatedTexts = new HashMap<>();\nfor (T t : fetchAllTranslations(field)) {\n    translatedTexts.put(t.getTranslationData().getLang(), t.getTranslationData().getText());\n}\nreturn translatedTexts;", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r451311382", "createdAt": "2020-07-08T06:28:52Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")\n+    protected static Set<String> supportedLanguages;\n+\n+    @Transient\n+    @Part\n+    private static FieldLookupCache fieldLookupCache;\n+\n+    protected BasicTranslations(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Provides a validator so translations can only be added for supported languages.\n+     *\n+     * @param lang the language code in question\n+     * @return true if language is supported by the system, false otherwise\n+     */\n+    protected boolean isSupportedLanguage(String lang) {\n+        return supportedLanguages.contains(lang);\n+    }\n+\n+    /**\n+     * Updates the translation for the given field and language, or adds a new translation if it does not exist.\n+     * <p>\n+     * Note that an existing translation is deleted when calling this with empty text.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     */\n+    public abstract void updateText(Mapping field, String lang, String text);\n+\n+    /**\n+     * Deletes the translation for the given field and language\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  code of the language to be deleted\n+     */\n+    public abstract void deleteText(Mapping field, String lang);\n+\n+    /**\n+     * Deletes all translations for the given field\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     */\n+    public abstract void deleteAllTexts(Mapping field);\n+\n+    /**\n+     * Checks, if the given language is supported by the system and returns the translation for the given parameters,\n+     * or creates a new one if none exists.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     * @return the translation entity matching the database in use (Mongo or SQL), null if language not supported\n+     */\n+    protected abstract T findOrCreateTranslation(Mapping field, String lang, String text);\n+\n+    /**\n+     * Gets the translated text for the given field and language.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @return {@link Optional} with translated text for the given language, or empty if none is found\n+     */\n+    public Optional<String> getText(Mapping field, String lang) {\n+        if (!isSupportedLanguage(lang)) {\n+            return Optional.empty();\n+        }\n+\n+        Optional<T> translation = fetchTranslation(field, lang);\n+        return translation.map(t -> t.getTranslationData().getText());\n+    }\n+\n+    /**\n+     * Returns the translated text for the given field and language. Uses fallback language if no translation is found.\n+     * If the fallback also has no translation, the default text from the owner entity is returned.\n+     *\n+     * @param field        {@link Mapping} of the translated field\n+     * @param lang         language code\n+     * @param fallbackLang language code for fallback\n+     * @return translated text for the given language, fallback, or the default text from owner entity\n+     */\n+    public String getRequiredText(Mapping field, String lang, String fallbackLang) {\n+        Optional<String> text = getText(field, lang);\n+        if (!text.isPresent()) {\n+            text = getText(field, fallbackLang);\n+            if (!text.isPresent()) {\n+                return fetchDefaultText(field);\n+            }\n+        }\n+        return text.get();\n+    }\n+\n+    /**\n+     * Fetches the default text by querying {@link sirius.db.mixing.FieldLookupCache} for the owner entity's given field.\n+     *\n+     * @param field {@link Mapping field} to fetch the the text from\n+     * @return the text as String, or null if lookup was unsuccessful\n+     */\n+    protected String fetchDefaultText(Mapping field) {\n+        return fieldLookupCache.lookup(owner.getClass(), owner.getId(), field).asString();\n+    }\n+\n+    /**\n+     * Returns all available translated texts for the given field.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @return a {@link Map} of all translated texts with corresponding language code as key, empty map if none present\n+     */\n+    public Map<String, String> getAllTexts(Mapping field) {\n+        Optional<List<T>> translations = fetchAllTranslations(field);\n+        if (!translations.isPresent()) {\n+            return new HashMap<>();\n+        }\n+        Map<String, String> translatedTexts = new HashMap<>();\n+        for (T t : translations.get()) {\n+            translatedTexts.put(t.getTranslationData().getLang(), t.getTranslationData().getText());\n+        }\n+        return translatedTexts;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1800d6c23c6eeb22029b7ac3669a2e6425e7e97"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzg0MDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjozMDoyNVrOGuZ59w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNjozMDoyNVrOGuZ59w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxMjExOQ==", "bodyText": "Or here\nfor (SQLTranslation translation : fetchAllTranslations(field)) {\n    oma.delete(translation);\n}", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r451312119", "createdAt": "2020-07-08T06:30:25Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        SQLTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        oma.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        Optional<SQLTranslation> translation = fetchTranslation(field, lang);\n+        translation.ifPresent(sqlTranslation -> oma.delete(sqlTranslation));\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        Optional<List<SQLTranslation>> translations = fetchAllTranslations(field);\n+        if (translations.isPresent()) {\n+            for (SQLTranslation translation : translations.get()) {\n+                oma.delete(translation);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1800d6c23c6eeb22029b7ac3669a2e6425e7e97"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODM4ODc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1MjoyNlrOGvFw_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1MjoyNlrOGvFw_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMDcxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Ensures that if the owner entity is deleted, all of its translations are deleted as well\n          \n          \n            \n                 * Ensures that translations are cascaded-deleted upon deletion of the owner entity.", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r452030716", "createdAt": "2020-07-09T07:52:26Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -44,6 +45,12 @@ protected BasicTranslations(BaseEntity<?> owner) {\n         this.owner = owner;\n     }\n \n+    /**\n+     * Ensures that if the owner entity is deleted, all of its translations are deleted as well", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0231722325da0f516aa706796c1b75ef4119e0d3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODM5OTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NTozMlrOGvF3wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NTozMlrOGvF3wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjQ1MA==", "bodyText": "It's possible to delete all in a single command based on filter instead of looping and deleting one by one.", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r452032450", "createdAt": "2020-07-09T07:55:32Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -29,6 +28,15 @@ public MongoTranslations(BaseEntity<?> owner) {\n         super(owner);\n     }\n \n+    @Override\n+    protected void deleteAllTranslations() {\n+        for (MongoTranslation t : mango.select(MongoTranslation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0231722325da0f516aa706796c1b75ef4119e0d3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxODM5OTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NTozOFrOGvF3_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwNzo1NTozOFrOGvF3_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAzMjUxMQ==", "bodyText": "It's possible to delete all in a single command based on filter instead of looping and deleting one by one.", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r452032511", "createdAt": "2020-07-09T07:55:38Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -29,6 +28,15 @@ public SQLTranslations(BaseEntity<?> owner) {\n         super(owner);\n     }\n \n+    @Override\n+    protected void deleteAllTranslations() {\n+        for (SQLTranslation t : oma.select(SQLTranslation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0231722325da0f516aa706796c1b75ef4119e0d3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE0Mjg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowMToyNlrOGz772g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjowMzozNlrOG19MBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMjUzOA==", "bodyText": "maybe use a more generic config name here?", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457112538", "createdAt": "2020-07-20T07:01:26Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.AfterDelete;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzMDIxNA==", "bodyText": "this currently uses the existing supported languages config entry from the multi language strings implementation. It will be replaced once the standard codelists for countries/languages are implemented, which requires translation entities though. Until then, the existing config should solve the chicken/egg-problem", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r459230214", "createdAt": "2020-07-23T06:03:36Z", "author": {"login": "cschierle"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.AfterDelete;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMjUzOA=="}, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE1MDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowMzoyNVrOGz8ATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowMzoyNVrOGz8ATg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExMzY3OA==", "bodyText": "why not directly read from the owner? owner.getDescriptor.getProperty(field).getValue(owner) or the like ? maybe check if the value is fetched and else fallback to the fieldLookupCache otherwise(??)", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457113678", "createdAt": "2020-07-20T07:03:25Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.AfterDelete;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")\n+    protected static Set<String> supportedLanguages;\n+\n+    @Transient\n+    @Part\n+    private static FieldLookupCache fieldLookupCache;\n+\n+    protected BasicTranslations(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Ensures that translations are cascaded-deleted upon deletion of the owner entity.\n+     */\n+    @AfterDelete\n+    protected abstract void removeTranslations();\n+\n+    /**\n+     * Provides a validator so translations can only be added for supported languages.\n+     *\n+     * @param lang the language code in question\n+     * @return true if language is supported by the system, false otherwise\n+     */\n+    protected boolean isSupportedLanguage(String lang) {\n+        return supportedLanguages.contains(lang);\n+    }\n+\n+    /**\n+     * Updates the translation for the given field and language, or adds a new translation if it does not exist.\n+     * <p>\n+     * Note that an existing translation is deleted when calling this with empty text.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     */\n+    public abstract void updateText(Mapping field, String lang, String text);\n+\n+    /**\n+     * Deletes the translation for the given field and language\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  code of the language to be deleted\n+     */\n+    public abstract void deleteText(Mapping field, String lang);\n+\n+    /**\n+     * Deletes all translations for the given field\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     */\n+    public abstract void deleteAllTexts(Mapping field);\n+\n+    /**\n+     * Checks, if the given language is supported by the system and returns the translation for the given parameters,\n+     * or creates a new one if none exists.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     * @return the translation entity matching the database in use (Mongo or SQL), null if language not supported\n+     */\n+    protected abstract T findOrCreateTranslation(Mapping field, String lang, String text);\n+\n+    /**\n+     * Gets the translated text for the given field and language.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @return {@link Optional} with translated text for the given language, or empty if none is found\n+     */\n+    public Optional<String> getText(Mapping field, String lang) {\n+        if (!isSupportedLanguage(lang)) {\n+            return Optional.empty();\n+        }\n+\n+        Optional<T> translation = fetchTranslation(field, lang);\n+        return translation.map(t -> t.getTranslationData().getText());\n+    }\n+\n+    /**\n+     * Returns the translated text for the given field and language. Uses fallback language if no translation is found.\n+     * If the fallback also has no translation, the default text from the owner entity is returned.\n+     *\n+     * @param field        {@link Mapping} of the translated field\n+     * @param lang         language code\n+     * @param fallbackLang language code for fallback\n+     * @return translated text for the given language, fallback, or the default text from owner entity\n+     */\n+    public String getRequiredText(Mapping field, String lang, String fallbackLang) {\n+        Optional<String> text = getText(field, lang);\n+        if (!text.isPresent()) {\n+            text = getText(field, fallbackLang);\n+            if (!text.isPresent()) {\n+                return fetchDefaultText(field);\n+            }\n+        }\n+        return text.get();\n+    }\n+\n+    /**\n+     * Fetches the default text by querying {@link sirius.db.mixing.FieldLookupCache} for the owner entity's given field.\n+     *\n+     * @param field {@link Mapping field} to fetch the the text from\n+     * @return the text as String, or null if lookup was unsuccessful\n+     */\n+    protected String fetchDefaultText(Mapping field) {\n+        return fieldLookupCache.lookup(owner.getClass(), owner.getId(), field).asString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE1NjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/Translation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNDo0MlrOGz8DeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNDo0MlrOGz8DeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNDQ4OA==", "bodyText": "why not place this also in TranslationData?", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457114488", "createdAt": "2020-07-20T07:04:42Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/Translation.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.db.mixing.Mapping;\n+\n+/**\n+ * Provides constants and methods that have to be present in any Translation entity\n+ */\n+public interface Translation {\n+    /**\n+     * Contains the unique name of the entity this translation belongs to.\n+     */\n+    Mapping OWNER = Mapping.named(\"owner\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE2MDE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNToyOFrOGz8FfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNToyOFrOGz8FfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNTAwNA==", "bodyText": "index on owner, field, lang ??", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457115004", "createdAt": "2020-07-20T07:05:28Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslation.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.jdbc.SQLEntity;\n+\n+/**\n+ * Stores translations as a table.\n+ * <p>\n+ * Note that translations should only be accessed via siblings of {@link sirius.biz.translations.BasicTranslations}.\n+ */\n+public class SQLTranslation extends SQLEntity implements Translation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE2MTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNTo0OFrOGz8GNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNTo0OFrOGz8GNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNTE5MQ==", "bodyText": "exception(?)", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457115191", "createdAt": "2020-07-20T07:05:48Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        oma.select(SQLTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        SQLTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        oma.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(oma::delete);\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        for (SQLTranslation translation : fetchAllTranslations(field)) {\n+            oma.delete(translation);\n+        }\n+    }\n+\n+    @Override\n+    protected SQLTranslation findOrCreateTranslation(Mapping field, String lang, String text) {\n+        if (!isSupportedLanguage(lang)) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE2Njg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNjo1NlrOGz8JDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNjo1NlrOGz8JDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNTkxOA==", "bodyText": "either mark as Nonnull and don't care or Objects.requireNonNull or the like - there is no sane API case for supporting null values here(?)", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457115918", "createdAt": "2020-07-20T07:06:56Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        oma.select(SQLTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        SQLTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        oma.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(oma::delete);\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        for (SQLTranslation translation : fetchAllTranslations(field)) {\n+            oma.delete(translation);\n+        }\n+    }\n+\n+    @Override\n+    protected SQLTranslation findOrCreateTranslation(Mapping field, String lang, String text) {\n+        if (!isSupportedLanguage(lang)) {\n+            return null;\n+        }\n+\n+        Optional<SQLTranslation> translation = fetchTranslation(field, lang);\n+\n+        if (translation.isPresent()) {\n+            return translation.get();\n+        } else {\n+            SQLTranslation sqlTranslation = new SQLTranslation();\n+            sqlTranslation.setOwner(owner.getUniqueName());\n+            sqlTranslation.getTranslationData().setField(field.getName());\n+            sqlTranslation.getTranslationData().setLang(lang);\n+            return sqlTranslation;\n+        }\n+    }\n+\n+    @Override\n+    protected Optional<SQLTranslation> fetchTranslation(Mapping field, String lang) {\n+        if (field == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE2NzI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNzowMlrOGz8JPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNzowMlrOGz8JPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNTk2Ng==", "bodyText": "s.a.", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457115966", "createdAt": "2020-07-20T07:07:02Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        oma.select(SQLTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        SQLTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        oma.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(oma::delete);\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        for (SQLTranslation translation : fetchAllTranslations(field)) {\n+            oma.delete(translation);\n+        }\n+    }\n+\n+    @Override\n+    protected SQLTranslation findOrCreateTranslation(Mapping field, String lang, String text) {\n+        if (!isSupportedLanguage(lang)) {\n+            return null;\n+        }\n+\n+        Optional<SQLTranslation> translation = fetchTranslation(field, lang);\n+\n+        if (translation.isPresent()) {\n+            return translation.get();\n+        } else {\n+            SQLTranslation sqlTranslation = new SQLTranslation();\n+            sqlTranslation.setOwner(owner.getUniqueName());\n+            sqlTranslation.getTranslationData().setField(field.getName());\n+            sqlTranslation.getTranslationData().setLang(lang);\n+            return sqlTranslation;\n+        }\n+    }\n+\n+    @Override\n+    protected Optional<SQLTranslation> fetchTranslation(Mapping field, String lang) {\n+        if (field == null) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.ofNullable(oma.select(SQLTranslation.class)\n+                                          .eq(Translation.OWNER, owner.getUniqueName())\n+                                          .eq(Translation.TRANSLATION_DATA.inner(TranslationData.FIELD),\n+                                              field.getName())\n+                                          .eq(Translation.TRANSLATION_DATA.inner(TranslationData.LANG), lang)\n+                                          .queryFirst());\n+        }\n+    }\n+\n+    @Override\n+    protected List<SQLTranslation> fetchAllTranslations(Mapping field) {\n+        if (field == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE2Nzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNzoxMFrOGz8JjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowNzoxMFrOGz8JjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNjA0NA==", "bodyText": "index", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457116044", "createdAt": "2020-07-20T07:07:10Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslation.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mongo.MongoEntity;\n+\n+/**\n+ * Stores translations as a collection.\n+ * <p>\n+ * Note that translations should only be accessed via siblings of {@link sirius.biz.translations.BasicTranslations}.\n+ */\n+public class MongoTranslation extends MongoEntity implements Translation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE3NDMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowODo0MFrOGz8NBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMDozMlrOGz8Rmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNjkzMw==", "bodyText": "handle empty -> delete before this...", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457116933", "createdAt": "2020-07-20T07:08:40Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        oma.select(SQLTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        SQLTranslation translation = findOrCreateTranslation(field, lang, text);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExODEwNg==", "bodyText": "and write to journal of owner (could be even done in the superclass)", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457118106", "createdAt": "2020-07-20T07:10:32Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        oma.select(SQLTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        SQLTranslation translation = findOrCreateTranslation(field, lang, text);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNjkzMw=="}, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE3Njc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowOToxNFrOGz8OSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMDowMFrOGz8QNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNzI1OA==", "bodyText": "delete per oma.deleteStatement api?", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457117258", "createdAt": "2020-07-20T07:09:14Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        oma.select(SQLTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        SQLTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        oma.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(oma::delete);\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        for (SQLTranslation translation : fetchAllTranslations(field)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNzc1MQ==", "bodyText": "write to journal of owner if journaled", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457117751", "createdAt": "2020-07-20T07:10:00Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        oma.select(SQLTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        SQLTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        oma.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(oma::delete);\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        for (SQLTranslation translation : fetchAllTranslations(field)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNzI1OA=="}, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE4MDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowOTo1MlrOGz8P4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzowOTo1MlrOGz8P4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExNzY2Nw==", "bodyText": "delete per oma.deleteStatementAPI + write to journal of owner if journaled", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457117667", "createdAt": "2020-07-20T07:09:52Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        oma.select(SQLTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        SQLTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        oma.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(oma::delete);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE4ODgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMTo0MVrOGz8Udw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMTo0MVrOGz8Udw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExODgzOQ==", "bodyText": "first delete then check + create otherwise", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457118839", "createdAt": "2020-07-20T07:11:41Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        MongoTranslation translation = findOrCreateTranslation(field, lang, text);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE5MDEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMTo1N1rOGz8VIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMTo1N1rOGz8VIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExOTAwOQ==", "bodyText": "update journal", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457119009", "createdAt": "2020-07-20T07:11:57Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        MongoTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE5MTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMjoxMlrOGz8VzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMjoxMlrOGz8VzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExOTE4MA==", "bodyText": "mongo.delete() + journal", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457119180", "createdAt": "2020-07-20T07:12:12Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        MongoTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        mango.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(mango::delete);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE5MjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMjoxOFrOGz8WBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMjoxOFrOGz8WBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExOTIzNg==", "bodyText": "s.a.", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457119236", "createdAt": "2020-07-20T07:12:18Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        MongoTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        mango.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(mango::delete);\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        for (MongoTranslation translation : fetchAllTranslations(field)) {\n+            mango.delete(translation);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE5MzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMjozOFrOGz8W4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMjozOFrOGz8W4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExOTQ1OQ==", "bodyText": "s.a.", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457119459", "createdAt": "2020-07-20T07:12:38Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        MongoTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        mango.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(mango::delete);\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        for (MongoTranslation translation : fetchAllTranslations(field)) {\n+            mango.delete(translation);\n+        }\n+    }\n+\n+    @Override\n+    protected MongoTranslation findOrCreateTranslation(Mapping field, String lang, String text) {\n+        if (!isSupportedLanguage(lang)) {\n+            return null;\n+        }\n+\n+        Optional<MongoTranslation> translation = fetchTranslation(field, lang);\n+\n+        if (translation.isPresent()) {\n+            return translation.get();\n+        } else {\n+            MongoTranslation mongoTranslation = new MongoTranslation();\n+            mongoTranslation.setOwner(owner.getUniqueName());\n+            mongoTranslation.getTranslationData().setField(field.getName());\n+            mongoTranslation.getTranslationData().setLang(lang);\n+            return mongoTranslation;\n+        }\n+    }\n+\n+    @Override\n+    protected Optional<MongoTranslation> fetchTranslation(Mapping field, String lang) {\n+        if (field == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE5NTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMzowMlrOGz8X2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODozMDo0NVrOG2A_Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExOTcwNQ==", "bodyText": "thats what Query.first() (in contrast to Query.queryFirst()) does.. :)", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457119705", "createdAt": "2020-07-20T07:13:02Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        MongoTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        mango.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(mango::delete);\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        for (MongoTranslation translation : fetchAllTranslations(field)) {\n+            mango.delete(translation);\n+        }\n+    }\n+\n+    @Override\n+    protected MongoTranslation findOrCreateTranslation(Mapping field, String lang, String text) {\n+        if (!isSupportedLanguage(lang)) {\n+            return null;\n+        }\n+\n+        Optional<MongoTranslation> translation = fetchTranslation(field, lang);\n+\n+        if (translation.isPresent()) {\n+            return translation.get();\n+        } else {\n+            MongoTranslation mongoTranslation = new MongoTranslation();\n+            mongoTranslation.setOwner(owner.getUniqueName());\n+            mongoTranslation.getTranslationData().setField(field.getName());\n+            mongoTranslation.getTranslationData().setLang(lang);\n+            return mongoTranslation;\n+        }\n+    }\n+\n+    @Override\n+    protected Optional<MongoTranslation> fetchTranslation(Mapping field, String lang) {\n+        if (field == null) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.ofNullable(mango.select(MongoTranslation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MjUxOA==", "bodyText": "thanks for the hint!", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r459292518", "createdAt": "2020-07-23T08:30:45Z", "author": {"login": "cschierle"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        MongoTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        mango.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(mango::delete);\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        for (MongoTranslation translation : fetchAllTranslations(field)) {\n+            mango.delete(translation);\n+        }\n+    }\n+\n+    @Override\n+    protected MongoTranslation findOrCreateTranslation(Mapping field, String lang, String text) {\n+        if (!isSupportedLanguage(lang)) {\n+            return null;\n+        }\n+\n+        Optional<MongoTranslation> translation = fetchTranslation(field, lang);\n+\n+        if (translation.isPresent()) {\n+            return translation.get();\n+        } else {\n+            MongoTranslation mongoTranslation = new MongoTranslation();\n+            mongoTranslation.setOwner(owner.getUniqueName());\n+            mongoTranslation.getTranslationData().setField(field.getName());\n+            mongoTranslation.getTranslationData().setLang(lang);\n+            return mongoTranslation;\n+        }\n+    }\n+\n+    @Override\n+    protected Optional<MongoTranslation> fetchTranslation(Mapping field, String lang) {\n+        if (field == null) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.ofNullable(mango.select(MongoTranslation.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExOTcwNQ=="}, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjE5NjI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMzoxMlrOGz8YVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNzoxMzoxMlrOGz8YVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzExOTgyOA==", "bodyText": "s.a.", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r457119828", "createdAt": "2020-07-20T07:13:12Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.kernel.commons.Strings;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class).eq(Translation.OWNER, owner.getUniqueName()).delete();\n+    }\n+\n+    @Override\n+    public void updateText(Mapping field, String lang, String text) {\n+        MongoTranslation translation = findOrCreateTranslation(field, lang, text);\n+\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        translation.getTranslationData().setText(text);\n+\n+        mango.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(mango::delete);\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(Mapping field) {\n+        for (MongoTranslation translation : fetchAllTranslations(field)) {\n+            mango.delete(translation);\n+        }\n+    }\n+\n+    @Override\n+    protected MongoTranslation findOrCreateTranslation(Mapping field, String lang, String text) {\n+        if (!isSupportedLanguage(lang)) {\n+            return null;\n+        }\n+\n+        Optional<MongoTranslation> translation = fetchTranslation(field, lang);\n+\n+        if (translation.isPresent()) {\n+            return translation.get();\n+        } else {\n+            MongoTranslation mongoTranslation = new MongoTranslation();\n+            mongoTranslation.setOwner(owner.getUniqueName());\n+            mongoTranslation.getTranslationData().setField(field.getName());\n+            mongoTranslation.getTranslationData().setLang(lang);\n+            return mongoTranslation;\n+        }\n+    }\n+\n+    @Override\n+    protected Optional<MongoTranslation> fetchTranslation(Mapping field, String lang) {\n+        if (field == null) {\n+            return Optional.empty();\n+        } else {\n+            return Optional.ofNullable(mango.select(MongoTranslation.class)\n+                                            .eq(Translation.OWNER, owner.getUniqueName())\n+                                            .eq(Translation.TRANSLATION_DATA.inner(TranslationData.FIELD),\n+                                                field.getName())\n+                                            .eq(Translation.TRANSLATION_DATA.inner(TranslationData.LANG), lang)\n+                                            .queryFirst());\n+        }\n+    }\n+\n+    @Override\n+    protected List<MongoTranslation> fetchAllTranslations(Mapping field) {\n+        if (field == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0623dc63040ecead8d4d4b2e6bc9c90f5fec8b5"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzUyMjY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxMjoxMVrOG2MclA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxMjoxMVrOG2MclA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MDIxMg==", "bodyText": "I'd skip that - this might silently suppress a bug we'd rather want to surface here....", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r459480212", "createdAt": "2020-07-23T14:12:11Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.protocol.JournalData;\n+import sirius.biz.protocol.Journaled;\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.Mixing;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        oma.select(SQLTranslation.class)\n+           .eq(Translation.TRANSLATION_DATA.inner(TranslationData.OWNER), owner.getUniqueName())\n+           .delete();\n+    }\n+\n+    @Override\n+    protected void updateTranslation(SQLTranslation translation) {\n+        oma.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(@Nonnull Mapping field, String lang) {\n+        try {\n+            oma.deleteStatement(SQLTranslation.class)\n+               .where(Translation.TRANSLATION_DATA.inner(TranslationData.OWNER), owner.getUniqueName())\n+               .where(Translation.TRANSLATION_DATA.inner(TranslationData.FIELD), field.getName())\n+               .where(Translation.TRANSLATION_DATA.inner(TranslationData.LANG), lang)\n+               .executeUpdate();\n+\n+            if (owner instanceof Journaled) {\n+                JournalData.addJournalEntry(owner,\n+                                            \"Deleted translated text for \" + field.getName() + \" (\" + lang + \")\");\n+            }\n+        } catch (SQLException e) {\n+            throw Exceptions.handle()\n+                            .to(Mixing.LOG)\n+                            .error(e)\n+                            .withSystemErrorMessage(\"Failed to delete a translation text for %s: %s (%s)\",\n+                                                    owner.getUniqueName(),\n+                                                    field.getName(),\n+                                                    lang)\n+                            .handle();\n+        }\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(@Nonnull Mapping field) {\n+        try {\n+            oma.deleteStatement(SQLTranslation.class)\n+               .where(Translation.TRANSLATION_DATA.inner(TranslationData.OWNER), owner.getUniqueName())\n+               .where(Translation.TRANSLATION_DATA.inner(TranslationData.FIELD), field.getName())\n+               .executeUpdate();\n+\n+            if (owner instanceof Journaled) {\n+                JournalData.addJournalEntry(owner, \"Deleted all translated texts for \" + field.getName());\n+            }\n+        } catch (SQLException e) {\n+            throw Exceptions.handle()\n+                            .to(Mixing.LOG)\n+                            .error(e)\n+                            .withSystemErrorMessage(\"Failed to delete translation texts for %s: %s\",\n+                                                    owner.getUniqueName(),\n+                                                    field.getName())\n+                            .handle();\n+        }\n+    }\n+\n+    @Override\n+    protected SQLTranslation findOrCreateTranslation(@Nonnull Mapping field, String lang, String text) {\n+        if (!isSupportedLanguage(lang)) {\n+            throw new IllegalArgumentException(\n+                    \"lang must be a language code supported by the system (supportedLanguages)!\");\n+        }\n+\n+        Optional<SQLTranslation> translation = fetchTranslation(field, lang);\n+\n+        if (translation.isPresent()) {\n+            return translation.get();\n+        } else {\n+            SQLTranslation sqlTranslation = new SQLTranslation();\n+            sqlTranslation.getTranslationData().setOwner(owner.getUniqueName());\n+            sqlTranslation.getTranslationData().setField(field.getName());\n+            sqlTranslation.getTranslationData().setLang(lang);\n+            return sqlTranslation;\n+        }\n+    }\n+\n+    @Override\n+    protected Optional<SQLTranslation> fetchTranslation(@Nonnull Mapping field, String lang) {\n+        return oma.select(SQLTranslation.class)\n+                  .eq(Translation.TRANSLATION_DATA.inner(TranslationData.OWNER), owner.getUniqueName())\n+                  .eq(Translation.TRANSLATION_DATA.inner(TranslationData.FIELD), field.getName())\n+                  .eq(Translation.TRANSLATION_DATA.inner(TranslationData.LANG), lang)\n+                  .first();\n+    }\n+\n+    @Override\n+    protected List<SQLTranslation> fetchAllTranslations(@Nonnull Mapping field) {\n+        return oma.select(SQLTranslation.class)\n+                  .eq(Translation.TRANSLATION_DATA.inner(TranslationData.OWNER), owner.getUniqueName())\n+                  .eq(Translation.TRANSLATION_DATA.inner(TranslationData.FIELD), field.getName())\n+                  .limit(supportedLanguages.size())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b578a474dc63e32c21c396278d3c3463f4f5504"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzUyOTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxMzozNlrOG2MgpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDozMDozM1rOG2NReQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MTI1Mw==", "bodyText": "couldn't we move the journal entries for delete here?", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r459481253", "createdAt": "2020-07-23T14:13:36Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.biz.protocol.JournalData;\n+import sirius.biz.protocol.Journaled;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.AfterDelete;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import javax.annotation.Nonnull;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")\n+    protected static Set<String> supportedLanguages;\n+\n+    @Transient\n+    @Part\n+    private static FieldLookupCache fieldLookupCache;\n+\n+    protected BasicTranslations(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Ensures that translations are cascaded-deleted upon deletion of the owner entity.\n+     */\n+    @AfterDelete\n+    protected abstract void removeTranslations();\n+\n+    /**\n+     * Provides a validator so translations can only be added for supported languages.\n+     *\n+     * @param lang the language code in question\n+     * @return true if language is supported by the system, false otherwise\n+     */\n+    protected boolean isSupportedLanguage(String lang) {\n+        return supportedLanguages.contains(lang);\n+    }\n+\n+    /**\n+     * Updates the translation for the given field and language, or adds a new translation if it does not exist.\n+     * <p>\n+     * Note that an existing translation is deleted when calling this with empty text.\n+     * <p>\n+     * Also note that this will emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     */\n+    public void updateText(@Nonnull Mapping field, String lang, String text) {\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b578a474dc63e32c21c396278d3c3463f4f5504"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5Mzc1Mw==", "bodyText": "The question is if deleting should only be allowed via updateText() with empty text, or rather via explicit calls to deleteText(). Currently, both options are supported so writing to the journal in deleteText() makes more sense.\nIt could be moved, if only one of the options should be publicly available", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r459493753", "createdAt": "2020-07-23T14:30:33Z", "author": {"login": "cschierle"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.biz.protocol.JournalData;\n+import sirius.biz.protocol.Journaled;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.AfterDelete;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import javax.annotation.Nonnull;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")\n+    protected static Set<String> supportedLanguages;\n+\n+    @Transient\n+    @Part\n+    private static FieldLookupCache fieldLookupCache;\n+\n+    protected BasicTranslations(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Ensures that translations are cascaded-deleted upon deletion of the owner entity.\n+     */\n+    @AfterDelete\n+    protected abstract void removeTranslations();\n+\n+    /**\n+     * Provides a validator so translations can only be added for supported languages.\n+     *\n+     * @param lang the language code in question\n+     * @return true if language is supported by the system, false otherwise\n+     */\n+    protected boolean isSupportedLanguage(String lang) {\n+        return supportedLanguages.contains(lang);\n+    }\n+\n+    /**\n+     * Updates the translation for the given field and language, or adds a new translation if it does not exist.\n+     * <p>\n+     * Note that an existing translation is deleted when calling this with empty text.\n+     * <p>\n+     * Also note that this will emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     */\n+    public void updateText(@Nonnull Mapping field, String lang, String text) {\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MTI1Mw=="}, "originalCommit": {"oid": "5b578a474dc63e32c21c396278d3c3463f4f5504"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzUzNDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxNDo1MFrOG2Mj0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDozNzowMVrOG2NkWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjA2Nw==", "bodyText": "shouldn't we also place a @AfterDelete handler here, which wipes all texts (without logging to the journal)?", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r459482067", "createdAt": "2020-07-23T14:14:50Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.biz.protocol.JournalData;\n+import sirius.biz.protocol.Journaled;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.AfterDelete;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import javax.annotation.Nonnull;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")\n+    protected static Set<String> supportedLanguages;\n+\n+    @Transient\n+    @Part\n+    private static FieldLookupCache fieldLookupCache;\n+\n+    protected BasicTranslations(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Ensures that translations are cascaded-deleted upon deletion of the owner entity.\n+     */\n+    @AfterDelete\n+    protected abstract void removeTranslations();\n+\n+    /**\n+     * Provides a validator so translations can only be added for supported languages.\n+     *\n+     * @param lang the language code in question\n+     * @return true if language is supported by the system, false otherwise\n+     */\n+    protected boolean isSupportedLanguage(String lang) {\n+        return supportedLanguages.contains(lang);\n+    }\n+\n+    /**\n+     * Updates the translation for the given field and language, or adds a new translation if it does not exist.\n+     * <p>\n+     * Note that an existing translation is deleted when calling this with empty text.\n+     * <p>\n+     * Also note that this will emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     */\n+    public void updateText(@Nonnull Mapping field, String lang, String text) {\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        T translation = findOrCreateTranslation(field, lang, text);\n+        translation.getTranslationData().setText(text);\n+        updateTranslation(translation);\n+\n+        if (owner instanceof Journaled) {\n+            JournalData.addJournalEntry(owner,\n+                                        String.format(\"Updated translated text for %s (%s): '%s'\",\n+                                                      field.getName(),\n+                                                      lang,\n+                                                      text));\n+        }\n+    }\n+\n+    /**\n+     * Forwards updates on the given translation entity to the database in use.\n+     *\n+     * @param translation the translation entity to update\n+     */\n+    protected abstract void updateTranslation(T translation);\n+\n+    /**\n+     * Deletes the translation for the given field and language.\n+     * <p>\n+     * Note that this will also emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  code of the language to be deleted\n+     */\n+    public abstract void deleteText(@Nonnull Mapping field, String lang);\n+\n+    /**\n+     * Deletes all translations for the given field.\n+     * <p>\n+     * Note that this will also emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     */\n+    public abstract void deleteAllTexts(@Nonnull Mapping field);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b578a474dc63e32c21c396278d3c3463f4f5504"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5NTMyNQ==", "bodyText": "the @AfterDelete is handled by removeTranslations()", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r459495325", "createdAt": "2020-07-23T14:32:40Z", "author": {"login": "cschierle"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.biz.protocol.JournalData;\n+import sirius.biz.protocol.Journaled;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.AfterDelete;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import javax.annotation.Nonnull;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")\n+    protected static Set<String> supportedLanguages;\n+\n+    @Transient\n+    @Part\n+    private static FieldLookupCache fieldLookupCache;\n+\n+    protected BasicTranslations(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Ensures that translations are cascaded-deleted upon deletion of the owner entity.\n+     */\n+    @AfterDelete\n+    protected abstract void removeTranslations();\n+\n+    /**\n+     * Provides a validator so translations can only be added for supported languages.\n+     *\n+     * @param lang the language code in question\n+     * @return true if language is supported by the system, false otherwise\n+     */\n+    protected boolean isSupportedLanguage(String lang) {\n+        return supportedLanguages.contains(lang);\n+    }\n+\n+    /**\n+     * Updates the translation for the given field and language, or adds a new translation if it does not exist.\n+     * <p>\n+     * Note that an existing translation is deleted when calling this with empty text.\n+     * <p>\n+     * Also note that this will emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     */\n+    public void updateText(@Nonnull Mapping field, String lang, String text) {\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        T translation = findOrCreateTranslation(field, lang, text);\n+        translation.getTranslationData().setText(text);\n+        updateTranslation(translation);\n+\n+        if (owner instanceof Journaled) {\n+            JournalData.addJournalEntry(owner,\n+                                        String.format(\"Updated translated text for %s (%s): '%s'\",\n+                                                      field.getName(),\n+                                                      lang,\n+                                                      text));\n+        }\n+    }\n+\n+    /**\n+     * Forwards updates on the given translation entity to the database in use.\n+     *\n+     * @param translation the translation entity to update\n+     */\n+    protected abstract void updateTranslation(T translation);\n+\n+    /**\n+     * Deletes the translation for the given field and language.\n+     * <p>\n+     * Note that this will also emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  code of the language to be deleted\n+     */\n+    public abstract void deleteText(@Nonnull Mapping field, String lang);\n+\n+    /**\n+     * Deletes all translations for the given field.\n+     * <p>\n+     * Note that this will also emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     */\n+    public abstract void deleteAllTexts(@Nonnull Mapping field);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjA2Nw=="}, "originalCommit": {"oid": "5b578a474dc63e32c21c396278d3c3463f4f5504"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5ODU4Ng==", "bodyText": "nvm - totally didn't see that...", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r459498586", "createdAt": "2020-07-23T14:37:01Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/BasicTranslations.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations;\n+\n+import sirius.biz.protocol.JournalData;\n+import sirius.biz.protocol.Journaled;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.FieldLookupCache;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.AfterDelete;\n+import sirius.db.mixing.annotations.Transient;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+\n+import javax.annotation.Nonnull;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Provides database independent specifications for functionality to access and edit translations for an entity.\n+ *\n+ * @param <T> the translation entity type used by a concrete subclass\n+ */\n+public abstract class BasicTranslations<T extends BaseEntity<?> & Translation> extends Composite {\n+\n+    @Transient\n+    protected BaseEntity<?> owner;\n+\n+    @Transient\n+    @ConfigValue(\"mixing.multiLanguageStrings.supportedLanguages\")\n+    protected static Set<String> supportedLanguages;\n+\n+    @Transient\n+    @Part\n+    private static FieldLookupCache fieldLookupCache;\n+\n+    protected BasicTranslations(BaseEntity<?> owner) {\n+        this.owner = owner;\n+    }\n+\n+    /**\n+     * Ensures that translations are cascaded-deleted upon deletion of the owner entity.\n+     */\n+    @AfterDelete\n+    protected abstract void removeTranslations();\n+\n+    /**\n+     * Provides a validator so translations can only be added for supported languages.\n+     *\n+     * @param lang the language code in question\n+     * @return true if language is supported by the system, false otherwise\n+     */\n+    protected boolean isSupportedLanguage(String lang) {\n+        return supportedLanguages.contains(lang);\n+    }\n+\n+    /**\n+     * Updates the translation for the given field and language, or adds a new translation if it does not exist.\n+     * <p>\n+     * Note that an existing translation is deleted when calling this with empty text.\n+     * <p>\n+     * Also note that this will emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  language code\n+     * @param text  translated text for the given language\n+     */\n+    public void updateText(@Nonnull Mapping field, String lang, String text) {\n+        if (Strings.isEmpty(text)) {\n+            deleteText(field, lang);\n+            return;\n+        }\n+\n+        T translation = findOrCreateTranslation(field, lang, text);\n+        translation.getTranslationData().setText(text);\n+        updateTranslation(translation);\n+\n+        if (owner instanceof Journaled) {\n+            JournalData.addJournalEntry(owner,\n+                                        String.format(\"Updated translated text for %s (%s): '%s'\",\n+                                                      field.getName(),\n+                                                      lang,\n+                                                      text));\n+        }\n+    }\n+\n+    /**\n+     * Forwards updates on the given translation entity to the database in use.\n+     *\n+     * @param translation the translation entity to update\n+     */\n+    protected abstract void updateTranslation(T translation);\n+\n+    /**\n+     * Deletes the translation for the given field and language.\n+     * <p>\n+     * Note that this will also emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     * @param lang  code of the language to be deleted\n+     */\n+    public abstract void deleteText(@Nonnull Mapping field, String lang);\n+\n+    /**\n+     * Deletes all translations for the given field.\n+     * <p>\n+     * Note that this will also emit an {@link sirius.biz.protocol.JournalEntry} to\n+     * {@link sirius.biz.protocol.Journaled} owners keeping track of the changes made to their translations.\n+     *\n+     * @param field {@link Mapping} of the translated field\n+     */\n+    public abstract void deleteAllTexts(@Nonnull Mapping field);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MjA2Nw=="}, "originalCommit": {"oid": "5b578a474dc63e32c21c396278d3c3463f4f5504"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzU0MjA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxNjoyNFrOG2MouQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxNjoyNFrOG2MouQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MzMyMQ==", "bodyText": "coundn' t we use mongo.delete().eq....eq...().executeFor(...) here?", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r459483321", "createdAt": "2020-07-23T14:16:24Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.protocol.JournalData;\n+import sirius.biz.protocol.Journaled;\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class)\n+             .eq(Translation.TRANSLATION_DATA.inner(TranslationData.OWNER), owner.getUniqueName())\n+             .delete();\n+    }\n+\n+    @Override\n+    protected void updateTranslation(MongoTranslation translation) {\n+        mango.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(@Nonnull Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(mongoTranslation -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b578a474dc63e32c21c396278d3c3463f4f5504"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzU0MjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxNjozM1rOG2MpJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNDoxNjozM1rOG2MpJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ4MzQzMQ==", "bodyText": "s.a.", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r459483431", "createdAt": "2020-07-23T14:16:33Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.protocol.JournalData;\n+import sirius.biz.protocol.Journaled;\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class)\n+             .eq(Translation.TRANSLATION_DATA.inner(TranslationData.OWNER), owner.getUniqueName())\n+             .delete();\n+    }\n+\n+    @Override\n+    protected void updateTranslation(MongoTranslation translation) {\n+        mango.update(translation);\n+    }\n+\n+    @Override\n+    public void deleteText(@Nonnull Mapping field, String lang) {\n+        fetchTranslation(field, lang).ifPresent(mongoTranslation -> {\n+            mango.delete(mongoTranslation);\n+            if (owner instanceof Journaled) {\n+                JournalData.addJournalEntry(owner,\n+                                            \"Deleted translated text for \" + field.getName() + \" (\" + lang + \")\");\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void deleteAllTexts(@Nonnull Mapping field) {\n+        for (MongoTranslation translation : fetchAllTranslations(field)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b578a474dc63e32c21c396278d3c3463f4f5504"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzI5NjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowMDo0NFrOG3jzTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowMDo0NFrOG3jzTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxMTQzNg==", "bodyText": "mongo.delete^^", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r460911436", "createdAt": "2020-07-27T14:00:44Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/mongo/MongoTranslations.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.mongo;\n+\n+import sirius.biz.protocol.JournalData;\n+import sirius.biz.protocol.Journaled;\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mongo.Mongo;\n+import sirius.kernel.di.std.Part;\n+\n+import javax.annotation.Nonnull;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying MongoDB.\n+ */\n+public class MongoTranslations extends BasicTranslations<MongoTranslation> {\n+\n+    public MongoTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Part\n+    private static Mongo mongo;\n+\n+    @Override\n+    protected void removeTranslations() {\n+        mango.select(MongoTranslation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "204e0a534f8f9066a9d0f36ee8ed7a1c82dcf72d"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzI5OTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowMToyN1rOG3j1GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowMToyN1rOG3j1GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxMTg5Ng==", "bodyText": "oma.deleteStatement", "url": "https://github.com/scireum/sirius-biz/pull/808#discussion_r460911896", "createdAt": "2020-07-27T14:01:27Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/translations/jdbc/SQLTranslations.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.translations.jdbc;\n+\n+import sirius.biz.protocol.JournalData;\n+import sirius.biz.protocol.Journaled;\n+import sirius.biz.translations.BasicTranslations;\n+import sirius.biz.translations.Translation;\n+import sirius.biz.translations.TranslationData;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.Mixing;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nonnull;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Stores translations into the appropriate collections of the underlying JDBC database.\n+ */\n+public class SQLTranslations extends BasicTranslations<SQLTranslation> {\n+\n+    public SQLTranslations(BaseEntity<?> owner) {\n+        super(owner);\n+    }\n+\n+    @Override\n+    protected void removeTranslations() {\n+        oma.select(SQLTranslation.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "204e0a534f8f9066a9d0f36ee8ed7a1c82dcf72d"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1956, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}