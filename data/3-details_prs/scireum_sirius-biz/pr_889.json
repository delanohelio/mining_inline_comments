{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MzA1MDU5", "number": 889, "title": "Tycho: Video Academies", "bodyText": "", "createdAt": "2020-10-22T13:47:07Z", "url": "https://github.com/scireum/sirius-biz/pull/889", "merged": true, "mergeCommit": {"oid": "6192f5917860bbfd4d4c1a36ce51abac9c6cd136"}, "closed": true, "closedAt": "2021-07-02T08:36:58Z", "author": {"login": "andyHa"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVCAWLAH2gAyNTA4MzA1MDU5OmM5YjM4ZDM0MmIxN2U1ODM5OTk4NTVjYjlmNWE0OTAzODhlZTViNTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABemZc0ggH2gAyNTA4MzA1MDU5OjQ2OGZlZWY3NTA1YTZlNGMyNmI0ZTRmOWMxNjM3OTdjNTkwOWI4ODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c9b38d342b17e583999855cb9f5a490388ee5b51", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/c9b38d342b17e583999855cb9f5a490388ee5b51", "committedDate": "2020-10-22T13:29:50Z", "message": "Provides an initial implementation of the Video Academies."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MjA3Njc2", "url": "https://github.com/scireum/sirius-biz/pull/889#pullrequestreview-556207676", "createdAt": "2020-12-21T08:32:52Z", "commit": {"oid": "c9b38d342b17e583999855cb9f5a490388ee5b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODozMjo1M1rOIJQJuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwODozMjo1M1rOIJQJuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjU3MjcyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String PRESONSE_ID = \"id\";\n          \n          \n            \n                private static final String RESPONSE_ID = \"id\";", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r546572728", "createdAt": "2020-12-21T08:32:53Z", "author": {"login": "ymo-sci"}, "path": "src/main/java/sirius/biz/tycho/academy/OnboardingController.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.biz.web.BizController;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+@Register\n+public class OnboardingController extends BizController {\n+\n+    private static final String RESPONSE_FOUND = \"found\";\n+    private static final String PRESONSE_ID = \"id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b38d342b17e583999855cb9f5a490388ee5b51"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bf0ef531c3604129013158c5deafeec82cce9fb", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/1bf0ef531c3604129013158c5deafeec82cce9fb", "committedDate": "2021-06-14T08:53:41Z", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-academies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "371c8dfb56449a2f131fde9a800c7580b5a0be21", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/371c8dfb56449a2f131fde9a800c7580b5a0be21", "committedDate": "2021-06-20T20:23:14Z", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-academies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30e81a35c247dda987d3184d8d0972b2cdd32c4d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/30e81a35c247dda987d3184d8d0972b2cdd32c4d", "committedDate": "2021-06-21T07:51:20Z", "message": "Provides some JavaDocs and code cleanups."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c32c8a03dc62429ae292c7b4c840c740658bb3f", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/0c32c8a03dc62429ae292c7b4c840c740658bb3f", "committedDate": "2021-06-14T14:38:11Z", "message": "TMPCMT"}, "afterCommit": {"oid": "30e81a35c247dda987d3184d8d0972b2cdd32c4d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/30e81a35c247dda987d3184d8d0972b2cdd32c4d", "committedDate": "2021-06-21T07:51:20Z", "message": "Provides some JavaDocs and code cleanups."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9b6ab0119150c133cb6a26992eb75585c2b6d3d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/d9b6ab0119150c133cb6a26992eb75585c2b6d3d", "committedDate": "2021-06-21T19:35:08Z", "message": "Updates to the latest sirius dependencies."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ceea319f35edc3c3a53b6ce4d94f07603b616d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/f3ceea319f35edc3c3a53b6ce4d94f07603b616d", "committedDate": "2021-06-21T19:35:37Z", "message": "Improves code style and JavaDocs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c5ae425b8e8d8a832b3fe9b20f240e3869f11f3", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/7c5ae425b8e8d8a832b3fe9b20f240e3869f11f3", "committedDate": "2021-06-21T19:35:51Z", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-academies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adc70f2692b9a999037be3bb6b7b2e57261ab033", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/adc70f2692b9a999037be3bb6b7b2e57261ab033", "committedDate": "2021-06-29T13:53:42Z", "message": "Provides the initial implementation of the onboarding/video academy framework."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5db6d207a0d9dcde0c8e6a89809e00c3d80a30d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/d5db6d207a0d9dcde0c8e6a89809e00c3d80a30d", "committedDate": "2021-06-29T13:54:53Z", "message": "Fixes some typos."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7a7d46cd9aab7b8832db867c6133744828c3860", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/c7a7d46cd9aab7b8832db867c6133744828c3860", "committedDate": "2021-06-29T13:55:47Z", "message": "Simplifies template code by using a macro."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b2caf8fa464c56aed3164a068c651f36ad51179", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/0b2caf8fa464c56aed3164a068c651f36ad51179", "committedDate": "2021-06-29T13:58:58Z", "message": "Permits to disable analytical tasks entirely."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e387f6c60e5977daca5c14b95cee37f66caba8", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/b0e387f6c60e5977daca5c14b95cee37f66caba8", "committedDate": "2021-06-29T13:59:14Z", "message": "Performs a Java 16 modernization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce6fe5565b51ef695432985bc4a459998232ce48", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/ce6fe5565b51ef695432985bc4a459998232ce48", "committedDate": "2021-06-29T14:01:37Z", "message": "Provides video academies for backend users."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dcd591448d0b309f56f76b5f15fb5c5fd9e4a95", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/2dcd591448d0b309f56f76b5f15fb5c5fd9e4a95", "committedDate": "2021-06-29T14:01:56Z", "message": "Enables SQL video academies by default (for debug builds)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc9de9e471ee136545e2643d44642f585144d1a7", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/bc9de9e471ee136545e2643d44642f585144d1a7", "committedDate": "2021-06-29T14:04:19Z", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-academies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/b87520f58e740cc32800fdf76174cd74f5bb1db8", "committedDate": "2021-06-29T14:32:04Z", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-academies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk1NzM3NDIw", "url": "https://github.com/scireum/sirius-biz/pull/889#pullrequestreview-695737420", "createdAt": "2021-06-30T06:25:52Z", "commit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0zMFQwNjoyNTo1MlrOJ2iTtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0zMFQwNjo0Nzo1M1rOJ2jBvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE2NDk4MA==", "bodyText": "Javadoc?", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661164980", "createdAt": "2021-06-30T06:25:52Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/checkups/Checkup.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.checkups;\n+\n+import sirius.biz.analytics.checks.DailyCheck;\n+import sirius.biz.analytics.flags.ExecutionFlags;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.kernel.di.std.Part;\n+\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.Period;\n+\n+public abstract class Checkup<E extends BaseEntity<?>> extends DailyCheck<E> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE2NTY2Nw==", "bodyText": "JavaDoc?", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661165667", "createdAt": "2021-06-30T06:27:13Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tenants/UserAccountVideosCheck.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tenants;\n+\n+import sirius.biz.tycho.academy.RecomputeOnboardingVideosCheck;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.ConfigValue;\n+import sirius.kernel.di.std.Part;\n+import sirius.web.controller.SubScope;\n+\n+import javax.annotation.Nullable;\n+import java.io.Serializable;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+public abstract class UserAccountVideosCheck<I extends Serializable, T extends BaseEntity<I> & Tenant<I>, U extends BaseEntity<I> & UserAccount<I, T>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE2NzEyMg==", "bodyText": "Why is this mapping removed? This is actually used quite a lot in OX", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661167122", "createdAt": "2021-06-30T06:30:01Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tenants/mongo/MongoUserAccount.java", "diffHunk": "@@ -47,15 +48,10 @@\n     @Nullable\n     private static MongoTenants tenants;\n \n-    public static final Mapping USER_ACCOUNT_DATA = Mapping.named(\"userAccountData\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE2NzY0Nw==", "bodyText": "Javadoc?", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661167647", "createdAt": "2021-06-30T06:31:04Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/AcademyTrackInfo.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.kernel.commons.Strings;\n+\n+/**\n+ * Represents a track (collection of associated videos) which the {@link OnboardingEngine} provides for a participant.\n+ */\n+public class AcademyTrackInfo {\n+\n+    private final String trackId;\n+    private final String trackName;\n+    private final String trackDescription;\n+    private int numberOfVideos;\n+    private int numberOfRecommendedVideos;\n+    private int totalDuration;\n+\n+    /**\n+     * Creates a new track based on the given data.\n+     *\n+     * @param trackId          contains the internal id used for filtering\n+     * @param trackName        contains the name of the track which is shown to the user\n+     * @param trackDescription contains the description of the track\n+     */\n+    public AcademyTrackInfo(String trackId, String trackName, String trackDescription) {\n+        this.trackId = trackId;\n+        this.trackName = trackName;\n+        this.trackDescription = trackDescription;\n+    }\n+\n+    public void incRecommendedVideos() {\n+        numberOfRecommendedVideos++;\n+    }\n+\n+    public void incVideos() {\n+        numberOfVideos++;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE2NzgyNA==", "bodyText": "Move up to the other inc Methods and Javadoc", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661167824", "createdAt": "2021-06-30T06:31:24Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/AcademyTrackInfo.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.kernel.commons.Strings;\n+\n+/**\n+ * Represents a track (collection of associated videos) which the {@link OnboardingEngine} provides for a participant.\n+ */\n+public class AcademyTrackInfo {\n+\n+    private final String trackId;\n+    private final String trackName;\n+    private final String trackDescription;\n+    private int numberOfVideos;\n+    private int numberOfRecommendedVideos;\n+    private int totalDuration;\n+\n+    /**\n+     * Creates a new track based on the given data.\n+     *\n+     * @param trackId          contains the internal id used for filtering\n+     * @param trackName        contains the name of the track which is shown to the user\n+     * @param trackDescription contains the description of the track\n+     */\n+    public AcademyTrackInfo(String trackId, String trackName, String trackDescription) {\n+        this.trackId = trackId;\n+        this.trackName = trackName;\n+        this.trackDescription = trackDescription;\n+    }\n+\n+    public void incRecommendedVideos() {\n+        numberOfRecommendedVideos++;\n+    }\n+\n+    public void incVideos() {\n+        numberOfVideos++;\n+    }\n+\n+    public String getTrackId() {\n+        return trackId;\n+    }\n+\n+    public String getTrackName() {\n+        return trackName;\n+    }\n+\n+    public String getTrackDescription() {\n+        return trackDescription;\n+    }\n+\n+    public int getNumberOfVideos() {\n+        return numberOfVideos;\n+    }\n+\n+    public int getNumberOfRecommendedVideos() {\n+        return numberOfRecommendedVideos;\n+    }\n+\n+    public void incDuration(int duration) {\n+        this.totalDuration += duration;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE2ODM5OA==", "bodyText": "Questionable if this should be a Getter by name. I would prefer something like generateDurationText for example.", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661168398", "createdAt": "2021-06-30T06:32:29Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/AcademyTrackInfo.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.kernel.commons.Strings;\n+\n+/**\n+ * Represents a track (collection of associated videos) which the {@link OnboardingEngine} provides for a participant.\n+ */\n+public class AcademyTrackInfo {\n+\n+    private final String trackId;\n+    private final String trackName;\n+    private final String trackDescription;\n+    private int numberOfVideos;\n+    private int numberOfRecommendedVideos;\n+    private int totalDuration;\n+\n+    /**\n+     * Creates a new track based on the given data.\n+     *\n+     * @param trackId          contains the internal id used for filtering\n+     * @param trackName        contains the name of the track which is shown to the user\n+     * @param trackDescription contains the description of the track\n+     */\n+    public AcademyTrackInfo(String trackId, String trackName, String trackDescription) {\n+        this.trackId = trackId;\n+        this.trackName = trackName;\n+        this.trackDescription = trackDescription;\n+    }\n+\n+    public void incRecommendedVideos() {\n+        numberOfRecommendedVideos++;\n+    }\n+\n+    public void incVideos() {\n+        numberOfVideos++;\n+    }\n+\n+    public String getTrackId() {\n+        return trackId;\n+    }\n+\n+    public String getTrackName() {\n+        return trackName;\n+    }\n+\n+    public String getTrackDescription() {\n+        return trackDescription;\n+    }\n+\n+    public int getNumberOfVideos() {\n+        return numberOfVideos;\n+    }\n+\n+    public int getNumberOfRecommendedVideos() {\n+        return numberOfRecommendedVideos;\n+    }\n+\n+    public void incDuration(int duration) {\n+        this.totalDuration += duration;\n+    }\n+\n+    public int getTotalDuration() {\n+        return totalDuration;\n+    }\n+\n+    public String getTotalDurationAsString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE2ODcxNg==", "bodyText": "Remove empty line", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661168716", "createdAt": "2021-06-30T06:33:10Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/AcademyVideo.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.db.mixing.Mapping;\n+\n+/**\n+ * Represents a video which is part of a video academy managed by the {@link OnboardingEngine}.\n+ * <p>\n+ * Note that an <tt>AcademyVideo</tt> provides the metadata of a video to show and gets multiplied into many\n+ * {@link OnboardingVideo onboarding videos} - one for each participant.\n+ */\n+public interface AcademyVideo {\n+\n+    /**\n+     * Contains the database independent metadata of the video.\n+     */\n+    Mapping ACADEMY_VIDEO_DATA = Mapping.named(\"academyVideoData\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE2OTU4MQ==", "bodyText": "s.o.", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661169581", "createdAt": "2021-06-30T06:34:50Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/AcademyVideoData.java", "diffHunk": "@@ -0,0 +1,309 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.db.mixing.Composite;\n+import sirius.db.mixing.Mapping;\n+import sirius.db.mixing.annotations.Length;\n+import sirius.db.mixing.annotations.Lob;\n+import sirius.db.mixing.annotations.NullAllowed;\n+import sirius.kernel.commons.Strings;\n+\n+import java.time.LocalDateTime;\n+\n+/**\n+ * Describes the metadata of an academy video.\n+ */\n+public class AcademyVideoData extends Composite {\n+\n+    /**\n+     * Contains the academy this video belongs to.\n+     */\n+    public static final Mapping ACADEMY = Mapping.named(\"academy\");\n+    @Length(150)\n+    private String academy;\n+\n+    /**\n+     * Contains a random token to detect outdated videos after a sync.\n+     */\n+    public static final Mapping SYNC_TOKEN = Mapping.named(\"syncToken\");\n+    @Length(50)\n+    private String syncToken;\n+\n+    /**\n+     * Contains the internal video id.\n+     */\n+    public static final Mapping VIDEO_ID = Mapping.named(\"videoId\");\n+    @Length(50)\n+    private String videoId;\n+\n+    /**\n+     * Contains the track id, this video is part of.\n+     */\n+    public static final Mapping TRACK_ID = Mapping.named(\"trackId\");\n+    @Length(50)\n+    private String trackId;\n+\n+    /**\n+     * Contains the name of the track to which this video belongs.\n+     */\n+    public static final Mapping TRACK_NAME = Mapping.named(\"trackName\");\n+    @Length(255)\n+    private String trackName;\n+\n+    /**\n+     * Contains the description of the track to which this video belongs.\n+     */\n+    public static final Mapping TRACK_DESCRIPTION = Mapping.named(\"trackDescription\");\n+    @Lob\n+    @NullAllowed\n+    private String trackDescription;\n+\n+    /**\n+     * Contains the title of this video.\n+     */\n+    public static final Mapping TITLE = Mapping.named(\"title\");\n+    @Length(255)\n+    private String title;\n+\n+    /**\n+     * Contains the URL to the preview image of this video.\n+     */\n+    public static final Mapping PREVIEW_URL = Mapping.named(\"previewUrl\");\n+    @Length(512)\n+    private String previewUrl;\n+\n+    /**\n+     * Contains a short and concise description of the video.\n+     */\n+    public static final Mapping DESCRIPTION = Mapping.named(\"description\");\n+    @Lob\n+    @NullAllowed\n+    private String description;\n+\n+    /**\n+     * Contains the video duration in seconds.\n+     */\n+    public static final Mapping DURATION = Mapping.named(\"duration\");\n+    private int duration;\n+\n+    /**\n+     * Contains the sort priority of the video.\n+     */\n+    public static final Mapping PRIORITY = Mapping.named(\"priority\");\n+    private int priority;\n+\n+    /**\n+     * Contains the feature required to view this video.\n+     */\n+    public static final Mapping REQUIRED_FEATURE = Mapping.named(\"requiredFeature\");\n+    @Length(255)\n+    @NullAllowed\n+    private String requiredFeature;\n+\n+    /**\n+     * Contains the permission required to view this video.\n+     */\n+    public static final Mapping REQUIRED_PERMISSION = Mapping.named(\"requiredPermission\");\n+    @Length(255)\n+    @NullAllowed\n+    private String requiredPermission;\n+\n+    /**\n+     * Determines if this is a mandatory (recommended) video or if it is optional.\n+     */\n+    public static final Mapping MANDATORY = Mapping.named(\"mandatory\");\n+    private boolean mandatory;\n+\n+    /**\n+     * Stores when this video was first imported/created.\n+     */\n+    public static final Mapping CREATED = Mapping.named(\"created\");\n+    private LocalDateTime created;\n+\n+    /**\n+     * Stores when this video was last changed.\n+     */\n+    public static final Mapping LAST_UPDATED = Mapping.named(\"lastUpdated\");\n+    private LocalDateTime lastUpdated;\n+\n+    /**\n+     * Marks if the video has been deleted from the academy.\n+     * <p>\n+     * We still keep deleted videos around to not loose any statistics.\n+     */\n+    public static final Mapping DELETED = Mapping.named(\"deleted\");\n+    private boolean deleted = false;\n+\n+    /**\n+     * Copies all data from the given object.\n+     *\n+     * @param other the object to copy all data from\n+     */\n+    public void loadFrom(AcademyVideoData other) {\n+        this.academy = other.academy;\n+        this.videoId = other.videoId;\n+        this.trackId = other.trackId;\n+        this.trackName = other.trackName;\n+        this.trackDescription = other.trackDescription;\n+        this.title = other.title;\n+        this.description = other.description;\n+        this.previewUrl = other.previewUrl;\n+        this.duration = other.duration;\n+        this.priority = other.priority;\n+        this.requiredFeature = other.requiredFeature;\n+        this.requiredPermission = other.requiredPermission;\n+        this.mandatory = other.mandatory;\n+        this.deleted = other.deleted;\n+        this.syncToken = other.syncToken;\n+    }\n+\n+    public String getDurationAsString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE3MDIxMQ==", "bodyText": "Should this be bound to the framework?", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661170211", "createdAt": "2021-06-30T06:36:01Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/OXOMIAcademyProvider.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.kernel.commons.Hasher;\n+import sirius.kernel.commons.URLBuilder;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.settings.Extension;\n+import sirius.kernel.xml.StructuredNode;\n+import sirius.kernel.xml.XMLCall;\n+\n+import javax.annotation.Nonnull;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides {@link AcademyVideoData academy videos} by loading them from OXOMI.\n+ */\n+@Register", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE3MDg5OQ==", "bodyText": "This will give a nullpointer. Some lines above is an extra check against onboardingEngine being null so its expected that it can be null?", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661170899", "createdAt": "2021-06-30T06:37:12Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/OnboardingController.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.biz.web.BizController;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.settings.Extension;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.services.InternalService;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Provides the UI for the onboarding / video academy framework.\n+ */\n+@Register\n+public class OnboardingController extends BizController {\n+\n+    private static final String PARAM_SEEN_IN_PERCENT = \"seenInPercent\";\n+    private static final String PARAM_STARTED = \"started\";\n+    private static final String PARAM_SKIP = \"skip\";\n+\n+    @Part\n+    @Nullable\n+    private OnboardingEngine onboardingEngine;\n+\n+    /**\n+     * Renders an overview of the available track of the video academy for the given owner.\n+     *\n+     * @param webContext  the request to respond to\n+     * @param target      the target entity\n+     * @param accessToken the security token to authenticate the target\n+     */\n+    @Routed(value = \"/academy/:1/:2\", priority = 999)\n+    public void academy(WebContext webContext, String target, String accessToken) {\n+        if (!verifyURISignature(webContext, target, accessToken)) {\n+            return;\n+        }\n+\n+        webContext.respondWith()\n+                  .template(\"/templates/biz/tycho/academy/tracks.html.pasta\",\n+                            onboardingEngine != null ? onboardingEngine.fetchTracks(target) : Collections.emptyList(),\n+                            target,\n+                            computeURISignature(target),\n+                            onboardingEngine.fetchSomeVideo(target).orElse(null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE3MDk5OA==", "bodyText": "Should this be bound to the framework?", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661170998", "createdAt": "2021-06-30T06:37:23Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/OnboardingController.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.biz.web.BizController;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.settings.Extension;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.services.InternalService;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Provides the UI for the onboarding / video academy framework.\n+ */\n+@Register", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE3MTEzNA==", "bodyText": "Optional: Link the onboarding / academy class", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661171134", "createdAt": "2021-06-30T06:37:40Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/OnboardingController.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.biz.web.BizController;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.settings.Extension;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.services.InternalService;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Provides the UI for the onboarding / video academy framework.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE3MjcwMw==", "bodyText": "Why is this class a mixture of all possible ways to handle when onboardingEngine is null? Some routes handle it gracefully with default/fallback values, some assert and fail and some just do nothing. Can this be cleaned up a bit?", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661172703", "createdAt": "2021-06-30T06:40:31Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/OnboardingController.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.biz.web.BizController;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.settings.Extension;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.services.InternalService;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import javax.annotation.Nullable;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Provides the UI for the onboarding / video academy framework.\n+ */\n+@Register\n+public class OnboardingController extends BizController {\n+\n+    private static final String PARAM_SEEN_IN_PERCENT = \"seenInPercent\";\n+    private static final String PARAM_STARTED = \"started\";\n+    private static final String PARAM_SKIP = \"skip\";\n+\n+    @Part\n+    @Nullable\n+    private OnboardingEngine onboardingEngine;\n+\n+    /**\n+     * Renders an overview of the available track of the video academy for the given owner.\n+     *\n+     * @param webContext  the request to respond to\n+     * @param target      the target entity\n+     * @param accessToken the security token to authenticate the target\n+     */\n+    @Routed(value = \"/academy/:1/:2\", priority = 999)\n+    public void academy(WebContext webContext, String target, String accessToken) {\n+        if (!verifyURISignature(webContext, target, accessToken)) {\n+            return;\n+        }\n+\n+        webContext.respondWith()\n+                  .template(\"/templates/biz/tycho/academy/tracks.html.pasta\",\n+                            onboardingEngine != null ? onboardingEngine.fetchTracks(target) : Collections.emptyList(),\n+                            target,\n+                            computeURISignature(target),\n+                            onboardingEngine.fetchSomeVideo(target).orElse(null));\n+    }\n+\n+    /**\n+     * Lists all videos fo the given track.\n+     *\n+     * @param webContext  the request to respond to\n+     * @param target      the target entity\n+     * @param accessToken the security token to authenticate the target\n+     * @param track       the track to list the videos for\n+     */\n+    @Routed(value = \"/academy/:1/:2/track/:3\", priority = 999)\n+    public void track(WebContext webContext, String target, String accessToken, String track) {\n+        if (!verifyURISignature(webContext, target, accessToken)) {\n+            return;\n+        }\n+\n+        AcademyTrackInfo trackInfo =\n+                onboardingEngine != null ? onboardingEngine.fetchTrack(target, track).orElse(null) : null;\n+        assertNotNull(trackInfo);\n+\n+        List<? extends OnboardingVideo> videos =\n+                onboardingEngine != null ? onboardingEngine.fetchVideos(target, track) : Collections.emptyList();\n+\n+        webContext.respondWith()\n+                  .template(\"/templates/biz/tycho/academy/track.html.pasta\",\n+                            videos,\n+                            trackInfo,\n+                            target,\n+                            computeURISignature(target));\n+    }\n+\n+    /**\n+     * Displays the requested video\n+     *\n+     * @param webContext  the request to respond to\n+     * @param target      the target entity\n+     * @param accessToken the security token to authenticate the target\n+     * @param videoId     the id of the video to show\n+     */\n+    @Routed(value = \"/academy/:1/:2/video/:3\", priority = 999)\n+    public void video(WebContext webContext, String target, String accessToken, String videoId) {\n+        if (!verifyURISignature(webContext, target, accessToken)) {\n+            return;\n+        }\n+\n+        assertNotNull(onboardingEngine);\n+\n+        OnboardingVideo video = onboardingEngine.fetchVideo(target, videoId);\n+        assertNotNull(video);\n+\n+        List<? extends OnboardingVideo> otherRecommendations =\n+                onboardingEngine.fetchOtherRecommendations(target, videoId, video.fetchAcademyVideoData().getTrackId());\n+\n+        Tuple<Extension, AcademyProvider> settings =\n+                onboardingEngine.fetchAcademySettings(video.fetchAcademyVideoData().getAcademy());\n+\n+        webContext.respondWith()\n+                  .template(\"/templates/biz/tycho/academy/video.html.pasta\",\n+                            video,\n+                            otherRecommendations,\n+                            target,\n+                            accessToken,\n+                            settings.getFirst(),\n+                            settings.getSecond());\n+    }\n+\n+    /**\n+     * Provides a JSON API to update the statistics which record which video has been viewed or skipped.\n+     *\n+     * @param webContext  the request to respond to\n+     * @param out         the JSON response\n+     * @param target      the target entity\n+     * @param accessToken the security token to authenticate the target\n+     * @param videoId     the id of the onboarding video to update\n+     */\n+    @Routed(value = \"/academy/:1/:2/update/:3\", priority = 999)\n+    @InternalService\n+    public void updateVideo(WebContext webContext,\n+                            JSONStructuredOutput out,\n+                            String target,\n+                            String accessToken,\n+                            String videoId) {\n+        if (!verifyURISignature(webContext, target, accessToken)) {\n+            return;\n+        }\n+        if (onboardingEngine == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE3MzI5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Manages{@link OnboardingVideo onboarding videos} and {@link AcademyVideo academy videos}.\n          \n          \n            \n             * Manages {@link OnboardingVideo onboarding videos} and {@link AcademyVideo academy videos}.", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661173290", "createdAt": "2021-06-30T06:41:34Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/OnboardingEngine.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.biz.analytics.flags.ExecutionFlags;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.cache.Cache;\n+import sirius.kernel.cache.CacheManager;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.di.GlobalContext;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.settings.Extension;\n+\n+import javax.annotation.Nullable;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.Period;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Manages{@link OnboardingVideo onboarding videos} and {@link AcademyVideo academy videos}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE3NDY0NA==", "bodyText": "Can we move the public API of the class to the top of provided methods?\nSo:\n\npublic\nprotected\nprivate\n\nOr are there good points that speak against this order in general? Just curious", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661174644", "createdAt": "2021-06-30T06:43:50Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/OnboardingEngine.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.biz.analytics.flags.ExecutionFlags;\n+import sirius.kernel.Sirius;\n+import sirius.kernel.cache.Cache;\n+import sirius.kernel.cache.CacheManager;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Tuple;\n+import sirius.kernel.di.GlobalContext;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.health.Log;\n+import sirius.kernel.settings.Extension;\n+\n+import javax.annotation.Nullable;\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.Period;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Manages{@link OnboardingVideo onboarding videos} and {@link AcademyVideo academy videos}.\n+ * <p>\n+ * Note that this is actually entity agnostic. The target entities are determined by subclassing\n+ * {@link RecomputeOnboardingVideosCheck}.\n+ */\n+public abstract class OnboardingEngine {\n+\n+    private static final String ACADEMY_VIDEOS_FETCHED_FLAG = \"fetched\";\n+    private static final Duration ACADEMY_VIDEO_REFRESH_INTERVAL = Duration.ofHours(23);\n+\n+    protected static final int NUMBER_OF_VIDEOS_TO_RECOMMEND = 4;\n+    protected static final int MIN_PERCENT_TO_CONSIDER_VIDEO_WATCHED = 40;\n+\n+    @Part\n+    private ExecutionFlags executionFlags;\n+\n+    @Part\n+    private GlobalContext context;\n+\n+    private final Cache<String, AcademyVideo> academyVideoCache = CacheManager.createLocalCache(\"tycho-academy-videos\");\n+\n+    /**\n+     * Fetches the list of available academy videos for the given academy.\n+     * <p>\n+     * Note that the list of videos might be persisted for a certain amount of time.\n+     *\n+     * @param academy the academy to fetch videos for\n+     * @return the list of videos in the given academy\n+     */\n+    protected List<? extends AcademyVideo> fetchAcademyVideos(String academy) {\n+        String executionFlag = \"_ONBOARDING-\" + academy;\n+        Duration refreshInterval = Sirius.isDev() ? Duration.ofSeconds(30) : ACADEMY_VIDEO_REFRESH_INTERVAL;\n+        if (!executionFlags.wasExecuted(executionFlag, ACADEMY_VIDEOS_FETCHED_FLAG, refreshInterval)) {\n+            try {\n+                loadVideosForAcademy(academy);\n+                executionFlags.storeExecutionFlag(executionFlag,\n+                                                  ACADEMY_VIDEOS_FETCHED_FLAG,\n+                                                  LocalDateTime.now(),\n+                                                  Period.ofDays(2));\n+            } catch (Exception e) {\n+                Exceptions.handle(Log.BACKGROUND, e);\n+            }\n+        }\n+\n+        return queryAcademyVideos(academy);\n+    }\n+\n+    private void loadVideosForAcademy(String academy) throws Exception {\n+        try {\n+            String syncToken = Strings.generateCode(32);\n+            Tuple<Extension, AcademyProvider> settings = fetchAcademySettings(academy);\n+            settings.getSecond().fetchVideos(academy, settings.getFirst(), video -> {\n+                video.setAcademy(academy);\n+                video.setSyncToken(syncToken);\n+                persistAcademyVideo(video);\n+            });\n+            markOutdatedAcademyVideosAsDeleted(academy, syncToken);\n+        } finally {\n+            academyVideoCache.clear();\n+        }\n+    }\n+\n+    /**\n+     * Fetches the settings for the given academy.\n+     *\n+     * @param academy the name of the academy to fetch the settings for\n+     * @return the settings and the provider of the given academy\n+     */\n+    public Tuple<Extension, AcademyProvider> fetchAcademySettings(String academy) {\n+        Extension settings = Sirius.getSettings().getExtension(\"tycho.onboarding.academies\", academy);\n+        return Tuple.create(settings, context.findPart(settings.require(\"provider\").asString(), AcademyProvider.class));\n+    }\n+\n+    /**\n+     * Fetches the academy video with the given id.\n+     *\n+     * @param videoId the id of the video to fetch\n+     * @return the video with the given id or <tt>null</tt> if no matching video was found\n+     */\n+    @Nullable\n+    public AcademyVideo fetchAcademyVideo(String videoId) {\n+        return academyVideoCache.get(videoId, this::fetchAcademyVideoFromDatabase);\n+    }\n+\n+    /**\n+     * Persists the given video data in the database.\n+     *\n+     * @param video the video data to store\n+     */\n+    protected abstract void persistAcademyVideo(AcademyVideoData video);\n+\n+    /**\n+     * Deletes all outdated academy videos.\n+     *\n+     * @param academy           the academy to update the videos for\n+     * @param syncTokenToIgnore the last valid sync token. All videos which contain another token, are considered\n+     *                          outdated and will be marked as deleted.\n+     */\n+    protected abstract void markOutdatedAcademyVideosAsDeleted(String academy, String syncTokenToIgnore);\n+\n+    /**\n+     * Lists all videos of the given academy.\n+     *\n+     * @param academy the academy to fetch the videos for\n+     * @return the videos in the given academy\n+     */\n+    protected abstract List<? extends AcademyVideo> queryAcademyVideos(String academy);\n+\n+    /**\n+     * Actually pulls the metadata of the requested academy video from the database.\n+     *\n+     * @param videoId the id of the video to load\n+     * @return the loaded video or <tt>null</tt> if the video is unknown\n+     */\n+    @Nullable\n+    protected abstract AcademyVideo fetchAcademyVideoFromDatabase(String videoId);\n+\n+    /**\n+     * Creates or find the onboarding video for the given owner/target and academy video.\n+     *\n+     * @param owner        the onboarding participant which is targeted by the video\n+     * @param academyVideo the video to show to the participant\n+     * @param syncToken    the token to store in the onboarding video to support updates / cleanups\n+     * @return the onboarding video for the given academy video and target\n+     */\n+    protected abstract OnboardingVideo createOrUpdateOnboardingVideo(String owner,\n+                                                                     AcademyVideo academyVideo,\n+                                                                     String syncToken);\n+\n+    /**\n+     * Marks all untouched onboarding videos as outdated.\n+     *\n+     * @param academy           the academy to filter on\n+     * @param owner             the owner to filter on\n+     * @param syncTokenToIgnore the token which is considered valid, all videos with other tokens are considered\n+     *                          outdated and will me marked as deleted\n+     */\n+    protected abstract void markOutdatedOnboardingVideosAsDeleted(String academy,\n+                                                                  String owner,\n+                                                                  String syncTokenToIgnore);\n+\n+    /**\n+     * Wipes all onboarding videos for the given target/owner.\n+     *\n+     * @param owner the owner to delete all videos for\n+     */\n+    protected abstract void deleteOnboardingVideosFor(String owner);\n+\n+    /**\n+     * Iterates over all videos of the given owner.\n+     *\n+     * @param owner         the onboarding participant to filter on\n+     * @param videoCallback the callback to be supplied with all videos\n+     */\n+    protected abstract void forAllVideos(String owner, Consumer<? super OnboardingVideo> videoCallback);\n+\n+    /**\n+     * Fetches metadata for the track (and owner).\n+     *\n+     * @param owner   the onboarding participant to filter on\n+     * @param trackId the track to fetch metadata for\n+     * @return the metadata for the given track and owner\n+     */\n+    public Optional<AcademyTrackInfo> fetchTrack(String owner, String trackId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE3NjU2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Wraps the whole process of creating onboarding videos for once participant to carry along some state.\n          \n          \n            \n                 * Wraps the whole process of creating onboarding videos for one participant to carry along some state.", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661176564", "createdAt": "2021-06-30T06:47:29Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/RecomputeOnboardingVideosCheck.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.biz.analytics.checks.DailyCheck;\n+import sirius.biz.protocol.Traced;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a base implementation of a {@link DailyCheck} which recomputes {@link OnboardingVideo onboarding videos}.\n+ * <p>\n+ * This is the actual work horse which collects all available videos for an academy as {@link AcademyVideo} and\n+ * then multiplies them out into {@link OnboardingVideo onboarding videos} - one for each entity which happens\n+ * to be an {@link OnboardingParticipant}.\n+ *\n+ * @param <E> the entity type which represents the onboarding participant\n+ */\n+public abstract class RecomputeOnboardingVideosCheck<E extends BaseEntity<?> & OnboardingParticipant>\n+        extends DailyCheck<E> {\n+\n+    @Part\n+    @Nullable\n+    protected static OnboardingEngine onboardingEngine;\n+\n+    /**\n+     * Wraps the whole process of creating onboarding videos for once participant to carry along some state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTE3Njc2NA==", "bodyText": "Private inner classes at the bottom of the parent class?", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661176764", "createdAt": "2021-06-30T06:47:53Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/tycho/academy/RecomputeOnboardingVideosCheck.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.tycho.academy;\n+\n+import sirius.biz.analytics.checks.DailyCheck;\n+import sirius.biz.protocol.Traced;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+\n+import javax.annotation.Nullable;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a base implementation of a {@link DailyCheck} which recomputes {@link OnboardingVideo onboarding videos}.\n+ * <p>\n+ * This is the actual work horse which collects all available videos for an academy as {@link AcademyVideo} and\n+ * then multiplies them out into {@link OnboardingVideo onboarding videos} - one for each entity which happens\n+ * to be an {@link OnboardingParticipant}.\n+ *\n+ * @param <E> the entity type which represents the onboarding participant\n+ */\n+public abstract class RecomputeOnboardingVideosCheck<E extends BaseEntity<?> & OnboardingParticipant>\n+        extends DailyCheck<E> {\n+\n+    @Part\n+    @Nullable\n+    protected static OnboardingEngine onboardingEngine;\n+\n+    /**\n+     * Wraps the whole process of creating onboarding videos for once participant to carry along some state.\n+     */\n+    private class Computation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk1OTAzNDU5", "url": "https://github.com/scireum/sirius-biz/pull/889#pullrequestreview-695903459", "createdAt": "2021-06-30T09:30:57Z", "commit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0zMFQwOTozMDo1N1rOJ2qBbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0zMFQwOTozMDo1N1rOJ2qBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MTI5MTM3NA==", "bodyText": "in S2 its used in some functions like admin-support", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r661291374", "createdAt": "2021-06-30T09:30:57Z", "author": {"login": "ymo-sci"}, "path": "src/main/java/sirius/biz/tenants/jdbc/SQLUserAccount.java", "diffHunk": "@@ -37,15 +37,10 @@\n @TranslationSource(UserAccount.class)\n public class SQLUserAccount extends SQLTenantAware implements UserAccount<Long, SQLTenant> {\n \n-    public static final Mapping USER_ACCOUNT_DATA = Mapping.named(\"userAccountData\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b87520f58e740cc32800fdf76174cd74f5bb1db8"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d8136e05da5e3fa20b446adcc6f1b26acfe78cc", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/2d8136e05da5e3fa20b446adcc6f1b26acfe78cc", "committedDate": "2021-06-30T14:32:54Z", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-academies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "714eee542b8ebd2443877b317d3a64395ee086e4", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/714eee542b8ebd2443877b317d3a64395ee086e4", "committedDate": "2021-06-30T14:58:32Z", "message": "Removes prematurely committed code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e55c5ffcb3754a41024640ddd13b1354fa4949d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/4e55c5ffcb3754a41024640ddd13b1354fa4949d", "committedDate": "2021-06-30T14:59:03Z", "message": "Improves/fixes JavaDoc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5ab645c14c1a04aeade206fa7133710ddadc256", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/b5ab645c14c1a04aeade206fa7133710ddadc256", "committedDate": "2021-06-30T14:59:18Z", "message": "Marks internal methods as such and groups them together."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c08d91ca808f05d7897d71ee78da319d2d257c6d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/c08d91ca808f05d7897d71ee78da319d2d257c6d", "committedDate": "2021-06-30T14:59:58Z", "message": "Uniformly handles the fact that no onboarding engine is enabled."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbdac982911f149f4b6163a06669178f05542b88", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/bbdac982911f149f4b6163a06669178f05542b88", "committedDate": "2021-06-30T15:00:12Z", "message": "Moves an inner class to the bottom of the file."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a796897d31bd389d9a6d1c63fedf69cd1b548170", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/a796897d31bd389d9a6d1c63fedf69cd1b548170", "committedDate": "2021-06-30T20:47:06Z", "message": "Generates proper links in the KB search provider."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa1ab8873ec3dbb38b9c3796bb05c50ff957a517", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/fa1ab8873ec3dbb38b9c3796bb05c50ff957a517", "committedDate": "2021-06-30T20:47:15Z", "message": "Fixes an i18n bug."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "457149dcdd3e2d444843e8dbbffa5225aec229c1", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/457149dcdd3e2d444843e8dbbffa5225aec229c1", "committedDate": "2021-06-30T20:47:40Z", "message": "Fixes the ever spinning loader of the open search."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab3882e1be273c62153f9ba6914d7b8c63b1830d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/ab3882e1be273c62153f9ba6914d7b8c63b1830d", "committedDate": "2021-06-30T20:49:01Z", "message": "Provides a proper config for the video academy cache."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7753820c15675bb25f7e3b2fda01a3854254d20", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/e7753820c15675bb25f7e3b2fda01a3854254d20", "committedDate": "2021-07-01T22:35:40Z", "message": "Merge remote-tracking branch 'origin/develop' into aha/tycho-academies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f3604367fcdd4ad5fdb4bdc3334ba7f777e8d4d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/9f3604367fcdd4ad5fdb4bdc3334ba7f777e8d4d", "committedDate": "2021-07-01T22:56:36Z", "message": "Performs some requested review changes and some i18n cleanup."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk3ODYyODc0", "url": "https://github.com/scireum/sirius-biz/pull/889#pullrequestreview-697862874", "createdAt": "2021-07-02T06:29:57Z", "commit": {"oid": "9f3604367fcdd4ad5fdb4bdc3334ba7f777e8d4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk3ODczODMx", "url": "https://github.com/scireum/sirius-biz/pull/889#pullrequestreview-697873831", "createdAt": "2021-07-02T06:48:30Z", "commit": {"oid": "9f3604367fcdd4ad5fdb4bdc3334ba7f777e8d4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk3ODkxNjkw", "url": "https://github.com/scireum/sirius-biz/pull/889#pullrequestreview-697891690", "createdAt": "2021-07-02T07:15:37Z", "commit": {"oid": "9f3604367fcdd4ad5fdb4bdc3334ba7f777e8d4d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQwNzoxNTozN1rOJ4FlLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNy0wMlQwNzoxNTozN1rOJ4FlLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2Mjc5MTQ3MA==", "bodyText": "i18n", "url": "https://github.com/scireum/sirius-biz/pull/889#discussion_r662791470", "createdAt": "2021-07-02T07:15:37Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/resources/default/templates/biz/tycho/academy/video-card.html.pasta", "diffHunk": "@@ -0,0 +1,41 @@\n+<i:arg type=\"String\" name=\"owner\" />\n+<i:arg type=\"String\" name=\"accessToken\" />\n+<i:arg type=\"sirius.biz.tycho.academy.OnboardingVideo\" name=\"video\" />\n+\n+<t:datacard title=\"@video.fetchAcademyVideoData().getTitle()\"\n+            link=\"@apply('/academy/%s/%s/video/%s',  owner, accessToken, video.getIdAsString())\">\n+    <i:block name=\"header\">\n+        <img class=\"card-img-top\" src=\"@video.fetchAcademyVideoData().getPreviewUrl()\"/>\n+    </i:block>\n+    <i:block name=\"subtitle\">\n+        <i class=\"fa fa-film\"></i> @video.fetchAcademyVideoData().generateDurationString()\n+    </i:block>\n+    <i:block name=\"actions\">\n+        <i:if test=\"video.getOnboardingVideoData().isRecommended()\">\n+            <t:menuItem title=\"\u00dcberspringen\" url=\"@apply('javascript:skipVideo%s()', video.getIdAsString())\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f3604367fcdd4ad5fdb4bdc3334ba7f777e8d4d"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk3ODkzMjk3", "url": "https://github.com/scireum/sirius-biz/pull/889#pullrequestreview-697893297", "createdAt": "2021-07-02T07:17:54Z", "commit": {"oid": "9f3604367fcdd4ad5fdb4bdc3334ba7f777e8d4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "468feef7505a6e4c26b4e4f9c163797c5909b889", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/468feef7505a6e4c26b4e4f9c163797c5909b889", "committedDate": "2021-07-02T08:36:37Z", "message": "Fixes a missing i18n key."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4216, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}