{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1Nzk0NDA0", "number": 920, "title": "Provides a minimal Redis management / query UI", "bodyText": "", "createdAt": "2020-11-23T15:05:50Z", "url": "https://github.com/scireum/sirius-biz/pull/920", "merged": true, "mergeCommit": {"oid": "6bc18410b8e26b70efaaffe975704a1aecc083f9"}, "closed": true, "closedAt": "2020-11-26T09:18:57Z", "author": {"login": "andyHa"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfWhV2gH2gAyNTI1Nzk0NDA0OjE3ODU0YTI1NjY0MjllMjk1YWMwMDJiZWE1NGRkMzM5ZTIyODY3NmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgOwqTAH2gAyNTI1Nzk0NDA0OjhhODFjMGFiZDE0MDIwMzVkZDA2OGQ2NWE5NjY1OTYwNzFlYjE2OGQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "17854a2566429e295ac002bea54dd339e228676e", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/17854a2566429e295ac002bea54dd339e228676e", "committedDate": "2020-11-23T15:03:13Z", "message": "Uses a more modern approach to directly output an error message."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "750e80f1c0e4aa48023c07f2698ff2edada75aa9", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/750e80f1c0e4aa48023c07f2698ff2edada75aa9", "committedDate": "2020-11-23T15:03:26Z", "message": "Removes debugging code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85ebaf4706917abe6aa8458b8e4855af413ca5de", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/85ebaf4706917abe6aa8458b8e4855af413ca5de", "committedDate": "2020-11-23T15:05:12Z", "message": "Provides a minimal Redis management / query UI."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTY3MDY4", "url": "https://github.com/scireum/sirius-biz/pull/920#pullrequestreview-536567068", "createdAt": "2020-11-23T15:13:17Z", "commit": {"oid": "85ebaf4706917abe6aa8458b8e4855af413ca5de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxMzoxN1rOH4R2yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNToxMVrOH4R8nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NDg1Ng==", "bodyText": "ctx -> webContext", "url": "https://github.com/scireum/sirius-biz/pull/920#discussion_r528774856", "createdAt": "2020-11-23T15:13:17Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/util/RedisController.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import redis.clients.jedis.util.SafeEncoder;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.biz.web.BizController;\n+import sirius.db.redis.Redis;\n+import sirius.db.redis.RedisDB;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Routed;\n+import sirius.web.health.console.CommandParser;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.util.List;\n+\n+/**\n+ * Provides the management GUI for Redis related activities.\n+ */\n+@Register\n+public class RedisController extends BizController {\n+\n+    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    @Part\n+    private Redis redis;\n+\n+    /**\n+     * Renders the query template.\n+     *\n+     * @param webContext the request to respond to\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/redis\")\n+    public void redis(WebContext webContext) {\n+        webContext.respondWith().template(\"/templates/biz/model/redis.html.pasta\", redis.getPools(), Redis.POOL_SYSTEM);\n+    }\n+\n+    /**\n+     * Executes the given Redis query.\n+     *\n+     * @param ctx the current request\n+     * @param out the JSON response\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(value = \"/system/redis/api/execute\", jsonCall = true)\n+    public void executeQuery(WebContext ctx, JSONStructuredOutput out) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ebaf4706917abe6aa8458b8e4855af413ca5de"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NTY5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StringBuilder sb = new StringBuilder();\n          \n          \n            \n                    renderResult(result, \"\", sb);\n          \n          \n            \n                    out.property(\"result\", sb.toString());\n          \n          \n            \n                    StringBuilder resultBuilder = new StringBuilder();\n          \n          \n            \n                    renderResult(result, \"\", resultBuilder);\n          \n          \n            \n                    out.property(\"result\", resultBuilder.toString());", "url": "https://github.com/scireum/sirius-biz/pull/920#discussion_r528775697", "createdAt": "2020-11-23T15:14:24Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/util/RedisController.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import redis.clients.jedis.util.SafeEncoder;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.biz.web.BizController;\n+import sirius.db.redis.Redis;\n+import sirius.db.redis.RedisDB;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Routed;\n+import sirius.web.health.console.CommandParser;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.util.List;\n+\n+/**\n+ * Provides the management GUI for Redis related activities.\n+ */\n+@Register\n+public class RedisController extends BizController {\n+\n+    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    @Part\n+    private Redis redis;\n+\n+    /**\n+     * Renders the query template.\n+     *\n+     * @param webContext the request to respond to\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/redis\")\n+    public void redis(WebContext webContext) {\n+        webContext.respondWith().template(\"/templates/biz/model/redis.html.pasta\", redis.getPools(), Redis.POOL_SYSTEM);\n+    }\n+\n+    /**\n+     * Executes the given Redis query.\n+     *\n+     * @param ctx the current request\n+     * @param out the JSON response\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(value = \"/system/redis/api/execute\", jsonCall = true)\n+    public void executeQuery(WebContext ctx, JSONStructuredOutput out) {\n+        Watch watch = Watch.start();\n+\n+        String database = ctx.get(\"pool\").asString(Redis.POOL_SYSTEM);\n+        RedisDB pool = redis.getPool(database);\n+        String query = ctx.get(\"query\").asString();\n+\n+        Object result = pool.query(() -> \"Executing query via /system/redis\", db -> {\n+            try {\n+                CommandParser parser = new CommandParser(query);\n+                db.getClient().sendCommand(() -> SafeEncoder.encode(parser.parseCommand()), parser.getArgArray());\n+\n+                return db.getClient().getOne();\n+            } catch (Exception e) {\n+                // In case of an invalid query, we do not want to log this into the syslog but\n+                // rather just directly output the message to the user....\n+                throw Exceptions.createHandled().error(e).withDirectMessage(e.getMessage()).handle();\n+            }\n+        });\n+        StringBuilder sb = new StringBuilder();\n+        renderResult(result, \"\", sb);\n+        out.property(\"result\", sb.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ebaf4706917abe6aa8458b8e4855af413ca5de"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NjM0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void renderResult(Object result, String offset, StringBuilder sb) {\n          \n          \n            \n                    if (result instanceof List) {\n          \n          \n            \n                        List<?> results = (List<?>) result;\n          \n          \n            \n                        for (int i = 0; i < results.size(); i++) {\n          \n          \n            \n                            if (i > 0) {\n          \n          \n            \n                                sb.append(offset);\n          \n          \n            \n                            }\n          \n          \n            \n                            sb.append(Strings.apply(\"%2d\", i + 1));\n          \n          \n            \n                            sb.append(\") \");\n          \n          \n            \n                            renderResult(results.get(i), offset + \"    \", sb);\n          \n          \n            \n                        }\n          \n          \n            \n                    } else if (result instanceof byte[]) {\n          \n          \n            \n                        sb.append(SafeEncoder.encode((byte[]) result));\n          \n          \n            \n                        sb.append(\"\\n\");\n          \n          \n            \n                    } else {\n          \n          \n            \n                        sb.append(NLS.toUserString(result));\n          \n          \n            \n                        sb.append(\"\\n\");\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private void renderResult(Object result, String offset, StringBuilder resultBuilder) {\n          \n          \n            \n                    if (result instanceof List) {\n          \n          \n            \n                        List<?> results = (List<?>) result;\n          \n          \n            \n                        for (int i = 0; i < results.size(); i++) {\n          \n          \n            \n                            if (i > 0) {\n          \n          \n            \n                                resultBuilder.append(offset);\n          \n          \n            \n                            }\n          \n          \n            \n                            resultBuilder.append(Strings.apply(\"%2d\", i + 1));\n          \n          \n            \n                            resultBuilder.append(\") \");\n          \n          \n            \n                            renderResult(results.get(i), offset + \"    \", resultBuilder);\n          \n          \n            \n                        }\n          \n          \n            \n                    } else if (result instanceof byte[]) {\n          \n          \n            \n                        resultBuilder.append(SafeEncoder.encode((byte[]) result));\n          \n          \n            \n                        resultBuilder.append(\"\\n\");\n          \n          \n            \n                    } else {\n          \n          \n            \n                        resultBuilder.append(NLS.toUserString(result));\n          \n          \n            \n                        resultBuilder.append(\"\\n\");\n          \n          \n            \n                    }\n          \n          \n            \n                }", "url": "https://github.com/scireum/sirius-biz/pull/920#discussion_r528776349", "createdAt": "2020-11-23T15:15:11Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/util/RedisController.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import redis.clients.jedis.util.SafeEncoder;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.biz.web.BizController;\n+import sirius.db.redis.Redis;\n+import sirius.db.redis.RedisDB;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Routed;\n+import sirius.web.health.console.CommandParser;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.util.List;\n+\n+/**\n+ * Provides the management GUI for Redis related activities.\n+ */\n+@Register\n+public class RedisController extends BizController {\n+\n+    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    @Part\n+    private Redis redis;\n+\n+    /**\n+     * Renders the query template.\n+     *\n+     * @param webContext the request to respond to\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/redis\")\n+    public void redis(WebContext webContext) {\n+        webContext.respondWith().template(\"/templates/biz/model/redis.html.pasta\", redis.getPools(), Redis.POOL_SYSTEM);\n+    }\n+\n+    /**\n+     * Executes the given Redis query.\n+     *\n+     * @param ctx the current request\n+     * @param out the JSON response\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(value = \"/system/redis/api/execute\", jsonCall = true)\n+    public void executeQuery(WebContext ctx, JSONStructuredOutput out) {\n+        Watch watch = Watch.start();\n+\n+        String database = ctx.get(\"pool\").asString(Redis.POOL_SYSTEM);\n+        RedisDB pool = redis.getPool(database);\n+        String query = ctx.get(\"query\").asString();\n+\n+        Object result = pool.query(() -> \"Executing query via /system/redis\", db -> {\n+            try {\n+                CommandParser parser = new CommandParser(query);\n+                db.getClient().sendCommand(() -> SafeEncoder.encode(parser.parseCommand()), parser.getArgArray());\n+\n+                return db.getClient().getOne();\n+            } catch (Exception e) {\n+                // In case of an invalid query, we do not want to log this into the syslog but\n+                // rather just directly output the message to the user....\n+                throw Exceptions.createHandled().error(e).withDirectMessage(e.getMessage()).handle();\n+            }\n+        });\n+        StringBuilder sb = new StringBuilder();\n+        renderResult(result, \"\", sb);\n+        out.property(\"result\", sb.toString());\n+        out.property(\"duration\", watch.duration());\n+    }\n+\n+    private void renderResult(Object result, String offset, StringBuilder sb) {\n+        if (result instanceof List) {\n+            List<?> results = (List<?>) result;\n+            for (int i = 0; i < results.size(); i++) {\n+                if (i > 0) {\n+                    sb.append(offset);\n+                }\n+                sb.append(Strings.apply(\"%2d\", i + 1));\n+                sb.append(\") \");\n+                renderResult(results.get(i), offset + \"    \", sb);\n+            }\n+        } else if (result instanceof byte[]) {\n+            sb.append(SafeEncoder.encode((byte[]) result));\n+            sb.append(\"\\n\");\n+        } else {\n+            sb.append(NLS.toUserString(result));\n+            sb.append(\"\\n\");\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ebaf4706917abe6aa8458b8e4855af413ca5de"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTcyOTk5", "url": "https://github.com/scireum/sirius-biz/pull/920#pullrequestreview-536572999", "createdAt": "2020-11-23T15:19:28Z", "commit": {"oid": "85ebaf4706917abe6aa8458b8e4855af413ca5de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9e3356ce07266e5e1cade60ed1349bb0454b0ea", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/d9e3356ce07266e5e1cade60ed1349bb0454b0ea", "committedDate": "2020-11-24T19:53:35Z", "message": "Update src/main/java/sirius/biz/util/RedisController.java\n\nCo-authored-by: Sascha Bieberstein <sabieber@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc37919c19119318ab173b1d0de62980e1361cc6", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/fc37919c19119318ab173b1d0de62980e1361cc6", "committedDate": "2020-11-24T19:53:42Z", "message": "Update src/main/java/sirius/biz/util/RedisController.java\n\nCo-authored-by: Sascha Bieberstein <sabieber@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea1201c594a7447e1d7430164b42964bbf78c018", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/ea1201c594a7447e1d7430164b42964bbf78c018", "committedDate": "2020-11-24T19:54:47Z", "message": "Uses a proper variable/parameter name."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MTg4MDEz", "url": "https://github.com/scireum/sirius-biz/pull/920#pullrequestreview-538188013", "createdAt": "2020-11-25T06:26:47Z", "commit": {"oid": "ea1201c594a7447e1d7430164b42964bbf78c018"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a891a3ad0444006e68697f8dc34516aed821e542", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/a891a3ad0444006e68697f8dc34516aed821e542", "committedDate": "2020-11-26T08:10:34Z", "message": "Merge remote-tracking branch 'origin/master' into aha/redis-ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "774fdcfcd663aa6e64e2975411fb03303888059e", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/774fdcfcd663aa6e64e2975411fb03303888059e", "committedDate": "2020-11-26T08:19:57Z", "message": "Merge remote-tracking branch 'origin/master' into aha/redis-ui"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a81c0abd1402035dd068d65a966596071eb168d", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/8a81c0abd1402035dd068d65a966596071eb168d", "committedDate": "2020-11-26T08:34:38Z", "message": "Adds a missing i18n key."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4260, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}