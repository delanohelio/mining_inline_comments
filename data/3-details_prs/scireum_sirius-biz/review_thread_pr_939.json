{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNDU4MTcx", "number": 939, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo1MToxN1rOFBpExQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo1MDo0MlrOFCUDCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjY1ODYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo1MToxN1rOIAZ3dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODowODoyN1rOIAaaRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NDcxMQ==", "bodyText": "ReplaceAll?", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537294711", "createdAt": "2020-12-07T07:51:17Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "diffHunk": "@@ -173,6 +176,39 @@ public static String normalizePath(@Nullable String path) {\n         return normalizedPath;\n     }\n \n+    /**\n+     * Sanitizes the given path.\n+     *\n+     * @param path the path to cleanup\n+     * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n+     */\n+    @Nonnull\n+    public String sanitizePath(@Nullable String path) {\n+        path = Strings.trim(path);\n+\n+        if (Strings.isEmpty(path)) {\n+            return \"\";\n+        }\n+\n+        if (path.contains(\"\\\\\")) {\n+            path = path.replace(\"\\\\\", \"/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37ac3b15f673301ffd86ca12a92b1c81b905a48"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMzYyMQ==", "bodyText": "replace already replaces each occurrence. The only difference is that replaceAll expects a regex pattern.", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537303621", "createdAt": "2020-12-07T08:08:27Z", "author": {"login": "jmuscireum"}, "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "diffHunk": "@@ -173,6 +176,39 @@ public static String normalizePath(@Nullable String path) {\n         return normalizedPath;\n     }\n \n+    /**\n+     * Sanitizes the given path.\n+     *\n+     * @param path the path to cleanup\n+     * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n+     */\n+    @Nonnull\n+    public String sanitizePath(@Nullable String path) {\n+        path = Strings.trim(path);\n+\n+        if (Strings.isEmpty(path)) {\n+            return \"\";\n+        }\n+\n+        if (path.contains(\"\\\\\")) {\n+            path = path.replace(\"\\\\\", \"/\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NDcxMQ=="}, "originalCommit": {"oid": "d37ac3b15f673301ffd86ca12a92b1c81b905a48"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjY2MTI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo1MTo1OVrOIAZ5Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMToyMzowNFrOIAiF_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTExNQ==", "bodyText": "I think this call has to be added to Blob::updateContent as well as we could otherwise overwrite a sanitized path with an unsanitized one by accident when updating the content of a blob and passing a file name", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537295115", "createdAt": "2020-12-07T07:51:59Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -373,36 +375,30 @@ protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n         }\n     }\n \n-    protected String ensureRelativePath(String path) {\n-        if (path.startsWith(\"/\")) {\n-            return path.substring(1);\n-        }\n-\n-        return path;\n-    }\n-\n     @Override\n     public Optional<? extends Blob> findByPath(String path) {\n         return findByPath(UserContext.getCurrentUser().getTenantId(), path);\n     }\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5ODgyOQ==", "bodyText": "updateContent only updates the file name. The only way to \"unsanitize\" the path is to pass an invalid file name, which is a separate problem?", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537298829", "createdAt": "2020-12-07T07:59:11Z", "author": {"login": "jmuscireum"}, "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -373,36 +375,30 @@ protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n         }\n     }\n \n-    protected String ensureRelativePath(String path) {\n-        if (path.startsWith(\"/\")) {\n-            return path.substring(1);\n-        }\n-\n-        return path;\n-    }\n-\n     @Override\n     public Optional<? extends Blob> findByPath(String path) {\n         return findByPath(UserContext.getCurrentUser().getTenantId(), path);\n     }\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTExNQ=="}, "originalCommit": {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM2NjY1MQ==", "bodyText": "Yes thats exactly the problem, which when done will kill most parts of the storage system (vfs roots cant list any files of a space containing a single file with broken filename anymore)\nWe at least should create a ticket, my thought was that its at least related to the path sanitization (as the name seems to be created from the sanitized path in most cases, only the updateContent method somehow bypasses this logic.", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537366651", "createdAt": "2020-12-07T09:47:35Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -373,36 +375,30 @@ protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n         }\n     }\n \n-    protected String ensureRelativePath(String path) {\n-        if (path.startsWith(\"/\")) {\n-            return path.substring(1);\n-        }\n-\n-        return path;\n-    }\n-\n     @Override\n     public Optional<? extends Blob> findByPath(String path) {\n         return findByPath(UserContext.getCurrentUser().getTenantId(), path);\n     }\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTExNQ=="}, "originalCommit": {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyODM0NQ==", "bodyText": "The ticket SIRI-251 should cover this", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537428345", "createdAt": "2020-12-07T11:21:13Z", "author": {"login": "jmuscireum"}, "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -373,36 +375,30 @@ protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n         }\n     }\n \n-    protected String ensureRelativePath(String path) {\n-        if (path.startsWith(\"/\")) {\n-            return path.substring(1);\n-        }\n-\n-        return path;\n-    }\n-\n     @Override\n     public Optional<? extends Blob> findByPath(String path) {\n         return findByPath(UserContext.getCurrentUser().getTenantId(), path);\n     }\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTExNQ=="}, "originalCommit": {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzQyOTUwMg==", "bodyText": "Ah thx \ud83d\udc4d", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537429502", "createdAt": "2020-12-07T11:23:04Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -373,36 +375,30 @@ protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n         }\n     }\n \n-    protected String ensureRelativePath(String path) {\n-        if (path.startsWith(\"/\")) {\n-            return path.substring(1);\n-        }\n-\n-        return path;\n-    }\n-\n     @Override\n     public Optional<? extends Blob> findByPath(String path) {\n         return findByPath(UserContext.getCurrentUser().getTenantId(), path);\n     }\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTExNQ=="}, "originalCommit": {"oid": "43a5a8cf7dd1a7d42d384bf2b79d38af57e95bc1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjY2NjQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo1MzozMVrOIAZ78Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzo1MzozMVrOIAZ78Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI5NTg1Nw==", "bodyText": "Ist absolut = relativ? War vorher ja das gleiche Verhalten, aber das verdient IMO nen erkl\u00e4renden Kommentar", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537295857", "createdAt": "2020-12-07T07:53:31Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "diffHunk": "@@ -173,6 +176,39 @@ public static String normalizePath(@Nullable String path) {\n         return normalizedPath;\n     }\n \n+    /**\n+     * Sanitizes the given path.\n+     *\n+     * @param path the path to cleanup\n+     * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n+     */\n+    @Nonnull\n+    public String sanitizePath(@Nullable String path) {\n+        path = Strings.trim(path);\n+\n+        if (Strings.isEmpty(path)) {\n+            return \"\";\n+        }\n+\n+        if (path.contains(\"\\\\\")) {\n+            path = path.replace(\"\\\\\", \"/\");\n+        }\n+\n+        if (path.contains(\"//\")) {\n+            path = path.replaceAll(\"/+\", \"/\");\n+        }\n+\n+        if (path.startsWith(\"/\")) {\n+            path = path.substring(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37ac3b15f673301ffd86ca12a92b1c81b905a48"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjgxODY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODozMjo0NVrOIAbQww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODozMjo0NVrOIAbQww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNzU3MQ==", "bodyText": "why check for a contains?", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537317571", "createdAt": "2020-12-07T08:32:45Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "diffHunk": "@@ -173,6 +176,42 @@ public static String normalizePath(@Nullable String path) {\n         return normalizedPath;\n     }\n \n+    /**\n+     * Sanitizes the given path.\n+     * <p>\n+     * This will replace backslashes with forward slashes, and remove successive slashes. Trailing slashes are removed\n+     * from directory paths, and absolute paths are made relative by removing leading slashes.\n+     *\n+     * @param path the path to cleanup\n+     * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n+     */\n+    @Nonnull\n+    public String sanitizePath(@Nullable String path) {\n+        path = Strings.trim(path);\n+\n+        if (Strings.isEmpty(path)) {\n+            return \"\";\n+        }\n+\n+        if (path.contains(\"\\\\\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e78591acc4e17e51492ce5555ce59572e47d18"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjgxOTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODozMjo1NVrOIAbRPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODozMjo1NVrOIAbRPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxNzY5Mw==", "bodyText": "s.a.", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r537317693", "createdAt": "2020-12-07T08:32:55Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/util/StorageUtils.java", "diffHunk": "@@ -173,6 +176,42 @@ public static String normalizePath(@Nullable String path) {\n         return normalizedPath;\n     }\n \n+    /**\n+     * Sanitizes the given path.\n+     * <p>\n+     * This will replace backslashes with forward slashes, and remove successive slashes. Trailing slashes are removed\n+     * from directory paths, and absolute paths are made relative by removing leading slashes.\n+     *\n+     * @param path the path to cleanup\n+     * @return the sanitized path without backslashes, successive slashes, and without leading and trailing slashes\n+     */\n+    @Nonnull\n+    public String sanitizePath(@Nullable String path) {\n+        path = Strings.trim(path);\n+\n+        if (Strings.isEmpty(path)) {\n+            return \"\";\n+        }\n+\n+        if (path.contains(\"\\\\\")) {\n+            path = path.replace(\"\\\\\", \"/\");\n+        }\n+\n+        if (path.contains(\"//\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70e78591acc4e17e51492ce5555ce59572e47d18"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTY5OTMwOnYy", "diffSide": "LEFT", "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo1MDo0MlrOIBZHLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjo1ODoxNFrOIBZi-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMDkyNw==", "bodyText": "wasn't this put here intentionally as removed is distributed over the intercom and put isn't? @idlira", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r538330927", "createdAt": "2020-12-08T12:50:42Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -373,36 +375,30 @@ protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n         }\n     }\n \n-    protected String ensureRelativePath(String path) {\n-        if (path.startsWith(\"/\")) {\n-            return path.substring(1);\n-        }\n-\n-        return path;\n-    }\n-\n     @Override\n     public Optional<? extends Blob> findByPath(String path) {\n         return findByPath(UserContext.getCurrentUser().getTenantId(), path);\n     }\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);\n+\n+        if (Strings.isEmpty(sanitizedPath)) {\n             throw new IllegalArgumentException(\"An empty path was provided!\");\n         }\n \n-        String key = determinePathCacheKey(tenantId, path);\n+        String key = determinePathCacheKey(tenantId, sanitizedPath);\n         Blob blob = blobByPathCache.get(key);\n         if (blob == null) {\n-            blobByPathCache.remove(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d8871ad99b32c2b9c7fda4b74137fd16291827"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzODA0MA==", "bodyText": "Yup, put is not distributed", "url": "https://github.com/scireum/sirius-biz/pull/939#discussion_r538338040", "createdAt": "2020-12-08T12:58:14Z", "author": {"login": "idlira"}, "path": "src/main/java/sirius/biz/storage/layer2/BasicBlobStorageSpace.java", "diffHunk": "@@ -373,36 +375,30 @@ protected Blob fetchByPath(String tenantId, @Nonnull String path) {\n         }\n     }\n \n-    protected String ensureRelativePath(String path) {\n-        if (path.startsWith(\"/\")) {\n-            return path.substring(1);\n-        }\n-\n-        return path;\n-    }\n-\n     @Override\n     public Optional<? extends Blob> findByPath(String path) {\n         return findByPath(UserContext.getCurrentUser().getTenantId(), path);\n     }\n \n     @Override\n     public Blob findOrCreateByPath(String tenantId, String path) {\n-        if (Strings.isEmpty(path)) {\n+        String sanitizedPath = utils.sanitizePath(path);\n+\n+        if (Strings.isEmpty(sanitizedPath)) {\n             throw new IllegalArgumentException(\"An empty path was provided!\");\n         }\n \n-        String key = determinePathCacheKey(tenantId, path);\n+        String key = determinePathCacheKey(tenantId, sanitizedPath);\n         Blob blob = blobByPathCache.get(key);\n         if (blob == null) {\n-            blobByPathCache.remove(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMzMDkyNw=="}, "originalCommit": {"oid": "c0d8871ad99b32c2b9c7fda4b74137fd16291827"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1881, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}