{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4Mjc2NDA0", "number": 676, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjo0MTo1MVrODbd3Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzo0Nzo0NFrODcPXhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTI3NDA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer2/L3Uplink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjo0MTo1MVrOFi9-hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDo0NDowN1rOFjtcRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMTMzNQ==", "bodyText": "javadoc ?: can move file into new parent directory if they belong both to the same space", "url": "https://github.com/scireum/sirius-biz/pull/676#discussion_r372211335", "createdAt": "2020-01-29T06:41:51Z", "author": {"login": "tbiScireum"}, "path": "src/main/java/sirius/biz/storage/layer2/L3Uplink.java", "diffHunk": "@@ -359,16 +359,32 @@ private boolean deleteHandler(VirtualFile file) {\n         return false;\n     }\n \n-    private boolean moveHandler(VirtualFile file, VirtualFile newParent) {\n+    private boolean canFastMoveHandler(VirtualFile file, VirtualFile newParent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4296b16155f3fa3ed40b9e2c286f0c464ef877fa"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4ODk5OQ==", "bodyText": "well, its a private method as simply provides the implementation as defined by MutableVirtualFile.withCanFastMoveHandler", "url": "https://github.com/scireum/sirius-biz/pull/676#discussion_r372988999", "createdAt": "2020-01-30T14:44:07Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer2/L3Uplink.java", "diffHunk": "@@ -359,16 +359,32 @@ private boolean deleteHandler(VirtualFile file) {\n         return false;\n     }\n \n-    private boolean moveHandler(VirtualFile file, VirtualFile newParent) {\n+    private boolean canFastMoveHandler(VirtualFile file, VirtualFile newParent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMTMzNQ=="}, "originalCommit": {"oid": "4296b16155f3fa3ed40b9e2c286f0c464ef877fa"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMTI4NDQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer3/uplink/util/UplinkConnectorPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjo0ODo0NVrOFi-EuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjo0ODo0NVrOFi-EuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIxMjkyMA==", "bodyText": "unncessary", "url": "https://github.com/scireum/sirius-biz/pull/676#discussion_r372212920", "createdAt": "2020-01-29T06:48:45Z", "author": {"login": "tbiScireum"}, "path": "src/main/java/sirius/biz/storage/layer3/uplink/util/UplinkConnectorPool.java", "diffHunk": "@@ -8,9 +8,11 @@\n \n package sirius.biz.storage.layer3.uplink.util;\n \n+import org.apache.commons.pool2.impl.DefaultPooledObject;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4296b16155f3fa3ed40b9e2c286f0c464ef877fa"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDg2NDQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer3/uplink/util/Attempt.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjoyMzoyMVrOFjgdmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNjoyMzoyMVrOFjgdmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc3NjM0Nw==", "bodyText": "Wie w\u00e4rs mit Exceptions.getRootCause ?", "url": "https://github.com/scireum/sirius-biz/pull/676#discussion_r372776347", "createdAt": "2020-01-30T06:23:21Z", "author": {"login": "tbiScireum"}, "path": "src/main/java/sirius/biz/storage/layer3/uplink/util/Attempt.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.storage.layer3.uplink.util;\n+\n+import sirius.biz.storage.layer3.uplink.sftp.SFTPUplink;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Helps to distinguishes an initial first attempt from a rety.\n+ * <p>\n+ * If is used by uplinks like {@link sirius.biz.storage.layer3.uplink.ftp.FTPUplink} or {@link SFTPUplink} to\n+ * permit a retry for all IO related operations. Therefore the helper method {@link #shouldThrow(Exception)}\n+ * can be used to determine if an <tt>IOException</tt> is swallowed if it occurs during a first attempt but\n+ * will be thrown during a retry.\n+ * <p>\n+ * The pattern to use this looks something like:\n+ * <pre>{@code\n+ * for(Attempt attempt : Attempt.values()) {\n+ *     try {\n+ *         ...do something\n+ *         return;\n+ *     } catch(Exception e) {\n+ *         if (attempt.shouldThrow(e)) {\n+ *             throw Exceptions.handle...\n+ *         }\n+ *     }\n+ * }\n+ * }</pre>\n+ * <p>\n+ * This approach permits to perform inner returns and also enables some optimizations to the compiler (as opposed to\n+ * use lambdas).\n+ */\n+public enum Attempt {\n+    FIRST_ATTEMPT, RETRY;\n+\n+    /**\n+     * Determines if the given exception should be thrown.\n+     *\n+     * @param exception the exception to check\n+     * @return <tt>true</tt> if the exception should be thrown, <tt>false</tt> if it should be swallowed\n+     */\n+    public boolean shouldThrow(Exception exception) {\n+        return this == RETRY || !((exception instanceof IOException) || (exception.getCause() instanceof IOException));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96059ff10c936d227b8ad6e38e825619018267e5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwOTM4NTAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/storage/layer3/uplink/ftp/FTPUplink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzo0Nzo0NFrOFkLzfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTo1ODoxMlrOFpZceQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NjQ2MQ==", "bodyText": "can we put that for loop & error handling in an extra method with a runnable or consumer as parameter?\nThis looks like copy & paste on 3 different places. Maybe:\nattemptConnection(Consumer<UplinkConnector>)", "url": "https://github.com/scireum/sirius-biz/pull/676#discussion_r373486461", "createdAt": "2020-01-31T13:47:44Z", "author": {"login": "tbiScireum"}, "path": "src/main/java/sirius/biz/storage/layer3/uplink/ftp/FTPUplink.java", "diffHunk": "@@ -185,25 +204,35 @@ private MutableVirtualFile wrap(VirtualFile parent, FTPFile file, String filenam\n             return Optional.of(result);\n         }\n \n-        try (UplinkConnector<FTPClient> connector = connectorPool.obtain(ftpConfig)) {\n-            FTPFile[] ftpFiles = list(connector.connector(),\n-                                      file.parent().as(RemotePath.class),\n-                                      ftpFile -> Strings.areEqual(ftpFile.getName(), file.name()));\n-            if (ftpFiles.length == 1) {\n-                file.attach(ftpFiles[0]);\n-                return Optional.of(ftpFiles[0]);\n-            } else {\n-                return Optional.empty();\n+        for (Attempt attempt : Attempt.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eb00f529135b056a32b6b2691fd7997862dc4db"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk1MjgyNQ==", "bodyText": "doesn't work within a lambda we need an inner return point", "url": "https://github.com/scireum/sirius-biz/pull/676#discussion_r378952825", "createdAt": "2020-02-13T15:58:12Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/storage/layer3/uplink/ftp/FTPUplink.java", "diffHunk": "@@ -185,25 +204,35 @@ private MutableVirtualFile wrap(VirtualFile parent, FTPFile file, String filenam\n             return Optional.of(result);\n         }\n \n-        try (UplinkConnector<FTPClient> connector = connectorPool.obtain(ftpConfig)) {\n-            FTPFile[] ftpFiles = list(connector.connector(),\n-                                      file.parent().as(RemotePath.class),\n-                                      ftpFile -> Strings.areEqual(ftpFile.getName(), file.name()));\n-            if (ftpFiles.length == 1) {\n-                file.attach(ftpFiles[0]);\n-                return Optional.of(ftpFiles[0]);\n-            } else {\n-                return Optional.empty();\n+        for (Attempt attempt : Attempt.values()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ4NjQ2MQ=="}, "originalCommit": {"oid": "3eb00f529135b056a32b6b2691fd7997862dc4db"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2115, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}