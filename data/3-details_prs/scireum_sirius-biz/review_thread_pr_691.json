{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MzUxNzUy", "number": 691, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo1MzowMVrODiVVWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo1MzowMVrODiVVWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzI3NzA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jdbc/ExportSchemaChangesJobFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo1MzowMVrOFthUFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo1MzowMVrOFthUFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3NjA1NQ==", "bodyText": "Only the last statement of the action will have an ;", "url": "https://github.com/scireum/sirius-biz/pull/691#discussion_r383276055", "createdAt": "2020-02-24T13:53:01Z", "author": {"login": "jmuscireum"}, "path": "src/main/java/sirius/biz/jdbc/ExportSchemaChangesJobFactory.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jdbc;\n+\n+import sirius.biz.jobs.JobFactory;\n+import sirius.biz.jobs.batch.SimpleBatchProcessJobFactory;\n+import sirius.biz.jobs.params.Parameter;\n+import sirius.biz.process.PersistencePeriod;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.db.jdbc.schema.Schema;\n+import sirius.db.jdbc.schema.SchemaUpdateAction;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.web.security.Permission;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintWriter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+/**\n+ * Exports all required schema changes as defined by {@link Schema#getSchemaUpdateActions()}.\n+ */\n+@Register(classes = JobFactory.class)\n+@Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+public class ExportSchemaChangesJobFactory extends SimpleBatchProcessJobFactory {\n+\n+    @Part\n+    private Schema schema;\n+\n+    @Override\n+    protected void execute(ProcessContext process) throws Exception {\n+        process.log(\"Computing changes...\");\n+        schema.computeRequiredSchemaChanges();\n+        process.log(\"Exporting changes...\");\n+        Map<String, PrintWriter> writers = new HashMap<>();\n+        try {\n+            for (SchemaUpdateAction action : schema.getSchemaUpdateActions()) {\n+                PrintWriter writer = writers.computeIfAbsent(action.getRealm(), realm -> createWriter(process, realm));\n+                action.getSql().forEach(writer::print);\n+                writer.print(\";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "904de872ffeec8e9bcb1a643070db048b75bc968"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2125, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}