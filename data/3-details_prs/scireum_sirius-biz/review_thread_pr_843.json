{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMTMxMjc3", "number": 843, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDowOTo1MVrOEac-xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzozMjoxOVrOEaiA8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTczMjUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveExportJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDowOTo1MVrOHD5P0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoxNzowM1rOHD5m1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NTcxNQ==", "bodyText": "Is it really prohibited to invoke close in that stream?", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473845715", "createdAt": "2020-08-20T10:09:51Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveExportJob.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.apache.commons.io.output.CloseShieldOutputStream;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileOrDirectoryParameter;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+/**\n+ * Provides an export job which writes multiple files into a single archive file.\n+ */\n+public abstract class ArchiveExportJob extends FileExportJob {\n+\n+    private ZipOutputStream zipOutputStream;\n+\n+    /**\n+     * Creates a new job which writes into the given destination.\n+     *\n+     * @param destinationParameter the parameter used to select the destination for the file being written\n+     * @param process              the context in which the process will be executed\n+     */\n+    protected ArchiveExportJob(FileOrDirectoryParameter destinationParameter, ProcessContext process) {\n+        super(destinationParameter, process);\n+    }\n+\n+    /**\n+     * Creates a new entry in the archive and returns its output stream.\n+     *\n+     * @param filename the name of the archived file\n+     * @return a new output stream that points to the created entry\n+     * @throws IOException in case the output stream couln't be created\n+     */\n+    @Nonnull\n+    protected OutputStream createNextArchiveEntry(String filename) throws IOException {\n+        if (zipOutputStream == null) {\n+            zipOutputStream = new ZipOutputStream(createOutputStream());\n+        }\n+\n+        ZipEntry zipEntry = new ZipEntry(filename);\n+        zipOutputStream.putNextEntry(zipEntry);\n+\n+        return new CloseShieldOutputStream(zipOutputStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a7c5659d53898c70ba9f5119d9d99582feb056"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1MTYwNQ==", "bodyText": "Yes, because the output stream is for the whole archive. #putNextEntry does not create a new output stream but only creates a new entry inside the archive that is being written to when writing to the stream.", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473851605", "createdAt": "2020-08-20T10:17:03Z", "author": {"login": "fhaScireum"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveExportJob.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import org.apache.commons.io.output.CloseShieldOutputStream;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileOrDirectoryParameter;\n+\n+import javax.annotation.Nonnull;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+/**\n+ * Provides an export job which writes multiple files into a single archive file.\n+ */\n+public abstract class ArchiveExportJob extends FileExportJob {\n+\n+    private ZipOutputStream zipOutputStream;\n+\n+    /**\n+     * Creates a new job which writes into the given destination.\n+     *\n+     * @param destinationParameter the parameter used to select the destination for the file being written\n+     * @param process              the context in which the process will be executed\n+     */\n+    protected ArchiveExportJob(FileOrDirectoryParameter destinationParameter, ProcessContext process) {\n+        super(destinationParameter, process);\n+    }\n+\n+    /**\n+     * Creates a new entry in the archive and returns its output stream.\n+     *\n+     * @param filename the name of the archived file\n+     * @return a new output stream that points to the created entry\n+     * @throws IOException in case the output stream couln't be created\n+     */\n+    @Nonnull\n+    protected OutputStream createNextArchiveEntry(String filename) throws IOException {\n+        if (zipOutputStream == null) {\n+            zipOutputStream = new ZipOutputStream(createOutputStream());\n+        }\n+\n+        ZipEntry zipEntry = new ZipEntry(filename);\n+        zipOutputStream.putNextEntry(zipEntry);\n+\n+        return new CloseShieldOutputStream(zipOutputStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NTcxNQ=="}, "originalCommit": {"oid": "08a7c5659d53898c70ba9f5119d9d99582feb056"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTc0MjMyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoxMTo1MFrOHD5WNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyMDo1MlrOHD5y0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NzM0OQ==", "bodyText": "Why not search the stream on demand here - should greatly simplify the code and male getFile re usable for the same file", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473847349", "createdAt": "2020-08-20T10:11:50Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    /**\n+     * Contains the file name and input stream of all archive entries whose extensions can be handled.\n+     */\n+    private final Map<String, InputStream> entries = new HashMap<>();\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    protected void executeForSingleFile(FileHandle fileHandle) throws Exception {\n+        entries.put(fileHandle.getFile().getName(), fileHandle.getInputStream());\n+        importFiles();\n+    }\n+\n+    @Override\n+    protected void executeForArchive(FileHandle fileHandle) throws Exception {\n+        process.log(ProcessLog.info().withNLSKey(\"FileImportJob.importingZipFile\"));\n+\n+        try (ZipFile zipFile = new ZipFile(fileHandle.getFile())) {\n+            Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();\n+\n+            int validArchiveEntries = 0;\n+\n+            while (zipEntries.hasMoreElements()) {\n+                ZipEntry zipEntry = zipEntries.nextElement();\n+\n+                if (!isHiddenFile(zipEntry.getName())\n+                    && canHandleFileExtension(Files.getFileExtension(zipEntry.getName()))) {\n+                    this.entries.put(zipEntry.getName(), zipFile.getInputStream(zipEntry));\n+                    validArchiveEntries++;\n+                }\n+            }\n+\n+            if (validArchiveEntries == 0) {\n+                throw Exceptions.createHandled().withNLSKey(\"FileImportJob.noZippedFileFound\").handle();\n+            }\n+\n+            importFiles();\n+        }\n+    }\n+\n+    /**\n+     * Imports data based on the open input streams.\n+     *\n+     * @throws Exception in case of an exception while importing\n+     */\n+    protected abstract void importFiles() throws Exception;\n+\n+    protected List<InputStream> getFiles() {\n+        return new ArrayList<>(entries.values());\n+    }\n+\n+    @Nullable\n+    protected InputStream getFile(String fileName, boolean isRequired) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a7c5659d53898c70ba9f5119d9d99582feb056"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1NDY3NQ==", "bodyText": "I'll look into that.", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473854675", "createdAt": "2020-08-20T10:20:52Z", "author": {"login": "fhaScireum"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    /**\n+     * Contains the file name and input stream of all archive entries whose extensions can be handled.\n+     */\n+    private final Map<String, InputStream> entries = new HashMap<>();\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    protected void executeForSingleFile(FileHandle fileHandle) throws Exception {\n+        entries.put(fileHandle.getFile().getName(), fileHandle.getInputStream());\n+        importFiles();\n+    }\n+\n+    @Override\n+    protected void executeForArchive(FileHandle fileHandle) throws Exception {\n+        process.log(ProcessLog.info().withNLSKey(\"FileImportJob.importingZipFile\"));\n+\n+        try (ZipFile zipFile = new ZipFile(fileHandle.getFile())) {\n+            Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();\n+\n+            int validArchiveEntries = 0;\n+\n+            while (zipEntries.hasMoreElements()) {\n+                ZipEntry zipEntry = zipEntries.nextElement();\n+\n+                if (!isHiddenFile(zipEntry.getName())\n+                    && canHandleFileExtension(Files.getFileExtension(zipEntry.getName()))) {\n+                    this.entries.put(zipEntry.getName(), zipFile.getInputStream(zipEntry));\n+                    validArchiveEntries++;\n+                }\n+            }\n+\n+            if (validArchiveEntries == 0) {\n+                throw Exceptions.createHandled().withNLSKey(\"FileImportJob.noZippedFileFound\").handle();\n+            }\n+\n+            importFiles();\n+        }\n+    }\n+\n+    /**\n+     * Imports data based on the open input streams.\n+     *\n+     * @throws Exception in case of an exception while importing\n+     */\n+    protected abstract void importFiles() throws Exception;\n+\n+    protected List<InputStream> getFiles() {\n+        return new ArrayList<>(entries.values());\n+    }\n+\n+    @Nullable\n+    protected InputStream getFile(String fileName, boolean isRequired) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0NzM0OQ=="}, "originalCommit": {"oid": "08a7c5659d53898c70ba9f5119d9d99582feb056"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTc0OTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoxMzowOFrOHD5akQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDoyNTo0NlrOHD6CwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0ODQ2NQ==", "bodyText": "Shouldn\u2018t we rather throw/abort here - we acutally expect an archive with multiple files answay", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473848465", "createdAt": "2020-08-20T10:13:08Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    /**\n+     * Contains the file name and input stream of all archive entries whose extensions can be handled.\n+     */\n+    private final Map<String, InputStream> entries = new HashMap<>();\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    protected void executeForSingleFile(FileHandle fileHandle) throws Exception {\n+        entries.put(fileHandle.getFile().getName(), fileHandle.getInputStream());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a7c5659d53898c70ba9f5119d9d99582feb056"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg1ODc1Mg==", "bodyText": "This might generate quite a few changes in the job structure further down, but will simplify the logic here. I'll change it and see how much refactoring is actually needed.", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473858752", "createdAt": "2020-08-20T10:25:46Z", "author": {"login": "fhaScireum"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.kernel.commons.Files;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    /**\n+     * Contains the file name and input stream of all archive entries whose extensions can be handled.\n+     */\n+    private final Map<String, InputStream> entries = new HashMap<>();\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    protected void executeForSingleFile(FileHandle fileHandle) throws Exception {\n+        entries.put(fileHandle.getFile().getName(), fileHandle.getInputStream());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg0ODQ2NQ=="}, "originalCommit": {"oid": "08a7c5659d53898c70ba9f5119d9d99582feb056"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjUzODg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoyOToyN1rOHEBCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoyOToyN1rOHEBCiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3MzM4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // never called in overwritten execute method\n          \n          \n            \n                    throw new UnsupportedOperationException();\n          \n      \n    \n    \n  \n\n? Dann knallts auch falls es doch mal aufgerufen wird", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473973385", "createdAt": "2020-08-20T13:29:27Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    private ZipFile zipFile;\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    public void execute() throws Exception {\n+        VirtualFile file = process.require(fileParameter);\n+\n+        if (canHandleFileExtension(file.fileExtension())) {\n+            try (FileHandle fileHandle = file.download()) {\n+                backupInputFile(file.name(), fileHandle);\n+                zipFile = new ZipFile(fileHandle.getFile());\n+                importEntries();\n+            }\n+        } else {\n+            throw Exceptions.createHandled().withNLSKey(\"FileImportJob.fileNotSupported\").handle();\n+        }\n+    }\n+\n+    protected abstract void importEntries() throws Exception;\n+\n+    /**\n+     * Fetches an entry from the archive and returns it's input stream.\n+     * <p>\n+     * Note, that previous opened input stream might get closed by performing this action.\n+     *\n+     * @param fileName   the name of the file to fetch\n+     * @param isRequired flag if the file is required\n+     * @return input stream for the requested file\n+     * @throws Exception in case of an exception during fetching or if the file wasn't found but is required\n+     */\n+    @Nullable\n+    protected InputStream fetchEntry(String fileName, boolean isRequired) throws Exception {\n+        Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();\n+        while (zipEntries.hasMoreElements()) {\n+            ZipEntry zipEntry = zipEntries.nextElement();\n+\n+            if (Strings.areEqual(fileName, zipEntry.getName())) {\n+                return zipFile.getInputStream(zipEntry);\n+            }\n+        }\n+\n+        handleMissingFile(fileName, isRequired);\n+        return null;\n+    }\n+\n+    protected void handleMissingFile(String fileName, boolean isRequired) {\n+        if (isRequired) {\n+            throw Exceptions.createHandled()\n+                            .withNLSKey(\"ArchiveImportJob.errorMsg.requiredFileMissing\")\n+                            .set(\"fileName\", fileName)\n+                            .handle();\n+        } else {\n+            process.log(ProcessLog.warn()\n+                                  .withNLSKey(\"ArchiveImportJob.errorMsg.optionalFileMissing\")\n+                                  .withContext(\"fileName\", fileName)\n+                                  .withMessageType(fileName));\n+        }\n+    }\n+\n+    /**\n+     * Checks if all given files are found in the archive.\n+     *\n+     * @param fileNamesToCheck all file names that should be inside the archive\n+     * @return <tt>true</tt> if the archive contains all the given files, <tt>false</tt> otherwise\n+     */\n+    protected boolean containsEntries(String... fileNamesToCheck) {\n+        ArrayList<? extends ZipEntry> zipEntries = Collections.list(zipFile.entries());\n+\n+        return Arrays.stream(fileNamesToCheck)\n+                     .allMatch(fileName -> zipEntries.stream().anyMatch(entry -> entry.getName().equals(fileName)));\n+    }\n+\n+    @Override\n+    protected final boolean canHandleFileExtension(@Nullable String fileExtension) {\n+        return \"zip\".equalsIgnoreCase(fileExtension);\n+    }\n+\n+    @Override\n+    protected void executeForStream(String filename, InputStream in) throws Exception {\n+        // never called in overwritten execute method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "624f835cb8926d6ade0dd49cf49b37ae65cf9baa"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjU1MzY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzozMTo0NVrOHEBMSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzozMTo0NVrOHEBMSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3NTg4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"zip\".equalsIgnoreCase(fileExtension);\n          \n          \n            \n                    return FILE_EXTENSION_ZIP.equalsIgnoreCase(fileExtension);", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473975883", "createdAt": "2020-08-20T13:31:45Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    private ZipFile zipFile;\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    public void execute() throws Exception {\n+        VirtualFile file = process.require(fileParameter);\n+\n+        if (canHandleFileExtension(file.fileExtension())) {\n+            try (FileHandle fileHandle = file.download()) {\n+                backupInputFile(file.name(), fileHandle);\n+                zipFile = new ZipFile(fileHandle.getFile());\n+                importEntries();\n+            }\n+        } else {\n+            throw Exceptions.createHandled().withNLSKey(\"FileImportJob.fileNotSupported\").handle();\n+        }\n+    }\n+\n+    protected abstract void importEntries() throws Exception;\n+\n+    /**\n+     * Fetches an entry from the archive and returns it's input stream.\n+     * <p>\n+     * Note, that previous opened input stream might get closed by performing this action.\n+     *\n+     * @param fileName   the name of the file to fetch\n+     * @param isRequired flag if the file is required\n+     * @return input stream for the requested file\n+     * @throws Exception in case of an exception during fetching or if the file wasn't found but is required\n+     */\n+    @Nullable\n+    protected InputStream fetchEntry(String fileName, boolean isRequired) throws Exception {\n+        Enumeration<? extends ZipEntry> zipEntries = zipFile.entries();\n+        while (zipEntries.hasMoreElements()) {\n+            ZipEntry zipEntry = zipEntries.nextElement();\n+\n+            if (Strings.areEqual(fileName, zipEntry.getName())) {\n+                return zipFile.getInputStream(zipEntry);\n+            }\n+        }\n+\n+        handleMissingFile(fileName, isRequired);\n+        return null;\n+    }\n+\n+    protected void handleMissingFile(String fileName, boolean isRequired) {\n+        if (isRequired) {\n+            throw Exceptions.createHandled()\n+                            .withNLSKey(\"ArchiveImportJob.errorMsg.requiredFileMissing\")\n+                            .set(\"fileName\", fileName)\n+                            .handle();\n+        } else {\n+            process.log(ProcessLog.warn()\n+                                  .withNLSKey(\"ArchiveImportJob.errorMsg.optionalFileMissing\")\n+                                  .withContext(\"fileName\", fileName)\n+                                  .withMessageType(fileName));\n+        }\n+    }\n+\n+    /**\n+     * Checks if all given files are found in the archive.\n+     *\n+     * @param fileNamesToCheck all file names that should be inside the archive\n+     * @return <tt>true</tt> if the archive contains all the given files, <tt>false</tt> otherwise\n+     */\n+    protected boolean containsEntries(String... fileNamesToCheck) {\n+        ArrayList<? extends ZipEntry> zipEntries = Collections.list(zipFile.entries());\n+\n+        return Arrays.stream(fileNamesToCheck)\n+                     .allMatch(fileName -> zipEntries.stream().anyMatch(entry -> entry.getName().equals(fileName)));\n+    }\n+\n+    @Override\n+    protected final boolean canHandleFileExtension(@Nullable String fileExtension) {\n+        return \"zip\".equalsIgnoreCase(fileExtension);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "624f835cb8926d6ade0dd49cf49b37ae65cf9baa"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjU1NzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzozMjoxOVrOHEBOqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzozMjoxOVrOHEBOqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3NjQ4OQ==", "bodyText": "JavaDoc", "url": "https://github.com/scireum/sirius-biz/pull/843#discussion_r473976489", "createdAt": "2020-08-20T13:32:19Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jobs/batch/file/ArchiveImportJob.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.process.logs.ProcessLog;\n+import sirius.biz.storage.layer1.FileHandle;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.biz.storage.layer3.VirtualFile;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.health.Exceptions;\n+\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+/**\n+ * Provides an import job which allows to import data from multiple archived files in a specific order.\n+ */\n+public abstract class ArchiveImportJob extends FileImportJob {\n+\n+    private ZipFile zipFile;\n+\n+    /**\n+     * Creates a new job for the given process context.\n+     *\n+     * @param fileParameter the parameter which is used to derive the import file from\n+     * @param process       the process context in which the job is executed\n+     */\n+    protected ArchiveImportJob(FileParameter fileParameter, ProcessContext process) {\n+        super(fileParameter, process);\n+    }\n+\n+    @Override\n+    public void execute() throws Exception {\n+        VirtualFile file = process.require(fileParameter);\n+\n+        if (canHandleFileExtension(file.fileExtension())) {\n+            try (FileHandle fileHandle = file.download()) {\n+                backupInputFile(file.name(), fileHandle);\n+                zipFile = new ZipFile(fileHandle.getFile());\n+                importEntries();\n+            }\n+        } else {\n+            throw Exceptions.createHandled().withNLSKey(\"FileImportJob.fileNotSupported\").handle();\n+        }\n+    }\n+\n+    protected abstract void importEntries() throws Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "624f835cb8926d6ade0dd49cf49b37ae65cf9baa"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2006, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}