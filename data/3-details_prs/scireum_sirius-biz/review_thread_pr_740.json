{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzQyMTA0", "number": 740, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1NTo0NlrOD6Ga8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowODozMVrOD6Gl9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjQ5MjAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/DictionaryBasedImportJobFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1NTo0NlrOGRvbEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1NTo0NlrOGRvbEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NTk1Mg==", "bodyText": "Warum in 2 Zeilen?", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421255952", "createdAt": "2020-05-07T05:55:46Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/jobs/batch/file/DictionaryBasedImportJobFactory.java", "diffHunk": "@@ -23,11 +23,26 @@\n     /**\n      * Contains the parameter which is used to determine if empty values should be ignored).\n      */\n-    protected final BooleanParameter ignoreEmptyParameter;\n+    protected final BooleanParameter ignoreEmptyParameter = createIgnoreEmptyParameter();\n \n-    protected DictionaryBasedImportJobFactory() {\n+    /**\n+     * Creates the parameter which determines if empty rows should be ignored.\n+     * <p>\n+     * This is provided as a helper method so that other / similar jobs can re-use it.\n+     * We do not re-use the same parameter, as a parameter isn't immutable, so a global constant could\n+     * be easily set into an inconsistent state.\n+     *\n+     * @return the completely initialized parameter.\n+     */\n+    public static BooleanParameter createIgnoreEmptyParameter() {\n+        BooleanParameter ignoreEmptyParameter;\n         ignoreEmptyParameter = new BooleanParameter(\"ignoreEmpty\", \"$DictionaryBasedImportJobFactory.ignoreEmpty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6636fd4055b348f8471b924804766ee0aab9de5c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjQ5NDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportJobFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1Njo1NlrOGRvcng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1OToyN1rOGRvgBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NjM1MA==", "bodyText": "Hilft uns das in irgendeiner Form weiter? Dann kann man den Konstruktor doch sowieso nur aus den Kindklassen aufrufen?", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421256350", "createdAt": "2020-05-07T05:56:56Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportJobFactory.java", "diffHunk": "@@ -31,13 +31,28 @@\n     /**\n      * Determines the {@link ImportMode}.\n      */\n-    protected final EnumParameter<ImportMode> importModeParameter;\n+    protected final EnumParameter<ImportMode> importModeParameter = createImportModeParameter();\n \n-    protected EntityImportJobFactory() {\n-        importModeParameter = new EnumParameter<>(\"importMode\", \"$EntityImportJobFactory.importMode\", ImportMode.class);\n+    /**\n+     * Creates the parameter which determines the import mode to use.\n+     * <p>\n+     * This is provided as a helper method so that other / similar jobs can re-use it.\n+     * We do not re-use the same parameter, as a parameter isn't immutable, so a global constant could\n+     * be easily set into an inconsistent state.\n+     *\n+     * @return the completely initialized parameter.\n+     */\n+    public static EnumParameter<ImportMode> createImportModeParameter() {\n+        EnumParameter<ImportMode> importModeParameter =\n+                new EnumParameter<>(\"importMode\", \"$EntityImportJobFactory.importMode\", ImportMode.class);\n         importModeParameter.withDefault(ImportMode.NEW_AND_UPDATES);\n         importModeParameter.markRequired();\n         importModeParameter.withDescription(\"$EntityImportJobFactory.importMode.help\");\n+        return importModeParameter;\n+    }\n+\n+    protected EntityImportJobFactory() {\n+        // Makes the constructor protected as this is an abstract class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6636fd4055b348f8471b924804766ee0aab9de5c"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzIyMg==", "bodyText": "Ist in meinen Augen erstmal nur zus\u00e4tzlicher Code, der nix bringt...", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421257222", "createdAt": "2020-05-07T05:59:27Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportJobFactory.java", "diffHunk": "@@ -31,13 +31,28 @@\n     /**\n      * Determines the {@link ImportMode}.\n      */\n-    protected final EnumParameter<ImportMode> importModeParameter;\n+    protected final EnumParameter<ImportMode> importModeParameter = createImportModeParameter();\n \n-    protected EntityImportJobFactory() {\n-        importModeParameter = new EnumParameter<>(\"importMode\", \"$EntityImportJobFactory.importMode\", ImportMode.class);\n+    /**\n+     * Creates the parameter which determines the import mode to use.\n+     * <p>\n+     * This is provided as a helper method so that other / similar jobs can re-use it.\n+     * We do not re-use the same parameter, as a parameter isn't immutable, so a global constant could\n+     * be easily set into an inconsistent state.\n+     *\n+     * @return the completely initialized parameter.\n+     */\n+    public static EnumParameter<ImportMode> createImportModeParameter() {\n+        EnumParameter<ImportMode> importModeParameter =\n+                new EnumParameter<>(\"importMode\", \"$EntityImportJobFactory.importMode\", ImportMode.class);\n         importModeParameter.withDefault(ImportMode.NEW_AND_UPDATES);\n         importModeParameter.markRequired();\n         importModeParameter.withDescription(\"$EntityImportJobFactory.importMode.help\");\n+        return importModeParameter;\n+    }\n+\n+    protected EntityImportJobFactory() {\n+        // Makes the constructor protected as this is an abstract class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NjM1MA=="}, "originalCommit": {"oid": "6636fd4055b348f8471b924804766ee0aab9de5c"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUwMDg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/web/BasePageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1OTozNVrOGRvgQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1OTozNVrOGRvgQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzI4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these\n          \n          \n            \n                 *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as these", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421257283", "createdAt": "2020-05-07T05:59:35Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/web/BasePageHelper.java", "diffHunk": "@@ -159,24 +160,27 @@ public B addFacet(Facet facet, BiConsumer<Facet, Q> filter, BiConsumer<Facet, Q>\n     /**\n      * Adds a time series based filter which permits to filter on certain time ranges.\n      *\n-     * @param name   the name of the field to filter on\n-     * @param title  the title of the filter shown to the user\n-     * @param ranges the ranges which are supported as filter values\n+     * @param name         the name of the field to filter on\n+     * @param title        the title of the filter shown to the user\n+     * @param useLocalDate determines if the filter should be applied as {@link java.time.LocalDate} (<tt>true</tt>)\n+     *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a23655779800ed792b71af0229755c49631140"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUwMTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/web/ElasticPageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1OTo1OFrOGRvgvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTo1OTo1OFrOGRvgvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzQwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these\n          \n          \n            \n                 *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as these", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421257407", "createdAt": "2020-05-07T05:59:58Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/web/ElasticPageHelper.java", "diffHunk": "@@ -120,24 +120,36 @@ protected ElasticPageHelper(ElasticQuery<E> query) {\n     /**\n      * Adds a time series based aggregation.\n      *\n-     * @param field  the field to filter on\n-     * @param ranges the ranges which are supported as filter values\n+     * @param field        the field to filter on\n+     * @param useLocalDate determines if the filter should be applied as {@link java.time.LocalDate} (<tt>true</tt>)\n+     *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a23655779800ed792b71af0229755c49631140"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUwMTgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/LineBasedImportExportJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMDowMlrOGRvgyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMDowMlrOGRvgyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzQxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This is implemented by a {@link LineBasedImportExportJobFactory} and will reaa line based file, process a row\n          \n          \n            \n             * This is implemented by a {@link LineBasedImportExportJobFactory} and will read a line based file, process a row", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421257418", "createdAt": "2020-05-07T06:00:02Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/jobs/batch/file/LineBasedImportExportJob.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileOrDirectoryParameter;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.kernel.commons.Values;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides a job for transforming a line based file into another.\n+ * <p>\n+ * This is implemented by a {@link LineBasedImportExportJobFactory} and will reaa line based file, process a row", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6636fd4055b348f8471b924804766ee0aab9de5c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUwMjA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/web/ElasticPageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMDowOVrOGRvg7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMDowOVrOGRvg7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzQ1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these\n          \n          \n            \n                 *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as these", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421257454", "createdAt": "2020-05-07T06:00:09Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/web/ElasticPageHelper.java", "diffHunk": "@@ -120,24 +120,36 @@ protected ElasticPageHelper(ElasticQuery<E> query) {\n     /**\n      * Adds a time series based aggregation.\n      *\n-     * @param field  the field to filter on\n-     * @param ranges the ranges which are supported as filter values\n+     * @param field        the field to filter on\n+     * @param useLocalDate determines if the filter should be applied as {@link java.time.LocalDate} (<tt>true</tt>)\n+     *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these\n+     *                     are entirely differently encoded in the database.\n+     * @param ranges       the ranges which are supported as filter values\n      * @return the helper itself for fluent method calls\n      */\n-    public ElasticPageHelper<E> addTimeAggregation(Mapping field, DateRange... ranges) {\n-        return addTimeAggregation(field, baseQuery.getDescriptor().findProperty(field.toString()).getLabel(), ranges);\n+    public ElasticPageHelper<E> addTimeAggregation(Mapping field, boolean useLocalDate, DateRange... ranges) {\n+        return addTimeAggregation(field,\n+                                  useLocalDate,\n+                                  baseQuery.getDescriptor().findProperty(field.toString()).getLabel(),\n+                                  ranges);\n     }\n \n     /**\n      * Adds a time series based aggregation.\n      *\n-     * @param field  the field to filter on\n-     * @param title  the title of the filter shown to the user\n-     * @param ranges the ranges which are supported as filter values\n+     * @param field        the field to filter on\n+     * @param title        the title of the filter shown to the user\n+     * @param useLocalDate determines if the filter should be applied as {@link java.time.LocalDate} (<tt>true</tt>)\n+     *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a23655779800ed792b71af0229755c49631140"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUwMjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/web/MongoPageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMDoyNlrOGRvhOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMDoyNlrOGRvhOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzUyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these\n          \n          \n            \n                 *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as these", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421257529", "createdAt": "2020-05-07T06:00:26Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/web/MongoPageHelper.java", "diffHunk": "@@ -89,24 +89,36 @@ protected MongoPageHelper(MongoQuery<E> query) {\n     /**\n      * Adds a time series based aggregation.\n      *\n-     * @param field  the field to filter on\n-     * @param ranges the ranges which are supported as filter values\n+     * @param field        the field to filter on\n+     * @param useLocalDate determines if the filter should be applied as {@link java.time.LocalDate} (<tt>true</tt>)\n+     *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a23655779800ed792b71af0229755c49631140"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUwMjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/web/MongoPageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMDozNFrOGRvhZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMDozNFrOGRvhZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1NzU3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these\n          \n          \n            \n                 *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as these", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421257575", "createdAt": "2020-05-07T06:00:34Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/web/MongoPageHelper.java", "diffHunk": "@@ -89,24 +89,36 @@ protected MongoPageHelper(MongoQuery<E> query) {\n     /**\n      * Adds a time series based aggregation.\n      *\n-     * @param field  the field to filter on\n-     * @param ranges the ranges which are supported as filter values\n+     * @param field        the field to filter on\n+     * @param useLocalDate determines if the filter should be applied as {@link java.time.LocalDate} (<tt>true</tt>)\n+     *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these\n+     *                     are entirely differently encoded in the database.\n+     * @param ranges       the ranges which are supported as filter values\n      * @return the helper itself for fluent method calls\n      */\n-    public MongoPageHelper<E> addTimeAggregation(Mapping field, DateRange... ranges) {\n-        return addTimeAggregation(field, baseQuery.getDescriptor().findProperty(field.toString()).getLabel(), ranges);\n+    public MongoPageHelper<E> addTimeAggregation(Mapping field, boolean useLocalDate, DateRange... ranges) {\n+        return addTimeAggregation(field,\n+                                  baseQuery.getDescriptor().findProperty(field.toString()).getLabel(),\n+                                  useLocalDate,\n+                                  ranges);\n     }\n \n     /**\n      * Adds a time series based aggregation.\n      *\n-     * @param field  the field to filter on\n-     * @param title  the title of the filter shown to the user\n-     * @param ranges the ranges which are supported as filter values\n+     * @param field        the field to filter on\n+     * @param title        the title of the filter shown to the user\n+     * @param useLocalDate determines if the filter should be applied as {@link java.time.LocalDate} (<tt>true</tt>)\n+     *                     or as {@link java.time.LocalDateTime} (<tt>false</tt>). This is crucial, as a these", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7a23655779800ed792b71af0229755c49631140"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUwODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportJob.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMzoyMVrOGRvk7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowMzoyMVrOGRvk7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODQ3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 *     By default we instantly create or update the entity. Note that if this is set\n          \n          \n            \n                 * By default we instantly create or update the entity. Note that if this is set", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421258479", "createdAt": "2020-05-07T06:03:21Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportJob.java", "diffHunk": "@@ -175,17 +175,18 @@ protected E fillAndVerify(E entity, Context context) {\n      * Creates or updates the given entity.\n      * <p>\n      * This can be overwritten to use a custom way of persisting data. Also this can be used to perfrom\n-     * post-save activities. Note however, in the default implementation a batch update is used.\n+     * post-save activities.\n      * <p>\n+     *     By default we instantly create or update the entity. Note that if this is set", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "867150f6bd08c893f081e560d2b5104d6fa2023f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUxMTc4OnYy", "diffSide": "RIGHT", "path": "src/main/resources/biz_de.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowNDoyOFrOGRvmhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjo1Nzo0MFrOGR9QNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODg4Ng==", "bodyText": "Englische \u00dcbersetzungen?", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421258886", "createdAt": "2020-05-07T06:04:28Z", "author": {"login": "sabieber"}, "path": "src/main/resources/biz_de.properties", "diffHunk": "@@ -211,6 +211,8 @@ FileImportJob.importingZipFile = Die Datei wird f\u00fcr den Import entpackt.\n FileImportJob.importingZippedFile = Die entpackte Datei '${filename}' wird importiert.\n FileImportJob.noZippedFileFound = Das Archiv enth\u00e4lt keine unterst\u00fctzte Datei.\n FileImportJobFactory.file = Datei\n+LineBasedImportExportJobFactory.outputFile = Ausgabedatei", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d1524dda53085fa9e691b1451d427565288b43d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4MjU1MQ==", "bodyText": "mach mer in lokalise - i18n ist keiner entwicklerarbeit, das ist zu teuer", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421482551", "createdAt": "2020-05-07T12:57:40Z", "author": {"login": "andyHa"}, "path": "src/main/resources/biz_de.properties", "diffHunk": "@@ -211,6 +211,8 @@ FileImportJob.importingZipFile = Die Datei wird f\u00fcr den Import entpackt.\n FileImportJob.importingZippedFile = Die entpackte Datei '${filename}' wird importiert.\n FileImportJob.noZippedFileFound = Das Archiv enth\u00e4lt keine unterst\u00fctzte Datei.\n FileImportJobFactory.file = Datei\n+LineBasedImportExportJobFactory.outputFile = Ausgabedatei", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1ODg4Ng=="}, "originalCommit": {"oid": "5d1524dda53085fa9e691b1451d427565288b43d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUxNTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/DictionaryBasedImportJobFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowNjowOVrOGRvooA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowNjowOVrOGRvooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1OTQyNA==", "bodyText": "Wieso ist die Methode ned chainbar?", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421259424", "createdAt": "2020-05-07T06:06:09Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/jobs/batch/file/DictionaryBasedImportJobFactory.java", "diffHunk": "@@ -23,11 +23,26 @@\n     /**\n      * Contains the parameter which is used to determine if empty values should be ignored).\n      */\n-    protected final BooleanParameter ignoreEmptyParameter;\n+    protected final BooleanParameter ignoreEmptyParameter = createIgnoreEmptyParameter();\n \n-    protected DictionaryBasedImportJobFactory() {\n+    /**\n+     * Creates the parameter which determines if empty rows should be ignored.\n+     * <p>\n+     * This is provided as a helper method so that other / similar jobs can re-use it.\n+     * We do not re-use the same parameter, as a parameter isn't immutable, so a global constant could\n+     * be easily set into an inconsistent state.\n+     *\n+     * @return the completely initialized parameter.\n+     */\n+    public static BooleanParameter createIgnoreEmptyParameter() {\n+        BooleanParameter ignoreEmptyParameter;\n         ignoreEmptyParameter = new BooleanParameter(\"ignoreEmpty\", \"$DictionaryBasedImportJobFactory.ignoreEmpty\");\n         ignoreEmptyParameter.withDescription(\"$DictionaryBasedImportJobFactory.ignoreEmpty.help\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675ed05aeccd655514fcfa92b83dae4cfcf95d86"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUxNjA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportJobFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowNjoyN1rOGRvo_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowNjoyN1rOGRvo_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1OTUxOQ==", "bodyText": "sind die alle nicht chainbar?", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421259519", "createdAt": "2020-05-07T06:06:27Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/jobs/batch/file/EntityImportJobFactory.java", "diffHunk": "@@ -31,13 +31,28 @@\n     /**\n      * Determines the {@link ImportMode}.\n      */\n-    protected final EnumParameter<ImportMode> importModeParameter;\n+    protected final EnumParameter<ImportMode> importModeParameter = createImportModeParameter();\n \n-    protected EntityImportJobFactory() {\n-        importModeParameter = new EnumParameter<>(\"importMode\", \"$EntityImportJobFactory.importMode\", ImportMode.class);\n+    /**\n+     * Creates the parameter which determines the import mode to use.\n+     * <p>\n+     * This is provided as a helper method so that other / similar jobs can re-use it.\n+     * We do not re-use the same parameter, as a parameter isn't immutable, so a global constant could\n+     * be easily set into an inconsistent state.\n+     *\n+     * @return the completely initialized parameter.\n+     */\n+    public static EnumParameter<ImportMode> createImportModeParameter() {\n+        EnumParameter<ImportMode> importModeParameter =\n+                new EnumParameter<>(\"importMode\", \"$EntityImportJobFactory.importMode\", ImportMode.class);\n         importModeParameter.withDefault(ImportMode.NEW_AND_UPDATES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675ed05aeccd655514fcfa92b83dae4cfcf95d86"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUxODQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/LineBasedImportExportJobFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowNzo0MlrOGRvqlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMzowNjoxMFrOGR9lFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1OTkyNQ==", "bodyText": "k\u00f6nnen wir die nicht wie bei den anderen jobs schachteln?", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421259925", "createdAt": "2020-05-07T06:07:42Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/jobs/batch/file/LineBasedImportExportJobFactory.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.jobs.params.Parameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileOrDirectoryParameter;\n+\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a base implementation for batch jobs which transform line based files.\n+ * <p>\n+ * Using a {@link LineBasedImportExportJob} a line based file is read line by line and can write lines\n+ * into the provided (line based) output file.\n+ */\n+public abstract class LineBasedImportExportJobFactory extends LineBasedImportJobFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6636fd4055b348f8471b924804766ee0aab9de5c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ4Nzg5NA==", "bodyText": "ich w\u00fcsste wie :-/ - ideas welcome...", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421487894", "createdAt": "2020-05-07T13:06:10Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jobs/batch/file/LineBasedImportExportJobFactory.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.jobs.params.Parameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileOrDirectoryParameter;\n+\n+import java.util.function.Consumer;\n+\n+/**\n+ * Provides a base implementation for batch jobs which transform line based files.\n+ * <p>\n+ * Using a {@link LineBasedImportExportJob} a line based file is read line by line and can write lines\n+ * into the provided (line based) output file.\n+ */\n+public abstract class LineBasedImportExportJobFactory extends LineBasedImportJobFactory {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI1OTkyNQ=="}, "originalCommit": {"oid": "6636fd4055b348f8471b924804766ee0aab9de5c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjUyMDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jobs/batch/file/LineBasedImportExportJob.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjowODozMVrOGRvrng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTo1NjoyM1rOGR3RUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MDE5MA==", "bodyText": "Wenn super.close ne Exception wirft, wird der Export-Job nicht geschlossen :(\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super.close();\n          \n          \n            \n                    exportJob.close();\n          \n          \n            \n                    try (Closeable c = super) {\n          \n          \n            \n                        exportJob.close();\n          \n          \n            \n                    }\n          \n      \n    \n    \n  \n\nDas try with resources macht intern ziemlich viele coole Sachen: https://www.oracle.com/technical-resources/articles/java/trywithresources.html", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421260190", "createdAt": "2020-05-07T06:08:31Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/jobs/batch/file/LineBasedImportExportJob.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileOrDirectoryParameter;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.kernel.commons.Values;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides a job for transforming a line based file into another.\n+ * <p>\n+ * This is implemented by a {@link LineBasedImportExportJobFactory} and will reaa line based file, process a row\n+ * and output one or more rows into an output file.\n+ */\n+public abstract class LineBasedImportExportJob extends LineBasedImportJob {\n+\n+    protected final LineBasedExportJob exportJob;\n+\n+    /**\n+     * Creates a new job for the given factory, name and process.\n+     *\n+     * @param inputFileParameter   the parameter which is used to derive the import file from\n+     * @param destinationParameter the parameter used to select the destination for the file being written\n+     * @param fileTypeParameter    the file type to use when writing the line based data\n+     * @param process              the process context itself\n+     */\n+    protected LineBasedImportExportJob(FileParameter inputFileParameter,\n+                                       FileOrDirectoryParameter destinationParameter,\n+                                       EnumParameter<ExportFileType> fileTypeParameter,\n+                                       ProcessContext process) {\n+        super(inputFileParameter, process);\n+        this.exportJob = new LineBasedExportJob(destinationParameter, fileTypeParameter, process) {\n+            @Override\n+            protected void executeIntoExport() throws Exception {\n+                // ignored\n+            }\n+\n+            @Override\n+            protected String determineFilenameWithoutExtension() {\n+                return LineBasedImportExportJob.this.determineFilenameWithoutExtension();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Determines the base name to use for the file.\n+     * <p>\n+     * This will be expanded by the date and also by additional suffixes to generate a unique name. Also the file\n+     * extension as supplied by {@link FileExportJob#determineFileExtension()} will be appended.\n+     *\n+     * @return the base file name to use\n+     */\n+    protected abstract String determineFilenameWithoutExtension();\n+\n+    @Override\n+    public void execute() throws Exception {\n+        exportJob.execute();\n+        super.execute();\n+    }\n+\n+    @Override\n+    public void handleRow(int lineNumber, Values row) {\n+        handleRow(lineNumber, row, exportJob.export);\n+    }\n+\n+    /**\n+     * Invoked for each line in the given input file.\n+     * <p>\n+     * The provided export writes into the selected output file.\n+     * </p>\n+     *\n+     * @param lineNumber the line of the import being processed\n+     * @param row        the data in this line\n+     * @param export     the export to write to\n+     */\n+    protected abstract void handleRow(int lineNumber, Values row, LineBasedExport export);\n+\n+    @Override\n+    public void close() throws IOException {\n+        super.close();\n+        exportJob.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6636fd4055b348f8471b924804766ee0aab9de5c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM4NDUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super.close();\n          \n          \n            \n                    exportJob.close();\n          \n          \n            \n                    try(Closeable c1 = super, Closeable c2 = exportJob) {}\n          \n      \n    \n    \n  \n\ngeht nat\u00fcrlich auch, falls es compiliert", "url": "https://github.com/scireum/sirius-biz/pull/740#discussion_r421384530", "createdAt": "2020-05-07T09:56:23Z", "author": {"login": "qw3ry"}, "path": "src/main/java/sirius/biz/jobs/batch/file/LineBasedImportExportJob.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jobs.batch.file;\n+\n+import sirius.biz.jobs.params.EnumParameter;\n+import sirius.biz.process.ProcessContext;\n+import sirius.biz.storage.layer3.FileOrDirectoryParameter;\n+import sirius.biz.storage.layer3.FileParameter;\n+import sirius.kernel.commons.Values;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Provides a job for transforming a line based file into another.\n+ * <p>\n+ * This is implemented by a {@link LineBasedImportExportJobFactory} and will reaa line based file, process a row\n+ * and output one or more rows into an output file.\n+ */\n+public abstract class LineBasedImportExportJob extends LineBasedImportJob {\n+\n+    protected final LineBasedExportJob exportJob;\n+\n+    /**\n+     * Creates a new job for the given factory, name and process.\n+     *\n+     * @param inputFileParameter   the parameter which is used to derive the import file from\n+     * @param destinationParameter the parameter used to select the destination for the file being written\n+     * @param fileTypeParameter    the file type to use when writing the line based data\n+     * @param process              the process context itself\n+     */\n+    protected LineBasedImportExportJob(FileParameter inputFileParameter,\n+                                       FileOrDirectoryParameter destinationParameter,\n+                                       EnumParameter<ExportFileType> fileTypeParameter,\n+                                       ProcessContext process) {\n+        super(inputFileParameter, process);\n+        this.exportJob = new LineBasedExportJob(destinationParameter, fileTypeParameter, process) {\n+            @Override\n+            protected void executeIntoExport() throws Exception {\n+                // ignored\n+            }\n+\n+            @Override\n+            protected String determineFilenameWithoutExtension() {\n+                return LineBasedImportExportJob.this.determineFilenameWithoutExtension();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Determines the base name to use for the file.\n+     * <p>\n+     * This will be expanded by the date and also by additional suffixes to generate a unique name. Also the file\n+     * extension as supplied by {@link FileExportJob#determineFileExtension()} will be appended.\n+     *\n+     * @return the base file name to use\n+     */\n+    protected abstract String determineFilenameWithoutExtension();\n+\n+    @Override\n+    public void execute() throws Exception {\n+        exportJob.execute();\n+        super.execute();\n+    }\n+\n+    @Override\n+    public void handleRow(int lineNumber, Values row) {\n+        handleRow(lineNumber, row, exportJob.export);\n+    }\n+\n+    /**\n+     * Invoked for each line in the given input file.\n+     * <p>\n+     * The provided export writes into the selected output file.\n+     * </p>\n+     *\n+     * @param lineNumber the line of the import being processed\n+     * @param row        the data in this line\n+     * @param export     the export to write to\n+     */\n+    protected abstract void handleRow(int lineNumber, Values row, LineBasedExport export);\n+\n+    @Override\n+    public void close() throws IOException {\n+        super.close();\n+        exportJob.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI2MDE5MA=="}, "originalCommit": {"oid": "6636fd4055b348f8471b924804766ee0aab9de5c"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2060, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}