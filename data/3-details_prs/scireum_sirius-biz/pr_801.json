{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMzA1NjY1", "number": 801, "title": "Refactorings on the Analytics Scheduler", "bodyText": "", "createdAt": "2020-06-30T21:27:25Z", "url": "https://github.com/scireum/sirius-biz/pull/801", "merged": true, "mergeCommit": {"oid": "b7ba74f3239f781625eaad033b547d52a6507d19"}, "closed": true, "closedAt": "2020-07-01T07:56:33Z", "author": {"login": "andyHa"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwcbCJgH2gAyNDQyMzA1NjY1Ojc4M2QzMzI3NTUwODExNTUwYzRhNjQyNzM5YWUzMzU1NTk5ZmJkMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwkpgfAH2gAyNDQyMzA1NjY1Ojk0YmVmMjA5NzFkOTUyMDFmZTA4ZmFhYWUzN2M2NDY4MzY4MTQ0ZmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "783d3327550811550c4a642739ae3355599fbd0e", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/783d3327550811550c4a642739ae3355599fbd0e", "committedDate": "2020-06-30T21:21:19Z", "message": "Extracts common code to simplify the batch emitters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab64c098ed2798532cdf01462fccbdbdc756b7c2", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/ab64c098ed2798532cdf01462fccbdbdc756b7c2", "committedDate": "2020-06-30T21:22:01Z", "message": "Performs refactorings necessarry after re-writing batch emitters."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e0d8a50777f8e6a81ecf9615572f5dc6866c180", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/1e0d8a50777f8e6a81ecf9615572f5dc6866c180", "committedDate": "2020-06-30T21:23:02Z", "message": "Provides a special kind of MetricComputer for large tasks.\n\nThis has a heavily reduced batch size, as the tasks within\nare expected to be larger. Also there is no daily best effort\ncomputation for this metric."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ffca020b87fbec0d53296f31cceec4fd8d7fa5c", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/8ffca020b87fbec0d53296f31cceec4fd8d7fa5c", "committedDate": "2020-06-30T21:23:32Z", "message": "Adds a missing grant to the auto-setup for MongoDB."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1f61adb408a24d2f607e4dedb70bea8346d691c", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/f1f61adb408a24d2f607e4dedb70bea8346d691c", "committedDate": "2020-06-30T21:26:50Z", "message": "Provides a maintenance command for managing and executing analytical schedulers."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTU5OTc4", "url": "https://github.com/scireum/sirius-biz/pull/801#pullrequestreview-440559978", "createdAt": "2020-07-01T05:42:31Z", "commit": {"oid": "f1f61adb408a24d2f607e4dedb70bea8346d691c"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTo0MjozMVrOGrXg2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNTo0NTo0MFrOGrXkWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNzE5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param force       determines if executon is forced\n          \n          \n            \n                 * @param force       determines if execution is forced", "url": "https://github.com/scireum/sirius-biz/pull/801#discussion_r448127194", "createdAt": "2020-07-01T05:42:31Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/analytics/scheduler/AnalyticalEngine.java", "diffHunk": "@@ -149,24 +156,31 @@ private Boolean checkIfQueueIsEmpty(String queueName) {\n      * Creates an entry which is processed by the {@link AnalyticsScheduler#getExecutorForScheduling() scheduling executor}\n      * and will eventually invoke {@link AnalyticsScheduler#scheduleBatches(Consumer)} for the given scheduler.\n      * <p>\n-     * This method also enforces the {@link AnalyticsScheduler#getInterval() scheduling interval}.\n+     * This method also enforces the {@link AnalyticsScheduler#getInterval() scheduling interval} unless <tt>force</tt>\n+     * is set to <tt>true</tt>.\n      *\n-     * @param scheduler the scheduler to queue\n+     * @param scheduler   the scheduler to queue\n+     * @param force       determines if executon is forced", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1f61adb408a24d2f607e4dedb70bea8346d691c"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyNzg1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * executions for the current day. If an execution if foced for another day, this will not be recorded\n          \n          \n            \n                 * executions for the current day. If an execution if forced for another day, this will not be recorded", "url": "https://github.com/scireum/sirius-biz/pull/801#discussion_r448127858", "createdAt": "2020-07-01T05:44:57Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/analytics/scheduler/AnalyticalEngine.java", "diffHunk": "@@ -193,12 +207,25 @@ private boolean shouldExecuteAgain(AnalyticsScheduler scheduler) {\n             return true;\n         }\n \n-        LocalDateTime lastExecution =\n-                flags.readExecutionFlag(computeExecutionFlagName(scheduler), EXECUTION_FLAG).orElse(null);\n+        LocalDateTime lastExecution = getLastExecution(scheduler).orElse(null);\n         if (lastExecution == null) {\n             return true;\n         }\n \n         return lastExecution.getMonthValue() != LocalDate.now().getMonthValue();\n     }\n+\n+    /**\n+     * Determines the last execution timestamp of the given scheduler.\n+     * <p>\n+     * Note that this only accounts for regular (planned) invocations of the scheduler as well as forced\n+     * executions for the current day. If an execution if foced for another day, this will not be recorded", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1f61adb408a24d2f607e4dedb70bea8346d691c"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyODA4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * as execution flag and therefore not be reported here.\n          \n          \n            \n                 * as execution flag and therefore not be returned here.", "url": "https://github.com/scireum/sirius-biz/pull/801#discussion_r448128089", "createdAt": "2020-07-01T05:45:40Z", "author": {"login": "mkeckmkeck"}, "path": "src/main/java/sirius/biz/analytics/scheduler/AnalyticalEngine.java", "diffHunk": "@@ -193,12 +207,25 @@ private boolean shouldExecuteAgain(AnalyticsScheduler scheduler) {\n             return true;\n         }\n \n-        LocalDateTime lastExecution =\n-                flags.readExecutionFlag(computeExecutionFlagName(scheduler), EXECUTION_FLAG).orElse(null);\n+        LocalDateTime lastExecution = getLastExecution(scheduler).orElse(null);\n         if (lastExecution == null) {\n             return true;\n         }\n \n         return lastExecution.getMonthValue() != LocalDate.now().getMonthValue();\n     }\n+\n+    /**\n+     * Determines the last execution timestamp of the given scheduler.\n+     * <p>\n+     * Note that this only accounts for regular (planned) invocations of the scheduler as well as forced\n+     * executions for the current day. If an execution if foced for another day, this will not be recorded\n+     * as execution flag and therefore not be reported here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1f61adb408a24d2f607e4dedb70bea8346d691c"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTcyMjA5", "url": "https://github.com/scireum/sirius-biz/pull/801#pullrequestreview-440572209", "createdAt": "2020-07-01T06:15:15Z", "commit": {"oid": "f1f61adb408a24d2f607e4dedb70bea8346d691c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNTcyMDQ4", "url": "https://github.com/scireum/sirius-biz/pull/801#pullrequestreview-440572048", "createdAt": "2020-07-01T06:14:53Z", "commit": {"oid": "f1f61adb408a24d2f607e4dedb70bea8346d691c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoxNDo1M1rOGrYH9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoxNDo1M1rOGrYH9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEzNzIwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Provides a maintenance command to execute analytical schedulers on demand and to also diplay their state.\n          \n          \n            \n             * Provides a maintenance command to execute analytical schedulers on demand and to also display their state.", "url": "https://github.com/scireum/sirius-biz/pull/801#discussion_r448137204", "createdAt": "2020-07-01T06:14:53Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/analytics/scheduler/AnalyticsCommand.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.analytics.scheduler;\n+\n+import sirius.biz.cluster.work.DistributedTaskExecutor;\n+import sirius.biz.cluster.work.DistributedTasks;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.console.Command;\n+import sirius.kernel.nls.NLS;\n+\n+import javax.annotation.Nonnull;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * Provides a maintenance command to execute analytical schedulers on demand and to also diplay their state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1f61adb408a24d2f607e4dedb70bea8346d691c"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94bef20971d95201fe08faaae37c6468368144fe", "author": {"user": {"login": "andyHa", "name": "Andreas Haufler"}}, "url": "https://github.com/scireum/sirius-biz/commit/94bef20971d95201fe08faaae37c6468368144fe", "committedDate": "2020-07-01T06:56:22Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Matthias Keck <60612914+mkeckmkeck@users.noreply.github.com>\nCo-authored-by: Sascha Bieberstein <sabieber@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4347, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}