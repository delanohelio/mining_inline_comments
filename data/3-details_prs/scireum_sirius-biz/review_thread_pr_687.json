{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjE3MjQ5", "number": 687, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODowNTozN1rODhy0zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDoyNTo1NFrODh1P9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzYyMzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODowNTozN1rOFsuhJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODowNTozN1rOFsuhJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ0MzgxMw==", "bodyText": "Adjust javadoc as it now handles more than just mongo", "url": "https://github.com/scireum/sirius-biz/pull/687#discussion_r382443813", "createdAt": "2020-02-21T08:05:37Z", "author": {"login": "meg1502"}, "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jdbc;\n+\n+import com.alibaba.fastjson.JSON;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.db.es.ElasticEntity;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.db.mongo.MongoEntity;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Counter;\n+import sirius.web.controller.AutocompleteHelper;\n+import sirius.web.controller.BasicController;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides the management GUI for mongo database related activities.\n+ */\n+@Register(classes = Controller.class)\n+public class MongoAndElasticDatabaseController extends BasicController {\n+\n+    @Part\n+    private Mixing mixing;\n+\n+    /**\n+     * Executes the given mongo query and renders the UI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3bf02811f47e99042571b552e8abb2fa8570bc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzYyNzQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODowNzozMVrOFsujtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxNzozN1rOFswTig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ0NDQ2OA==", "bodyText": "As this would be more secure and easier to use than the SQL query tool, is there any reason not to include SQL Entities as well?", "url": "https://github.com/scireum/sirius-biz/pull/687#discussion_r382444468", "createdAt": "2020-02-21T08:07:31Z", "author": {"login": "meg1502"}, "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jdbc;\n+\n+import com.alibaba.fastjson.JSON;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.db.es.ElasticEntity;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.db.mongo.MongoEntity;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Counter;\n+import sirius.web.controller.AutocompleteHelper;\n+import sirius.web.controller.BasicController;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides the management GUI for mongo database related activities.\n+ */\n+@Register(classes = Controller.class)\n+public class MongoAndElasticDatabaseController extends BasicController {\n+\n+    @Part\n+    private Mixing mixing;\n+\n+    /**\n+     * Executes the given mongo query and renders the UI.\n+     *\n+     * @param webContext the context containing the query\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/query\")\n+    public void db(WebContext webContext) {\n+        String className = webContext.get(\"class\").asString();\n+        String queryString = webContext.get(\"query\").asString();\n+        int limit = webContext.get(\"limit\").asInt(10);\n+\n+        StringBuilder sourceBuilder = new StringBuilder();\n+        Counter counter = new Counter();\n+\n+        if (Strings.isFilled(className)) {\n+            EntityDescriptor descriptor = mixing.getDescriptor(className.toUpperCase());\n+            Class<? extends BaseEntity> type = descriptor.getType().asSubclass(BaseEntity.class);\n+            Query<?, ?, ?> query = descriptor.getMapper().select(type).queryString(queryString);\n+\n+            sourceBuilder.append(\"/* Number of results: \").append(query.count()).append(\" */\\n\\n\");\n+\n+            ((Query<?, ?, ?>) query.limit(limit)).iterateAll(entity -> addEntity(sourceBuilder, entity, counter));\n+        }\n+\n+        webContext.respondWith()\n+                  .template(\"/templates/biz/model/db.html.pasta\",\n+                            getAvailableEntityTypes(),\n+                            className,\n+                            queryString,\n+                            sourceBuilder.toString(),\n+                            limit);\n+    }\n+\n+    /**\n+     * Provides suggestions for available database entities based on the query.\n+     *\n+     * @param webContext the current web context containing the query\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/query/autocomplete\")\n+    public void entityTypeAutocomplete(WebContext webContext) {\n+        AutocompleteHelper.handle(webContext, ((query, result) -> {\n+            for (Class<?> type : getAvailableEntityTypes()) {\n+                String displayableName = getDisplayableName(type);\n+                if (displayableName.toLowerCase().contains(query.toLowerCase())) {\n+                    result.accept(new AutocompleteHelper.Completion(type.getSimpleName(), displayableName));\n+                }\n+            }\n+        }));\n+    }\n+\n+    private <E extends BaseEntity<?>> void addEntity(StringBuilder sourceBuilder, E entity, Counter counter) {\n+        sourceBuilder.append(\"/* \").append(counter.inc()).append(\" */\").append(\"\\n\");\n+\n+        Map<String, Object> properties = new TreeMap<>();\n+        mixing.getDescriptor(entity.getClass()).getProperties().forEach(property -> {\n+            String name = property.getName();\n+            Object value = property.getValue(entity);\n+\n+            properties.put(name, value);\n+        });\n+\n+        sourceBuilder.append(JSON.toJSONString(properties, true));\n+        sourceBuilder.append(\"\\n\\n\");\n+    }\n+\n+    private List<Class<?>> getAvailableEntityTypes() {\n+        return mixing.getDescriptors()\n+                     .stream()\n+                     .filter(descriptor -> MongoEntity.class.isAssignableFrom(descriptor.getType())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3bf02811f47e99042571b552e8abb2fa8570bc"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2Nzc1OA==", "bodyText": "Yes, because it's quite difficult to filter out unused SQL entities.", "url": "https://github.com/scireum/sirius-biz/pull/687#discussion_r382467758", "createdAt": "2020-02-21T09:05:56Z", "author": {"login": "fhaScireum"}, "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jdbc;\n+\n+import com.alibaba.fastjson.JSON;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.db.es.ElasticEntity;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.db.mongo.MongoEntity;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Counter;\n+import sirius.web.controller.AutocompleteHelper;\n+import sirius.web.controller.BasicController;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides the management GUI for mongo database related activities.\n+ */\n+@Register(classes = Controller.class)\n+public class MongoAndElasticDatabaseController extends BasicController {\n+\n+    @Part\n+    private Mixing mixing;\n+\n+    /**\n+     * Executes the given mongo query and renders the UI.\n+     *\n+     * @param webContext the context containing the query\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/query\")\n+    public void db(WebContext webContext) {\n+        String className = webContext.get(\"class\").asString();\n+        String queryString = webContext.get(\"query\").asString();\n+        int limit = webContext.get(\"limit\").asInt(10);\n+\n+        StringBuilder sourceBuilder = new StringBuilder();\n+        Counter counter = new Counter();\n+\n+        if (Strings.isFilled(className)) {\n+            EntityDescriptor descriptor = mixing.getDescriptor(className.toUpperCase());\n+            Class<? extends BaseEntity> type = descriptor.getType().asSubclass(BaseEntity.class);\n+            Query<?, ?, ?> query = descriptor.getMapper().select(type).queryString(queryString);\n+\n+            sourceBuilder.append(\"/* Number of results: \").append(query.count()).append(\" */\\n\\n\");\n+\n+            ((Query<?, ?, ?>) query.limit(limit)).iterateAll(entity -> addEntity(sourceBuilder, entity, counter));\n+        }\n+\n+        webContext.respondWith()\n+                  .template(\"/templates/biz/model/db.html.pasta\",\n+                            getAvailableEntityTypes(),\n+                            className,\n+                            queryString,\n+                            sourceBuilder.toString(),\n+                            limit);\n+    }\n+\n+    /**\n+     * Provides suggestions for available database entities based on the query.\n+     *\n+     * @param webContext the current web context containing the query\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/query/autocomplete\")\n+    public void entityTypeAutocomplete(WebContext webContext) {\n+        AutocompleteHelper.handle(webContext, ((query, result) -> {\n+            for (Class<?> type : getAvailableEntityTypes()) {\n+                String displayableName = getDisplayableName(type);\n+                if (displayableName.toLowerCase().contains(query.toLowerCase())) {\n+                    result.accept(new AutocompleteHelper.Completion(type.getSimpleName(), displayableName));\n+                }\n+            }\n+        }));\n+    }\n+\n+    private <E extends BaseEntity<?>> void addEntity(StringBuilder sourceBuilder, E entity, Counter counter) {\n+        sourceBuilder.append(\"/* \").append(counter.inc()).append(\" */\").append(\"\\n\");\n+\n+        Map<String, Object> properties = new TreeMap<>();\n+        mixing.getDescriptor(entity.getClass()).getProperties().forEach(property -> {\n+            String name = property.getName();\n+            Object value = property.getValue(entity);\n+\n+            properties.put(name, value);\n+        });\n+\n+        sourceBuilder.append(JSON.toJSONString(properties, true));\n+        sourceBuilder.append(\"\\n\\n\");\n+    }\n+\n+    private List<Class<?>> getAvailableEntityTypes() {\n+        return mixing.getDescriptors()\n+                     .stream()\n+                     .filter(descriptor -> MongoEntity.class.isAssignableFrom(descriptor.getType())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ0NDQ2OA=="}, "originalCommit": {"oid": "1d3bf02811f47e99042571b552e8abb2fa8570bc"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3MzA5OA==", "bodyText": "there should be none", "url": "https://github.com/scireum/sirius-biz/pull/687#discussion_r382473098", "createdAt": "2020-02-21T09:17:37Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jdbc;\n+\n+import com.alibaba.fastjson.JSON;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.db.es.ElasticEntity;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.db.mongo.MongoEntity;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Counter;\n+import sirius.web.controller.AutocompleteHelper;\n+import sirius.web.controller.BasicController;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides the management GUI for mongo database related activities.\n+ */\n+@Register(classes = Controller.class)\n+public class MongoAndElasticDatabaseController extends BasicController {\n+\n+    @Part\n+    private Mixing mixing;\n+\n+    /**\n+     * Executes the given mongo query and renders the UI.\n+     *\n+     * @param webContext the context containing the query\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/query\")\n+    public void db(WebContext webContext) {\n+        String className = webContext.get(\"class\").asString();\n+        String queryString = webContext.get(\"query\").asString();\n+        int limit = webContext.get(\"limit\").asInt(10);\n+\n+        StringBuilder sourceBuilder = new StringBuilder();\n+        Counter counter = new Counter();\n+\n+        if (Strings.isFilled(className)) {\n+            EntityDescriptor descriptor = mixing.getDescriptor(className.toUpperCase());\n+            Class<? extends BaseEntity> type = descriptor.getType().asSubclass(BaseEntity.class);\n+            Query<?, ?, ?> query = descriptor.getMapper().select(type).queryString(queryString);\n+\n+            sourceBuilder.append(\"/* Number of results: \").append(query.count()).append(\" */\\n\\n\");\n+\n+            ((Query<?, ?, ?>) query.limit(limit)).iterateAll(entity -> addEntity(sourceBuilder, entity, counter));\n+        }\n+\n+        webContext.respondWith()\n+                  .template(\"/templates/biz/model/db.html.pasta\",\n+                            getAvailableEntityTypes(),\n+                            className,\n+                            queryString,\n+                            sourceBuilder.toString(),\n+                            limit);\n+    }\n+\n+    /**\n+     * Provides suggestions for available database entities based on the query.\n+     *\n+     * @param webContext the current web context containing the query\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/query/autocomplete\")\n+    public void entityTypeAutocomplete(WebContext webContext) {\n+        AutocompleteHelper.handle(webContext, ((query, result) -> {\n+            for (Class<?> type : getAvailableEntityTypes()) {\n+                String displayableName = getDisplayableName(type);\n+                if (displayableName.toLowerCase().contains(query.toLowerCase())) {\n+                    result.accept(new AutocompleteHelper.Completion(type.getSimpleName(), displayableName));\n+                }\n+            }\n+        }));\n+    }\n+\n+    private <E extends BaseEntity<?>> void addEntity(StringBuilder sourceBuilder, E entity, Counter counter) {\n+        sourceBuilder.append(\"/* \").append(counter.inc()).append(\" */\").append(\"\\n\");\n+\n+        Map<String, Object> properties = new TreeMap<>();\n+        mixing.getDescriptor(entity.getClass()).getProperties().forEach(property -> {\n+            String name = property.getName();\n+            Object value = property.getValue(entity);\n+\n+            properties.put(name, value);\n+        });\n+\n+        sourceBuilder.append(JSON.toJSONString(properties, true));\n+        sourceBuilder.append(\"\\n\\n\");\n+    }\n+\n+    private List<Class<?>> getAvailableEntityTypes() {\n+        return mixing.getDescriptors()\n+                     .stream()\n+                     .filter(descriptor -> MongoEntity.class.isAssignableFrom(descriptor.getType())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ0NDQ2OA=="}, "originalCommit": {"oid": "1d3bf02811f47e99042571b552e8abb2fa8570bc"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzYzNzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoxMTo1MlrOFsupxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODoxMTo1MlrOFsupxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ0NjAyMw==", "bodyText": "Adjust javadoc as it now handles more than just mongo", "url": "https://github.com/scireum/sirius-biz/pull/687#discussion_r382446023", "createdAt": "2020-02-21T08:11:52Z", "author": {"login": "meg1502"}, "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jdbc;\n+\n+import com.alibaba.fastjson.JSON;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.db.es.ElasticEntity;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.db.mongo.MongoEntity;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Counter;\n+import sirius.web.controller.AutocompleteHelper;\n+import sirius.web.controller.BasicController;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides the management GUI for mongo database related activities.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3bf02811f47e99042571b552e8abb2fa8570bc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzgwMjc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxNTowM1rOFswOrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxNTowM1rOFswOrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3MTg1Mg==", "bodyText": "QueryController", "url": "https://github.com/scireum/sirius-biz/pull/687#discussion_r382471852", "createdAt": "2020-02-21T09:15:03Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jdbc;\n+\n+import com.alibaba.fastjson.JSON;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.db.es.ElasticEntity;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.db.mongo.MongoEntity;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Counter;\n+import sirius.web.controller.AutocompleteHelper;\n+import sirius.web.controller.BasicController;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides the management GUI for MongoDB or ElasticSearch database related queries.\n+ */\n+@Register(classes = Controller.class)\n+public class MongoAndElasticDatabaseController extends BasicController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bddc97763491061cfd8d7411502d80c6e04a62"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzgwNDc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxNTo0M1rOFswP5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwOToxNTo0M1rOFswP5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ3MjE2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Provides the management GUI for MongoDB or ElasticSearch database related queries.\n          \n          \n            \n             * Provides a query GUI for all entities managed by <tt>Mixing</tt>.", "url": "https://github.com/scireum/sirius-biz/pull/687#discussion_r382472166", "createdAt": "2020-02-21T09:15:43Z", "author": {"login": "andyHa"}, "path": "src/main/java/sirius/biz/jdbc/MongoAndElasticDatabaseController.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.jdbc;\n+\n+import com.alibaba.fastjson.JSON;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.db.es.ElasticEntity;\n+import sirius.db.mixing.BaseEntity;\n+import sirius.db.mixing.EntityDescriptor;\n+import sirius.db.mixing.Mixing;\n+import sirius.db.mixing.query.Query;\n+import sirius.db.mongo.MongoEntity;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Counter;\n+import sirius.web.controller.AutocompleteHelper;\n+import sirius.web.controller.BasicController;\n+import sirius.web.controller.Controller;\n+import sirius.web.controller.Routed;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Provides the management GUI for MongoDB or ElasticSearch database related queries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bddc97763491061cfd8d7411502d80c6e04a62"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODAyMDM5OnYy", "diffSide": "RIGHT", "path": "src/main/resources/default/templates/biz/model/query.html.pasta", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDoyNTo1NFrOFsyTmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDoyNTo1NFrOFsyTmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwNTg4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (e.keyCode === 13) {\n          \n          \n            \n                        if (e.keyCode === sirius.keys.KEY_ENTER) {", "url": "https://github.com/scireum/sirius-biz/pull/687#discussion_r382505883", "createdAt": "2020-02-21T10:25:54Z", "author": {"login": "tbiScireum"}, "path": "src/main/resources/default/templates/biz/model/query.html.pasta", "diffHunk": "@@ -0,0 +1,69 @@\n+<i:arg type=\"List\" name=\"selectableClasses\"/>\n+<i:arg type=\"String\" name=\"selectedClass\"/>\n+<i:arg type=\"String\" name=\"query\"/>\n+<i:arg type=\"String\" name=\"entitySource\" default=\"\"/>\n+<i:arg type=\"int\" name=\"limit\"/>\n+\n+<w:page title=\"Query Tool\">\n+    <i:block name=\"head\">\n+        <script src=\"/assets/wondergem/ace/ace.js\" type=\"text/javascript\"></script>\n+    </i:block>\n+\n+    <i:block name=\"breadcrumbs\">\n+        <li><a href=\"/system/query\">Query Tool</a></li>\n+    </i:block>\n+\n+    <w:pageHeader title=\"Query Tool\"/>\n+\n+    <div class=\"row\">\n+        <div class=\"col-md-12\">\n+            <w:editForm url=\"/system/query\">\n+                <div class=\"col-md-8\">\n+                    <label>\n+                        Query\n+                    </label>\n+                    <div class=\"input-group\">\n+                        <input type=\"text\" name=\"query\" class=\"form-control\" value=\"@query\" autofocus/>\n+                        <span class=\"input-group-addon\" onclick=\"$('#editForm').submit()\">\n+                            <i class=\"fa fa-search\"></i>\n+                        </span>\n+                    </div>\n+                </div>\n+                <w:autocompleteSingleSelect span=\"3\" name=\"class\" label=\"Entity Type\"\n+                                            serviceUri=\"/system/query/autocomplete\"\n+                                            required=\"true\">\n+                    <i:for var=\"clazz\" items=\"selectableClasses\" type=\"java.lang.Class\">\n+                        <option value=\"@clazz.getSimpleName()\"\n+                                @selected=\"selectedClass == clazz.getSimpleName()\">\n+                            @clazz.getSimpleName()\n+                        </option>\n+                    </i:for>\n+                </w:autocompleteSingleSelect>\n+                <div class=\"col-md-1\">\n+                    <label>\n+                        <span class=\"input-required\">\n+                            Limit\n+                        </span>\n+                    </label>\n+                    <div class=\"input-group\">\n+                        <input type=\"text\" name=\"limit\" class=\"form-control\" value=\"@limit\" autofocus/>\n+                    </div>\n+                </div>\n+            </w:editForm>\n+        </div>\n+        <div class=\"col-md-12\">\n+            <w:codeEditor readonly=\"true\" mode=\"json\" height=\"600\">@entitySource</w:codeEditor>\n+        </div>\n+    </div>\n+</w:page>\n+\n+<script type=\"text/javascript\">\n+    $(document).ready(function () {\n+        $('#editForm').keydown(function (e) {\n+            if (e.keyCode === 13) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a52855616e8d26457394b3efbf940231ad533581"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2118, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}