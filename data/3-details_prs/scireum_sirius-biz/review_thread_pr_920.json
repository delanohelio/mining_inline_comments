{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1Nzk0NDA0", "number": 920, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxMzoxN1rOE8QrOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNToxMVrOE8Qu-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjIzMjI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/util/RedisController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxMzoxN1rOH4R2yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxMzoxN1rOH4R2yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NDg1Ng==", "bodyText": "ctx -> webContext", "url": "https://github.com/scireum/sirius-biz/pull/920#discussion_r528774856", "createdAt": "2020-11-23T15:13:17Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/util/RedisController.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import redis.clients.jedis.util.SafeEncoder;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.biz.web.BizController;\n+import sirius.db.redis.Redis;\n+import sirius.db.redis.RedisDB;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Routed;\n+import sirius.web.health.console.CommandParser;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.util.List;\n+\n+/**\n+ * Provides the management GUI for Redis related activities.\n+ */\n+@Register\n+public class RedisController extends BizController {\n+\n+    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    @Part\n+    private Redis redis;\n+\n+    /**\n+     * Renders the query template.\n+     *\n+     * @param webContext the request to respond to\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/redis\")\n+    public void redis(WebContext webContext) {\n+        webContext.respondWith().template(\"/templates/biz/model/redis.html.pasta\", redis.getPools(), Redis.POOL_SYSTEM);\n+    }\n+\n+    /**\n+     * Executes the given Redis query.\n+     *\n+     * @param ctx the current request\n+     * @param out the JSON response\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(value = \"/system/redis/api/execute\", jsonCall = true)\n+    public void executeQuery(WebContext ctx, JSONStructuredOutput out) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ebaf4706917abe6aa8458b8e4855af413ca5de"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjIzNzU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/util/RedisController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNDoyNFrOH4R6EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNDoyNFrOH4R6EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NTY5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    StringBuilder sb = new StringBuilder();\n          \n          \n            \n                    renderResult(result, \"\", sb);\n          \n          \n            \n                    out.property(\"result\", sb.toString());\n          \n          \n            \n                    StringBuilder resultBuilder = new StringBuilder();\n          \n          \n            \n                    renderResult(result, \"\", resultBuilder);\n          \n          \n            \n                    out.property(\"result\", resultBuilder.toString());", "url": "https://github.com/scireum/sirius-biz/pull/920#discussion_r528775697", "createdAt": "2020-11-23T15:14:24Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/util/RedisController.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import redis.clients.jedis.util.SafeEncoder;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.biz.web.BizController;\n+import sirius.db.redis.Redis;\n+import sirius.db.redis.RedisDB;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Routed;\n+import sirius.web.health.console.CommandParser;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.util.List;\n+\n+/**\n+ * Provides the management GUI for Redis related activities.\n+ */\n+@Register\n+public class RedisController extends BizController {\n+\n+    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    @Part\n+    private Redis redis;\n+\n+    /**\n+     * Renders the query template.\n+     *\n+     * @param webContext the request to respond to\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/redis\")\n+    public void redis(WebContext webContext) {\n+        webContext.respondWith().template(\"/templates/biz/model/redis.html.pasta\", redis.getPools(), Redis.POOL_SYSTEM);\n+    }\n+\n+    /**\n+     * Executes the given Redis query.\n+     *\n+     * @param ctx the current request\n+     * @param out the JSON response\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(value = \"/system/redis/api/execute\", jsonCall = true)\n+    public void executeQuery(WebContext ctx, JSONStructuredOutput out) {\n+        Watch watch = Watch.start();\n+\n+        String database = ctx.get(\"pool\").asString(Redis.POOL_SYSTEM);\n+        RedisDB pool = redis.getPool(database);\n+        String query = ctx.get(\"query\").asString();\n+\n+        Object result = pool.query(() -> \"Executing query via /system/redis\", db -> {\n+            try {\n+                CommandParser parser = new CommandParser(query);\n+                db.getClient().sendCommand(() -> SafeEncoder.encode(parser.parseCommand()), parser.getArgArray());\n+\n+                return db.getClient().getOne();\n+            } catch (Exception e) {\n+                // In case of an invalid query, we do not want to log this into the syslog but\n+                // rather just directly output the message to the user....\n+                throw Exceptions.createHandled().error(e).withDirectMessage(e.getMessage()).handle();\n+            }\n+        });\n+        StringBuilder sb = new StringBuilder();\n+        renderResult(result, \"\", sb);\n+        out.property(\"result\", sb.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ebaf4706917abe6aa8458b8e4855af413ca5de"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjI0MTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/sirius/biz/util/RedisController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNToxMVrOH4R8nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToxNToxMVrOH4R8nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc3NjM0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void renderResult(Object result, String offset, StringBuilder sb) {\n          \n          \n            \n                    if (result instanceof List) {\n          \n          \n            \n                        List<?> results = (List<?>) result;\n          \n          \n            \n                        for (int i = 0; i < results.size(); i++) {\n          \n          \n            \n                            if (i > 0) {\n          \n          \n            \n                                sb.append(offset);\n          \n          \n            \n                            }\n          \n          \n            \n                            sb.append(Strings.apply(\"%2d\", i + 1));\n          \n          \n            \n                            sb.append(\") \");\n          \n          \n            \n                            renderResult(results.get(i), offset + \"    \", sb);\n          \n          \n            \n                        }\n          \n          \n            \n                    } else if (result instanceof byte[]) {\n          \n          \n            \n                        sb.append(SafeEncoder.encode((byte[]) result));\n          \n          \n            \n                        sb.append(\"\\n\");\n          \n          \n            \n                    } else {\n          \n          \n            \n                        sb.append(NLS.toUserString(result));\n          \n          \n            \n                        sb.append(\"\\n\");\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                private void renderResult(Object result, String offset, StringBuilder resultBuilder) {\n          \n          \n            \n                    if (result instanceof List) {\n          \n          \n            \n                        List<?> results = (List<?>) result;\n          \n          \n            \n                        for (int i = 0; i < results.size(); i++) {\n          \n          \n            \n                            if (i > 0) {\n          \n          \n            \n                                resultBuilder.append(offset);\n          \n          \n            \n                            }\n          \n          \n            \n                            resultBuilder.append(Strings.apply(\"%2d\", i + 1));\n          \n          \n            \n                            resultBuilder.append(\") \");\n          \n          \n            \n                            renderResult(results.get(i), offset + \"    \", resultBuilder);\n          \n          \n            \n                        }\n          \n          \n            \n                    } else if (result instanceof byte[]) {\n          \n          \n            \n                        resultBuilder.append(SafeEncoder.encode((byte[]) result));\n          \n          \n            \n                        resultBuilder.append(\"\\n\");\n          \n          \n            \n                    } else {\n          \n          \n            \n                        resultBuilder.append(NLS.toUserString(result));\n          \n          \n            \n                        resultBuilder.append(\"\\n\");\n          \n          \n            \n                    }\n          \n          \n            \n                }", "url": "https://github.com/scireum/sirius-biz/pull/920#discussion_r528776349", "createdAt": "2020-11-23T15:15:11Z", "author": {"login": "sabieber"}, "path": "src/main/java/sirius/biz/util/RedisController.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Made with all the love in the world\n+ * by scireum in Remshalden, Germany\n+ *\n+ * Copyright by scireum GmbH\n+ * http://www.scireum.de - info@scireum.de\n+ */\n+\n+package sirius.biz.util;\n+\n+import redis.clients.jedis.util.SafeEncoder;\n+import sirius.biz.tenants.TenantUserManager;\n+import sirius.biz.web.BizController;\n+import sirius.db.redis.Redis;\n+import sirius.db.redis.RedisDB;\n+import sirius.kernel.commons.Strings;\n+import sirius.kernel.commons.Watch;\n+import sirius.kernel.di.std.Part;\n+import sirius.kernel.di.std.Register;\n+import sirius.kernel.health.Exceptions;\n+import sirius.kernel.nls.NLS;\n+import sirius.web.controller.Routed;\n+import sirius.web.health.console.CommandParser;\n+import sirius.web.http.WebContext;\n+import sirius.web.security.Permission;\n+import sirius.web.services.JSONStructuredOutput;\n+\n+import java.util.List;\n+\n+/**\n+ * Provides the management GUI for Redis related activities.\n+ */\n+@Register\n+public class RedisController extends BizController {\n+\n+    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    @Part\n+    private Redis redis;\n+\n+    /**\n+     * Renders the query template.\n+     *\n+     * @param webContext the request to respond to\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(\"/system/redis\")\n+    public void redis(WebContext webContext) {\n+        webContext.respondWith().template(\"/templates/biz/model/redis.html.pasta\", redis.getPools(), Redis.POOL_SYSTEM);\n+    }\n+\n+    /**\n+     * Executes the given Redis query.\n+     *\n+     * @param ctx the current request\n+     * @param out the JSON response\n+     */\n+    @Permission(TenantUserManager.PERMISSION_SYSTEM_ADMINISTRATOR)\n+    @Routed(value = \"/system/redis/api/execute\", jsonCall = true)\n+    public void executeQuery(WebContext ctx, JSONStructuredOutput out) {\n+        Watch watch = Watch.start();\n+\n+        String database = ctx.get(\"pool\").asString(Redis.POOL_SYSTEM);\n+        RedisDB pool = redis.getPool(database);\n+        String query = ctx.get(\"query\").asString();\n+\n+        Object result = pool.query(() -> \"Executing query via /system/redis\", db -> {\n+            try {\n+                CommandParser parser = new CommandParser(query);\n+                db.getClient().sendCommand(() -> SafeEncoder.encode(parser.parseCommand()), parser.getArgArray());\n+\n+                return db.getClient().getOne();\n+            } catch (Exception e) {\n+                // In case of an invalid query, we do not want to log this into the syslog but\n+                // rather just directly output the message to the user....\n+                throw Exceptions.createHandled().error(e).withDirectMessage(e.getMessage()).handle();\n+            }\n+        });\n+        StringBuilder sb = new StringBuilder();\n+        renderResult(result, \"\", sb);\n+        out.property(\"result\", sb.toString());\n+        out.property(\"duration\", watch.duration());\n+    }\n+\n+    private void renderResult(Object result, String offset, StringBuilder sb) {\n+        if (result instanceof List) {\n+            List<?> results = (List<?>) result;\n+            for (int i = 0; i < results.size(); i++) {\n+                if (i > 0) {\n+                    sb.append(offset);\n+                }\n+                sb.append(Strings.apply(\"%2d\", i + 1));\n+                sb.append(\") \");\n+                renderResult(results.get(i), offset + \"    \", sb);\n+            }\n+        } else if (result instanceof byte[]) {\n+            sb.append(SafeEncoder.encode((byte[]) result));\n+            sb.append(\"\\n\");\n+        } else {\n+            sb.append(NLS.toUserString(result));\n+            sb.append(\"\\n\");\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85ebaf4706917abe6aa8458b8e4855af413ca5de"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1856, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}