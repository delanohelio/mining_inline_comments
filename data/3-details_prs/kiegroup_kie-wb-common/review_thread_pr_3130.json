{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4OTQxNzI0", "number": 3130, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1MzoyOVrODb90Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1Nzo1MlrODb967A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjUwODkwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1MzoyOVrOFjwIZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTowODozOFrOFj5-aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzMzA2MQ==", "bodyText": "maybe would resolut more readable to use Streams here, you can perform a map operation and finally collect into a Map type.. Anyway nothing major.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3130#discussion_r373033061", "createdAt": "2020-01-30T15:53:29Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenter.java", "diffHunk": "@@ -53,18 +89,97 @@ protected IsElement getView() {\n \n     @Override\n     public void setValue(String value) {\n-        super.setValue(value);\n-        view.setVariableName(value);\n+        super.value = value;\n+        Variable variable = Variable.deserialize(value, Variable.VariableType.INPUT, simpleDataTypes);\n+        view.setModel(variable);\n     }\n \n     @Override\n     public void setReadOnly(boolean readOnly) {\n         view.setReadOnly(readOnly);\n     }\n \n-    public void onVariableNameChange() {\n+    public void onVariableChange() {\n         String oldValue = value;\n-        value = view.getVariableName();\n+        value = view.getVariableName() + \":\" + view.getVariableType();\n         notifyChange(oldValue, value);\n     }\n+\n+    public Path getDiagramPath() {\n+        final Diagram diagram = sessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        return diagram.getMetadata().getPath();\n+    }\n+\n+    public static Map<String, String> getMapDataTypeNamesToDisplayNames() {\n+        return mapDataTypeNamesToDisplayNames;\n+    }\n+\n+    private static Map<String, String> createMapForSimpleDataTypes() {\n+        Map<String, String> mapDataTypeNamesToDisplayNames = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98be91c1089bfcd62190b3f41b4d103e91e996d"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5NDM0NQ==", "bodyText": "Applied, thank you!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3130#discussion_r373194345", "createdAt": "2020-01-30T21:08:38Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenter.java", "diffHunk": "@@ -53,18 +89,97 @@ protected IsElement getView() {\n \n     @Override\n     public void setValue(String value) {\n-        super.setValue(value);\n-        view.setVariableName(value);\n+        super.value = value;\n+        Variable variable = Variable.deserialize(value, Variable.VariableType.INPUT, simpleDataTypes);\n+        view.setModel(variable);\n     }\n \n     @Override\n     public void setReadOnly(boolean readOnly) {\n         view.setReadOnly(readOnly);\n     }\n \n-    public void onVariableNameChange() {\n+    public void onVariableChange() {\n         String oldValue = value;\n-        value = view.getVariableName();\n+        value = view.getVariableName() + \":\" + view.getVariableType();\n         notifyChange(oldValue, value);\n     }\n+\n+    public Path getDiagramPath() {\n+        final Diagram diagram = sessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        return diagram.getMetadata().getPath();\n+    }\n+\n+    public static Map<String, String> getMapDataTypeNamesToDisplayNames() {\n+        return mapDataTypeNamesToDisplayNames;\n+    }\n+\n+    private static Map<String, String> createMapForSimpleDataTypes() {\n+        Map<String, String> mapDataTypeNamesToDisplayNames = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzMzA2MQ=="}, "originalCommit": {"oid": "c98be91c1089bfcd62190b3f41b4d103e91e996d"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjUxMTk0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1NDoxM1rOFjwKQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToxMjozNVrOFj6FBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzMzUzOQ==", "bodyText": "same here, maybe using Streams may result more readable.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3130#discussion_r373033539", "createdAt": "2020-01-30T15:54:13Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenter.java", "diffHunk": "@@ -53,18 +89,97 @@ protected IsElement getView() {\n \n     @Override\n     public void setValue(String value) {\n-        super.setValue(value);\n-        view.setVariableName(value);\n+        super.value = value;\n+        Variable variable = Variable.deserialize(value, Variable.VariableType.INPUT, simpleDataTypes);\n+        view.setModel(variable);\n     }\n \n     @Override\n     public void setReadOnly(boolean readOnly) {\n         view.setReadOnly(readOnly);\n     }\n \n-    public void onVariableNameChange() {\n+    public void onVariableChange() {\n         String oldValue = value;\n-        value = view.getVariableName();\n+        value = view.getVariableName() + \":\" + view.getVariableType();\n         notifyChange(oldValue, value);\n     }\n+\n+    public Path getDiagramPath() {\n+        final Diagram diagram = sessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        return diagram.getMetadata().getPath();\n+    }\n+\n+    public static Map<String, String> getMapDataTypeNamesToDisplayNames() {\n+        return mapDataTypeNamesToDisplayNames;\n+    }\n+\n+    private static Map<String, String> createMapForSimpleDataTypes() {\n+        Map<String, String> mapDataTypeNamesToDisplayNames = new HashMap<>();\n+        for (String simpleDataType : simpleDataTypes) {\n+            mapDataTypeNamesToDisplayNames.put(simpleDataType, simpleDataType);\n+        }\n+        return mapDataTypeNamesToDisplayNames;\n+    }\n+\n+    public static IThenable.ThenOnFulfilledCallbackFn<List<String>, Object> getListObjectThenOnFulfilledCallbackFn(List<String> simpleDataTypes, ListBoxValues dataTypeListBoxValues) {\n+        return serverDataTypes -> {\n+            List<String> mergedList = new ArrayList<>(simpleDataTypes);\n+\n+            for (String type : serverDataTypes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98be91c1089bfcd62190b3f41b4d103e91e996d"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5NjAzNw==", "bodyText": "It modifies two different collections with data transformed same way, I think it's better to keep it in one cycle, than create two separate streams and calculate twice. Thanks!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3130#discussion_r373196037", "createdAt": "2020-01-30T21:12:35Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenter.java", "diffHunk": "@@ -53,18 +89,97 @@ protected IsElement getView() {\n \n     @Override\n     public void setValue(String value) {\n-        super.setValue(value);\n-        view.setVariableName(value);\n+        super.value = value;\n+        Variable variable = Variable.deserialize(value, Variable.VariableType.INPUT, simpleDataTypes);\n+        view.setModel(variable);\n     }\n \n     @Override\n     public void setReadOnly(boolean readOnly) {\n         view.setReadOnly(readOnly);\n     }\n \n-    public void onVariableNameChange() {\n+    public void onVariableChange() {\n         String oldValue = value;\n-        value = view.getVariableName();\n+        value = view.getVariableName() + \":\" + view.getVariableType();\n         notifyChange(oldValue, value);\n     }\n+\n+    public Path getDiagramPath() {\n+        final Diagram diagram = sessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        return diagram.getMetadata().getPath();\n+    }\n+\n+    public static Map<String, String> getMapDataTypeNamesToDisplayNames() {\n+        return mapDataTypeNamesToDisplayNames;\n+    }\n+\n+    private static Map<String, String> createMapForSimpleDataTypes() {\n+        Map<String, String> mapDataTypeNamesToDisplayNames = new HashMap<>();\n+        for (String simpleDataType : simpleDataTypes) {\n+            mapDataTypeNamesToDisplayNames.put(simpleDataType, simpleDataType);\n+        }\n+        return mapDataTypeNamesToDisplayNames;\n+    }\n+\n+    public static IThenable.ThenOnFulfilledCallbackFn<List<String>, Object> getListObjectThenOnFulfilledCallbackFn(List<String> simpleDataTypes, ListBoxValues dataTypeListBoxValues) {\n+        return serverDataTypes -> {\n+            List<String> mergedList = new ArrayList<>(simpleDataTypes);\n+\n+            for (String type : serverDataTypes) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzMzUzOQ=="}, "originalCommit": {"oid": "c98be91c1089bfcd62190b3f41b4d103e91e996d"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjUyMDE5OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1NjoxOVrOFjwPdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTowODoxM1rOFj59rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzNDg3MA==", "bodyText": "I see lots of public (and some static) methods in this class, there are others below. Are those really necessary to be public? It's better using private by default, in case you need access from test, you can also use package protected access (no access modifier specified)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3130#discussion_r373034870", "createdAt": "2020-01-30T15:56:19Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenter.java", "diffHunk": "@@ -53,18 +89,97 @@ protected IsElement getView() {\n \n     @Override\n     public void setValue(String value) {\n-        super.setValue(value);\n-        view.setVariableName(value);\n+        super.value = value;\n+        Variable variable = Variable.deserialize(value, Variable.VariableType.INPUT, simpleDataTypes);\n+        view.setModel(variable);\n     }\n \n     @Override\n     public void setReadOnly(boolean readOnly) {\n         view.setReadOnly(readOnly);\n     }\n \n-    public void onVariableNameChange() {\n+    public void onVariableChange() {\n         String oldValue = value;\n-        value = view.getVariableName();\n+        value = view.getVariableName() + \":\" + view.getVariableType();\n         notifyChange(oldValue, value);\n     }\n+\n+    public Path getDiagramPath() {\n+        final Diagram diagram = sessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        return diagram.getMetadata().getPath();\n+    }\n+\n+    public static Map<String, String> getMapDataTypeNamesToDisplayNames() {\n+        return mapDataTypeNamesToDisplayNames;\n+    }\n+\n+    private static Map<String, String> createMapForSimpleDataTypes() {\n+        Map<String, String> mapDataTypeNamesToDisplayNames = new HashMap<>();\n+        for (String simpleDataType : simpleDataTypes) {\n+            mapDataTypeNamesToDisplayNames.put(simpleDataType, simpleDataType);\n+        }\n+        return mapDataTypeNamesToDisplayNames;\n+    }\n+\n+    public static IThenable.ThenOnFulfilledCallbackFn<List<String>, Object> getListObjectThenOnFulfilledCallbackFn(List<String> simpleDataTypes, ListBoxValues dataTypeListBoxValues) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98be91c1089bfcd62190b3f41b4d103e91e996d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5NDE1OA==", "bodyText": "It is not only tests but also View, so I will make it package protected. Thank you!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3130#discussion_r373194158", "createdAt": "2020-01-30T21:08:13Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenter.java", "diffHunk": "@@ -53,18 +89,97 @@ protected IsElement getView() {\n \n     @Override\n     public void setValue(String value) {\n-        super.setValue(value);\n-        view.setVariableName(value);\n+        super.value = value;\n+        Variable variable = Variable.deserialize(value, Variable.VariableType.INPUT, simpleDataTypes);\n+        view.setModel(variable);\n     }\n \n     @Override\n     public void setReadOnly(boolean readOnly) {\n         view.setReadOnly(readOnly);\n     }\n \n-    public void onVariableNameChange() {\n+    public void onVariableChange() {\n         String oldValue = value;\n-        value = view.getVariableName();\n+        value = view.getVariableName() + \":\" + view.getVariableType();\n         notifyChange(oldValue, value);\n     }\n+\n+    public Path getDiagramPath() {\n+        final Diagram diagram = sessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        return diagram.getMetadata().getPath();\n+    }\n+\n+    public static Map<String, String> getMapDataTypeNamesToDisplayNames() {\n+        return mapDataTypeNamesToDisplayNames;\n+    }\n+\n+    private static Map<String, String> createMapForSimpleDataTypes() {\n+        Map<String, String> mapDataTypeNamesToDisplayNames = new HashMap<>();\n+        for (String simpleDataType : simpleDataTypes) {\n+            mapDataTypeNamesToDisplayNames.put(simpleDataType, simpleDataType);\n+        }\n+        return mapDataTypeNamesToDisplayNames;\n+    }\n+\n+    public static IThenable.ThenOnFulfilledCallbackFn<List<String>, Object> getListObjectThenOnFulfilledCallbackFn(List<String> simpleDataTypes, ListBoxValues dataTypeListBoxValues) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzNDg3MA=="}, "originalCommit": {"oid": "c98be91c1089bfcd62190b3f41b4d103e91e996d"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjUyNjUyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/test/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNTo1Nzo1MlrOFjwTXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToxNDozNVrOFj6IVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzNTg3MQ==", "bodyText": "is this clean up necessary? I would suggest not sharing variables across tests, so no need to clean up. The JVM will do that for you :)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3130#discussion_r373035871", "createdAt": "2020-01-30T15:57:52Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/test/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenterTest.java", "diffHunk": "@@ -65,8 +85,118 @@ public void testSetReadonlyFalse() {\n     public void testOnVariableNameChange() {\n         editor.setValue(\"oldValue\");\n         when(view.getVariableName()).thenReturn(\"newValue\");\n-        editor.onVariableNameChange();\n-        verifyValueChange(\"oldValue\", \"newValue\");\n+        when(view.getVariableType()).thenReturn(\"Float\");\n+        editor.onVariableChange();\n+        verifyValueChange(\"oldValue\", \"newValue:Float\");\n+    }\n+\n+    @Test\n+    public void testFirstIfExistsOrSecond() {\n+        String first;\n+        String second = \"some value\";\n+\n+        assertEquals(second, getFirstIfExistsOrSecond(null, second));\n+\n+        first = \"\";\n+        assertEquals(second, getFirstIfExistsOrSecond(first, second));\n+\n+        first = \"new value\";\n+        assertEquals(first, getFirstIfExistsOrSecond(first, second));\n+    }\n+\n+    @Test\n+    public void testFullListOfTypes() {\n+        List<String> testData = new ArrayList<>();\n+        testData.add(\"org.test.Person\");\n+        testData.add(\"java.util.List\");\n+\n+        getListObjectThenOnFulfilledCallbackFn(simpleDataTypes, new ListBoxValues(\"Custom\", \"Edit\", null)).onInvoke(testData);\n+\n+        assertEquals(\"org.test.Person\", getMapDataTypeNamesToDisplayNames().get(\"Person [org.test]\"));\n+        assertEquals(\"java.util.List\", getMapDataTypeNamesToDisplayNames().get(\"List [java.util]\"));\n+\n+        // Clean up\n+        getMapDataTypeNamesToDisplayNames().remove(\"Person [org.test]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98be91c1089bfcd62190b3f41b4d103e91e996d"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE5Njg4Nw==", "bodyText": "Done, thanks.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3130#discussion_r373196887", "createdAt": "2020-01-30T21:14:35Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/test/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/multipleInstanceVariableEditor/MultipleInstanceVariableEditorPresenterTest.java", "diffHunk": "@@ -65,8 +85,118 @@ public void testSetReadonlyFalse() {\n     public void testOnVariableNameChange() {\n         editor.setValue(\"oldValue\");\n         when(view.getVariableName()).thenReturn(\"newValue\");\n-        editor.onVariableNameChange();\n-        verifyValueChange(\"oldValue\", \"newValue\");\n+        when(view.getVariableType()).thenReturn(\"Float\");\n+        editor.onVariableChange();\n+        verifyValueChange(\"oldValue\", \"newValue:Float\");\n+    }\n+\n+    @Test\n+    public void testFirstIfExistsOrSecond() {\n+        String first;\n+        String second = \"some value\";\n+\n+        assertEquals(second, getFirstIfExistsOrSecond(null, second));\n+\n+        first = \"\";\n+        assertEquals(second, getFirstIfExistsOrSecond(first, second));\n+\n+        first = \"new value\";\n+        assertEquals(first, getFirstIfExistsOrSecond(first, second));\n+    }\n+\n+    @Test\n+    public void testFullListOfTypes() {\n+        List<String> testData = new ArrayList<>();\n+        testData.add(\"org.test.Person\");\n+        testData.add(\"java.util.List\");\n+\n+        getListObjectThenOnFulfilledCallbackFn(simpleDataTypes, new ListBoxValues(\"Custom\", \"Edit\", null)).onInvoke(testData);\n+\n+        assertEquals(\"org.test.Person\", getMapDataTypeNamesToDisplayNames().get(\"Person [org.test]\"));\n+        assertEquals(\"java.util.List\", getMapDataTypeNamesToDisplayNames().get(\"List [java.util]\"));\n+\n+        // Clean up\n+        getMapDataTypeNamesToDisplayNames().remove(\"Person [org.test]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzNTg3MQ=="}, "originalCommit": {"oid": "c98be91c1089bfcd62190b3f41b4d103e91e996d"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1498, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}