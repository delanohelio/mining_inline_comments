{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NTQ2NjEw", "number": 3284, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjowMjowMFrOD3CIgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjowMjowMFrOD3CIgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MDMzMjE3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/FEELSyntaxLightValidator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNjowMjowMFrOGND8QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwNzoyNzoyNFrOGNGcSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0OTI0OQ==", "bodyText": "There is one more keyword I am aware of - 'in'. Could we please add it to this list?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3284#discussion_r416349249", "createdAt": "2020-04-28T06:02:00Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/FEELSyntaxLightValidator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.services;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Stream.of;\n+\n+/**\n+ * <p>It provides a light validation for variable names, respect to the FEEL syntax</p>\n+ * <p>We already have a validation mechanism on back-end side, provided by <strong>FeelParser</strong></p>\n+ * <p>However, as for now, we cannot use back-end services in dmn client, so the aim of this class is to provide a more accurate as possible validation</p>\n+ * <p>Its purpose is to be temporary for the short/middle term</p>\n+ */\n+public class FEELSyntaxLightValidator {\n+\n+    private static final Character[] FORBIDDEN_CHARS = new Character[]{\n+            '!', '@', '#', '$', '$', '%', '&', '^', '(', ')', '\\\"', '\u00b0', '\u00a7', '\u2190', '\u2192', '\u2193', '\u00a2', '\u00b5',\n+            '{', '}', '[', ']', '|', '\\\\', '=', '<', '>', ';', ':', ',', '\u00b6', '\u00ab', '\u00bb', '\u201d', '\u201c'\n+    };\n+\n+    private static final Character[] ALLOWED_SEPARATORS = {'-', '.', '/', '\\'', '*', '+'};\n+\n+    private static final Character[] FORBIDDEN_CHARS_AS_INITIAL = Stream.concat(\n+            of(FORBIDDEN_CHARS),\n+            of(ALLOWED_SEPARATORS)\n+    ).toArray(Character[]::new);\n+\n+    private static final String[] RESERVED_KEYWORDS = new String[]{\n+            \"for\", \"return\", \"if\", \"then\", \"else\", \"some\", \"every\", \"satisfies\", \"instance\", \"of\",\n+            \"function\", \"external\", \"or\", \"and\", \"between\", \"not\", \"null\", \"true\", \"false\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83ef53fa76dd3b67eee91bea8bd33c0fdc233aca"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM1MDY0Mw==", "bodyText": "One more tricky point. Business central reports built type names as not allowed for custom types, however they are allowed as graph node names. Is that out of scope of this jira?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3284#discussion_r416350643", "createdAt": "2020-04-28T06:05:44Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/FEELSyntaxLightValidator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.services;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Stream.of;\n+\n+/**\n+ * <p>It provides a light validation for variable names, respect to the FEEL syntax</p>\n+ * <p>We already have a validation mechanism on back-end side, provided by <strong>FeelParser</strong></p>\n+ * <p>However, as for now, we cannot use back-end services in dmn client, so the aim of this class is to provide a more accurate as possible validation</p>\n+ * <p>Its purpose is to be temporary for the short/middle term</p>\n+ */\n+public class FEELSyntaxLightValidator {\n+\n+    private static final Character[] FORBIDDEN_CHARS = new Character[]{\n+            '!', '@', '#', '$', '$', '%', '&', '^', '(', ')', '\\\"', '\u00b0', '\u00a7', '\u2190', '\u2192', '\u2193', '\u00a2', '\u00b5',\n+            '{', '}', '[', ']', '|', '\\\\', '=', '<', '>', ';', ':', ',', '\u00b6', '\u00ab', '\u00bb', '\u201d', '\u201c'\n+    };\n+\n+    private static final Character[] ALLOWED_SEPARATORS = {'-', '.', '/', '\\'', '*', '+'};\n+\n+    private static final Character[] FORBIDDEN_CHARS_AS_INITIAL = Stream.concat(\n+            of(FORBIDDEN_CHARS),\n+            of(ALLOWED_SEPARATORS)\n+    ).toArray(Character[]::new);\n+\n+    private static final String[] RESERVED_KEYWORDS = new String[]{\n+            \"for\", \"return\", \"if\", \"then\", \"else\", \"some\", \"every\", \"satisfies\", \"instance\", \"of\",\n+            \"function\", \"external\", \"or\", \"and\", \"between\", \"not\", \"null\", \"true\", \"false\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0OTI0OQ=="}, "originalCommit": {"oid": "83ef53fa76dd3b67eee91bea8bd33c0fdc233aca"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM4MTM1NA==", "bodyText": "One more tricky point. Business central reports built type names as not allowed for custom types, however they are allowed as graph node names. Is that out of scope of this jira?\n\n\nIn this implementation, we are covering the case of DMNClientServicesProxyImpl:isValidVariableName that is producing the error message The Data Type name must start with a letter, ?, or _ and cannot start with a language keyword, such as and, true, or every\nIMO, for covering the case about data type, FEELSyntaxLightValidator could be extended with another method, that can be called by DMNClientServicesProxyImpl:? but I would manage it in a separate case.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3284#discussion_r416381354", "createdAt": "2020-04-28T07:11:17Z", "author": {"login": "vpellegrino"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/FEELSyntaxLightValidator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.services;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Stream.of;\n+\n+/**\n+ * <p>It provides a light validation for variable names, respect to the FEEL syntax</p>\n+ * <p>We already have a validation mechanism on back-end side, provided by <strong>FeelParser</strong></p>\n+ * <p>However, as for now, we cannot use back-end services in dmn client, so the aim of this class is to provide a more accurate as possible validation</p>\n+ * <p>Its purpose is to be temporary for the short/middle term</p>\n+ */\n+public class FEELSyntaxLightValidator {\n+\n+    private static final Character[] FORBIDDEN_CHARS = new Character[]{\n+            '!', '@', '#', '$', '$', '%', '&', '^', '(', ')', '\\\"', '\u00b0', '\u00a7', '\u2190', '\u2192', '\u2193', '\u00a2', '\u00b5',\n+            '{', '}', '[', ']', '|', '\\\\', '=', '<', '>', ';', ':', ',', '\u00b6', '\u00ab', '\u00bb', '\u201d', '\u201c'\n+    };\n+\n+    private static final Character[] ALLOWED_SEPARATORS = {'-', '.', '/', '\\'', '*', '+'};\n+\n+    private static final Character[] FORBIDDEN_CHARS_AS_INITIAL = Stream.concat(\n+            of(FORBIDDEN_CHARS),\n+            of(ALLOWED_SEPARATORS)\n+    ).toArray(Character[]::new);\n+\n+    private static final String[] RESERVED_KEYWORDS = new String[]{\n+            \"for\", \"return\", \"if\", \"then\", \"else\", \"some\", \"every\", \"satisfies\", \"instance\", \"of\",\n+            \"function\", \"external\", \"or\", \"and\", \"between\", \"not\", \"null\", \"true\", \"false\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0OTI0OQ=="}, "originalCommit": {"oid": "83ef53fa76dd3b67eee91bea8bd33c0fdc233aca"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM5MDIxOA==", "bodyText": "Ok, please ask on weekly meeting (that is today) what should be our next steps in validation and report jiras afterwards.\nI am approving as you added 'in' keyword. Please have green build before merge or ensure fails are not related. thank you for your work @vpellegrino !", "url": "https://github.com/kiegroup/kie-wb-common/pull/3284#discussion_r416390218", "createdAt": "2020-04-28T07:27:24Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/FEELSyntaxLightValidator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.services;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+import static java.util.stream.Stream.of;\n+\n+/**\n+ * <p>It provides a light validation for variable names, respect to the FEEL syntax</p>\n+ * <p>We already have a validation mechanism on back-end side, provided by <strong>FeelParser</strong></p>\n+ * <p>However, as for now, we cannot use back-end services in dmn client, so the aim of this class is to provide a more accurate as possible validation</p>\n+ * <p>Its purpose is to be temporary for the short/middle term</p>\n+ */\n+public class FEELSyntaxLightValidator {\n+\n+    private static final Character[] FORBIDDEN_CHARS = new Character[]{\n+            '!', '@', '#', '$', '$', '%', '&', '^', '(', ')', '\\\"', '\u00b0', '\u00a7', '\u2190', '\u2192', '\u2193', '\u00a2', '\u00b5',\n+            '{', '}', '[', ']', '|', '\\\\', '=', '<', '>', ';', ':', ',', '\u00b6', '\u00ab', '\u00bb', '\u201d', '\u201c'\n+    };\n+\n+    private static final Character[] ALLOWED_SEPARATORS = {'-', '.', '/', '\\'', '*', '+'};\n+\n+    private static final Character[] FORBIDDEN_CHARS_AS_INITIAL = Stream.concat(\n+            of(FORBIDDEN_CHARS),\n+            of(ALLOWED_SEPARATORS)\n+    ).toArray(Character[]::new);\n+\n+    private static final String[] RESERVED_KEYWORDS = new String[]{\n+            \"for\", \"return\", \"if\", \"then\", \"else\", \"some\", \"every\", \"satisfies\", \"instance\", \"of\",\n+            \"function\", \"external\", \"or\", \"and\", \"between\", \"not\", \"null\", \"true\", \"false\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjM0OTI0OQ=="}, "originalCommit": {"oid": "83ef53fa76dd3b67eee91bea8bd33c0fdc233aca"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1452, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}