{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MDQ4OTg0", "number": 3316, "title": "DROOLS-3685: [DMN Designer] Boxed expressions - Decision Table - Output clause - Creating Decision Table, sub-columns are auto-created for structured type", "bodyText": "Please refer to: https://issues.redhat.com/browse/DROOLS-3685\nImprovement description: Creating Decision Table, sub-columns should be auto-created for structured type\nProposed solution: Changing DecisionTableEditorDefinitionEnricher.java in order to consider Decision's type for the output columns creation\nOutcome:\nCustom data type:\n\nDecision type:\n\nDecision table:", "createdAt": "2020-05-29T11:29:44Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316", "merged": true, "mergeCommit": {"oid": "d8c775244498edcb6cb862628980127b048ef082"}, "closed": true, "closedAt": "2020-06-08T13:23:13Z", "author": {"login": "vpellegrino"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcmANxlgH2gAyNDI1MDQ4OTg0OjJjOWZiYWFmYzBiNGIxNzk0ZjUyMWU1ZjI0MjJhNTExYTZmNTUwYTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpQDFxAFqTQyNjIwNzg3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2c9fbaafc0b4b1794f521e5f2422a511a6f550a6", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/2c9fbaafc0b4b1794f521e5f2422a511a6f550a6", "committedDate": "2020-05-29T10:50:15Z", "message": "Using clauseRequirement for both input and output"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bf05a5b4ef7ee129ccb0f2cb440f04c1fa83391", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/1bf05a5b4ef7ee129ccb0f2cb440f04c1fa83391", "committedDate": "2020-05-29T10:50:16Z", "message": "Reordering constructors + static class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e253ad2846d216bd317c48ae43b396fe6e2cb9b3", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e253ad2846d216bd317c48ae43b396fe6e2cb9b3", "committedDate": "2020-05-29T10:50:16Z", "message": "Implemented core logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e58bf8c04a4a0275ba3a9c5585f798b756995933", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e58bf8c04a4a0275ba3a9c5585f798b756995933", "committedDate": "2020-05-29T10:50:16Z", "message": "Constants in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea5c9c8c91369c38aa984bbba2570ca4fe3c50b1", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/ea5c9c8c91369c38aa984bbba2570ca4fe3c50b1", "committedDate": "2020-05-29T10:50:16Z", "message": "Refactoring output clauses building"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5f1b2de9f855271427c21aeaea85907919bcc38", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/f5f1b2de9f855271427c21aeaea85907919bcc38", "committedDate": "2020-05-31T10:14:29Z", "message": "When one subfield is an \"inner\" structure, ANY should be shown for it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNzQxMzYz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#pullrequestreview-421741363", "createdAt": "2020-06-01T10:26:31Z", "commit": {"oid": "f5f1b2de9f855271427c21aeaea85907919bcc38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyNjozMVrOGdFySg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoyNjozMVrOGdFySg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1NjY4Mg==", "bodyText": "I have issue with this method; since it returns an OutputClause that modifies the column collection outside this method; however it adds a LiteralExpression to the DecisionRule inside this method. i.e. IMO the mutations should either both happen inside this method or both outside this method. This is my opinion. If others feel less so; then we can disregard it.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#discussion_r433156682", "createdAt": "2020-06-01T10:26:31Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java", "diffHunk": "@@ -152,6 +145,77 @@ public void enrich(final Optional<String> nodeUUID,\n         });\n     }\n \n+    void buildOutputClausesByDataType(final HasExpression hasExpression, final DecisionTable dTable, final DecisionRule decisionRule) {\n+        final HasTypeRef hasTypeRef = TypeRefUtils.getTypeRefOfExpression(dTable, hasExpression);\n+        final QName typeRef = !Objects.isNull(hasTypeRef) ? hasTypeRef.getTypeRef() : BuiltInType.UNDEFINED.asQName();\n+        final String name = DecisionTableDefaultValueUtilities.getNewOutputClauseName(dTable);\n+\n+        final List<ClauseRequirement> outputClausesRequirement = generateOutputClauseRequirements(dmnGraphUtils.getDefinitions(), typeRef, name);\n+\n+        if (outputClausesRequirement.isEmpty()) {\n+            dTable.getOutput().add(\n+                    buildOutputClause(dTable, decisionRule, typeRef, name)\n+            );\n+        } else {\n+            outputClausesRequirement\n+                    .stream()\n+                    .sorted(Comparator.comparing(outputClauseRequirement -> outputClauseRequirement.text))\n+                    .map(outputClauseRequirement -> buildOutputClause(dTable, decisionRule, outputClauseRequirement.typeRef, outputClauseRequirement.text))\n+                    .forEach(dTable.getOutput()::add);\n+        }\n+    }\n+\n+    private List<ClauseRequirement> generateOutputClauseRequirements(final Definitions definitions, final QName typeRef, final String name) {\n+        if (typeRefMatchesBuiltInType(typeRef)) {\n+            return Collections.singletonList(new ClauseRequirement(name, typeRef));\n+        }\n+\n+        return definitions.getItemDefinition()\n+                .stream()\n+                .filter(typeRefIsCustom(typeRef))\n+                .findFirst()\n+                .map(this::generateOutputClauseRequirementsForFirstLevel)\n+                .orElse(Collections.emptyList());\n+    }\n+\n+    private List<ClauseRequirement> generateOutputClauseRequirementsForFirstLevel(final ItemDefinition itemDefinition) {\n+        return itemDefinition.getItemComponent()\n+                .stream()\n+                .map(this::definitionToClauseRequirementMapper)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private ClauseRequirement definitionToClauseRequirementMapper(final ItemDefinition itemDefinition) {\n+        final QName typeRef = itemDefinition.getTypeRef();\n+        final String name = itemDefinition.getName().getValue();\n+\n+        if (Objects.isNull(typeRef) || typeRefDoesNotMatchAnyDefinition(typeRef)) {\n+            return new ClauseRequirement(name, ANY.asQName());\n+        }\n+        return new ClauseRequirement(name, typeRef);\n+    }\n+\n+    private boolean typeRefDoesNotMatchAnyDefinition(final QName typeRef) {\n+        return !typeRefMatchesBuiltInType(typeRef) &&\n+                dmnGraphUtils.getDefinitions().getItemDefinition()\n+                        .stream()\n+                        .noneMatch(typeRefIsCustom(typeRef));\n+    }\n+\n+    private OutputClause buildOutputClause(final DecisionTable dtable, final DecisionRule decisionRule, final QName typeRef, final String text) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5f1b2de9f855271427c21aeaea85907919bcc38"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ca94527d61c0c4dcafa16fe673d2296c5629b66", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/9ca94527d61c0c4dcafa16fe673d2296c5629b66", "committedDate": "2020-06-01T10:55:06Z", "message": "Manipulating output entries in a separate method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDE3NTcx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#pullrequestreview-422017571", "createdAt": "2020-06-01T16:58:25Z", "commit": {"oid": "9ca94527d61c0c4dcafa16fe673d2296c5629b66"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMDYyNTgw", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#pullrequestreview-422062580", "createdAt": "2020-06-01T18:02:17Z", "commit": {"oid": "9ca94527d61c0c4dcafa16fe673d2296c5629b66"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNTY3NTc4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#pullrequestreview-422567578", "createdAt": "2020-06-02T11:02:23Z", "commit": {"oid": "9ca94527d61c0c4dcafa16fe673d2296c5629b66"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMTowMjoyM1rOGdsoGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMTowNDoyMFrOGdsrog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5MzA1MQ==", "bodyText": "This can be simplified:\nprivate boolean typeRefMatchesBuiltInType(final QName typeRef) {\n        return BuiltInTypeUtils.isBuiltInType(typeRef.getLocalPart());\n    }", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#discussion_r433793051", "createdAt": "2020-06-02T11:02:23Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java", "diffHunk": "@@ -260,6 +325,21 @@ void addInputClauseRequirement(final ItemDefinition itemDefinition,\n         }\n     }\n \n+    private boolean typeRefMatchesBuiltInType(final QName typeRef) {\n+        for (BuiltInType bi : BuiltInType.values()) {\n+            for (String biName : bi.getNames()) {\n+                if (Objects.equals(biName, typeRef.getLocalPart())) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ca94527d61c0c4dcafa16fe673d2296c5629b66"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5Mzk1NA==", "bodyText": "Could we please reimplement it using Objects.equals? That will not throw an NPE in case itemDef.GetName().getValue() or typeRef.getLocalPart() are null.\nprivate Predicate<ItemDefinition> typeRefIsCustom(final QName typeRef) {\n        return itemDef -> Objects.equals(itemDef.getName().getValue(), typeRef.getLocalPart());\n    }", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#discussion_r433793954", "createdAt": "2020-06-02T11:04:20Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/types/dtable/DecisionTableEditorDefinitionEnricher.java", "diffHunk": "@@ -260,6 +325,21 @@ void addInputClauseRequirement(final ItemDefinition itemDefinition,\n         }\n     }\n \n+    private boolean typeRefMatchesBuiltInType(final QName typeRef) {\n+        for (BuiltInType bi : BuiltInType.values()) {\n+            for (String biName : bi.getNames()) {\n+                if (Objects.equals(biName, typeRef.getLocalPart())) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private Predicate<ItemDefinition> typeRefIsCustom(final QName typeRef) {\n+        return itemDef -> itemDef.getName().getValue().equals(typeRef.getLocalPart());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ca94527d61c0c4dcafa16fe673d2296c5629b66"}, "originalPosition": 224}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab80ff4e4a7a4398cd190f59020ce12fea08fa2", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/fab80ff4e4a7a4398cd190f59020ce12fea08fa2", "committedDate": "2020-06-02T16:04:13Z", "message": "Simplify code, by using existing method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9b37152d8f8c195d0384bbfed635bf59fb20cb3", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/b9b37152d8f8c195d0384bbfed635bf59fb20cb3", "committedDate": "2020-06-02T16:06:19Z", "message": "Using Objects.equals to avoid NPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3be4cfe45dd86622f0ddfd42b8818bd612138c90", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3be4cfe45dd86622f0ddfd42b8818bd612138c90", "committedDate": "2020-06-03T15:26:18Z", "message": "Correcting name in case of data type related to an imported model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a352e4551e6b26bec473eff42a4da04cfa3da817", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a352e4551e6b26bec473eff42a4da04cfa3da817", "committedDate": "2020-06-04T07:40:23Z", "message": "Fixing test due to code changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7f9f57115c683ca96353d1ef5beb6dd109873c0", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/c7f9f57115c683ca96353d1ef5beb6dd109873c0", "committedDate": "2020-06-04T11:03:57Z", "message": "Fixing case when decision table is included in context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e33195e41bb89183ee8ac0e089fca20158082b7", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3e33195e41bb89183ee8ac0e089fca20158082b7", "committedDate": "2020-06-04T13:34:48Z", "message": "Fixing tests for case when decision table is included in context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "337b8fb7c6fc00580e8d9910e2e855de14249db1", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/337b8fb7c6fc00580e8d9910e2e855de14249db1", "committedDate": "2020-06-04T13:35:48Z", "message": "BKM should be set as parent of its encapsulated logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDYzOTY5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#pullrequestreview-424463969", "createdAt": "2020-06-04T13:44:51Z", "commit": {"oid": "c7f9f57115c683ca96353d1ef5beb6dd109873c0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c0d80cb0f9ab1690dc0bf01ea49d4a0b46cd6e8", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/2c0d80cb0f9ab1690dc0bf01ea49d4a0b46cd6e8", "committedDate": "2020-06-04T13:46:26Z", "message": "Fixing case when decision table is included in BKM function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzYxMjAy", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#pullrequestreview-424761202", "createdAt": "2020-06-04T19:25:29Z", "commit": {"oid": "2c0d80cb0f9ab1690dc0bf01ea49d4a0b46cd6e8"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDYzNDE3", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#pullrequestreview-425063417", "createdAt": "2020-06-05T07:38:09Z", "commit": {"oid": "2c0d80cb0f9ab1690dc0bf01ea49d4a0b46cd6e8"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MTU0NjQ3", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#pullrequestreview-425154647", "createdAt": "2020-06-05T09:46:52Z", "commit": {"oid": "2c0d80cb0f9ab1690dc0bf01ea49d4a0b46cd6e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MjM4OTA5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#pullrequestreview-425238909", "createdAt": "2020-06-05T12:05:22Z", "commit": {"oid": "2c0d80cb0f9ab1690dc0bf01ea49d4a0b46cd6e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MjA3ODcz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3316#pullrequestreview-426207873", "createdAt": "2020-06-08T12:58:50Z", "commit": {"oid": "2c0d80cb0f9ab1690dc0bf01ea49d4a0b46cd6e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 397, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}