{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Nzk1MDQx", "number": 3357, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo0NTowM1rOEOXTBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTozMjo0NVrOEQlOew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDk3MjIxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/contextmenu/ContextMenu.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo0NTowM1rOGxeeOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo0NTowM1rOGxeeOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzMjY2Ng==", "bodyText": "I do believe we could keep this component as a @ApplicationScoped, given the nature of its UI and API. Wdyt?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3357#discussion_r454532666", "createdAt": "2020-07-14T17:45:03Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/contextmenu/ContextMenu.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.editors.contextmenu;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.annotation.PostConstruct;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.HTMLElement;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorHeaderItem;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorItem;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorTextItem;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.mvp.Command;\n+\n+public class ContextMenu {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "212e222ce85ec8d08fc023893090349052d135a4"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODA2MDgxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/contextmenu/ContextMenuView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo0MjoyOFrOG0yT2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo0MjoyOFrOG0yT2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMzQxNg==", "bodyText": "Is it ok that we register different (logically same) handler instance in show than we un-register in removeDOMEventListeners ? asking as hideContextMenuHandler() always construct new instance of a handler.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3357#discussion_r458003416", "createdAt": "2020-07-21T10:42:28Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/contextmenu/ContextMenuView.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.editors.contextmenu;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.PreDestroy;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.dom.client.BrowserEvents;\n+import elemental2.dom.DomGlobal;\n+import elemental2.dom.Element;\n+import elemental2.dom.Event;\n+import elemental2.dom.EventListener;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.ListSelector;\n+\n+@Templated\n+public class ContextMenuView implements ContextMenu.View,\n+                                        HasListSelectorControl {\n+\n+    private ContextMenu presenter;\n+\n+    @DataField(\"list-selector\")\n+    private ListSelector listSelector;\n+\n+    @Inject\n+    public ContextMenuView(final ListSelector listSelector) {\n+        this.listSelector = listSelector;\n+    }\n+\n+    @Override\n+    public void init(final ContextMenu presenter) {\n+        this.presenter = presenter;\n+    }\n+\n+    @PreDestroy\n+    private void removeDOMEventListeners() {\n+        DomGlobal.document.removeEventListener(BrowserEvents.MOUSEDOWN,\n+                                               hideContextMenuHandler(),\n+                                               false);\n+        DomGlobal.document.removeEventListener(BrowserEvents.MOUSEWHEEL,\n+                                               hideContextMenuHandler(),\n+                                               false);\n+    }\n+\n+    @Override\n+    public void show() {\n+        listSelector.bind(this, 0, 0);\n+        listSelector.show();\n+\n+        DomGlobal.document.addEventListener(BrowserEvents.MOUSEDOWN,\n+                                            hideContextMenuHandler(),\n+                                            false);\n+        DomGlobal.document.addEventListener(BrowserEvents.MOUSEWHEEL,\n+                                            hideContextMenuHandler(),\n+                                            false);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82eaafadd617c0ed8ada84ed72ce07b3c4d1397"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODA3ODk1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/contextmenu/ContextMenu.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDo0ODoyM1rOG0yevw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMjo0NDoyNlrOG02KVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwNjIwNw==", "bodyText": "This seems be used just in single unit test, do we really need it?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3357#discussion_r458006207", "createdAt": "2020-07-21T10:48:23Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/contextmenu/ContextMenu.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.editors.contextmenu;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.HTMLElement;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorHeaderItem;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorItem;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorTextItem;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class ContextMenu {\n+\n+    private final List<ListSelectorItem> menuItems;\n+\n+    private View view;\n+\n+    @Inject\n+    public ContextMenu(final View view) {\n+        this.view = view;\n+        this.menuItems = new ArrayList<>();\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void show() { view.show(); }\n+\n+    public void show(Consumer<ContextMenu> contextMenuConsumer) {\n+        this.resetMenuItems();\n+        contextMenuConsumer.accept(this);\n+        this.show();\n+    }\n+\n+    public void hide() { view.hide(); }\n+\n+    public HTMLElement getElement() {\n+        return view.getElement();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82eaafadd617c0ed8ada84ed72ce07b3c4d1397"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA2NjUxNg==", "bodyText": "Yes, it is used by the component that instantiates the ContextMenu, in order to add it to the DOM.\nFor example:\n        final HTMLElement contextMenuElement = drdContextMenu.getElement();\n        DomGlobal.document.body.appendChild(contextMenuElement);", "url": "https://github.com/kiegroup/kie-wb-common/pull/3357#discussion_r458066516", "createdAt": "2020-07-21T12:44:26Z", "author": {"login": "vpellegrino"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/contextmenu/ContextMenu.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.editors.contextmenu;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.HTMLElement;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorHeaderItem;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorItem;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorTextItem;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class ContextMenu {\n+\n+    private final List<ListSelectorItem> menuItems;\n+\n+    private View view;\n+\n+    @Inject\n+    public ContextMenu(final View view) {\n+        this.view = view;\n+        this.menuItems = new ArrayList<>();\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void show() { view.show(); }\n+\n+    public void show(Consumer<ContextMenu> contextMenuConsumer) {\n+        this.resetMenuItems();\n+        contextMenuConsumer.accept(this);\n+        this.show();\n+    }\n+\n+    public void hide() { view.hide(); }\n+\n+    public HTMLElement getElement() {\n+        return view.getElement();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwNjIwNw=="}, "originalCommit": {"oid": "a82eaafadd617c0ed8ada84ed72ce07b3c4d1397"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODIyNTg3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/contextmenu/ContextMenu.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTozMjo0NVrOG0z1TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTozMjo0NVrOG0z1TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAyODM2NA==", "bodyText": "Could we please javadoc the consumer? From implementation I have some idea what it does but I think it is worth to write in few words.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3357#discussion_r458028364", "createdAt": "2020-07-21T11:32:45Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/contextmenu/ContextMenu.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.editors.contextmenu;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.dom.HTMLElement;\n+import org.jboss.errai.ui.client.local.api.elemental2.IsElement;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorHeaderItem;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorItem;\n+import org.kie.workbench.common.dmn.client.widgets.grid.controls.list.HasListSelectorControl.ListSelectorTextItem;\n+import org.uberfire.client.mvp.UberElemental;\n+import org.uberfire.mvp.Command;\n+\n+@ApplicationScoped\n+public class ContextMenu {\n+\n+    private final List<ListSelectorItem> menuItems;\n+\n+    private View view;\n+\n+    @Inject\n+    public ContextMenu(final View view) {\n+        this.view = view;\n+        this.menuItems = new ArrayList<>();\n+    }\n+\n+    @PostConstruct\n+    public void init() {\n+        view.init(this);\n+    }\n+\n+    public void show() { view.show(); }\n+\n+    public void show(Consumer<ContextMenu> contextMenuConsumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82eaafadd617c0ed8ada84ed72ce07b3c4d1397"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1343, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}