{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNDM4NTA5", "number": 3204, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1NTowNVrODlA_HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo0NDowNVrODnbsXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTQwMDYwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/AbstractDMNDiagramEditor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1NTowNVrOFxqZKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjowNToxMVrOFxqqQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxOTExMw==", "bodyText": "To me it is not clear, what exception can be propagated to this try catch.\nJira says open invalid content == open some non empty content. So when  I check transform implementation, I guess we speak about DMNClientDiagramServiceImpl.doTransformation where we have one try catch block wrapping all the code and handling all errors via, callback.\nAm I missing something?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3204#discussion_r387619113", "createdAt": "2020-03-04T11:55:05Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/AbstractDMNDiagramEditor.java", "diffHunk": "@@ -392,19 +393,23 @@ public boolean isDirty() {\n     @Override\n     @SetContent\n     public void setContent(final String path, final String value) {\n-        diagramServices.transform(value,\n-                                  new ServiceCallback<Diagram>() {\n-\n-                                      @Override\n-                                      public void onSuccess(final Diagram diagram) {\n-                                          AbstractDMNDiagramEditor.this.open(diagram);\n-                                      }\n-\n-                                      @Override\n-                                      public void onError(final ClientRuntimeError error) {\n-                                          AbstractDMNDiagramEditor.this.getEditor().onLoadError(error);\n-                                      }\n-                                  });\n+        try {\n+            diagramServices.transform(value,\n+                                      new ServiceCallback<Diagram>() {\n+\n+                                          @Override\n+                                          public void onSuccess(final Diagram diagram) {\n+                                              AbstractDMNDiagramEditor.this.open(diagram);\n+                                          }\n+\n+                                          @Override\n+                                          public void onError(final ClientRuntimeError error) {\n+                                              AbstractDMNDiagramEditor.this.getEditor().onLoadError(error);\n+                                          }\n+                                      });\n+        } catch (Exception e) {\n+            getEditor().showError(e.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78bd074e73f12e43cb7160c68fa4995abca79617"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYyMTY0MQ==", "bodyText": "Hi @jomarko this try {...} catch(.) block will be deleted when this PR is ready for review.\nAt the moment it was added to allow me to observe what was causing the error handled by the kogito-tooling code. Whatever it was, was leading to the ACE Editor not to be shown for invalid DMN files. We now know it's kogito-tooling calls to setContent(..) with valid and then invalid files in quick succession that is causing the problem..\nThe problem is that the Monaco editor (used for auto-complete of FEEL expressions) changes a JavaScript \"module loader\" to load itself. The same \"module loader\" is used by ACE to load itself (for the XML editor used to show invalid files). When the two calls occur in quick succession the Monaco editor loading is not complete and the ACE editor fails to load.\nA fix is still being researched......", "url": "https://github.com/kiegroup/kie-wb-common/pull/3204#discussion_r387621641", "createdAt": "2020-03-04T12:00:53Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/AbstractDMNDiagramEditor.java", "diffHunk": "@@ -392,19 +393,23 @@ public boolean isDirty() {\n     @Override\n     @SetContent\n     public void setContent(final String path, final String value) {\n-        diagramServices.transform(value,\n-                                  new ServiceCallback<Diagram>() {\n-\n-                                      @Override\n-                                      public void onSuccess(final Diagram diagram) {\n-                                          AbstractDMNDiagramEditor.this.open(diagram);\n-                                      }\n-\n-                                      @Override\n-                                      public void onError(final ClientRuntimeError error) {\n-                                          AbstractDMNDiagramEditor.this.getEditor().onLoadError(error);\n-                                      }\n-                                  });\n+        try {\n+            diagramServices.transform(value,\n+                                      new ServiceCallback<Diagram>() {\n+\n+                                          @Override\n+                                          public void onSuccess(final Diagram diagram) {\n+                                              AbstractDMNDiagramEditor.this.open(diagram);\n+                                          }\n+\n+                                          @Override\n+                                          public void onError(final ClientRuntimeError error) {\n+                                              AbstractDMNDiagramEditor.this.getEditor().onLoadError(error);\n+                                          }\n+                                      });\n+        } catch (Exception e) {\n+            getEditor().showError(e.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxOTExMw=="}, "originalCommit": {"oid": "78bd074e73f12e43cb7160c68fa4995abca79617"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYyMzQ4OA==", "bodyText": "Sorry, take your time, let me know when ready for review", "url": "https://github.com/kiegroup/kie-wb-common/pull/3204#discussion_r387623488", "createdAt": "2020-03-04T12:05:11Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/AbstractDMNDiagramEditor.java", "diffHunk": "@@ -392,19 +393,23 @@ public boolean isDirty() {\n     @Override\n     @SetContent\n     public void setContent(final String path, final String value) {\n-        diagramServices.transform(value,\n-                                  new ServiceCallback<Diagram>() {\n-\n-                                      @Override\n-                                      public void onSuccess(final Diagram diagram) {\n-                                          AbstractDMNDiagramEditor.this.open(diagram);\n-                                      }\n-\n-                                      @Override\n-                                      public void onError(final ClientRuntimeError error) {\n-                                          AbstractDMNDiagramEditor.this.getEditor().onLoadError(error);\n-                                      }\n-                                  });\n+        try {\n+            diagramServices.transform(value,\n+                                      new ServiceCallback<Diagram>() {\n+\n+                                          @Override\n+                                          public void onSuccess(final Diagram diagram) {\n+                                              AbstractDMNDiagramEditor.this.open(diagram);\n+                                          }\n+\n+                                          @Override\n+                                          public void onError(final ClientRuntimeError error) {\n+                                              AbstractDMNDiagramEditor.this.getEditor().onLoadError(error);\n+                                          }\n+                                      });\n+        } catch (Exception e) {\n+            getEditor().showError(e.getMessage());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxOTExMw=="}, "originalCommit": {"oid": "78bd074e73f12e43cb7160c68fa4995abca79617"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQxNzg5OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/AbstractDMNDiagramEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozMjo1NVrOFyaz7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozMjo1NVrOFyaz7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMjM5OA==", "bodyText": "This is a workaround.\nIf I simply used the member variable dataTypesPage here the Java compiler complained that it may not have been set.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3204#discussion_r388412398", "createdAt": "2020-03-05T16:32:55Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/AbstractDMNDiagramEditor.java", "diffHunk": "@@ -186,21 +208,20 @@ public void onStartup(final PlaceRequest place) {\n         diagramPropertiesDock.init(PERSPECTIVE_ID);\n         diagramPreviewAndExplorerDock.init(PERSPECTIVE_ID);\n \n-        feelInitializer.initializeFEELEditor();\n+        initialiseKieEditorForSessionProxy = VALID_DIAGRAM_PROXY;\n     }\n \n     void superDoStartUp(final PlaceRequest place) {\n         super.doStartUp(place);\n     }\n \n+    private DataTypesPage getDataTypesPage() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecea69f452f0261f84ec5e7dc63b564ab155e93"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQyNDAxOnYy", "diffSide": "LEFT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/main/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNDozMFrOFya36w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNDozMFrOFya36w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMzQxOQ==", "bodyText": "I've moved use of feelInitializer from the start-up methods to when the Diagram is successfully loaded and the Monaco editor (and hence FEEL support) is actually needed. Use of feelInitializer is not needed if the file contained invalid content and the ACE editor displayed.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3204#discussion_r388413419", "createdAt": "2020-03-05T16:34:30Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/main/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditor.java", "diffHunk": "@@ -197,7 +197,6 @@ public void init() {\n         getMenuSessionItems().setErrorConsumer(e -> hideLoadingViews());\n         editorSearchIndex.setCurrentAssetHashcodeSupplier(getGetCurrentContentHashSupplier());\n         editorSearchIndex.setIsDataTypesTabActiveSupplier(getIsDataTypesTabActiveSupplier());\n-        feelInitializer.initializeFEELEditor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ecea69f452f0261f84ec5e7dc63b564ab155e93"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjczNjY2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/ExpressionEditor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo0MDo1MFrOF1bKNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo0MDo1MFrOF1bKNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2MzgzMA==", "bodyText": "Just moved method to interface (to avoid a cast later) and re-ordered methods.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3204#discussion_r391563830", "createdAt": "2020-03-12T11:40:50Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/expressions/ExpressionEditor.java", "diffHunk": "@@ -151,11 +151,12 @@ public void handleCanvasElementUpdated(final CanvasElementUpdatedEvent event) {\n         }\n     }\n \n-    Optional<Command> getExitCommand() {\n-        return exitCommand;\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee788797b28237d904ea2843e2d45039c1cf4131"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc0MDY4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/search/DMNEditorSearchIndex.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo0MTo1OFrOF1bMkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo0MTo1OFrOF1bMkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2NDQzMg==", "bodyText": "There was an issue with subsequent calls to setContent(..) after the editor had had invalid state initially set (as there was no session and this code failed).", "url": "https://github.com/kiegroup/kie-wb-common/pull/3204#discussion_r391564432", "createdAt": "2020-03-12T11:41:58Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/search/DMNEditorSearchIndex.java", "diffHunk": "@@ -126,14 +126,18 @@ private SearchContext currentSearchContext() {\n         if (getIsDataTypesTabActiveSupplier().get()) {\n             return DATA_TYPES;\n         }\n-        if (getExpressionEditor().isActive()) {\n+        if (isExpressionEditorActive()) {\n             return BOXED_EXPRESSION;\n         }\n         return GRAPH;\n     }\n \n-    private ExpressionEditor getExpressionEditor() {\n-        return (ExpressionEditor) getCurrentSession().getExpressionEditor();\n+    private boolean isExpressionEditorActive() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee788797b28237d904ea2843e2d45039c1cf4131"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc0NzUwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/presenters/session/impl/SessionEditorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo0Mzo1OFrOF1bQpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo0Mzo1OFrOF1bQpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2NTQ3Nw==", "bodyText": "Another NPE being thrown following the change for KOGITO-437. Simple null safe-guard.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3204#discussion_r391565477", "createdAt": "2020-03-12T11:43:58Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/presenters/session/impl/SessionEditorImpl.java", "diffHunk": "@@ -96,7 +97,7 @@ public ScrollableLienzoPanel getCanvasPanel() {\n \n     @Override\n     protected Diagram getDiagram() {\n-        return diagramSupplier.get();\n+        return Objects.nonNull(diagramSupplier) ? diagramSupplier.get() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee788797b28237d904ea2843e2d45039c1cf4131"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNjc0NzgwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/presenters/session/impl/SessionViewerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo0NDowNVrOF1bQ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxMTo0NDowNVrOF1bQ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTU2NTUyOA==", "bodyText": "Another NPE being thrown following the change for KOGITO-437. Simple null safe-guard.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3204#discussion_r391565528", "createdAt": "2020-03-12T11:44:05Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/presenters/session/impl/SessionViewerImpl.java", "diffHunk": "@@ -76,7 +77,7 @@ public SessionViewerImpl(final WidgetWrapperView view,\n \n     @Override\n     protected Diagram getDiagram() {\n-        return diagramSupplier.get();\n+        return Objects.nonNull(diagramSupplier) ? diagramSupplier.get() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee788797b28237d904ea2843e2d45039c1cf4131"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1386, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}