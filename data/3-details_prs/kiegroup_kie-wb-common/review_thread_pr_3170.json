{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NTExMzg5", "number": 3170, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDowNDoxMVrODi1XjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToxMzo0MFrODq-Q0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODUyNTU3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDowNDoxMVrOFuTYSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNTo1MTo0MVrOFwJzdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjMyOA==", "bodyText": "I think it is better to create the Pattern object as an static field in this class, This way you can just call Pattern#match(s) passing the test string, and the pattern is already pre-compiled only once.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r384096328", "createdAt": "2020-02-25T20:04:11Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzNjU5Nw==", "bodyText": "Good point, thanks", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r386036597", "createdAt": "2020-02-29T15:51:41Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjMyOA=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODUyODU2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDowNToxMlrOFuTaIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMzoxNDoxOFrOFwy0Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjgwMg==", "bodyText": "The JIRA was expecting two options on the dropdown: constant and expression. So before merging, we should clarify if doing this way is still fine for eveyone.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r384096802", "createdAt": "2020-02-25T20:05:12Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NjE5Mg==", "bodyText": "This is marshallers part we need to do it on server side anyway despite of how it will be handled on the UI part.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r385756192", "createdAt": "2020-02-28T15:24:32Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjgwMg=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwODQ5OA==", "bodyText": "got it, thx!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r386708498", "createdAt": "2020-03-02T23:14:18Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjgwMg=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODU0MTU4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDowOTozN1rOFuTiZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozODozNFrOF7Fugw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5ODkxOQ==", "bodyText": "By doing this you're converting the \"checked\" exception UnsupportedEncodingException into an \"unchecked\" one of type IllegalArgumentException. This results a bit \"dangerous\" because the signature for the decode method does not provide any exception information, but the decode can still fail, right? By doing this, actually it'll just thow an IllegalArgumentException and maybe it appears on the UI, but it's not really useful for the end user.\nI was maybe expecting this decode method throwing the exception, and the caller for it catching the exception too, this way you can show a validation error to the user.\nBut again, not sure if makes completely sense, it depends on how to use it....", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r384098919", "createdAt": "2020-02-25T20:09:37Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {\n+            return new InputExpression(parentId, varDecl, decodedExpression);\n+        } else {\n+            return new InputConstant(parentId, varDecl, decodedExpression);\n+        }\n+    }\n+\n+    private static String decode(String text) {\n+        try {\n+            return URLDecoder.decode(text, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalArgumentException(text, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzNzc3Mw==", "bodyText": "This catch UnsupportedEncodingException since we have encoding as not changing literal it should work without issues.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r386037773", "createdAt": "2020-02-29T16:10:16Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {\n+            return new InputExpression(parentId, varDecl, decodedExpression);\n+        } else {\n+            return new InputConstant(parentId, varDecl, decodedExpression);\n+        }\n+    }\n+\n+    private static String decode(String text) {\n+        try {\n+            return URLDecoder.decode(text, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalArgumentException(text, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5ODkxOQ=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwOTA1Nw==", "bodyText": "but I mean, if that IllegalArgumentException is being thrown at some point... what wil happen to the end user? does the exception will end up on the UI? does the field keep working properly? I'm just concerned about there this exception will end up....", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r386709057", "createdAt": "2020-03-02T23:15:54Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {\n+            return new InputExpression(parentId, varDecl, decodedExpression);\n+        } else {\n+            return new InputConstant(parentId, varDecl, decodedExpression);\n+        }\n+    }\n+\n+    private static String decode(String text) {\n+        try {\n+            return URLDecoder.decode(text, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalArgumentException(text, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5ODkxOQ=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ1OTMwMg==", "bodyText": "@hasys any comments here?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397459302", "createdAt": "2020-03-24T21:03:21Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {\n+            return new InputExpression(parentId, varDecl, decodedExpression);\n+        } else {\n+            return new InputConstant(parentId, varDecl, decodedExpression);\n+        }\n+    }\n+\n+    private static String decode(String text) {\n+        try {\n+            return URLDecoder.decode(text, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalArgumentException(text, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5ODkxOQ=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMDcxMg==", "bodyText": "Process won't be saved and in server log you will see:\n\n  Click to expand\n  ERROR 24-03 23:23:41,319 (BPMNStandaloneDiagramServiceImpl.java:transform:159) \t Error whilst converting BPMN Diagram to XML.\njava.lang.IllegalArgumentException: dsaf\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.customproperties.InitializedVariable.decode(InitializedVariable.java:90)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.customproperties.InitializedVariable.createCustomInput(InitializedVariable.java:78)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.customproperties.InitializedVariable.inputOf(InitializedVariable.java:68)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.customproperties.ParsedAssignmentsInfo.lambda$createInitializedInputVariables$0(ParsedAssignmentsInfo.java:191)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\n\tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.customproperties.ParsedAssignmentsInfo.createInitializedInputVariables(ParsedAssignmentsInfo.java:196)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.fromstunner.properties.ActivityPropertyWriter.setAssignmentsInfo(ActivityPropertyWriter.java:66)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.fromstunner.tasks.TaskConverter.userTask(TaskConverter.java:150)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.NodeMatch.lambda$when$4(NodeMatch.java:85)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.NodeMatch$Case.match(NodeMatch.java:140)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.NodeMatch.lambda$apply$5(NodeMatch.java:113)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\n\tat java.base/java.util.LinkedList$LLSpliterator.tryAdvance(LinkedList.java:1253)\n\tat java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:127)\n\tat java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:502)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:488)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\n\tat java.base/java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:150)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:543)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.NodeMatch.apply(NodeMatch.java:115)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.fromstunner.tasks.TaskConverter.toFlowElement(TaskConverter.java:64)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.NodeMatch.lambda$when$4(NodeMatch.java:85)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.NodeMatch$Case.match(NodeMatch.java:140)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.NodeMatch.lambda$apply$5(NodeMatch.java:113)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\n\tat java.base/java.util.LinkedList$LLSpliterator.tryAdvance(LinkedList.java:1253)\n\tat java.base/java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:127)\n\tat java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:502)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:488)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\n\tat java.base/java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:150)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:543)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.NodeMatch.apply(NodeMatch.java:115)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.fromstunner.FlowElementConverter.toFlowElement(FlowElementConverter.java:55)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)\n\tat java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1675)\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.fromstunner.processes.ProcessConverterDelegate.convertChildNodes(ProcessConverterDelegate.java:71)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.fromstunner.processes.RootProcessConverter.convertProcess(RootProcessConverter.java:52)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.fromstunner.DefinitionsConverter.toDefinitions(DefinitionsConverter.java:54)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.BaseDirectDiagramMarshaller.marshall(BaseDirectDiagramMarshaller.java:123)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.standalone.backend.services.BPMNStandaloneDiagramServiceImpl.transform(BPMNStandaloneDiagramServiceImpl.java:157)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.standalone.backend.services.BPMNStandaloneDiagramServiceImpl$Proxy$_$$_WeldClientProxy.transform(Unknown Source)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat deployment.business-central.war//org.jboss.errai.bus.server.io.AbstractRPCMethodCallback.invokeMethodFromMessage(AbstractRPCMethodCallback.java:65)\n\tat deployment.business-central.war//org.jboss.errai.bus.server.io.ValueReplyRPCEndpointCallback.callback(ValueReplyRPCEndpointCallback.java:40)\n\tat deployment.business-central.war//org.jboss.errai.bus.server.io.RemoteServiceCallback.callback(RemoteServiceCallback.java:54)\n\tat deployment.business-central.war//org.jboss.errai.cdi.server.CDIExtensionPoints$2.callback(CDIExtensionPoints.java:448)\n\tat deployment.business-central.war//org.jboss.errai.bus.server.DeliveryPlan.deliver(DeliveryPlan.java:47)\n\tat deployment.business-central.war//org.jboss.errai.bus.server.ServerMessageBusImpl.sendGlobal(ServerMessageBusImpl.java:297)\n\tat deployment.business-central.war//org.jboss.errai.bus.server.SimpleDispatcher.dispatchGlobal(SimpleDispatcher.java:46)\n\tat deployment.business-central.war//org.jboss.errai.bus.server.service.ErraiServiceImpl.store(ErraiServiceImpl.java:96)\n\tat deployment.business-central.war//org.jboss.errai.bus.server.service.ErraiServiceImpl.store(ErraiServiceImpl.java:113)\n\tat deployment.business-central.war//org.jboss.errai.bus.server.servlet.DefaultBlockingServlet.doPost(DefaultBlockingServlet.java:144)\n\tat javax.servlet.api@1.0.0.Final//javax.servlet.http.HttpServlet.service(HttpServlet.java:706)\n\tat javax.servlet.api@1.0.0.Final//javax.servlet.http.HttpServlet.service(HttpServlet.java:791)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:74)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.standalone.backend.CORSFilter.doFilter(CORSFilter.java:78)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat io.opentracing.contrib.opentracing-jaxrs2//io.opentracing.contrib.jaxrs2.server.SpanFinishingFilter.doFilter(SpanFinishingFilter.java:55)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:61)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.ServletChain$1.handleRequest(ServletChain.java:68)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)\n\tat org.wildfly.extension.undertow@14.0.0.Final//org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78)\n\tat io.undertow.core@2.0.13.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:132)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)\n\tat io.undertow.core@2.0.13.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat io.undertow.core@2.0.13.Final//io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)\n\tat io.undertow.core@2.0.13.Final//io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)\n\tat io.undertow.core@2.0.13.Final//io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(NotificationReceiverHandler.java:50)\n\tat io.undertow.core@2.0.13.Final//io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)\n\tat io.undertow.core@2.0.13.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat org.wildfly.extension.undertow@14.0.0.Final//org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)\n\tat io.undertow.core@2.0.13.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat org.wildfly.extension.undertow@14.0.0.Final//org.wildfly.extension.undertow.deployment.GlobalRequestControllerHandler.handleRequest(GlobalRequestControllerHandler.java:68)\n\tat io.undertow.core@2.0.13.Final//io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:292)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.ServletInitialHandler.access$100(ServletInitialHandler.java:81)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:138)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.ServletInitialHandler$2.call(ServletInitialHandler.java:135)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1.call(ServletRequestContextThreadSetupAction.java:48)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.core.ContextClassLoaderSetupAction$1.call(ContextClassLoaderSetupAction.java:43)\n\tat org.wildfly.extension.undertow@14.0.0.Final//org.wildfly.extension.undertow.security.SecurityContextThreadSetupAction.lambda$create$0(SecurityContextThreadSetupAction.java:105)\n\tat org.wildfly.extension.undertow@14.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1502)\n\tat org.wildfly.extension.undertow@14.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1502)\n\tat org.wildfly.extension.undertow@14.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1502)\n\tat org.wildfly.extension.undertow@14.0.0.Final//org.wildfly.extension.undertow.deployment.UndertowDeploymentInfoService$UndertowThreadSetupAction.lambda$create$0(UndertowDeploymentInfoService.java:1502)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:272)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)\n\tat io.undertow.servlet@2.0.13.Final//io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:104)\n\tat io.undertow.core@2.0.13.Final//io.undertow.server.Connectors.executeRootHandler(Connectors.java:360)\n\tat io.undertow.core@2.0.13.Final//io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:830)\n\tat org.jboss.threads@2.3.2.Final//org.jboss.threads.ContextClassLoaderSavingRunnable.run(ContextClassLoaderSavingRunnable.java:35)\n\tat org.jboss.threads@2.3.2.Final//org.jboss.threads.EnhancedQueueExecutor.safeRun(EnhancedQueueExecutor.java:1985)\n\tat org.jboss.threads@2.3.2.Final//org.jboss.threads.EnhancedQueueExecutor$ThreadBody.doRunTask(EnhancedQueueExecutor.java:1487)\n\tat org.jboss.threads@2.3.2.Final//org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1378)\n\tat java.base/java.lang.Thread.run(Thread.java:834)\nCaused by: java.io.UnsupportedEncodingException: UTF-\n\tat java.base/java.net.URLDecoder.decode(URLDecoder.java:144)\n\tat deployment.business-central.war//org.kie.workbench.common.stunner.bpmn.backend.converters.customproperties.InitializedVariable.decode(InitializedVariable.java:88)\n\t... 121 more\n\n\nAlso it will be caught by failing test:\n\n  InitializedVariableTest#urlDecodeConstants\n  java.lang.IllegalArgumentException: %3C%3C%3C%23%21%21%21%23%3E%3E%3E\nat org.kie.workbench.common.stunner.bpmn.backend.converters.customproperties.InitializedVariable.decode(InitializedVariable.java:90)\nat org.kie.workbench.common.stunner.bpmn.backend.converters.customproperties.InitializedVariable.createCustomInput(InitializedVariable.java:78)\nat org.kie.workbench.common.stunner.bpmn.backend.converters.fromstunner.properties.InitializedVariableTest.urlDecodeConstants(InitializedVariableTest.java:53)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\nat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\nat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\nat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\nat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\nat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\nat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\nat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\nat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\nat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\n\nCaused by: java.io.UnsupportedEncodingException: UTF-\nat java.lang.StringCoding.decode(StringCoding.java:190)\nat java.lang.String.(String.java:426)\nat java.net.URLDecoder.decode(URLDecoder.java:190)\nat org.kie.workbench.common.stunner.bpmn.backend.converters.customproperties.InitializedVariable.decode(InitializedVariable.java:88)\n... 25 more\n\nI think it safe enough, since to get this error you need to modify and recompile the code (no user will do it) and also change literal to incorrect value and ignore the failing test.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397500712", "createdAt": "2020-03-24T22:29:52Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {\n+            return new InputExpression(parentId, varDecl, decodedExpression);\n+        } else {\n+            return new InputConstant(parentId, varDecl, decodedExpression);\n+        }\n+    }\n+\n+    private static String decode(String text) {\n+        try {\n+            return URLDecoder.decode(text, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalArgumentException(text, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5ODkxOQ=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMTkxOA==", "bodyText": "We can ignore this exception and return empty value, for an instance and in this case in worse case user will lose only value for this property, but it will be very hard to debug.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397501918", "createdAt": "2020-03-24T22:32:59Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {\n+            return new InputExpression(parentId, varDecl, decodedExpression);\n+        } else {\n+            return new InputConstant(parentId, varDecl, decodedExpression);\n+        }\n+    }\n+\n+    private static String decode(String text) {\n+        try {\n+            return URLDecoder.decode(text, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalArgumentException(text, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5ODkxOQ=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwNDEzMQ==", "bodyText": "Anyway user can do nothing to fix incorrect literal, because to fix it you need to modify the code and rebuild business central. So I am not sure how useful fancy message will be for the end user if someone will change for any reason this literal to incorrect one.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397504131", "createdAt": "2020-03-24T22:38:34Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {\n+            return new InputExpression(parentId, varDecl, decodedExpression);\n+        } else {\n+            return new InputConstant(parentId, varDecl, decodedExpression);\n+        }\n+    }\n+\n+    private static String decode(String text) {\n+        try {\n+            return URLDecoder.decode(text, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalArgumentException(text, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5ODkxOQ=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY0NjY0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/OutputAssignmentReader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NDoyN1rOFuUjSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxNjowOToxN1rOFwJ3qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNTUzMA==", "bodyText": "maybe here happens the same issue as on the decode method above - around un/checked exceptions..", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r384115530", "createdAt": "2020-02-25T20:44:27Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/OutputAssignmentReader.java", "diffHunk": "@@ -50,4 +79,18 @@ public AssociationDeclaration getAssociationDeclaration() {\n     private static String getPropertyName(Property prop) {\n         return prop.getName() == null ? prop.getId() : prop.getName();\n     }\n+\n+    private String encode(String body) {\n+        return Optional\n+                .ofNullable(body)\n+                .filter(b -> !\"null\".equals(b))\n+                .map(b -> {\n+                    try {\n+                        return URLEncoder.encode(b, \"UTF-8\");\n+                    } catch (UnsupportedEncodingException e) {\n+                        throw new IllegalArgumentException(body, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzNzY3Mg==", "bodyText": "This catch UnsupportedEncodingException since we have encoding as not changing literal it should work without issues.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r386037672", "createdAt": "2020-02-29T16:09:17Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/OutputAssignmentReader.java", "diffHunk": "@@ -50,4 +79,18 @@ public AssociationDeclaration getAssociationDeclaration() {\n     private static String getPropertyName(Property prop) {\n         return prop.getName() == null ? prop.getId() : prop.getName();\n     }\n+\n+    private String encode(String body) {\n+        return Optional\n+                .ofNullable(body)\n+                .filter(b -> !\"null\".equals(b))\n+                .map(b -> {\n+                    try {\n+                        return URLEncoder.encode(b, \"UTF-8\");\n+                    } catch (UnsupportedEncodingException e) {\n+                        throw new IllegalArgumentException(body, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNTUzMA=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY1MTQwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/fromstunner/properties/InitializedVariableTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NjowNFrOFuUmKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToyMzowNVrOFv4o3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjI2Nw==", "bodyText": "Is there really a need to mock the VariableDeclaration object? In general, for domain objects (with no logic around) there is no need to mock the instances, it just makes the test more complex...\nIf possible, please try to use the new operator, create the \"real\" instance, and if necessary, just spy on it.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r384116267", "createdAt": "2020-02-25T20:46:04Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/fromstunner/properties/InitializedVariableTest.java", "diffHunk": "@@ -66,6 +69,19 @@ public void setup() {\n         varScope.declare(\"\", \"BooleanTarget\", \"Boolean\");\n     }\n \n+    @Test\n+    public void testInputCustomVariable() {\n+        VariableDeclaration declaration = mock(VariableDeclaration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1NTM1OQ==", "bodyText": "Make sense, thank you!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r385755359", "createdAt": "2020-02-28T15:23:05Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/fromstunner/properties/InitializedVariableTest.java", "diffHunk": "@@ -66,6 +69,19 @@ public void setup() {\n         varScope.declare(\"\", \"BooleanTarget\", \"Boolean\");\n     }\n \n+    @Test\n+    public void testInputCustomVariable() {\n+        VariableDeclaration declaration = mock(VariableDeclaration.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjI2Nw=="}, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzg0NTkyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTowNjo0MFrOF7DGRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTozMDo1OFrOF7D2-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MTA2MA==", "bodyText": "why not moving this static final Pattern instance to the new Patterns class you just created? So htis way, the expression (String) will be compiled just once, instead of creating a new Pattern instance in every place you need it, and so also having to compile the string expression too.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397461060", "createdAt": "2020-03-24T21:06:40Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -38,6 +40,7 @@\n     private final String identifier;\n     private final String type;\n     private ItemDefinition itemDefinition;\n+    private static final Pattern EXPRESSION = Pattern.compile(Patterns.EXPRESSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MzUyOA==", "bodyText": "It is because I can't reuse Pattern in GWT and classic java pattern, both have different implementations. It looks like the String is the only thing I can keep in shared code.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397473528", "createdAt": "2020-03-24T21:30:58Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -38,6 +40,7 @@\n     private final String identifier;\n     private final String type;\n     private ItemDefinition itemDefinition;\n+    private static final Pattern EXPRESSION = Pattern.compile(Patterns.EXPRESSION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MTA2MA=="}, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzg0NzcwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-core-api/src/main/java/org/kie/workbench/common/stunner/core/util/Patterns.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTowNzoxNFrOF7DHcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjozNjoyMVrOF7FrCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MTM2Mw==", "bodyText": "I would just use a Pattern instance here as well, so the expression will be only compiled once. See above comments too about this.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397461363", "createdAt": "2020-03-24T21:07:14Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-core-api/src/main/java/org/kie/workbench/common/stunner/core/util/Patterns.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.util;\n+\n+/**\n+ * Regular expressions for testing common patterns\n+ */\n+public class Patterns {\n+\n+    public static final String EXPRESSION = \"^#\\\\{(.+)}$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ3MzYwNA==", "bodyText": "It is because I can't reuse Pattern in GWT and classic java pattern, both have different implementations. It looks like the String is the only thing I can keep in shared code.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397473604", "createdAt": "2020-03-24T21:31:09Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-core-api/src/main/java/org/kie/workbench/common/stunner/core/util/Patterns.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.util;\n+\n+/**\n+ * Regular expressions for testing common patterns\n+ */\n+public class Patterns {\n+\n+    public static final String EXPRESSION = \"^#\\\\{(.+)}$\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MTM2Mw=="}, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwMzI0Mg==", "bodyText": "ahh good point, it's a \"shared\" class sorry, I didn't noticed before. You're right, all good @hasys thanks!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397503242", "createdAt": "2020-03-24T22:36:21Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-core-api/src/main/java/org/kie/workbench/common/stunner/core/util/Patterns.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.util;\n+\n+/**\n+ * Regular expressions for testing common patterns\n+ */\n+public class Patterns {\n+\n+    public static final String EXPRESSION = \"^#\\\\{(.+)}$\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MTM2Mw=="}, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzg1MDY2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/OutputAssignmentReaderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTowODowNVrOF7DJSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjowNjoyMVrOF7E5gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MTgzNQ==", "bodyText": "instead of mocking, it's better to use \"real\" model objects on tests, if possible.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397461835", "createdAt": "2020-03-24T21:08:05Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/OutputAssignmentReaderTest.java", "diffHunk": "@@ -53,7 +58,35 @@ public void testFromAssociationWithPropertyId() {\n         DataOutputAssociation outputAssociation = mockDataOutputAssociation(SOURCE_NAME, property);\n         OutputAssignmentReader outputReader = OutputAssignmentReader.fromAssociation(outputAssociation);\n         assertNotNull(outputReader);\n-        assertResult(SOURCE_NAME, TARGET_ID, outputReader.getAssociationDeclaration());\n+        assertResult(SOURCE_NAME, TARGET_ID, AssociationDeclaration.Type.SourceTarget, outputReader.getAssociationDeclaration());\n+    }\n+\n+    @Test\n+    public void testFromAssociationWithExpression() {\n+        DataOutput output = spy(DataOutput.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5MDU2MQ==", "bodyText": "Yes, I agree, but it has protected constructor and it is not possible to instantiate DataOutputImpl from our tests.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397490561", "createdAt": "2020-03-24T22:06:21Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/OutputAssignmentReaderTest.java", "diffHunk": "@@ -53,7 +58,35 @@ public void testFromAssociationWithPropertyId() {\n         DataOutputAssociation outputAssociation = mockDataOutputAssociation(SOURCE_NAME, property);\n         OutputAssignmentReader outputReader = OutputAssignmentReader.fromAssociation(outputAssociation);\n         assertNotNull(outputReader);\n-        assertResult(SOURCE_NAME, TARGET_ID, outputReader.getAssociationDeclaration());\n+        assertResult(SOURCE_NAME, TARGET_ID, AssociationDeclaration.Type.SourceTarget, outputReader.getAssociationDeclaration());\n+    }\n+\n+    @Test\n+    public void testFromAssociationWithExpression() {\n+        DataOutput output = spy(DataOutput.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MTgzNQ=="}, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzg2NTEwOnYy", "diffSide": "LEFT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/ActivityDataIOEditorWidget.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToxMjoyOFrOF7DSTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTo1NDoxM1rOF7EjTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDE0Mw==", "bodyText": "good catch. In fact, for all these widgets that are using html templates I'm pretty sure the whole head can be removed, also no need for body tag... it's because those html represents \"fragments\" of html files, which are alrady appended to complete documents, so you can feel free also to remove the head/body tags as well.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397464143", "createdAt": "2020-03-24T21:12:28Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/ActivityDataIOEditorWidget.html", "diffHunk": "@@ -23,29 +23,9 @@\n     <meta name=\"description\" content=\"\">\n     <meta name=\"author\" content=\"\">\n \n-    <!--link rel=\"stylesheet/less\" href=\"less/bootstrap.less\" type=\"text/css\" /-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4NDg3Nw==", "bodyText": "Sounds good, will remove thank you", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397484877", "createdAt": "2020-03-24T21:54:13Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/ActivityDataIOEditorWidget.html", "diffHunk": "@@ -23,29 +23,9 @@\n     <meta name=\"description\" content=\"\">\n     <meta name=\"author\" content=\"\">\n \n-    <!--link rel=\"stylesheet/less\" href=\"less/bootstrap.less\" type=\"text/css\" /-->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDE0Mw=="}, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mzg2ODk4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentListItemWidgetViewImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToxMzo0MFrOF7DUow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTo1Mzo0N1rOF7Eiag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDczOQ==", "bodyText": "minor comment  - maybe results more clear to use if / else instead of adding a return keyword here...", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397464739", "createdAt": "2020-03-24T21:13:40Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentListItemWidgetViewImpl.java", "diffHunk": "@@ -274,13 +275,24 @@ public void setProcessVar(final String processVar) {\n     }\n \n     @Override\n-    public String getConstant() {\n-        return getModel().getConstant();\n+    public String getExpression() {\n+        return getModel().getExpression();\n     }\n \n     @Override\n-    public void setConstant(final String constant) {\n-        getModel().setConstant(constant);\n+    public void setExpression(final String expression) {\n+        if (getModel().getVariableType() == OUTPUT && isConstant(expression)) {\n+            notification.fire(new NotificationEvent(StunnerFormsClientFieldsConstants.INSTANCE.Only_expressions_allowed_for_output(),\n+                                                    NotificationEvent.NotificationType.ERROR));\n+            processVarComboBox.textBoxValueChanged(\"\");\n+\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ4NDY1MA==", "bodyText": "Good catch, thanks", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397484650", "createdAt": "2020-03-24T21:53:47Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentListItemWidgetViewImpl.java", "diffHunk": "@@ -274,13 +275,24 @@ public void setProcessVar(final String processVar) {\n     }\n \n     @Override\n-    public String getConstant() {\n-        return getModel().getConstant();\n+    public String getExpression() {\n+        return getModel().getExpression();\n     }\n \n     @Override\n-    public void setConstant(final String constant) {\n-        getModel().setConstant(constant);\n+    public void setExpression(final String expression) {\n+        if (getModel().getVariableType() == OUTPUT && isConstant(expression)) {\n+            notification.fire(new NotificationEvent(StunnerFormsClientFieldsConstants.INSTANCE.Only_expressions_allowed_for_output(),\n+                                                    NotificationEvent.NotificationType.ERROR));\n+            processVarComboBox.textBoxValueChanged(\"\");\n+\n+            return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDczOQ=="}, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1529, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}