{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2OTM5NDQ4", "number": 3276, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzoyNjoyNFrOECWu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDoyNjoxOVrOEHxXIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA1MDg3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzoyNjoyNFrOGew2hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzoyNjoyNFrOGew2hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMDg1Mg==", "bodyText": "is this method really necessary? does that null check really applies? Looking at the callers for it, maybe we can just replace it by the direct calls to the presenter instance: getEditor().getSessionPresenter().displayNotifications(t -> true/false);", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434910852", "createdAt": "2020-06-03T23:26:24Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "diffHunk": "@@ -259,10 +269,31 @@ public String getEditorIdentifier() {\n         return EDITOR_ID;\n     }\n \n+    private void displayNotifications(final boolean displayNotifications) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA1NTczOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzoyOTowNlrOGew5Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNTo1MjoxNVrOGnvueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMTU4Nw==", "bodyText": "why here displayNotifications are set to false, and set to true again at the end of this method? Looks tricky...\nI was just expecting a single (unique) call setting displayNotifications = false, once the presenter instance is being loaded for first time, and no need for more calls. Then the call to getEditor().getSessionPresenter().getView().showWarning(...); should work anyway, isn't it?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434911587", "createdAt": "2020-06-03T23:29:06Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "diffHunk": "@@ -259,10 +269,31 @@ public String getEditorIdentifier() {\n         return EDITOR_ID;\n     }\n \n+    private void displayNotifications(final boolean displayNotifications) {\n+        if (getEditor().getSessionPresenter() != null) {\n+            getEditor().getSessionPresenter().displayNotifications(t -> displayNotifications);\n+        }\n+    }\n     @GetContent\n     @Override\n     public Promise getContent() {\n         flush();\n+        displayNotifications(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxMzIyMw==", "bodyText": "Hi @romartin removed the method, just calling it directly, I had used it because had trouble with the test calling so I needed to check for null, not anymore. The reason it needs two calls is to 1) disable warnings 2) enable them again, I need to do this, otherwise you cannot see pop ups later, for instance if you try to set a Data Object in an AdHoc proces. like this", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438313223", "createdAt": "2020-06-10T18:03:43Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "diffHunk": "@@ -259,10 +269,31 @@ public String getEditorIdentifier() {\n         return EDITOR_ID;\n     }\n \n+    private void displayNotifications(final boolean displayNotifications) {\n+        if (getEditor().getSessionPresenter() != null) {\n+            getEditor().getSessionPresenter().displayNotifications(t -> displayNotifications);\n+        }\n+    }\n     @GetContent\n     @Override\n     public Promise getContent() {\n         flush();\n+        displayNotifications(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMTU4Nw=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5OTA3MA==", "bodyText": "ok, it makes sense, it's not ideal but because also the way internal notifications are being managed does not fits too much he, no worries, it's fine to go ahead.\nBut maybe should result clear to move all these new logic to a NEW method, so reading the getContent would result more easy to understand, as it will jsut have a couple of method calls (flush and your new one), and the return object is calling marshallers so also clear... WDYT?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r443899070", "createdAt": "2020-06-23T00:42:20Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "diffHunk": "@@ -259,10 +269,31 @@ public String getEditorIdentifier() {\n         return EDITOR_ID;\n     }\n \n+    private void displayNotifications(final boolean displayNotifications) {\n+        if (getEditor().getSessionPresenter() != null) {\n+            getEditor().getSessionPresenter().displayNotifications(t -> displayNotifications);\n+        }\n+    }\n     @GetContent\n     @Override\n     public Promise getContent() {\n         flush();\n+        displayNotifications(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMTU4Nw=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMyOTU5Mw==", "bodyText": "Good thinking @romartin refactored now.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r444329593", "createdAt": "2020-06-23T15:52:15Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "diffHunk": "@@ -259,10 +269,31 @@ public String getEditorIdentifier() {\n         return EDITOR_ID;\n     }\n \n+    private void displayNotifications(final boolean displayNotifications) {\n+        if (getEditor().getSessionPresenter() != null) {\n+            getEditor().getSessionPresenter().displayNotifications(t -> displayNotifications);\n+        }\n+    }\n     @GetContent\n     @Override\n     public Promise getContent() {\n         flush();\n+        displayNotifications(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMTU4Nw=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA2NTI1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzozNDo1MFrOGew_IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoyNjowMVrOGiBR5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMzA1Ng==", "bodyText": "Missing I18n for \"Error\" literal, it should be already available in the core messages...", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434913056", "createdAt": "2020-06-03T23:34:50Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "diffHunk": "@@ -259,10 +269,31 @@ public String getEditorIdentifier() {\n         return EDITOR_ID;\n     }\n \n+    private void displayNotifications(final boolean displayNotifications) {\n+        if (getEditor().getSessionPresenter() != null) {\n+            getEditor().getSessionPresenter().displayNotifications(t -> displayNotifications);\n+        }\n+    }\n     @GetContent\n     @Override\n     public Promise getContent() {\n         flush();\n+        displayNotifications(false);\n+        AbstractCanvasHandler canvasHandler = (AbstractCanvasHandler) getCanvasHandler();\n+        validator.validate(canvasHandler, violations -> {\n+\n+            if (!violations.isEmpty()) {\n+                List<String> violationMessages = new ArrayList<>();\n+                for (DiagramElementViolation<RuleViolation> next : violations) {\n+                    final Collection<DomainViolation> domainViolations = next.getDomainViolations();\n+\n+                    domainViolations.forEach(item -> violationMessages.add(\"Error: \" + item.getUUID() + \" - \" + item.getMessage() + \" - \" + item.getViolationType()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyNTczMw==", "bodyText": "fixed, added i18n now", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438325733", "createdAt": "2020-06-10T18:26:01Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "diffHunk": "@@ -259,10 +269,31 @@ public String getEditorIdentifier() {\n         return EDITOR_ID;\n     }\n \n+    private void displayNotifications(final boolean displayNotifications) {\n+        if (getEditor().getSessionPresenter() != null) {\n+            getEditor().getSessionPresenter().displayNotifications(t -> displayNotifications);\n+        }\n+    }\n     @GetContent\n     @Override\n     public Promise getContent() {\n         flush();\n+        displayNotifications(false);\n+        AbstractCanvasHandler canvasHandler = (AbstractCanvasHandler) getCanvasHandler();\n+        validator.validate(canvasHandler, violations -> {\n+\n+            if (!violations.isEmpty()) {\n+                List<String> violationMessages = new ArrayList<>();\n+                for (DiagramElementViolation<RuleViolation> next : violations) {\n+                    final Collection<DomainViolation> domainViolations = next.getDomainViolations();\n+\n+                    domainViolations.forEach(item -> violationMessages.add(\"Error: \" + item.getUUID() + \" - \" + item.getMessage() + \" - \" + item.getViolationType()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMzA1Ng=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA2NTQwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzozNDo1N1rOGew_Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODoyODozNlrOGiBXiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMzA4Nw==", "bodyText": "Missing I18n for \"Errors\" literal, it should be already available in the core messages...", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434913087", "createdAt": "2020-06-03T23:34:57Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "diffHunk": "@@ -259,10 +269,31 @@ public String getEditorIdentifier() {\n         return EDITOR_ID;\n     }\n \n+    private void displayNotifications(final boolean displayNotifications) {\n+        if (getEditor().getSessionPresenter() != null) {\n+            getEditor().getSessionPresenter().displayNotifications(t -> displayNotifications);\n+        }\n+    }\n     @GetContent\n     @Override\n     public Promise getContent() {\n         flush();\n+        displayNotifications(false);\n+        AbstractCanvasHandler canvasHandler = (AbstractCanvasHandler) getCanvasHandler();\n+        validator.validate(canvasHandler, violations -> {\n+\n+            if (!violations.isEmpty()) {\n+                List<String> violationMessages = new ArrayList<>();\n+                for (DiagramElementViolation<RuleViolation> next : violations) {\n+                    final Collection<DomainViolation> domainViolations = next.getDomainViolations();\n+\n+                    domainViolations.forEach(item -> violationMessages.add(\"Error: \" + item.getUUID() + \" - \" + item.getMessage() + \" - \" + item.getViolationType()));\n+                }\n+\n+                getEditor().getSessionPresenter().getView().showWarning(\"Errors: \" + violationMessages);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyNzE3OQ==", "bodyText": "fixed, added i18n now", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438327179", "createdAt": "2020-06-10T18:28:36Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/main/java/org/kie/workbench/common/stunner/kogito/client/editor/BPMNDiagramEditor.java", "diffHunk": "@@ -259,10 +269,31 @@ public String getEditorIdentifier() {\n         return EDITOR_ID;\n     }\n \n+    private void displayNotifications(final boolean displayNotifications) {\n+        if (getEditor().getSessionPresenter() != null) {\n+            getEditor().getSessionPresenter().displayNotifications(t -> displayNotifications);\n+        }\n+    }\n     @GetContent\n     @Override\n     public Promise getContent() {\n         flush();\n+        displayNotifications(false);\n+        AbstractCanvasHandler canvasHandler = (AbstractCanvasHandler) getCanvasHandler();\n+        validator.validate(canvasHandler, violations -> {\n+\n+            if (!violations.isEmpty()) {\n+                List<String> violationMessages = new ArrayList<>();\n+                for (DiagramElementViolation<RuleViolation> next : violations) {\n+                    final Collection<DomainViolation> domainViolations = next.getDomainViolations();\n+\n+                    domainViolations.forEach(item -> violationMessages.add(\"Error: \" + item.getUUID() + \" - \" + item.getMessage() + \" - \" + item.getViolationType()));\n+                }\n+\n+                getEditor().getSessionPresenter().getView().showWarning(\"Errors: \" + violationMessages);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxMzA4Nw=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA3NTY4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/fromstunner/DefinitionsConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo0MDoyOVrOGexFbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODo0NjowMFrOGiB8lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNDY2OQ==", "bodyText": "Does this makes sense? you're setting something to the pp instance, which value comes from the pp instance as well... is not p playing any role here? look at above lines, this looks incoherent\nAlso why I don't see this change in the DefinitionsConverter class for client side marshallers?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434914669", "createdAt": "2020-06-03T23:40:29Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/fromstunner/DefinitionsConverter.java", "diffHunk": "@@ -65,6 +65,7 @@ public Definitions toDefinitions() {\n         p.addAllRootElements(pp.getItemDefinitions());\n         p.addAllRootElements(pp.getRootElements());\n         p.addAllRootElements(pp.getInterfaces());\n+        pp.getProcess().getFlowElements().addAll(pp.getDataObjects());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMzNjY2Mw==", "bodyText": "Hi @romartin you are right, I checked and this line has no effect. Removed, (was part of original code)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438336663", "createdAt": "2020-06-10T18:46:00Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/fromstunner/DefinitionsConverter.java", "diffHunk": "@@ -65,6 +65,7 @@ public Definitions toDefinitions() {\n         p.addAllRootElements(pp.getItemDefinitions());\n         p.addAllRootElements(pp.getRootElements());\n         p.addAllRootElements(pp.getInterfaces());\n+        pp.getProcess().getFlowElements().addAll(pp.getDataObjects());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNDY2OQ=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA4MTYxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo0Mzo0M1rOGexJBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowMzo0MVrOGiCg1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTU5MA==", "bodyText": "Missing I18n", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434915590", "createdAt": "2020-06-03T23:43:43Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.validation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.workbench.common.stunner.bpmn.BPMNDefinitionSet;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.validation.BPMNViolation;\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.graph.Element;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.validation.DomainValidator;\n+import org.kie.workbench.common.stunner.core.validation.DomainViolation;\n+import org.kie.workbench.common.stunner.core.validation.Violation;\n+\n+@ApplicationScoped\n+public class BPMNDataObjectValidator implements DomainValidator {\n+\n+    private static final String ALLOWED_CHARS = \"^[a-zA-Z0-9\\\\-\\\\_\\\\ \\\\+\\\\/\\\\*\\\\?\\\\'\\\\.]*$\";\n+\n+    @Override\n+    public String getDefinitionSetId() {\n+        return BindableAdapterUtils.getDefinitionSetId(BPMNDefinitionSet.class);\n+    }\n+\n+    @Override\n+    public void validate(Diagram diagram, Consumer<Collection<DomainViolation>> resultConsumer) {\n+        Iterator<Element> it = diagram.getGraph().nodes().iterator();\n+        Map<String, String> dataObjectsMap = new HashMap<>();\n+        List<DomainViolation> violations = new ArrayList<>();\n+        while (it.hasNext()) {\n+            Element element = it.next();\n+            if (element.getContent() instanceof View && ((View) element.getContent()).getDefinition() instanceof DataObject) {\n+                    DataObject dataObject = (DataObject) ((View) element.getContent()).getDefinition();\n+\n+                    String name = dataObject.getName().getValue();\n+                    String type = dataObject.getType().getValue().getType();\n+                    String containedType = dataObjectsMap.get(name);\n+\n+                    if (containedType != null && !type.equals(containedType)) { // If already defined with different type\n+                        BPMNViolation bpmnViolation = new BPMNViolation(\"Data Object Exists with Same Name and Different Type: \" + name, Violation.Type.WARNING, element.getUUID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NTk0MQ==", "bodyText": "@romartin Added i18n", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438345941", "createdAt": "2020-06-10T19:03:41Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.validation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.workbench.common.stunner.bpmn.BPMNDefinitionSet;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.validation.BPMNViolation;\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.graph.Element;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.validation.DomainValidator;\n+import org.kie.workbench.common.stunner.core.validation.DomainViolation;\n+import org.kie.workbench.common.stunner.core.validation.Violation;\n+\n+@ApplicationScoped\n+public class BPMNDataObjectValidator implements DomainValidator {\n+\n+    private static final String ALLOWED_CHARS = \"^[a-zA-Z0-9\\\\-\\\\_\\\\ \\\\+\\\\/\\\\*\\\\?\\\\'\\\\.]*$\";\n+\n+    @Override\n+    public String getDefinitionSetId() {\n+        return BindableAdapterUtils.getDefinitionSetId(BPMNDefinitionSet.class);\n+    }\n+\n+    @Override\n+    public void validate(Diagram diagram, Consumer<Collection<DomainViolation>> resultConsumer) {\n+        Iterator<Element> it = diagram.getGraph().nodes().iterator();\n+        Map<String, String> dataObjectsMap = new HashMap<>();\n+        List<DomainViolation> violations = new ArrayList<>();\n+        while (it.hasNext()) {\n+            Element element = it.next();\n+            if (element.getContent() instanceof View && ((View) element.getContent()).getDefinition() instanceof DataObject) {\n+                    DataObject dataObject = (DataObject) ((View) element.getContent()).getDefinition();\n+\n+                    String name = dataObject.getName().getValue();\n+                    String type = dataObject.getType().getValue().getType();\n+                    String containedType = dataObjectsMap.get(name);\n+\n+                    if (containedType != null && !type.equals(containedType)) { // If already defined with different type\n+                        BPMNViolation bpmnViolation = new BPMNViolation(\"Data Object Exists with Same Name and Different Type: \" + name, Violation.Type.WARNING, element.getUUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTU5MA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA4MTc2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo0Mzo0N1rOGexJHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOTowMzo0OVrOGiChGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTYxMg==", "bodyText": "Missing I18n", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434915612", "createdAt": "2020-06-03T23:43:47Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.validation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.workbench.common.stunner.bpmn.BPMNDefinitionSet;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.validation.BPMNViolation;\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.graph.Element;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.validation.DomainValidator;\n+import org.kie.workbench.common.stunner.core.validation.DomainViolation;\n+import org.kie.workbench.common.stunner.core.validation.Violation;\n+\n+@ApplicationScoped\n+public class BPMNDataObjectValidator implements DomainValidator {\n+\n+    private static final String ALLOWED_CHARS = \"^[a-zA-Z0-9\\\\-\\\\_\\\\ \\\\+\\\\/\\\\*\\\\?\\\\'\\\\.]*$\";\n+\n+    @Override\n+    public String getDefinitionSetId() {\n+        return BindableAdapterUtils.getDefinitionSetId(BPMNDefinitionSet.class);\n+    }\n+\n+    @Override\n+    public void validate(Diagram diagram, Consumer<Collection<DomainViolation>> resultConsumer) {\n+        Iterator<Element> it = diagram.getGraph().nodes().iterator();\n+        Map<String, String> dataObjectsMap = new HashMap<>();\n+        List<DomainViolation> violations = new ArrayList<>();\n+        while (it.hasNext()) {\n+            Element element = it.next();\n+            if (element.getContent() instanceof View && ((View) element.getContent()).getDefinition() instanceof DataObject) {\n+                    DataObject dataObject = (DataObject) ((View) element.getContent()).getDefinition();\n+\n+                    String name = dataObject.getName().getValue();\n+                    String type = dataObject.getType().getValue().getType();\n+                    String containedType = dataObjectsMap.get(name);\n+\n+                    if (containedType != null && !type.equals(containedType)) { // If already defined with different type\n+                        BPMNViolation bpmnViolation = new BPMNViolation(\"Data Object Exists with Same Name and Different Type: \" + name, Violation.Type.WARNING, element.getUUID());\n+                        violations.add(bpmnViolation);\n+                    } else {\n+                        dataObjectsMap.put(name, type);\n+                    }\n+\n+                    if (!name.matches(ALLOWED_CHARS)) {\n+                        BPMNViolation bpmnViolation = new BPMNViolation(\"Data Object with Invalid Name Exists: \" + name, Violation.Type.WARNING, element.getUUID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0NjAwOA==", "bodyText": "@romartin Added i18n", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438346008", "createdAt": "2020-06-10T19:03:49Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.validation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.workbench.common.stunner.bpmn.BPMNDefinitionSet;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.validation.BPMNViolation;\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.graph.Element;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.validation.DomainValidator;\n+import org.kie.workbench.common.stunner.core.validation.DomainViolation;\n+import org.kie.workbench.common.stunner.core.validation.Violation;\n+\n+@ApplicationScoped\n+public class BPMNDataObjectValidator implements DomainValidator {\n+\n+    private static final String ALLOWED_CHARS = \"^[a-zA-Z0-9\\\\-\\\\_\\\\ \\\\+\\\\/\\\\*\\\\?\\\\'\\\\.]*$\";\n+\n+    @Override\n+    public String getDefinitionSetId() {\n+        return BindableAdapterUtils.getDefinitionSetId(BPMNDefinitionSet.class);\n+    }\n+\n+    @Override\n+    public void validate(Diagram diagram, Consumer<Collection<DomainViolation>> resultConsumer) {\n+        Iterator<Element> it = diagram.getGraph().nodes().iterator();\n+        Map<String, String> dataObjectsMap = new HashMap<>();\n+        List<DomainViolation> violations = new ArrayList<>();\n+        while (it.hasNext()) {\n+            Element element = it.next();\n+            if (element.getContent() instanceof View && ((View) element.getContent()).getDefinition() instanceof DataObject) {\n+                    DataObject dataObject = (DataObject) ((View) element.getContent()).getDefinition();\n+\n+                    String name = dataObject.getName().getValue();\n+                    String type = dataObject.getType().getValue().getType();\n+                    String containedType = dataObjectsMap.get(name);\n+\n+                    if (containedType != null && !type.equals(containedType)) { // If already defined with different type\n+                        BPMNViolation bpmnViolation = new BPMNViolation(\"Data Object Exists with Same Name and Different Type: \" + name, Violation.Type.WARNING, element.getUUID());\n+                        violations.add(bpmnViolation);\n+                    } else {\n+                        dataObjectsMap.put(name, type);\n+                    }\n+\n+                    if (!name.matches(ALLOWED_CHARS)) {\n+                        BPMNViolation bpmnViolation = new BPMNViolation(\"Data Object with Invalid Name Exists: \" + name, Violation.Type.WARNING, element.getUUID());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTYxMg=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA4MzExOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo0NDozMlrOGexJ3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoyNzozN1rOGnxKsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTgwNg==", "bodyText": "Maybe this class can be moved somewhere into the bpmn-api module, so making this validator available (in case) for both server and client side. Does it makes sense?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434915806", "createdAt": "2020-06-03T23:44:32Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.validation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.workbench.common.stunner.bpmn.BPMNDefinitionSet;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.validation.BPMNViolation;\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.graph.Element;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.validation.DomainValidator;\n+import org.kie.workbench.common.stunner.core.validation.DomainViolation;\n+import org.kie.workbench.common.stunner.core.validation.Violation;\n+\n+@ApplicationScoped\n+public class BPMNDataObjectValidator implements DomainValidator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM0OTA2MQ==", "bodyText": "Hi @romartin not sure, this class is annotated as ApplicationScoped, if I move it then it will be autoinitiallized? perhaps I can move it, but then will have to re-create a class in client and annotate it with ApplicationScoped correct? let me know what you think", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438349061", "createdAt": "2020-06-10T19:09:42Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.validation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.workbench.common.stunner.bpmn.BPMNDefinitionSet;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.validation.BPMNViolation;\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.graph.Element;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.validation.DomainValidator;\n+import org.kie.workbench.common.stunner.core.validation.DomainViolation;\n+import org.kie.workbench.common.stunner.core.validation.Violation;\n+\n+@ApplicationScoped\n+public class BPMNDataObjectValidator implements DomainValidator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTgwNg=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5NjkyNA==", "bodyText": "moving it to a the bpmn-api module implies that it'll be available in both server and client side, so I would the concrete scope (ApplicationScoped) for it is not really an issue here, the key implication of moving it is about that it'll became visible on server as well.\nOn the other hand, it makes sense that the \"domain validation\" happens on server side as well, and this is an implemention for a DomainValidator, so makes sense not only considering it client side.\nCan we do the change? I don't really remember now if the server code is calling those validators, but we should, and this one should also be part of the server validation IMO.\nLemme know plz.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r443896924", "createdAt": "2020-06-23T00:34:35Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.validation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.workbench.common.stunner.bpmn.BPMNDefinitionSet;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.validation.BPMNViolation;\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.graph.Element;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.validation.DomainValidator;\n+import org.kie.workbench.common.stunner.core.validation.DomainViolation;\n+import org.kie.workbench.common.stunner.core.validation.Violation;\n+\n+@ApplicationScoped\n+public class BPMNDataObjectValidator implements DomainValidator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTgwNg=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM1MzIwMA==", "bodyText": "Hi @romartin moved now, but since it accesses ClientTranslationServices I had to declare class abstract with 4 abstract methods, then define a ClientValidator that defines those methods.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r444353200", "createdAt": "2020-06-23T16:27:37Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/validation/BPMNDataObjectValidator.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.validation;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.workbench.common.stunner.bpmn.BPMNDefinitionSet;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.validation.BPMNViolation;\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.graph.Element;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.validation.DomainValidator;\n+import org.kie.workbench.common.stunner.core.validation.DomainViolation;\n+import org.kie.workbench.common.stunner.core.validation.Violation;\n+\n+@ApplicationScoped\n+public class BPMNDataObjectValidator implements DomainValidator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNTgwNg=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA4NzUxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/DataObjectImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo0NzoxM1rOGexMpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjozOToyMFrOGnxmGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNjUxOA==", "bodyText": "This class, as part of the BPMN eclise model for client side (kie-wb-common-stunner-bpmn-emf),  is being auto-generated from an eclipse model / plugin, so we're NOT  allowed to manually change any class in this module!\nIs the code here really necessary???? Again, this should not be manually changed please.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434916518", "createdAt": "2020-06-03T23:47:13Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/DataObjectImpl.java", "diffHunk": "@@ -1,19 +1,21 @@\n /**\n  * <copyright>\n- * \n+ *\n  * Copyright (c) 2010 SAP AG.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n  * http://www.eclipse.org/legal/epl-v10.html\n- * \n+ *\n  * Contributors:\n  *    Reiner Hille-Doering (SAP AG) - initial API and implementation and/or initial documentation\n- * \n+ *\n  * </copyright>\n  */\n package org.eclipse.bpmn2.impl;\n \n+import java.util.Objects;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1MDA3OA==", "bodyText": "Hi @romartin part of original code from this PR, let me refactor it, I believe it is used for a Set , the changes in this class are hashcode and equals.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438350078", "createdAt": "2020-06-10T19:11:42Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/DataObjectImpl.java", "diffHunk": "@@ -1,19 +1,21 @@\n /**\n  * <copyright>\n- * \n+ *\n  * Copyright (c) 2010 SAP AG.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n  * http://www.eclipse.org/legal/epl-v10.html\n- * \n+ *\n  * Contributors:\n  *    Reiner Hille-Doering (SAP AG) - initial API and implementation and/or initial documentation\n- * \n+ *\n  * </copyright>\n  */\n package org.eclipse.bpmn2.impl;\n \n+import java.util.Objects;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNjUxOA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4MDQ4MA==", "bodyText": "Hi @romartin fixed", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438380480", "createdAt": "2020-06-10T20:10:37Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/DataObjectImpl.java", "diffHunk": "@@ -1,19 +1,21 @@\n /**\n  * <copyright>\n- * \n+ *\n  * Copyright (c) 2010 SAP AG.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n  * http://www.eclipse.org/legal/epl-v10.html\n- * \n+ *\n  * Contributors:\n  *    Reiner Hille-Doering (SAP AG) - initial API and implementation and/or initial documentation\n- * \n+ *\n  * </copyright>\n  */\n package org.eclipse.bpmn2.impl;\n \n+import java.util.Objects;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNjUxOA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5NDU0Mw==", "bodyText": "please let's avoid changing this file at all, still changes just on code styling", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r443894543", "createdAt": "2020-06-23T00:25:17Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/DataObjectImpl.java", "diffHunk": "@@ -1,19 +1,21 @@\n /**\n  * <copyright>\n- * \n+ *\n  * Copyright (c) 2010 SAP AG.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n  * http://www.eclipse.org/legal/epl-v10.html\n- * \n+ *\n  * Contributors:\n  *    Reiner Hille-Doering (SAP AG) - initial API and implementation and/or initial documentation\n- * \n+ *\n  * </copyright>\n  */\n package org.eclipse.bpmn2.impl;\n \n+import java.util.Objects;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNjUxOA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM2MDIxOQ==", "bodyText": "Hi @romartin reverted. The first PR relied on this class and modified it, I refactored it and removed the changes, but seems I left a couple of lines, reverted now", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r444360219", "createdAt": "2020-06-23T16:39:20Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/DataObjectImpl.java", "diffHunk": "@@ -1,19 +1,21 @@\n /**\n  * <copyright>\n- * \n+ *\n  * Copyright (c) 2010 SAP AG.\n  * All rights reserved. This program and the accompanying materials\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n  * http://www.eclipse.org/legal/epl-v10.html\n- * \n+ *\n  * Contributors:\n  *    Reiner Hille-Doering (SAP AG) - initial API and implementation and/or initial documentation\n- * \n+ *\n  * </copyright>\n  */\n package org.eclipse.bpmn2.impl;\n \n+import java.util.Objects;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNjUxOA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA5NTYxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1MTozOFrOGexRdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyMDo0MlrOGiE6ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNzc1MA==", "bodyText": "no need for even variable creation, this argument and below ones can be inlined in the constructor for AssignmentData (eg: datainput != null ? datainput : null)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434917750", "createdAt": "2020-06-03T23:51:38Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4NTM0Nw==", "bodyText": "Hi @romartin (part of initial PR) this set of code was duplicate from method  public void showDataIOEditor(final String datatypes) {\nI refactored it so that it is not duplicate. On the above suggestion, seems cannot be inlined since input vars have two variables that cann affect it\nString inputvars = null;\nif (datainput != null) {\ninputvars = datainput;\n}\nif (datainputset != null) {\ninputvars = datainputset;\n}\nsame for output vars\nString outputvars = null;\nif (dataoutput != null) {\noutputvars = dataoutput;\n}\nif (dataoutputset != null) {\noutputvars = dataoutputset;\n}\nLet me know if ok", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438385347", "createdAt": "2020-06-10T20:20:42Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxNzc1MA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA5NzQ1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1MjozN1rOGexSnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyNjoxMFrOGiFFuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxODA0NQ==", "bodyText": "IMO no need for a helper method that calls also another single helper method...", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434918045", "createdAt": "2020-06-03T23:52:37Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {\n+        Iterable<Node> nodes = canvasSessionManager.getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+\n+        final Set<String> parentIds = getParentIds();\n+        // Only return Data Objects that have the same id as the current as the parent and its parent recursively\n+        return StreamSupport.stream(nodes.spliterator(), false)\n+                .filter(this::isBPMNDefinition)\n+                .map(elm -> (Node<View<BPMNDefinition>, Edge>) elm)\n+                .filter(elm -> {\n+                    if (elm.getContent().getDefinition() instanceof DataObject) {\n+                        final Element parent = getParentElement(elm);\n+                        if (parent == null) { // test\n+                            return true;\n+                        }\n+\n+                        return parentIds.contains(parent.getUUID());\n+                    }\n+                    return false;\n+                })\n+                .map(elm -> ((DataObject) elm.getContent().getDefinition()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    protected Element<?> getParentElement(final Node<?, ? extends Edge> element) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODE1NQ==", "bodyText": "removed @romartin", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438388155", "createdAt": "2020-06-10T20:26:10Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {\n+        Iterable<Node> nodes = canvasSessionManager.getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+\n+        final Set<String> parentIds = getParentIds();\n+        // Only return Data Objects that have the same id as the current as the parent and its parent recursively\n+        return StreamSupport.stream(nodes.spliterator(), false)\n+                .filter(this::isBPMNDefinition)\n+                .map(elm -> (Node<View<BPMNDefinition>, Edge>) elm)\n+                .filter(elm -> {\n+                    if (elm.getContent().getDefinition() instanceof DataObject) {\n+                        final Element parent = getParentElement(elm);\n+                        if (parent == null) { // test\n+                            return true;\n+                        }\n+\n+                        return parentIds.contains(parent.getUUID());\n+                    }\n+                    return false;\n+                })\n+                .map(elm -> ((DataObject) elm.getContent().getDefinition()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    protected Element<?> getParentElement(final Node<?, ? extends Edge> element) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxODA0NQ=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTA5ODMwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1Mjo1OVrOGexTFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyNzowMlrOGiFHZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxODE2NQ==", "bodyText": "can be static", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434918165", "createdAt": "2020-06-03T23:52:59Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {\n+        Iterable<Node> nodes = canvasSessionManager.getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+\n+        final Set<String> parentIds = getParentIds();\n+        // Only return Data Objects that have the same id as the current as the parent and its parent recursively\n+        return StreamSupport.stream(nodes.spliterator(), false)\n+                .filter(this::isBPMNDefinition)\n+                .map(elm -> (Node<View<BPMNDefinition>, Edge>) elm)\n+                .filter(elm -> {\n+                    if (elm.getContent().getDefinition() instanceof DataObject) {\n+                        final Element parent = getParentElement(elm);\n+                        if (parent == null) { // test\n+                            return true;\n+                        }\n+\n+                        return parentIds.contains(parent.getUUID());\n+                    }\n+                    return false;\n+                })\n+                .map(elm -> ((DataObject) elm.getContent().getDefinition()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    protected Element<?> getParentElement(final Node<?, ? extends Edge> element) {\n+        return graphUtils.getParent(element);\n+    }\n+\n+    private String dataObjectToProcessVariableFormat(DataObject dataObject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4ODU4MA==", "bodyText": "changed to static @romartin", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438388580", "createdAt": "2020-06-10T20:27:02Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {\n+        Iterable<Node> nodes = canvasSessionManager.getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+\n+        final Set<String> parentIds = getParentIds();\n+        // Only return Data Objects that have the same id as the current as the parent and its parent recursively\n+        return StreamSupport.stream(nodes.spliterator(), false)\n+                .filter(this::isBPMNDefinition)\n+                .map(elm -> (Node<View<BPMNDefinition>, Edge>) elm)\n+                .filter(elm -> {\n+                    if (elm.getContent().getDefinition() instanceof DataObject) {\n+                        final Element parent = getParentElement(elm);\n+                        if (parent == null) { // test\n+                            return true;\n+                        }\n+\n+                        return parentIds.contains(parent.getUUID());\n+                    }\n+                    return false;\n+                })\n+                .map(elm -> ((DataObject) elm.getContent().getDefinition()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    protected Element<?> getParentElement(final Node<?, ? extends Edge> element) {\n+        return graphUtils.getParent(element);\n+    }\n+\n+    private String dataObjectToProcessVariableFormat(DataObject dataObject) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxODE2NQ=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTEwMDYwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1NDoyMlrOGexUeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDoyOToyMlrOGiFMGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxODUyMQ==", "bodyText": "no longer need for using StringBuilder class... it's redundant and causing complexity. The complier / transpiler already will do it efficiently even if you just concatenate strings... this way we can reduce all these lines into a single return line, isn't it?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434918521", "createdAt": "2020-06-03T23:54:22Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {\n+        Iterable<Node> nodes = canvasSessionManager.getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+\n+        final Set<String> parentIds = getParentIds();\n+        // Only return Data Objects that have the same id as the current as the parent and its parent recursively\n+        return StreamSupport.stream(nodes.spliterator(), false)\n+                .filter(this::isBPMNDefinition)\n+                .map(elm -> (Node<View<BPMNDefinition>, Edge>) elm)\n+                .filter(elm -> {\n+                    if (elm.getContent().getDefinition() instanceof DataObject) {\n+                        final Element parent = getParentElement(elm);\n+                        if (parent == null) { // test\n+                            return true;\n+                        }\n+\n+                        return parentIds.contains(parent.getUUID());\n+                    }\n+                    return false;\n+                })\n+                .map(elm -> ((DataObject) elm.getContent().getDefinition()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    protected Element<?> getParentElement(final Node<?, ? extends Edge> element) {\n+        return graphUtils.getParent(element);\n+    }\n+\n+    private String dataObjectToProcessVariableFormat(DataObject dataObject) {\n+        StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM4OTc4Nw==", "bodyText": "changed @romartin", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438389787", "createdAt": "2020-06-10T20:29:22Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {\n+        Iterable<Node> nodes = canvasSessionManager.getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+\n+        final Set<String> parentIds = getParentIds();\n+        // Only return Data Objects that have the same id as the current as the parent and its parent recursively\n+        return StreamSupport.stream(nodes.spliterator(), false)\n+                .filter(this::isBPMNDefinition)\n+                .map(elm -> (Node<View<BPMNDefinition>, Edge>) elm)\n+                .filter(elm -> {\n+                    if (elm.getContent().getDefinition() instanceof DataObject) {\n+                        final Element parent = getParentElement(elm);\n+                        if (parent == null) { // test\n+                            return true;\n+                        }\n+\n+                        return parentIds.contains(parent.getUUID());\n+                    }\n+                    return false;\n+                })\n+                .map(elm -> ((DataObject) elm.getContent().getDefinition()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    protected Element<?> getParentElement(final Node<?, ? extends Edge> element) {\n+        return graphUtils.getParent(element);\n+    }\n+\n+    private String dataObjectToProcessVariableFormat(DataObject dataObject) {\n+        StringBuilder builder = new StringBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxODUyMQ=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTEwMzk4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1NTo1OFrOGexWYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoyOTo0NFrOGnzb6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTAxMA==", "bodyText": "Maybe we can move this method into some helper class as an static method as well, in the BPMN modules, which receives the diagram or canvasHandler as argument, so you can call it from here by passing the instance returned by the sessionManager.getCurrentSession()", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434919010", "createdAt": "2020-06-03T23:55:58Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MTA4Nw==", "bodyText": "Hi @romartin good idea, what class should it be moved to?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438391087", "createdAt": "2020-06-10T20:31:56Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTAxMA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5OTE4NQ==", "bodyText": "bpmn-api maybe?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r443899185", "createdAt": "2020-06-23T00:42:43Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTAxMA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MDM3Ng==", "bodyText": "Hi @romartin moved now to bpmn-api module (DataObjectUtils)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r444390376", "createdAt": "2020-06-23T17:29:44Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTAxMA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTEwNTQ2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1Njo0NlrOGexXLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzozMjowOFrOGnzhQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTIxNQ==", "bodyText": "can it be moved to some helper class for BPMN, which receives the diagram from here?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434919215", "createdAt": "2020-06-03T23:56:46Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MTE0Mg==", "bodyText": "Hi @romartin good idea, what class should it be moved to?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438391142", "createdAt": "2020-06-10T20:32:02Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTIxNQ=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5NzU3MA==", "bodyText": "if the helper method just relies on the domain model, on the process structure, it's fine moving it to the bpmn-api module, because all the domain model stuff is in the api module, also we can reuse it from both server and client side.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r443897570", "createdAt": "2020-06-23T00:36:32Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTIxNQ=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MTc0Ng==", "bodyText": "Hi @romartin findDataObjects moved to DataObjectUtils in bpmn-api module", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r444391746", "createdAt": "2020-06-23T17:32:08Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTIxNQ=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTEwNjQ0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1NzoyMlrOGexXwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDozMToxMVrOGiFPsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTM2MQ==", "bodyText": "can it be private", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434919361", "createdAt": "2020-06-03T23:57:22Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {\n+        Iterable<Node> nodes = canvasSessionManager.getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+\n+        final Set<String> parentIds = getParentIds();\n+        // Only return Data Objects that have the same id as the current as the parent and its parent recursively\n+        return StreamSupport.stream(nodes.spliterator(), false)\n+                .filter(this::isBPMNDefinition)\n+                .map(elm -> (Node<View<BPMNDefinition>, Edge>) elm)\n+                .filter(elm -> {\n+                    if (elm.getContent().getDefinition() instanceof DataObject) {\n+                        final Element parent = getParentElement(elm);\n+                        if (parent == null) { // test\n+                            return true;\n+                        }\n+\n+                        return parentIds.contains(parent.getUUID());\n+                    }\n+                    return false;\n+                })\n+                .map(elm -> ((DataObject) elm.getContent().getDefinition()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    protected Element<?> getParentElement(final Node<?, ? extends Edge> element) {\n+        return graphUtils.getParent(element);\n+    }\n+\n+    private String dataObjectToProcessVariableFormat(DataObject dataObject) {\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(dataObject.getName().getValue());\n+        builder.append(\":\");\n+        builder.append(dataObject.getType().getValue().getType());\n+        return builder.toString();\n+    }\n+\n+    protected String getSelectedElementUUID(ClientSession clientSession) {\n+        if (clientSession instanceof EditorSession) {\n+            final SelectionControl selectionControl = ((EditorSession) clientSession).getSelectionControl();\n+            if (null != selectionControl) {\n+                final Collection<String> selectedItems = selectionControl.getSelectedItems();\n+                if (null != selectedItems && !selectedItems.isEmpty()) {\n+                    return selectedItems.iterator().next();\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    protected boolean isBPMNDefinition(Node node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MDcwNQ==", "bodyText": "Hi @romartin currently used in tests", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438390705", "createdAt": "2020-06-10T20:31:11Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {\n+        Set<String> parentIds = new HashSet<>();\n+        final Node selectedElement = getSelectedElement();\n+        Element parent = GraphUtils.getParent(selectedElement);\n+\n+        if (selectedElement != null) {\n+            final String mainDiagramId = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getMetadata().getCanvasRootUUID();\n+            parentIds.add(parent.getUUID());\n+\n+            while (!parent.getUUID().equals(mainDiagramId)) {\n+                parent = getParentElement(parent.asNode());\n+                parentIds.add(parent.getUUID());\n+            }\n+        }\n+        return parentIds;\n+    }\n+\n+    private Set<DataObject> findDataObjects() {\n+        Iterable<Node> nodes = canvasSessionManager.getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+\n+        final Set<String> parentIds = getParentIds();\n+        // Only return Data Objects that have the same id as the current as the parent and its parent recursively\n+        return StreamSupport.stream(nodes.spliterator(), false)\n+                .filter(this::isBPMNDefinition)\n+                .map(elm -> (Node<View<BPMNDefinition>, Edge>) elm)\n+                .filter(elm -> {\n+                    if (elm.getContent().getDefinition() instanceof DataObject) {\n+                        final Element parent = getParentElement(elm);\n+                        if (parent == null) { // test\n+                            return true;\n+                        }\n+\n+                        return parentIds.contains(parent.getUUID());\n+                    }\n+                    return false;\n+                })\n+                .map(elm -> ((DataObject) elm.getContent().getDefinition()))\n+                .collect(Collectors.toSet());\n+    }\n+\n+    protected Element<?> getParentElement(final Node<?, ? extends Edge> element) {\n+        return graphUtils.getParent(element);\n+    }\n+\n+    private String dataObjectToProcessVariableFormat(DataObject dataObject) {\n+        StringBuilder builder = new StringBuilder();\n+        builder.append(dataObject.getName().getValue());\n+        builder.append(\":\");\n+        builder.append(dataObject.getType().getValue().getType());\n+        return builder.toString();\n+    }\n+\n+    protected String getSelectedElementUUID(ClientSession clientSession) {\n+        if (clientSession instanceof EditorSession) {\n+            final SelectionControl selectionControl = ((EditorSession) clientSession).getSelectionControl();\n+            if (null != selectionControl) {\n+                final Collection<String> selectedItems = selectionControl.getSelectedItems();\n+                if (null != selectedItems && !selectedItems.isEmpty()) {\n+                    return selectedItems.iterator().next();\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    protected boolean isBPMNDefinition(Node node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTM2MQ=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTEwNjk3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1Nzo0MFrOGexYFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzozMzo0NlrOGnzkgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTQ0NA==", "bodyText": "can it be private", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434919444", "createdAt": "2020-06-03T23:57:40Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MTM3NA==", "bodyText": "Hi @romartin currently used in tests", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438391374", "createdAt": "2020-06-10T20:32:32Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTQ0NA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5NzY2OQ==", "bodyText": "it can be package protected access maybe?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r443897669", "createdAt": "2020-06-23T00:36:57Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTQ0NA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MjU3OA==", "bodyText": "Hi @romartin changed now", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r444392578", "createdAt": "2020-06-23T17:33:46Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {\n+        if (bpmnModel instanceof BaseUserTask) {\n+            return DEFAULT_IGNORED_PROPERTY_NAMES;\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    protected Node getSelectedElement() {\n+        String elementUUID = getSelectedElementUUID(canvasSessionManager.getCurrentSession());\n+        if (elementUUID != null) {\n+            return canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram().getGraph().getNode(elementUUID);\n+        }\n+        return null;\n+    }\n+\n+    protected Set<String> getParentIds() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTQ0NA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTEwNzA4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1Nzo0NFrOGexYJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzozNDo0MVrOGnzmew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTQ2Mg==", "bodyText": "can it be private", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434919462", "createdAt": "2020-06-03T23:57:44Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MTYzNg==", "bodyText": "Hi @romartin currently used in tests", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438391636", "createdAt": "2020-06-10T20:32:59Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTQ2Mg=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5NzY5Mw==", "bodyText": "it can be package protected access maybe?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r443897693", "createdAt": "2020-06-23T00:37:02Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTQ2Mg=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MzA4Mw==", "bodyText": "Hi @romartin changed now", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r444393083", "createdAt": "2020-06-23T17:34:41Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,\n+                                             final String datainputset,\n+                                             final String dataoutput,\n+                                             final String dataoutputset,\n+                                             final String processvars,\n+                                             final String assignments,\n+                                             final String disallowedpropertynames) {\n+        String inputvars = null;\n+        if (datainput != null) {\n+            inputvars = datainput;\n+        }\n+        if (datainputset != null) {\n+            inputvars = datainputset;\n+        }\n+        String outputvars = null;\n+        if (dataoutput != null) {\n+            outputvars = dataoutput;\n+        }\n+        if (dataoutputset != null) {\n+            outputvars = dataoutputset;\n+        }\n+        AssignmentData assignmentData = new AssignmentData(inputvars,\n+                                                           outputvars,\n+                                                           processvars,\n+                                                           assignments,\n+                                                           disallowedpropertynames);\n+        return assignmentData.getVariableCountsString(hasInputVars,\n+                                                      isSingleInputVar,\n+                                                      hasOutputVars,\n+                                                      isSingleOutputVar);\n+    }\n+\n+    protected String getProcessVariables() {\n+        Diagram diagram = canvasSessionManager.getCurrentSession().getCanvasHandler().getDiagram();\n+        Node selectedElement = getSelectedElement();\n+        String variables = VariableUtils.encodeProcessVariables(diagram, selectedElement);\n+        StringBuilder sb = new StringBuilder();\n+        if (!variables.isEmpty()) {\n+            sb.append(variables);\n+        }\n+\n+        String dataObjects =\n+                findDataObjects().stream()\n+                        .map(this::dataObjectToProcessVariableFormat)\n+                        .collect(Collectors.joining(\",\"));\n+\n+        if (!dataObjects.isEmpty()) {\n+            sb.append(dataObjects);\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    protected String getDisallowedPropertyNames() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTQ2Mg=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTEwNzM3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1Nzo1M1rOGexYVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzozNTozN1rOGnzocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTUxMA==", "bodyText": "can it be private", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434919510", "createdAt": "2020-06-03T23:57:53Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MTg3Mw==", "bodyText": "Hi @romartin currently used in tests", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438391873", "createdAt": "2020-06-10T20:33:25Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTUxMA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5NTA4MA==", "bodyText": "can it be package protected (no access modifier) then?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r443895080", "createdAt": "2020-06-23T00:27:22Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTUxMA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MzU4Nw==", "bodyText": "Hi @romartin changed now", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r444393587", "createdAt": "2020-06-23T17:35:37Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {\n+\n+        Map<String, String> assignmentsProperties = AssignmentParser.parseAssignmentsInfo(assignmentsInfo);\n+\n+        String variableCountsString = getVariableCountsString(assignmentsProperties.get(AssignmentParser.DATAINPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAINPUTSET),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUT),\n+                                                              assignmentsProperties.get(AssignmentParser.DATAOUTPUTSET),\n+                                                              getProcessVariables(),\n+                                                              assignmentsProperties.get(AssignmentParser.ASSIGNMENTS),\n+                                                              getDisallowedPropertyNames());\n+        assignmentsTextBox.setText(variableCountsString);\n+    }\n+\n+    protected String getVariableCountsString(final String datainput,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTUxMA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTEwNzgyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMzo1ODowM1rOGexYkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMDozNDowMVrOGiFVhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTU2OQ==", "bodyText": "can it be private", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434919569", "createdAt": "2020-06-03T23:58:03Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM5MjE5OQ==", "bodyText": "hi @romartin changed to private", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438392199", "createdAt": "2020-06-10T20:34:01Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentsEditorWidget.java", "diffHunk": "@@ -142,6 +152,163 @@ public void setValue(final String value,\n         }\n     }\n \n+    protected void initTextBox() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkxOTU2OQ=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTExMTYzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/validation/ClientDiagramValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMDowMDowOFrOGexauw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMjoxMTo1MFrOGiwiGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyMDEyMw==", "bodyText": "please still better using a org.jboss.errai.ioc.client.api.ManagedInstance instead of a regular Instance, for the injection points on client side.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434920123", "createdAt": "2020-06-04T00:00:08Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/validation/ClientDiagramValidator.java", "diffHunk": "@@ -40,10 +43,12 @@ protected ClientDiagramValidator() {\n     public ClientDiagramValidator(final DefinitionManager definitionManager,\n                                   final RuleManager ruleManager,\n                                   final TreeWalkTraverseProcessor treeWalkTraverseProcessor,\n-                                  final ModelValidator modelValidator) {\n+                                  final ModelValidator modelValidator,\n+                                  final Instance<DomainValidator> validators) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5OTkzMQ==", "bodyText": "Hi @romartin changed to ManagedInstance", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r439099931", "createdAt": "2020-06-11T22:11:50Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/validation/ClientDiagramValidator.java", "diffHunk": "@@ -40,10 +43,12 @@ protected ClientDiagramValidator() {\n     public ClientDiagramValidator(final DefinitionManager definitionManager,\n                                   final RuleManager ruleManager,\n                                   final TreeWalkTraverseProcessor treeWalkTraverseProcessor,\n-                                  final ModelValidator modelValidator) {\n+                                  final ModelValidator modelValidator,\n+                                  final Instance<DomainValidator> validators) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyMDEyMw=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTExNDA1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-core-common/src/main/java/org/kie/workbench/common/stunner/core/validation/impl/AbstractDiagramValidator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMDowMToyMlrOGexcGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDoyNzo0M1rOGnVNjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyMDQ3NA==", "bodyText": "can it be static?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r434920474", "createdAt": "2020-06-04T00:01:22Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-core-common/src/main/java/org/kie/workbench/common/stunner/core/validation/impl/AbstractDiagramValidator.java", "diffHunk": "@@ -46,14 +54,38 @@\n     private final GraphValidatorImpl graphValidator;\n     private final ModelValidator modelValidator;\n \n+    private final Instance<DomainValidator> validators;\n+\n     protected AbstractDiagramValidator(final DefinitionManager definitionManager,\n                                        final RuleManager ruleManager,\n                                        final TreeWalkTraverseProcessor treeWalkTraverseProcessor,\n-                                       final ModelValidator modelValidator) {\n+                                       final ModelValidator modelValidator,\n+                                       final Instance<DomainValidator> validators) {\n+\n         this.graphValidator = new GraphValidatorImpl(definitionManager,\n                                                      ruleManager,\n                                                      treeWalkTraverseProcessor);\n         this.modelValidator = modelValidator;\n+        this.validators = validators;\n+    }\n+\n+    private Collection<DiagramElementViolation<RuleViolation>> validateDomain(Diagram diagram) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQxMjE5MQ==", "bodyText": "Hi @romartin tried, but uses some instance methods.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r438412191", "createdAt": "2020-06-10T21:14:38Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-core-common/src/main/java/org/kie/workbench/common/stunner/core/validation/impl/AbstractDiagramValidator.java", "diffHunk": "@@ -46,14 +54,38 @@\n     private final GraphValidatorImpl graphValidator;\n     private final ModelValidator modelValidator;\n \n+    private final Instance<DomainValidator> validators;\n+\n     protected AbstractDiagramValidator(final DefinitionManager definitionManager,\n                                        final RuleManager ruleManager,\n                                        final TreeWalkTraverseProcessor treeWalkTraverseProcessor,\n-                                       final ModelValidator modelValidator) {\n+                                       final ModelValidator modelValidator,\n+                                       final Instance<DomainValidator> validators) {\n+\n         this.graphValidator = new GraphValidatorImpl(definitionManager,\n                                                      ruleManager,\n                                                      treeWalkTraverseProcessor);\n         this.modelValidator = modelValidator;\n+        this.validators = validators;\n+    }\n+\n+    private Collection<DiagramElementViolation<RuleViolation>> validateDomain(Diagram diagram) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyMDQ3NA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5NTE4MA==", "bodyText": "oh sorry, right", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r443895180", "createdAt": "2020-06-23T00:27:43Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-core-common/src/main/java/org/kie/workbench/common/stunner/core/validation/impl/AbstractDiagramValidator.java", "diffHunk": "@@ -46,14 +54,38 @@\n     private final GraphValidatorImpl graphValidator;\n     private final ModelValidator modelValidator;\n \n+    private final Instance<DomainValidator> validators;\n+\n     protected AbstractDiagramValidator(final DefinitionManager definitionManager,\n                                        final RuleManager ruleManager,\n                                        final TreeWalkTraverseProcessor treeWalkTraverseProcessor,\n-                                       final ModelValidator modelValidator) {\n+                                       final ModelValidator modelValidator,\n+                                       final Instance<DomainValidator> validators) {\n+\n         this.graphValidator = new GraphValidatorImpl(definitionManager,\n                                                      ruleManager,\n                                                      treeWalkTraverseProcessor);\n         this.modelValidator = modelValidator;\n+        this.validators = validators;\n+    }\n+\n+    private Collection<DiagramElementViolation<RuleViolation>> validateDomain(Diagram diagram) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkyMDQ3NA=="}, "originalCommit": {"oid": "42b79557f958dd272fdeac77e8e60e178591fd03"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTg0MjI0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/DataObjectImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwMDoyNjoxOVrOGnVMKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzozNjoxM1rOGnzpxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5NDgyNw==", "bodyText": "please let's avoid changing this file at all, it's auto generated and no need for having changes in the VCS history...", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r443894827", "createdAt": "2020-06-23T00:26:19Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/DataObjectImpl.java", "diffHunk": "@@ -1,15 +1,15 @@\n /**\n  * <copyright>\n- * \n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd7758b3b0aeae939506140c8743328d93fd70e4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5MzkyNQ==", "bodyText": "Hi @romartin reverted back", "url": "https://github.com/kiegroup/kie-wb-common/pull/3276#discussion_r444393925", "createdAt": "2020-06-23T17:36:13Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-emf/src/main/java/org/eclipse/bpmn2/impl/DataObjectImpl.java", "diffHunk": "@@ -1,15 +1,15 @@\n /**\n  * <copyright>\n- * \n+ *", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg5NDgyNw=="}, "originalCommit": {"oid": "dd7758b3b0aeae939506140c8743328d93fd70e4"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1440, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}