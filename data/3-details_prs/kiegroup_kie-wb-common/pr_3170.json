{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NTExMzg5", "number": 3170, "title": "KOGITO-1204 - BPMN editor to support \"expression\" in Data IO on process side", "bodyText": "Right now it is possible to create Output constant, save it and reopen the process.\nRemains to fix:\n\n Expressions should be saved without CDATA block and without encoding\n Kogito marshallers\n Find out better name for the \"constant...\"\n add missing tests\n sonar issues if any\n fix popover\n improve UI validation", "createdAt": "2020-02-20T02:05:34Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170", "merged": true, "mergeCommit": {"oid": "4dd630e194e0b60943ceebe548529aa1c3c0cc47"}, "closed": true, "closedAt": "2020-03-25T15:17:32Z", "author": {"login": "hasys"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGQ9YMgFqTM2MjIwMjY0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRE8hJgFqTM4MTAyMjA3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMjAyNjQw", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#pullrequestreview-362202640", "createdAt": "2020-02-20T20:15:09Z", "commit": {"oid": "ffd212a07fb3f9e7cc4e1f78361ed2beac98ccf3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffd212a07fb3f9e7cc4e1f78361ed2beac98ccf3", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/ffd212a07fb3f9e7cc4e1f78361ed2beac98ccf3", "committedDate": "2020-02-20T02:00:33Z", "message": "KOGITO-1204 - BPMN editor to support \"expression\" in Data IO on process side"}, "afterCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/aa4924bfbf8155131e8d6dac2eda7c6865a5924c", "committedDate": "2020-02-24T20:44:28Z", "message": "KOGITO-1204 - BPMN editor to support \"expression\" in Data IO on process side"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDExMDc5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#pullrequestreview-364411079", "createdAt": "2020-02-25T20:04:11Z", "commit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDowNDoxMVrOFuTYSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NjowNFrOFuUmKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjMyOA==", "bodyText": "I think it is better to create the Pattern object as an static field in this class, This way you can just call Pattern#match(s) passing the test string, and the pattern is already pre-compiled only once.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r384096328", "createdAt": "2020-02-25T20:04:11Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjgwMg==", "bodyText": "The JIRA was expecting two options on the dropdown: constant and expression. So before merging, we should clarify if doing this way is still fine for eveyone.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r384096802", "createdAt": "2020-02-25T20:05:12Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5ODkxOQ==", "bodyText": "By doing this you're converting the \"checked\" exception UnsupportedEncodingException into an \"unchecked\" one of type IllegalArgumentException. This results a bit \"dangerous\" because the signature for the decode method does not provide any exception information, but the decode can still fail, right? By doing this, actually it'll just thow an IllegalArgumentException and maybe it appears on the UI, but it's not really useful for the end user.\nI was maybe expecting this decode method throwing the exception, and the caller for it catching the exception too, this way you can show a validation error to the user.\nBut again, not sure if makes completely sense, it depends on how to use it....", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r384098919", "createdAt": "2020-02-25T20:09:37Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -71,6 +71,24 @@ public static InitializedInputVariable inputOf(\n         }\n     }\n \n+    public static InitializedInputVariable createCustomInput(String parentId, VariableDeclaration varDecl, String expression) {\n+        String isExpressionPattern = \"^#\\\\{(.+)}$\";\n+        String decodedExpression = decode(expression);\n+        if (decodedExpression.matches(isExpressionPattern)) {\n+            return new InputExpression(parentId, varDecl, decodedExpression);\n+        } else {\n+            return new InputConstant(parentId, varDecl, decodedExpression);\n+        }\n+    }\n+\n+    private static String decode(String text) {\n+        try {\n+            return URLDecoder.decode(text, \"UTF-8\");\n+        } catch (UnsupportedEncodingException e) {\n+            throw new IllegalArgumentException(text, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNTUzMA==", "bodyText": "maybe here happens the same issue as on the decode method above - around un/checked exceptions..", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r384115530", "createdAt": "2020-02-25T20:44:27Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/OutputAssignmentReader.java", "diffHunk": "@@ -50,4 +79,18 @@ public AssociationDeclaration getAssociationDeclaration() {\n     private static String getPropertyName(Property prop) {\n         return prop.getName() == null ? prop.getId() : prop.getName();\n     }\n+\n+    private String encode(String body) {\n+        return Optional\n+                .ofNullable(body)\n+                .filter(b -> !\"null\".equals(b))\n+                .map(b -> {\n+                    try {\n+                        return URLEncoder.encode(b, \"UTF-8\");\n+                    } catch (UnsupportedEncodingException e) {\n+                        throw new IllegalArgumentException(body, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjI2Nw==", "bodyText": "Is there really a need to mock the VariableDeclaration object? In general, for domain objects (with no logic around) there is no need to mock the instances, it just makes the test more complex...\nIf possible, please try to use the new operator, create the \"real\" instance, and if necessary, just spy on it.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r384116267", "createdAt": "2020-02-25T20:46:04Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/fromstunner/properties/InitializedVariableTest.java", "diffHunk": "@@ -66,6 +69,19 @@ public void setup() {\n         varScope.declare(\"\", \"BooleanTarget\", \"Boolean\");\n     }\n \n+    @Test\n+    public void testInputCustomVariable() {\n+        VariableDeclaration declaration = mock(VariableDeclaration.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa4924bfbf8155131e8d6dac2eda7c6865a5924c", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/aa4924bfbf8155131e8d6dac2eda7c6865a5924c", "committedDate": "2020-02-24T20:44:28Z", "message": "KOGITO-1204 - BPMN editor to support \"expression\" in Data IO on process side"}, "afterCommit": {"oid": "cf922257377f4b779e49a21b42e377bb1cbf7e54", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/cf922257377f4b779e49a21b42e377bb1cbf7e54", "committedDate": "2020-02-28T22:00:48Z", "message": "tests stabilization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "372993a8b2dbbc85380e4c9c64a31128ebd62bcc", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/372993a8b2dbbc85380e4c9c64a31128ebd62bcc", "committedDate": "2020-03-03T02:11:07Z", "message": "Bugfixing"}, "afterCommit": {"oid": "d5071bc8195793e53e0c143bae50be8dba56ec68", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d5071bc8195793e53e0c143bae50be8dba56ec68", "committedDate": "2020-03-03T22:20:15Z", "message": "Build fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d5071bc8195793e53e0c143bae50be8dba56ec68", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d5071bc8195793e53e0c143bae50be8dba56ec68", "committedDate": "2020-03-03T22:20:15Z", "message": "Build fix"}, "afterCommit": {"oid": "438e42e03d3a5b4bf9551d3bff18e54bf1a43e67", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/438e42e03d3a5b4bf9551d3bff18e54bf1a43e67", "committedDate": "2020-03-04T21:24:12Z", "message": "Test Coverage"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "438e42e03d3a5b4bf9551d3bff18e54bf1a43e67", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/438e42e03d3a5b4bf9551d3bff18e54bf1a43e67", "committedDate": "2020-03-04T21:24:12Z", "message": "Test Coverage"}, "afterCommit": {"oid": "62fecf5948cdec92210960d9bbcf0235ac27004c", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/62fecf5948cdec92210960d9bbcf0235ac27004c", "committedDate": "2020-03-13T02:28:47Z", "message": "Bugfixing"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "075e0752004163c742b6cce1a391595a76fa6c51", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/075e0752004163c742b6cce1a391595a76fa6c51", "committedDate": "2020-03-13T10:22:13Z", "message": "Test Coverage"}, "afterCommit": {"oid": "2e2a4a8114552fb983f4f121d68f134e80017118", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/2e2a4a8114552fb983f4f121d68f134e80017118", "committedDate": "2020-03-18T21:04:58Z", "message": "Fixed test.\n\nAssignments are encoded on UI side and decoded on the backend side and saved as CDATA or expression, so string should be encoded in this test.\nSource/Target change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "771ac9d10650ec79282fae6aac6ecebba860d262", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/771ac9d10650ec79282fae6aac6ecebba860d262", "committedDate": "2020-03-19T02:51:17Z", "message": "KOGITO-1204 - BPMN editor to support \"expression\" in Data IO on process side"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17b1ece2880cb339ff3316565927f9d69525f785", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/17b1ece2880cb339ff3316565927f9d69525f785", "committedDate": "2020-03-19T02:51:17Z", "message": "tests stabilization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "044c84956f2d6a3fc8d8fb901315294b716a832f", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/044c84956f2d6a3fc8d8fb901315294b716a832f", "committedDate": "2020-03-19T02:51:17Z", "message": "Power mock removal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7885fef129d4c7dead623b162a03046044b6e62", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e7885fef129d4c7dead623b162a03046044b6e62", "committedDate": "2020-03-19T02:51:17Z", "message": "make patters client a backend compatible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "233473dd492e3adae01d3ef3a6150cd2e4e47dd0", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/233473dd492e3adae01d3ef3a6150cd2e4e47dd0", "committedDate": "2020-03-19T02:51:17Z", "message": "GWT on client side marshallers compatibility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97e725012449d119f7b9c352480473a293d50883", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/97e725012449d119f7b9c352480473a293d50883", "committedDate": "2020-03-19T02:52:10Z", "message": "UI changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33d2e3f167478214fbc2a4900734743555a98222", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/33d2e3f167478214fbc2a4900734743555a98222", "committedDate": "2020-03-19T02:52:11Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "743f329af02b73b3ebb20ae3298159d7f8852496", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/743f329af02b73b3ebb20ae3298159d7f8852496", "committedDate": "2020-03-19T02:52:11Z", "message": "Help popover"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f95767503f367679b6fd6bd01ff9299cae12bccd", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/f95767503f367679b6fd6bd01ff9299cae12bccd", "committedDate": "2020-03-19T02:52:11Z", "message": "Bugfixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beead0beb0b7a510bea04f97310f855470d10464", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/beead0beb0b7a510bea04f97310f855470d10464", "committedDate": "2020-03-19T02:52:11Z", "message": "Build fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27960f59fa1b667020e86d9603fe796e7614c8f2", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/27960f59fa1b667020e86d9603fe796e7614c8f2", "committedDate": "2020-03-19T02:52:11Z", "message": "Bugfixing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f4bda80d33a8e36a1f1dd44033fd7030668e7ae", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/5f4bda80d33a8e36a1f1dd44033fd7030668e7ae", "committedDate": "2020-03-19T02:52:11Z", "message": "Test Coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01bb92a316a7069288138d7d6fb1f4685ed99298", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/01bb92a316a7069288138d7d6fb1f4685ed99298", "committedDate": "2020-03-19T02:52:11Z", "message": "Fixed test.\n\nAssignments are encoded on UI side and decoded on the backend side and saved as CDATA or expression, so string should be encoded in this test.\nSource/Target change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501", "committedDate": "2020-03-19T02:52:11Z", "message": "KOGITO-1209 - VSCode - BPMN modeler escape in data input"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9ac10da3f99b78a96a7c2252e9350350cbc4959e", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/9ac10da3f99b78a96a7c2252e9350350cbc4959e", "committedDate": "2020-03-19T01:02:33Z", "message": "KOGITO-1209 - VSCode - BPMN modeler escape in data input"}, "afterCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501", "committedDate": "2020-03-19T02:52:11Z", "message": "KOGITO-1209 - VSCode - BPMN modeler escape in data input"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTIzOTM5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#pullrequestreview-379523939", "createdAt": "2020-03-23T15:10:58Z", "commit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjk2NjYx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#pullrequestreview-380696661", "createdAt": "2020-03-24T21:06:39Z", "commit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMTowNjo0MFrOF7DGRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMToxMzo0MFrOF7DUow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MTA2MA==", "bodyText": "why not moving this static final Pattern instance to the new Patterns class you just created? So htis way, the expression (String) will be compiled just once, instead of creating a new Pattern instance in every place you need it, and so also having to compile the string expression too.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397461060", "createdAt": "2020-03-24T21:06:40Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/InitializedVariable.java", "diffHunk": "@@ -38,6 +40,7 @@\n     private final String identifier;\n     private final String type;\n     private ItemDefinition itemDefinition;\n+    private static final Pattern EXPRESSION = Pattern.compile(Patterns.EXPRESSION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MTM2Mw==", "bodyText": "I would just use a Pattern instance here as well, so the expression will be only compiled once. See above comments too about this.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397461363", "createdAt": "2020-03-24T21:07:14Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-core-api/src/main/java/org/kie/workbench/common/stunner/core/util/Patterns.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.util;\n+\n+/**\n+ * Regular expressions for testing common patterns\n+ */\n+public class Patterns {\n+\n+    public static final String EXPRESSION = \"^#\\\\{(.+)}$\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2MTgzNQ==", "bodyText": "instead of mocking, it's better to use \"real\" model objects on tests, if possible.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397461835", "createdAt": "2020-03-24T21:08:05Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/properties/OutputAssignmentReaderTest.java", "diffHunk": "@@ -53,7 +58,35 @@ public void testFromAssociationWithPropertyId() {\n         DataOutputAssociation outputAssociation = mockDataOutputAssociation(SOURCE_NAME, property);\n         OutputAssignmentReader outputReader = OutputAssignmentReader.fromAssociation(outputAssociation);\n         assertNotNull(outputReader);\n-        assertResult(SOURCE_NAME, TARGET_ID, outputReader.getAssociationDeclaration());\n+        assertResult(SOURCE_NAME, TARGET_ID, AssociationDeclaration.Type.SourceTarget, outputReader.getAssociationDeclaration());\n+    }\n+\n+    @Test\n+    public void testFromAssociationWithExpression() {\n+        DataOutput output = spy(DataOutput.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDE0Mw==", "bodyText": "good catch. In fact, for all these widgets that are using html templates I'm pretty sure the whole head can be removed, also no need for body tag... it's because those html represents \"fragments\" of html files, which are alrady appended to complete documents, so you can feel free also to remove the head/body tags as well.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397464143", "createdAt": "2020-03-24T21:12:28Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/ActivityDataIOEditorWidget.html", "diffHunk": "@@ -23,29 +23,9 @@\n     <meta name=\"description\" content=\"\">\n     <meta name=\"author\" content=\"\">\n \n-    <!--link rel=\"stylesheet/less\" href=\"less/bootstrap.less\" type=\"text/css\" /-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ2NDczOQ==", "bodyText": "minor comment  - maybe results more clear to use if / else instead of adding a return keyword here...", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#discussion_r397464739", "createdAt": "2020-03-24T21:13:40Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/AssignmentListItemWidgetViewImpl.java", "diffHunk": "@@ -274,13 +275,24 @@ public void setProcessVar(final String processVar) {\n     }\n \n     @Override\n-    public String getConstant() {\n-        return getModel().getConstant();\n+    public String getExpression() {\n+        return getModel().getExpression();\n     }\n \n     @Override\n-    public void setConstant(final String constant) {\n-        getModel().setConstant(constant);\n+    public void setExpression(final String expression) {\n+        if (getModel().getVariableType() == OUTPUT && isConstant(expression)) {\n+            notification.fire(new NotificationEvent(StunnerFormsClientFieldsConstants.INSTANCE.Only_expressions_allowed_for_output(),\n+                                                    NotificationEvent.NotificationType.ERROR));\n+            processVarComboBox.textBoxValueChanged(\"\");\n+\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24e6bfdedd7dd3c719bc02c2f8bb56f2b937e501"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4f97f9898b7b007e35b659d0343dd0ace43e227", "author": {"user": {"login": "hasys", "name": "Kirill Gaevskii"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a4f97f9898b7b007e35b659d0343dd0ace43e227", "committedDate": "2020-03-24T22:34:31Z", "message": "Code review fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNzQ2MTA5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#pullrequestreview-380746109", "createdAt": "2020-03-24T22:37:14Z", "commit": {"oid": "a4f97f9898b7b007e35b659d0343dd0ace43e227"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDIyMDcz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3170#pullrequestreview-381022073", "createdAt": "2020-03-25T10:28:31Z", "commit": {"oid": "a4f97f9898b7b007e35b659d0343dd0ace43e227"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 724, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}