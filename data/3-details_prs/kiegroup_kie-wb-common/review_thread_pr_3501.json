{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDAzMTMy", "number": 3501, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxMToyMVrOE-ue-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyNTowNVrOE_O93g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjA4NzYyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/decisionservice/parameters/DecisionServiceParametersListWidget.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxMToyMVrOH8CVIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxMToyMVrOH8CVIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNDc4NQ==", "bodyText": "I think that there it could be nice to use the orElseThrow Optional's method: https://www.baeldung.com/java-optional-throw-exception\nIn that case it could be chained to .findFirst(), and returned", "url": "https://github.com/kiegroup/kie-wb-common/pull/3501#discussion_r532714785", "createdAt": "2020-11-30T16:11:21Z", "author": {"login": "vpellegrino"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/decisionservice/parameters/DecisionServiceParametersListWidget.java", "diffHunk": "@@ -0,0 +1,287 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.widgets.decisionservice.parameters;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.event.logical.shared.ValueChangeEvent;\n+import com.google.gwt.event.logical.shared.ValueChangeHandler;\n+import com.google.gwt.event.shared.HandlerRegistration;\n+import com.google.gwt.user.client.ui.Composite;\n+import com.google.gwt.user.client.ui.HasEnabled;\n+import com.google.gwt.user.client.ui.HasValue;\n+import elemental2.dom.HTMLDivElement;\n+import org.jboss.errai.common.client.dom.elemental2.Elemental2DomUtil;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.kie.workbench.common.dmn.api.definition.model.DRGElement;\n+import org.kie.workbench.common.dmn.api.definition.model.Decision;\n+import org.kie.workbench.common.dmn.api.definition.model.DecisionService;\n+import org.kie.workbench.common.dmn.api.definition.model.InformationItemPrimary;\n+import org.kie.workbench.common.dmn.api.definition.model.InputData;\n+import org.kie.workbench.common.dmn.api.property.dmn.DecisionServiceParametersList;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramsSession;\n+import org.kie.workbench.common.dmn.client.widgets.decisionservice.parameters.parametergroup.ParameterGroup;\n+import org.kie.workbench.common.stunner.core.client.i18n.ClientTranslationService;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.definition.Definition;\n+import org.kie.workbench.common.stunner.core.graph.content.relationship.Child;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+import static org.kie.workbench.common.dmn.client.editors.common.RemoveHelper.removeChildren;\n+import static org.kie.workbench.common.dmn.client.resources.i18n.DMNEditorConstants.DecisionServiceParameters_EncapsulatedDecisions;\n+import static org.kie.workbench.common.dmn.client.resources.i18n.DMNEditorConstants.DecisionServiceParameters_Inputs;\n+import static org.kie.workbench.common.dmn.client.resources.i18n.DMNEditorConstants.DecisionServiceParameters_Outputs;\n+\n+@Dependent\n+@Templated\n+public class DecisionServiceParametersListWidget extends Composite implements HasValue<DecisionServiceParametersList>,\n+                                                                              HasEnabled {\n+\n+    private final ClientTranslationService translationService;\n+\n+    private final DMNDiagramsSession dmnDiagramsSession;\n+\n+    private final Elemental2DomUtil util;\n+\n+    private final ParameterGroup groupEncapsulated;\n+\n+    private final ParameterGroup groupOutputs;\n+\n+    private final ParameterGroup groupInputs;\n+\n+    @DataField(\"widget-container\")\n+    private final HTMLDivElement container;\n+\n+    private boolean enabled;\n+\n+    private DecisionServiceParametersList value;\n+\n+    @Inject\n+    public DecisionServiceParametersListWidget(final ClientTranslationService translationService,\n+                                               final Elemental2DomUtil util,\n+                                               final DMNDiagramsSession dmnDiagramsSession,\n+                                               final ParameterGroup groupEncapsulated,\n+                                               final ParameterGroup groupOutputs,\n+                                               final ParameterGroup groupInputs,\n+                                               final HTMLDivElement container) {\n+\n+        this.value = new DecisionServiceParametersList();\n+        this.enabled = true;\n+        this.container = container;\n+        this.dmnDiagramsSession = dmnDiagramsSession;\n+        this.util = util;\n+        this.groupEncapsulated = groupEncapsulated;\n+        this.groupOutputs = groupOutputs;\n+        this.groupInputs = groupInputs;\n+        this.translationService = translationService;\n+    }\n+\n+    @PostConstruct\n+    public void setup() {\n+        groupEncapsulated.setHeader(translationService.getValue(DecisionServiceParameters_EncapsulatedDecisions));\n+        groupOutputs.setHeader(translationService.getValue(DecisionServiceParameters_Outputs));\n+        groupInputs.setHeader(translationService.getValue(DecisionServiceParameters_Inputs));\n+    }\n+\n+    @Override\n+    public DecisionServiceParametersList getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public void setValue(final DecisionServiceParametersList documentationLinks) {\n+        setValue(documentationLinks, false);\n+    }\n+\n+    @Override\n+    public void setValue(final DecisionServiceParametersList decisionServiceParametersList,\n+                         final boolean fireEvents) {\n+        value = decisionServiceParametersList;\n+        refresh();\n+    }\n+\n+    @Override\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    @Override\n+    public void setEnabled(final boolean enabled) {\n+        this.enabled = enabled;\n+    }\n+\n+    void refresh() {\n+\n+        clear();\n+\n+        final Node node = getNode(getValue().getDecisionService().getContentDefinitionId());\n+        final List<Edge<?, ?>> outEdges = (List<Edge<?, ?>>) node.getOutEdges();\n+        final List<InputData> inputs = new ArrayList<>();\n+\n+        outEdges.stream()\n+                .filter(e -> e.getContent() instanceof Child)\n+                .forEach(e -> getTargetDRGElement(e).ifPresent(drgElement -> {\n+                    final Node<View<?>, ?> targetNode = e.getTargetNode();\n+                    loadDecisionsFromNode(node, targetNode);\n+                    loadInputsFromNode(inputs, targetNode);\n+                }));\n+\n+        loadInputsParameters(inputs);\n+        loadGroupsElements();\n+    }\n+\n+    void loadDecisionsFromNode(final Node node,\n+                               final Node<View<?>, ?> targetNode) {\n+        if (isOutputDecision(targetNode.getContent(), (View<DecisionService>) node.getContent())) {\n+            addDecisionNodeToGroup(groupOutputs, targetNode);\n+        } else {\n+            addDecisionNodeToGroup(groupEncapsulated, targetNode);\n+        }\n+    }\n+\n+    void loadGroupsElements() {\n+        container.appendChild(util.asHTMLElement(groupInputs.getElement()));\n+        container.appendChild(util.asHTMLElement(groupEncapsulated.getElement()));\n+        container.appendChild(util.asHTMLElement(groupOutputs.getElement()));\n+    }\n+\n+    void loadInputsParameters(final List<InputData> inputs) {\n+        for (final InputData input : inputs) {\n+            final InformationItemPrimary variable = input.getVariable();\n+            final String name = input.getName().getValue();\n+            final String type = variable.getTypeRef().getLocalPart();\n+            groupInputs.addParameter(name, type);\n+        }\n+    }\n+\n+    Optional<DRGElement> getTargetDRGElement(final Edge<?, ?> e) {\n+        final Node<View<?>, ?> targetNode = e.getTargetNode();\n+        final View<?> targetNodeView = targetNode.getContent();\n+        if (targetNodeView.getDefinition() instanceof DRGElement) {\n+            return Optional.of((DRGElement) targetNodeView.getDefinition());\n+        }\n+        return Optional.empty();\n+    }\n+\n+    void clear() {\n+        removeChildren(container);\n+        this.groupEncapsulated.clear();\n+        this.groupInputs.clear();\n+        this.groupOutputs.clear();\n+    }\n+\n+    Node getNode(final String contentId) {\n+        final Stream<Node> stream = StreamSupport.stream(\n+                dmnDiagramsSession.getCurrentGraphDiagram().getGraph().nodes().spliterator(),\n+                false);\n+\n+        return getElementWithContentId(contentId, stream);\n+    }\n+\n+    void loadInputsFromNode(final List<InputData> inputs,\n+                            final Node<View<?>, ?> targetNode) {\n+        final List<InputData> nodeInputs = getInputs(targetNode);\n+        for (final InputData input : nodeInputs) {\n+            if (inputs.stream().noneMatch(i -> Objects.equals(i.getId().getValue(), input.getId().getValue()))) {\n+                inputs.add(input);\n+            }\n+        }\n+    }\n+\n+    void addDecisionNodeToGroup(final ParameterGroup group,\n+                                final Node<View<?>, ?> node) {\n+        final Decision decision = (Decision) ((Definition) node.getContent()).getDefinition();\n+        final InformationItemPrimary variable = decision.getVariable();\n+        final String name = decision.getName().getValue();\n+        final String type = variable.getTypeRef().getLocalPart();\n+        group.addParameter(name, type);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    List<InputData> getInputs(final Node<View<?>, ?> targetNode) {\n+        final List<InputData> inputs = new ArrayList<>();\n+        final List<Edge<?, ?>> inEdges = (List<Edge<?, ?>>) targetNode.getInEdges();\n+        for (final Edge<?, ?> e : inEdges) {\n+            getSourceNodeInputData(e).ifPresent(inputs::add);\n+        }\n+\n+        return inputs;\n+    }\n+\n+    Optional<InputData> getSourceNodeInputData(final Edge<?, ?> edge) {\n+        final Node<?, ?> sourceNode = edge.getSourceNode();\n+        if (sourceNode.getContent() instanceof View<?>) {\n+            final View<?> view = (View<?>) sourceNode.getContent();\n+            if (view.getDefinition() instanceof DRGElement) {\n+                final DRGElement drgElement = (DRGElement) view.getDefinition();\n+                if (drgElement instanceof InputData) {\n+                    return Optional.of((InputData) drgElement);\n+                }\n+            }\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    boolean isOutputDecision(final View<?> childView,\n+                             final View<DecisionService> decisionServiceView) {\n+        final double childViewY = childView.getBounds().getUpperLeft().getY();\n+        final double decisionServiceViewLineY = decisionServiceView.getDefinition()\n+                .getDividerLineY()\n+                .getValue();\n+        return childViewY < decisionServiceViewLineY;\n+    }\n+\n+    Node getElementWithContentId(final String contentDefinitionId,\n+                                 final Stream<Node> stream) {\n+        final Optional<Node> result = stream\n+                .filter(node -> definitionContainsDRGElement(node)\n+                        && Objects.equals(getDRGElementFromContentDefinition(node).getContentDefinitionId(), contentDefinitionId))\n+                .findFirst();\n+        if (result.isPresent()) {\n+            return result.get();\n+        } else {\n+            throw new IllegalStateException(\"Decision Service for contentDefinitionId '\" + contentDefinitionId + \"' not found.\");\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96786a24b4a445174b5c95c42df92a0871c5f21d"}, "originalPosition": 270}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjEyNTgyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/decisionservice/parameters/DecisionServiceParametersListWidget.less", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxOToxOVrOH8Csng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxOToxOVrOH8Csng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMDc5OA==", "bodyText": "AFAIK, a negative margin-top can cause document flow issues.\nHave you tried the style rule below?\nposition: relative;\ntop: -30px;\n\nIf you want, give a look at https://codepen.io/Paulie-D/pen/IuLfJ", "url": "https://github.com/kiegroup/kie-wb-common/pull/3501#discussion_r532720798", "createdAt": "2020-11-30T16:19:19Z", "author": {"login": "vpellegrino"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/decisionservice/parameters/DecisionServiceParametersListWidget.less", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+[data-i18n-prefix=\"DecisionServiceParametersListWidget.\"] {\n+  margin-top: -30px;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96786a24b4a445174b5c95c42df92a0871c5f21d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzM3MjA2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/definition/model/DecisionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoxNzoyNFrOH80uuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTo1NDowNVrOH9rsOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0MDUzOQ==", "bodyText": "Could we rewrite the condition? The combination of if and ternary if is not straight forward.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3501#discussion_r533540539", "createdAt": "2020-12-01T16:17:24Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/definition/model/DecisionService.java", "diffHunk": "@@ -283,6 +299,9 @@ public boolean equals(final Object o) {\n         if (linksHolder != null ? !linksHolder.equals(that.linksHolder) : that.linksHolder != null) {\n             return false;\n         }\n+        if (decisionServiceParametersList != null ? !decisionServiceParametersList.equals(that.decisionServiceParametersList) : that.decisionServiceParametersList != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96786a24b4a445174b5c95c42df92a0871c5f21d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQ0MTAxNg==", "bodyText": "I'm trying to follow the pattern on the lines above. I don't like it either, but all conditions in all equals() overrides in our base use that kind of ternary operation.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3501#discussion_r534441016", "createdAt": "2020-12-02T19:54:05Z", "author": {"login": "danielzhe"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/definition/model/DecisionService.java", "diffHunk": "@@ -283,6 +299,9 @@ public boolean equals(final Object o) {\n         if (linksHolder != null ? !linksHolder.equals(that.linksHolder) : that.linksHolder != null) {\n             return false;\n         }\n+        if (decisionServiceParametersList != null ? !decisionServiceParametersList.equals(that.decisionServiceParametersList) : that.decisionServiceParametersList != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0MDUzOQ=="}, "originalCommit": {"oid": "96786a24b4a445174b5c95c42df92a0871c5f21d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzM5NjIzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/property/dmn/DecisionServiceParametersListSet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyMjoyMVrOH809nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyMjoyMVrOH809nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0NDM0OQ==", "bodyText": "can we stick to order 1. fields, 2. constructors, 3. methods?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3501#discussion_r533544349", "createdAt": "2020-12-01T16:22:21Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/property/dmn/DecisionServiceParametersListSet.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.api.property.dmn;\n+\n+import java.util.Set;\n+\n+import javax.validation.Valid;\n+\n+import org.jboss.errai.common.client.api.annotations.Portable;\n+import org.jboss.errai.databinding.client.api.Bindable;\n+import org.kie.soup.commons.util.Sets;\n+import org.kie.workbench.common.dmn.api.definition.model.Categories;\n+import org.kie.workbench.common.dmn.api.definition.model.DecisionService;\n+import org.kie.workbench.common.dmn.api.property.DMNPropertySet;\n+import org.kie.workbench.common.forms.adf.definitions.annotations.FormDefinition;\n+import org.kie.workbench.common.forms.adf.definitions.annotations.FormField;\n+import org.kie.workbench.common.forms.adf.definitions.settings.FieldPolicy;\n+import org.kie.workbench.common.stunner.core.definition.annotation.Property;\n+import org.kie.workbench.common.stunner.core.definition.annotation.definition.Category;\n+import org.kie.workbench.common.stunner.core.definition.annotation.definition.Labels;\n+\n+@Portable\n+@Bindable\n+@FormDefinition(policy = FieldPolicy.ONLY_MARKED)\n+public class DecisionServiceParametersListSet implements DMNPropertySet {\n+\n+    @Category\n+    private static final String stunnerCategory = Categories.DOMAIN_OBJECTS;\n+\n+    @Labels\n+    private static final Set<String> stunnerLabels = new Sets.Builder<String>()\n+            .build();\n+\n+    public DecisionServiceParametersListSet() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96786a24b4a445174b5c95c42df92a0871c5f21d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzQwOTU4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/decisionservice/parameters/DecisionServiceParametersListWidget.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyNTowNVrOH81Fzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoyNTowNVrOH81Fzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0NjQ0Ng==", "bodyText": "is this id promoted to resulting DOM? If so, I would call for better descriptive id.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3501#discussion_r533546446", "createdAt": "2020-12-01T16:25:05Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/widgets/decisionservice/parameters/DecisionServiceParametersListWidget.html", "diffHunk": "@@ -0,0 +1,18 @@\n+<!--\n+  ~ Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<div id=\"widget-container\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96786a24b4a445174b5c95c42df92a0871c5f21d"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1214, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}