{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjg3ODQz", "number": 3242, "title": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes", "bodyText": "Jenkins execute full downstream build", "createdAt": "2020-03-24T22:30:17Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242", "merged": true, "mergeCommit": {"oid": "7c8937543732247ca1535bbce70f5cc2518df615"}, "closed": true, "closedAt": "2020-04-08T21:17:56Z", "author": {"login": "handreyrc"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRJghoABqjMxNjQ1NzQ5ODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVumtEAFqTM5MDMzODE3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4b59ef78f50d7174ced851f7ba0439fd6e8fe31", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d4b59ef78f50d7174ced851f7ba0439fd6e8fe31", "committedDate": "2020-03-24T22:25:05Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/792df31ec197f0344aeb810126f3a3f8b1fee53e", "committedDate": "2020-03-25T15:44:57Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNDg4MzI4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#pullrequestreview-381488328", "createdAt": "2020-03-25T19:56:20Z", "commit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxOTo1NjoyMFrOF7r7rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDoxNToxMlrOF7sj4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzMDA5Mg==", "bodyText": "I think there exists an org.kie.workbench.common.stunner.core.util.HashUtil class, which if already doesn't contain this logic, maybe you can just move it to that class in some public static mehtod.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398130092", "createdAt": "2020-03-25T19:56:20Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/forms/model/MetaDataEditorFieldDefinition.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.forms.model;\n+\n+import java.util.Objects;\n+\n+import org.jboss.errai.common.client.api.annotations.Portable;\n+import org.jboss.errai.databinding.client.api.Bindable;\n+import org.kie.workbench.common.forms.fields.shared.AbstractFieldDefinition;\n+import org.kie.workbench.common.forms.model.FieldDefinition;\n+\n+@Portable\n+@Bindable\n+public class MetaDataEditorFieldDefinition extends AbstractFieldDefinition {\n+\n+    public static final MetaDataEditorFieldType FIELD_TYPE = new MetaDataEditorFieldType();\n+\n+    private String defaultValue;\n+\n+    public MetaDataEditorFieldDefinition() {\n+        super(String.class.getName());\n+    }\n+\n+    @Override\n+    public MetaDataEditorFieldType getFieldType() {\n+        return FIELD_TYPE;\n+    }\n+\n+    public String getDefaultValue() {\n+        return defaultValue;\n+    }\n+\n+    public void setDefaultValue(String defaultValue) {\n+        this.defaultValue = defaultValue;\n+    }\n+\n+    @Override\n+    protected void doCopyFrom(FieldDefinition other) {\n+        if (other instanceof MetaDataEditorFieldDefinition) {\n+            this.setDefaultValue(((MetaDataEditorFieldDefinition) other).getDefaultValue());\n+        }\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (super.equals(o)) {\n+            if (o instanceof MetaDataEditorFieldDefinition) {\n+                MetaDataEditorFieldDefinition other = (MetaDataEditorFieldDefinition) o;\n+                return Objects.equals(defaultValue, other.defaultValue);\n+            }\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int result = super.hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzMTg0MA==", "bodyText": "minor comment - maybe would result easier to read by using a new filter operation for each one of the conditions inside this single filter, this way it will result on something readable as:\nmetadataExtensions.stream() .filter(..) .filter(..) .filter(..) .filter(..) .map(...). .collect()", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398131840", "createdAt": "2020-03-25T19:59:24Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/converters/customproperties/elements/MetaDataAttributesElement.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.backend.converters.customproperties.elements;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.bpmn2.BaseElement;\n+import org.eclipse.bpmn2.ExtensionAttributeValue;\n+import org.eclipse.emf.ecore.EStructuralFeature;\n+import org.eclipse.emf.ecore.impl.EStructuralFeatureImpl;\n+import org.eclipse.emf.ecore.util.FeatureMap;\n+import org.jboss.drools.DroolsFactory;\n+import org.jboss.drools.MetaDataType;\n+\n+import static org.jboss.drools.DroolsPackage.Literals.DOCUMENT_ROOT__META_DATA;\n+import static org.kie.workbench.common.stunner.bpmn.backend.converters.tostunner.properties.Scripts.asCData;\n+\n+public class MetaDataAttributesElement extends ElementDefinition<String> {\n+\n+    public static final String DELIMITER = \"\u00d8\";\n+    public static final String SEPARATOR = \"\u00df\";\n+\n+    public MetaDataAttributesElement(String name) {\n+        super(name, \"\");\n+    }\n+\n+    @Override\n+    public String getValue(BaseElement element) {\n+        return getStringValue(element)\n+                .orElse(getDefaultValue());\n+    }\n+\n+    @Override\n+    public void setValue(BaseElement element, String value) {\n+        setStringValue(element, value);\n+    }\n+\n+    private void setStringValue(BaseElement element, String value) {\n+        Stream.of(value.split(DELIMITER))\n+                .map(this::extensionOf)\n+                .forEach(getExtensionElements(element)::add);\n+    }\n+\n+    private Optional<String> getStringValue(BaseElement element) {\n+        List<ExtensionAttributeValue> extValues = element.getExtensionValues();\n+\n+        List<FeatureMap> extElementsList = extValues.stream()\n+                .map(ExtensionAttributeValue::getValue)\n+                .collect(Collectors.toList());\n+\n+        List<MetaDataType> metadataExtensions = extElementsList.stream()\n+                .map(extAttrVal -> (List<MetaDataType>) extAttrVal.get(DOCUMENT_ROOT__META_DATA, true))\n+                .flatMap(Collection::stream)\n+                .collect(Collectors.toList());\n+\n+        String metaDataAttributes = metadataExtensions.stream()\n+                .filter(metaDataType -> metaDataType.getName() != null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzNDQ1MQ==", "bodyText": "This errai html template represents only a \"fragment\" of the whole page (eg: this html content appears only in the form field itself, which is inside a widget, which also is being a child for the whole Document.\nSo it means when creating html fragments like this one, for a UI component, that there is NO need for html, head neither body tags. In this case, the html file should contain only the <div id=\"widget\"> and its inner content, you can remove the other tags (html, head, body)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398134451", "createdAt": "2020-03-25T20:04:20Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/metaDataEditor/MetaDataEditorWidget.html", "diffHunk": "@@ -0,0 +1,68 @@\n+<!--\n+  ~ Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ \thttp://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<!DOCTYPE html>\n+<html lang=\"en\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzNzExNQ==", "bodyText": "It's your fist MVP component, and you was based on some other already existig component, so no worries, no need to change this now, but keep in mind that the idea is trying NOT to use the model classes on the View. For example, the MetaDataRow class should not appear on this View interface, it should be better working with primitive types and just having all the MetaDataRow handling on the Presenter class, which will pass primitives types to the view.\nThe views should be agnostic as much as possible to the model, and do not provide any kind of logic. This way we keep things decoupled from the implementation, and changing from canvas to any other kind of view technology will be much easier this way.\nAnyway, as commented, just keep that in mind, no need to change it now, but we'll have to refactor some other components as well once having the time :)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398137115", "createdAt": "2020-03-25T20:09:11Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/metaDataEditor/MetaDataEditorWidgetView.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.forms.fields.metaDataEditor;\n+\n+import java.util.List;\n+\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.fields.model.MetaDataRow;\n+import org.uberfire.backend.vfs.Path;\n+\n+public interface MetaDataEditorWidgetView extends IsWidget {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzODE3Nw==", "bodyText": "this field should be managed by the presenter class, not on the view, could be easy to refactor and move it to the presenter? You can for example add new methods on the view interface to pass the errors to the presenter,, which will inject the ErrorPopupPresenter and properly use it.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398138177", "createdAt": "2020-03-25T20:11:16Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/metaDataEditor/MetaDataListItemWidgetViewImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.forms.fields.metaDataEditor;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.event.logical.shared.ValueChangeEvent;\n+import org.gwtbootstrap3.client.ui.Button;\n+import org.gwtbootstrap3.client.ui.constants.IconType;\n+import org.jboss.errai.databinding.client.api.DataBinder;\n+import org.jboss.errai.ui.shared.api.annotations.AutoBound;\n+import org.jboss.errai.ui.shared.api.annotations.Bound;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.EventHandler;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.kie.workbench.common.stunner.bpmn.client.StunnerSpecific;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.fields.i18n.StunnerFormsClientFieldsConstants;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.fields.model.MetaDataRow;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.util.StringUtils;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.widgets.AttributeValueTextBox;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.widgets.VariableNameTextBox;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.workbench.events.NotificationEvent;\n+\n+/**\n+ * A templated widget that will be used to display a row in a table of\n+ * {@link MetaDataRow}s.\n+ * <p>\n+ * The Name field and Value of MetaDataRow are Bound.\n+ */\n+@Templated(\"MetaDataEditorWidget.html#metaDataRow\")\n+public class MetaDataListItemWidgetViewImpl implements MetaDataListItemWidgetView {\n+\n+    /**\n+     * Errai's data binding module will automatically bind the provided instance\n+     * of the model (see {@link #setModel(MetaDataRow)}) to all fields annotated\n+     * with {@link Bound}. If not specified otherwise, the bindings occur based on\n+     * matching field names (e.g. MetaDataRow.attribute will automatically be kept in\n+     * sync with the data-field \"attribute\")\n+     */\n+    @Inject\n+    @AutoBound\n+    protected DataBinder<MetaDataRow> metaDataRow;\n+\n+    @Inject\n+    @Bound\n+    @DataField\n+    @StunnerSpecific\n+    protected VariableNameTextBox attribute;\n+\n+    @Inject\n+    @Bound\n+    @DataField\n+    @StunnerSpecific\n+    protected AttributeValueTextBox value;\n+\n+    @Inject\n+    protected ErrorPopupPresenter errorPopupPresenter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzODQ3Mw==", "bodyText": "same here, could you move this to the presenter? it's the presenter responsible for firing notifications, not the view itself.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398138473", "createdAt": "2020-03-25T20:11:47Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/metaDataEditor/MetaDataListItemWidgetViewImpl.java", "diffHunk": "@@ -0,0 +1,181 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.forms.fields.metaDataEditor;\n+\n+import javax.annotation.PostConstruct;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.event.logical.shared.ValueChangeEvent;\n+import org.gwtbootstrap3.client.ui.Button;\n+import org.gwtbootstrap3.client.ui.constants.IconType;\n+import org.jboss.errai.databinding.client.api.DataBinder;\n+import org.jboss.errai.ui.shared.api.annotations.AutoBound;\n+import org.jboss.errai.ui.shared.api.annotations.Bound;\n+import org.jboss.errai.ui.shared.api.annotations.DataField;\n+import org.jboss.errai.ui.shared.api.annotations.EventHandler;\n+import org.jboss.errai.ui.shared.api.annotations.Templated;\n+import org.kie.workbench.common.stunner.bpmn.client.StunnerSpecific;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.fields.i18n.StunnerFormsClientFieldsConstants;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.fields.model.MetaDataRow;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.util.StringUtils;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.widgets.AttributeValueTextBox;\n+import org.kie.workbench.common.stunner.bpmn.client.forms.widgets.VariableNameTextBox;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.workbench.events.NotificationEvent;\n+\n+/**\n+ * A templated widget that will be used to display a row in a table of\n+ * {@link MetaDataRow}s.\n+ * <p>\n+ * The Name field and Value of MetaDataRow are Bound.\n+ */\n+@Templated(\"MetaDataEditorWidget.html#metaDataRow\")\n+public class MetaDataListItemWidgetViewImpl implements MetaDataListItemWidgetView {\n+\n+    /**\n+     * Errai's data binding module will automatically bind the provided instance\n+     * of the model (see {@link #setModel(MetaDataRow)}) to all fields annotated\n+     * with {@link Bound}. If not specified otherwise, the bindings occur based on\n+     * matching field names (e.g. MetaDataRow.attribute will automatically be kept in\n+     * sync with the data-field \"attribute\")\n+     */\n+    @Inject\n+    @AutoBound\n+    protected DataBinder<MetaDataRow> metaDataRow;\n+\n+    @Inject\n+    @Bound\n+    @DataField\n+    @StunnerSpecific\n+    protected VariableNameTextBox attribute;\n+\n+    @Inject\n+    @Bound\n+    @DataField\n+    @StunnerSpecific\n+    protected AttributeValueTextBox value;\n+\n+    @Inject\n+    protected ErrorPopupPresenter errorPopupPresenter;\n+\n+    private String currentValue;\n+    private String currentName;\n+\n+    @Inject\n+    protected Event<NotificationEvent> notification;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzOTA2NQ==", "bodyText": "incomplete javadocs, better removing it... it does not provide any useful info", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398139065", "createdAt": "2020-03-25T20:12:51Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/model/MetaDataAttribute.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.client.forms.fields.model;\n+\n+public class MetaDataAttribute {\n+\n+    private String attribute;\n+    private String value;\n+    private static final String DELIMITER = \"\u00df\";\n+\n+    public MetaDataAttribute() {\n+    }\n+\n+    public MetaDataAttribute(final String attribute) {\n+        this.attribute = attribute;\n+    }\n+\n+    public MetaDataAttribute(final String attribute,\n+                             final String value) {\n+        this.attribute = attribute;\n+        this.value = value;\n+    }\n+\n+    public MetaDataAttribute(final MetaDataRow row) {\n+        this.attribute = row.getAttribute();\n+        this.value = row.getValue();\n+    }\n+\n+    public String getAttribute() {\n+        return attribute;\n+    }\n+\n+    public void setAttribute(final String attribute) {\n+        this.attribute = attribute;\n+    }\n+\n+    public String getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(final String value) {\n+        this.value = value;\n+    }\n+\n+    public String toString() {\n+        if (attribute != null && !attribute.isEmpty()) {\n+            StringBuilder sb = new StringBuilder().append(attribute);\n+            if (value != null && !value.isEmpty()) {\n+                sb.append(DELIMITER).append(value);\n+            }\n+            return sb.toString();\n+        }\n+        return \"\";\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzOTgxOQ==", "bodyText": "can be private? or at least package protected access?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398139819", "createdAt": "2020-03-25T20:14:05Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/widgets/AttributeValueTextBox.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.stunner.bpmn.client.forms.widgets;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.google.gwt.regexp.shared.RegExp;\n+import org.kie.workbench.common.stunner.bpmn.client.StunnerSpecific;\n+\n+@StunnerSpecific\n+public class AttributeValueTextBox extends AbstractValidatingTextBox {\n+\n+    Set<String> invalidValues = null;\n+    boolean isCaseSensitive = false;\n+    String invalidValueErrorMessage = null;\n+\n+    protected String invalidCharacterTypedMessage;\n+    protected String invalidCharactersInValueErrorMessage;\n+\n+    // Pattern for valid value\n+    protected RegExp regExp = null;\n+\n+    /**\n+     * Sets the RegExp pattern for the TextBox\n+     *\n+     * @param pattern\n+     * @param invalidCharactersInValueErrorMessage\n+     */\n+    public void setRegExp(final String pattern,\n+                          final String invalidCharactersInValueErrorMessage,\n+                          final String invalidCharacterTypedMessage) {\n+        regExp = RegExp.compile(pattern);\n+        this.invalidCharactersInValueErrorMessage = invalidCharactersInValueErrorMessage;\n+        this.invalidCharacterTypedMessage = invalidCharacterTypedMessage;\n+    }\n+\n+    /**\n+     * Sets the invalid values for the TextBox\n+     *\n+     * @param invalidValues\n+     * @param isCaseSensitive\n+     * @param invalidValueErrorMessage\n+     */\n+    public void setInvalidValues(final Set<String> invalidValues,\n+                                 final boolean isCaseSensitive,\n+                                 final String invalidValueErrorMessage) {\n+        if (isCaseSensitive) {\n+            this.invalidValues = invalidValues;\n+        } else {\n+            this.invalidValues = new HashSet<>();\n+            for (String value : invalidValues) {\n+                this.invalidValues.add(value.toLowerCase());\n+            }\n+        }\n+        this.isCaseSensitive = isCaseSensitive;\n+        this.invalidValueErrorMessage = invalidValueErrorMessage;\n+    }\n+\n+    /**\n+     * Tests whether a value is in the list of invalid values\n+     *\n+     * @param value\n+     * @return error message if value is invalid; otherwise null\n+     */\n+    protected String testForInvalidValue(final String value) {\n+        if (value == null || value.isEmpty() || invalidValues == null) {\n+            return null;\n+        }\n+        String testValue;\n+        if (!isCaseSensitive) {\n+            testValue = value.toLowerCase();\n+        } else {\n+            testValue = value;\n+        }\n+        if (invalidValues.contains(testValue)) {\n+            return invalidValueErrorMessage;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public String isValidValue(String value, boolean isOnFocusLost) {\n+        if (invalidValues != null && !invalidValues.isEmpty() && isOnFocusLost) {\n+            String err = testForInvalidValue(value);\n+            if (err != null && !err.isEmpty()) {\n+                return err;\n+            }\n+        }\n+        if (regExp != null) {\n+            boolean isValid = this.regExp.test(value);\n+            if (!isValid) {\n+                String invalidChars = getInvalidCharsInName(value);\n+                return (isOnFocusLost ? invalidCharactersInValueErrorMessage : invalidCharacterTypedMessage)\n+                        + \": \" + invalidChars;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    protected String makeValidValue(final String value) {\n+        if (value == null || value.isEmpty()) {\n+            return \"\";\n+        }\n+        // It's a known invalid value\n+        if (testForInvalidValue(value) != null) {\n+            return \"\";\n+        } else {\n+            StringBuilder validValue = new StringBuilder(value.length());\n+            for (int i = 0; i < value.length(); i++) {\n+                char c = value.charAt(i);\n+                if (isValidChar(c)) {\n+                    validValue.append(c);\n+                }\n+            }\n+            return validValue.toString();\n+        }\n+    }\n+\n+    protected boolean isValidChar(final char c) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzOTkzMg==", "bodyText": "can be private? or at least package protected access?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398139932", "createdAt": "2020-03-25T20:14:18Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/widgets/AttributeValueTextBox.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.stunner.bpmn.client.forms.widgets;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.google.gwt.regexp.shared.RegExp;\n+import org.kie.workbench.common.stunner.bpmn.client.StunnerSpecific;\n+\n+@StunnerSpecific\n+public class AttributeValueTextBox extends AbstractValidatingTextBox {\n+\n+    Set<String> invalidValues = null;\n+    boolean isCaseSensitive = false;\n+    String invalidValueErrorMessage = null;\n+\n+    protected String invalidCharacterTypedMessage;\n+    protected String invalidCharactersInValueErrorMessage;\n+\n+    // Pattern for valid value\n+    protected RegExp regExp = null;\n+\n+    /**\n+     * Sets the RegExp pattern for the TextBox\n+     *\n+     * @param pattern\n+     * @param invalidCharactersInValueErrorMessage\n+     */\n+    public void setRegExp(final String pattern,\n+                          final String invalidCharactersInValueErrorMessage,\n+                          final String invalidCharacterTypedMessage) {\n+        regExp = RegExp.compile(pattern);\n+        this.invalidCharactersInValueErrorMessage = invalidCharactersInValueErrorMessage;\n+        this.invalidCharacterTypedMessage = invalidCharacterTypedMessage;\n+    }\n+\n+    /**\n+     * Sets the invalid values for the TextBox\n+     *\n+     * @param invalidValues\n+     * @param isCaseSensitive\n+     * @param invalidValueErrorMessage\n+     */\n+    public void setInvalidValues(final Set<String> invalidValues,\n+                                 final boolean isCaseSensitive,\n+                                 final String invalidValueErrorMessage) {\n+        if (isCaseSensitive) {\n+            this.invalidValues = invalidValues;\n+        } else {\n+            this.invalidValues = new HashSet<>();\n+            for (String value : invalidValues) {\n+                this.invalidValues.add(value.toLowerCase());\n+            }\n+        }\n+        this.isCaseSensitive = isCaseSensitive;\n+        this.invalidValueErrorMessage = invalidValueErrorMessage;\n+    }\n+\n+    /**\n+     * Tests whether a value is in the list of invalid values\n+     *\n+     * @param value\n+     * @return error message if value is invalid; otherwise null\n+     */\n+    protected String testForInvalidValue(final String value) {\n+        if (value == null || value.isEmpty() || invalidValues == null) {\n+            return null;\n+        }\n+        String testValue;\n+        if (!isCaseSensitive) {\n+            testValue = value.toLowerCase();\n+        } else {\n+            testValue = value;\n+        }\n+        if (invalidValues.contains(testValue)) {\n+            return invalidValueErrorMessage;\n+        } else {\n+            return null;\n+        }\n+    }\n+\n+    @Override\n+    public String isValidValue(String value, boolean isOnFocusLost) {\n+        if (invalidValues != null && !invalidValues.isEmpty() && isOnFocusLost) {\n+            String err = testForInvalidValue(value);\n+            if (err != null && !err.isEmpty()) {\n+                return err;\n+            }\n+        }\n+        if (regExp != null) {\n+            boolean isValid = this.regExp.test(value);\n+            if (!isValid) {\n+                String invalidChars = getInvalidCharsInName(value);\n+                return (isOnFocusLost ? invalidCharactersInValueErrorMessage : invalidCharacterTypedMessage)\n+                        + \": \" + invalidChars;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    protected String makeValidValue(final String value) {\n+        if (value == null || value.isEmpty()) {\n+            return \"\";\n+        }\n+        // It's a known invalid value\n+        if (testForInvalidValue(value) != null) {\n+            return \"\";\n+        } else {\n+            StringBuilder validValue = new StringBuilder(value.length());\n+            for (int i = 0; i < value.length(); i++) {\n+                char c = value.charAt(i);\n+                if (isValidChar(c)) {\n+                    validValue.append(c);\n+                }\n+            }\n+            return validValue.toString();\n+        }\n+    }\n+\n+    protected boolean isValidChar(final char c) {\n+        return isValidChar(regExp, c);\n+    }\n+\n+    protected String getInvalidCharsInName(final String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDA3Mg==", "bodyText": "can be private? or at least package protected access?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398140072", "createdAt": "2020-03-25T20:14:35Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/widgets/AttributeValueTextBox.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.stunner.bpmn.client.forms.widgets;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.google.gwt.regexp.shared.RegExp;\n+import org.kie.workbench.common.stunner.bpmn.client.StunnerSpecific;\n+\n+@StunnerSpecific\n+public class AttributeValueTextBox extends AbstractValidatingTextBox {\n+\n+    Set<String> invalidValues = null;\n+    boolean isCaseSensitive = false;\n+    String invalidValueErrorMessage = null;\n+\n+    protected String invalidCharacterTypedMessage;\n+    protected String invalidCharactersInValueErrorMessage;\n+\n+    // Pattern for valid value\n+    protected RegExp regExp = null;\n+\n+    /**\n+     * Sets the RegExp pattern for the TextBox\n+     *\n+     * @param pattern\n+     * @param invalidCharactersInValueErrorMessage\n+     */\n+    public void setRegExp(final String pattern,\n+                          final String invalidCharactersInValueErrorMessage,\n+                          final String invalidCharacterTypedMessage) {\n+        regExp = RegExp.compile(pattern);\n+        this.invalidCharactersInValueErrorMessage = invalidCharactersInValueErrorMessage;\n+        this.invalidCharacterTypedMessage = invalidCharacterTypedMessage;\n+    }\n+\n+    /**\n+     * Sets the invalid values for the TextBox\n+     *\n+     * @param invalidValues\n+     * @param isCaseSensitive\n+     * @param invalidValueErrorMessage\n+     */\n+    public void setInvalidValues(final Set<String> invalidValues,\n+                                 final boolean isCaseSensitive,\n+                                 final String invalidValueErrorMessage) {\n+        if (isCaseSensitive) {\n+            this.invalidValues = invalidValues;\n+        } else {\n+            this.invalidValues = new HashSet<>();\n+            for (String value : invalidValues) {\n+                this.invalidValues.add(value.toLowerCase());\n+            }\n+        }\n+        this.isCaseSensitive = isCaseSensitive;\n+        this.invalidValueErrorMessage = invalidValueErrorMessage;\n+    }\n+\n+    /**\n+     * Tests whether a value is in the list of invalid values\n+     *\n+     * @param value\n+     * @return error message if value is invalid; otherwise null\n+     */\n+    protected String testForInvalidValue(final String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDIxNA==", "bodyText": "remove javadocs, no useful info IMO", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398140214", "createdAt": "2020-03-25T20:14:52Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/widgets/AttributeValueTextBox.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.stunner.bpmn.client.forms.widgets;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.google.gwt.regexp.shared.RegExp;\n+import org.kie.workbench.common.stunner.bpmn.client.StunnerSpecific;\n+\n+@StunnerSpecific\n+public class AttributeValueTextBox extends AbstractValidatingTextBox {\n+\n+    Set<String> invalidValues = null;\n+    boolean isCaseSensitive = false;\n+    String invalidValueErrorMessage = null;\n+\n+    protected String invalidCharacterTypedMessage;\n+    protected String invalidCharactersInValueErrorMessage;\n+\n+    // Pattern for valid value\n+    protected RegExp regExp = null;\n+\n+    /**\n+     * Sets the RegExp pattern for the TextBox\n+     *\n+     * @param pattern\n+     * @param invalidCharactersInValueErrorMessage\n+     */\n+    public void setRegExp(final String pattern,\n+                          final String invalidCharactersInValueErrorMessage,\n+                          final String invalidCharacterTypedMessage) {\n+        regExp = RegExp.compile(pattern);\n+        this.invalidCharactersInValueErrorMessage = invalidCharactersInValueErrorMessage;\n+        this.invalidCharacterTypedMessage = invalidCharacterTypedMessage;\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDM4NA==", "bodyText": "remove javadocs, no useful info IMO", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r398140384", "createdAt": "2020-03-25T20:15:12Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/widgets/AttributeValueTextBox.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.stunner.bpmn.client.forms.widgets;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import com.google.gwt.regexp.shared.RegExp;\n+import org.kie.workbench.common.stunner.bpmn.client.StunnerSpecific;\n+\n+@StunnerSpecific\n+public class AttributeValueTextBox extends AbstractValidatingTextBox {\n+\n+    Set<String> invalidValues = null;\n+    boolean isCaseSensitive = false;\n+    String invalidValueErrorMessage = null;\n+\n+    protected String invalidCharacterTypedMessage;\n+    protected String invalidCharactersInValueErrorMessage;\n+\n+    // Pattern for valid value\n+    protected RegExp regExp = null;\n+\n+    /**\n+     * Sets the RegExp pattern for the TextBox\n+     *\n+     * @param pattern\n+     * @param invalidCharactersInValueErrorMessage\n+     */\n+    public void setRegExp(final String pattern,\n+                          final String invalidCharactersInValueErrorMessage,\n+                          final String invalidCharacterTypedMessage) {\n+        regExp = RegExp.compile(pattern);\n+        this.invalidCharactersInValueErrorMessage = invalidCharactersInValueErrorMessage;\n+        this.invalidCharacterTypedMessage = invalidCharacterTypedMessage;\n+    }\n+\n+    /**\n+     * Sets the invalid values for the TextBox\n+     *\n+     * @param invalidValues\n+     * @param isCaseSensitive\n+     * @param invalidValueErrorMessage\n+     */\n+    public void setInvalidValues(final Set<String> invalidValues,\n+                                 final boolean isCaseSensitive,\n+                                 final String invalidValueErrorMessage) {\n+        if (isCaseSensitive) {\n+            this.invalidValues = invalidValues;\n+        } else {\n+            this.invalidValues = new HashSet<>();\n+            for (String value : invalidValues) {\n+                this.invalidValues.add(value.toLowerCase());\n+            }\n+        }\n+        this.isCaseSensitive = isCaseSensitive;\n+        this.invalidValueErrorMessage = invalidValueErrorMessage;\n+    }\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "792df31ec197f0344aeb810126f3a3f8b1fee53e", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/792df31ec197f0344aeb810126f3a3f8b1fee53e", "committedDate": "2020-03-25T15:44:57Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "c1af6fbdaaee5b4f15f3a871e55ef2e93c119b40", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/c1af6fbdaaee5b4f15f3a871e55ef2e93c119b40", "committedDate": "2020-03-26T01:29:54Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1af6fbdaaee5b4f15f3a871e55ef2e93c119b40", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/c1af6fbdaaee5b4f15f3a871e55ef2e93c119b40", "committedDate": "2020-03-26T01:29:54Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "8985e3fcb8165909b0f628c477f77cbfe09bf750", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8985e3fcb8165909b0f628c477f77cbfe09bf750", "committedDate": "2020-03-26T22:42:01Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8985e3fcb8165909b0f628c477f77cbfe09bf750", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8985e3fcb8165909b0f628c477f77cbfe09bf750", "committedDate": "2020-03-26T22:42:01Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "f5feba93564a0a6139bc1e80bafc90b4250e07b9", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/f5feba93564a0a6139bc1e80bafc90b4250e07b9", "committedDate": "2020-03-28T00:29:33Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5feba93564a0a6139bc1e80bafc90b4250e07b9", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/f5feba93564a0a6139bc1e80bafc90b4250e07b9", "committedDate": "2020-03-28T00:29:33Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "840a8f7414d8bf251a782e14ee5c19383381203b", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/840a8f7414d8bf251a782e14ee5c19383381203b", "committedDate": "2020-03-30T16:05:59Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "840a8f7414d8bf251a782e14ee5c19383381203b", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/840a8f7414d8bf251a782e14ee5c19383381203b", "committedDate": "2020-03-30T16:05:59Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "78daf480b019bb6caf207063544cddcdeb004bdf", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/78daf480b019bb6caf207063544cddcdeb004bdf", "committedDate": "2020-03-30T23:33:21Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78daf480b019bb6caf207063544cddcdeb004bdf", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/78daf480b019bb6caf207063544cddcdeb004bdf", "committedDate": "2020-03-30T23:33:21Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "a68643d847ee60671fa74bb95404a0e9c6d3ee1e", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a68643d847ee60671fa74bb95404a0e9c6d3ee1e", "committedDate": "2020-03-31T13:37:01Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a68643d847ee60671fa74bb95404a0e9c6d3ee1e", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a68643d847ee60671fa74bb95404a0e9c6d3ee1e", "committedDate": "2020-03-31T13:37:01Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "14985a7bfc8ba50f2be8a39436a565fc5bfc803a", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/14985a7bfc8ba50f2be8a39436a565fc5bfc803a", "committedDate": "2020-03-31T17:17:52Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14985a7bfc8ba50f2be8a39436a565fc5bfc803a", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/14985a7bfc8ba50f2be8a39436a565fc5bfc803a", "committedDate": "2020-03-31T17:17:52Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "d683ab1ef79374df99ea5946ff94bc678b038d68", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d683ab1ef79374df99ea5946ff94bc678b038d68", "committedDate": "2020-03-31T19:48:57Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d683ab1ef79374df99ea5946ff94bc678b038d68", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d683ab1ef79374df99ea5946ff94bc678b038d68", "committedDate": "2020-03-31T19:48:57Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "b4f775d4b55fb6d7b290511c31c73928cd66d8a4", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/b4f775d4b55fb6d7b290511c31c73928cd66d8a4", "committedDate": "2020-04-01T03:27:13Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4f775d4b55fb6d7b290511c31c73928cd66d8a4", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/b4f775d4b55fb6d7b290511c31c73928cd66d8a4", "committedDate": "2020-04-01T03:27:13Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "6e706f3468aac6f15f8dcadc289b6f1cc186453c", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/6e706f3468aac6f15f8dcadc289b6f1cc186453c", "committedDate": "2020-04-01T14:55:42Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e706f3468aac6f15f8dcadc289b6f1cc186453c", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/6e706f3468aac6f15f8dcadc289b6f1cc186453c", "committedDate": "2020-04-01T14:55:42Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "3660f3d47c7a9d9d9b01b7aad339565176904744", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3660f3d47c7a9d9d9b01b7aad339565176904744", "committedDate": "2020-04-03T01:51:43Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3660f3d47c7a9d9d9b01b7aad339565176904744", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3660f3d47c7a9d9d9b01b7aad339565176904744", "committedDate": "2020-04-03T01:51:43Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "e01c065488006d235b318c18908e72788adae17c", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e01c065488006d235b318c18908e72788adae17c", "committedDate": "2020-04-03T02:20:01Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MjczNjA0", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#pullrequestreview-388273604", "createdAt": "2020-04-06T13:55:52Z", "commit": {"oid": "e01c065488006d235b318c18908e72788adae17c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5Mzc5NDE1", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#pullrequestreview-389379415", "createdAt": "2020-04-07T18:25:17Z", "commit": {"oid": "e01c065488006d235b318c18908e72788adae17c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyNToxOFrOGCQjIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODoyNToxOFrOGCQjIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyMTQ3Mg==", "bodyText": "Hi @handreyrc this should be a th, this is from the original widget, should be fixed in original widget with the PR for the Variable tags, but you can change it here", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#discussion_r405021472", "createdAt": "2020-04-07T18:25:18Z", "author": {"login": "inodeman"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/metaDataEditor/MetaDataEditorWidget.html", "diffHunk": "@@ -0,0 +1,56 @@\n+<!--\n+  ~ Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ \thttp://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<div id=\"widget\" class=\"input-group\" style=\"width:100%\">\n+    <div>\n+        <div class=\"row\">\n+            <div class=\"col-md-12\">\n+                <div class=\"table-responsive\">\n+                    <table class=\"table table-striped table-bordered\" data-field=\"table\">\n+                        <thead>\n+                        <tr>\n+                            <th data-field=\"attributeth\" style=\"width:46%\">\n+                                Name\n+                            </th>\n+                            <th data-field=\"valueth\" style=\"width:46%\">\n+                                Value\n+                            </th>\n+\n+                            <td style=\"width:4%\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e01c065488006d235b318c18908e72788adae17c"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d04cb5636a6f25252817d490ed63fb308a134995", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d04cb5636a6f25252817d490ed63fb308a134995", "committedDate": "2020-04-07T19:21:47Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e01c065488006d235b318c18908e72788adae17c", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e01c065488006d235b318c18908e72788adae17c", "committedDate": "2020-04-03T02:20:01Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}, "afterCommit": {"oid": "d04cb5636a6f25252817d490ed63fb308a134995", "author": {"user": {"login": "handreyrc", "name": "Handreyrc"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d04cb5636a6f25252817d490ed63fb308a134995", "committedDate": "2020-04-07T19:21:47Z", "message": "KOGITO-988: Stunner - [VSCode] Support for process metadata attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzM4MTcz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3242#pullrequestreview-390338173", "createdAt": "2020-04-08T21:16:24Z", "commit": {"oid": "d04cb5636a6f25252817d490ed63fb308a134995"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 555, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}