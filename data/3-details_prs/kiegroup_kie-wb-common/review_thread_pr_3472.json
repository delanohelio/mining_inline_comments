{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0ODEzNDU3", "number": 3472, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0NzowN1rOE1FyvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1MTozOVrOE1F2YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTA0ODkyOnYy", "diffSide": "RIGHT", "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0NzowN1rOHtK6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0NzowN1rOHtK6BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyNjY2MA==", "bodyText": "not used anywhere?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import javax.enterprise.context.RequestScoped;", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#discussion_r517126660", "createdAt": "2020-11-04T06:47:07Z", "author": {"login": "mareknovotny"}, "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeIdentityProvider.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.provider.impl;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.enterprise.context.RequestScoped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTA1MzgxOnYy", "diffSide": "RIGHT", "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeIdentityProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0OTo0MlrOHtK86g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0OTo0MlrOHtK86g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyNzQwMg==", "bodyText": "just minor thing, but sonar will be happy?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> roles = new ArrayList<String>();\n          \n          \n            \n                    List<String> roles = new ArrayList<>();", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#discussion_r517127402", "createdAt": "2020-11-04T06:49:42Z", "author": {"login": "mareknovotny"}, "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeIdentityProvider.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.provider.impl;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.context.SessionScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.jboss.errai.security.shared.api.Group;\n+import org.jboss.errai.security.shared.api.Role;\n+import org.jboss.errai.security.shared.api.identity.User;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SessionScoped\n+public class SafeIdentityProvider implements IdentityProvider, Serializable {\n+\n+    private static final Logger logger = LoggerFactory.getLogger( SafeIdentityProvider.class );\n+\n+    /** generated serial version UID */\n+    private static final long serialVersionUID = 7709094889603436905L;\n+\n+    @Inject\n+    private Instance<User> identityInstance;\n+    \n+    @Inject\n+    private Instance<HttpServletRequest> request;\n+    \n+    @Override\n+    public String getName() {\n+        if( identityInstance.isUnsatisfied() ) { \n+            return getIdentityFromRequest();\n+        }\n+          \n+        // default\n+        try {\n+            return identityInstance.get().getIdentifier();\n+        } catch (Exception e) {\n+            logger.debug( \"Error on getting identity from User bean: \" + e.getMessage(), e );\n+            return getIdentityFromRequest();\n+        }\n+    }\n+\n+    private String getIdentityFromRequest() { \n+        if (!request.isUnsatisfied() && request.get().getUserPrincipal() != null) {\n+            return request.get().getUserPrincipal().getName();\n+        }\n+        return UNKNOWN_USER_IDENTITY;\n+    }\n+    \n+    @Override\n+    public List<String> getRoles() {\n+        List<String> roles = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTA1NjE2OnYy", "diffSide": "RIGHT", "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeSessionInfoProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1MDo0N1rOHtK-Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1MDo0N1rOHtK-Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyNzc2Ng==", "bodyText": "A copy&paste error from past I think\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger( SafeIdentityProvider.class );\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger( SafeSessionInfoProvider.class );", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#discussion_r517127766", "createdAt": "2020-11-04T06:50:47Z", "author": {"login": "mareknovotny"}, "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeSessionInfoProvider.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.provider.impl;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.SessionScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import org.jboss.errai.security.shared.api.Role;\n+import org.jboss.errai.security.shared.api.RoleImpl;\n+import org.jboss.errai.security.shared.api.identity.User;\n+import org.jboss.errai.security.shared.api.identity.UserImpl;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.provider.SessionInfoProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.uberfire.rpc.SessionInfo;\n+import org.uberfire.rpc.impl.SessionInfoImpl;\n+\n+@SessionScoped\n+public class SafeSessionInfoProvider implements SessionInfoProvider, Serializable  {\n+\n+    /** Generated serial version UID */\n+    private static final long serialVersionUID = 8510219062936244657L;\n+\n+    private static final Logger logger = LoggerFactory.getLogger( SafeIdentityProvider.class );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTA1ODI0OnYy", "diffSide": "RIGHT", "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeSessionInfoProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1MTozOVrOHtK_jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1MTozOVrOHtK_jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyODA3Nw==", "bodyText": "shorter version\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Role> roles = new ArrayList<Role>(roleStrList.size());\n          \n          \n            \n                    List<Role> roles = new ArrayList<>(roleStrList.size());", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#discussion_r517128077", "createdAt": "2020-11-04T06:51:39Z", "author": {"login": "mareknovotny"}, "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeSessionInfoProvider.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.provider.impl;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.SessionScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import org.jboss.errai.security.shared.api.Role;\n+import org.jboss.errai.security.shared.api.RoleImpl;\n+import org.jboss.errai.security.shared.api.identity.User;\n+import org.jboss.errai.security.shared.api.identity.UserImpl;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.provider.SessionInfoProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.uberfire.rpc.SessionInfo;\n+import org.uberfire.rpc.impl.SessionInfoImpl;\n+\n+@SessionScoped\n+public class SafeSessionInfoProvider implements SessionInfoProvider, Serializable  {\n+\n+    /** Generated serial version UID */\n+    private static final long serialVersionUID = 8510219062936244657L;\n+\n+    private static final Logger logger = LoggerFactory.getLogger( SafeIdentityProvider.class );\n+            \n+    @Inject\n+    private Instance<SessionInfo> delegate;\n+\n+    @Inject \n+    private IdentityProvider identityProvider; \n+    \n+    @Override\n+    public String getId() {\n+        if( delegate.isUnsatisfied() ) { \n+            return UNKNOWN_SESSION_ID;\n+        }\n+        \n+        // default\n+        try {\n+            return delegate.get().getId();\n+        } catch ( Exception e ) {\n+            return UNKNOWN_SESSION_ID;\n+        }\n+    }\n+\n+    @Override\n+    public User getIdentity() {\n+        if( delegate.isUnsatisfied() ) { \n+           return getUserFromIdentityProvider(); \n+        } \n+       \n+        // default\n+        try {\n+            return delegate.get().getIdentity(); \n+        } catch ( Exception e ) {\n+            logger.debug(\"SessionInfo bean was available but could not return identity: \" + e.getMessage(), e );\n+            return getUserFromIdentityProvider();\n+        }\n+    }\n+    \n+    private User getUserFromIdentityProvider() { \n+        List<String> roleStrList = identityProvider.getRoles();\n+        List<Role> roles = new ArrayList<Role>(roleStrList.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1275, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}