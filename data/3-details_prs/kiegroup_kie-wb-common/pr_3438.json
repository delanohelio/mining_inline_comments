{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODQ1NTE0", "number": 3438, "title": "DROOLS-5673: [DMN Designer] Validation fails when an included node is added on a DRD", "bodyText": "JIRA: DROOLS-5673: [DMN Designer] Validation fails when the included node is added on a DRD\nArtifacts\n\nBusiness Central (reproducible on BC only): WAR file v2\nVSCode: plugin v2\n\nBefore:\n\nAfter:\n\n\nTo retest a PR or trigger a specific build please add a comment:\n\n* Retest PR: jenkins retest this\n* A full downstream build: jenkins do fdb\n* A compile downstream build: jenkins do cdb\n* A full production downstream build: jenkins do product fdb\n* An upstream build: jenkins do upstream", "createdAt": "2020-09-25T05:38:32Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3438", "merged": true, "mergeCommit": {"oid": "a0ec78e2850e5100ded434004a12bdebd415f42a"}, "closed": true, "closedAt": "2020-09-25T20:30:54Z", "author": {"login": "karreiro"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMO6LygH2gAyNDkyODQ1NTE0OmU3YTExZWVjY2RhYzVkZTc5MmUxZmMwZThiODdhNjQ0NmNlOTc4Y2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMascQAFqTQ5NjcyMDUxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e7a11eeccdac5de792e1fc0e8b87a6446ce978ce", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e7a11eeccdac5de792e1fc0e8b87a6446ce978ce", "committedDate": "2020-09-25T05:26:33Z", "message": "DROOLS-5673: [DMN Designer] Validation fails when the included node is added on a DRD"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MjU3NDU3", "url": "https://github.com/kiegroup/kie-wb-common/pull/3438#pullrequestreview-496257457", "createdAt": "2020-09-25T09:26:46Z", "commit": {"oid": "e7a11eeccdac5de792e1fc0e8b87a6446ce978ce"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwOToyNjo0NlrOHX8FcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDoyODo0MFrOHX-HOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2MzcyOQ==", "bodyText": "I think this breaks when there are multiple nodes with same name (it's not prevented in any way, so we need to account for it.)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3438#discussion_r494863729", "createdAt": "2020-09-25T09:26:46Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/included/components/DecisionComponents.java", "diffHunk": "@@ -88,41 +97,82 @@ public View getView() {\n \n     public void refresh() {\n \n-        clearDecisionComponents();\n-        startLoading();\n+        if (!dmnDiagramsSession.isSessionStatePresent()) {\n+            return;\n+        }\n+\n+        if (!isIncludedNodeListsUpdated()) {\n+            refreshIncludedNodesList();\n+        }\n+\n+        loadModelComponents();\n+    }\n+\n+    private boolean isIncludedNodeListsUpdated() {\n+        final List<String> currentIncludedNamespaces = getNamespaces(getDMNIncludedModels());\n+        final List<String> latestLoadedNamespaces = getNamespaces(getLatestIncludedModelsLoaded());\n+        return Objects.equals(currentIncludedNamespaces, latestLoadedNamespaces);\n+    }\n \n-        client.loadNodesFromImports(getDMNIncludedModels(), getNodesConsumer());\n+    void refreshIncludedNodesList() {\n+\n+        final List<DMNIncludedModel> dmnIncludedModels = getDMNIncludedModels();\n+\n+        startLoading();\n \n-        loadDRDComponents();\n+        getLatestIncludedModelsLoaded().clear();\n+        getLatestIncludedModelsLoaded().addAll(dmnIncludedModels);\n+        client.loadNodesFromImports(dmnIncludedModels, getNodesConsumer());\n     }\n \n-    void loadDRDComponents() {\n+    void loadModelComponents() {\n \n-        final List<DecisionComponent> decisionComponents = new ArrayList<>();\n+        final String dmnModelName = dmnGraphUtils.getModelDefinitions().getName().getValue();\n+        final List<DRGElement> dmnModelDRGElements = dmnDiagramsSession.getModelDRGElements();\n \n-        dmnDiagramsSession.getModelDRGElements().forEach(drgElement -> {\n-            decisionComponents.add(makeDecisionComponent(drgElement.getDiagramId(),\n-                                                         drgElement));\n+        getModelDRGElements().clear();\n+        dmnModelDRGElements.forEach(drgElement -> {\n+            getModelDRGElements().add(makeDecisionComponent(dmnModelName, drgElement));\n         });\n+        refreshView();\n+    }\n+\n+    void refreshView() {\n+\n+        clearDecisionComponents();\n \n-        createDecisionComponentItems(decisionComponents);\n+        createDecisionComponentItems(getIncludedDRGElements());\n+        createDecisionComponentItems(getModelDRGElements());\n+        setComponentsCounter(getDecisionComponentsItems().size());\n \n-        view.enableFilterInputs();\n-        view.hideLoading();\n-        view.setComponentsCounter(view.getComponentsCounter() + decisionComponents.size());\n+        if (getDecisionComponentsItems().isEmpty()) {\n+            view.disableFilterInputs();\n+            view.showEmptyState();\n+        } else {\n+            view.enableFilterInputs();\n+        }\n     }\n \n-    boolean definitionContainsDRGElement(final Node node) {\n-        return (node.getContent() instanceof Definition)\n-                && ((Definition) node.getContent()).getDefinition() instanceof DRGElement;\n+    private void setComponentsCounter(final int numberOfDecisionComponents) {\n+        view.setComponentsCounter(numberOfDecisionComponents);\n     }\n \n     void createDecisionComponentItems(final List<DecisionComponent> decisionComponents) {\n         for (final DecisionComponent component : decisionComponents) {\n-            createDecisionComponentItem(component);\n+            if (!isDRGElementAdded(component)) {\n+                createDecisionComponentItem(component);\n+            }\n         }\n     }\n \n+    private boolean isDRGElementAdded(final DecisionComponent decisionComponent) {\n+        return getDecisionComponentsItems().stream().anyMatch(item -> {\n+            final String decisionComponentItemName = item.getDecisionComponent().getName();\n+            final String decisionComponentName = decisionComponent.getName();\n+            return Objects.equals(decisionComponentItemName, decisionComponentName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a11eeccdac5de792e1fc0e8b87a6446ce978ce"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2NDUxNA==", "bodyText": "I can confirm - when adding two decisions, one in DRG, second in DRD, both keeping default name 'Decision-1', just one is shown in Decision Components panel. I think we need to include the place where it's defined into this comparison.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3438#discussion_r494864514", "createdAt": "2020-09-25T09:28:04Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/included/components/DecisionComponents.java", "diffHunk": "@@ -88,41 +97,82 @@ public View getView() {\n \n     public void refresh() {\n \n-        clearDecisionComponents();\n-        startLoading();\n+        if (!dmnDiagramsSession.isSessionStatePresent()) {\n+            return;\n+        }\n+\n+        if (!isIncludedNodeListsUpdated()) {\n+            refreshIncludedNodesList();\n+        }\n+\n+        loadModelComponents();\n+    }\n+\n+    private boolean isIncludedNodeListsUpdated() {\n+        final List<String> currentIncludedNamespaces = getNamespaces(getDMNIncludedModels());\n+        final List<String> latestLoadedNamespaces = getNamespaces(getLatestIncludedModelsLoaded());\n+        return Objects.equals(currentIncludedNamespaces, latestLoadedNamespaces);\n+    }\n \n-        client.loadNodesFromImports(getDMNIncludedModels(), getNodesConsumer());\n+    void refreshIncludedNodesList() {\n+\n+        final List<DMNIncludedModel> dmnIncludedModels = getDMNIncludedModels();\n+\n+        startLoading();\n \n-        loadDRDComponents();\n+        getLatestIncludedModelsLoaded().clear();\n+        getLatestIncludedModelsLoaded().addAll(dmnIncludedModels);\n+        client.loadNodesFromImports(dmnIncludedModels, getNodesConsumer());\n     }\n \n-    void loadDRDComponents() {\n+    void loadModelComponents() {\n \n-        final List<DecisionComponent> decisionComponents = new ArrayList<>();\n+        final String dmnModelName = dmnGraphUtils.getModelDefinitions().getName().getValue();\n+        final List<DRGElement> dmnModelDRGElements = dmnDiagramsSession.getModelDRGElements();\n \n-        dmnDiagramsSession.getModelDRGElements().forEach(drgElement -> {\n-            decisionComponents.add(makeDecisionComponent(drgElement.getDiagramId(),\n-                                                         drgElement));\n+        getModelDRGElements().clear();\n+        dmnModelDRGElements.forEach(drgElement -> {\n+            getModelDRGElements().add(makeDecisionComponent(dmnModelName, drgElement));\n         });\n+        refreshView();\n+    }\n+\n+    void refreshView() {\n+\n+        clearDecisionComponents();\n \n-        createDecisionComponentItems(decisionComponents);\n+        createDecisionComponentItems(getIncludedDRGElements());\n+        createDecisionComponentItems(getModelDRGElements());\n+        setComponentsCounter(getDecisionComponentsItems().size());\n \n-        view.enableFilterInputs();\n-        view.hideLoading();\n-        view.setComponentsCounter(view.getComponentsCounter() + decisionComponents.size());\n+        if (getDecisionComponentsItems().isEmpty()) {\n+            view.disableFilterInputs();\n+            view.showEmptyState();\n+        } else {\n+            view.enableFilterInputs();\n+        }\n     }\n \n-    boolean definitionContainsDRGElement(final Node node) {\n-        return (node.getContent() instanceof Definition)\n-                && ((Definition) node.getContent()).getDefinition() instanceof DRGElement;\n+    private void setComponentsCounter(final int numberOfDecisionComponents) {\n+        view.setComponentsCounter(numberOfDecisionComponents);\n     }\n \n     void createDecisionComponentItems(final List<DecisionComponent> decisionComponents) {\n         for (final DecisionComponent component : decisionComponents) {\n-            createDecisionComponentItem(component);\n+            if (!isDRGElementAdded(component)) {\n+                createDecisionComponentItem(component);\n+            }\n         }\n     }\n \n+    private boolean isDRGElementAdded(final DecisionComponent decisionComponent) {\n+        return getDecisionComponentsItems().stream().anyMatch(item -> {\n+            final String decisionComponentItemName = item.getDecisionComponent().getName();\n+            final String decisionComponentName = decisionComponent.getName();\n+            return Objects.equals(decisionComponentItemName, decisionComponentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2MzcyOQ=="}, "originalCommit": {"oid": "e7a11eeccdac5de792e1fc0e8b87a6446ce978ce"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg5Njk1NA==", "bodyText": "even the namespace can be mimicked - include model with ddddd prefix, resulting in ddddd.dec2 decision. User can duplicate such name and the panel will treat those two as a single component.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3438#discussion_r494896954", "createdAt": "2020-09-25T10:28:40Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/included/components/DecisionComponents.java", "diffHunk": "@@ -88,41 +97,82 @@ public View getView() {\n \n     public void refresh() {\n \n-        clearDecisionComponents();\n-        startLoading();\n+        if (!dmnDiagramsSession.isSessionStatePresent()) {\n+            return;\n+        }\n+\n+        if (!isIncludedNodeListsUpdated()) {\n+            refreshIncludedNodesList();\n+        }\n+\n+        loadModelComponents();\n+    }\n+\n+    private boolean isIncludedNodeListsUpdated() {\n+        final List<String> currentIncludedNamespaces = getNamespaces(getDMNIncludedModels());\n+        final List<String> latestLoadedNamespaces = getNamespaces(getLatestIncludedModelsLoaded());\n+        return Objects.equals(currentIncludedNamespaces, latestLoadedNamespaces);\n+    }\n \n-        client.loadNodesFromImports(getDMNIncludedModels(), getNodesConsumer());\n+    void refreshIncludedNodesList() {\n+\n+        final List<DMNIncludedModel> dmnIncludedModels = getDMNIncludedModels();\n+\n+        startLoading();\n \n-        loadDRDComponents();\n+        getLatestIncludedModelsLoaded().clear();\n+        getLatestIncludedModelsLoaded().addAll(dmnIncludedModels);\n+        client.loadNodesFromImports(dmnIncludedModels, getNodesConsumer());\n     }\n \n-    void loadDRDComponents() {\n+    void loadModelComponents() {\n \n-        final List<DecisionComponent> decisionComponents = new ArrayList<>();\n+        final String dmnModelName = dmnGraphUtils.getModelDefinitions().getName().getValue();\n+        final List<DRGElement> dmnModelDRGElements = dmnDiagramsSession.getModelDRGElements();\n \n-        dmnDiagramsSession.getModelDRGElements().forEach(drgElement -> {\n-            decisionComponents.add(makeDecisionComponent(drgElement.getDiagramId(),\n-                                                         drgElement));\n+        getModelDRGElements().clear();\n+        dmnModelDRGElements.forEach(drgElement -> {\n+            getModelDRGElements().add(makeDecisionComponent(dmnModelName, drgElement));\n         });\n+        refreshView();\n+    }\n+\n+    void refreshView() {\n+\n+        clearDecisionComponents();\n \n-        createDecisionComponentItems(decisionComponents);\n+        createDecisionComponentItems(getIncludedDRGElements());\n+        createDecisionComponentItems(getModelDRGElements());\n+        setComponentsCounter(getDecisionComponentsItems().size());\n \n-        view.enableFilterInputs();\n-        view.hideLoading();\n-        view.setComponentsCounter(view.getComponentsCounter() + decisionComponents.size());\n+        if (getDecisionComponentsItems().isEmpty()) {\n+            view.disableFilterInputs();\n+            view.showEmptyState();\n+        } else {\n+            view.enableFilterInputs();\n+        }\n     }\n \n-    boolean definitionContainsDRGElement(final Node node) {\n-        return (node.getContent() instanceof Definition)\n-                && ((Definition) node.getContent()).getDefinition() instanceof DRGElement;\n+    private void setComponentsCounter(final int numberOfDecisionComponents) {\n+        view.setComponentsCounter(numberOfDecisionComponents);\n     }\n \n     void createDecisionComponentItems(final List<DecisionComponent> decisionComponents) {\n         for (final DecisionComponent component : decisionComponents) {\n-            createDecisionComponentItem(component);\n+            if (!isDRGElementAdded(component)) {\n+                createDecisionComponentItem(component);\n+            }\n         }\n     }\n \n+    private boolean isDRGElementAdded(final DecisionComponent decisionComponent) {\n+        return getDecisionComponentsItems().stream().anyMatch(item -> {\n+            final String decisionComponentItemName = item.getDecisionComponent().getName();\n+            final String decisionComponentName = decisionComponent.getName();\n+            return Objects.equals(decisionComponentItemName, decisionComponentName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg2MzcyOQ=="}, "originalCommit": {"oid": "e7a11eeccdac5de792e1fc0e8b87a6446ce978ce"}, "originalPosition": 142}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83f2eb4b6100af791380646ea4c5d6efca52610e", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/83f2eb4b6100af791380646ea4c5d6efca52610e", "committedDate": "2020-09-25T11:59:15Z", "message": " - Fix: Decision Components duplication check must be based on DRG element id, instead of DRG element name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NDE4ODY5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3438#pullrequestreview-496418869", "createdAt": "2020-09-25T13:28:52Z", "commit": {"oid": "83f2eb4b6100af791380646ea4c5d6efca52610e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NzIwNTEz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3438#pullrequestreview-496720513", "createdAt": "2020-09-25T19:10:24Z", "commit": {"oid": "83f2eb4b6100af791380646ea4c5d6efca52610e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 317, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}