{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwNzcwMzU1", "number": 3290, "title": "DROOLS-5253: [DMN Designer] Copied node should be distinguished from original one", "bodyText": "Please refer to: https://issues.redhat.com/browse/DROOLS-5253\nIssue description: If user copy a DMN diagram node, the copy has exactly the same name as the original node. It causes validation issues as the node names have to be unique.\nProposed solution: Every time we copy a node, a new node will be created with a suffix -X, where X it is an incremental numeric value.\nLogic on uniqueness is performed. For instance, when copying the node InputData-1, if, for some reason, InputData-2 is already present, then the name of the copied node will be InputData-3.", "createdAt": "2020-04-29T15:02:56Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290", "merged": true, "mergeCommit": {"oid": "ba5090c528d6d41ad27c831e82ed175d981206a0"}, "closed": true, "closedAt": "2020-05-06T21:36:30Z", "author": {"login": "vpellegrino"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbxVZ_AH2gAyNDEwNzcwMzU1OjU3ZWY3ZWRjNjVmMDI2NTZiNWI1ODU1YjhiZjMxNDdiOTRmZjI4MGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgOLFNAFqTQwOTA5NTI0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "57ef7edc65f02656b5b5855b8bf3147b94ff280f", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/57ef7edc65f02656b5b5855b8bf3147b94ff280f", "committedDate": "2020-04-27T15:50:46Z", "message": "Supporting simple suffix mechanism for cloned nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "046ab4b2c2dde2f2297992495c286e75beb0769d", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/046ab4b2c2dde2f2297992495c286e75beb0769d", "committedDate": "2020-04-28T07:08:00Z", "message": "Implementing uniqueness naming mechanism"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d406ecb260384b570c74d944921f33d0698ca64f", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d406ecb260384b570c74d944921f33d0698ca64f", "committedDate": "2020-04-28T09:05:16Z", "message": "Refactoring: renaming methods/variables for better understanding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86584600eab8c9ea1f6f3e6f4ccf4559a11aad03", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/86584600eab8c9ea1f6f3e6f4ccf4559a11aad03", "committedDate": "2020-04-28T09:06:41Z", "message": "Testing clone of text annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aed945d33ff469c75cada281180929ba59333e88", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/aed945d33ff469c75cada281180929ba59333e88", "committedDate": "2020-04-29T13:26:29Z", "message": "Empty prefix in the name when name is empty"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzY0NzQ3", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-402764747", "createdAt": "2020-04-29T15:09:34Z", "commit": {"oid": "aed945d33ff469c75cada281180929ba59333e88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowOTozNFrOGODkHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTowOTozNFrOGODkHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5MTY0NA==", "bodyText": "Just a thought, but please see DefaultValueUtilities.updateNewNodeName(..) that is currently used to ensure new elements have unique names. It might be re-usable here.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r417391644", "createdAt": "2020-04-29T15:09:34Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +118,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed945d33ff469c75cada281180929ba59333e88"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c71af657c39e755e13d03e2642a6f31577d67d8", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3c71af657c39e755e13d03e2642a6f31577d67d8", "committedDate": "2020-04-30T09:18:23Z", "message": "Improving coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f869848201a7d48bd05f3e32ac5e7a24cca87388", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/f869848201a7d48bd05f3e32ac5e7a24cca87388", "committedDate": "2020-04-30T11:48:10Z", "message": "Fixing expected result when copying node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27", "committedDate": "2020-04-30T13:09:15Z", "message": "Calling DefaultValueUtilities for getting max unused index, to be used in the suffix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzNTE0ODIw", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-403514820", "createdAt": "2020-04-30T13:24:12Z", "commit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTUyMDE0", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-404952014", "createdAt": "2020-05-04T12:45:48Z", "commit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Mzg0NTAy", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406384502", "createdAt": "2020-05-06T08:04:52Z", "commit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowNDo1MlrOGRIHMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowNDo1MlrOGRIHMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMTg5MQ==", "bodyText": "Could be final as well", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420611891", "createdAt": "2020-05-06T08:04:52Z", "author": {"login": "dupliaka"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +117,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());\n+        target.setId(new Id());\n+        target.setNameHolder(new NameHolder(new Name(uniqueNodeName)));\n+        target.setDescription(source.getDescription().copy());\n+        target.setParent(source.getParent());\n         target.getLinksHolder().getValue().getLinks().addAll(cloneExternalLinkList(source));\n     }\n \n+    private void cloneTextElementBasicInfo(final HasText source, final HasText target) {\n+        final String uniqueNodeName = composeUniqueNodeName(source.getText().getValue());\n+        target.setText(new Text(uniqueNodeName));\n+    }\n+\n+    protected String composeUniqueNodeName(final String name) {\n+        final String originalName = Optional.ofNullable(name).orElse(\"\");\n+\n+        try {\n+            final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n+            if (nameSuffixMatcher != null) {\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warning(\"There was an issue while parsing node with name \" + originalName + \" - A fallback will be used for it\");\n+        }\n+\n+        return joinPrefixWithIndexedSuffix(originalName);\n+    }\n+\n+    private String buildNameWithIncrementedSuffixIndex(final String nameValue, final MatchResult matchResult) {\n+        final String suffix = matchResult.getGroup(0);\n+        final String prefix = Optional.ofNullable(nameValue.split(suffix)[0]).orElse(\"\");\n+        return joinPrefixWithIndexedSuffix(prefix);\n+    }\n+\n+    private String joinPrefixWithIndexedSuffix(final String originalName) {\n+        final String originalNameWithHyphen = originalName + HYPHEN;\n+        return originalNameWithHyphen + getMaxUnusedIndexByNamePrefix(originalNameWithHyphen);\n+    }\n+\n+    private int getMaxUnusedIndexByNamePrefix(final String namePrefix) {\n+        final List<String> nodeNameList = StreamSupport.stream(getGraphNodes().spliterator(), true)\n+                .map(this::nodeNamesMapper)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return DefaultValueUtilities.getMaxUnusedIndex(nodeNameList, namePrefix);\n+    }\n+\n+    private Iterable<Node<View, Edge>> getGraphNodes() {\n+        return sessionManager\n+                .getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+    }\n+\n+    private String nodeNamesMapper(final Node<View, Edge> node) {\n+        if (node.getContent().getDefinition() instanceof NamedElement) {\n+            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Mzg0NzYw", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406384760", "createdAt": "2020-05-06T08:05:17Z", "commit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowNToxOFrOGRIH_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowNToxOFrOGRIH_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMjA5NQ==", "bodyText": "This could be final", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420612095", "createdAt": "2020-05-06T08:05:18Z", "author": {"login": "dupliaka"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +117,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());\n+        target.setId(new Id());\n+        target.setNameHolder(new NameHolder(new Name(uniqueNodeName)));\n+        target.setDescription(source.getDescription().copy());\n+        target.setParent(source.getParent());\n         target.getLinksHolder().getValue().getLinks().addAll(cloneExternalLinkList(source));\n     }\n \n+    private void cloneTextElementBasicInfo(final HasText source, final HasText target) {\n+        final String uniqueNodeName = composeUniqueNodeName(source.getText().getValue());\n+        target.setText(new Text(uniqueNodeName));\n+    }\n+\n+    protected String composeUniqueNodeName(final String name) {\n+        final String originalName = Optional.ofNullable(name).orElse(\"\");\n+\n+        try {\n+            final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n+            if (nameSuffixMatcher != null) {\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warning(\"There was an issue while parsing node with name \" + originalName + \" - A fallback will be used for it\");\n+        }\n+\n+        return joinPrefixWithIndexedSuffix(originalName);\n+    }\n+\n+    private String buildNameWithIncrementedSuffixIndex(final String nameValue, final MatchResult matchResult) {\n+        final String suffix = matchResult.getGroup(0);\n+        final String prefix = Optional.ofNullable(nameValue.split(suffix)[0]).orElse(\"\");\n+        return joinPrefixWithIndexedSuffix(prefix);\n+    }\n+\n+    private String joinPrefixWithIndexedSuffix(final String originalName) {\n+        final String originalNameWithHyphen = originalName + HYPHEN;\n+        return originalNameWithHyphen + getMaxUnusedIndexByNamePrefix(originalNameWithHyphen);\n+    }\n+\n+    private int getMaxUnusedIndexByNamePrefix(final String namePrefix) {\n+        final List<String> nodeNameList = StreamSupport.stream(getGraphNodes().spliterator(), true)\n+                .map(this::nodeNamesMapper)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return DefaultValueUtilities.getMaxUnusedIndex(nodeNameList, namePrefix);\n+    }\n+\n+    private Iterable<Node<View, Edge>> getGraphNodes() {\n+        return sessionManager\n+                .getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+    }\n+\n+    private String nodeNamesMapper(final Node<View, Edge> node) {\n+        if (node.getContent().getDefinition() instanceof NamedElement) {\n+            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            return namedElement.getName().getValue();\n+        }\n+        if (node.getContent().getDefinition() instanceof HasText) {\n+            HasText hasText = (HasText) node.getContent().getDefinition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Mzg3MDk1", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406387095", "createdAt": "2020-05-06T08:08:56Z", "commit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowODo1NlrOGRIO9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODowODo1NlrOGRIO9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxMzg3OQ==", "bodyText": "Just a suggestion :\nYou can keep one return to have only one exit point.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420613879", "createdAt": "2020-05-06T08:08:56Z", "author": {"login": "dupliaka"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +117,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());\n+        target.setId(new Id());\n+        target.setNameHolder(new NameHolder(new Name(uniqueNodeName)));\n+        target.setDescription(source.getDescription().copy());\n+        target.setParent(source.getParent());\n         target.getLinksHolder().getValue().getLinks().addAll(cloneExternalLinkList(source));\n     }\n \n+    private void cloneTextElementBasicInfo(final HasText source, final HasText target) {\n+        final String uniqueNodeName = composeUniqueNodeName(source.getText().getValue());\n+        target.setText(new Text(uniqueNodeName));\n+    }\n+\n+    protected String composeUniqueNodeName(final String name) {\n+        final String originalName = Optional.ofNullable(name).orElse(\"\");\n+\n+        try {\n+            final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n+            if (nameSuffixMatcher != null) {\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warning(\"There was an issue while parsing node with name \" + originalName + \" - A fallback will be used for it\");\n+        }\n+\n+        return joinPrefixWithIndexedSuffix(originalName);\n+    }\n+\n+    private String buildNameWithIncrementedSuffixIndex(final String nameValue, final MatchResult matchResult) {\n+        final String suffix = matchResult.getGroup(0);\n+        final String prefix = Optional.ofNullable(nameValue.split(suffix)[0]).orElse(\"\");\n+        return joinPrefixWithIndexedSuffix(prefix);\n+    }\n+\n+    private String joinPrefixWithIndexedSuffix(final String originalName) {\n+        final String originalNameWithHyphen = originalName + HYPHEN;\n+        return originalNameWithHyphen + getMaxUnusedIndexByNamePrefix(originalNameWithHyphen);\n+    }\n+\n+    private int getMaxUnusedIndexByNamePrefix(final String namePrefix) {\n+        final List<String> nodeNameList = StreamSupport.stream(getGraphNodes().spliterator(), true)\n+                .map(this::nodeNamesMapper)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return DefaultValueUtilities.getMaxUnusedIndex(nodeNameList, namePrefix);\n+    }\n+\n+    private Iterable<Node<View, Edge>> getGraphNodes() {\n+        return sessionManager\n+                .getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+    }\n+\n+    private String nodeNamesMapper(final Node<View, Edge> node) {\n+        if (node.getContent().getDefinition() instanceof NamedElement) {\n+            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            return namedElement.getName().getValue();\n+        }\n+        if (node.getContent().getDefinition() instanceof HasText) {\n+            HasText hasText = (HasText) node.getContent().getDefinition();\n+            return hasText.getText().getValue();\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Mzg5MDg4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406389088", "createdAt": "2020-05-06T08:12:04Z", "commit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoxMjowNVrOGRIVBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoxMjowNVrOGRIVBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYxNTQzMQ==", "bodyText": "hasText named like boolean variable that checks for text. Probably we could provide more context - wise declaration?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420615431", "createdAt": "2020-05-06T08:12:05Z", "author": {"login": "dupliaka"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +117,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());\n+        target.setId(new Id());\n+        target.setNameHolder(new NameHolder(new Name(uniqueNodeName)));\n+        target.setDescription(source.getDescription().copy());\n+        target.setParent(source.getParent());\n         target.getLinksHolder().getValue().getLinks().addAll(cloneExternalLinkList(source));\n     }\n \n+    private void cloneTextElementBasicInfo(final HasText source, final HasText target) {\n+        final String uniqueNodeName = composeUniqueNodeName(source.getText().getValue());\n+        target.setText(new Text(uniqueNodeName));\n+    }\n+\n+    protected String composeUniqueNodeName(final String name) {\n+        final String originalName = Optional.ofNullable(name).orElse(\"\");\n+\n+        try {\n+            final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n+            if (nameSuffixMatcher != null) {\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+            }\n+        } catch (Exception e) {\n+            LOGGER.warning(\"There was an issue while parsing node with name \" + originalName + \" - A fallback will be used for it\");\n+        }\n+\n+        return joinPrefixWithIndexedSuffix(originalName);\n+    }\n+\n+    private String buildNameWithIncrementedSuffixIndex(final String nameValue, final MatchResult matchResult) {\n+        final String suffix = matchResult.getGroup(0);\n+        final String prefix = Optional.ofNullable(nameValue.split(suffix)[0]).orElse(\"\");\n+        return joinPrefixWithIndexedSuffix(prefix);\n+    }\n+\n+    private String joinPrefixWithIndexedSuffix(final String originalName) {\n+        final String originalNameWithHyphen = originalName + HYPHEN;\n+        return originalNameWithHyphen + getMaxUnusedIndexByNamePrefix(originalNameWithHyphen);\n+    }\n+\n+    private int getMaxUnusedIndexByNamePrefix(final String namePrefix) {\n+        final List<String> nodeNameList = StreamSupport.stream(getGraphNodes().spliterator(), true)\n+                .map(this::nodeNamesMapper)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+        return DefaultValueUtilities.getMaxUnusedIndex(nodeNameList, namePrefix);\n+    }\n+\n+    private Iterable<Node<View, Edge>> getGraphNodes() {\n+        return sessionManager\n+                .getCurrentSession()\n+                .getCanvasHandler()\n+                .getDiagram()\n+                .getGraph()\n+                .nodes();\n+    }\n+\n+    private String nodeNamesMapper(final Node<View, Edge> node) {\n+        if (node.getContent().getDefinition() instanceof NamedElement) {\n+            NamedElement namedElement = (NamedElement) node.getContent().getDefinition();\n+            return namedElement.getName().getValue();\n+        }\n+        if (node.getContent().getDefinition() instanceof HasText) {\n+            HasText hasText = (HasText) node.getContent().getDefinition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "originalPosition": 159}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67be7177df4167072a118e1287ede29cec567d1e", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/67be7177df4167072a118e1287ede29cec567d1e", "committedDate": "2020-05-06T08:17:53Z", "message": "Intermediate variables should be final + better name for HasText instance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDAyOTU3", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406402957", "createdAt": "2020-05-06T08:31:58Z", "commit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODozMTo1OFrOGRI_wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODozMTo1OFrOGRI_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyNjM2OQ==", "bodyText": "Small suggestion to investigate how could we avoid a generic exception since that would be hard to inspect if something would happen if exec will throw any exception like IndexOutOfBounds or buildNameWithIncrementedSuffixIndex throw some exception(bcs it would probably just skipped)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420626369", "createdAt": "2020-05-06T08:31:58Z", "author": {"login": "dupliaka"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -87,15 +117,78 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n             cloneBusinessKnowledgeModel((BusinessKnowledgeModel) source, (BusinessKnowledgeModel) target);\n         }\n \n-        return super.clone(source, target);\n+        return target;\n     }\n \n     private void cloneDRGElementBasicInfo(final DRGElement source, final DRGElement target) {\n-        target.setName(source.getName().copy());\n-        target.setNameHolder(source.getNameHolder().copy());\n+        final String uniqueNodeName = composeUniqueNodeName(source.getName().getValue());\n+        target.setId(new Id());\n+        target.setNameHolder(new NameHolder(new Name(uniqueNodeName)));\n+        target.setDescription(source.getDescription().copy());\n+        target.setParent(source.getParent());\n         target.getLinksHolder().getValue().getLinks().addAll(cloneExternalLinkList(source));\n     }\n \n+    private void cloneTextElementBasicInfo(final HasText source, final HasText target) {\n+        final String uniqueNodeName = composeUniqueNodeName(source.getText().getValue());\n+        target.setText(new Text(uniqueNodeName));\n+    }\n+\n+    protected String composeUniqueNodeName(final String name) {\n+        final String originalName = Optional.ofNullable(name).orElse(\"\");\n+\n+        try {\n+            final MatchResult nameSuffixMatcher = NAME_SUFFIX_REGEX.exec(originalName);\n+            if (nameSuffixMatcher != null) {\n+                return buildNameWithIncrementedSuffixIndex(originalName, nameSuffixMatcher);\n+            }\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDA1NDE4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406405418", "createdAt": "2020-05-06T08:35:27Z", "commit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODozNToyOFrOGRJHbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODozNToyOFrOGRJHbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyODMzNA==", "bodyText": "Could you please update javadoc on it as well?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420628334", "createdAt": "2020-05-06T08:35:28Z", "author": {"login": "dupliaka"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcess.java", "diffHunk": "@@ -69,10 +92,17 @@ public DMNDeepCloneProcess(final FactoryManager factoryManager,\n     @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9577928b3d5f7f3ed7a5a22b5ed3597900a3b27"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDIwMDcy", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406420072", "createdAt": "2020-05-06T08:55:34Z", "commit": {"oid": "67be7177df4167072a118e1287ede29cec567d1e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f29435d5e848f56deffa887ec193efdf7d1048f5", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/f29435d5e848f56deffa887ec193efdf7d1048f5", "committedDate": "2020-05-06T09:04:38Z", "message": "Giving meaningful name to constants used for indexes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDM5MTMy", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406439132", "createdAt": "2020-05-06T09:21:50Z", "commit": {"oid": "67be7177df4167072a118e1287ede29cec567d1e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToyMTo1MVrOGRKsSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToyMTo1MVrOGRKsSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NDE1Mw==", "bodyText": "This test is a reproducer for https://issues.redhat.com/browse/DROOLS-4424\nIf your change affect this then we can remove the comment and close the bug.\nLet me only check it manually first.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420654153", "createdAt": "2020-05-06T09:21:51Z", "author": {"login": "dupliaka"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -250,6 +250,7 @@ public void testCopyAndPaste() throws Exception {\n         expandDecisionNavigatorDock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67be7177df4167072a118e1287ede29cec567d1e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b74d1418d0de7842d01e64930c2e53055ee6eaf", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/0b74d1418d0de7842d01e64930c2e53055ee6eaf", "committedDate": "2020-05-06T09:22:15Z", "message": "Updating javadoc for clone method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDQzOTY0", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406443964", "createdAt": "2020-05-06T09:28:31Z", "commit": {"oid": "0b74d1418d0de7842d01e64930c2e53055ee6eaf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToyODozMVrOGRK7EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToyODozMVrOGRK7EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY1NzkzNw==", "bodyText": "Suggestion\nWould you mind to add a test for case if the matcher throws an exception in composeUniqueNodeName()?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r420657937", "createdAt": "2020-05-06T09:28:31Z", "author": {"login": "dupliaka"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/commands/clone/DMNDeepCloneProcessTest.java", "diffHunk": "@@ -261,4 +348,70 @@ private void setLinks(final DRGElement drgElement, final String... links) {\n                                          .add(new DMNExternalLink(link, \"description\"))\n                 );\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b74d1418d0de7842d01e64930c2e53055ee6eaf"}, "originalPosition": 209}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NDQ0MTM2", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406444136", "createdAt": "2020-05-06T09:28:45Z", "commit": {"oid": "0b74d1418d0de7842d01e64930c2e53055ee6eaf"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e93f6b1eb7c5e5a30622aabde81667384a9dfeb4", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e93f6b1eb7c5e5a30622aabde81667384a9dfeb4", "committedDate": "2020-05-06T09:34:55Z", "message": "Removing useless try-catch block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fa1de59308b44be488aa2428cf0fd01229d793e", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/2fa1de59308b44be488aa2428cf0fd01229d793e", "committedDate": "2020-05-06T13:45:10Z", "message": "Removing comment from test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjM3ODQ4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-406637848", "createdAt": "2020-05-06T13:56:02Z", "commit": {"oid": "2fa1de59308b44be488aa2428cf0fd01229d793e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MDk1MjQx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#pullrequestreview-409095241", "createdAt": "2020-05-11T11:42:26Z", "commit": {"oid": "2fa1de59308b44be488aa2428cf0fd01229d793e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0MjoyNlrOGTYqaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0MjoyNlrOGTYqaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDIwMA==", "bodyText": "Thank you for updating the test @vpellegrino @dupliaka !", "url": "https://github.com/kiegroup/kie-wb-common/pull/3290#discussion_r422980200", "createdAt": "2020-05-11T11:42:26Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -269,7 +267,12 @@ public void testCopyAndPaste() throws Exception {\n         XmlAssert.assertThat(actual)\n                 .withNamespaceContext(NAMESPACES)\n                 .valueByXPath(\"count(//dmn:businessKnowledgeModel[@name='\" + nodeName + \"'])\")\n-                .isEqualTo(2);\n+                .isEqualTo(1);\n+\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(NAMESPACES)\n+                .valueByXPath(\"count(//dmn:businessKnowledgeModel[@name='\" + copiedNodeName + \"'])\")\n+                .isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fa1de59308b44be488aa2428cf0fd01229d793e"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 372, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}