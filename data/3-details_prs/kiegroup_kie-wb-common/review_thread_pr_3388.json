{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NTg5MzMz", "number": 3388, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1MDoxMFrOEX1ppQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNTo0NDozNVrOEX50WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMxNzE3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1MDoxMFrOG_2q7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1MDoxMFrOG_2q7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwOTE5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                List<PMMLDocumentMetadata> pmmlDocumentMetadata = new ArrayList<>(pmmlDefinitions.values());\n          \n          \n            \n                                final List<PMMLDocumentMetadata> pmmlDocumentMetadata = new ArrayList<>(pmmlDefinitions.values());", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469609197", "createdAt": "2020-08-12T23:50:10Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -344,6 +344,23 @@ public void onError(final ClientRuntimeError error) {\n                 });\n     }\n \n+    @Override\n+    public void getPMMLDocumentsMetadataFromFiles(final List<String> files,\n+                                                  final ServiceCallback<List<PMMLDocumentMetadata>> callback) {\n+        if (files == null || files.isEmpty()) {\n+            callback.onSuccess(Collections.emptyList());\n+            return;\n+        }\n+        final Map<String, PMMLDocumentMetadata> pmmlDefinitions = new HashMap<>();\n+        promises.all(files, file -> loadPMMLDefinitionFromFile(file, pmmlDefinitions)\n+                .then(v -> {\n+                    List<PMMLDocumentMetadata> pmmlDocumentMetadata = new ArrayList<>(pmmlDefinitions.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyNTQxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1Mzo1OVrOG_2vqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1Mzo1OVrOG_2vqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDQwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static PMMLDocumentMetadata fromJSInteropToMetadata(String pmmlFilePath, PMMLDocumentData pmmlDocumentData) {\n          \n          \n            \n                public static PMMLDocumentMetadata fromJSInteropToMetadata(final String pmmlFilePath, final PMMLDocumentData pmmlDocumentData) {", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469610409", "createdAt": "2020-08-12T23:53:59Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLDocumentData;\n+import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLModelMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLParameterMetadata;\n+import org.kie.workbench.common.stunner.core.util.FileUtils;\n+\n+public class PMMLMarshallerConverter {\n+\n+    private PMMLMarshallerConverter() {\n+        // Utils class with static methods.\n+    }\n+\n+    public static PMMLDocumentMetadata fromJSInteropToMetadata(String pmmlFilePath, PMMLDocumentData pmmlDocumentData) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyNTk4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDoxNFrOG_2v9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDoxNFrOG_2v9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<PMMLModelMetadata> models = new ArrayList<>();\n          \n          \n            \n                    final List<PMMLModelMetadata> models = new ArrayList<>();", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469610486", "createdAt": "2020-08-12T23:54:14Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLDocumentData;\n+import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLModelMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLParameterMetadata;\n+import org.kie.workbench.common.stunner.core.util.FileUtils;\n+\n+public class PMMLMarshallerConverter {\n+\n+    private PMMLMarshallerConverter() {\n+        // Utils class with static methods.\n+    }\n+\n+    public static PMMLDocumentMetadata fromJSInteropToMetadata(String pmmlFilePath, PMMLDocumentData pmmlDocumentData) {\n+        List<PMMLModelMetadata> models = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyNjIzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDoyOVrOG_2wIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDoyOVrOG_2wIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDUyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Set<PMMLParameterMetadata> fields = new HashSet<>();\n          \n          \n            \n                        final Set<PMMLParameterMetadata> fields = new HashSet<>();", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469610529", "createdAt": "2020-08-12T23:54:29Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLDocumentData;\n+import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLModelMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLParameterMetadata;\n+import org.kie.workbench.common.stunner.core.util.FileUtils;\n+\n+public class PMMLMarshallerConverter {\n+\n+    private PMMLMarshallerConverter() {\n+        // Utils class with static methods.\n+    }\n+\n+    public static PMMLDocumentMetadata fromJSInteropToMetadata(String pmmlFilePath, PMMLDocumentData pmmlDocumentData) {\n+        List<PMMLModelMetadata> models = new ArrayList<>();\n+        pmmlDocumentData.getModels().stream().forEach(pmmlModelData -> {\n+            final String modelName = pmmlModelData.getModelName();\n+            Set<PMMLParameterMetadata> fields = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyNjcxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDo0MFrOG_2wXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDo0MFrOG_2wXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDU5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (String field : pmmlModelData.getFields()) {\n          \n          \n            \n                        for (final String field : pmmlModelData.getFields()) {", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469610590", "createdAt": "2020-08-12T23:54:40Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverter.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLDocumentData;\n+import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLModelMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLParameterMetadata;\n+import org.kie.workbench.common.stunner.core.util.FileUtils;\n+\n+public class PMMLMarshallerConverter {\n+\n+    private PMMLMarshallerConverter() {\n+        // Utils class with static methods.\n+    }\n+\n+    public static PMMLDocumentMetadata fromJSInteropToMetadata(String pmmlFilePath, PMMLDocumentData pmmlDocumentData) {\n+        List<PMMLModelMetadata> models = new ArrayList<>();\n+        pmmlDocumentData.getModels().stream().forEach(pmmlModelData -> {\n+            final String modelName = pmmlModelData.getModelName();\n+            Set<PMMLParameterMetadata> fields = new HashSet<>();\n+\n+            for (String field : pmmlModelData.getFields()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyNzM2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientServicesProxyImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDo1NVrOG_2wsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NDo1NVrOG_2wsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDY3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> files = includedModels.stream().map(PMMLIncludedModel::getPath).collect(Collectors.toList());\n          \n          \n            \n                    final List<String> files = includedModels.stream().map(PMMLIncludedModel::getPath).collect(Collectors.toList());", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469610673", "createdAt": "2020-08-12T23:54:55Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/DMNClientServicesProxyImpl.java", "diffHunk": "@@ -65,7 +66,8 @@ public void loadNodesFromImports(final List<DMNIncludedModel> includedModels,\n     public void loadPMMLDocumentsFromImports(final Path path,\n                                              final List<PMMLIncludedModel> includedModels,\n                                              final ServiceCallback<List<PMMLDocumentMetadata>> callback) {\n-        callback.onSuccess(Collections.emptyList());\n+        List<String> files = includedModels.stream().map(PMMLIncludedModel::getPath).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyODUxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NToxOVrOG_2xTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NToxOVrOG_2xTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                    } catch (final Exception e) {", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469610831", "createdAt": "2020-08-12T23:55:19Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "diffHunk": "@@ -34,30 +33,33 @@\n public class PMMLMarshallerService {\n \n     private Promises promises;\n+    private PMMLEditorMarshallerApi pmmlEditorMarshallerApi;\n \n     public PMMLMarshallerService() {\n         // CDI\n     }\n \n     @Inject\n-    public PMMLMarshallerService(final Promises promises) {\n+    public PMMLMarshallerService(final Promises promises,\n+                                 final PMMLEditorMarshallerApi pmmlEditorMarshallerApi) {\n         this.promises = promises;\n+        this.pmmlEditorMarshallerApi = pmmlEditorMarshallerApi;\n     }\n \n-    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFile, final String pmmlFileContent) {\n-        if (StringUtils.isEmpty(pmmlFile)) {\n+    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFilePath, final String pmmlFileContent) {\n+        if (StringUtils.isEmpty(pmmlFilePath)) {\n             return promises.reject(\"PMML fileName required to be marshalled is empty or null\");\n         }\n         if (StringUtils.isEmpty(pmmlFileContent)) {\n-            return promises.reject(\"PMML file \" + pmmlFile + \" content required to be marshalled is empty or null\");\n+            return promises.reject(\"PMML file \" + pmmlFilePath + \" content required to be marshalled is empty or null\");\n         }\n \n-        /* Here, a JSInterop call through enveloper should be used passing pmmlFileContent */\n-        String pmmlFileName = FileUtils.getFileName(pmmlFile);\n-        PMMLDocumentMetadata documentMetadata = new PMMLDocumentMetadata(pmmlFile,\n-                                                                         pmmlFileName,\n-                                                                         DMNImportTypes.PMML.getDefaultNamespace(),\n-                                                                         Collections.emptyList());\n-        return promises.resolve(documentMetadata);\n+        try {\n+            PMMLDocumentData pmmlDocumentData = pmmlEditorMarshallerApi.getPMMLDocumentData(pmmlFileContent);\n+            PMMLDocumentMetadata pmmlDocumentMetadata = PMMLMarshallerConverter.fromJSInteropToMetadata(pmmlFilePath, pmmlDocumentData);\n+            return promises.resolve(pmmlDocumentMetadata);\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyOTA0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NTozMlrOG_2xkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NTozMlrOG_2xkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDg5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        PMMLDocumentData pmmlDocumentData = pmmlEditorMarshallerApi.getPMMLDocumentData(pmmlFileContent);\n          \n          \n            \n                        final PMMLDocumentData pmmlDocumentData = pmmlEditorMarshallerApi.getPMMLDocumentData(pmmlFileContent);", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469610896", "createdAt": "2020-08-12T23:55:32Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "diffHunk": "@@ -34,30 +33,33 @@\n public class PMMLMarshallerService {\n \n     private Promises promises;\n+    private PMMLEditorMarshallerApi pmmlEditorMarshallerApi;\n \n     public PMMLMarshallerService() {\n         // CDI\n     }\n \n     @Inject\n-    public PMMLMarshallerService(final Promises promises) {\n+    public PMMLMarshallerService(final Promises promises,\n+                                 final PMMLEditorMarshallerApi pmmlEditorMarshallerApi) {\n         this.promises = promises;\n+        this.pmmlEditorMarshallerApi = pmmlEditorMarshallerApi;\n     }\n \n-    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFile, final String pmmlFileContent) {\n-        if (StringUtils.isEmpty(pmmlFile)) {\n+    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFilePath, final String pmmlFileContent) {\n+        if (StringUtils.isEmpty(pmmlFilePath)) {\n             return promises.reject(\"PMML fileName required to be marshalled is empty or null\");\n         }\n         if (StringUtils.isEmpty(pmmlFileContent)) {\n-            return promises.reject(\"PMML file \" + pmmlFile + \" content required to be marshalled is empty or null\");\n+            return promises.reject(\"PMML file \" + pmmlFilePath + \" content required to be marshalled is empty or null\");\n         }\n \n-        /* Here, a JSInterop call through enveloper should be used passing pmmlFileContent */\n-        String pmmlFileName = FileUtils.getFileName(pmmlFile);\n-        PMMLDocumentMetadata documentMetadata = new PMMLDocumentMetadata(pmmlFile,\n-                                                                         pmmlFileName,\n-                                                                         DMNImportTypes.PMML.getDefaultNamespace(),\n-                                                                         Collections.emptyList());\n-        return promises.resolve(documentMetadata);\n+        try {\n+            PMMLDocumentData pmmlDocumentData = pmmlEditorMarshallerApi.getPMMLDocumentData(pmmlFileContent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMyOTQ2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NTo0NVrOG_2x0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1NTo0NVrOG_2x0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDk2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        PMMLDocumentMetadata pmmlDocumentMetadata = PMMLMarshallerConverter.fromJSInteropToMetadata(pmmlFilePath, pmmlDocumentData);\n          \n          \n            \n                        final PMMLDocumentMetadata pmmlDocumentMetadata = PMMLMarshallerConverter.fromJSInteropToMetadata(pmmlFilePath, pmmlDocumentData);", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469610961", "createdAt": "2020-08-12T23:55:45Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "diffHunk": "@@ -34,30 +33,33 @@\n public class PMMLMarshallerService {\n \n     private Promises promises;\n+    private PMMLEditorMarshallerApi pmmlEditorMarshallerApi;\n \n     public PMMLMarshallerService() {\n         // CDI\n     }\n \n     @Inject\n-    public PMMLMarshallerService(final Promises promises) {\n+    public PMMLMarshallerService(final Promises promises,\n+                                 final PMMLEditorMarshallerApi pmmlEditorMarshallerApi) {\n         this.promises = promises;\n+        this.pmmlEditorMarshallerApi = pmmlEditorMarshallerApi;\n     }\n \n-    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFile, final String pmmlFileContent) {\n-        if (StringUtils.isEmpty(pmmlFile)) {\n+    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFilePath, final String pmmlFileContent) {\n+        if (StringUtils.isEmpty(pmmlFilePath)) {\n             return promises.reject(\"PMML fileName required to be marshalled is empty or null\");\n         }\n         if (StringUtils.isEmpty(pmmlFileContent)) {\n-            return promises.reject(\"PMML file \" + pmmlFile + \" content required to be marshalled is empty or null\");\n+            return promises.reject(\"PMML file \" + pmmlFilePath + \" content required to be marshalled is empty or null\");\n         }\n \n-        /* Here, a JSInterop call through enveloper should be used passing pmmlFileContent */\n-        String pmmlFileName = FileUtils.getFileName(pmmlFile);\n-        PMMLDocumentMetadata documentMetadata = new PMMLDocumentMetadata(pmmlFile,\n-                                                                         pmmlFileName,\n-                                                                         DMNImportTypes.PMML.getDefaultNamespace(),\n-                                                                         Collections.emptyList());\n-        return promises.resolve(documentMetadata);\n+        try {\n+            PMMLDocumentData pmmlDocumentData = pmmlEditorMarshallerApi.getPMMLDocumentData(pmmlFileContent);\n+            PMMLDocumentMetadata pmmlDocumentMetadata = PMMLMarshallerConverter.fromJSInteropToMetadata(pmmlFilePath, pmmlDocumentData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMzODc3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMDoyMVrOG_23PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMDoyMVrOG_23PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjM0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PMMLDocumentMetadata documentMetadata = new PMMLDocumentMetadata(PMML_PATH,\n          \n          \n            \n                                                                                     PMML_FILE,\n          \n          \n            \n                                                                                     DMNImportTypes.PMML.getDefaultNamespace(),\n          \n          \n            \n                                                                                     Collections.emptyList());\n          \n          \n            \n                    final PMMLDocumentMetadata documentMetadata = new PMMLDocumentMetadata(PMML_PATH,\n          \n          \n            \n                                                                                           PMML_FILE,\n          \n          \n            \n                                                                                           DMNImportTypes.PMML.getDefaultNamespace(),\n          \n          \n            \n                                                                                           Collections.emptyList());", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469612349", "createdAt": "2020-08-13T00:00:21Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImplTest.java", "diffHunk": "@@ -201,4 +199,24 @@ public void getPMMLDocumentsAsync() {\n         });\n     }\n \n+    @Test\n+    public void getPMMLDocumentsMetadataFromFilesEmptyFiles() {\n+        dmnMarshallerImportsHelperKogitoImpl.getPMMLDocumentsMetadataFromFiles(Collections.emptyList(), serviceCallbackMock);\n+        dmnMarshallerImportsHelperKogitoImpl.getPMMLDocumentsMetadataFromFiles(null, serviceCallbackMock);\n+        verify(serviceCallbackMock, times(2)).onSuccess(eq(Collections.emptyList()));\n+    }\n+\n+    @Test\n+    public void getPMMLDocumentsMetadataFromFiles() {\n+        PMMLDocumentMetadata documentMetadata = new PMMLDocumentMetadata(PMML_PATH,\n+                                                                         PMML_FILE,\n+                                                                         DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                                         Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMzOTY2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMDo0NlrOG_23vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMDo0NlrOG_23vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjQ3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PMMLDocumentData pmmlDocumentDataMock = PowerMockito.mock(PMMLDocumentData.class);\n          \n          \n            \n                    final PMMLDocumentData pmmlDocumentDataMock = PowerMockito.mock(PMMLDocumentData.class);", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469612478", "createdAt": "2020-08-13T00:00:46Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverterTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLDocumentData;\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLModelData;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({PMMLDocumentData.class, PMMLModelData.class})\n+public class PMMLMarshallerConverterTest {\n+\n+    private static final String FILENAME = \"fileName.pmml\";\n+    private static final String PATH = \"test/\" + FILENAME;\n+\n+    @Test\n+    public void fromJSInteropToMetadata_EmptyModels() {\n+        PMMLDocumentData pmmlDocumentDataMock = PowerMockito.mock(PMMLDocumentData.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMzOTk3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMDo1N1rOG_238g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMDo1N1rOG_238g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PMMLDocumentMetadata metadata = PMMLMarshallerConverter.fromJSInteropToMetadata(PATH, pmmlDocumentDataMock);\n          \n          \n            \n                    final PMMLDocumentMetadata metadata = PMMLMarshallerConverter.fromJSInteropToMetadata(PATH, pmmlDocumentDataMock);", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469612530", "createdAt": "2020-08-13T00:00:57Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverterTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLDocumentData;\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLModelData;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({PMMLDocumentData.class, PMMLModelData.class})\n+public class PMMLMarshallerConverterTest {\n+\n+    private static final String FILENAME = \"fileName.pmml\";\n+    private static final String PATH = \"test/\" + FILENAME;\n+\n+    @Test\n+    public void fromJSInteropToMetadata_EmptyModels() {\n+        PMMLDocumentData pmmlDocumentDataMock = PowerMockito.mock(PMMLDocumentData.class);\n+        PowerMockito.when(pmmlDocumentDataMock.getModels()).thenReturn(Collections.emptyList());\n+        PMMLDocumentMetadata metadata = PMMLMarshallerConverter.fromJSInteropToMetadata(PATH, pmmlDocumentDataMock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM0MTQzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMTozNlrOG_24wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMTozNlrOG_24wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjczOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String modelName = \"LinearRegression\";\n          \n          \n            \n                    String[] fieldsNames = {\"field1\", \"field2\"};\n          \n          \n            \n                    List<String> fields = Arrays.asList(fieldsNames);\n          \n          \n            \n                    List<PMMLModelData> modelsData = new ArrayList<>();\n          \n          \n            \n                            PMMLModelData pmmlModelDataMock = PowerMockito.mock(PMMLModelData.class);\n          \n          \n            \n                    final String modelName = \"LinearRegression\";\n          \n          \n            \n                    final String[] fieldsNames = {\"field1\", \"field2\"};\n          \n          \n            \n                    final List<String> fields = Arrays.asList(fieldsNames);\n          \n          \n            \n                    final List<PMMLModelData> modelsData = new ArrayList<>();\n          \n          \n            \n                    final PMMLModelData pmmlModelDataMock = PowerMockito.mock(PMMLModelData.class);", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469612738", "createdAt": "2020-08-13T00:01:36Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/PMMLMarshallerConverterTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLDocumentData;\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLModelData;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({PMMLDocumentData.class, PMMLModelData.class})\n+public class PMMLMarshallerConverterTest {\n+\n+    private static final String FILENAME = \"fileName.pmml\";\n+    private static final String PATH = \"test/\" + FILENAME;\n+\n+    @Test\n+    public void fromJSInteropToMetadata_EmptyModels() {\n+        PMMLDocumentData pmmlDocumentDataMock = PowerMockito.mock(PMMLDocumentData.class);\n+        PowerMockito.when(pmmlDocumentDataMock.getModels()).thenReturn(Collections.emptyList());\n+        PMMLDocumentMetadata metadata = PMMLMarshallerConverter.fromJSInteropToMetadata(PATH, pmmlDocumentDataMock);\n+        assertEquals(PATH, metadata.getPath());\n+        assertEquals(FILENAME, metadata.getName());\n+        assertEquals(0, metadata.getModels().size());\n+    }\n+\n+    @Test\n+    public void fromJSInteropToMetadata_WithModels() {\n+        String modelName = \"LinearRegression\";\n+        String[] fieldsNames = {\"field1\", \"field2\"};\n+        List<String> fields = Arrays.asList(fieldsNames);\n+        List<PMMLModelData> modelsData = new ArrayList<>();\n+                PMMLModelData pmmlModelDataMock = PowerMockito.mock(PMMLModelData.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDM0MjkzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMjowOVrOG_25jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDowMjowOVrOG_25jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjk0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PMMLDocumentData pmmlDocumentData = PowerMockito.mock(PMMLDocumentData.class);\n          \n          \n            \n                    final PMMLDocumentData pmmlDocumentData = PowerMockito.mock(PMMLDocumentData.class);", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469612941", "createdAt": "2020-08-13T00:02:09Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerServiceTest.java", "diffHunk": "@@ -15,42 +15,61 @@\n  */\n package org.kie.workbench.common.dmn.webapp.kogito.common.client.services;\n \n+import java.util.Collections;\n+\n import elemental2.promise.Promise;\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.PMMLEditorMarshallerApi;\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLDocumentData;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.mockito.Mock;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n import org.uberfire.client.promise.Promises;\n import org.uberfire.promise.SyncPromises;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.when;\n \n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest(PMMLDocumentData.class)\n public class PMMLMarshallerServiceTest {\n \n     private static final String FILENAME = \"fileName.pmml\";\n     private static final String PATH = \"test/\" + FILENAME;\n     private static final String CONTENT = \"<xml>content</xml>\";\n \n+    @Mock\n+    private PMMLEditorMarshallerApi pmmlEditorMarshallerApiMock;\n+\n     private Promises promises;\n     private PMMLMarshallerService pmmlMarshallerService;\n \n     @Before\n     public void setup() {\n         promises = new SyncPromises();\n-        pmmlMarshallerService = new PMMLMarshallerService(promises);\n+        pmmlMarshallerService = new PMMLMarshallerService(promises, pmmlEditorMarshallerApiMock);\n     }\n \n     @Test\n     public void getDocumentMetadata() {\n+        PMMLDocumentData pmmlDocumentData = PowerMockito.mock(PMMLDocumentData.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDk5OTkyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNTo0NDozNVrOG_8zaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzozNTo0M1rOG__jzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwOTY3NQ==", "bodyText": "Shouldn't we change also the reecting message? there we refer still fileName instead of filePath.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469709675", "createdAt": "2020-08-13T05:44:35Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "diffHunk": "@@ -34,30 +33,33 @@\n public class PMMLMarshallerService {\n \n     private Promises promises;\n+    private PMMLEditorMarshallerApi pmmlEditorMarshallerApi;\n \n     public PMMLMarshallerService() {\n         // CDI\n     }\n \n     @Inject\n-    public PMMLMarshallerService(final Promises promises) {\n+    public PMMLMarshallerService(final Promises promises,\n+                                 final PMMLEditorMarshallerApi pmmlEditorMarshallerApi) {\n         this.promises = promises;\n+        this.pmmlEditorMarshallerApi = pmmlEditorMarshallerApi;\n     }\n \n-    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFile, final String pmmlFileContent) {\n-        if (StringUtils.isEmpty(pmmlFile)) {\n+    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFilePath, final String pmmlFileContent) {\n+        if (StringUtils.isEmpty(pmmlFilePath)) {\n             return promises.reject(\"PMML fileName required to be marshalled is empty or null\");\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1NDgyOA==", "bodyText": "@jomarko Done, thanks.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3388#discussion_r469754828", "createdAt": "2020-08-13T07:35:43Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "diffHunk": "@@ -34,30 +33,33 @@\n public class PMMLMarshallerService {\n \n     private Promises promises;\n+    private PMMLEditorMarshallerApi pmmlEditorMarshallerApi;\n \n     public PMMLMarshallerService() {\n         // CDI\n     }\n \n     @Inject\n-    public PMMLMarshallerService(final Promises promises) {\n+    public PMMLMarshallerService(final Promises promises,\n+                                 final PMMLEditorMarshallerApi pmmlEditorMarshallerApi) {\n         this.promises = promises;\n+        this.pmmlEditorMarshallerApi = pmmlEditorMarshallerApi;\n     }\n \n-    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFile, final String pmmlFileContent) {\n-        if (StringUtils.isEmpty(pmmlFile)) {\n+    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFilePath, final String pmmlFileContent) {\n+        if (StringUtils.isEmpty(pmmlFilePath)) {\n             return promises.reject(\"PMML fileName required to be marshalled is empty or null\");\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcwOTY3NQ=="}, "originalCommit": {"oid": "525823deb10c1a57c6b8dd1b1b39511d7275c66f"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1374, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}