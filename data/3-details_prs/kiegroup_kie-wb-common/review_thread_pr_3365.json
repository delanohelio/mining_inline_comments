{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MjA1MDAy", "number": 3365, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzo0NDowM1rOEVtNqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxNjowM1rOEVt-XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTk2MzMxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/PackageServiceLoaderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzo0NDowM1rOG8nHlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOToxOTowNVrOG8qrvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwODY2Mg==", "bodyText": "Reading sonar report, shouldn't we implement as :\n    public Set<String> find(final Path path) {\n        final Set<String> result = new HashSet<>();\n\n        final WorkspaceProject workspaceProject = projectService.resolveProject(path);\n\n        final List<RefactoringPageRow> rows = refactoringQueryService.query(FindPackageNamesQuery.NAME,\n                                                                            getValueIndexTerms(workspaceProject));\n\n        for (RefactoringPageRow row : rows) {\n            result.add(row.getValue().toString());\n        }\n        \n        return result;\n    }\n?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466208662", "createdAt": "2020-08-06T07:44:03Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/PackageServiceLoaderImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.services.refactoring.backend.server.query;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.guvnor.common.services.project.model.WorkspaceProject;\n+import org.guvnor.common.services.project.service.WorkspaceProjectService;\n+import org.jboss.errai.bus.server.annotations.Service;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.standard.FindPackageNamesQuery;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueModuleRootPathIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValuePackageNameIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringPageRow;\n+import org.kie.workbench.common.services.refactoring.service.PackageServiceLoader;\n+import org.kie.workbench.common.services.refactoring.service.RefactoringQueryService;\n+import org.uberfire.backend.vfs.Path;\n+\n+@Service\n+@ApplicationScoped\n+public class PackageServiceLoaderImpl\n+        implements PackageServiceLoader {\n+\n+    @Inject\n+    private RefactoringQueryService refactoringQueryService;\n+\n+    @Inject\n+    private WorkspaceProjectService projectService;\n+\n+    public Set<String> find(final Path path) {\n+        final Set<String> result = new HashSet<>();\n+        try {\n+\n+            final WorkspaceProject workspaceProject = projectService.resolveProject(path);\n+\n+            final List<RefactoringPageRow> rows = refactoringQueryService.query(FindPackageNamesQuery.NAME,\n+                                                                                getValueIndexTerms(workspaceProject));\n+\n+            for (RefactoringPageRow row : rows) {\n+                result.add(row.getValue().toString());\n+            }\n+        } finally {\n+            return result;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2NzA2OQ==", "bodyText": "Here I also copied an existing practice. The problem without this is then any errors are not captured. I did try this and the errors do happen. So maybe to fix sonar the error needs to be captured and in the capture block I do return result;.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466267069", "createdAt": "2020-08-06T09:19:05Z", "author": {"login": "Rikkola"}, "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/PackageServiceLoaderImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.services.refactoring.backend.server.query;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.guvnor.common.services.project.model.WorkspaceProject;\n+import org.guvnor.common.services.project.service.WorkspaceProjectService;\n+import org.jboss.errai.bus.server.annotations.Service;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.standard.FindPackageNamesQuery;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueModuleRootPathIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValuePackageNameIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringPageRow;\n+import org.kie.workbench.common.services.refactoring.service.PackageServiceLoader;\n+import org.kie.workbench.common.services.refactoring.service.RefactoringQueryService;\n+import org.uberfire.backend.vfs.Path;\n+\n+@Service\n+@ApplicationScoped\n+public class PackageServiceLoaderImpl\n+        implements PackageServiceLoader {\n+\n+    @Inject\n+    private RefactoringQueryService refactoringQueryService;\n+\n+    @Inject\n+    private WorkspaceProjectService projectService;\n+\n+    public Set<String> find(final Path path) {\n+        final Set<String> result = new HashSet<>();\n+        try {\n+\n+            final WorkspaceProject workspaceProject = projectService.resolveProject(path);\n+\n+            final List<RefactoringPageRow> rows = refactoringQueryService.query(FindPackageNamesQuery.NAME,\n+                                                                                getValueIndexTerms(workspaceProject));\n+\n+            for (RefactoringPageRow row : rows) {\n+                result.add(row.getValue().toString());\n+            }\n+        } finally {\n+            return result;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwODY2Mg=="}, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjA1MjcwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindPackageNamesQuery.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODowNjozN1rOG8n8hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzo0NTo0OFrOG896-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMjIxNA==", "bodyText": "Shouldn't be here also term instanceof ValuePackageNameIndexTerm. Asking just because of the toQuery method content.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466222214", "createdAt": "2020-08-06T08:06:37Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindPackageNamesQuery.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.services.refactoring.backend.server.query.standard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.apache.lucene.search.Query;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.NamedQuery;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.builder.SearchEmptyQueryBuilder;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.response.ResponseBuilder;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueModuleRootPathIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValuePackageNameIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringPageRow;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringStringPageRow;\n+import org.uberfire.ext.metadata.model.KObject;\n+import org.uberfire.ext.metadata.model.KProperty;\n+import org.uberfire.paging.PageResponse;\n+\n+@ApplicationScoped\n+public class FindPackageNamesQuery extends AbstractFindQuery implements NamedQuery {\n+\n+    public static final String NAME = FindPackageNamesQuery.class.getSimpleName();\n+    private static final ValuePackageNameIndexTerm packageNameIndexTerm = new ValuePackageNameIndexTerm();\n+    private PackageResponseBuilder responseBuilder = new PackageResponseBuilder();\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public ResponseBuilder getResponseBuilder() {\n+        return responseBuilder;\n+    }\n+\n+    @Override\n+    public Query toQuery(Set<ValueIndexTerm> terms) {\n+        final SearchEmptyQueryBuilder queryBuilder = new SearchEmptyQueryBuilder();\n+\n+        for (ValueIndexTerm term : terms) {\n+            if (term instanceof ValueModuleRootPathIndexTerm\n+                    || term instanceof ValuePackageNameIndexTerm) {\n+                queryBuilder.addTerm(term);\n+            }\n+        }\n+\n+        return queryBuilder.build();\n+    }\n+\n+    @Override\n+    public void validateTerms(Set<ValueIndexTerm> queryTerms) {\n+        checkNotNullAndNotEmpty(queryTerms);\n+\n+        checkInvalidAndRequiredTerms(queryTerms,\n+                                     NAME,\n+                                     new String[]{\n+                                             null,   // not required\n+                                             packageNameIndexTerm.getTerm()\n+                                     },\n+                                     (t) -> (t instanceof ValueModuleRootPathIndexTerm),\n+                                     (t) -> (Objects.equals(t.getTerm(), packageNameIndexTerm.getTerm())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2NzcyMw==", "bodyText": "Yeah, might be safer that way.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466267723", "createdAt": "2020-08-06T09:19:39Z", "author": {"login": "Rikkola"}, "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindPackageNamesQuery.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.services.refactoring.backend.server.query.standard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.apache.lucene.search.Query;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.NamedQuery;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.builder.SearchEmptyQueryBuilder;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.response.ResponseBuilder;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueModuleRootPathIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValuePackageNameIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringPageRow;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringStringPageRow;\n+import org.uberfire.ext.metadata.model.KObject;\n+import org.uberfire.ext.metadata.model.KProperty;\n+import org.uberfire.paging.PageResponse;\n+\n+@ApplicationScoped\n+public class FindPackageNamesQuery extends AbstractFindQuery implements NamedQuery {\n+\n+    public static final String NAME = FindPackageNamesQuery.class.getSimpleName();\n+    private static final ValuePackageNameIndexTerm packageNameIndexTerm = new ValuePackageNameIndexTerm();\n+    private PackageResponseBuilder responseBuilder = new PackageResponseBuilder();\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public ResponseBuilder getResponseBuilder() {\n+        return responseBuilder;\n+    }\n+\n+    @Override\n+    public Query toQuery(Set<ValueIndexTerm> terms) {\n+        final SearchEmptyQueryBuilder queryBuilder = new SearchEmptyQueryBuilder();\n+\n+        for (ValueIndexTerm term : terms) {\n+            if (term instanceof ValueModuleRootPathIndexTerm\n+                    || term instanceof ValuePackageNameIndexTerm) {\n+                queryBuilder.addTerm(term);\n+            }\n+        }\n+\n+        return queryBuilder.build();\n+    }\n+\n+    @Override\n+    public void validateTerms(Set<ValueIndexTerm> queryTerms) {\n+        checkNotNullAndNotEmpty(queryTerms);\n+\n+        checkInvalidAndRequiredTerms(queryTerms,\n+                                     NAME,\n+                                     new String[]{\n+                                             null,   // not required\n+                                             packageNameIndexTerm.getTerm()\n+                                     },\n+                                     (t) -> (t instanceof ValueModuleRootPathIndexTerm),\n+                                     (t) -> (Objects.equals(t.getTerm(), packageNameIndexTerm.getTerm())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMjIxNA=="}, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU4MjI2Nw==", "bodyText": "Looks like this equals check is enough.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466582267", "createdAt": "2020-08-06T17:45:48Z", "author": {"login": "Rikkola"}, "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindPackageNamesQuery.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.services.refactoring.backend.server.query.standard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.apache.lucene.search.Query;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.NamedQuery;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.builder.SearchEmptyQueryBuilder;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.response.ResponseBuilder;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueModuleRootPathIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValuePackageNameIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringPageRow;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringStringPageRow;\n+import org.uberfire.ext.metadata.model.KObject;\n+import org.uberfire.ext.metadata.model.KProperty;\n+import org.uberfire.paging.PageResponse;\n+\n+@ApplicationScoped\n+public class FindPackageNamesQuery extends AbstractFindQuery implements NamedQuery {\n+\n+    public static final String NAME = FindPackageNamesQuery.class.getSimpleName();\n+    private static final ValuePackageNameIndexTerm packageNameIndexTerm = new ValuePackageNameIndexTerm();\n+    private PackageResponseBuilder responseBuilder = new PackageResponseBuilder();\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public ResponseBuilder getResponseBuilder() {\n+        return responseBuilder;\n+    }\n+\n+    @Override\n+    public Query toQuery(Set<ValueIndexTerm> terms) {\n+        final SearchEmptyQueryBuilder queryBuilder = new SearchEmptyQueryBuilder();\n+\n+        for (ValueIndexTerm term : terms) {\n+            if (term instanceof ValueModuleRootPathIndexTerm\n+                    || term instanceof ValuePackageNameIndexTerm) {\n+                queryBuilder.addTerm(term);\n+            }\n+        }\n+\n+        return queryBuilder.build();\n+    }\n+\n+    @Override\n+    public void validateTerms(Set<ValueIndexTerm> queryTerms) {\n+        checkNotNullAndNotEmpty(queryTerms);\n+\n+        checkInvalidAndRequiredTerms(queryTerms,\n+                                     NAME,\n+                                     new String[]{\n+                                             null,   // not required\n+                                             packageNameIndexTerm.getTerm()\n+                                     },\n+                                     (t) -> (t instanceof ValueModuleRootPathIndexTerm),\n+                                     (t) -> (Objects.equals(t.getTerm(), packageNameIndexTerm.getTerm())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMjIxNA=="}, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjA2MjA3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindPackageNamesQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODowODo1M1rOG8oB6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOToyMDozMVrOG8qyAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMzU5Mw==", "bodyText": "Why this is not just starRow + pageSize >= hits?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466223593", "createdAt": "2020-08-06T08:08:53Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindPackageNamesQuery.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.services.refactoring.backend.server.query.standard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.apache.lucene.search.Query;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.NamedQuery;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.builder.SearchEmptyQueryBuilder;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.response.ResponseBuilder;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueModuleRootPathIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValuePackageNameIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringPageRow;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringStringPageRow;\n+import org.uberfire.ext.metadata.model.KObject;\n+import org.uberfire.ext.metadata.model.KProperty;\n+import org.uberfire.paging.PageResponse;\n+\n+@ApplicationScoped\n+public class FindPackageNamesQuery extends AbstractFindQuery implements NamedQuery {\n+\n+    public static final String NAME = FindPackageNamesQuery.class.getSimpleName();\n+    private static final ValuePackageNameIndexTerm packageNameIndexTerm = new ValuePackageNameIndexTerm();\n+    private PackageResponseBuilder responseBuilder = new PackageResponseBuilder();\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public ResponseBuilder getResponseBuilder() {\n+        return responseBuilder;\n+    }\n+\n+    @Override\n+    public Query toQuery(Set<ValueIndexTerm> terms) {\n+        final SearchEmptyQueryBuilder queryBuilder = new SearchEmptyQueryBuilder();\n+\n+        for (ValueIndexTerm term : terms) {\n+            if (term instanceof ValueModuleRootPathIndexTerm\n+                    || term instanceof ValuePackageNameIndexTerm) {\n+                queryBuilder.addTerm(term);\n+            }\n+        }\n+\n+        return queryBuilder.build();\n+    }\n+\n+    @Override\n+    public void validateTerms(Set<ValueIndexTerm> queryTerms) {\n+        checkNotNullAndNotEmpty(queryTerms);\n+\n+        checkInvalidAndRequiredTerms(queryTerms,\n+                                     NAME,\n+                                     new String[]{\n+                                             null,   // not required\n+                                             packageNameIndexTerm.getTerm()\n+                                     },\n+                                     (t) -> (t instanceof ValueModuleRootPathIndexTerm),\n+                                     (t) -> (Objects.equals(t.getTerm(), packageNameIndexTerm.getTerm())));\n+    }\n+\n+    private static class PackageResponseBuilder implements ResponseBuilder {\n+\n+        @Override\n+        public PageResponse<RefactoringPageRow> buildResponse(final int pageSize,\n+                                                              final int startRow,\n+                                                              final List<KObject> kObjects) {\n+            final int hits = kObjects.size();\n+            final PageResponse<RefactoringPageRow> response = new PageResponse();\n+            final List<RefactoringPageRow> result = buildResponse(kObjects);\n+            response.setTotalRowSize(hits);\n+            response.setPageRowList(result);\n+            response.setTotalRowSizeExact(true);\n+            response.setStartRowIndex(startRow);\n+            response.setLastPage((pageSize * startRow + 2) >= hits);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2ODY3NA==", "bodyText": "I really wish I had used a name for the magic 2 here.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466268674", "createdAt": "2020-08-06T09:20:31Z", "author": {"login": "Rikkola"}, "path": "kie-wb-common-services/kie-wb-common-refactoring/kie-wb-common-refactoring-backend/src/main/java/org/kie/workbench/common/services/refactoring/backend/server/query/standard/FindPackageNamesQuery.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.services.refactoring.backend.server.query.standard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.apache.lucene.search.Query;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.NamedQuery;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.builder.SearchEmptyQueryBuilder;\n+import org.kie.workbench.common.services.refactoring.backend.server.query.response.ResponseBuilder;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValueModuleRootPathIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.index.terms.valueterms.ValuePackageNameIndexTerm;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringPageRow;\n+import org.kie.workbench.common.services.refactoring.model.query.RefactoringStringPageRow;\n+import org.uberfire.ext.metadata.model.KObject;\n+import org.uberfire.ext.metadata.model.KProperty;\n+import org.uberfire.paging.PageResponse;\n+\n+@ApplicationScoped\n+public class FindPackageNamesQuery extends AbstractFindQuery implements NamedQuery {\n+\n+    public static final String NAME = FindPackageNamesQuery.class.getSimpleName();\n+    private static final ValuePackageNameIndexTerm packageNameIndexTerm = new ValuePackageNameIndexTerm();\n+    private PackageResponseBuilder responseBuilder = new PackageResponseBuilder();\n+\n+    @Override\n+    public String getName() {\n+        return NAME;\n+    }\n+\n+    @Override\n+    public ResponseBuilder getResponseBuilder() {\n+        return responseBuilder;\n+    }\n+\n+    @Override\n+    public Query toQuery(Set<ValueIndexTerm> terms) {\n+        final SearchEmptyQueryBuilder queryBuilder = new SearchEmptyQueryBuilder();\n+\n+        for (ValueIndexTerm term : terms) {\n+            if (term instanceof ValueModuleRootPathIndexTerm\n+                    || term instanceof ValuePackageNameIndexTerm) {\n+                queryBuilder.addTerm(term);\n+            }\n+        }\n+\n+        return queryBuilder.build();\n+    }\n+\n+    @Override\n+    public void validateTerms(Set<ValueIndexTerm> queryTerms) {\n+        checkNotNullAndNotEmpty(queryTerms);\n+\n+        checkInvalidAndRequiredTerms(queryTerms,\n+                                     NAME,\n+                                     new String[]{\n+                                             null,   // not required\n+                                             packageNameIndexTerm.getTerm()\n+                                     },\n+                                     (t) -> (t instanceof ValueModuleRootPathIndexTerm),\n+                                     (t) -> (Objects.equals(t.getTerm(), packageNameIndexTerm.getTerm())));\n+    }\n+\n+    private static class PackageResponseBuilder implements ResponseBuilder {\n+\n+        @Override\n+        public PageResponse<RefactoringPageRow> buildResponse(final int pageSize,\n+                                                              final int startRow,\n+                                                              final List<KObject> kObjects) {\n+            final int hits = kObjects.size();\n+            final PageResponse<RefactoringPageRow> response = new PageResponse();\n+            final List<RefactoringPageRow> result = buildResponse(kObjects);\n+            response.setTotalRowSize(hits);\n+            response.setPageRowList(result);\n+            response.setTotalRowSizeExact(true);\n+            response.setStartRowIndex(startRow);\n+            response.setLastPage((pageSize * startRow + 2) >= hits);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMzU5Mw=="}, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjA4Nzk3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-services/kie-wb-common-services-api/src/main/java/org/kie/workbench/common/services/shared/project/KieModuleService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxNjowM1rOG8oRpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxMTozNVrOG9V6Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNzYyMw==", "bodyText": "Could we please add javadoc? What is the contract if packageName was not found?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466227623", "createdAt": "2020-08-06T08:16:03Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-services/kie-wb-common-services-api/src/main/java/org/kie/workbench/common/services/shared/project/KieModuleService.java", "diffHunk": "@@ -25,5 +26,9 @@\n @Remote\n public interface KieModuleService\n         extends ModuleService<KieModule> {\n-    KieModulePackages resolveModulePackages(Module activeModule);\n+\n+    KieModulePackages resolveModulePackages(final Module activeModule);\n+\n+    Package resolvePackage(final Module activeModule,\n+                           final String packageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI2ODk5Ng==", "bodyText": "We can.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466268996", "createdAt": "2020-08-06T09:20:45Z", "author": {"login": "Rikkola"}, "path": "kie-wb-common-services/kie-wb-common-services-api/src/main/java/org/kie/workbench/common/services/shared/project/KieModuleService.java", "diffHunk": "@@ -25,5 +26,9 @@\n @Remote\n public interface KieModuleService\n         extends ModuleService<KieModule> {\n-    KieModulePackages resolveModulePackages(Module activeModule);\n+\n+    KieModulePackages resolveModulePackages(final Module activeModule);\n+\n+    Package resolvePackage(final Module activeModule,\n+                           final String packageName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNzYyMw=="}, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk2OTc2OA==", "bodyText": "I guess the javadoc is still missing.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466969768", "createdAt": "2020-08-07T10:58:07Z", "author": {"login": "Rikkola"}, "path": "kie-wb-common-services/kie-wb-common-services-api/src/main/java/org/kie/workbench/common/services/shared/project/KieModuleService.java", "diffHunk": "@@ -25,5 +26,9 @@\n @Remote\n public interface KieModuleService\n         extends ModuleService<KieModule> {\n-    KieModulePackages resolveModulePackages(Module activeModule);\n+\n+    KieModulePackages resolveModulePackages(final Module activeModule);\n+\n+    Package resolvePackage(final Module activeModule,\n+                           final String packageName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNzYyMw=="}, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NTMzNA==", "bodyText": "Done", "url": "https://github.com/kiegroup/kie-wb-common/pull/3365#discussion_r466975334", "createdAt": "2020-08-07T11:11:35Z", "author": {"login": "Rikkola"}, "path": "kie-wb-common-services/kie-wb-common-services-api/src/main/java/org/kie/workbench/common/services/shared/project/KieModuleService.java", "diffHunk": "@@ -25,5 +26,9 @@\n @Remote\n public interface KieModuleService\n         extends ModuleService<KieModule> {\n-    KieModulePackages resolveModulePackages(Module activeModule);\n+\n+    KieModulePackages resolveModulePackages(final Module activeModule);\n+\n+    Package resolvePackage(final Module activeModule,\n+                           final String packageName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNzYyMw=="}, "originalCommit": {"oid": "da1ab7eaceb3d0b6934e3f9c09121422ccaaf663"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1354, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}