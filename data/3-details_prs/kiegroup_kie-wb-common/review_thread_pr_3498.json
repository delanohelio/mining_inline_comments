{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MzkxNDU3", "number": 3498, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNjo1N1rOE8rYWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDo1ODo1OFrOFgDBtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYwNzYwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyNjo1N1rOH48fbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzo1MTozNFrOI0inog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzM5MA==", "bodyText": "TODO, putting a comment here so we do not forget about these tests", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r529473390", "createdAt": "2020-11-24T11:26:57Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -16,614 +16,10 @@\n \n package org.kie.workbench.common.dmn.project.client.editor;\n \n-import java.lang.annotation.Annotation;\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n+// TODO @RunWith(GwtMockitoTestRunner.class)\n+// TODO @WithClassesToStub(PathPlaceRequest.class)\n+public class DMNDiagramEditorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1635263895eddfecc1a5ea04640f084fc208fd77"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTk2NDA2Ng==", "bodyText": "done!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591964066", "createdAt": "2021-03-10T23:51:34Z", "author": {"login": "romartin"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -16,614 +16,10 @@\n \n package org.kie.workbench.common.dmn.project.client.editor;\n \n-import java.lang.annotation.Annotation;\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n+// TODO @RunWith(GwtMockitoTestRunner.class)\n+// TODO @WithClassesToStub(PathPlaceRequest.class)\n+public class DMNDiagramEditorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3MzM5MA=="}, "originalCommit": {"oid": "1635263895eddfecc1a5ea04640f084fc208fd77"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDYxMTc4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/session/DMNEditorSessionCommandsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMToyODowN1rOH48h7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzo1MTo1NVrOI0ioPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDAyOA==", "bodyText": "same as above", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r529474028", "createdAt": "2020-11-24T11:28:07Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/session/DMNEditorSessionCommandsTest.java", "diffHunk": "@@ -16,36 +16,9 @@\n \n package org.kie.workbench.common.dmn.project.client.session;\n \n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.kie.workbench.common.dmn.client.widgets.toolbar.DMNPerformAutomaticLayoutCommand;\n-import org.kie.workbench.common.dmn.project.client.session.command.SaveDiagramSessionCommand;\n-import org.kie.workbench.common.dmn.project.client.validation.DMNValidateSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ClearSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.CopySelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.CutSelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.DeleteSelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToJpgSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToPdfSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToPngSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToRawFormatSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToSvgSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.PasteSelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.RedoSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.SwitchGridSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.UndoSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.VisitGraphSessionCommand;\n-import org.kie.workbench.common.stunner.kogito.client.session.EditorSessionCommands;\n-import org.kie.workbench.common.stunner.kogito.client.session.EditorSessionCommandsTest;\n-import org.mockito.InOrder;\n-import org.mockito.runners.MockitoJUnitRunner;\n-\n-import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.inOrder;\n-import static org.mockito.Mockito.verify;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class DMNEditorSessionCommandsTest extends EditorSessionCommandsTest {\n+// TODO\n+// @RunWith(MockitoJUnitRunner.class)\n+public class DMNEditorSessionCommandsTest /*extends EditorSessionCommandsTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1635263895eddfecc1a5ea04640f084fc208fd77"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTk2NDIyMw==", "bodyText": "done!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591964223", "createdAt": "2021-03-10T23:51:55Z", "author": {"login": "romartin"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/session/DMNEditorSessionCommandsTest.java", "diffHunk": "@@ -16,36 +16,9 @@\n \n package org.kie.workbench.common.dmn.project.client.session;\n \n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.kie.workbench.common.dmn.client.widgets.toolbar.DMNPerformAutomaticLayoutCommand;\n-import org.kie.workbench.common.dmn.project.client.session.command.SaveDiagramSessionCommand;\n-import org.kie.workbench.common.dmn.project.client.validation.DMNValidateSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ClearSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.CopySelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.CutSelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.DeleteSelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToJpgSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToPdfSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToPngSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToRawFormatSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.ExportToSvgSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.PasteSelectionSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.RedoSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.SwitchGridSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.UndoSessionCommand;\n-import org.kie.workbench.common.stunner.core.client.session.command.impl.VisitGraphSessionCommand;\n-import org.kie.workbench.common.stunner.kogito.client.session.EditorSessionCommands;\n-import org.kie.workbench.common.stunner.kogito.client.session.EditorSessionCommandsTest;\n-import org.mockito.InOrder;\n-import org.mockito.runners.MockitoJUnitRunner;\n-\n-import static org.mockito.Matchers.eq;\n-import static org.mockito.Mockito.inOrder;\n-import static org.mockito.Mockito.verify;\n-\n-@RunWith(MockitoJUnitRunner.class)\n-public class DMNEditorSessionCommandsTest extends EditorSessionCommandsTest {\n+// TODO\n+// @RunWith(MockitoJUnitRunner.class)\n+public class DMNEditorSessionCommandsTest /*extends EditorSessionCommandsTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDAyOA=="}, "originalCommit": {"oid": "1635263895eddfecc1a5ea04640f084fc208fd77"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY0NjMxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTozNzoxOVrOH4820w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzo1NjowNFrOI0iugQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3OTM3OQ==", "bodyText": "Could we have a javadoc for this class?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r529479379", "createdAt": "2020-11-24T11:37:19Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.client.widgets.editor;\n+\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.Viewer;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionDiagramPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionEditorPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionViewerPresenter;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.i18n.ClientTranslationService;\n+import org.kie.workbench.common.stunner.core.client.service.ClientRuntimeError;\n+import org.kie.workbench.common.stunner.core.client.session.ClientSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.ViewerSession;\n+import org.kie.workbench.common.stunner.core.definition.exception.DefinitionNotFoundException;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramParsingException;\n+import org.kie.workbench.common.stunner.core.i18n.CoreTranslationMessages;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.ext.widgets.common.client.ace.AceEditorMode;\n+import org.uberfire.ext.widgets.core.client.editors.texteditor.TextEditorView;\n+\n+@ApplicationScoped\n+public class StunnerEditor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1635263895eddfecc1a5ea04640f084fc208fd77"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTk2NTgyNQ==", "bodyText": "IMO Javadocs are not much useful... they get out of date constantly and most of the javadocs text is not usually helpping too much, long discussions I've seen around this.\nAnyway, maybe on other situations it's ok, but in the case for this StunnerEditor type, I think the API is really clear (open(), close(), destroy(), etc), easy to read and to use, so don't really think it's necessary to add javadocs anyway", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591965825", "createdAt": "2021-03-10T23:56:04Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java", "diffHunk": "@@ -0,0 +1,246 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.client.widgets.editor;\n+\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.Viewer;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionDiagramPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionEditorPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionViewerPresenter;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.i18n.ClientTranslationService;\n+import org.kie.workbench.common.stunner.core.client.service.ClientRuntimeError;\n+import org.kie.workbench.common.stunner.core.client.session.ClientSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.ViewerSession;\n+import org.kie.workbench.common.stunner.core.definition.exception.DefinitionNotFoundException;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramParsingException;\n+import org.kie.workbench.common.stunner.core.i18n.CoreTranslationMessages;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.ext.widgets.common.client.ace.AceEditorMode;\n+import org.uberfire.ext.widgets.core.client.editors.texteditor.TextEditorView;\n+\n+@ApplicationScoped\n+public class StunnerEditor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3OTM3OQ=="}, "originalCommit": {"oid": "1635263895eddfecc1a5ea04640f084fc208fd77"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY4NDQyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/test/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo0Nzo0M1rOH49Nhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzo1Nzo1NVrOI0ixtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NTE5MQ==", "bodyText": "Does it make sense to add some cases where opening ends in failure? For exampletestOpenFailure() ?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r529485191", "createdAt": "2020-11-24T11:47:43Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/test/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditorTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.client.widgets.editor;\n+\n+import java.util.function.Consumer;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.Viewer;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionEditorPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionViewerPresenter;\n+import org.kie.workbench.common.stunner.core.client.ManagedInstanceStub;\n+import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.i18n.ClientTranslationService;\n+import org.kie.workbench.common.stunner.core.client.service.ClientRuntimeError;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.ViewerSession;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramImpl;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramParsingException;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.kie.workbench.common.stunner.core.diagram.MetadataImpl;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.mockito.Mock;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.ext.widgets.common.client.ace.AceEditorMode;\n+import org.uberfire.ext.widgets.core.client.editors.texteditor.TextEditorView;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class StunnerEditorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1635263895eddfecc1a5ea04640f084fc208fd77"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTk2NjY0NQ==", "bodyText": "done, there exist the tests for invalid stuff, see testHandleParsingError or testHandleError", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591966645", "createdAt": "2021-03-10T23:57:55Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/test/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditorTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.client.widgets.editor;\n+\n+import java.util.function.Consumer;\n+\n+import com.google.gwt.user.client.ui.Widget;\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.Viewer;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionEditorPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionViewerPresenter;\n+import org.kie.workbench.common.stunner.core.client.ManagedInstanceStub;\n+import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.i18n.ClientTranslationService;\n+import org.kie.workbench.common.stunner.core.client.service.ClientRuntimeError;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.ViewerSession;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramImpl;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramParsingException;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.kie.workbench.common.stunner.core.diagram.MetadataImpl;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.mockito.Mock;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.ext.widgets.common.client.ace.AceEditorMode;\n+import org.uberfire.ext.widgets.core.client.editors.texteditor.TextEditorView;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyBoolean;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class StunnerEditorTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NTE5MQ=="}, "originalCommit": {"oid": "1635263895eddfecc1a5ea04640f084fc208fd77"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU1NTUyNTg1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-extensions/kie-wb-common-stunner-kogito/kie-wb-common-stunner-kogito-client/src/main/resources/org/kie/workbench/common/stunner/kogito/StunnerKogitoClient.gwt.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQxMzoxMjo1MlrOIaWRvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yNlQyMjowOTo0MVrOIas0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDQ5ODg3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ~ Copyright 2019 Red Hat, Inc. and/or its affiliates. c\n          \n          \n            \n              ~ Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n      \n    \n    \n  \n\nThere's an extra \"c\". :)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r564498877", "createdAt": "2021-01-26T13:12:52Z", "author": {"login": "caponetto"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-extensions/kie-wb-common-stunner-kogito/kie-wb-common-stunner-kogito-client/src/main/resources/org/kie/workbench/common/stunner/kogito/StunnerKogitoClient.gwt.xml", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <!--\n-  ~ Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+  ~ Copyright 2019 Red Hat, Inc. and/or its affiliates. c", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "031f11eb7e135eb3cdc5287935694670538b5d8d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDg2ODE0MQ==", "bodyText": "oops, good catch! fixing. thanks!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r564868141", "createdAt": "2021-01-26T22:09:41Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-extensions/kie-wb-common-stunner-kogito/kie-wb-common-stunner-kogito-client/src/main/resources/org/kie/workbench/common/stunner/kogito/StunnerKogitoClient.gwt.xml", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <!--\n-  ~ Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+  ~ Copyright 2019 Red Hat, Inc. and/or its affiliates. c", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDQ5ODg3Nw=="}, "originalCommit": {"oid": "031f11eb7e135eb3cdc5287935694670538b5d8d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTMwODI3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDoxMjo0N1rOIt6pKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzowMDowNFrOI0g10w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNzY0MQ==", "bodyText": "What is a status of this TODO please?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585017641", "createdAt": "2021-03-01T20:12:47Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -398,142 +311,136 @@ public void testInitialiseKieEditorForSession() {\n \n     @Test\n     public void testInitialiseKieEditorForSessionWhenInitializingKieEditorForSessionThenDiagramAlreadyLoaded() {\n-        doNothing().when(diagramEditor).superInitialiseKieEditorForSession(any());\n         final InOrder inOrder = inOrder(diagramEditor);\n-\n         diagramEditor.initialiseKieEditorForSession(diagram);\n-\n         inOrder.verify(diagramEditor).onDiagramLoad();\n         inOrder.verify(diagramEditor).superInitialiseKieEditorForSession(any());\n     }\n \n     @Test\n     public void testSetupSearchComponent() {\n-\n         diagramEditor.setupSearchComponent();\n-\n         verify(searchBarComponent).init(editorSearchIndex);\n         verify(multiPage).addTabBarWidget(searchBarComponentWidget);\n     }\n \n-    @Test\n-    public void testOnDiagramLoadWhenCanvasHandlerIsNotNull() {\n-        when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n-        when(dmnEditorSession.getCanvasHandler()).thenReturn(canvasHandler);\n-        when(canvasHandler.getDiagram()).thenReturn(diagram);\n-\n-        open();\n-\n-        verify(decisionNavigatorDock, atLeast(1)).reload();\n-        verify(expressionEditor, atLeast(1)).setToolbarStateHandler(Mockito.<DMNProjectToolbarStateHandler>any());\n-        verify(dataTypesPage, atLeast(1)).reload();\n-        verify(layoutHelper).applyLayout(diagram, layoutExecutor);\n-        verify(includedModelsPage, atLeast(1)).reload();\n-        verify(lazyCanvasFocusUtils, atLeast(1)).releaseFocus();\n-    }\n-\n-    @Test\n-    @SuppressWarnings(\"unchecked\")\n-    public void testOnDiagramLoadWhenCanvasHandlerIsNull() {\n-        diagramEditor.onDiagramLoad();\n-\n-        verify(expressionEditor, never()).setToolbarStateHandler(Mockito.<DMNProjectToolbarStateHandler>any());\n-        verify(decisionNavigatorDock, never()).reload();\n-        verify(decisionNavigatorDock, never()).open();\n-        verify(dataTypesPage, never()).reload();\n-        verify(includedModelsPage, never()).reload();\n-        verify(lazyCanvasFocusUtils, never()).releaseFocus();\n-    }\n-\n     @Test\n     public void testOnFocus() {\n-        doNothing().when(diagramEditor).superDoFocus();\n-\n+        when(stunnerEditor.isClosed()).thenReturn(false);\n         diagramEditor.onFocus();\n-\n-        verify(diagramEditor).superDoFocus();\n+        verify(stunnerEditor).focus();\n+        verify(stunnerEditor, never()).lostFocus();\n         verify(diagramEditor).onDiagramLoad();\n         verify(dataTypesPage).onFocus();\n+        verify(dataTypesPage, never()).onLostFocus();\n         verify(dataTypesPage).enableShortcuts();\n+        verify(dataTypesPage, never()).disableShortcuts();\n     }\n \n     @Test\n     public void testOnLostFocus() {\n+        when(stunnerEditor.isClosed()).thenReturn(false);\n         diagramEditor.onLostFocus();\n-\n+        verify(stunnerEditor).lostFocus();\n+        verify(stunnerEditor, never()).focus();\n         verify(dataTypesPage).onLostFocus();\n-    }\n-\n-    @Test\n-    public void testOnEditExpressionEvent() {\n-        when(editExpressionEvent.getSession()).thenReturn(dmnEditorSession);\n-        when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n-        when(dmnEditorSession.getCanvasHandler()).thenReturn(canvasHandler);\n-\n-        open();\n-\n-        diagramEditor.onEditExpressionEvent(editExpressionEvent);\n-\n-        verify(searchBarComponent).disableSearch();\n-        verify(sessionCommandManager).execute(eq(canvasHandler),\n-                                              Mockito.<NavigateToExpressionEditorCommand>any());\n+        verify(dataTypesPage, never()).onFocus();\n     }\n \n     @Test\n     public void testOnDataTypePageNavTabActiveEvent() {\n         diagramEditor.onDataTypePageNavTabActiveEvent(mock(DataTypePageTabActiveEvent.class));\n-\n         verify(multiPage).selectPage(DATA_TYPES_PAGE_INDEX);\n     }\n \n     @Test\n     public void testOnDataTypeEditModeToggleWhenEditModeIsEnabled() {\n         final DataTypeEditModeToggleEvent editModeToggleEvent = mock(DataTypeEditModeToggleEvent.class);\n-\n         doNothing().when(diagramEditor).disableMenuItem(any());\n         when(editModeToggleEvent.isEditModeEnabled()).thenReturn(true);\n-\n         diagramEditor.getOnDataTypeEditModeToggleCallback(editModeToggleEvent).onInvoke();\n-\n         verify(diagramEditor).disableMenuItem(MenuItems.SAVE);\n     }\n \n     @Test\n     public void testOnDataTypeEditModeToggleWhenEditModeIsNotEnabled() {\n         final DataTypeEditModeToggleEvent editModeToggleEvent = mock(DataTypeEditModeToggleEvent.class);\n-\n         doNothing().when(diagramEditor).enableMenuItem(any());\n         when(editModeToggleEvent.isEditModeEnabled()).thenReturn(false);\n-\n         diagramEditor.getOnDataTypeEditModeToggleCallback(editModeToggleEvent).onInvoke();\n-\n         verify(diagramEditor).enableMenuItem(MenuItems.SAVE);\n     }\n \n     @Test\n     public void testShowDocks() {\n         diagramEditor.showDocks();\n-\n         verify(decisionNavigatorDock).open();\n         verify(docks).show();\n     }\n \n     @Test\n     public void testHideDocks() {\n         diagramEditor.hideDocks();\n-\n         verify(decisionNavigatorDock).close();\n         verify(decisionNavigatorDock).resetContent();\n         verify(docks).hide();\n     }\n \n     @Override\n     public void testDocksQualifiers() {\n-        final Annotation[] qualifiers = presenter.getDockQualifiers();\n+        final Annotation[] qualifiers = diagramEditor.getDockQualifiers();\n         assertEquals(1, qualifiers.length);\n         assertEquals(DMNEditor.class, qualifiers[0].annotationType());\n     }\n \n+    /*\n+\n+   // TODO: Complete all below", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 450}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNDkzMQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591934931", "createdAt": "2021-03-10T23:00:04Z", "author": {"login": "romartin"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-project-client/src/test/java/org/kie/workbench/common/dmn/project/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -398,142 +311,136 @@ public void testInitialiseKieEditorForSession() {\n \n     @Test\n     public void testInitialiseKieEditorForSessionWhenInitializingKieEditorForSessionThenDiagramAlreadyLoaded() {\n-        doNothing().when(diagramEditor).superInitialiseKieEditorForSession(any());\n         final InOrder inOrder = inOrder(diagramEditor);\n-\n         diagramEditor.initialiseKieEditorForSession(diagram);\n-\n         inOrder.verify(diagramEditor).onDiagramLoad();\n         inOrder.verify(diagramEditor).superInitialiseKieEditorForSession(any());\n     }\n \n     @Test\n     public void testSetupSearchComponent() {\n-\n         diagramEditor.setupSearchComponent();\n-\n         verify(searchBarComponent).init(editorSearchIndex);\n         verify(multiPage).addTabBarWidget(searchBarComponentWidget);\n     }\n \n-    @Test\n-    public void testOnDiagramLoadWhenCanvasHandlerIsNotNull() {\n-        when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n-        when(dmnEditorSession.getCanvasHandler()).thenReturn(canvasHandler);\n-        when(canvasHandler.getDiagram()).thenReturn(diagram);\n-\n-        open();\n-\n-        verify(decisionNavigatorDock, atLeast(1)).reload();\n-        verify(expressionEditor, atLeast(1)).setToolbarStateHandler(Mockito.<DMNProjectToolbarStateHandler>any());\n-        verify(dataTypesPage, atLeast(1)).reload();\n-        verify(layoutHelper).applyLayout(diagram, layoutExecutor);\n-        verify(includedModelsPage, atLeast(1)).reload();\n-        verify(lazyCanvasFocusUtils, atLeast(1)).releaseFocus();\n-    }\n-\n-    @Test\n-    @SuppressWarnings(\"unchecked\")\n-    public void testOnDiagramLoadWhenCanvasHandlerIsNull() {\n-        diagramEditor.onDiagramLoad();\n-\n-        verify(expressionEditor, never()).setToolbarStateHandler(Mockito.<DMNProjectToolbarStateHandler>any());\n-        verify(decisionNavigatorDock, never()).reload();\n-        verify(decisionNavigatorDock, never()).open();\n-        verify(dataTypesPage, never()).reload();\n-        verify(includedModelsPage, never()).reload();\n-        verify(lazyCanvasFocusUtils, never()).releaseFocus();\n-    }\n-\n     @Test\n     public void testOnFocus() {\n-        doNothing().when(diagramEditor).superDoFocus();\n-\n+        when(stunnerEditor.isClosed()).thenReturn(false);\n         diagramEditor.onFocus();\n-\n-        verify(diagramEditor).superDoFocus();\n+        verify(stunnerEditor).focus();\n+        verify(stunnerEditor, never()).lostFocus();\n         verify(diagramEditor).onDiagramLoad();\n         verify(dataTypesPage).onFocus();\n+        verify(dataTypesPage, never()).onLostFocus();\n         verify(dataTypesPage).enableShortcuts();\n+        verify(dataTypesPage, never()).disableShortcuts();\n     }\n \n     @Test\n     public void testOnLostFocus() {\n+        when(stunnerEditor.isClosed()).thenReturn(false);\n         diagramEditor.onLostFocus();\n-\n+        verify(stunnerEditor).lostFocus();\n+        verify(stunnerEditor, never()).focus();\n         verify(dataTypesPage).onLostFocus();\n-    }\n-\n-    @Test\n-    public void testOnEditExpressionEvent() {\n-        when(editExpressionEvent.getSession()).thenReturn(dmnEditorSession);\n-        when(sessionManager.getCurrentSession()).thenReturn(dmnEditorSession);\n-        when(dmnEditorSession.getCanvasHandler()).thenReturn(canvasHandler);\n-\n-        open();\n-\n-        diagramEditor.onEditExpressionEvent(editExpressionEvent);\n-\n-        verify(searchBarComponent).disableSearch();\n-        verify(sessionCommandManager).execute(eq(canvasHandler),\n-                                              Mockito.<NavigateToExpressionEditorCommand>any());\n+        verify(dataTypesPage, never()).onFocus();\n     }\n \n     @Test\n     public void testOnDataTypePageNavTabActiveEvent() {\n         diagramEditor.onDataTypePageNavTabActiveEvent(mock(DataTypePageTabActiveEvent.class));\n-\n         verify(multiPage).selectPage(DATA_TYPES_PAGE_INDEX);\n     }\n \n     @Test\n     public void testOnDataTypeEditModeToggleWhenEditModeIsEnabled() {\n         final DataTypeEditModeToggleEvent editModeToggleEvent = mock(DataTypeEditModeToggleEvent.class);\n-\n         doNothing().when(diagramEditor).disableMenuItem(any());\n         when(editModeToggleEvent.isEditModeEnabled()).thenReturn(true);\n-\n         diagramEditor.getOnDataTypeEditModeToggleCallback(editModeToggleEvent).onInvoke();\n-\n         verify(diagramEditor).disableMenuItem(MenuItems.SAVE);\n     }\n \n     @Test\n     public void testOnDataTypeEditModeToggleWhenEditModeIsNotEnabled() {\n         final DataTypeEditModeToggleEvent editModeToggleEvent = mock(DataTypeEditModeToggleEvent.class);\n-\n         doNothing().when(diagramEditor).enableMenuItem(any());\n         when(editModeToggleEvent.isEditModeEnabled()).thenReturn(false);\n-\n         diagramEditor.getOnDataTypeEditModeToggleCallback(editModeToggleEvent).onInvoke();\n-\n         verify(diagramEditor).enableMenuItem(MenuItems.SAVE);\n     }\n \n     @Test\n     public void testShowDocks() {\n         diagramEditor.showDocks();\n-\n         verify(decisionNavigatorDock).open();\n         verify(docks).show();\n     }\n \n     @Test\n     public void testHideDocks() {\n         diagramEditor.hideDocks();\n-\n         verify(decisionNavigatorDock).close();\n         verify(decisionNavigatorDock).resetContent();\n         verify(docks).hide();\n     }\n \n     @Override\n     public void testDocksQualifiers() {\n-        final Annotation[] qualifiers = presenter.getDockQualifiers();\n+        final Annotation[] qualifiers = diagramEditor.getDockQualifiers();\n         assertEquals(1, qualifiers.length);\n         assertEquals(DMNEditor.class, qualifiers[0].annotationType());\n     }\n \n+    /*\n+\n+   // TODO: Complete all below", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAxNzY0MQ=="}, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 450}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTMyOTg5OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/DMNDiagramEditorView.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDoxODoxNVrOIt62IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDoxODoxNVrOIt62IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyMDk2MA==", "bodyText": "not sure if this is needed, however if yes, then 2021", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585020960", "createdAt": "2021-03-01T20:18:15Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/DMNDiagramEditorView.html", "diffHunk": "@@ -1,5 +1,5 @@\n <!--\n-  ~ Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+  ~ Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTMzMDIyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/DMNDiagramEditorView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDoxODoyMFrOIt62WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzowMDoxMlrOI0g2Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyMTAxNw==", "bodyText": "not sure if this is needed, however if yes, then 2021", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585021017", "createdAt": "2021-03-01T20:18:20Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/DMNDiagramEditorView.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNTAwMg==", "bodyText": "done", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591935002", "createdAt": "2021-03-10T23:00:12Z", "author": {"login": "romartin"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/editor/DMNDiagramEditorView.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyMTAxNw=="}, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTM1MzA3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDoyNDozOVrOIt7Egg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzowMDo0NlrOI0g3Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNDY0Mg==", "bodyText": "is this a proper year please?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585024642", "createdAt": "2021-03-01T20:24:39Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNTI3MA==", "bodyText": "done", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591935270", "createdAt": "2021-03-10T23:00:46Z", "author": {"login": "romartin"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNDY0Mg=="}, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTM1NDgwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDoyNTowOVrOIt7FqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDoyNTowOVrOIt7FqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNDkzNg==", "bodyText": "What is status of this TODO please?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585024936", "createdAt": "2021-03-01T20:25:09Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -15,98 +15,8 @@\n  */\n package org.kie.workbench.common.dmn.showcase.client.editor;\n \n-import java.util.Collections;\n+// TODO @RunWith(GwtMockitoTestRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTM1NjkzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/main/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDoyNTo0MFrOIt7G6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzowMDo1NVrOI0g3aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTI1Nw==", "bodyText": "what is status of this todo please?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585025257", "createdAt": "2021-03-01T20:25:40Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/main/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditor.java", "diffHunk": "@@ -240,9 +190,10 @@ private Path makeMetadataPath(final Metadata metadata) {\n         return PathFactory.newPath(fileName, uri + \"/\" + URIUtil.encode(fileName));\n     }\n \n+    // TODO: This was called by menus... who calls this now?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNTMzNw==", "bodyText": "resolved", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591935337", "createdAt": "2021-03-10T23:00:55Z", "author": {"login": "romartin"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/main/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditor.java", "diffHunk": "@@ -240,9 +190,10 @@ private Path makeMetadataPath(final Metadata metadata) {\n         return PathFactory.newPath(fileName, uri + \"/\" + URIUtil.encode(fileName));\n     }\n \n+    // TODO: This was called by menus... who calls this now?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTI1Nw=="}, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTM1OTUyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDoyNjoxOFrOIt7Ifw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzowMToyOFrOI0g4TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTY2Mw==", "bodyText": "will not comment this kind of change furthermore, however I am not sure if we should change the year for existing files.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585025663", "createdAt": "2021-03-01T20:26:18Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNTU2NA==", "bodyText": "done", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591935564", "createdAt": "2021-03-10T23:01:28Z", "author": {"login": "romartin"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTY2Mw=="}, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTM2MDQ5OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDoyNjozNFrOIt7JKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzowMTo0N1rOI0g44w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTgzMg==", "bodyText": "what is a status of this todo please?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585025832", "createdAt": "2021-03-01T20:26:34Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -15,251 +15,7 @@\n  */\n package org.kie.workbench.common.dmn.showcase.client.editor;\n \n-import com.google.gwtmockito.GwtMockitoTestRunner;\n-import elemental2.dom.HTMLElement;\n-import org.appformer.client.context.EditorContextProvider;\n-import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.kie.workbench.common.dmn.client.editors.types.listview.common.DataTypeEditModeToggleEvent;\n-import org.kie.workbench.common.dmn.showcase.client.navigator.DMNVFSService;\n-import org.kie.workbench.common.dmn.webapp.kogito.common.client.editor.AbstractDMNDiagramEditor;\n-import org.kie.workbench.common.dmn.webapp.kogito.common.client.editor.AbstractDMNDiagramEditorTest;\n-import org.kie.workbench.common.stunner.core.client.canvas.util.CanvasFileExport;\n-import org.kie.workbench.common.stunner.core.client.service.ServiceCallback;\n-import org.kie.workbench.common.stunner.kogito.client.PromiseMock;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.Captor;\n-import org.mockito.Mock;\n-import org.uberfire.backend.vfs.Path;\n-import org.uberfire.client.promise.Promises;\n-import org.uberfire.ext.editor.commons.client.file.popups.CopyPopUpPresenter;\n-import org.uberfire.ext.editor.commons.client.file.popups.DeletePopUpPresenter;\n-import org.uberfire.ext.editor.commons.client.file.popups.RenamePopUpPresenter;\n-import org.uberfire.ext.editor.commons.client.menu.BasicFileMenuBuilderImpl;\n-import org.uberfire.ext.editor.commons.client.menu.RestoreVersionCommandProvider;\n-import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n-import org.uberfire.mvp.Command;\n-import org.uberfire.mvp.PlaceRequest;\n-import org.uberfire.promise.SyncPromises;\n-import org.uberfire.util.URIUtil;\n-import org.uberfire.workbench.events.NotificationEvent;\n-import org.uberfire.workbench.model.menu.MenuItem;\n+// TODO @RunWith(GwtMockitoTestRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNTcxNQ==", "bodyText": "rolled-back and fixed, done!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591935715", "createdAt": "2021-03-10T23:01:47Z", "author": {"login": "romartin"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-testing/src/test/java/org/kie/workbench/common/dmn/showcase/client/editor/DMNDiagramEditorTest.java", "diffHunk": "@@ -15,251 +15,7 @@\n  */\n package org.kie.workbench.common.dmn.showcase.client.editor;\n \n-import com.google.gwtmockito.GwtMockitoTestRunner;\n-import elemental2.dom.HTMLElement;\n-import org.appformer.client.context.EditorContextProvider;\n-import org.jboss.errai.common.client.ui.ElementWrapperWidget;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.kie.workbench.common.dmn.client.editors.types.listview.common.DataTypeEditModeToggleEvent;\n-import org.kie.workbench.common.dmn.showcase.client.navigator.DMNVFSService;\n-import org.kie.workbench.common.dmn.webapp.kogito.common.client.editor.AbstractDMNDiagramEditor;\n-import org.kie.workbench.common.dmn.webapp.kogito.common.client.editor.AbstractDMNDiagramEditorTest;\n-import org.kie.workbench.common.stunner.core.client.canvas.util.CanvasFileExport;\n-import org.kie.workbench.common.stunner.core.client.service.ServiceCallback;\n-import org.kie.workbench.common.stunner.kogito.client.PromiseMock;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.Captor;\n-import org.mockito.Mock;\n-import org.uberfire.backend.vfs.Path;\n-import org.uberfire.client.promise.Promises;\n-import org.uberfire.ext.editor.commons.client.file.popups.CopyPopUpPresenter;\n-import org.uberfire.ext.editor.commons.client.file.popups.DeletePopUpPresenter;\n-import org.uberfire.ext.editor.commons.client.file.popups.RenamePopUpPresenter;\n-import org.uberfire.ext.editor.commons.client.menu.BasicFileMenuBuilderImpl;\n-import org.uberfire.ext.editor.commons.client.menu.RestoreVersionCommandProvider;\n-import org.uberfire.ext.widgets.common.client.common.BusyIndicatorView;\n-import org.uberfire.mvp.Command;\n-import org.uberfire.mvp.PlaceRequest;\n-import org.uberfire.promise.SyncPromises;\n-import org.uberfire.util.URIUtil;\n-import org.uberfire.workbench.events.NotificationEvent;\n-import org.uberfire.workbench.model.menu.MenuItem;\n+// TODO @RunWith(GwtMockitoTestRunner.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyNTgzMg=="}, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTM4Mzc3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDozMjozOVrOIt7Xdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzowNzoyOFrOI0hDrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyOTQ5NA==", "bodyText": "is getCanvasHandler() always non null? asking because it is a public method (without a javadoc or a assertion) and we always call some other method in a fluent API way.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585029494", "createdAt": "2021-03-01T20:32:39Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.client.widgets.editor;\n+\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.Viewer;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionDiagramPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionEditorPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionViewerPresenter;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.i18n.ClientTranslationService;\n+import org.kie.workbench.common.stunner.core.client.service.ClientRuntimeError;\n+import org.kie.workbench.common.stunner.core.client.session.ClientSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.ViewerSession;\n+import org.kie.workbench.common.stunner.core.definition.exception.DefinitionNotFoundException;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramParsingException;\n+import org.kie.workbench.common.stunner.core.i18n.CoreTranslationMessages;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.ext.widgets.common.client.ace.AceEditorMode;\n+import org.uberfire.ext.widgets.core.client.editors.texteditor.TextEditorView;\n+\n+@Dependent\n+public class StunnerEditor {\n+\n+    private final ManagedInstance<SessionEditorPresenter<EditorSession>> editorSessionPresenterInstances;\n+    private final ManagedInstance<SessionViewerPresenter<ViewerSession>> viewerSessionPresenterInstances;\n+    private final ClientTranslationService translationService;\n+    private final ManagedInstance<TextEditorView> xmlEditorViews;\n+    private final ErrorPopupPresenter errorPopupPresenter;\n+    private final StunnerEditorView view;\n+\n+    private SessionDiagramPresenter diagramPresenter;\n+    private TextEditorView xmlEditorView;\n+    private boolean isReadOnly;\n+    private Consumer<DiagramParsingException> parsingExceptionProcessor;\n+    private Consumer<Throwable> exceptionProcessor;\n+    private Consumer<Integer> onResetContentHashProcessor;\n+    private int contentHash;\n+\n+    // CDI proxy.\n+    public StunnerEditor() {\n+        this(null, null, null, null, null, null);\n+    }\n+\n+    @Inject\n+    public StunnerEditor(ManagedInstance<SessionEditorPresenter<EditorSession>> editorSessionPresenterInstances,\n+                         ManagedInstance<SessionViewerPresenter<ViewerSession>> viewerSessionPresenterInstances,\n+                         ClientTranslationService translationService,\n+                         ManagedInstance<TextEditorView> xmlEditorViews,\n+                         ErrorPopupPresenter errorPopupPresenter,\n+                         StunnerEditorView view) {\n+        this.editorSessionPresenterInstances = editorSessionPresenterInstances;\n+        this.viewerSessionPresenterInstances = viewerSessionPresenterInstances;\n+        this.translationService = translationService;\n+        this.xmlEditorViews = xmlEditorViews;\n+        this.errorPopupPresenter = errorPopupPresenter;\n+        this.isReadOnly = false;\n+        this.view = view;\n+        this.parsingExceptionProcessor = e -> {\n+        };\n+        this.exceptionProcessor = e -> {\n+        };\n+        this.onResetContentHashProcessor = e -> {\n+        };\n+    }\n+\n+    public void setReadOnly(boolean readOnly) {\n+        isReadOnly = readOnly;\n+    }\n+\n+    public void setOnResetContentHashProcessor(Consumer<Integer> onResetContentHashProcessor) {\n+        this.onResetContentHashProcessor = onResetContentHashProcessor;\n+    }\n+\n+    public void setParsingExceptionProcessor(Consumer<DiagramParsingException> parsingExceptionProcessor) {\n+        this.parsingExceptionProcessor = parsingExceptionProcessor;\n+    }\n+\n+    public void setExceptionProcessor(Consumer<Throwable> exceptionProcessor) {\n+        this.exceptionProcessor = exceptionProcessor;\n+    }\n+\n+    public void open(final Diagram diagram,\n+                     final Viewer.Callback callback) {\n+        // Close in case any diagram already being opened.\n+        close();\n+        // Instantiate.\n+        if (!isReadOnly) {\n+            diagramPresenter = editorSessionPresenterInstances.get();\n+        } else {\n+            diagramPresenter = viewerSessionPresenterInstances.get();\n+        }\n+        diagramPresenter.displayNotifications(type -> true);\n+        diagramPresenter.withPalette(!isReadOnly);\n+        diagramPresenter.withToolbar(false);\n+        view.setWidget(diagramPresenter.getView());\n+        // Open.\n+        diagramPresenter.open(diagram, new SessionPresenter.SessionPresenterCallback() {\n+            @Override\n+            public void onSuccess() {\n+                callback.onSuccess();\n+                resetContentHash();\n+            }\n+\n+            @Override\n+            public void onError(ClientRuntimeError error) {\n+                handleError(error);\n+                callback.onError(error);\n+            }\n+        });\n+    }\n+\n+    public int getCurrentContentHash() {\n+        if (isXmlEditorEnabled()) {\n+            return xmlEditorView.getContent().hashCode();\n+        }\n+        if (null == getSession()) {\n+            return 0;\n+        }\n+        if (null == getCanvasHandler().getDiagram()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzODQ3Ng==", "bodyText": "well if the session is present, this class assumes the canvasHandler will be akways not null, as this class manages the session and the presenters and keeps both up to date. From the API perspective, if you call getCanvasHandler() it could be null or even throw a NPE, but because there is no session also", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591938476", "createdAt": "2021-03-10T23:07:28Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-widgets/src/main/java/org/kie/workbench/common/stunner/client/widgets/editor/StunnerEditor.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.client.widgets.editor;\n+\n+import java.util.function.Consumer;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import com.google.gwt.core.client.Scheduler;\n+import com.google.gwt.user.client.ui.IsWidget;\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.Viewer;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionDiagramPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.SessionPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionEditorPresenter;\n+import org.kie.workbench.common.stunner.client.widgets.presenters.session.impl.SessionViewerPresenter;\n+import org.kie.workbench.common.stunner.core.client.canvas.CanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.i18n.ClientTranslationService;\n+import org.kie.workbench.common.stunner.core.client.service.ClientRuntimeError;\n+import org.kie.workbench.common.stunner.core.client.session.ClientSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+import org.kie.workbench.common.stunner.core.client.session.impl.ViewerSession;\n+import org.kie.workbench.common.stunner.core.definition.exception.DefinitionNotFoundException;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.diagram.DiagramParsingException;\n+import org.kie.workbench.common.stunner.core.i18n.CoreTranslationMessages;\n+import org.uberfire.client.workbench.widgets.common.ErrorPopupPresenter;\n+import org.uberfire.ext.widgets.common.client.ace.AceEditorMode;\n+import org.uberfire.ext.widgets.core.client.editors.texteditor.TextEditorView;\n+\n+@Dependent\n+public class StunnerEditor {\n+\n+    private final ManagedInstance<SessionEditorPresenter<EditorSession>> editorSessionPresenterInstances;\n+    private final ManagedInstance<SessionViewerPresenter<ViewerSession>> viewerSessionPresenterInstances;\n+    private final ClientTranslationService translationService;\n+    private final ManagedInstance<TextEditorView> xmlEditorViews;\n+    private final ErrorPopupPresenter errorPopupPresenter;\n+    private final StunnerEditorView view;\n+\n+    private SessionDiagramPresenter diagramPresenter;\n+    private TextEditorView xmlEditorView;\n+    private boolean isReadOnly;\n+    private Consumer<DiagramParsingException> parsingExceptionProcessor;\n+    private Consumer<Throwable> exceptionProcessor;\n+    private Consumer<Integer> onResetContentHashProcessor;\n+    private int contentHash;\n+\n+    // CDI proxy.\n+    public StunnerEditor() {\n+        this(null, null, null, null, null, null);\n+    }\n+\n+    @Inject\n+    public StunnerEditor(ManagedInstance<SessionEditorPresenter<EditorSession>> editorSessionPresenterInstances,\n+                         ManagedInstance<SessionViewerPresenter<ViewerSession>> viewerSessionPresenterInstances,\n+                         ClientTranslationService translationService,\n+                         ManagedInstance<TextEditorView> xmlEditorViews,\n+                         ErrorPopupPresenter errorPopupPresenter,\n+                         StunnerEditorView view) {\n+        this.editorSessionPresenterInstances = editorSessionPresenterInstances;\n+        this.viewerSessionPresenterInstances = viewerSessionPresenterInstances;\n+        this.translationService = translationService;\n+        this.xmlEditorViews = xmlEditorViews;\n+        this.errorPopupPresenter = errorPopupPresenter;\n+        this.isReadOnly = false;\n+        this.view = view;\n+        this.parsingExceptionProcessor = e -> {\n+        };\n+        this.exceptionProcessor = e -> {\n+        };\n+        this.onResetContentHashProcessor = e -> {\n+        };\n+    }\n+\n+    public void setReadOnly(boolean readOnly) {\n+        isReadOnly = readOnly;\n+    }\n+\n+    public void setOnResetContentHashProcessor(Consumer<Integer> onResetContentHashProcessor) {\n+        this.onResetContentHashProcessor = onResetContentHashProcessor;\n+    }\n+\n+    public void setParsingExceptionProcessor(Consumer<DiagramParsingException> parsingExceptionProcessor) {\n+        this.parsingExceptionProcessor = parsingExceptionProcessor;\n+    }\n+\n+    public void setExceptionProcessor(Consumer<Throwable> exceptionProcessor) {\n+        this.exceptionProcessor = exceptionProcessor;\n+    }\n+\n+    public void open(final Diagram diagram,\n+                     final Viewer.Callback callback) {\n+        // Close in case any diagram already being opened.\n+        close();\n+        // Instantiate.\n+        if (!isReadOnly) {\n+            diagramPresenter = editorSessionPresenterInstances.get();\n+        } else {\n+            diagramPresenter = viewerSessionPresenterInstances.get();\n+        }\n+        diagramPresenter.displayNotifications(type -> true);\n+        diagramPresenter.withPalette(!isReadOnly);\n+        diagramPresenter.withToolbar(false);\n+        view.setWidget(diagramPresenter.getView());\n+        // Open.\n+        diagramPresenter.open(diagram, new SessionPresenter.SessionPresenterCallback() {\n+            @Override\n+            public void onSuccess() {\n+                callback.onSuccess();\n+                resetContentHash();\n+            }\n+\n+            @Override\n+            public void onError(ClientRuntimeError error) {\n+                handleError(error);\n+                callback.onError(error);\n+            }\n+        });\n+    }\n+\n+    public int getCurrentContentHash() {\n+        if (isXmlEditorEnabled()) {\n+            return xmlEditorView.getContent().hashCode();\n+        }\n+        if (null == getSession()) {\n+            return 0;\n+        }\n+        if (null == getCanvasHandler().getDiagram()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTAyOTQ5NA=="}, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY5MTQ4MzQwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-extensions/kie-wb-common-stunner-kogito/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQyMDo1ODo1OFrOIt8ToA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0xMFQyMzowMzo0MVrOI0g8TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTA0NDg5Ng==", "bodyText": "Maybe such comment should be also in a pom.xml", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r585044896", "createdAt": "2021-03-01T20:58:58Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-extensions/kie-wb-common-stunner-kogito/README.md", "diffHunk": "@@ -1,5 +1,6 @@\n Stunner - Kogito integration modules\n =======================================\n \n-These children modules provide the different assets and services to achieve the Stunner integration with the Kogito \n-initiative.\n\\ No newline at end of file\n+These children modules provide the different assets and services to achieve the Stunner integration with Kogito.\n+\n+PLEASE DO NOT turn this module into a dependency for Business Central, it's ONLY targeting Kogito space. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTkzNjU4OA==", "bodyText": "what you mean? The goal for this POM module is just to have everything related to kogito, so just added a comment. Not sure if exist some proper and safe way to avoid adding code insided this module which depends on BC...", "url": "https://github.com/kiegroup/kie-wb-common/pull/3498#discussion_r591936588", "createdAt": "2021-03-10T23:03:41Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-extensions/kie-wb-common-stunner-kogito/README.md", "diffHunk": "@@ -1,5 +1,6 @@\n Stunner - Kogito integration modules\n =======================================\n \n-These children modules provide the different assets and services to achieve the Stunner integration with the Kogito \n-initiative.\n\\ No newline at end of file\n+These children modules provide the different assets and services to achieve the Stunner integration with Kogito.\n+\n+PLEASE DO NOT turn this module into a dependency for Business Central, it's ONLY targeting Kogito space. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTA0NDg5Ng=="}, "originalCommit": {"oid": "b1c88bf7f7d5e2b1e4e1009ae1c7e7306c43c831"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1211, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}