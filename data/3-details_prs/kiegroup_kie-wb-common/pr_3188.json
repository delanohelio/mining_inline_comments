{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNDg5NzM1", "number": 3188, "title": "KOGITO-1219: Forms - Ability to flush the form state into the model on demand", "bodyText": "Adding to DynamicFormRenderer the ability of flushing changes on UI to the model on demand.\n@adrielparedes @caponetto  would you mind take a look?", "createdAt": "2020-02-26T20:29:21Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188", "merged": true, "mergeCommit": {"oid": "2affb2482cec267c713dba77a1b58b37630d656d"}, "closed": true, "closedAt": "2020-02-28T13:46:22Z", "author": {"login": "pefernan"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIMu3yAH2gAyMzgwNDg5NzM1OjhkMmE1Y2M5OTE5MzYzNjhlMjBjNmJlNTFkNGNjZjFlODdmNzVjZjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIt48SAFqTM2NjMxOTYxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8d2a5cc991936368e20c6be51d4ccf1e87f75cf7", "committedDate": "2020-02-26T20:27:32Z", "message": "KOGITO-1219: Forms - Ability to flush the form state into the model on demand"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NDYwMzY4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#pullrequestreview-365460368", "createdAt": "2020-02-27T07:27:39Z", "commit": {"oid": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzoyNzozOVrOFvHk3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwNzo0OTo0OVrOFvIDaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MTUxNw==", "bodyText": "minor: official kiegroup formatting would be: if (isInitialized()) {", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384951517", "createdAt": "2020-02-27T07:27:39Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-forms/kie-wb-common-dynamic-forms/kie-wb-common-dynamic-forms-client/src/main/java/org/kie/workbench/common/forms/dynamic/client/DynamicFormRenderer.java", "diffHunk": "@@ -247,6 +247,12 @@ public Form getCurrentForm() {\n         return null;\n     }\n \n+    public void flush() {\n+        if(isInitialized()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1MjY2OQ==", "bodyText": "Could we add javadoc as it is an interface?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384952669", "createdAt": "2020-02-27T07:30:58Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/FormHandler.java", "diffHunk": "@@ -138,4 +138,7 @@\n     void setReadOnly(boolean readOnly);\n \n     Form getForm();\n+\n+    void maybeFlush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NDc2MQ==", "bodyText": "Wr could add short java doc, maybe not what is flush but what classes are intended to implement it ?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384954761", "createdAt": "2020-02-27T07:37:24Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/NeedsFlush.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.forms.processing.engine.handling;\n+\n+public interface NeedsFlush {\n+\n+    void flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NzIxNA==", "bodyText": "Not sure where to comment, but we should simplify the setUp variants to have just two (because of the passed values):\n@Override\n    public void setUp(DataBinder<T> binder) {\n        Assert.notNull(\"DataBinder cannot be null\",\n                       binder);\n\n        clear();\n\n        this.form = new Form();\n\n        this.binder = binder;\n    }\n\n    @Override\n    public void setUp(T model) {\n        Assert.notNull(\"Model cannot be null\",\n                       model);\n\n        setUp(getBinderForModel(model));\n    }", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384957214", "createdAt": "2020-02-27T07:44:05Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java", "diffHunk": "@@ -37,6 +37,7 @@\n import org.kie.workbench.common.forms.processing.engine.handling.FormHandler;\n import org.kie.workbench.common.forms.processing.engine.handling.FormValidator;\n import org.kie.workbench.common.forms.processing.engine.handling.IsNestedModel;\n+import org.kie.workbench.common.forms.processing.engine.handling.NeedsFlush;\n \n public class FormHandlerImpl<T> implements FormHandler<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1NzY3OA==", "bodyText": "minor: official kiegroup formatting is: if (enabledOnChangeValidations) {", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384957678", "createdAt": "2020-02-27T07:45:32Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java", "diffHunk": "@@ -140,17 +144,26 @@ public void registerInput(FormField formField,\n \n         if (widget instanceof IsNestedModel) {\n             IsNestedModel nestedModelWidget = (IsNestedModel) widget;\n-            nestedModelWidget.addFieldChangeHandler((childFieldName, newValue) -> fieldChangeManager.notifyFieldChange(fieldName + \".\" + childFieldName,\n-                                                                                                                       newValue));\n+            nestedModelWidget.addFieldChangeHandler((nestedFieldName, newValue) -> notifyFieldChange(formField.getFieldName() + \".\" + nestedFieldName, newValue));\n         } else {\n             PropertyChangeUnsubscribeHandle unsubscribeHandle = binder.addPropertyChangeHandler(formField.getFieldBinding(),\n-                                                                                                event -> fieldChangeManager.processFieldChange(fieldName,\n-                                                                                                                                               event.getNewValue(),\n-                                                                                                                                               binder.getModel()));\n+                                                                                                event -> processFieldChange(formField, event.getNewValue()));\n             unsubscribeHandlers.add(unsubscribeHandle);\n         }\n     }\n \n+    protected void notifyFieldChange(String fieldName, Object newValue) {\n+        fieldChangeManager.notifyFieldChange(fieldName, newValue);\n+    }\n+\n+    protected void processFieldChange(FormField formField, Object newValue) {\n+        if(enabledOnChangeValidations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1ODI3NQ==", "bodyText": "minor: kiegrooup formatting", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384958275", "createdAt": "2020-02-27T07:47:04Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java", "diffHunk": "@@ -239,7 +252,51 @@ public void clear() {\n         form = null;\n     }\n \n+    private void flushNestedForms() {\n+        form.getFields().stream()\n+                .filter(formField -> formField.getWidget() instanceof NeedsFlush)\n+                .map(formField -> (NeedsFlush) formField.getWidget())\n+                .forEach(NeedsFlush::flush);\n+    }\n+\n+    @Override\n+    public void maybeFlush() {\n+\n+        if(binder == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTMzNg==", "bodyText": "no methods seems be throwing exception, can't be as below?:\n            flushNestedForms();\n\n            BindableProxy<T> proxy = (BindableProxy<T>) getModel();\n\n            T model = proxy.deepUnwrap();\n\n            T backupModel = proxy.deepUnwrap();\n\n            binder.setModel(model, StateSync.FROM_UI, true);\n\n            if (!validate()) {\n                binder.setModel(backupModel, StateSync.FROM_MODEL, true);\n                validate();\n            }\n        \n            setEnabledOnChangeValidations(true);", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#discussion_r384959336", "createdAt": "2020-02-27T07:49:49Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-forms/kie-wb-common-forms-commons/kie-wb-common-forms-processing-engine/src/main/java/org/kie/workbench/common/forms/processing/engine/handling/impl/FormHandlerImpl.java", "diffHunk": "@@ -239,7 +252,51 @@ public void clear() {\n         form = null;\n     }\n \n+    private void flushNestedForms() {\n+        form.getFields().stream()\n+                .filter(formField -> formField.getWidget() instanceof NeedsFlush)\n+                .map(formField -> (NeedsFlush) formField.getWidget())\n+                .forEach(NeedsFlush::flush);\n+    }\n+\n+    @Override\n+    public void maybeFlush() {\n+\n+        if(binder == null) {\n+            return;\n+        }\n+\n+        setEnabledOnChangeValidations(false);\n+\n+        try {\n+            flushNestedForms();\n+\n+            BindableProxy<T> proxy = (BindableProxy<T>) getModel();\n+\n+            T model = proxy.deepUnwrap();\n+\n+            T backupModel = proxy.deepUnwrap();\n+\n+            binder.setModel(model, StateSync.FROM_UI, true);\n+\n+            if (!validate()) {\n+                binder.setModel(backupModel, StateSync.FROM_MODEL, true);\n+                validate();\n+            }\n+        } finally {\n+            setEnabledOnChangeValidations(true);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2a5cc991936368e20c6be51d4ccf1e87f75cf7"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58c19c808a6ff9444d5199d6de96f2bdf894629f", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/58c19c808a6ff9444d5199d6de96f2bdf894629f", "committedDate": "2020-02-27T10:09:38Z", "message": "- Code improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NTU5ODgx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#pullrequestreview-365559881", "createdAt": "2020-02-27T10:15:17Z", "commit": {"oid": "58c19c808a6ff9444d5199d6de96f2bdf894629f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d496fd6ccb41e5e089935ab03a026976a409c49d", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d496fd6ccb41e5e089935ab03a026976a409c49d", "committedDate": "2020-02-27T16:20:16Z", "message": "- Fixed Test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDMzMTYw", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#pullrequestreview-366033160", "createdAt": "2020-02-27T22:05:18Z", "commit": {"oid": "d496fd6ccb41e5e089935ab03a026976a409c49d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MzE5NjE4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3188#pullrequestreview-366319618", "createdAt": "2020-02-28T11:05:24Z", "commit": {"oid": "d496fd6ccb41e5e089935ab03a026976a409c49d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 740, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}