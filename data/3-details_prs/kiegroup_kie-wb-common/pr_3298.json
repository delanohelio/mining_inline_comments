{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MDI4Mjkx", "number": 3298, "title": "KOGITO-1508: Add initial selenium tests for kogito bpmn client", "bodyText": "@hasys @romartin please take a look at this. I have more tests in progress, but I keep getting fails\nin these 3 smoke tests so I decided to bring this up to more eyes.\nThey use index.html and JS execution to load up the editor.\nAs of now 2 will fails with following reasons:\n\n\ntestInvalidContent fails because there is dialog with unreasonable message shown to user.\nReported here: https://issues.redhat.com/browse/KOGITO-2147\n\n\ntestBasicModel fails because upon reopening a diagram, some of it's id attributes are changed to different values.\nReported here: https://issues.redhat.com/browse/KOGITO-1795\n\n\nTo run locally, build kogito-client and run mvn verify -Pkogito-it-tests (omit clean to keep target folder with the editor)", "createdAt": "2020-05-11T10:56:26Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298", "merged": true, "mergeCommit": {"oid": "9df533939b462f8ca3af6b6b2283eca1b89ddde4"}, "closed": true, "closedAt": "2020-08-18T06:54:13Z", "author": {"login": "domhanak"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgNkXqgFqTQwOTA2OTk1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7nnDVAFqTQ2MDg3NjI0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MDY5OTU5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#pullrequestreview-409069959", "createdAt": "2020-05-11T11:00:08Z", "commit": {"oid": "4e40a21eb695d20d7b32efac675b98ec648f180b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTowMDowOFrOGTXX2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTowMDowOFrOGTXX2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk1OTA2NQ==", "bodyText": "@romartin @hasys  the editor is not showing upon opening the index.html and only way to make it show was to include these two lines. Removing one of them prevents the tests from seeing the editor.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#discussion_r422959065", "createdAt": "2020-05-11T11:00:08Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/test/java/org/kie/workbench/common/stunner/kogito/client/selenium/BPMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.kogito.client.selenium;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import io.github.bonigarcia.wdm.WebDriverManager;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.JavascriptExecutor;\n+import org.openqa.selenium.OutputType;\n+import org.openqa.selenium.TakesScreenshot;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.firefox.FirefoxOptions;\n+import org.openqa.selenium.support.ui.ExpectedCondition;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xmlunit.assertj.XmlAssert;\n+\n+import static org.apache.commons.io.FileUtils.copyFile;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.openqa.selenium.By.className;\n+import static org.openqa.selenium.By.xpath;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOfElementLocated;\n+\n+public class BPMNDesignerKogitoSeleniumIT {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BPMNDesignerKogitoSeleniumIT.class);\n+\n+    private static final String SET_CONTENT_TEMPLATE =\n+            \"gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().setContent(\\\"\\\", '%s')\";\n+    private static final String GET_CONTENT_TEMPLATE =\n+            \"return gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().getContent()\";\n+\n+\n+    private static final String INDEX_HTML = \"target/kie-wb-common-stunner-bpmn-kogito-runtime/index.html\";\n+    private static final String INDEX_HTML_PATH = \"file:///\" + new File(INDEX_HTML).getAbsolutePath();\n+\n+\n+\n+    private static final String NOT_PRESENT_IN_NAVIGATOR = \"' was not present in the process navigator\";\n+    private static final String PROPERTIES_PANEL = \"qe-docks-item-E-DiagramEditorPropertiesScreen\";\n+    private static final String DIAGRAM_EXPLORER = \"qe-docks-item-E-ProjectDiagramExplorerScreen\";\n+    private static final String DIAGRAM_EXPLORER_EXPANDED = \"qe-docks-bar-expanded-E\";\n+    private static final String DIAGRAM_PANEL = \"qe-static-workbench-panel-view\";\n+    private static final String ACE_EDITOR = \"//div[@class='ace_content']\";\n+    private static final String PALETTE = \"//div[@data-field=\\\"kie-palette\\\"]\";\n+    private static final String PALETTE_START_EVENTS_CATEGORY_BUTTON = \"//button[@data-field='categoryItem', @title=`Start Events`]\";\n+    private static final String ERROR_MODAL_DIALOG = \"//div[@class='modal-dialog']\";\n+    private static final String ERROR_MODAL_BODY = \"//div[@class='modal-body']\";\n+\n+    private static final String CREATE_NEW_DIAGRAM_BUTTON = \"//input[@value=\\\"Create new Diagram\\\"]\";\n+\n+    private static final String PROCESS_NODE = \"//div[@data-field='explorerPanelBody']//a[text()='%s']\";\n+\n+    private static final Boolean HEADLESS = Boolean.valueOf(System.getProperty(\"org.kie.bpmn.kogito.browser.headless\"));\n+    private static final String SCREENSHOTS_DIR = System.getProperty(\"org.kie.bpmn.kogito.screenshots.dir\");\n+\n+    /**\n+     * Selenium web driver\n+     */\n+    private WebDriver driver;\n+\n+    /**\n+     * Properties panel of BPMN Designer\n+     */\n+    private WebElement propertiesPanel;\n+\n+    /**\n+     * Start events category button in Palette\n+     */\n+    private WebElement paletteStartEventCategory;\n+\n+    /**\n+     * Explore diagram panel of BPMN Designer\n+     */\n+    private WebElement bpmnDesignerExplorerButton;\n+\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        WebDriverManager.firefoxdriver().setup();\n+    }\n+\n+    @Before\n+    public void openBPMNDesigner() {\n+        final FirefoxOptions firefoxOptions = new FirefoxOptions();\n+        firefoxOptions.setHeadless(HEADLESS);\n+        driver = new FirefoxDriver(firefoxOptions);\n+        driver.manage().window().maximize();\n+\n+        driver.get(INDEX_HTML_PATH);\n+\n+        // init diagram to initial state to see if we can load properties panel and diagram explorer\n+        setContent(\"\");\n+       ((JavascriptExecutor) driver).executeScript(String.format(SET_CONTENT_TEMPLATE, \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e40a21eb695d20d7b32efac675b98ec648f180b"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MDg4ODM2", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#pullrequestreview-409088836", "createdAt": "2020-05-11T11:31:31Z", "commit": {"oid": "4e40a21eb695d20d7b32efac675b98ec648f180b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTozMTozMlrOGTYVeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTozMTozMlrOGTYVeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NDg0MQ==", "bodyText": "@hasys this id changes every time we open the process. Is that expected?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#discussion_r422974841", "createdAt": "2020-05-11T11:31:32Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/test/resources/org/kie/workbench/common/stunner/kogito/client/selenium/basic-process.bpmn2", "diffHunk": "@@ -0,0 +1,102 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<bpmn2:definitions id=\"_hImTMHArEDiY0b-88EQFvg\" exporter=\"jBPM Process Modeler\" exporterVersion=\"2.0\" targetNamespace=\"http://www.omg.org/bpmn20\" xmlns:bpmn2=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:bpsim=\"http://www.bpsim.org/schemas/1.0\" xmlns:dc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:di=\"http://www.omg.org/spec/DD/20100524/DI\" xmlns:drools=\"http://www.jboss.org/drools\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e40a21eb695d20d7b32efac675b98ec648f180b"}, "originalPosition": 2}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac126a570bbfd876f7cadd946f35c9928d083b6a", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/ac126a570bbfd876f7cadd946f35c9928d083b6a", "committedDate": "2020-05-11T13:47:19Z", "message": "Add workaround for KOGITO-1795"}, "afterCommit": {"oid": "26775be0bfccff201dbfd55ddc83b62ab99f748f", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/26775be0bfccff201dbfd55ddc83b62ab99f748f", "committedDate": "2020-05-12T05:38:02Z", "message": "Add workaround for KOGITO-1795"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26775be0bfccff201dbfd55ddc83b62ab99f748f", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/26775be0bfccff201dbfd55ddc83b62ab99f748f", "committedDate": "2020-05-12T05:38:02Z", "message": "Add workaround for KOGITO-1795"}, "afterCommit": {"oid": "46f62c9dd787200ae0152e4bef57316e45fb727d", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/46f62c9dd787200ae0152e4bef57316e45fb727d", "committedDate": "2020-05-18T11:46:21Z", "message": "Add workaround for KOGITO-1795"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTczMzc2", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#pullrequestreview-416573376", "createdAt": "2020-05-22T00:17:24Z", "commit": {"oid": "46f62c9dd787200ae0152e4bef57316e45fb727d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzA2ODAx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#pullrequestreview-434706801", "createdAt": "2020-06-22T08:26:53Z", "commit": {"oid": "6e871d89dbdd3ea15e49c075acdc224ce090616e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8899d077afad05fa6fc37207986168d5a27a944f", "author": {"user": {"login": "vpellegrino", "name": "Valentino Pellegrino"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8899d077afad05fa6fc37207986168d5a27a944f", "committedDate": "2020-06-22T08:33:54Z", "message": "DROOLS-3685: [DMN Designer] Boxed expressions - Decision Table - Output clause - Creating Decision Table, sub-columns are auto-created for structured type (#3316)\n\n* Using clauseRequirement for both input and output\r\n\r\n* Reordering constructors + static class\r\n\r\n* Implemented core logic\r\n\r\n* Constants in test\r\n\r\n* Refactoring output clauses building\r\n\r\n* When one subfield is an \"inner\" structure, ANY should be shown for it\r\n\r\n* Manipulating output entries in a separate method\r\n\r\n* Simplify code, by using existing method\r\n\r\n* Using Objects.equals to avoid NPE\r\n\r\n* Correcting name in case of data type related to an imported model\r\n\r\n* Fixing test due to code changes\r\n\r\n* Fixing case when decision table is included in context\r\n\r\n* Fixing tests for case when decision table is included in context\r\n\r\n* BKM should be set as parent of its encapsulated logic\r\n\r\n* Fixing case when decision table is included in BKM function"}, "afterCommit": {"oid": "3a5e7f996e3db6e05b970fc29062fdc8447f2abe", "author": {"user": {"login": "jomarko", "name": "Jozef Marko"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3a5e7f996e3db6e05b970fc29062fdc8447f2abe", "committedDate": "2020-06-22T08:35:46Z", "message": "KOGITO-1508: Fix test precondition wait"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MDg3ODQy", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#pullrequestreview-439087842", "createdAt": "2020-06-29T12:24:30Z", "commit": {"oid": "3a5e7f996e3db6e05b970fc29062fdc8447f2abe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNDozMVrOGqOZVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoyNDozMVrOGqOZVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyOTIzNg==", "bodyText": "This test should pass already.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#discussion_r446929236", "createdAt": "2020-06-29T12:24:31Z", "author": {"login": "hasys"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/test/java/org/kie/workbench/common/stunner/kogito/client/selenium/BPMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -0,0 +1,306 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.kogito.client.selenium;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import io.github.bonigarcia.wdm.WebDriverManager;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.openqa.selenium.By;\n+import org.openqa.selenium.JavascriptExecutor;\n+import org.openqa.selenium.OutputType;\n+import org.openqa.selenium.TakesScreenshot;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.firefox.FirefoxOptions;\n+import org.openqa.selenium.support.ui.ExpectedCondition;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xmlunit.assertj.XmlAssert;\n+\n+import static org.apache.commons.io.FileUtils.copyFile;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.openqa.selenium.By.className;\n+import static org.openqa.selenium.By.xpath;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOfElementLocated;\n+\n+public class BPMNDesignerKogitoSeleniumIT {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BPMNDesignerKogitoSeleniumIT.class);\n+\n+    private static final String SET_CONTENT_TEMPLATE =\n+            \"gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().setContent(\\\"\\\", '%s')\";\n+    private static final String GET_CONTENT_TEMPLATE =\n+            \"return gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().getContent()\";\n+\n+    private static final String INDEX_HTML = \"target/kie-wb-common-stunner-bpmn-kogito-runtime/index.html\";\n+    private static final String INDEX_HTML_PATH = \"file:///\" + new File(INDEX_HTML).getAbsolutePath();\n+\n+    private static final String NOT_PRESENT_IN_NAVIGATOR = \"' was not present in the process navigator\";\n+    private static final String PROPERTIES_PANEL = \"qe-docks-item-E-DiagramEditorPropertiesScreen\";\n+    private static final String DIAGRAM_EXPLORER = \"qe-docks-item-E-ProjectDiagramExplorerScreen\";\n+    private static final String DIAGRAM_EXPLORER_EXPANDED = \"qe-docks-bar-expanded-E\";\n+    private static final String DIAGRAM_PANEL = \"qe-static-workbench-panel-view\";\n+    private static final String ACE_EDITOR = \"//div[@class='ace_content']\";\n+    private static final String ERROR_MODAL_DIALOG = \"//div[@class='modal-dialog']\";\n+    private static final String ERROR_MODAL_BODY = \"//div[@class='modal-body']\";\n+    private static final String PROCESS_NODE = \"//div[@data-field='explorerPanelBody']//a[text()='%s']\";\n+    private static final Boolean HEADLESS = Boolean.valueOf(System.getProperty(\"org.kie.bpmn.kogito.browser.headless\"));\n+    private static final String SCREENSHOTS_DIR = System.getProperty(\"org.kie.bpmn.kogito.screenshots.dir\");\n+\n+    /**\n+     * Selenium web driver\n+     */\n+    private WebDriver driver;\n+\n+    /**\n+     * Properties panel of BPMN Designer\n+     */\n+    private WebElement propertiesPanel;\n+\n+    /**\n+     * Explore diagram panel of BPMN Designer\n+     */\n+    private WebElement bpmnDesignerExplorerButton;\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        WebDriverManager.firefoxdriver().setup();\n+    }\n+\n+    @Before\n+    public void openBPMNDesigner() {\n+        final FirefoxOptions firefoxOptions = new FirefoxOptions();\n+        firefoxOptions.setHeadless(HEADLESS);\n+        driver = new FirefoxDriver(firefoxOptions);\n+        driver.manage().window().maximize();\n+\n+        driver.get(INDEX_HTML_PATH);\n+\n+        final WebElement designer = waitOperation()\n+                .until(presenceOfElementLocated(className(DIAGRAM_PANEL)));\n+        assertThat(designer)\n+                .as(\"Diagram panel is a prerequisite for all tests. \" +\n+                            \"its absence is indicator of designer load fail.\")\n+                .isNotNull();\n+    }\n+\n+    private final File screenshotDirectory = initScreenshotDirectory();\n+\n+    @Rule\n+    public TestWatcher takeScreenShotAndCleanUp = new TestWatcher() {\n+        @Override\n+        protected void failed(Throwable e, Description description) {\n+            final File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n+            final String testClassName = description.getTestClass().getSimpleName();\n+            final String testMethodName = description.getMethodName();\n+            final String filename = testClassName + \"_\" + testMethodName;\n+            try {\n+                copyFile(screenshotFile, new File(screenshotDirectory, filename + \".png\"));\n+            } catch (IOException ioe) {\n+                LOG.error(\"Unable to take screenshot\", ioe);\n+            }\n+        }\n+\n+        @Override\n+        protected void finished(Description description) {\n+            if (driver != null) {\n+                driver.quit();\n+            }\n+        }\n+    };\n+\n+    @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a5e7f996e3db6e05b970fc29062fdc8447f2abe"}, "originalPosition": 143}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a5e7f996e3db6e05b970fc29062fdc8447f2abe", "author": {"user": {"login": "jomarko", "name": "Jozef Marko"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3a5e7f996e3db6e05b970fc29062fdc8447f2abe", "committedDate": "2020-06-22T08:35:46Z", "message": "KOGITO-1508: Fix test precondition wait"}, "afterCommit": {"oid": "2d56d3f5943711eea5dae23b7349264308aa03aa", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/2d56d3f5943711eea5dae23b7349264308aa03aa", "committedDate": "2020-06-29T13:48:06Z", "message": "Unignore fixed test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTE2NjU1", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#pullrequestreview-440916655", "createdAt": "2020-07-01T14:22:13Z", "commit": {"oid": "2d56d3f5943711eea5dae23b7349264308aa03aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3Njk5Nzcz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#pullrequestreview-447699773", "createdAt": "2020-07-14T00:19:18Z", "commit": {"oid": "2d56d3f5943711eea5dae23b7349264308aa03aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d56d3f5943711eea5dae23b7349264308aa03aa", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/2d56d3f5943711eea5dae23b7349264308aa03aa", "committedDate": "2020-06-29T13:48:06Z", "message": "Unignore fixed test"}, "afterCommit": {"oid": "24175db63c242f65e8e5ff576e06b2ea317e794d", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/24175db63c242f65e8e5ff576e06b2ea317e794d", "committedDate": "2020-07-14T07:56:36Z", "message": "Unignore fixed test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57cd87977e57e93025759d2de1d486f9249e5c1b", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/57cd87977e57e93025759d2de1d486f9249e5c1b", "committedDate": "2020-07-30T07:59:53Z", "message": "KOGITO-1508: Add initial selenium tests for kogito client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "420f12e892e09f6030998544a7e9d15f83118bab", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/420f12e892e09f6030998544a7e9d15f83118bab", "committedDate": "2020-07-30T07:59:53Z", "message": "Add workaround for KOGITO-1795"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "721d6b33d228fddd22812fd90ad13ec1c1773bd9", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/721d6b33d228fddd22812fd90ad13ec1c1773bd9", "committedDate": "2020-07-30T07:59:53Z", "message": "Ignore invalid content test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab5839d2cec86e02ca77dfd434ddd8deae1f021", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/fab5839d2cec86e02ca77dfd434ddd8deae1f021", "committedDate": "2020-07-30T07:59:53Z", "message": "Fix resource not having updated package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "857a02870d80c0801536e4a2320fe8ecc6fca34a", "author": {"user": {"login": "jomarko", "name": "Jozef Marko"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/857a02870d80c0801536e4a2320fe8ecc6fca34a", "committedDate": "2020-07-30T07:59:53Z", "message": "KOGITO-1508: Fix test precondition wait"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44de5c614b41ae92aa4f3371886a2691db5d865d", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/44de5c614b41ae92aa4f3371886a2691db5d865d", "committedDate": "2020-07-30T07:59:53Z", "message": "Unignore fixed test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24175db63c242f65e8e5ff576e06b2ea317e794d", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/24175db63c242f65e8e5ff576e06b2ea317e794d", "committedDate": "2020-07-14T07:56:36Z", "message": "Unignore fixed test"}, "afterCommit": {"oid": "44de5c614b41ae92aa4f3371886a2691db5d865d", "author": {"user": {"login": "domhanak", "name": "Dominik Han\u00e1k"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/44de5c614b41ae92aa4f3371886a2691db5d865d", "committedDate": "2020-07-30T07:59:53Z", "message": "Unignore fixed test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNzA2Mzc1", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#pullrequestreview-460706375", "createdAt": "2020-08-04T10:55:34Z", "commit": {"oid": "44de5c614b41ae92aa4f3371886a2691db5d865d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDo1NTozNVrOG7bVow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMDo1NjozOFrOG7bXlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2NzA3NQ==", "bodyText": "This can be simplified:\n        final WebElement designer = waitOperation()\n                .withMessage(\"Diagram panel is a prerequisite for all tests. \" +\n                            \"its absence is indicator of designer load fail.\")\n                .until(presenceOfElementLocated(className(DIAGRAM_PANEL)));", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#discussion_r464967075", "createdAt": "2020-08-04T10:55:35Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/test/java/org/kie/workbench/common/stunner/kogito/client/selenium/BPMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.kogito.client.selenium;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import io.github.bonigarcia.wdm.WebDriverManager;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.openqa.selenium.JavascriptExecutor;\n+import org.openqa.selenium.OutputType;\n+import org.openqa.selenium.TakesScreenshot;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.firefox.FirefoxOptions;\n+import org.openqa.selenium.support.ui.ExpectedCondition;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xmlunit.assertj.XmlAssert;\n+\n+import static org.apache.commons.io.FileUtils.copyFile;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.openqa.selenium.By.className;\n+import static org.openqa.selenium.By.xpath;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOfElementLocated;\n+\n+public class BPMNDesignerKogitoSeleniumIT {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BPMNDesignerKogitoSeleniumIT.class);\n+\n+    private static final String SET_CONTENT_TEMPLATE =\n+            \"gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().setContent(\\\"\\\", '%s')\";\n+    private static final String GET_CONTENT_TEMPLATE =\n+            \"return gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().getContent()\";\n+\n+    private static final String INDEX_HTML = \"target/kie-wb-common-stunner-bpmn-kogito-runtime/index.html\";\n+    private static final String INDEX_HTML_PATH = \"file:///\" + new File(INDEX_HTML).getAbsolutePath();\n+\n+    private static final String NOT_PRESENT_IN_NAVIGATOR = \"' was not present in the process navigator\";\n+    private static final String PROPERTIES_PANEL = \"qe-docks-item-E-DiagramEditorPropertiesScreen\";\n+    private static final String DIAGRAM_EXPLORER = \"qe-docks-item-E-ProjectDiagramExplorerScreen\";\n+    private static final String DIAGRAM_EXPLORER_EXPANDED = \"qe-docks-bar-expanded-E\";\n+    private static final String DIAGRAM_PANEL = \"qe-static-workbench-panel-view\";\n+    private static final String ACE_EDITOR = \"//div[@class='ace_content']\";\n+    private static final String ERROR_MODAL_DIALOG = \"//div[@class='modal-dialog']\";\n+    private static final String ERROR_MODAL_BODY = \"//div[@class='modal-body']\";\n+    private static final String PROCESS_NODE = \"//div[@data-field='explorerPanelBody']//a[text()='%s']\";\n+    private static final Boolean HEADLESS = Boolean.valueOf(System.getProperty(\"org.kie.bpmn.kogito.browser.headless\"));\n+    private static final String SCREENSHOTS_DIR = System.getProperty(\"org.kie.bpmn.kogito.screenshots.dir\");\n+\n+    /**\n+     * Selenium web driver\n+     */\n+    private WebDriver driver;\n+\n+    /**\n+     * Properties panel of BPMN Designer\n+     */\n+    private WebElement propertiesPanel;\n+\n+    /**\n+     * Explore diagram panel of BPMN Designer\n+     */\n+    private WebElement bpmnDesignerExplorerButton;\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        WebDriverManager.firefoxdriver().setup();\n+    }\n+\n+    @Before\n+    public void openBPMNDesigner() {\n+        final FirefoxOptions firefoxOptions = new FirefoxOptions();\n+        firefoxOptions.setHeadless(HEADLESS);\n+        driver = new FirefoxDriver(firefoxOptions);\n+        driver.manage().window().maximize();\n+\n+        driver.get(INDEX_HTML_PATH);\n+\n+        final WebElement designer = waitOperation()\n+                .until(presenceOfElementLocated(className(DIAGRAM_PANEL)));\n+        assertThat(designer)\n+                .as(\"Diagram panel is a prerequisite for all tests. \" +\n+                            \"its absence is indicator of designer load fail.\")\n+                .isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44de5c614b41ae92aa4f3371886a2691db5d865d"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2NzIwOQ==", "bodyText": "Similar comment as above", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#discussion_r464967209", "createdAt": "2020-08-04T10:55:52Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/test/java/org/kie/workbench/common/stunner/kogito/client/selenium/BPMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.kogito.client.selenium;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import io.github.bonigarcia.wdm.WebDriverManager;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.openqa.selenium.JavascriptExecutor;\n+import org.openqa.selenium.OutputType;\n+import org.openqa.selenium.TakesScreenshot;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.firefox.FirefoxOptions;\n+import org.openqa.selenium.support.ui.ExpectedCondition;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xmlunit.assertj.XmlAssert;\n+\n+import static org.apache.commons.io.FileUtils.copyFile;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.openqa.selenium.By.className;\n+import static org.openqa.selenium.By.xpath;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOfElementLocated;\n+\n+public class BPMNDesignerKogitoSeleniumIT {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BPMNDesignerKogitoSeleniumIT.class);\n+\n+    private static final String SET_CONTENT_TEMPLATE =\n+            \"gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().setContent(\\\"\\\", '%s')\";\n+    private static final String GET_CONTENT_TEMPLATE =\n+            \"return gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().getContent()\";\n+\n+    private static final String INDEX_HTML = \"target/kie-wb-common-stunner-bpmn-kogito-runtime/index.html\";\n+    private static final String INDEX_HTML_PATH = \"file:///\" + new File(INDEX_HTML).getAbsolutePath();\n+\n+    private static final String NOT_PRESENT_IN_NAVIGATOR = \"' was not present in the process navigator\";\n+    private static final String PROPERTIES_PANEL = \"qe-docks-item-E-DiagramEditorPropertiesScreen\";\n+    private static final String DIAGRAM_EXPLORER = \"qe-docks-item-E-ProjectDiagramExplorerScreen\";\n+    private static final String DIAGRAM_EXPLORER_EXPANDED = \"qe-docks-bar-expanded-E\";\n+    private static final String DIAGRAM_PANEL = \"qe-static-workbench-panel-view\";\n+    private static final String ACE_EDITOR = \"//div[@class='ace_content']\";\n+    private static final String ERROR_MODAL_DIALOG = \"//div[@class='modal-dialog']\";\n+    private static final String ERROR_MODAL_BODY = \"//div[@class='modal-body']\";\n+    private static final String PROCESS_NODE = \"//div[@data-field='explorerPanelBody']//a[text()='%s']\";\n+    private static final Boolean HEADLESS = Boolean.valueOf(System.getProperty(\"org.kie.bpmn.kogito.browser.headless\"));\n+    private static final String SCREENSHOTS_DIR = System.getProperty(\"org.kie.bpmn.kogito.screenshots.dir\");\n+\n+    /**\n+     * Selenium web driver\n+     */\n+    private WebDriver driver;\n+\n+    /**\n+     * Properties panel of BPMN Designer\n+     */\n+    private WebElement propertiesPanel;\n+\n+    /**\n+     * Explore diagram panel of BPMN Designer\n+     */\n+    private WebElement bpmnDesignerExplorerButton;\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        WebDriverManager.firefoxdriver().setup();\n+    }\n+\n+    @Before\n+    public void openBPMNDesigner() {\n+        final FirefoxOptions firefoxOptions = new FirefoxOptions();\n+        firefoxOptions.setHeadless(HEADLESS);\n+        driver = new FirefoxDriver(firefoxOptions);\n+        driver.manage().window().maximize();\n+\n+        driver.get(INDEX_HTML_PATH);\n+\n+        final WebElement designer = waitOperation()\n+                .until(presenceOfElementLocated(className(DIAGRAM_PANEL)));\n+        assertThat(designer)\n+                .as(\"Diagram panel is a prerequisite for all tests. \" +\n+                            \"its absence is indicator of designer load fail.\")\n+                .isNotNull();\n+    }\n+\n+    private final File screenshotDirectory = initScreenshotDirectory();\n+\n+    @Rule\n+    public TestWatcher takeScreenShotAndCleanUp = new TestWatcher() {\n+        @Override\n+        protected void failed(Throwable e, Description description) {\n+            final File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n+            final String testClassName = description.getTestClass().getSimpleName();\n+            final String testMethodName = description.getMethodName();\n+            final String filename = testClassName + \"_\" + testMethodName;\n+            try {\n+                copyFile(screenshotFile, new File(screenshotDirectory, filename + \".png\"));\n+            } catch (IOException ioe) {\n+                LOG.error(\"Unable to take screenshot\", ioe);\n+            }\n+        }\n+\n+        @Override\n+        protected void finished(Description description) {\n+            if (driver != null) {\n+                driver.quit();\n+            }\n+        }\n+    };\n+\n+    @Test\n+    public void testHandlingInvalidContent() {\n+        setContent(\"<!!!invalid!!!>\");\n+\n+        // Verify ACE editor (default text editor) is in place and shown to user\n+        final WebElement aceEditor = waitOperation().until(element(ACE_EDITOR));\n+        assertThat(aceEditor)\n+                .as(\"If invalid bpmn is loaded, ace editor needs to be shown\")\n+                .isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44de5c614b41ae92aa4f3371886a2691db5d865d"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2NzM2Nw==", "bodyText": "Similar comment", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#discussion_r464967367", "createdAt": "2020-08-04T10:56:12Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/test/java/org/kie/workbench/common/stunner/kogito/client/selenium/BPMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.kogito.client.selenium;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import io.github.bonigarcia.wdm.WebDriverManager;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.openqa.selenium.JavascriptExecutor;\n+import org.openqa.selenium.OutputType;\n+import org.openqa.selenium.TakesScreenshot;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.firefox.FirefoxOptions;\n+import org.openqa.selenium.support.ui.ExpectedCondition;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xmlunit.assertj.XmlAssert;\n+\n+import static org.apache.commons.io.FileUtils.copyFile;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.openqa.selenium.By.className;\n+import static org.openqa.selenium.By.xpath;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOfElementLocated;\n+\n+public class BPMNDesignerKogitoSeleniumIT {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BPMNDesignerKogitoSeleniumIT.class);\n+\n+    private static final String SET_CONTENT_TEMPLATE =\n+            \"gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().setContent(\\\"\\\", '%s')\";\n+    private static final String GET_CONTENT_TEMPLATE =\n+            \"return gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().getContent()\";\n+\n+    private static final String INDEX_HTML = \"target/kie-wb-common-stunner-bpmn-kogito-runtime/index.html\";\n+    private static final String INDEX_HTML_PATH = \"file:///\" + new File(INDEX_HTML).getAbsolutePath();\n+\n+    private static final String NOT_PRESENT_IN_NAVIGATOR = \"' was not present in the process navigator\";\n+    private static final String PROPERTIES_PANEL = \"qe-docks-item-E-DiagramEditorPropertiesScreen\";\n+    private static final String DIAGRAM_EXPLORER = \"qe-docks-item-E-ProjectDiagramExplorerScreen\";\n+    private static final String DIAGRAM_EXPLORER_EXPANDED = \"qe-docks-bar-expanded-E\";\n+    private static final String DIAGRAM_PANEL = \"qe-static-workbench-panel-view\";\n+    private static final String ACE_EDITOR = \"//div[@class='ace_content']\";\n+    private static final String ERROR_MODAL_DIALOG = \"//div[@class='modal-dialog']\";\n+    private static final String ERROR_MODAL_BODY = \"//div[@class='modal-body']\";\n+    private static final String PROCESS_NODE = \"//div[@data-field='explorerPanelBody']//a[text()='%s']\";\n+    private static final Boolean HEADLESS = Boolean.valueOf(System.getProperty(\"org.kie.bpmn.kogito.browser.headless\"));\n+    private static final String SCREENSHOTS_DIR = System.getProperty(\"org.kie.bpmn.kogito.screenshots.dir\");\n+\n+    /**\n+     * Selenium web driver\n+     */\n+    private WebDriver driver;\n+\n+    /**\n+     * Properties panel of BPMN Designer\n+     */\n+    private WebElement propertiesPanel;\n+\n+    /**\n+     * Explore diagram panel of BPMN Designer\n+     */\n+    private WebElement bpmnDesignerExplorerButton;\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        WebDriverManager.firefoxdriver().setup();\n+    }\n+\n+    @Before\n+    public void openBPMNDesigner() {\n+        final FirefoxOptions firefoxOptions = new FirefoxOptions();\n+        firefoxOptions.setHeadless(HEADLESS);\n+        driver = new FirefoxDriver(firefoxOptions);\n+        driver.manage().window().maximize();\n+\n+        driver.get(INDEX_HTML_PATH);\n+\n+        final WebElement designer = waitOperation()\n+                .until(presenceOfElementLocated(className(DIAGRAM_PANEL)));\n+        assertThat(designer)\n+                .as(\"Diagram panel is a prerequisite for all tests. \" +\n+                            \"its absence is indicator of designer load fail.\")\n+                .isNotNull();\n+    }\n+\n+    private final File screenshotDirectory = initScreenshotDirectory();\n+\n+    @Rule\n+    public TestWatcher takeScreenShotAndCleanUp = new TestWatcher() {\n+        @Override\n+        protected void failed(Throwable e, Description description) {\n+            final File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n+            final String testClassName = description.getTestClass().getSimpleName();\n+            final String testMethodName = description.getMethodName();\n+            final String filename = testClassName + \"_\" + testMethodName;\n+            try {\n+                copyFile(screenshotFile, new File(screenshotDirectory, filename + \".png\"));\n+            } catch (IOException ioe) {\n+                LOG.error(\"Unable to take screenshot\", ioe);\n+            }\n+        }\n+\n+        @Override\n+        protected void finished(Description description) {\n+            if (driver != null) {\n+                driver.quit();\n+            }\n+        }\n+    };\n+\n+    @Test\n+    public void testHandlingInvalidContent() {\n+        setContent(\"<!!!invalid!!!>\");\n+\n+        // Verify ACE editor (default text editor) is in place and shown to user\n+        final WebElement aceEditor = waitOperation().until(element(ACE_EDITOR));\n+        assertThat(aceEditor)\n+                .as(\"If invalid bpmn is loaded, ace editor needs to be shown\")\n+                .isNotNull();\n+    }\n+\n+    @Test\n+    public void testNewDiagram() throws Exception {\n+        final String expected = loadResource(\"new-diagram.bpmn2\");\n+        setContent(\"\");\n+\n+        waitPropertiesAndExplorer();\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        // Skip, id, name and namespace in the comparison - they are dynamic\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .withAttributeFilter(\n+                        attr -> !(Objects.equals(attr.getName(), \"id\")\n+                                || Objects.equals(attr.getName(), \"name\")\n+                                || Objects.equals(attr.getName(), \"namespace\")))\n+                .withNodeFilter(\n+                        node -> !(Objects.equals(node.getNodeName(), \"bpmn2:source\")\n+                                || Objects.equals(node.getNodeName(), \"bpmn2:target\")))\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testBasicModel() throws Exception {\n+        final String expected = loadResource(\"basic-process.bpmn2\");\n+        setContent(expected);\n+\n+        waitPropertiesAndExplorer();\n+\n+        assertDiagramNodeIsPresentInProcessNavigator(\"Start\");\n+        assertDiagramNodeIsPresentInProcessNavigator(\"Add user to database\");\n+        assertDiagramNodeIsPresentInProcessNavigator(\"End\");\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                // KOGITO-1795\n+                .withAttributeFilter(\n+                        attr -> (!(Objects.equals(attr.getName(), \"id\") &&\n+                                !(Objects.equals(attr.getOwnerElement().getTagName(), \"bpmn2:defintions\"))))\n+                )\n+                .withNodeFilter(\n+                        node -> !(Objects.equals(node.getNodeName(), \"bpmn2:source\")\n+                                || Objects.equals(node.getNodeName(), \"bpmn2:target\")))\n+                .areIdentical();\n+    }\n+\n+    private void assertDiagramNodeIsPresentInProcessNavigator(final String nodeName) {\n+        expandBpmnNavigatorDock();\n+        final WebElement node = waitOperation().until(element(PROCESS_NODE, nodeName));\n+        assertThat(node)\n+                .as(\"Node '\" + nodeName + NOT_PRESENT_IN_NAVIGATOR)\n+                .isNotNull();\n+        collapseBpmnNavigatorDock();\n+    }\n+\n+    /**\n+     * Click on 'Explore Diagram' panel dock icon\n+     * @throws NullPointerException if 'setContent(final String content)' was not called before\n+     */\n+    private void expandBpmnNavigatorDock() throws NullPointerException {\n+        bpmnDesignerExplorerButton.click();\n+    }\n+\n+    private void collapseBpmnNavigatorDock() {\n+        final WebElement expandedDiagramNavigator = waitOperation()\n+                .until(visibilityOfElementLocated(className(DIAGRAM_EXPLORER_EXPANDED)));\n+        assertThat(expandedDiagramNavigator)\n+                .as(\"Unable to locate expanded decision navigator dock\")\n+                .isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44de5c614b41ae92aa4f3371886a2691db5d865d"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk2NzU3Mw==", "bodyText": "Similar comment as above", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#discussion_r464967573", "createdAt": "2020-08-04T10:56:38Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/src/test/java/org/kie/workbench/common/stunner/kogito/client/selenium/BPMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.kogito.client.selenium;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import io.github.bonigarcia.wdm.WebDriverManager;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestWatcher;\n+import org.junit.runner.Description;\n+import org.openqa.selenium.JavascriptExecutor;\n+import org.openqa.selenium.OutputType;\n+import org.openqa.selenium.TakesScreenshot;\n+import org.openqa.selenium.WebDriver;\n+import org.openqa.selenium.WebElement;\n+import org.openqa.selenium.firefox.FirefoxDriver;\n+import org.openqa.selenium.firefox.FirefoxOptions;\n+import org.openqa.selenium.support.ui.ExpectedCondition;\n+import org.openqa.selenium.support.ui.WebDriverWait;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.xmlunit.assertj.XmlAssert;\n+\n+import static org.apache.commons.io.FileUtils.copyFile;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.openqa.selenium.By.className;\n+import static org.openqa.selenium.By.xpath;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;\n+import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOfElementLocated;\n+\n+public class BPMNDesignerKogitoSeleniumIT {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BPMNDesignerKogitoSeleniumIT.class);\n+\n+    private static final String SET_CONTENT_TEMPLATE =\n+            \"gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().setContent(\\\"\\\", '%s')\";\n+    private static final String GET_CONTENT_TEMPLATE =\n+            \"return gwtEditorBeans.get(\\\"BPMNDiagramEditor\\\").get().getContent()\";\n+\n+    private static final String INDEX_HTML = \"target/kie-wb-common-stunner-bpmn-kogito-runtime/index.html\";\n+    private static final String INDEX_HTML_PATH = \"file:///\" + new File(INDEX_HTML).getAbsolutePath();\n+\n+    private static final String NOT_PRESENT_IN_NAVIGATOR = \"' was not present in the process navigator\";\n+    private static final String PROPERTIES_PANEL = \"qe-docks-item-E-DiagramEditorPropertiesScreen\";\n+    private static final String DIAGRAM_EXPLORER = \"qe-docks-item-E-ProjectDiagramExplorerScreen\";\n+    private static final String DIAGRAM_EXPLORER_EXPANDED = \"qe-docks-bar-expanded-E\";\n+    private static final String DIAGRAM_PANEL = \"qe-static-workbench-panel-view\";\n+    private static final String ACE_EDITOR = \"//div[@class='ace_content']\";\n+    private static final String ERROR_MODAL_DIALOG = \"//div[@class='modal-dialog']\";\n+    private static final String ERROR_MODAL_BODY = \"//div[@class='modal-body']\";\n+    private static final String PROCESS_NODE = \"//div[@data-field='explorerPanelBody']//a[text()='%s']\";\n+    private static final Boolean HEADLESS = Boolean.valueOf(System.getProperty(\"org.kie.bpmn.kogito.browser.headless\"));\n+    private static final String SCREENSHOTS_DIR = System.getProperty(\"org.kie.bpmn.kogito.screenshots.dir\");\n+\n+    /**\n+     * Selenium web driver\n+     */\n+    private WebDriver driver;\n+\n+    /**\n+     * Properties panel of BPMN Designer\n+     */\n+    private WebElement propertiesPanel;\n+\n+    /**\n+     * Explore diagram panel of BPMN Designer\n+     */\n+    private WebElement bpmnDesignerExplorerButton;\n+\n+    @BeforeClass\n+    public static void setupClass() {\n+        WebDriverManager.firefoxdriver().setup();\n+    }\n+\n+    @Before\n+    public void openBPMNDesigner() {\n+        final FirefoxOptions firefoxOptions = new FirefoxOptions();\n+        firefoxOptions.setHeadless(HEADLESS);\n+        driver = new FirefoxDriver(firefoxOptions);\n+        driver.manage().window().maximize();\n+\n+        driver.get(INDEX_HTML_PATH);\n+\n+        final WebElement designer = waitOperation()\n+                .until(presenceOfElementLocated(className(DIAGRAM_PANEL)));\n+        assertThat(designer)\n+                .as(\"Diagram panel is a prerequisite for all tests. \" +\n+                            \"its absence is indicator of designer load fail.\")\n+                .isNotNull();\n+    }\n+\n+    private final File screenshotDirectory = initScreenshotDirectory();\n+\n+    @Rule\n+    public TestWatcher takeScreenShotAndCleanUp = new TestWatcher() {\n+        @Override\n+        protected void failed(Throwable e, Description description) {\n+            final File screenshotFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n+            final String testClassName = description.getTestClass().getSimpleName();\n+            final String testMethodName = description.getMethodName();\n+            final String filename = testClassName + \"_\" + testMethodName;\n+            try {\n+                copyFile(screenshotFile, new File(screenshotDirectory, filename + \".png\"));\n+            } catch (IOException ioe) {\n+                LOG.error(\"Unable to take screenshot\", ioe);\n+            }\n+        }\n+\n+        @Override\n+        protected void finished(Description description) {\n+            if (driver != null) {\n+                driver.quit();\n+            }\n+        }\n+    };\n+\n+    @Test\n+    public void testHandlingInvalidContent() {\n+        setContent(\"<!!!invalid!!!>\");\n+\n+        // Verify ACE editor (default text editor) is in place and shown to user\n+        final WebElement aceEditor = waitOperation().until(element(ACE_EDITOR));\n+        assertThat(aceEditor)\n+                .as(\"If invalid bpmn is loaded, ace editor needs to be shown\")\n+                .isNotNull();\n+    }\n+\n+    @Test\n+    public void testNewDiagram() throws Exception {\n+        final String expected = loadResource(\"new-diagram.bpmn2\");\n+        setContent(\"\");\n+\n+        waitPropertiesAndExplorer();\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        // Skip, id, name and namespace in the comparison - they are dynamic\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .withAttributeFilter(\n+                        attr -> !(Objects.equals(attr.getName(), \"id\")\n+                                || Objects.equals(attr.getName(), \"name\")\n+                                || Objects.equals(attr.getName(), \"namespace\")))\n+                .withNodeFilter(\n+                        node -> !(Objects.equals(node.getNodeName(), \"bpmn2:source\")\n+                                || Objects.equals(node.getNodeName(), \"bpmn2:target\")))\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testBasicModel() throws Exception {\n+        final String expected = loadResource(\"basic-process.bpmn2\");\n+        setContent(expected);\n+\n+        waitPropertiesAndExplorer();\n+\n+        assertDiagramNodeIsPresentInProcessNavigator(\"Start\");\n+        assertDiagramNodeIsPresentInProcessNavigator(\"Add user to database\");\n+        assertDiagramNodeIsPresentInProcessNavigator(\"End\");\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                // KOGITO-1795\n+                .withAttributeFilter(\n+                        attr -> (!(Objects.equals(attr.getName(), \"id\") &&\n+                                !(Objects.equals(attr.getOwnerElement().getTagName(), \"bpmn2:defintions\"))))\n+                )\n+                .withNodeFilter(\n+                        node -> !(Objects.equals(node.getNodeName(), \"bpmn2:source\")\n+                                || Objects.equals(node.getNodeName(), \"bpmn2:target\")))\n+                .areIdentical();\n+    }\n+\n+    private void assertDiagramNodeIsPresentInProcessNavigator(final String nodeName) {\n+        expandBpmnNavigatorDock();\n+        final WebElement node = waitOperation().until(element(PROCESS_NODE, nodeName));\n+        assertThat(node)\n+                .as(\"Node '\" + nodeName + NOT_PRESENT_IN_NAVIGATOR)\n+                .isNotNull();\n+        collapseBpmnNavigatorDock();\n+    }\n+\n+    /**\n+     * Click on 'Explore Diagram' panel dock icon\n+     * @throws NullPointerException if 'setContent(final String content)' was not called before\n+     */\n+    private void expandBpmnNavigatorDock() throws NullPointerException {\n+        bpmnDesignerExplorerButton.click();\n+    }\n+\n+    private void collapseBpmnNavigatorDock() {\n+        final WebElement expandedDiagramNavigator = waitOperation()\n+                .until(visibilityOfElementLocated(className(DIAGRAM_EXPLORER_EXPANDED)));\n+        assertThat(expandedDiagramNavigator)\n+                .as(\"Unable to locate expanded decision navigator dock\")\n+                .isNotNull();\n+\n+        expandedDiagramNavigator.findElement(className(\"fa\")).click();\n+    }\n+\n+    private File initScreenshotDirectory() {\n+        if (SCREENSHOTS_DIR == null) {\n+            throw new IllegalStateException(\n+                    \"Property org.kie.dmn.kogito.screenshots.dir (where screenshot taken by WebDriver will be put) was null\");\n+        }\n+        File scd = new File(SCREENSHOTS_DIR);\n+        if (!scd.exists()) {\n+            boolean mkdirSuccess = scd.mkdir();\n+            if (!mkdirSuccess) {\n+                throw new IllegalStateException(\"Creation of screenshots dir failed \" + scd);\n+            }\n+        }\n+        if (!scd.canWrite()) {\n+            throw new IllegalStateException(\"The screenshotDir must be writable\" + scd);\n+        }\n+        return scd;\n+    }\n+\n+    private void waitPropertiesAndExplorer() {\n+        final WebElement propertiesPanelDockIcon = waitOperation()\n+                .until(visibilityOfElementLocated(className(PROPERTIES_PANEL)));\n+        assertThat(propertiesPanelDockIcon)\n+                .as(\"Once content is set properties panel dock icon visibility is a prerequisite\" +\n+                            \"for further test execution.\")\n+                .isNotNull();\n+\n+        bpmnDesignerExplorerButton = waitOperation()\n+                .until(visibilityOfElementLocated(className(DIAGRAM_EXPLORER)));\n+        assertThat(bpmnDesignerExplorerButton)\n+                .as(\"Once content is set diagram explorer panel dock icon visibility is a prerequisite\" +\n+                            \"for further test execution.\")\n+                .isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44de5c614b41ae92aa4f3371886a2691db5d865d"}, "originalPosition": 263}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODc2MjQw", "url": "https://github.com/kiegroup/kie-wb-common/pull/3298#pullrequestreview-460876240", "createdAt": "2020-08-04T14:36:34Z", "commit": {"oid": "44de5c614b41ae92aa4f3371886a2691db5d865d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 379, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}