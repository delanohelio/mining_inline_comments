{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3OTg4ODc0", "number": 3462, "title": "DROOLS-5749: [DMN Designer] Multiple DRDs support - When users open a DMN with duplicated information requirements, the marshaller doesn't fix it", "bodyText": "JIRA: DROOLS-5749 - [DMN Designer] Multiple DRDs support - When users open a DMN with duplicated information requirements, the marshaller doesn't fix it\nBusiness Central: WAR file\nVS Code: plugin\n\n\nHow to retest this PR or trigger a specific build:\n\n\nRetest PR: jenkins retest this\nA full downstream build: jenkins do fdb\nA compile downstream build: jenkins do cdb\nA full production downstream build: jenkins do product fdb\nAn upstream build: jenkins do upstream", "createdAt": "2020-10-22T03:35:37Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3462", "merged": true, "mergeCommit": {"oid": "853856395c7af197531433597e2a95cab4c988ef"}, "closed": true, "closedAt": "2020-11-03T14:51:59Z", "author": {"login": "karreiro"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdU5OB5AH2gAyNTA3OTg4ODc0OmY5NzM3ODA4YTA0MjllNGU1YzY5YWExYTJlODZmOTc2NjU3NDU2NDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY6WtbgFqTUyMjU3MzIwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f9737808a0429e4e5c69aa1a2e86f97665745641", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/f9737808a0429e4e5c69aa1a2e86f97665745641", "committedDate": "2020-10-22T03:15:38Z", "message": "DROOLS-5749: [DMN Designer] Multiple DRDs support - When users open a DMN with duplicated information requirements, the marshaller doesn't fix it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NTIyNDIy", "url": "https://github.com/kiegroup/kie-wb-common/pull/3462#pullrequestreview-514522422", "createdAt": "2020-10-22T09:16:52Z", "commit": {"oid": "f9737808a0429e4e5c69aa1a2e86f97665745641"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToxNjo1M1rOHmYaeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToxNjo1M1rOHmYaeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwNzkyOA==", "bodyText": "Could we add here second argument and combine the lists like:\nprivate <T extends JSITDMNElement> List<T> distinct(final List<T> list, final List<T> secondList) {\n    List<T> toBeProcessed = new ArrayList(list);\n    toBeProcessed.addAll(secondList);\n    // the rest is the same, just process the combined list\n    final Map<String, T> map = new HashMap<>();\n    forEach(toBeProcessed, item -> {\n        map.putIfAbsent(item.getId(), Js.uncheckedCast(item));\n    });\n    return new ArrayList<>(map.values());\n}\n\nThe usage then wouldn't need to first to invoke addAllAuthorityRequirement and then retrospectively filtering and setting using setAuthorityRequirement.\nResulting in a single call for each requirement type\nexistingKnowledgeSource.setAuthorityRequirement(\n    distinct(\n        existingKnowledgeSource.getAuthorityRequirement(),\n        nodeKnowledgeSource.getAuthorityRequirement()\n    )\n);\n\nwhich is IMO nicer than\nexistingKnowledgeSource.addAllAuthorityRequirement(nodeKnowledgeSource.getAuthorityRequirement().toArray(new JSITAuthorityRequirement[0]));\nexistingKnowledgeSource.setAuthorityRequirement(distinct(existingKnowledgeSource.getAuthorityRequirement()));", "url": "https://github.com/kiegroup/kie-wb-common/pull/3462#discussion_r510007928", "createdAt": "2020-10-22T09:16:53Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/marshaller/marshall/DMNMarshaller.java", "diffHunk": "@@ -352,58 +365,41 @@ private void mergeNodeRequirements(final JSITDRGElement node,\n             final JSITBusinessKnowledgeModel existingBkm = Js.uncheckedCast(existingDRGElement);\n             final JSITBusinessKnowledgeModel nodeBkm = Js.uncheckedCast(node);\n \n-            forEach(nodeBkm.getAuthorityRequirement(),\n-                    authorityRequirement -> {\n-                        if (!existingBkm.getAuthorityRequirement().contains(authorityRequirement)) {\n-                            existingBkm.addAuthorityRequirement(authorityRequirement);\n-                        }\n-                    });\n+            existingBkm.addAllAuthorityRequirement(nodeBkm.getAuthorityRequirement().toArray(new JSITAuthorityRequirement[0]));\n+            existingBkm.addAllKnowledgeRequirement(nodeBkm.getKnowledgeRequirement().toArray(new JSITKnowledgeRequirement[0]));\n \n-            forEach(nodeBkm.getKnowledgeRequirement(),\n-                    knowledgeRequirement -> {\n-                        if (!existingBkm.getKnowledgeRequirement().contains(knowledgeRequirement)) {\n-                            existingBkm.addKnowledgeRequirement(knowledgeRequirement);\n-                        }\n-                    });\n+            existingBkm.setAuthorityRequirement(distinct(existingBkm.getAuthorityRequirement()));\n+            existingBkm.setKnowledgeRequirement(distinct(existingBkm.getKnowledgeRequirement()));\n         } else if (instanceOfDecision(node)) {\n \n             final JSITDecision existingDecision = Js.uncheckedCast(existingDRGElement);\n             final JSITDecision nodeDecision = Js.uncheckedCast(node);\n \n-            forEach(nodeDecision.getAuthorityRequirement(),\n-                    authorityRequirement -> {\n-                        if (!existingDecision.getAuthorityRequirement().contains(authorityRequirement)) {\n-                            existingDecision.addAuthorityRequirement(authorityRequirement);\n-                        }\n-                    });\n-\n-            forEach(nodeDecision.getInformationRequirement(),\n-                    informationRequirement -> {\n-                        if (!existingDecision.getInformationRequirement().contains(informationRequirement)) {\n-                            existingDecision.addInformationRequirement(informationRequirement);\n-                        }\n-                    });\n+            existingDecision.addAllAuthorityRequirement(nodeDecision.getAuthorityRequirement().toArray(new JSITAuthorityRequirement[0]));\n+            existingDecision.addAllInformationRequirement(nodeDecision.getInformationRequirement().toArray(new JSITInformationRequirement[0]));\n+            existingDecision.addAllKnowledgeRequirement(nodeDecision.getKnowledgeRequirement().toArray(new JSITKnowledgeRequirement[0]));\n \n-            forEach(nodeDecision.getKnowledgeRequirement(),\n-                    knowledgeRequirement -> {\n-                        if (!existingDecision.getKnowledgeRequirement().contains(knowledgeRequirement)) {\n-                            existingDecision.addKnowledgeRequirement(knowledgeRequirement);\n-                        }\n-                    });\n+            existingDecision.setAuthorityRequirement(distinct(existingDecision.getAuthorityRequirement()));\n+            existingDecision.setInformationRequirement(distinct(existingDecision.getInformationRequirement()));\n+            existingDecision.setKnowledgeRequirement(distinct(existingDecision.getKnowledgeRequirement()));\n         } else if (instanceOfKnowledgeSource(node)) {\n \n             final JSITKnowledgeSource existingKnowledgeSource = Js.uncheckedCast(existingDRGElement);\n             final JSITKnowledgeSource nodeKnowledgeSource = Js.uncheckedCast(node);\n \n-            forEach(nodeKnowledgeSource.getAuthorityRequirement(),\n-                    authorityRequirement -> {\n-                        if (!existingKnowledgeSource.getAuthorityRequirement().contains(authorityRequirement)) {\n-                            existingKnowledgeSource.addAuthorityRequirement(authorityRequirement);\n-                        }\n-                    });\n+            existingKnowledgeSource.addAllAuthorityRequirement(nodeKnowledgeSource.getAuthorityRequirement().toArray(new JSITAuthorityRequirement[0]));\n+            existingKnowledgeSource.setAuthorityRequirement(distinct(existingKnowledgeSource.getAuthorityRequirement()));\n         }\n     }\n \n+    private <T extends JSITDMNElement> List<T> distinct(final List<T> list) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9737808a0429e4e5c69aa1a2e86f97665745641"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8231bf3b0d4b343099571be672026d545cde033a", "author": {"user": {"login": "karreiro", "name": "Guilherme Carreiro"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8231bf3b0d4b343099571be672026d545cde033a", "committedDate": "2020-10-22T12:40:40Z", "message": " - Simplify 'mergeNodeRequirements' (reviewer: Jan)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NzA5MDAx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3462#pullrequestreview-514709001", "createdAt": "2020-10-22T13:12:09Z", "commit": {"oid": "8231bf3b0d4b343099571be672026d545cde033a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNTczMjAz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3462#pullrequestreview-522573203", "createdAt": "2020-11-03T14:50:43Z", "commit": {"oid": "8231bf3b0d4b343099571be672026d545cde033a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 347, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}