{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MzU2MTEx", "number": 3221, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozODowOVrODoaXPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOToyMTowNFrOD_l6AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzAxNTY0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozODowOVrOF28ddQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozODowOVrOF28ddQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODAwNQ==", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393158005", "createdAt": "2020-03-16T16:38:09Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "diffHunk": "@@ -68,4 +66,14 @@ private boolean selectedNodeIsInput(final Element selectedElement) {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n+\n+    @Override\n+    public String getKogitoCombination() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bcb39711599403dead440a04c3e8d5465075f1a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzAxNTkxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozODoxM1rOF28doA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozODoxM1rOF28doA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODA0OA==", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393158048", "createdAt": "2020-03-16T16:38:13Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "diffHunk": "@@ -68,4 +66,14 @@ private boolean selectedNodeIsInput(final Element selectedElement) {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n+\n+    @Override\n+    public String getKogitoCombination() {\n+        return \"d\";\n+    }\n+\n+    @Override\n+    public String getKogitoLabel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bcb39711599403dead440a04c3e8d5465075f1a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzAxNjQ3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozODoyMVrOF28d_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTo0MDowMVrOF-pO1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODE0MA==", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393158140", "createdAt": "2020-03-16T16:38:21Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java", "diffHunk": "@@ -117,6 +120,29 @@ public LocationControlImpl(final CanvasCommandFactory<AbstractCanvasHandler> can\n     public void bind(final EditorSession session) {\n         // Keyboard event handling.\n         session.getKeyboardControl().addKeyShortcutCallback(this::onKeyDownEvent);\n+\n+        //KOGITO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bcb39711599403dead440a04c3e8d5465075f1a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMTU3Mg==", "bodyText": "agree - on the core modules there should be no reference to kogito (eg: KogitoKeyPress)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r401231572", "createdAt": "2020-03-31T21:40:01Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java", "diffHunk": "@@ -117,6 +120,29 @@ public LocationControlImpl(final CanvasCommandFactory<AbstractCanvasHandler> can\n     public void bind(final EditorSession session) {\n         // Keyboard event handling.\n         session.getKeyboardControl().addKeyShortcutCallback(this::onKeyDownEvent);\n+\n+        //KOGITO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODE0MA=="}, "originalCommit": {"oid": "5bcb39711599403dead440a04c3e8d5465075f1a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzAxODI2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozODo0NVrOF28fCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozODo0NVrOF28fCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODQxMQ==", "bodyText": "I don't think we should litter non kogito modules with dependencies on kogito modules. BPMN and DMN have two clear codebases; Business Central and kogito. Only the existing 'kogitomodules should have additional dependencies onkogito` added.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393158411", "createdAt": "2020-03-16T16:38:45Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/pom.xml", "diffHunk": "@@ -93,6 +93,11 @@\n       <scope>provided</scope>\n     </dependency>\n \n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bcb39711599403dead440a04c3e8d5465075f1a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzAyMzI1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo0MDowMFrOF28iLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo0MDowMFrOF28iLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1OTIxNA==", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393159214", "createdAt": "2020-03-16T16:40:00Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bcb39711599403dead440a04c3e8d5465075f1a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzAyMzk4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/shortcut/KeyboardShortcut.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo0MDowOFrOF28imQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo0MDowOFrOF28imQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1OTMyMQ==", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393159321", "createdAt": "2020-03-16T16:40:08Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/shortcut/KeyboardShortcut.java", "diffHunk": "@@ -40,4 +41,12 @@\n \n     void executeAction(final H canvasHandler,\n                        final String selectedNodeId);\n+\n+    String getKogitoCombination();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bcb39711599403dead440a04c3e8d5465075f1a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzAyNTc3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo0MDozNVrOF28jtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjo0MDozNVrOF28jtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1OTYwNg==", "bodyText": "I don't think we should litter non kogito code with kogito terms.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r393159606", "createdAt": "2020-03-16T16:40:35Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandler.java", "diffHunk": "@@ -52,9 +65,82 @@\n \n     public KeyEventHandler addKeyShortcutCallback(final KeyboardControl.KeyShortcutCallback shortcutCallback) {\n         this.shortcutCallbacks.add(shortcutCallback);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bcb39711599403dead440a04c3e8d5465075f1a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODI5NDc3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo1NTo1OVrOF7t-qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo1NTo0OVrOGZKpOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MzYyNw==", "bodyText": "If this can be moved to -stunner-kogito-api I'd be happy.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398163627", "createdAt": "2020-03-25T20:55:59Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNjk2NQ==", "bodyText": "See comment below.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398216965", "createdAt": "2020-03-25T22:47:11Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MzYyNw=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MTk3Nw==", "bodyText": "https://issues.redhat.com/browse/KOGITO-2271", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r429041977", "createdAt": "2020-05-22T04:55:49Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MzYyNw=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODI5NTMyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo1NjowOVrOF7t_CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo0NzowOVrOF7xO-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MzcyMQ==", "bodyText": "If this can be moved to -stunner-kogito-client I'd be happy.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398163721", "createdAt": "2020-03-25T20:56:09Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {\n+\n+        KeyboardShortcutsApiOpts getOpts();\n+\n+        KeyboardEvent.Key[] getKeyCombination();\n+\n+        String getLabel();\n+    }\n+\n+    class KogitoKeyPress implements KogitoKeyShortcutCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNjk1NA==", "bodyText": "See comment below.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398216954", "createdAt": "2020-03-25T22:47:09Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {\n+\n+        KeyboardShortcutsApiOpts getOpts();\n+\n+        KeyboardEvent.Key[] getKeyCombination();\n+\n+        String getLabel();\n+    }\n+\n+    class KogitoKeyPress implements KogitoKeyShortcutCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2MzcyMQ=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODI5NjE3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo1NjoyNFrOF7t_iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMjo0NzoxNlrOF7xPKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mzg1MQ==", "bodyText": "If this can be moved to -stunner-kogito-client I'd be happy.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398163851", "createdAt": "2020-03-25T20:56:24Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {\n+\n+        KeyboardShortcutsApiOpts getOpts();\n+\n+        KeyboardEvent.Key[] getKeyCombination();\n+\n+        String getLabel();\n+    }\n+\n+    class KogitoKeyPress implements KogitoKeyShortcutCallback {\n+\n+        private KeyboardEvent.Key[] combination;\n+        private String label;\n+        private Runnable onKeyDown;\n+        private KeyboardShortcutsApiOpts opts;\n+\n+        public KogitoKeyPress() {\n+        }\n+\n+        public KogitoKeyPress(final KeyboardEvent.Key[] combination, final String label, final Runnable onKeyDown) {\n+            this(combination, label, onKeyDown, KeyboardShortcutsApiOpts.DEFAULT);\n+        }\n+\n+        public KogitoKeyPress(final KeyboardEvent.Key[] combination, final String label, final Runnable onKeyDown, final KeyboardShortcutsApiOpts opts) {\n+            this.combination = combination;\n+            this.label = label;\n+            this.onKeyDown = onKeyDown;\n+            this.opts = opts;\n+        }\n+\n+        @Override\n+        public final void onKeyShortcut(final KeyboardEvent.Key... keys) {\n+            onKeyDown();\n+        }\n+\n+        @Override\n+        public final void onKeyUp(final KeyboardEvent.Key key) {\n+            throw new RuntimeException(\"Keyup shouldn't be called on KeyPress events\");\n+        }\n+\n+        @Override\n+        public KeyboardEvent.Key[] getKeyCombination() {\n+            return combination;\n+        }\n+\n+        @Override\n+        public String getLabel() {\n+            return label;\n+        }\n+\n+        public void onKeyDown() {\n+            onKeyDown.run();\n+        }\n+\n+        @Override\n+        public KeyboardShortcutsApiOpts getOpts() {\n+            return opts;\n+        }\n+    }\n+\n+    class KogitoKeyShortcutKeyDownThenUp implements KogitoKeyShortcutCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNzAwMg==", "bodyText": "See comment below.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398217002", "createdAt": "2020-03-25T22:47:16Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {\n+\n+        KeyboardShortcutsApiOpts getOpts();\n+\n+        KeyboardEvent.Key[] getKeyCombination();\n+\n+        String getLabel();\n+    }\n+\n+    class KogitoKeyPress implements KogitoKeyShortcutCallback {\n+\n+        private KeyboardEvent.Key[] combination;\n+        private String label;\n+        private Runnable onKeyDown;\n+        private KeyboardShortcutsApiOpts opts;\n+\n+        public KogitoKeyPress() {\n+        }\n+\n+        public KogitoKeyPress(final KeyboardEvent.Key[] combination, final String label, final Runnable onKeyDown) {\n+            this(combination, label, onKeyDown, KeyboardShortcutsApiOpts.DEFAULT);\n+        }\n+\n+        public KogitoKeyPress(final KeyboardEvent.Key[] combination, final String label, final Runnable onKeyDown, final KeyboardShortcutsApiOpts opts) {\n+            this.combination = combination;\n+            this.label = label;\n+            this.onKeyDown = onKeyDown;\n+            this.opts = opts;\n+        }\n+\n+        @Override\n+        public final void onKeyShortcut(final KeyboardEvent.Key... keys) {\n+            onKeyDown();\n+        }\n+\n+        @Override\n+        public final void onKeyUp(final KeyboardEvent.Key key) {\n+            throw new RuntimeException(\"Keyup shouldn't be called on KeyPress events\");\n+        }\n+\n+        @Override\n+        public KeyboardEvent.Key[] getKeyCombination() {\n+            return combination;\n+        }\n+\n+        @Override\n+        public String getLabel() {\n+            return label;\n+        }\n+\n+        public void onKeyDown() {\n+            onKeyDown.run();\n+        }\n+\n+        @Override\n+        public KeyboardShortcutsApiOpts getOpts() {\n+            return opts;\n+        }\n+    }\n+\n+    class KogitoKeyShortcutKeyDownThenUp implements KogitoKeyShortcutCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2Mzg1MQ=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2ODMwMDk3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo1Nzo1MFrOF7uCkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjoyNzowMFrOF--NgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw==", "bodyText": "Is this really an alternative or is it the default implementation?\nI suspect annotating it @Alternative could give a runtime CDI/binding issue?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398164627", "createdAt": "2020-03-25T20:57:50Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+\n+import com.google.gwt.user.client.Timer;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyDownEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyUpEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyboardEvent;\n+\n+import static org.kie.soup.commons.validation.PortablePreconditions.checkNotNull;\n+\n+/**\n+ * A helper class for component that listen to keyboard events.\n+ * It provides keyboard shortcuts support by listening for\n+ * multiple key events.\n+ */\n+@Dependent\n+@Alternative", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNjkwNQ==", "bodyText": "Yes, exactly. That was my question on #3221 (comment). This one is more a default implementation than an Alternative, but I couldn't figure out a way to do that. Can you point me to somewhere where something like that is done? It'd be really helpful.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398216905", "createdAt": "2020-03-25T22:47:00Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+\n+import com.google.gwt.user.client.Timer;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyDownEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyUpEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyboardEvent;\n+\n+import static org.kie.soup.commons.validation.PortablePreconditions.checkNotNull;\n+\n+/**\n+ * A helper class for component that listen to keyboard events.\n+ * It provides keyboard shortcuts support by listening for\n+ * multiple key events.\n+ */\n+@Dependent\n+@Alternative", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNjc2Ng==", "bodyText": "@manstis ^", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398626766", "createdAt": "2020-03-26T14:42:05Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+\n+import com.google.gwt.user.client.Timer;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyDownEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyUpEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyboardEvent;\n+\n+import static org.kie.soup.commons.validation.PortablePreconditions.checkNotNull;\n+\n+/**\n+ * A helper class for component that listen to keyboard events.\n+ * It provides keyboard shortcuts support by listening for\n+ * multiple key events.\n+ */\n+@Dependent\n+@Alternative", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyMzIyMg==", "bodyText": "@tiagobento OK, then you can simply remove the @Alternative annotation and Java's CDI will discover this class and use it as the default implementation.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398723222", "createdAt": "2020-03-26T16:42:56Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+\n+import com.google.gwt.user.client.Timer;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyDownEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyUpEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyboardEvent;\n+\n+import static org.kie.soup.commons.validation.PortablePreconditions.checkNotNull;\n+\n+/**\n+ * A helper class for component that listen to keyboard events.\n+ * It provides keyboard shortcuts support by listening for\n+ * multiple key events.\n+ */\n+@Dependent\n+@Alternative", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1NDg3OA==", "bodyText": "@manstis Uau, really? That's nice (and easy \ud83e\udd29). So just to be clear, we have 2 implementations --. Kogito and non-Kogito. If only the Kogito implementation has the @Alternative annotation, then on non-Kogito webapps, there will only be one implementation, which is fine and will work. But on Kogito webapps I have to enable the alternative. This will will make CDI ignore the non-Kogito implementation and inject the enabled-via-alternatives Kogito implementation!?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398754878", "createdAt": "2020-03-26T17:25:44Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+\n+import com.google.gwt.user.client.Timer;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyDownEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyUpEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyboardEvent;\n+\n+import static org.kie.soup.commons.validation.PortablePreconditions.checkNotNull;\n+\n+/**\n+ * A helper class for component that listen to keyboard events.\n+ * It provides keyboard shortcuts support by listening for\n+ * multiple key events.\n+ */\n+@Dependent\n+@Alternative", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg3OTI3NQ==", "bodyText": "Correct.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r398879275", "createdAt": "2020-03-26T20:43:23Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+\n+import com.google.gwt.user.client.Timer;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyDownEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyUpEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyboardEvent;\n+\n+import static org.kie.soup.commons.validation.PortablePreconditions.checkNotNull;\n+\n+/**\n+ * A helper class for component that listen to keyboard events.\n+ * It provides keyboard shortcuts support by listening for\n+ * multiple key events.\n+ */\n+@Dependent\n+@Alternative", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5Mzk0OA==", "bodyText": "@manstis Hi! So I did a test like you suggested and removed the @Alternative from the non-Kogito implementations. It compiles okay, but on Kogito editors, there's a runtime error saying that there are ambiguous dependency resolutions. Am I missing something?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r401093948", "createdAt": "2020-03-31T17:37:24Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+\n+import com.google.gwt.user.client.Timer;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyDownEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyUpEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyboardEvent;\n+\n+import static org.kie.soup.commons.validation.PortablePreconditions.checkNotNull;\n+\n+/**\n+ * A helper class for component that listen to keyboard events.\n+ * It provides keyboard shortcuts support by listening for\n+ * multiple key events.\n+ */\n+@Dependent\n+@Alternative", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NTI5Ng==", "bodyText": "Hi @tiagobento following your comment above; I cloned these PRs again and deleted @Alternative from org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard.KeyEventHandlerImpl (as this is the default implementation in Stunner). I see you've enabled the alternative here and here so did not need to make any other local changes.\nI then compiled it all again and launched kie-wb-common-stunner-bpmn-kogito-runtime with mvn clean gwt:run. It worked fine. No errors relating to ambiguous dependencies. I also tested kie-wb-common-dmn-webapp-kogito-runtime and that was OK too.\nPerhaps you was lucky enough to have local/environmental/cache issues?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r401575296", "createdAt": "2020-04-01T12:27:00Z", "author": {"login": "manstis"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.PreDestroy;\n+import javax.enterprise.context.Dependent;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Alternative;\n+\n+import com.google.gwt.user.client.Timer;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyDownEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyUpEvent;\n+import org.kie.workbench.common.stunner.core.client.event.keyboard.KeyboardEvent;\n+\n+import static org.kie.soup.commons.validation.PortablePreconditions.checkNotNull;\n+\n+/**\n+ * A helper class for component that listen to keyboard events.\n+ * It provides keyboard shortcuts support by listening for\n+ * multiple key events.\n+ */\n+@Dependent\n+@Alternative", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE2NDYyNw=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODI0NTA0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTozNzozNlrOF-pKhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoxNjozMFrOGYouUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMDQ2OQ==", "bodyText": "missing i18n", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r401230469", "createdAt": "2020-03-31T21:37:36Z", "author": {"login": "romartin"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "diffHunk": "@@ -68,4 +67,14 @@ private boolean selectedNodeIsInput(final Element selectedElement) {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n+\n+    @Override\n+    public KeyboardEvent.Key[] getKeyCombination() {\n+        return new KeyboardEvent.Key[]{D};\n+    }\n+\n+    @Override\n+    public String getLabel() {\n+        return \"Append Decision\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDY3MQ==", "bodyText": "@romartin Can you point me to a class that resolves i18n keys that could be used here?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r421654671", "createdAt": "2020-05-07T16:59:14Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "diffHunk": "@@ -68,4 +67,14 @@ private boolean selectedNodeIsInput(final Element selectedElement) {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n+\n+    @Override\n+    public KeyboardEvent.Key[] getKeyCombination() {\n+        return new KeyboardEvent.Key[]{D};\n+    }\n+\n+    @Override\n+    public String getLabel() {\n+        return \"Append Decision\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMDQ2OQ=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1Njg2NA==", "bodyText": "Btw this string will only appear on the Kogito editors.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r421656864", "createdAt": "2020-05-07T17:02:44Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "diffHunk": "@@ -68,4 +67,14 @@ private boolean selectedNodeIsInput(final Element selectedElement) {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n+\n+    @Override\n+    public KeyboardEvent.Key[] getKeyCombination() {\n+        return new KeyboardEvent.Key[]{D};\n+    }\n+\n+    @Override\n+    public String getLabel() {\n+        return \"Append Decision\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMDQ2OQ=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NjIyNA==", "bodyText": "One of the ways I recall is a TranslationService, see its usage here:\nhttps://github.com/kiegroup/kie-wb-common/blob/master/kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/included/imports/messages/IncludedModelErrorMessageFactory.java", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r428486224", "createdAt": "2020-05-21T07:16:30Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/canvas/controls/keyboard/shortcut/AppendDecisionShortcut.java", "diffHunk": "@@ -68,4 +67,14 @@ private boolean selectedNodeIsInput(final Element selectedElement) {\n     public boolean canAppendNodeOfDefinition(final Object definition) {\n         return definition instanceof Decision;\n     }\n+\n+    @Override\n+    public KeyboardEvent.Key[] getKeyCombination() {\n+        return new KeyboardEvent.Key[]{D};\n+    }\n+\n+    @Override\n+    public String getLabel() {\n+        return \"Append Decision\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIzMDQ2OQ=="}, "originalCommit": {"oid": "50736eafd47932ffaa3f7752c28715c0047c5d9d"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODYyNzY1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasShortcutsControl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzoyMTowOFrOGYo1hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxODoxOToyOVrOGY9s0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4ODA3MA==", "bodyText": "Could we please add javadoc as we did for DMNCanvasShortcutsControlProxy?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r428488070", "createdAt": "2020-05-21T07:21:08Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasShortcutsControl.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.client.session;\n+\n+import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.canvas.controls.CanvasControl;\n+import org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard.KeyboardControl;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+\n+public interface DMNCanvasShortcutsControl extends CanvasControl<AbstractCanvasHandler>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2630bf6ec4158d76169017975a3b701b2a01d93c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODgyOTkwNw==", "bodyText": "Sure.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r428829907", "createdAt": "2020-05-21T18:19:29Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasShortcutsControl.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.client.session;\n+\n+import org.kie.workbench.common.stunner.core.client.canvas.AbstractCanvasHandler;\n+import org.kie.workbench.common.stunner.core.client.canvas.controls.CanvasControl;\n+import org.kie.workbench.common.stunner.core.client.canvas.controls.keyboard.KeyboardControl;\n+import org.kie.workbench.common.stunner.core.client.session.impl.EditorSession;\n+\n+public interface DMNCanvasShortcutsControl extends CanvasControl<AbstractCanvasHandler>,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4ODA3MA=="}, "originalCommit": {"oid": "2630bf6ec4158d76169017975a3b701b2a01d93c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODY1ODQxOnYy", "diffSide": "LEFT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNzozMzoxMFrOGYpISg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDowNjo0M1rOGY0JYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5Mjg3NA==", "bodyText": "Could you please explain why this test needs to be removed and how the coverage is ensured?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r428492874", "createdAt": "2020-05-21T07:33:10Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -238,43 +237,7 @@ public void testBusinessKnowledgeModel() throws Exception {\n                 .ignoreWhitespace()\n                 .areIdentical();\n     }\n-\n-    @Test\n-    public void testCopyAndPaste() throws Exception {\n-        final String source = loadResource(\"business-knowledge-model.xml\");\n-        setContent(source);\n-\n-        expandDecisionNavigatorDock();\n-\n-        final String nodeName = \"BusinessKnowledgeModel-1\";\n-        final String copiedNodeName = \"BusinessKnowledgeModel-2\";\n-        waitOperation()\n-                .withMessage(format(NOT_PRESENT_IN_NAVIGATOR, nodeName))\n-                .until(element(NODE, nodeName))\n-                .click();\n-\n-        final WebElement canvas = waitOperation()\n-                .withMessage(format(NOT_PRESENT_IN_NAVIGATOR, \"canvas\"))\n-                .until(presenceOfElementLocated(xpath(CANVAS)));\n-\n-        final Actions actions = new Actions(driver);\n-        actions.keyDown(Keys.CONTROL).sendKeys(\"c\").keyUp(Keys.CONTROL).perform();\n-        actions.keyDown(canvas, Keys.CONTROL).sendKeys(\"v\").keyUp(Keys.CONTROL).perform();\n-\n-        collapseDecisionNavigatorDock();\n-\n-        final String actual = getContent();\n-        XmlAssert.assertThat(actual)\n-                .withNamespaceContext(NAMESPACES)\n-                .valueByXPath(\"count(//dmn:businessKnowledgeModel[@name='\" + nodeName + \"'])\")\n-                .isEqualTo(1);\n-\n-        XmlAssert.assertThat(actual)\n-                .withNamespaceContext(NAMESPACES)\n-                .valueByXPath(\"count(//dmn:businessKnowledgeModel[@name='\" + copiedNodeName + \"'])\")\n-                .isEqualTo(1);\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2630bf6ec4158d76169017975a3b701b2a01d93c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY3MzM3Ng==", "bodyText": "Copy/paste has moved from from the editors, to kogito-tooling. That means that it's not possible to use these shortcuts on this editors in isolation, since they're built targeting Kogito. To ensure coverage, we'll have a manual test case in our release sanity checks for now.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r428673376", "createdAt": "2020-05-21T14:06:43Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -238,43 +237,7 @@ public void testBusinessKnowledgeModel() throws Exception {\n                 .ignoreWhitespace()\n                 .areIdentical();\n     }\n-\n-    @Test\n-    public void testCopyAndPaste() throws Exception {\n-        final String source = loadResource(\"business-knowledge-model.xml\");\n-        setContent(source);\n-\n-        expandDecisionNavigatorDock();\n-\n-        final String nodeName = \"BusinessKnowledgeModel-1\";\n-        final String copiedNodeName = \"BusinessKnowledgeModel-2\";\n-        waitOperation()\n-                .withMessage(format(NOT_PRESENT_IN_NAVIGATOR, nodeName))\n-                .until(element(NODE, nodeName))\n-                .click();\n-\n-        final WebElement canvas = waitOperation()\n-                .withMessage(format(NOT_PRESENT_IN_NAVIGATOR, \"canvas\"))\n-                .until(presenceOfElementLocated(xpath(CANVAS)));\n-\n-        final Actions actions = new Actions(driver);\n-        actions.keyDown(Keys.CONTROL).sendKeys(\"c\").keyUp(Keys.CONTROL).perform();\n-        actions.keyDown(canvas, Keys.CONTROL).sendKeys(\"v\").keyUp(Keys.CONTROL).perform();\n-\n-        collapseDecisionNavigatorDock();\n-\n-        final String actual = getContent();\n-        XmlAssert.assertThat(actual)\n-                .withNamespaceContext(NAMESPACES)\n-                .valueByXPath(\"count(//dmn:businessKnowledgeModel[@name='\" + nodeName + \"'])\")\n-                .isEqualTo(1);\n-\n-        XmlAssert.assertThat(actual)\n-                .withNamespaceContext(NAMESPACES)\n-                .valueByXPath(\"count(//dmn:businessKnowledgeModel[@name='\" + copiedNodeName + \"'])\")\n-                .isEqualTo(1);\n-    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5Mjg3NA=="}, "originalCommit": {"oid": "2630bf6ec4158d76169017975a3b701b2a01d93c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA1NDUzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo1MDo0MVrOGZKk7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo1MDo0MVrOGZKk7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MDg3Nw==", "bodyText": "We shouldn't register kogito specific shortcuts ( those with label & description) via non kogito codebase https://issues.redhat.com/browse/KOGITO-2271", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r429040877", "createdAt": "2020-05-22T04:50:41Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/canvas/controls/LocationControlImpl.java", "diffHunk": "@@ -117,18 +127,40 @@ public LocationControlImpl(final CanvasCommandFactory<AbstractCanvasHandler> can\n     public void bind(final EditorSession session) {\n         // Keyboard event handling.\n         session.getKeyboardControl().addKeyShortcutCallback(this::onKeyDownEvent);\n+\n+        //KOGITO\n+\n+        //Kogito: Esc\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{ESC}, \"Move | Reset / unselect\", () -> getWiresManager().resetContext()));\n+\n+        //Kogito: Normal moves\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{ARROW_UP}, \"Move | Move selection down\", () -> moveNode(0, -NORMAL_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{ARROW_DOWN}, \"Move | Move selection down\", () -> moveNode(0, NORMAL_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{ARROW_LEFT}, \"Move | Move selection left\", () -> moveNode(-NORMAL_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{ARROW_RIGHT}, \"Move | Move selection right\", () -> moveNode(NORMAL_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));\n+\n+        //Kogito: Short moves\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{SHIFT, ARROW_UP}, \"Move | Slowly move selection up\", () -> moveNode(0, -SHORT_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{SHIFT, ARROW_DOWN}, \"Move | Slowly move selection down\", () -> moveNode(0, SHORT_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{SHIFT, ARROW_LEFT}, \"Move | Slowly move selection left\", () -> moveNode(-SHORT_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{SHIFT, ARROW_RIGHT}, \"Move | Slowly move selection right\", () -> moveNode(SHORT_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));\n+\n+        //Kogito: Large moves\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{CONTROL, ARROW_UP}, \"Move | Rapidly move selection up\", () -> moveNode(0, -LARGE_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{CONTROL, ARROW_DOWN}, \"Move | Rapidly move selection down\", () -> moveNode(0, LARGE_DISTANCE), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{CONTROL, ARROW_LEFT}, \"Move | Rapidly move selection left\", () -> moveNode(-LARGE_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));\n+        session.getKeyboardControl().addKeyShortcutCallback(new KogitoKeyPress(new Key[]{CONTROL, ARROW_RIGHT}, \"Move | Rapidly move selection right\", () -> moveNode(LARGE_DISTANCE, 0), new KeyboardShortcutsApiOpts(REPEAT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4744790258f2273fd0244582ac81a90c393ec8"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA2MDkzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/components/mediators/LienzoCanvasMediators.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo1NToyNVrOGZKo3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNDo1NToyNVrOGZKo3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MTg4NQ==", "bodyText": "Same here https://issues.redhat.com/browse/KOGITO-2271", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r429041885", "createdAt": "2020-05-22T04:55:25Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-client/kie-wb-common-stunner-lienzo/src/main/java/org/kie/workbench/common/stunner/client/lienzo/components/mediators/LienzoCanvasMediators.java", "diffHunk": "@@ -74,6 +87,10 @@ public LienzoCanvasMediators(final KeyEventHandler keyEventHandler,\n     }\n \n     public void init(final Supplier<LienzoCanvas> canvas) {\n+        keyEventHandler.addKeyShortcutCallback(new KogitoKeyShortcutKeyDownThenUp(new Key[]{Key.ALT}, \"Navigate | Hold and drag to Pan\", this::enablePan, this::clear));\n+        keyEventHandler.addKeyShortcutCallback(new KogitoKeyShortcutKeyDownThenUp(new Key[]{Key.CONTROL}, \"Navigate | Hold and scroll to Zoom\", this::enableZoom, this::clear));\n+        keyEventHandler.addKeyShortcutCallback(new KogitoKeyShortcutKeyDownThenUp(new Key[]{Key.CONTROL, Key.ALT}, \"Navigate | Hold to Preview\", this::enablePreview, this::clear));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4744790258f2273fd0244582ac81a90c393ec8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjA3MzYxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTowNDo0NlrOGZKwzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNjo0OToxM1rOGaGI6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MzkxNw==", "bodyText": "I think mentioned also in kogito-tooling part. I see crucial to document somewhere the needed format of label , which is \"Category of shortcut | Action description\". Even more clear would be split label into two parameters.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r429043917", "createdAt": "2020-05-22T05:04:46Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {\n+\n+        KeyboardShortcutsApiOpts getOpts();\n+\n+        KeyboardEvent.Key[] getKeyCombination();\n+\n+        String getLabel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e4744790258f2273fd0244582ac81a90c393ec8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAxNjc0Nw==", "bodyText": "Added Javadoc to this method and to the methods on the KeyboardShortcutsApi as well.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r430016747", "createdAt": "2020-05-25T16:49:13Z", "author": {"login": "tiagobento"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-api/kie-wb-common-stunner-client-api/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyboardControl.java", "diffHunk": "@@ -33,4 +34,122 @@\n         default void onKeyUp(final KeyboardEvent.Key key) {\n         }\n     }\n+\n+    //\n+    //\n+    //Kogito\n+\n+    interface KogitoKeyShortcutCallback extends KeyShortcutCallback {\n+\n+        KeyboardShortcutsApiOpts getOpts();\n+\n+        KeyboardEvent.Key[] getKeyCombination();\n+\n+        String getLabel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA0MzkxNw=="}, "originalCommit": {"oid": "5e4744790258f2273fd0244582ac81a90c393ec8"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDA3OTM2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOToyMTowNFrOGaV1-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOToyMTowNFrOGaV1-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NDA0Mw==", "bodyText": "2020", "url": "https://github.com/kiegroup/kie-wb-common/pull/3221#discussion_r430274043", "createdAt": "2020-05-26T09:21:04Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-core/kie-wb-common-stunner-commons/kie-wb-common-stunner-client-common/src/main/java/org/kie/workbench/common/stunner/core/client/canvas/controls/keyboard/KeyEventHandlerImpl.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2017 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c3d69f59ebef61fedd5d649ed8b9d08aee8a989"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1402, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}