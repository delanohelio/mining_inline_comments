{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMTQxMjQ1", "number": 3379, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzowODowNlrOEg7i1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoyMjoxOFrOEhikfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTY1NDYxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/DecisionNavigatorItemsProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzowODowNlrOHN-yRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MjozMVrOHRwUJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyMjIxMw==", "bodyText": "Could you help me here? so items now are ordered in a following manner? DRGs first and the rest after. Now one line above, we've added the separator for DRG, and after (to the original position with offset 1) we add DRDs separator. .... this suggests that we expect that there's just a single DRG in the items array? Cause from the stream sorting above it seems like there's a chance of more DRGs being present.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484422213", "createdAt": "2020-09-07T13:08:06Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/DecisionNavigatorItemsProvider.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.docks.navigator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.kie.workbench.common.dmn.api.definition.model.DRGElement;\n+import org.kie.workbench.common.dmn.api.definition.model.TextAnnotation;\n+import org.kie.workbench.common.dmn.api.graph.DMNDiagramUtils;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramTuple;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramsSession;\n+import org.kie.workbench.common.dmn.client.docks.navigator.factories.DecisionNavigatorItemFactory;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.definition.Definition;\n+\n+@ApplicationScoped\n+public class DecisionNavigatorItemsProvider {\n+\n+    static final String DRG = \"DRG\";\n+\n+    static final String DRDs = \"DRDs\";\n+\n+    private final DecisionNavigatorItemFactory itemFactory;\n+\n+    private final DMNDiagramsSession dmnDiagramsSession;\n+\n+    private final DMNDiagramUtils dmnDiagramUtils;\n+\n+    @Inject\n+    public DecisionNavigatorItemsProvider(final DecisionNavigatorItemFactory itemFactory,\n+                                          final DMNDiagramsSession dmnDiagramsSession,\n+                                          final DMNDiagramUtils dmnDiagramUtils) {\n+        this.itemFactory = itemFactory;\n+        this.dmnDiagramsSession = dmnDiagramsSession;\n+        this.dmnDiagramUtils = dmnDiagramUtils;\n+    }\n+\n+    public List<DecisionNavigatorItem> getItems() {\n+\n+        final List<DecisionNavigatorItem> items = new ArrayList<>();\n+\n+        dmnDiagramsSession.getDMNDiagrams().stream()\n+                .sorted((e1, e2) -> {\n+                    final String dmnElementName1 = e1.getDMDNDiagram().getName().getValue();\n+                    final String dmnElementName2 = e2.getDMDNDiagram().getName().getValue();\n+                    return DRG.equals(dmnElementName1) ? -1 : DRG.equals(dmnElementName2) ? 1 : 0;\n+                })\n+                .forEach(diagramTuple -> {\n+\n+                    final Diagram stunner = diagramTuple.getStunnerDiagram();\n+                    final DecisionNavigatorItem root = makeRoot(diagramTuple);\n+\n+                    items.add(root);\n+\n+                    getNodes(stunner).forEach(node -> makeItem(root, node));\n+                });\n+\n+        if (items.size() > 1) {\n+            items.add(0, itemFactory.makeSeparator(DRG));\n+            items.add(2, itemFactory.makeSeparator(DRDs));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3OTQyOA==", "bodyText": "I believe we already clarified this in the GChat. So, just reinforcing that each DMN model has a single DRG.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r488379428", "createdAt": "2020-09-15T04:42:31Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/DecisionNavigatorItemsProvider.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.docks.navigator;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.kie.workbench.common.dmn.api.definition.model.DRGElement;\n+import org.kie.workbench.common.dmn.api.definition.model.TextAnnotation;\n+import org.kie.workbench.common.dmn.api.graph.DMNDiagramUtils;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramTuple;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramsSession;\n+import org.kie.workbench.common.dmn.client.docks.navigator.factories.DecisionNavigatorItemFactory;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.definition.Definition;\n+\n+@ApplicationScoped\n+public class DecisionNavigatorItemsProvider {\n+\n+    static final String DRG = \"DRG\";\n+\n+    static final String DRDs = \"DRDs\";\n+\n+    private final DecisionNavigatorItemFactory itemFactory;\n+\n+    private final DMNDiagramsSession dmnDiagramsSession;\n+\n+    private final DMNDiagramUtils dmnDiagramUtils;\n+\n+    @Inject\n+    public DecisionNavigatorItemsProvider(final DecisionNavigatorItemFactory itemFactory,\n+                                          final DMNDiagramsSession dmnDiagramsSession,\n+                                          final DMNDiagramUtils dmnDiagramUtils) {\n+        this.itemFactory = itemFactory;\n+        this.dmnDiagramsSession = dmnDiagramsSession;\n+        this.dmnDiagramUtils = dmnDiagramUtils;\n+    }\n+\n+    public List<DecisionNavigatorItem> getItems() {\n+\n+        final List<DecisionNavigatorItem> items = new ArrayList<>();\n+\n+        dmnDiagramsSession.getDMNDiagrams().stream()\n+                .sorted((e1, e2) -> {\n+                    final String dmnElementName1 = e1.getDMDNDiagram().getName().getValue();\n+                    final String dmnElementName2 = e2.getDMDNDiagram().getName().getValue();\n+                    return DRG.equals(dmnElementName1) ? -1 : DRG.equals(dmnElementName2) ? 1 : 0;\n+                })\n+                .forEach(diagramTuple -> {\n+\n+                    final Diagram stunner = diagramTuple.getStunnerDiagram();\n+                    final DecisionNavigatorItem root = makeRoot(diagramTuple);\n+\n+                    items.add(root);\n+\n+                    getNodes(stunner).forEach(node -> makeItem(root, node));\n+                });\n+\n+        if (items.size() > 1) {\n+            items.add(0, itemFactory.makeSeparator(DRG));\n+            items.add(2, itemFactory.makeSeparator(DRDs));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyMjIxMw=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTcxOTgwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/drds/DMNDiagramTuple.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzoyODo1M1rOHN_Z2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo1Mjo0MFrOHPZ59g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjM0Ng==", "bodyText": "typo?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public DMNDiagramElement getDMDNDiagram() {\n          \n          \n            \n                public DMNDiagramElement getDMNDiagram() {", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484432346", "createdAt": "2020-09-07T13:28:53Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/drds/DMNDiagramTuple.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.docks.navigator.drds;\n+\n+import org.kie.workbench.common.dmn.api.definition.model.DMNDiagramElement;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+\n+public class DMNDiagramTuple {\n+\n+    private final Diagram stunnerDiagram;\n+\n+    private final DMNDiagramElement dmnDiagram;\n+\n+    public DMNDiagramTuple(final Diagram stunnerDiagram,\n+                           final DMNDiagramElement dmnDiagram) {\n+        this.stunnerDiagram = stunnerDiagram;\n+        this.dmnDiagram = dmnDiagram;\n+    }\n+\n+    public Diagram getStunnerDiagram() {\n+        return stunnerDiagram;\n+    }\n+\n+    public DMNDiagramElement getDMDNDiagram() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNTEyNg==", "bodyText": "Well spotted, thanks! Fixed.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r485915126", "createdAt": "2020-09-09T20:52:40Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/drds/DMNDiagramTuple.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.docks.navigator.drds;\n+\n+import org.kie.workbench.common.dmn.api.definition.model.DMNDiagramElement;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+\n+public class DMNDiagramTuple {\n+\n+    private final Diagram stunnerDiagram;\n+\n+    private final DMNDiagramElement dmnDiagram;\n+\n+    public DMNDiagramTuple(final Diagram stunnerDiagram,\n+                           final DMNDiagramElement dmnDiagram) {\n+        this.stunnerDiagram = stunnerDiagram;\n+        this.dmnDiagram = dmnDiagram;\n+    }\n+\n+    public Diagram getStunnerDiagram() {\n+        return stunnerDiagram;\n+    }\n+\n+    public DMNDiagramElement getDMDNDiagram() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzMjM0Ng=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTgxNzAwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/drds/DMNDiagramsSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzo1Nzo0MVrOHOAT6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo1NToyOVrOHPZ_4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ0NzIxMA==", "bodyText": "not sure about if dictated by naming conventions, but for these cases it might be a good idea to consider the abbreviation a single word when forming camelcase name ... getDrgDmnDiagramElement", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484447210", "createdAt": "2020-09-07T13:57:41Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/drds/DMNDiagramsSession.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.docks.navigator.drds;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.kie.workbench.common.dmn.api.definition.model.DMNDiagramElement;\n+import org.kie.workbench.common.dmn.api.definition.model.DRGElement;\n+import org.kie.workbench.common.dmn.api.definition.model.Import;\n+import org.kie.workbench.common.dmn.client.graph.DMNGraphUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.diagram.GraphsProvider;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.uberfire.backend.vfs.Path;\n+\n+import static java.util.Collections.emptyList;\n+\n+@ApplicationScoped\n+public class DMNDiagramsSession implements GraphsProvider {\n+\n+    private ManagedInstance<DMNDiagramsSessionState> dmnDiagramsSessionStates;\n+\n+    private DMNGraphUtils dmnGraphUtils;\n+\n+    private Map<String, DMNDiagramsSessionState> dmnSessionStatesByPathURI = new HashMap<>();\n+\n+    public DMNDiagramsSession() {\n+        // CDI\n+    }\n+\n+    @Inject\n+    public DMNDiagramsSession(final ManagedInstance<DMNDiagramsSessionState> dmnDiagramsSessionStates,\n+                              final DMNGraphUtils dmnGraphUtils) {\n+        this.dmnDiagramsSessionStates = dmnDiagramsSessionStates;\n+        this.dmnGraphUtils = dmnGraphUtils;\n+    }\n+\n+    public void destroyState(final Metadata metadata) {\n+        dmnSessionStatesByPathURI.remove(getSessionKey(metadata));\n+    }\n+\n+    public DMNDiagramsSessionState setState(final Metadata metadata,\n+                                            final Map<String, Diagram> diagramsByDiagramElementId,\n+                                            final Map<String, DMNDiagramElement> dmnDiagramsByDiagramElementId) {\n+\n+        final DMNDiagramsSessionState state = dmnDiagramsSessionStates.get();\n+\n+        state.getDiagramsByDiagramId().putAll(diagramsByDiagramElementId);\n+        state.getDMNDiagramsByDiagramId().putAll(dmnDiagramsByDiagramElementId);\n+\n+        dmnSessionStatesByPathURI.put(getSessionKey(metadata), state);\n+\n+        return state;\n+    }\n+\n+    public DMNDiagramsSessionState getSessionState() {\n+        return dmnSessionStatesByPathURI.get(getCurrentSessionKey());\n+    }\n+\n+    public String getCurrentSessionKey() {\n+        return Optional\n+                .ofNullable(dmnGraphUtils.getDiagram())\n+                .map(diagram -> getSessionKey(diagram.getMetadata()))\n+                .orElse(\"\");\n+    }\n+\n+    public String getSessionKey(final Metadata metadata) {\n+        return Optional\n+                .ofNullable(metadata)\n+                .map(Metadata::getPath)\n+                .map(Path::toURI)\n+                .orElse(\"\");\n+    }\n+\n+    public void add(final DMNDiagramElement dmnDiagram,\n+                    final Diagram stunnerDiagram) {\n+        final String diagramId = dmnDiagram.getId().getValue();\n+        getSessionState().getDiagramsByDiagramId().put(diagramId, stunnerDiagram);\n+        getSessionState().getDMNDiagramsByDiagramId().put(diagramId, dmnDiagram);\n+    }\n+\n+    public void remove(final DMNDiagramElement dmnDiagram) {\n+        final String diagramId = dmnDiagram.getId().getValue();\n+        getSessionState().getDiagramsByDiagramId().remove(diagramId);\n+        getSessionState().getDMNDiagramsByDiagramId().remove(diagramId);\n+    }\n+\n+    @Override\n+    public Diagram getDiagram(final String dmnDiagramElementId) {\n+        return getSessionState().getDiagram(dmnDiagramElementId);\n+    }\n+\n+    public DMNDiagramElement getDMNDiagramElement(final String dmnDiagramElementId) {\n+        return getSessionState().getDMNDiagramElement(dmnDiagramElementId);\n+    }\n+\n+    public DMNDiagramTuple getDiagramTuple(final String dmnDiagramElementId) {\n+        return getSessionState().getDiagramTuple(dmnDiagramElementId);\n+    }\n+\n+    public List<DMNDiagramTuple> getDMNDiagrams() {\n+        return getSessionState().getDMNDiagrams();\n+    }\n+\n+    public void onDMNDiagramSelected(final @Observes DMNDiagramSelected selected) {\n+        final DMNDiagramElement selectedDiagramElement = selected.getDiagramElement();\n+        if (belongsToCurrentSessionState(selectedDiagramElement)) {\n+            getSessionState().setCurrentDMNDiagramElement(selectedDiagramElement);\n+        }\n+    }\n+\n+    public boolean belongsToCurrentSessionState(final DMNDiagramElement diagramElement) {\n+        return getDMNDiagramElement(diagramElement.getId().getValue()) != null;\n+    }\n+\n+    public Optional<DMNDiagramElement> getCurrentDMNDiagramElement() {\n+        return getSessionState().getCurrentDMNDiagramElement();\n+    }\n+\n+    public Optional<Diagram> getCurrentDiagram() {\n+        return getSessionState().getCurrentDiagram();\n+    }\n+\n+    public Diagram getDRGDiagram() {\n+        return getSessionState().getDRGDiagram();\n+    }\n+\n+    public DMNDiagramElement getDRGDMNDiagramElement() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNjY0MQ==", "bodyText": "Yeah, I generally prefer to follow the convention of getDmnDiagrams, instead of getDMNDiagrams, it's more readable indeed. But, on kie-wb-common-dmn, the current convention is getDMNDiagrams.\nWe can change it in the future, but for this PR I just named the method from getDRGDMNDiagramElement to getDRGDiagramElement . I believe it improves the readability a little bit.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r485916641", "createdAt": "2020-09-09T20:55:29Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/drds/DMNDiagramsSession.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.docks.navigator.drds;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.jboss.errai.ioc.client.api.ManagedInstance;\n+import org.kie.workbench.common.dmn.api.definition.model.DMNDiagramElement;\n+import org.kie.workbench.common.dmn.api.definition.model.DRGElement;\n+import org.kie.workbench.common.dmn.api.definition.model.Import;\n+import org.kie.workbench.common.dmn.client.graph.DMNGraphUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.diagram.GraphsProvider;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.uberfire.backend.vfs.Path;\n+\n+import static java.util.Collections.emptyList;\n+\n+@ApplicationScoped\n+public class DMNDiagramsSession implements GraphsProvider {\n+\n+    private ManagedInstance<DMNDiagramsSessionState> dmnDiagramsSessionStates;\n+\n+    private DMNGraphUtils dmnGraphUtils;\n+\n+    private Map<String, DMNDiagramsSessionState> dmnSessionStatesByPathURI = new HashMap<>();\n+\n+    public DMNDiagramsSession() {\n+        // CDI\n+    }\n+\n+    @Inject\n+    public DMNDiagramsSession(final ManagedInstance<DMNDiagramsSessionState> dmnDiagramsSessionStates,\n+                              final DMNGraphUtils dmnGraphUtils) {\n+        this.dmnDiagramsSessionStates = dmnDiagramsSessionStates;\n+        this.dmnGraphUtils = dmnGraphUtils;\n+    }\n+\n+    public void destroyState(final Metadata metadata) {\n+        dmnSessionStatesByPathURI.remove(getSessionKey(metadata));\n+    }\n+\n+    public DMNDiagramsSessionState setState(final Metadata metadata,\n+                                            final Map<String, Diagram> diagramsByDiagramElementId,\n+                                            final Map<String, DMNDiagramElement> dmnDiagramsByDiagramElementId) {\n+\n+        final DMNDiagramsSessionState state = dmnDiagramsSessionStates.get();\n+\n+        state.getDiagramsByDiagramId().putAll(diagramsByDiagramElementId);\n+        state.getDMNDiagramsByDiagramId().putAll(dmnDiagramsByDiagramElementId);\n+\n+        dmnSessionStatesByPathURI.put(getSessionKey(metadata), state);\n+\n+        return state;\n+    }\n+\n+    public DMNDiagramsSessionState getSessionState() {\n+        return dmnSessionStatesByPathURI.get(getCurrentSessionKey());\n+    }\n+\n+    public String getCurrentSessionKey() {\n+        return Optional\n+                .ofNullable(dmnGraphUtils.getDiagram())\n+                .map(diagram -> getSessionKey(diagram.getMetadata()))\n+                .orElse(\"\");\n+    }\n+\n+    public String getSessionKey(final Metadata metadata) {\n+        return Optional\n+                .ofNullable(metadata)\n+                .map(Metadata::getPath)\n+                .map(Path::toURI)\n+                .orElse(\"\");\n+    }\n+\n+    public void add(final DMNDiagramElement dmnDiagram,\n+                    final Diagram stunnerDiagram) {\n+        final String diagramId = dmnDiagram.getId().getValue();\n+        getSessionState().getDiagramsByDiagramId().put(diagramId, stunnerDiagram);\n+        getSessionState().getDMNDiagramsByDiagramId().put(diagramId, dmnDiagram);\n+    }\n+\n+    public void remove(final DMNDiagramElement dmnDiagram) {\n+        final String diagramId = dmnDiagram.getId().getValue();\n+        getSessionState().getDiagramsByDiagramId().remove(diagramId);\n+        getSessionState().getDMNDiagramsByDiagramId().remove(diagramId);\n+    }\n+\n+    @Override\n+    public Diagram getDiagram(final String dmnDiagramElementId) {\n+        return getSessionState().getDiagram(dmnDiagramElementId);\n+    }\n+\n+    public DMNDiagramElement getDMNDiagramElement(final String dmnDiagramElementId) {\n+        return getSessionState().getDMNDiagramElement(dmnDiagramElementId);\n+    }\n+\n+    public DMNDiagramTuple getDiagramTuple(final String dmnDiagramElementId) {\n+        return getSessionState().getDiagramTuple(dmnDiagramElementId);\n+    }\n+\n+    public List<DMNDiagramTuple> getDMNDiagrams() {\n+        return getSessionState().getDMNDiagrams();\n+    }\n+\n+    public void onDMNDiagramSelected(final @Observes DMNDiagramSelected selected) {\n+        final DMNDiagramElement selectedDiagramElement = selected.getDiagramElement();\n+        if (belongsToCurrentSessionState(selectedDiagramElement)) {\n+            getSessionState().setCurrentDMNDiagramElement(selectedDiagramElement);\n+        }\n+    }\n+\n+    public boolean belongsToCurrentSessionState(final DMNDiagramElement diagramElement) {\n+        return getDMNDiagramElement(diagramElement.getId().getValue()) != null;\n+    }\n+\n+    public Optional<DMNDiagramElement> getCurrentDMNDiagramElement() {\n+        return getSessionState().getCurrentDMNDiagramElement();\n+    }\n+\n+    public Optional<Diagram> getCurrentDiagram() {\n+        return getSessionState().getCurrentDiagram();\n+    }\n+\n+    public Diagram getDRGDiagram() {\n+        return getSessionState().getDRGDiagram();\n+    }\n+\n+    public DMNDiagramElement getDRGDMNDiagramElement() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ0NzIxMA=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTg1NTQzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/tree/DecisionNavigatorTreeView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDowNjowNFrOHOAsRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo1NTo0OVrOHPaAhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1MzQ0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public void onInputTextBluer(final BlurEvent event) {\n          \n          \n            \n                    public void onInputTextBlur(final BlurEvent event) {", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484453447", "createdAt": "2020-09-07T14:06:04Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/tree/DecisionNavigatorTreeView.java", "diffHunk": "@@ -247,11 +205,45 @@ public void onIconClick(final ClickEvent event) {\n             event.stopPropagation();\n         }\n \n-        @EventHandler(\"text\")\n-        public void onTextClick(final ClickEvent event) {\n+        @EventHandler(\"text-content\")\n+        public void onTextContentClick(final ClickEvent event) {\n             getItem().onClick();\n         }\n \n+        @EventHandler(\"input-text\")\n+        public void onInputTextKeyPress(final KeyDownEvent event) {\n+            if (event.getNativeEvent().getKeyCode() == 13) {\n+                save();\n+            }\n+        }\n+\n+        @EventHandler(\"input-text\")\n+        public void onInputTextBluer(final BlurEvent event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNjgwNw==", "bodyText": "Fixed! Thanks.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r485916807", "createdAt": "2020-09-09T20:55:49Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/tree/DecisionNavigatorTreeView.java", "diffHunk": "@@ -247,11 +205,45 @@ public void onIconClick(final ClickEvent event) {\n             event.stopPropagation();\n         }\n \n-        @EventHandler(\"text\")\n-        public void onTextClick(final ClickEvent event) {\n+        @EventHandler(\"text-content\")\n+        public void onTextContentClick(final ClickEvent event) {\n             getItem().onClick();\n         }\n \n+        @EventHandler(\"input-text\")\n+        public void onInputTextKeyPress(final KeyDownEvent event) {\n+            if (event.getNativeEvent().getKeyCode() == 13) {\n+                save();\n+            }\n+        }\n+\n+        @EventHandler(\"input-text\")\n+        public void onInputTextBluer(final BlurEvent event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1MzQ0Nw=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTg4MTg3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/docks/navigator/DecisionNavigatorPresenterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxNDoxOFrOHOA8Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMTo0MzozMlrOHPbWwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NzUwMg==", "bodyText": "why invoking refreshTreeView twice?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484457502", "createdAt": "2020-09-07T14:14:18Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/docks/navigator/DecisionNavigatorPresenterTest.java", "diffHunk": "@@ -204,202 +172,29 @@ public void testGetTreePresenter() {\n         assertEquals(treePresenter, presenter.getTreePresenter());\n     }\n \n-    @Test\n-    public void testGetHandler() {\n-\n-        final CanvasHandler expectedCanvasHandler = mock(CanvasHandler.class);\n-        doNothing().when(presenter).refreshTreeView();\n-        presenter.setHandler(expectedCanvasHandler);\n-\n-        final CanvasHandler actualCanvasHandler = presenter.getHandler();\n-\n-        assertEquals(expectedCanvasHandler, actualCanvasHandler);\n-    }\n-\n-    @Test\n-    public void testSetHandler() {\n-\n-        final CanvasHandler expectedCanvasHandler = mock(CanvasHandler.class);\n-        doNothing().when(presenter).refreshTreeView();\n-\n-        presenter.setHandler(expectedCanvasHandler);\n-\n-        verify(presenter).refreshTreeView();\n-        verify(presenter).refreshComponentsView();\n-        assertEquals(expectedCanvasHandler, presenter.getHandler());\n-    }\n-\n     @Test\n     public void testRefreshTreeView() {\n \n         final ArrayList<DecisionNavigatorItem> items = new ArrayList<>();\n         doReturn(items).when(presenter).getItems();\n \n+        presenter.disableRefreshHandlers();\n+        presenter.refreshTreeView();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzODg4MQ==", "bodyText": "Because, we're disabling invoking, then enabling and invoking. Thus, in the end of the test we're verifying that the setupItems(items) is called once (since the first invocation was disabled) :)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r485938881", "createdAt": "2020-09-09T21:43:32Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/docks/navigator/DecisionNavigatorPresenterTest.java", "diffHunk": "@@ -204,202 +172,29 @@ public void testGetTreePresenter() {\n         assertEquals(treePresenter, presenter.getTreePresenter());\n     }\n \n-    @Test\n-    public void testGetHandler() {\n-\n-        final CanvasHandler expectedCanvasHandler = mock(CanvasHandler.class);\n-        doNothing().when(presenter).refreshTreeView();\n-        presenter.setHandler(expectedCanvasHandler);\n-\n-        final CanvasHandler actualCanvasHandler = presenter.getHandler();\n-\n-        assertEquals(expectedCanvasHandler, actualCanvasHandler);\n-    }\n-\n-    @Test\n-    public void testSetHandler() {\n-\n-        final CanvasHandler expectedCanvasHandler = mock(CanvasHandler.class);\n-        doNothing().when(presenter).refreshTreeView();\n-\n-        presenter.setHandler(expectedCanvasHandler);\n-\n-        verify(presenter).refreshTreeView();\n-        verify(presenter).refreshComponentsView();\n-        assertEquals(expectedCanvasHandler, presenter.getHandler());\n-    }\n-\n     @Test\n     public void testRefreshTreeView() {\n \n         final ArrayList<DecisionNavigatorItem> items = new ArrayList<>();\n         doReturn(items).when(presenter).getItems();\n \n+        presenter.disableRefreshHandlers();\n+        presenter.refreshTreeView();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NzUwMg=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDE3NDI3OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/definition/model/TextAnnotation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNTo1MTowNlrOHODrBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0NToyMlrOHRwbUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUwMjI3OQ==", "bodyText": "Is there a reason not to match types?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484502279", "createdAt": "2020-09-07T15:51:06Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/definition/model/TextAnnotation.java", "diffHunk": "@@ -57,12 +58,18 @@\n         startElement = \"id\")\n public class TextAnnotation extends Artifact implements DMNViewDefinition<GeneralRectangleDimensionsSet>,\n                                                         HasText,\n+                                                        HasContentDefinitionId,\n                                                         DynamicReadOnly {\n \n     private static final String[] READONLY_FIELDS = {\"Description\", \"Text\", \"TextFormat\"};\n \n     protected boolean allowOnlyVisualChange;\n \n+    /**\n+     * Hold the {@link DMNDiagramElement} id for the {@link TextAnnotation} instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4MTI2NQ==", "bodyText": "I believe that you're proposing to create this relationship by using a DMNDiagramElement object, instead of the diagram id. It's an interesting suggestion. Personally, I prefer to keep this kind of reference on text annotations / DRG elements as light as possible.\nGiven our timeframe and the stability of this PR, I believe we can keep it as is for now, and if the code evolve in a direction we need more details about the DMN diagram elements, we can refactor text annotations / DRG elements on this direction :-)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r488381265", "createdAt": "2020-09-15T04:45:22Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/definition/model/TextAnnotation.java", "diffHunk": "@@ -57,12 +58,18 @@\n         startElement = \"id\")\n public class TextAnnotation extends Artifact implements DMNViewDefinition<GeneralRectangleDimensionsSet>,\n                                                         HasText,\n+                                                        HasContentDefinitionId,\n                                                         DynamicReadOnly {\n \n     private static final String[] READONLY_FIELDS = {\"Description\", \"Text\", \"TextFormat\"};\n \n     protected boolean allowOnlyVisualChange;\n \n+    /**\n+     * Hold the {@link DMNDiagramElement} id for the {@link TextAnnotation} instance.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUwMjI3OQ=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDIwMzI0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-backend/src/main/java/org/kie/workbench/common/dmn/backend/DMNContentServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNjowMzozOVrOHOD8pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo1Njo0NFrOHPaCTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUwNjc4OA==", "bodyText": "is there an expectation of reusing the method? If not it IMO adds unnecessary lines of code. But no big deal if you prefer this way.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484506788", "createdAt": "2020-09-07T16:03:39Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-backend/src/main/java/org/kie/workbench/common/dmn/backend/DMNContentServiceImpl.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.backend;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.guvnor.common.services.backend.util.CommentedOptionFactory;\n+import org.guvnor.common.services.project.model.Package;\n+import org.guvnor.common.services.project.model.WorkspaceProject;\n+import org.guvnor.common.services.shared.metadata.model.Metadata;\n+import org.guvnor.common.services.shared.metadata.model.Overview;\n+import org.jboss.errai.bus.server.annotations.Service;\n+import org.kie.workbench.common.dmn.api.DMNContentResource;\n+import org.kie.workbench.common.dmn.api.DMNContentService;\n+import org.kie.workbench.common.dmn.api.marshalling.DMNPathsHelper;\n+import org.kie.workbench.common.dmn.backend.common.DMNIOHelper;\n+import org.kie.workbench.common.services.backend.service.KieService;\n+import org.kie.workbench.common.services.shared.project.KieModule;\n+import org.kie.workbench.common.stunner.project.diagram.ProjectMetadata;\n+import org.kie.workbench.common.stunner.project.diagram.impl.ProjectMetadataImpl;\n+import org.uberfire.backend.server.util.Paths;\n+import org.uberfire.backend.vfs.Path;\n+import org.uberfire.java.nio.base.options.CommentedOption;\n+\n+@Service\n+@ApplicationScoped\n+public class DMNContentServiceImpl extends KieService<String> implements DMNContentService {\n+\n+    private final CommentedOptionFactory commentedOptionFactory;\n+\n+    private final DMNIOHelper dmnIOHelper;\n+\n+    private final DMNPathsHelper pathsHelper;\n+\n+    @Inject\n+    public DMNContentServiceImpl(final CommentedOptionFactory commentedOptionFactory,\n+                                 final DMNIOHelper dmnIOHelper,\n+                                 final DMNPathsHelper pathsHelper) {\n+        this.commentedOptionFactory = commentedOptionFactory;\n+        this.dmnIOHelper = dmnIOHelper;\n+        this.pathsHelper = pathsHelper;\n+    }\n+\n+    @Override\n+    public String getContent(final Path path) {\n+        return getSource(path);\n+    }\n+\n+    @Override\n+    public DMNContentResource getProjectContent(final Path path,\n+                                                final String defSetId) {\n+\n+        final String content = getSource(path);\n+        final String title = path.getFileName();\n+        final ProjectMetadata metadata = buildMetadataInstance(path, defSetId, title);\n+\n+        return new DMNContentResource(content, metadata);\n+    }\n+\n+    @Override\n+    public void saveContent(final Path path,\n+                            final String content,\n+                            final Metadata metadata,\n+                            final String comment) {\n+\n+        try {\n+            ioService.write(convertPath(path),\n+                            content,\n+                            getAttrs(path, metadata),\n+                            getCommentedOption(comment));\n+        } catch (final Exception e) {\n+            logger.error(\"Error while saving diagram.\", e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Path> getModelsPaths(final WorkspaceProject workspaceProject) {\n+        return pathsHelper.getModelsPaths(workspaceProject);\n+    }\n+\n+    @Override\n+    public List<Path> getDMNModelsPaths(final WorkspaceProject workspaceProject) {\n+        return pathsHelper.getDMNModelsPaths(workspaceProject);\n+    }\n+\n+    @Override\n+    public List<Path> getPMMLModelsPaths(final WorkspaceProject workspaceProject) {\n+        return pathsHelper.getPMMLModelsPaths(workspaceProject);\n+    }\n+\n+    @Override\n+    protected String constructContent(final Path path,\n+                                      final Overview _overview) {\n+        return getSource(path);\n+    }\n+\n+    @Override\n+    public String getSource(final Path path) {\n+        return loadPath(path).map(dmnIOHelper::isAsString).orElse(\"\");\n+    }\n+\n+    private CommentedOption getCommentedOption(final String comment) {\n+        return commentedOptionFactory.makeCommentedOption(comment);\n+    }\n+\n+    private Map<String, Object> getAttrs(final Path path,\n+                                         final Metadata metadata) {\n+        return Optional\n+                .ofNullable(metadata)\n+                .map(m -> metadataService.setUpAttributes(path, m))\n+                .orElse(new HashMap<>());\n+    }\n+\n+    private ProjectMetadata buildMetadataInstance(final Path path,\n+                                                  final String defSetId,\n+                                                  final String title) {\n+        final Package modulePackage = moduleService.resolvePackage(path);\n+        final KieModule kieModule = moduleService.resolveModule(path);\n+        return buildProjectMetadataInstance(path,\n+                                            title,\n+                                            defSetId,\n+                                            kieModule.getModuleName(),\n+                                            modulePackage,\n+                                            overviewLoader.loadOverview(path));\n+    }\n+\n+    private ProjectMetadata buildProjectMetadataInstance(final Path path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzI2MQ==", "bodyText": "I agree. Fixed! Thanks.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r485917261", "createdAt": "2020-09-09T20:56:44Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-backend/src/main/java/org/kie/workbench/common/dmn/backend/DMNContentServiceImpl.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.backend;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.guvnor.common.services.backend.util.CommentedOptionFactory;\n+import org.guvnor.common.services.project.model.Package;\n+import org.guvnor.common.services.project.model.WorkspaceProject;\n+import org.guvnor.common.services.shared.metadata.model.Metadata;\n+import org.guvnor.common.services.shared.metadata.model.Overview;\n+import org.jboss.errai.bus.server.annotations.Service;\n+import org.kie.workbench.common.dmn.api.DMNContentResource;\n+import org.kie.workbench.common.dmn.api.DMNContentService;\n+import org.kie.workbench.common.dmn.api.marshalling.DMNPathsHelper;\n+import org.kie.workbench.common.dmn.backend.common.DMNIOHelper;\n+import org.kie.workbench.common.services.backend.service.KieService;\n+import org.kie.workbench.common.services.shared.project.KieModule;\n+import org.kie.workbench.common.stunner.project.diagram.ProjectMetadata;\n+import org.kie.workbench.common.stunner.project.diagram.impl.ProjectMetadataImpl;\n+import org.uberfire.backend.server.util.Paths;\n+import org.uberfire.backend.vfs.Path;\n+import org.uberfire.java.nio.base.options.CommentedOption;\n+\n+@Service\n+@ApplicationScoped\n+public class DMNContentServiceImpl extends KieService<String> implements DMNContentService {\n+\n+    private final CommentedOptionFactory commentedOptionFactory;\n+\n+    private final DMNIOHelper dmnIOHelper;\n+\n+    private final DMNPathsHelper pathsHelper;\n+\n+    @Inject\n+    public DMNContentServiceImpl(final CommentedOptionFactory commentedOptionFactory,\n+                                 final DMNIOHelper dmnIOHelper,\n+                                 final DMNPathsHelper pathsHelper) {\n+        this.commentedOptionFactory = commentedOptionFactory;\n+        this.dmnIOHelper = dmnIOHelper;\n+        this.pathsHelper = pathsHelper;\n+    }\n+\n+    @Override\n+    public String getContent(final Path path) {\n+        return getSource(path);\n+    }\n+\n+    @Override\n+    public DMNContentResource getProjectContent(final Path path,\n+                                                final String defSetId) {\n+\n+        final String content = getSource(path);\n+        final String title = path.getFileName();\n+        final ProjectMetadata metadata = buildMetadataInstance(path, defSetId, title);\n+\n+        return new DMNContentResource(content, metadata);\n+    }\n+\n+    @Override\n+    public void saveContent(final Path path,\n+                            final String content,\n+                            final Metadata metadata,\n+                            final String comment) {\n+\n+        try {\n+            ioService.write(convertPath(path),\n+                            content,\n+                            getAttrs(path, metadata),\n+                            getCommentedOption(comment));\n+        } catch (final Exception e) {\n+            logger.error(\"Error while saving diagram.\", e);\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Path> getModelsPaths(final WorkspaceProject workspaceProject) {\n+        return pathsHelper.getModelsPaths(workspaceProject);\n+    }\n+\n+    @Override\n+    public List<Path> getDMNModelsPaths(final WorkspaceProject workspaceProject) {\n+        return pathsHelper.getDMNModelsPaths(workspaceProject);\n+    }\n+\n+    @Override\n+    public List<Path> getPMMLModelsPaths(final WorkspaceProject workspaceProject) {\n+        return pathsHelper.getPMMLModelsPaths(workspaceProject);\n+    }\n+\n+    @Override\n+    protected String constructContent(final Path path,\n+                                      final Overview _overview) {\n+        return getSource(path);\n+    }\n+\n+    @Override\n+    public String getSource(final Path path) {\n+        return loadPath(path).map(dmnIOHelper::isAsString).orElse(\"\");\n+    }\n+\n+    private CommentedOption getCommentedOption(final String comment) {\n+        return commentedOptionFactory.makeCommentedOption(comment);\n+    }\n+\n+    private Map<String, Object> getAttrs(final Path path,\n+                                         final Metadata metadata) {\n+        return Optional\n+                .ofNullable(metadata)\n+                .map(m -> metadataService.setUpAttributes(path, m))\n+                .orElse(new HashMap<>());\n+    }\n+\n+    private ProjectMetadata buildMetadataInstance(final Path path,\n+                                                  final String defSetId,\n+                                                  final String title) {\n+        final Package modulePackage = moduleService.resolvePackage(path);\n+        final KieModule kieModule = moduleService.resolveModule(path);\n+        return buildProjectMetadataInstance(path,\n+                                            title,\n+                                            defSetId,\n+                                            kieModule.getModuleName(),\n+                                            modulePackage,\n+                                            overviewLoader.loadOverview(path));\n+    }\n+\n+    private ProjectMetadata buildProjectMetadataInstance(final Path path,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUwNjc4OA=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjM2NjU5OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/factories/DecisionNavigatorItemFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDo1MDoyMVrOHOXcoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MzoxNlrOHRwVHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgyNjI3Mw==", "bodyText": "shouldn't we check here that uuid is actually in correct format?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484826273", "createdAt": "2020-09-08T10:50:21Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/factories/DecisionNavigatorItemFactory.java", "diffHunk": "@@ -51,4 +68,73 @@ public DecisionNavigatorItem makeItem(final Node<View, Edge> node) {\n \n         return baseItemFactory.makeItem(node, Type.ofExpressionNodeClassName(nodeClassName));\n     }\n+\n+    public DecisionNavigatorItem makeRoot(final DMNDiagramTuple diagramTuple) {\n+\n+        final DMNDiagramElement dmnDiagramElement = diagramTuple.getDMDNDiagram();\n+        final String uuid = dmnDiagramElement.getId().getValue();\n+        final String diagramName = dmnDiagramElement.getName().getValue();\n+        final String label;\n+        final boolean isDRG = isDRG(dmnDiagramElement);\n+\n+        if (isDRG) {\n+            final Graph graph = diagramTuple.getStunnerDiagram().getGraph();\n+            final Node<?, ?> rootNode = getRootNode(graph);\n+            label = getNodeName(rootNode);\n+        } else {\n+            label = diagramName;\n+        }\n+\n+        return navigatorItemBuilder()\n+                .withUUID(uuid)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3OTY3OA==", "bodyText": "This UUIDs are generated/managed by us, and at this context we don't need to process such checks :-)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r488379678", "createdAt": "2020-09-15T04:43:16Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/factories/DecisionNavigatorItemFactory.java", "diffHunk": "@@ -51,4 +68,73 @@ public DecisionNavigatorItem makeItem(final Node<View, Edge> node) {\n \n         return baseItemFactory.makeItem(node, Type.ofExpressionNodeClassName(nodeClassName));\n     }\n+\n+    public DecisionNavigatorItem makeRoot(final DMNDiagramTuple diagramTuple) {\n+\n+        final DMNDiagramElement dmnDiagramElement = diagramTuple.getDMDNDiagram();\n+        final String uuid = dmnDiagramElement.getId().getValue();\n+        final String diagramName = dmnDiagramElement.getName().getValue();\n+        final String label;\n+        final boolean isDRG = isDRG(dmnDiagramElement);\n+\n+        if (isDRG) {\n+            final Graph graph = diagramTuple.getStunnerDiagram().getGraph();\n+            final Node<?, ?> rootNode = getRootNode(graph);\n+            label = getNodeName(rootNode);\n+        } else {\n+            label = diagramName;\n+        }\n+\n+        return navigatorItemBuilder()\n+                .withUUID(uuid)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgyNjI3Mw=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQwMzkyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/included/components/DecisionComponents.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTowMToyOVrOHOXzHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0NTozOFrOHRwcYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzMjAyOA==", "bodyText": "how is this different from an empty constructor?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484832028", "createdAt": "2020-09-08T11:01:29Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/included/components/DecisionComponents.java", "diffHunk": "@@ -57,17 +57,23 @@\n \n     private final List<DecisionComponentsItem> decisionComponentsItems = new ArrayList<>();\n \n+    private final DMNDiagramsSession dmnDiagramsSession;\n+\n+    public DecisionComponents() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4MTUzNw==", "bodyText": "Some classes on kie-wb-common need this kind of empty \"// CDI proxy\" constructor implementation. I've added a comment to clarify. Thanks, @jstastny-cz.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r488381537", "createdAt": "2020-09-15T04:45:38Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/navigator/included/components/DecisionComponents.java", "diffHunk": "@@ -57,17 +57,23 @@\n \n     private final List<DecisionComponentsItem> decisionComponentsItems = new ArrayList<>();\n \n+    private final DMNDiagramsSession dmnDiagramsSession;\n+\n+    public DecisionComponents() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzMjAyOA=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjUwOTUxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/preview/PreviewDiagramScreen.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTozNToyNVrOHOYzHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo1NzoyMFrOHPaDUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0ODQxMw==", "bodyText": "is this gonna be fixed as part of this PR?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484848413", "createdAt": "2020-09-08T11:35:25Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/preview/PreviewDiagramScreen.java", "diffHunk": "@@ -132,18 +130,15 @@ void closePreview() {\n     }\n \n     void onCanvasSessionOpened(final @Observes SessionOpenedEvent sessionOpenedEvent) {\n-        checkNotNull(\"sessionOpenedEvent\", sessionOpenedEvent);\n-        showPreview(sessionOpenedEvent.getSession());\n+        // TODO {karreiro}: Fix mini diagram preview.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzUyMw==", "bodyText": "Fixed! Thanks.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r485917523", "createdAt": "2020-09-09T20:57:20Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/docks/preview/PreviewDiagramScreen.java", "diffHunk": "@@ -132,18 +130,15 @@ void closePreview() {\n     }\n \n     void onCanvasSessionOpened(final @Observes SessionOpenedEvent sessionOpenedEvent) {\n-        checkNotNull(\"sessionOpenedEvent\", sessionOpenedEvent);\n-        showPreview(sessionOpenedEvent.getSession());\n+        // TODO {karreiro}: Fix mini diagram preview.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0ODQxMw=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjUxODkxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/drd/DRDContextMenuService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTozODoyMVrOHOY4ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo1Nzo1N1rOHPaEfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0OTg1OQ==", "bodyText": "the issue links exactly this PR, I would expect the TODO be resolved here.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484849859", "createdAt": "2020-09-08T11:38:21Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/drd/DRDContextMenuService.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.editors.drd;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import org.kie.workbench.common.dmn.api.DMNDefinitionSet;\n+import org.kie.workbench.common.dmn.api.definition.model.DMNDiagramElement;\n+import org.kie.workbench.common.dmn.api.graph.DMNDiagramUtils;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramSelected;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramTuple;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramsSession;\n+import org.kie.workbench.common.stunner.core.api.FactoryManager;\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.definition.Definition;\n+\n+@ApplicationScoped\n+public class DRDContextMenuService {\n+\n+    private static String NEW_DIAGRAM_NAME = \"new-diagram\";\n+\n+    private final DMNDiagramsSession dmnDiagramsSession;\n+\n+    private final FactoryManager factoryManager;\n+\n+    private final Event<DMNDiagramSelected> selectedEvent;\n+\n+    private final DMNDiagramUtils dmnDiagramUtils;\n+\n+    @Inject\n+    public DRDContextMenuService(final DMNDiagramsSession dmnDiagramsSession,\n+                                 final FactoryManager factoryManager,\n+                                 final Event<DMNDiagramSelected> selectedEvent,\n+                                 final DMNDiagramUtils dmnDiagramUtils) {\n+        this.dmnDiagramsSession = dmnDiagramsSession;\n+        this.factoryManager = factoryManager;\n+        this.selectedEvent = selectedEvent;\n+        this.dmnDiagramUtils = dmnDiagramUtils;\n+    }\n+\n+    public List<DMNDiagramTuple> getDiagrams() {\n+        return dmnDiagramsSession.getDMNDiagrams();\n+    }\n+\n+    public void addToNewDRD(final Collection<Node<? extends Definition<?>, Edge>> selectedNodes) {\n+\n+        // TODO: https://issues.redhat.com/browse/KOGITO-2992", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzgyMQ==", "bodyText": "Fixed! Thanks.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r485917821", "createdAt": "2020-09-09T20:57:57Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/drd/DRDContextMenuService.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.editors.drd;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.inject.Inject;\n+\n+import org.kie.workbench.common.dmn.api.DMNDefinitionSet;\n+import org.kie.workbench.common.dmn.api.definition.model.DMNDiagramElement;\n+import org.kie.workbench.common.dmn.api.graph.DMNDiagramUtils;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramSelected;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramTuple;\n+import org.kie.workbench.common.dmn.client.docks.navigator.drds.DMNDiagramsSession;\n+import org.kie.workbench.common.stunner.core.api.FactoryManager;\n+import org.kie.workbench.common.stunner.core.definition.adapter.binding.BindableAdapterUtils;\n+import org.kie.workbench.common.stunner.core.diagram.Diagram;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.definition.Definition;\n+\n+@ApplicationScoped\n+public class DRDContextMenuService {\n+\n+    private static String NEW_DIAGRAM_NAME = \"new-diagram\";\n+\n+    private final DMNDiagramsSession dmnDiagramsSession;\n+\n+    private final FactoryManager factoryManager;\n+\n+    private final Event<DMNDiagramSelected> selectedEvent;\n+\n+    private final DMNDiagramUtils dmnDiagramUtils;\n+\n+    @Inject\n+    public DRDContextMenuService(final DMNDiagramsSession dmnDiagramsSession,\n+                                 final FactoryManager factoryManager,\n+                                 final Event<DMNDiagramSelected> selectedEvent,\n+                                 final DMNDiagramUtils dmnDiagramUtils) {\n+        this.dmnDiagramsSession = dmnDiagramsSession;\n+        this.factoryManager = factoryManager;\n+        this.selectedEvent = selectedEvent;\n+        this.dmnDiagramUtils = dmnDiagramUtils;\n+    }\n+\n+    public List<DMNDiagramTuple> getDiagrams() {\n+        return dmnDiagramsSession.getDMNDiagrams();\n+    }\n+\n+    public void addToNewDRD(final Collection<Node<? extends Definition<?>, Edge>> selectedNodes) {\n+\n+        // TODO: https://issues.redhat.com/browse/KOGITO-2992", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0OTg1OQ=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzMyMDQ0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/docks/preview/PreviewDiagramScreenTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0MDoxNFrOHOgdFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo1ODowOVrOHPaE2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Mzg0Nw==", "bodyText": "In sync with what commented in PreviewDiagramScreen.java - should be done already in this PR? If not, we should create a Jira for the outstanding work and maybe link in the TODO (assuming that this TODO does not limit functionality that was in place originally)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r484973847", "createdAt": "2020-09-08T14:40:14Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/docks/preview/PreviewDiagramScreenTest.java", "diffHunk": "@@ -95,6 +96,7 @@ public void testOnClose() {\n     }\n \n     @Test\n+    @Ignore(\"TODO {karreiro}: Fix mini diagram preview.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkxNzkxNQ==", "bodyText": "Fixed! Thanks.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r485917915", "createdAt": "2020-09-09T20:58:09Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/docks/preview/PreviewDiagramScreenTest.java", "diffHunk": "@@ -95,6 +96,7 @@ public void testOnClose() {\n     }\n \n     @Test\n+    @Ignore(\"TODO {karreiro}: Fix mini diagram preview.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3Mzg0Nw=="}, "originalCommit": {"oid": "3c6abb716fb4d407f3f47f420df36dec31285dc9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjA0ODYzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/included/DMNMarshallerImportsContentServiceKogitoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNzoyMjoxOFrOHO6Bcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0ODoxMFrOHRwh2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5Mjc1NQ==", "bodyText": "here the message indicates that the actual file is empty, but in this case it's rather the path to the file.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r485392755", "createdAt": "2020-09-09T07:22:18Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/included/DMNMarshallerImportsContentServiceKogitoImpl.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.included;\n+\n+import javax.enterprise.inject.Alternative;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.Promise;\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.PMMLEditorMarshallerApi;\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLDocumentData;\n+import org.appformer.kogito.bridge.client.resource.interop.ResourceListOptions;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.dmn.client.marshaller.included.DMNMarshallerImportsContentService;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.converters.PMMLMarshallerConverter;\n+import org.kie.workbench.common.kogito.webapp.base.client.workarounds.KogitoResourceContentService;\n+import org.kie.workbench.common.stunner.core.util.StringUtils;\n+import org.uberfire.client.promise.Promises;\n+\n+@Alternative\n+public class DMNMarshallerImportsContentServiceKogitoImpl implements DMNMarshallerImportsContentService {\n+\n+    private final KogitoResourceContentService contentService;\n+\n+    private final Promises promises;\n+\n+    private final PMMLEditorMarshallerApi pmmlEditorMarshallerApi;\n+\n+    static final String DMN_FILES_PATTERN = \"*.dmn\";\n+\n+    static final String PMML_FILES_PATTERN = \"*.pmml\";\n+\n+    static final String MODEL_FILES_PATTERN = \"*.{dmn,pmml}\";\n+\n+    @Inject\n+    public DMNMarshallerImportsContentServiceKogitoImpl(final KogitoResourceContentService contentService,\n+                                                        final Promises promises,\n+                                                        final PMMLEditorMarshallerApi pmmlEditorMarshallerApi) {\n+        this.contentService = contentService;\n+        this.promises = promises;\n+        this.pmmlEditorMarshallerApi = pmmlEditorMarshallerApi;\n+    }\n+\n+    @Override\n+    public Promise<String> loadFile(final String file) {\n+        return contentService.loadFile(file);\n+    }\n+\n+    @Override\n+    public Promise<String[]> getModelsURIs() {\n+        return contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder());\n+    }\n+\n+    @Override\n+    public Promise<String[]> getModelsDMNFilesURIs() {\n+        return contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder());\n+    }\n+\n+    @Override\n+    public Promise<String[]> getModelsPMMLFilesURIs() {\n+        return contentService.getFilteredItems(PMML_FILES_PATTERN, ResourceListOptions.assetFolder());\n+    }\n+\n+    @Override\n+    public Promise<PMMLDocumentMetadata> getPMMLDocumentMetadata(final String pmmlFilePath) {\n+\n+        if (StringUtils.isEmpty(pmmlFilePath)) {\n+            return promises.reject(\"PMML file required to be marshalled is empty or null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c8cc7982347f51792909e759ac80740427d0b7e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM4MjkzOQ==", "bodyText": "Fixed! Thanks!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3379#discussion_r488382939", "createdAt": "2020-09-15T04:48:10Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/included/DMNMarshallerImportsContentServiceKogitoImpl.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.included;\n+\n+import javax.enterprise.inject.Alternative;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.Promise;\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.PMMLEditorMarshallerApi;\n+import org.appformer.kogito.bridge.client.pmmleditor.marshaller.model.PMMLDocumentData;\n+import org.appformer.kogito.bridge.client.resource.interop.ResourceListOptions;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.dmn.client.marshaller.included.DMNMarshallerImportsContentService;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.converters.PMMLMarshallerConverter;\n+import org.kie.workbench.common.kogito.webapp.base.client.workarounds.KogitoResourceContentService;\n+import org.kie.workbench.common.stunner.core.util.StringUtils;\n+import org.uberfire.client.promise.Promises;\n+\n+@Alternative\n+public class DMNMarshallerImportsContentServiceKogitoImpl implements DMNMarshallerImportsContentService {\n+\n+    private final KogitoResourceContentService contentService;\n+\n+    private final Promises promises;\n+\n+    private final PMMLEditorMarshallerApi pmmlEditorMarshallerApi;\n+\n+    static final String DMN_FILES_PATTERN = \"*.dmn\";\n+\n+    static final String PMML_FILES_PATTERN = \"*.pmml\";\n+\n+    static final String MODEL_FILES_PATTERN = \"*.{dmn,pmml}\";\n+\n+    @Inject\n+    public DMNMarshallerImportsContentServiceKogitoImpl(final KogitoResourceContentService contentService,\n+                                                        final Promises promises,\n+                                                        final PMMLEditorMarshallerApi pmmlEditorMarshallerApi) {\n+        this.contentService = contentService;\n+        this.promises = promises;\n+        this.pmmlEditorMarshallerApi = pmmlEditorMarshallerApi;\n+    }\n+\n+    @Override\n+    public Promise<String> loadFile(final String file) {\n+        return contentService.loadFile(file);\n+    }\n+\n+    @Override\n+    public Promise<String[]> getModelsURIs() {\n+        return contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder());\n+    }\n+\n+    @Override\n+    public Promise<String[]> getModelsDMNFilesURIs() {\n+        return contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder());\n+    }\n+\n+    @Override\n+    public Promise<String[]> getModelsPMMLFilesURIs() {\n+        return contentService.getFilteredItems(PMML_FILES_PATTERN, ResourceListOptions.assetFolder());\n+    }\n+\n+    @Override\n+    public Promise<PMMLDocumentMetadata> getPMMLDocumentMetadata(final String pmmlFilePath) {\n+\n+        if (StringUtils.isEmpty(pmmlFilePath)) {\n+            return promises.reject(\"PMML file required to be marshalled is empty or null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM5Mjc1NQ=="}, "originalCommit": {"oid": "7c8cc7982347f51792909e759ac80740427d0b7e"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1366, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}