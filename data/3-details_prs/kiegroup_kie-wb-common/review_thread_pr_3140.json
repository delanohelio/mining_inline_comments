{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwOTAwMDk3", "number": 3140, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDoyODoxNlrODeZr7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDozMjo1MlrODeZyCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjA0NzE5OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDoyODoxNlrOFng7Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzozNzoyMlrOFnmQvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3ODI1MA==", "bodyText": "Please make this private static field of class, it is in each test.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3140#discussion_r376978250", "createdAt": "2020-02-10T10:28:16Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -179,10 +204,939 @@ public void testDecisionEmpty() throws Exception {\n         final String actual = getContent();\n         assertThat(actual).isNotBlank();\n \n-        XmlAssert.assertThat(actual).and(expected)\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testDecisionExpressionLiteral() throws Exception {\n+        final String expected = loadResource(\"decision-expression-literal.xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ac221030d4dc090220cff909edc2ae95aa57ef"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2NTY2MA==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3140#discussion_r377065660", "createdAt": "2020-02-10T13:37:22Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -179,10 +204,939 @@ public void testDecisionEmpty() throws Exception {\n         final String actual = getContent();\n         assertThat(actual).isNotBlank();\n \n-        XmlAssert.assertThat(actual).and(expected)\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testDecisionExpressionLiteral() throws Exception {\n+        final String expected = loadResource(\"decision-expression-literal.xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3ODI1MA=="}, "originalCommit": {"oid": "d9ac221030d4dc090220cff909edc2ae95aa57ef"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjA0ODM4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDoyODozNFrOFng8AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDozNzo0NFrOFnoYaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3ODQzMg==", "bodyText": "Please ignore all new tests due to our issues running on jenkins", "url": "https://github.com/kiegroup/kie-wb-common/pull/3140#discussion_r376978432", "createdAt": "2020-02-10T10:28:34Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -179,10 +204,939 @@ public void testDecisionEmpty() throws Exception {\n         final String actual = getContent();\n         assertThat(actual).isNotBlank();\n \n-        XmlAssert.assertThat(actual).and(expected)\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testDecisionExpressionLiteral() throws Exception {\n+        final String expected = loadResource(\"decision-expression-literal.xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_4FEA7589-823B-4880-BCFA-AF2F9B145785']\" +\n+                                  \"/dmn:literalExpression[@id='_35DB53A6-97E7-4D48-9E5A-59CE0015CEF8']\" +\n+                                  \"/dmn:text[text()='123']\");\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ac221030d4dc090220cff909edc2ae95aa57ef"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2NjQyMw==", "bodyText": "I've disabled Integration Tests by default (and removed all @Ignore so that we can run them locally if required using the -DskipITs=false flag). I think this is preferential to disabling them with the annotation. WDYT?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3140#discussion_r377066423", "createdAt": "2020-02-10T13:38:40Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -179,10 +204,939 @@ public void testDecisionEmpty() throws Exception {\n         final String actual = getContent();\n         assertThat(actual).isNotBlank();\n \n-        XmlAssert.assertThat(actual).and(expected)\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testDecisionExpressionLiteral() throws Exception {\n+        final String expected = loadResource(\"decision-expression-literal.xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_4FEA7589-823B-4880-BCFA-AF2F9B145785']\" +\n+                                  \"/dmn:literalExpression[@id='_35DB53A6-97E7-4D48-9E5A-59CE0015CEF8']\" +\n+                                  \"/dmn:text[text()='123']\");\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3ODQzMg=="}, "originalCommit": {"oid": "d9ac221030d4dc090220cff909edc2ae95aa57ef"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwMDM5NQ==", "bodyText": "+1, thank you", "url": "https://github.com/kiegroup/kie-wb-common/pull/3140#discussion_r377100395", "createdAt": "2020-02-10T14:37:44Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -179,10 +204,939 @@ public void testDecisionEmpty() throws Exception {\n         final String actual = getContent();\n         assertThat(actual).isNotBlank();\n \n-        XmlAssert.assertThat(actual).and(expected)\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testDecisionExpressionLiteral() throws Exception {\n+        final String expected = loadResource(\"decision-expression-literal.xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_4FEA7589-823B-4880-BCFA-AF2F9B145785']\" +\n+                                  \"/dmn:literalExpression[@id='_35DB53A6-97E7-4D48-9E5A-59CE0015CEF8']\" +\n+                                  \"/dmn:text[text()='123']\");\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3ODQzMg=="}, "originalCommit": {"oid": "d9ac221030d4dc090220cff909edc2ae95aa57ef"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjA2MjgyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDozMjo1MlrOFnhEyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNToxNTowMVrOFoM4Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4MDY4Mw==", "bodyText": "Please refactor/explain what the test does.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3140#discussion_r376980683", "createdAt": "2020-02-10T10:32:52Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -193,10 +1147,398 @@ public void testDecisionServiceEmpty() throws Exception {\n         final String actual = getContent();\n         assertThat(actual).isNotBlank();\n \n-        XmlAssert.assertThat(actual).and(expected)\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testDecisionTableInputClauseConstraints_KOGITO369() throws Exception {\n+        final String expected = loadResource(\"KOGITO-369 (Decision Table Input Clause constraints).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(KIE.getPrefix(), KIE.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_6BFBA4CD-6484-4AAE-9E28-CF54DA401C3D']\" +\n+                                  \"/dmn:decisionTable[@id='_3B5C4F51-7F86-4C25-AE10-565560188523']\" +\n+                                  \"/dmn:input[@id='_4FCD3B90-542B-4518-B541-23CEFC004D9E']\" +\n+                                  \"/dmn:inputValues[@kie:constraintType='enumeration' and @id='_79588FEE-2BA1-4CAE-B553-D96C6B2CB615']\" +\n+                                  \"/dmn:text[text()='[1, 2, 3]']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_6BFBA4CD-6484-4AAE-9E28-CF54DA401C3D']\" +\n+                                  \"/dmn:decisionTable[@id='_3B5C4F51-7F86-4C25-AE10-565560188523']\" +\n+                                  \"/dmn:input[@id='_2FEFE4CA-44EE-4BF9-8CFC-CB26A17AD52E']\" +\n+                                  \"/dmn:inputValues[@kie:constraintType='expression' and @id='_4B2A8314-4EDC-4183-BBF7-98587DAFEBFC']\" +\n+                                  \"/dmn:text[text()='< 1000']\");\n+    }\n+\n+    @Test\n+    public void testDocumentationLinks_KOGITO674() throws Exception {\n+        final String expected = loadResource(\"KOGITO-674 (Documentation links).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(KIE.getPrefix(), KIE.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:inputData[@id='_12A7D464-8A59-4B38-949E-96E63A3FC916']\" +\n+                                  \"/dmn:extensionElements/kie:attachment[@name='google' and @url='www.google.co.uk']\");\n+    }\n+\n+    @Test\n+    public void testEmptyExpression_DROOLS4724() throws Exception {\n+        final String expected = loadResource(\"DROOLS-4724 (Empty expression).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .nodesByXPath(\"/dmn:definitions\" +\n+                                      \"/dmn:decision\" +\n+                                      \"/dmn:literalExpression\")\n+                .doNotExist();\n+    }\n+\n+    @Test\n+    public void testDecisionServiceNodeLocations_KOGITO371() throws Exception {\n+        final String expected = loadResource(\"KOGITO-371 (Decision Service node locations).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n                 .ignoreComments()\n                 .ignoreWhitespace()\n                 .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(DMNDI.getPrefix(), DMNDI.getUri())\n+                .put(DC.getPrefix(), DC.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_4CEF4A0F-B605-4551-9403-7FA31C97DCD1']\" +\n+                                  \"/dc:Bounds[@x='670' and @y='153' and @width='200' and @height='200']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_B067B665-3343-495F-8257-608689084A91']\" +\n+                                  \"/dc:Bounds[@x='510' and @y='265' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_964EF7FB-010B-4698-9954-BB95ABBDF2A2']\" +\n+                                  \"/dc:Bounds[@x='720' and @y='265' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_A531F162-5032-40CF-B53A-E5818BD2C21A']\" +\n+                                  \"/dc:Bounds[@x='720' and @y='195' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_4C183144-7DAC-42FB-8243-A666FFDA2177']\" +\n+                                  \"/dc:Bounds[@x='930' and @y='195' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_93FD724C-DF9A-4B85-B048-6E26F28B987A']\" +\n+                                  \"/dc:Bounds[@x='930' and @y='265' and @width='100' and @height='50']\");\n+    }\n+\n+    @Test\n+    public void testPaymentDateFile_KOGITO404() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9ac221030d4dc090220cff909edc2ae95aa57ef"}, "originalPosition": 1199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2NzIyMA==", "bodyText": "I've added a comment for now.. my plan is to investigate and create the necessary JIRA BEFORE this PR is merged.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3140#discussion_r377067220", "createdAt": "2020-02-10T13:40:04Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -193,10 +1147,398 @@ public void testDecisionServiceEmpty() throws Exception {\n         final String actual = getContent();\n         assertThat(actual).isNotBlank();\n \n-        XmlAssert.assertThat(actual).and(expected)\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testDecisionTableInputClauseConstraints_KOGITO369() throws Exception {\n+        final String expected = loadResource(\"KOGITO-369 (Decision Table Input Clause constraints).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(KIE.getPrefix(), KIE.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_6BFBA4CD-6484-4AAE-9E28-CF54DA401C3D']\" +\n+                                  \"/dmn:decisionTable[@id='_3B5C4F51-7F86-4C25-AE10-565560188523']\" +\n+                                  \"/dmn:input[@id='_4FCD3B90-542B-4518-B541-23CEFC004D9E']\" +\n+                                  \"/dmn:inputValues[@kie:constraintType='enumeration' and @id='_79588FEE-2BA1-4CAE-B553-D96C6B2CB615']\" +\n+                                  \"/dmn:text[text()='[1, 2, 3]']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_6BFBA4CD-6484-4AAE-9E28-CF54DA401C3D']\" +\n+                                  \"/dmn:decisionTable[@id='_3B5C4F51-7F86-4C25-AE10-565560188523']\" +\n+                                  \"/dmn:input[@id='_2FEFE4CA-44EE-4BF9-8CFC-CB26A17AD52E']\" +\n+                                  \"/dmn:inputValues[@kie:constraintType='expression' and @id='_4B2A8314-4EDC-4183-BBF7-98587DAFEBFC']\" +\n+                                  \"/dmn:text[text()='< 1000']\");\n+    }\n+\n+    @Test\n+    public void testDocumentationLinks_KOGITO674() throws Exception {\n+        final String expected = loadResource(\"KOGITO-674 (Documentation links).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(KIE.getPrefix(), KIE.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:inputData[@id='_12A7D464-8A59-4B38-949E-96E63A3FC916']\" +\n+                                  \"/dmn:extensionElements/kie:attachment[@name='google' and @url='www.google.co.uk']\");\n+    }\n+\n+    @Test\n+    public void testEmptyExpression_DROOLS4724() throws Exception {\n+        final String expected = loadResource(\"DROOLS-4724 (Empty expression).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .nodesByXPath(\"/dmn:definitions\" +\n+                                      \"/dmn:decision\" +\n+                                      \"/dmn:literalExpression\")\n+                .doNotExist();\n+    }\n+\n+    @Test\n+    public void testDecisionServiceNodeLocations_KOGITO371() throws Exception {\n+        final String expected = loadResource(\"KOGITO-371 (Decision Service node locations).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n                 .ignoreComments()\n                 .ignoreWhitespace()\n                 .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(DMNDI.getPrefix(), DMNDI.getUri())\n+                .put(DC.getPrefix(), DC.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_4CEF4A0F-B605-4551-9403-7FA31C97DCD1']\" +\n+                                  \"/dc:Bounds[@x='670' and @y='153' and @width='200' and @height='200']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_B067B665-3343-495F-8257-608689084A91']\" +\n+                                  \"/dc:Bounds[@x='510' and @y='265' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_964EF7FB-010B-4698-9954-BB95ABBDF2A2']\" +\n+                                  \"/dc:Bounds[@x='720' and @y='265' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_A531F162-5032-40CF-B53A-E5818BD2C21A']\" +\n+                                  \"/dc:Bounds[@x='720' and @y='195' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_4C183144-7DAC-42FB-8243-A666FFDA2177']\" +\n+                                  \"/dc:Bounds[@x='930' and @y='195' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_93FD724C-DF9A-4B85-B048-6E26F28B987A']\" +\n+                                  \"/dc:Bounds[@x='930' and @y='265' and @width='100' and @height='50']\");\n+    }\n+\n+    @Test\n+    public void testPaymentDateFile_KOGITO404() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4MDY4Mw=="}, "originalCommit": {"oid": "d9ac221030d4dc090220cff909edc2ae95aa57ef"}, "originalPosition": 1199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEwMTMyNQ==", "bodyText": "put jira here then", "url": "https://github.com/kiegroup/kie-wb-common/pull/3140#discussion_r377101325", "createdAt": "2020-02-10T14:39:06Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -193,10 +1147,398 @@ public void testDecisionServiceEmpty() throws Exception {\n         final String actual = getContent();\n         assertThat(actual).isNotBlank();\n \n-        XmlAssert.assertThat(actual).and(expected)\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testDecisionTableInputClauseConstraints_KOGITO369() throws Exception {\n+        final String expected = loadResource(\"KOGITO-369 (Decision Table Input Clause constraints).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(KIE.getPrefix(), KIE.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_6BFBA4CD-6484-4AAE-9E28-CF54DA401C3D']\" +\n+                                  \"/dmn:decisionTable[@id='_3B5C4F51-7F86-4C25-AE10-565560188523']\" +\n+                                  \"/dmn:input[@id='_4FCD3B90-542B-4518-B541-23CEFC004D9E']\" +\n+                                  \"/dmn:inputValues[@kie:constraintType='enumeration' and @id='_79588FEE-2BA1-4CAE-B553-D96C6B2CB615']\" +\n+                                  \"/dmn:text[text()='[1, 2, 3]']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_6BFBA4CD-6484-4AAE-9E28-CF54DA401C3D']\" +\n+                                  \"/dmn:decisionTable[@id='_3B5C4F51-7F86-4C25-AE10-565560188523']\" +\n+                                  \"/dmn:input[@id='_2FEFE4CA-44EE-4BF9-8CFC-CB26A17AD52E']\" +\n+                                  \"/dmn:inputValues[@kie:constraintType='expression' and @id='_4B2A8314-4EDC-4183-BBF7-98587DAFEBFC']\" +\n+                                  \"/dmn:text[text()='< 1000']\");\n+    }\n+\n+    @Test\n+    public void testDocumentationLinks_KOGITO674() throws Exception {\n+        final String expected = loadResource(\"KOGITO-674 (Documentation links).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(KIE.getPrefix(), KIE.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:inputData[@id='_12A7D464-8A59-4B38-949E-96E63A3FC916']\" +\n+                                  \"/dmn:extensionElements/kie:attachment[@name='google' and @url='www.google.co.uk']\");\n+    }\n+\n+    @Test\n+    public void testEmptyExpression_DROOLS4724() throws Exception {\n+        final String expected = loadResource(\"DROOLS-4724 (Empty expression).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .nodesByXPath(\"/dmn:definitions\" +\n+                                      \"/dmn:decision\" +\n+                                      \"/dmn:literalExpression\")\n+                .doNotExist();\n+    }\n+\n+    @Test\n+    public void testDecisionServiceNodeLocations_KOGITO371() throws Exception {\n+        final String expected = loadResource(\"KOGITO-371 (Decision Service node locations).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n                 .ignoreComments()\n                 .ignoreWhitespace()\n                 .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(DMNDI.getPrefix(), DMNDI.getUri())\n+                .put(DC.getPrefix(), DC.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_4CEF4A0F-B605-4551-9403-7FA31C97DCD1']\" +\n+                                  \"/dc:Bounds[@x='670' and @y='153' and @width='200' and @height='200']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_B067B665-3343-495F-8257-608689084A91']\" +\n+                                  \"/dc:Bounds[@x='510' and @y='265' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_964EF7FB-010B-4698-9954-BB95ABBDF2A2']\" +\n+                                  \"/dc:Bounds[@x='720' and @y='265' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_A531F162-5032-40CF-B53A-E5818BD2C21A']\" +\n+                                  \"/dc:Bounds[@x='720' and @y='195' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_4C183144-7DAC-42FB-8243-A666FFDA2177']\" +\n+                                  \"/dc:Bounds[@x='930' and @y='195' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_93FD724C-DF9A-4B85-B048-6E26F28B987A']\" +\n+                                  \"/dc:Bounds[@x='930' and @y='265' and @width='100' and @height='50']\");\n+    }\n+\n+    @Test\n+    public void testPaymentDateFile_KOGITO404() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4MDY4Mw=="}, "originalCommit": {"oid": "d9ac221030d4dc090220cff909edc2ae95aa57ef"}, "originalPosition": 1199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY5ODM3OA==", "bodyText": "@jomarko I've updated this PR description to list JIRA following up on this PR.\nI've also linked them on KOGITO-778 as \"Followed up by\".", "url": "https://github.com/kiegroup/kie-wb-common/pull/3140#discussion_r377698378", "createdAt": "2020-02-11T15:15:01Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/DMNDesignerKogitoSeleniumIT.java", "diffHunk": "@@ -193,10 +1147,398 @@ public void testDecisionServiceEmpty() throws Exception {\n         final String actual = getContent();\n         assertThat(actual).isNotBlank();\n \n-        XmlAssert.assertThat(actual).and(expected)\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+    }\n+\n+    @Test\n+    public void testDecisionTableInputClauseConstraints_KOGITO369() throws Exception {\n+        final String expected = loadResource(\"KOGITO-369 (Decision Table Input Clause constraints).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(KIE.getPrefix(), KIE.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_6BFBA4CD-6484-4AAE-9E28-CF54DA401C3D']\" +\n+                                  \"/dmn:decisionTable[@id='_3B5C4F51-7F86-4C25-AE10-565560188523']\" +\n+                                  \"/dmn:input[@id='_4FCD3B90-542B-4518-B541-23CEFC004D9E']\" +\n+                                  \"/dmn:inputValues[@kie:constraintType='enumeration' and @id='_79588FEE-2BA1-4CAE-B553-D96C6B2CB615']\" +\n+                                  \"/dmn:text[text()='[1, 2, 3]']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:decision[@id='_6BFBA4CD-6484-4AAE-9E28-CF54DA401C3D']\" +\n+                                  \"/dmn:decisionTable[@id='_3B5C4F51-7F86-4C25-AE10-565560188523']\" +\n+                                  \"/dmn:input[@id='_2FEFE4CA-44EE-4BF9-8CFC-CB26A17AD52E']\" +\n+                                  \"/dmn:inputValues[@kie:constraintType='expression' and @id='_4B2A8314-4EDC-4183-BBF7-98587DAFEBFC']\" +\n+                                  \"/dmn:text[text()='< 1000']\");\n+    }\n+\n+    @Test\n+    public void testDocumentationLinks_KOGITO674() throws Exception {\n+        final String expected = loadResource(\"KOGITO-674 (Documentation links).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(KIE.getPrefix(), KIE.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmn:inputData[@id='_12A7D464-8A59-4B38-949E-96E63A3FC916']\" +\n+                                  \"/dmn:extensionElements/kie:attachment[@name='google' and @url='www.google.co.uk']\");\n+    }\n+\n+    @Test\n+    public void testEmptyExpression_DROOLS4724() throws Exception {\n+        final String expected = loadResource(\"DROOLS-4724 (Empty expression).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n+                .ignoreComments()\n+                .ignoreWhitespace()\n+                .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .nodesByXPath(\"/dmn:definitions\" +\n+                                      \"/dmn:decision\" +\n+                                      \"/dmn:literalExpression\")\n+                .doNotExist();\n+    }\n+\n+    @Test\n+    public void testDecisionServiceNodeLocations_KOGITO371() throws Exception {\n+        final String expected = loadResource(\"KOGITO-371 (Decision Service node locations).xml\");\n+        setContent(expected);\n+\n+        final String actual = getContent();\n+        assertThat(actual).isNotBlank();\n+\n+        XmlAssert.assertThat(actual)\n+                .and(expected)\n                 .ignoreComments()\n                 .ignoreWhitespace()\n                 .areIdentical();\n+\n+        final Map<String, String> prefix2Uri = new Maps.Builder<String, String>()\n+                .put(DMN.getPrefix(), DMN.getUri())\n+                .put(DMNDI.getPrefix(), DMNDI.getUri())\n+                .put(DC.getPrefix(), DC.getUri())\n+                .build();\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_4CEF4A0F-B605-4551-9403-7FA31C97DCD1']\" +\n+                                  \"/dc:Bounds[@x='670' and @y='153' and @width='200' and @height='200']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_B067B665-3343-495F-8257-608689084A91']\" +\n+                                  \"/dc:Bounds[@x='510' and @y='265' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_964EF7FB-010B-4698-9954-BB95ABBDF2A2']\" +\n+                                  \"/dc:Bounds[@x='720' and @y='265' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_A531F162-5032-40CF-B53A-E5818BD2C21A']\" +\n+                                  \"/dc:Bounds[@x='720' and @y='195' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_4C183144-7DAC-42FB-8243-A666FFDA2177']\" +\n+                                  \"/dc:Bounds[@x='930' and @y='195' and @width='100' and @height='50']\");\n+        XmlAssert.assertThat(actual)\n+                .withNamespaceContext(prefix2Uri)\n+                .hasXPath(\"/dmn:definitions\" +\n+                                  \"/dmndi:DMNDI\" +\n+                                  \"/dmndi:DMNDiagram\" +\n+                                  \"/dmndi:DMNShape[@id='dmnshape-_93FD724C-DF9A-4B85-B048-6E26F28B987A']\" +\n+                                  \"/dc:Bounds[@x='930' and @y='265' and @width='100' and @height='50']\");\n+    }\n+\n+    @Test\n+    public void testPaymentDateFile_KOGITO404() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4MDY4Mw=="}, "originalCommit": {"oid": "d9ac221030d4dc090220cff909edc2ae95aa57ef"}, "originalPosition": 1199}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1504, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}