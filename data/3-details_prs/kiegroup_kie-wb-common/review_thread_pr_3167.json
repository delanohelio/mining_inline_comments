{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzI3OTU3", "number": 3167, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjo1Njo0OFrODi9eoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoxOTo0MFrODi9vqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTg1NDQwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/property/dmn/NameHolder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNjo1Njo0OFrOFugAeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOToyMzozNVrOFuj1sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMzIyNQ==", "bodyText": "Can't we use Objects.equals(value, name.value)?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3167#discussion_r384303225", "createdAt": "2020-02-26T06:56:48Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/property/dmn/NameHolder.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.api.property.dmn;\n+\n+import org.jboss.errai.common.client.api.annotations.Portable;\n+import org.jboss.errai.databinding.client.api.Bindable;\n+import org.kie.workbench.common.dmn.api.property.DMNProperty;\n+import org.kie.workbench.common.forms.adf.definitions.annotations.metaModel.FieldDefinition;\n+import org.kie.workbench.common.forms.adf.definitions.annotations.metaModel.FieldValue;\n+import org.kie.workbench.common.forms.adf.definitions.annotations.metaModel.I18nMode;\n+import org.kie.workbench.common.stunner.core.definition.annotation.Property;\n+import org.kie.workbench.common.stunner.core.definition.annotation.property.Type;\n+import org.kie.workbench.common.stunner.core.definition.annotation.property.Value;\n+import org.kie.workbench.common.stunner.core.definition.property.PropertyMetaTypes;\n+import org.kie.workbench.common.stunner.core.definition.property.PropertyType;\n+import org.kie.workbench.common.stunner.core.util.HashUtil;\n+\n+@Portable\n+@Bindable\n+@Property(meta = PropertyMetaTypes.NAME)\n+@FieldDefinition(i18nMode = I18nMode.OVERRIDE_I18N_KEY)\n+public class NameHolder implements DMNProperty {\n+\n+    public static final String DEFAULT_NAME = \"\";\n+\n+    @Type\n+    public static final PropertyType type = new NamePropertyType();\n+\n+    @Value\n+    @FieldValue\n+    private Name value;\n+\n+    public NameHolder() {\n+        this(new Name(DEFAULT_NAME));\n+    }\n+\n+    public NameHolder(final Name value) {\n+        this.value = value;\n+    }\n+\n+    public Name getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(final Name value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof NameHolder)) {\n+            return false;\n+        }\n+\n+        final NameHolder name = (NameHolder) o;\n+\n+        return value != null ? value.equals(name.value) : name.value == null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13584dceeeccf39e11485f866ca211f910d0f636"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2NjAwMw==", "bodyText": "Fixed in new commit.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3167#discussion_r384366003", "createdAt": "2020-02-26T09:23:35Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-api/src/main/java/org/kie/workbench/common/dmn/api/property/dmn/NameHolder.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.api.property.dmn;\n+\n+import org.jboss.errai.common.client.api.annotations.Portable;\n+import org.jboss.errai.databinding.client.api.Bindable;\n+import org.kie.workbench.common.dmn.api.property.DMNProperty;\n+import org.kie.workbench.common.forms.adf.definitions.annotations.metaModel.FieldDefinition;\n+import org.kie.workbench.common.forms.adf.definitions.annotations.metaModel.FieldValue;\n+import org.kie.workbench.common.forms.adf.definitions.annotations.metaModel.I18nMode;\n+import org.kie.workbench.common.stunner.core.definition.annotation.Property;\n+import org.kie.workbench.common.stunner.core.definition.annotation.property.Type;\n+import org.kie.workbench.common.stunner.core.definition.annotation.property.Value;\n+import org.kie.workbench.common.stunner.core.definition.property.PropertyMetaTypes;\n+import org.kie.workbench.common.stunner.core.definition.property.PropertyType;\n+import org.kie.workbench.common.stunner.core.util.HashUtil;\n+\n+@Portable\n+@Bindable\n+@Property(meta = PropertyMetaTypes.NAME)\n+@FieldDefinition(i18nMode = I18nMode.OVERRIDE_I18N_KEY)\n+public class NameHolder implements DMNProperty {\n+\n+    public static final String DEFAULT_NAME = \"\";\n+\n+    @Type\n+    public static final PropertyType type = new NamePropertyType();\n+\n+    @Value\n+    @FieldValue\n+    private Name value;\n+\n+    public NameHolder() {\n+        this(new Name(DEFAULT_NAME));\n+    }\n+\n+    public NameHolder(final Name value) {\n+        this.value = value;\n+    }\n+\n+    public Name getValue() {\n+        return value;\n+    }\n+\n+    public void setValue(final Name value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (!(o instanceof NameHolder)) {\n+            return false;\n+        }\n+\n+        final NameHolder name = (NameHolder) o;\n+\n+        return value != null ? value.equals(name.value) : name.value == null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwMzIyNQ=="}, "originalCommit": {"oid": "13584dceeeccf39e11485f866ca211f910d0f636"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTg4NDY5OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/included/grid/BaseCardComponent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoxMzowNVrOFugScQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOToyNDowMVrOFuj2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNzgyNQ==", "bodyText": "I think we can remove this /**/", "url": "https://github.com/kiegroup/kie-wb-common/pull/3167#discussion_r384307825", "createdAt": "2020-02-26T07:13:05Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/included/grid/BaseCardComponent.java", "diffHunk": "@@ -91,9 +92,9 @@ public HTMLElement getContent() {\n \n             final String oldName = getIncludedModel().getName();\n \n-            getIncludedModel().setName(newName);\n+            getIncludedModel().setName(NameUtils.normaliseName(newName));\n \n-            if (getIncludedModel().isValid()) {\n+            if (getIncludedModel().isValid()) {/**/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13584dceeeccf39e11485f866ca211f910d0f636"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2NjIzOQ==", "bodyText": "Fixed in new commit.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3167#discussion_r384366239", "createdAt": "2020-02-26T09:24:01Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/included/grid/BaseCardComponent.java", "diffHunk": "@@ -91,9 +92,9 @@ public HTMLElement getContent() {\n \n             final String oldName = getIncludedModel().getName();\n \n-            getIncludedModel().setName(newName);\n+            getIncludedModel().setName(NameUtils.normaliseName(newName));\n \n-            if (getIncludedModel().isValid()) {\n+            if (getIncludedModel().isValid()) {/**/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwNzgyNQ=="}, "originalCommit": {"oid": "13584dceeeccf39e11485f866ca211f910d0f636"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTg4OTMwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/types/listview/DataTypeListItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoxNToyM1rOFugVOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOTozMDoyOVrOFukE6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODUzNw==", "bodyText": "Isn't the jira just about DRG elements? Are data types DRGElements?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3167#discussion_r384308537", "createdAt": "2020-02-26T07:15:23Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/types/listview/DataTypeListItem.java", "diffHunk": "@@ -430,7 +431,7 @@ private boolean isAReferenceToDestroyedDataType(final DataType dataType) {\n     DataType updateProperties(final DataType dataType) {\n         return dataTypeManager\n                 .from(dataType)\n-                .withName(getName())\n+                .withName(NameUtils.normaliseName(getName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13584dceeeccf39e11485f866ca211f910d0f636"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2OTg5Nw==", "bodyText": "@jomarko The final criteria was DRGElement names, ItemDefinition names and @danielzhe spotted Import aliases too.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3167#discussion_r384369897", "createdAt": "2020-02-26T09:30:29Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/editors/types/listview/DataTypeListItem.java", "diffHunk": "@@ -430,7 +431,7 @@ private boolean isAReferenceToDestroyedDataType(final DataType dataType) {\n     DataType updateProperties(final DataType dataType) {\n         return dataTypeManager\n                 .from(dataType)\n-                .withName(getName())\n+                .withName(NameUtils.normaliseName(getName()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODUzNw=="}, "originalCommit": {"oid": "13584dceeeccf39e11485f866ca211f910d0f636"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTg5MTgyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/property/dmn/NameFieldProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoxNjoyOFrOFugWsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOTozNjoyM1rOFukR-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODkxNQ==", "bodyText": "magic number you are saying? ... and who is the magician that do magic with this magic number?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3167#discussion_r384308915", "createdAt": "2020-02-26T07:16:28Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/property/dmn/NameFieldProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.property.dmn;\n+\n+import javax.enterprise.context.Dependent;\n+\n+import org.kie.workbench.common.dmn.api.property.dmn.Name;\n+import org.kie.workbench.common.dmn.api.property.dmn.NameFieldType;\n+import org.kie.workbench.common.forms.fields.shared.fieldTypes.basic.BasicTypeFieldProvider;\n+import org.kie.workbench.common.forms.model.TypeInfo;\n+\n+@Dependent\n+public class NameFieldProvider extends BasicTypeFieldProvider<NameFieldDefinition> {\n+\n+    //Arbitrary 'magic' number", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13584dceeeccf39e11485f866ca211f910d0f636"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM3MzI0MA==", "bodyText": "LOL.. Too much copy and paste from elsewhere.\nThe priority is used to the Properties Panel code to find a provider for a field definition. Since we only have one provider for NameFieldDefinition the value can be anything we like. I've removed the comment and set to 0.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3167#discussion_r384373240", "createdAt": "2020-02-26T09:36:23Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/property/dmn/NameFieldProvider.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.property.dmn;\n+\n+import javax.enterprise.context.Dependent;\n+\n+import org.kie.workbench.common.dmn.api.property.dmn.Name;\n+import org.kie.workbench.common.dmn.api.property.dmn.NameFieldType;\n+import org.kie.workbench.common.forms.fields.shared.fieldTypes.basic.BasicTypeFieldProvider;\n+import org.kie.workbench.common.forms.model.TypeInfo;\n+\n+@Dependent\n+public class NameFieldProvider extends BasicTypeFieldProvider<NameFieldDefinition> {\n+\n+    //Arbitrary 'magic' number", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwODkxNQ=="}, "originalCommit": {"oid": "13584dceeeccf39e11485f866ca211f910d0f636"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3OTg5ODAxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/editors/included/grid/BaseCardComponentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNzoxOTo0MFrOFugalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwOToyNDozN1rOFuj34Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwOTkxMA==", "bodyText": "please remove comment", "url": "https://github.com/kiegroup/kie-wb-common/pull/3167#discussion_r384309910", "createdAt": "2020-02-26T07:19:40Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/editors/included/grid/BaseCardComponentTest.java", "diffHunk": "@@ -144,18 +144,27 @@ public void testGetContent() {\n \n     @Test\n     public void testOnTitleChangedWhenIncludedModelIsValid() {\n+        doTestOnTitleChangedWhenIncludedModelIsValid(\"newName\", \"newName\");\n+    }\n+\n+    @Test\n+    public void testOnTitleChangedWhenIncludedModelIsValidWithWhitespace() {\n+        doTestOnTitleChangedWhenIncludedModelIsValid(\"   newName   \", \"newName\");\n+    }\n+\n+    private void doTestOnTitleChangedWhenIncludedModelIsValid(final String newName,\n+                                                              final String expectedNewName) {\n         final DMNCardsGridComponent grid = mock(DMNCardsGridComponent.class);\n         final DMNIncludedModelActiveRecord includedModel = spy(new DMNIncludedModelActiveRecord(null));\n-        final String newName = \"newName\";\n \n         doReturn(true).when(includedModel).isValid();\n-        doReturn(emptyList()).when(includedModel).update();\n+        doReturn(emptyList()).when(includedModel).update();/**/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13584dceeeccf39e11485f866ca211f910d0f636"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDM2NjU2MQ==", "bodyText": "Fixed in new commit.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3167#discussion_r384366561", "createdAt": "2020-02-26T09:24:37Z", "author": {"login": "manstis"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/editors/included/grid/BaseCardComponentTest.java", "diffHunk": "@@ -144,18 +144,27 @@ public void testGetContent() {\n \n     @Test\n     public void testOnTitleChangedWhenIncludedModelIsValid() {\n+        doTestOnTitleChangedWhenIncludedModelIsValid(\"newName\", \"newName\");\n+    }\n+\n+    @Test\n+    public void testOnTitleChangedWhenIncludedModelIsValidWithWhitespace() {\n+        doTestOnTitleChangedWhenIncludedModelIsValid(\"   newName   \", \"newName\");\n+    }\n+\n+    private void doTestOnTitleChangedWhenIncludedModelIsValid(final String newName,\n+                                                              final String expectedNewName) {\n         final DMNCardsGridComponent grid = mock(DMNCardsGridComponent.class);\n         final DMNIncludedModelActiveRecord includedModel = spy(new DMNIncludedModelActiveRecord(null));\n-        final String newName = \"newName\";\n \n         doReturn(true).when(includedModel).isValid();\n-        doReturn(emptyList()).when(includedModel).update();\n+        doReturn(emptyList()).when(includedModel).update();/**/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDMwOTkxMA=="}, "originalCommit": {"oid": "13584dceeeccf39e11485f866ca211f910d0f636"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1523, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}