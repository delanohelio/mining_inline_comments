{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMjA3MzM1", "number": 3324, "title": "DROOLS-5419 : Scenario Coverage Report counts and shows previous names of renamed rules", "bodyText": "https://issues.redhat.com/browse/DROOLS-5419", "createdAt": "2020-06-08T15:01:28Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3324", "merged": true, "mergeCommit": {"oid": "96c6e29821dcd44eeddd01c2e1e2012a39b6cdbf"}, "closed": true, "closedAt": "2020-07-17T06:29:39Z", "author": {"login": "Rikkola"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcphysegBqjM0MjM5NzUyMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwoGqyABqjM1MDE5MDQwMjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2957d0de2b0c74dc41776b9b2333f9050c5003ee", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/2957d0de2b0c74dc41776b9b2333f9050c5003ee", "committedDate": "2020-06-08T15:00:59Z", "message": "DROOLS-5419 : Scenario Coverage Report counts and shows previous names of renamed rules"}, "afterCommit": {"oid": "8b6d3c530c836c55287c1098659ff670ef479c6d", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8b6d3c530c836c55287c1098659ff670ef479c6d", "committedDate": "2020-06-09T09:38:58Z", "message": "real fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b6d3c530c836c55287c1098659ff670ef479c6d", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8b6d3c530c836c55287c1098659ff670ef479c6d", "committedDate": "2020-06-09T09:38:58Z", "message": "real fix"}, "afterCommit": {"oid": "05ef1c6b030f50e2d5142a0ef15631feb7b94505", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/05ef1c6b030f50e2d5142a0ef15631feb7b94505", "committedDate": "2020-06-09T14:38:03Z", "message": "DROOLS-5419 : Scenario Coverage Report counts and shows previous names of renamed rules"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05ef1c6b030f50e2d5142a0ef15631feb7b94505", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/05ef1c6b030f50e2d5142a0ef15631feb7b94505", "committedDate": "2020-06-09T14:38:03Z", "message": "DROOLS-5419 : Scenario Coverage Report counts and shows previous names of renamed rules"}, "afterCommit": {"oid": "8108753a4f8afc49232d67712f8e85d97fdf922c", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8108753a4f8afc49232d67712f8e85d97fdf922c", "committedDate": "2020-06-24T04:24:01Z", "message": "DROOLS-5419 : Scenario Coverage Report counts and shows previous names of renamed rules"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTA2MTY5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3324#pullrequestreview-438106169", "createdAt": "2020-06-26T08:24:32Z", "commit": {"oid": "8108753a4f8afc49232d67712f8e85d97fdf922c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzgwMTk4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3324#pullrequestreview-438380198", "createdAt": "2020-06-26T15:15:18Z", "commit": {"oid": "8108753a4f8afc49232d67712f8e85d97fdf922c"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNToxOFrOGpktlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxNToyMlrOGpktvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjI5NA==", "bodyText": "@Rikkola Can you please move this field pathCaptor with other fields above?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3324#discussion_r446246294", "createdAt": "2020-06-26T15:15:18Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-services/kie-wb-common-services-backend/src/test/java/org/kie/workbench/common/services/backend/builder/core/BuilderRenameTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.services.backend.builder.core;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.function.Predicate;\n+\n+import org.guvnor.common.services.project.model.GAV;\n+import org.guvnor.common.services.project.model.Module;\n+import org.guvnor.common.services.project.model.POM;\n+import org.guvnor.test.TestFileSystem;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.KieFileSystem;\n+import org.kie.workbench.common.services.shared.project.KieModuleService;\n+import org.kie.workbench.common.services.shared.project.ProjectImportsService;\n+import org.kie.workbench.common.services.shared.whitelist.PackageNameWhiteListService;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.uberfire.backend.vfs.Path;\n+import org.uberfire.io.IOService;\n+import org.uberfire.workbench.events.ResourceChange;\n+import org.uberfire.workbench.events.ResourceRenamed;\n+import org.uberfire.workbench.events.ResourceUpdated;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class BuilderRenameTest {\n+\n+    @Mock\n+    private KieFileSystem kieFileSystem;\n+\n+    private Module module;\n+\n+    private Builder builder;\n+    private TestFileSystem testFileSystem;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        testFileSystem = new TestFileSystem();\n+        final Path root = testFileSystem.createTempDirectory(\"root\");\n+        final Path pomFile = testFileSystem.createTempFile(\"root/pom.xml\");\n+\n+        module = new Module(root,\n+                            pomFile,\n+                            new POM(new GAV()));\n+\n+        builder = new Builder(module,\n+                              mock(IOService.class),\n+                              mock(KieModuleService.class),\n+                              mock(ProjectImportsService.class),\n+                              new ArrayList<>(),\n+                              mock(LRUModuleDependenciesClassLoaderCache.class),\n+                              mock(LRUPomModelCache.class),\n+                              mock(PackageNameWhiteListService.class),\n+                              mock(Predicate.class),\n+                              mock(KieBuilder.class),\n+                              kieFileSystem);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        testFileSystem.tearDown();\n+    }\n+\n+    @Test\n+    public void noChanges() {\n+\n+        builder.applyBatchResourceChanges(new HashMap<>());\n+\n+        verify(kieFileSystem, never()).delete(any());\n+    }\n+\n+    @Captor\n+    private ArgumentCaptor<String> pathCaptor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8108753a4f8afc49232d67712f8e85d97fdf922c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NjMzMw==", "bodyText": "Are these throws Exception necessary?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3324#discussion_r446246333", "createdAt": "2020-06-26T15:15:22Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-services/kie-wb-common-services-backend/src/test/java/org/kie/workbench/common/services/backend/builder/core/BuilderRenameTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.services.backend.builder.core;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.function.Predicate;\n+\n+import org.guvnor.common.services.project.model.GAV;\n+import org.guvnor.common.services.project.model.Module;\n+import org.guvnor.common.services.project.model.POM;\n+import org.guvnor.test.TestFileSystem;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.KieFileSystem;\n+import org.kie.workbench.common.services.shared.project.KieModuleService;\n+import org.kie.workbench.common.services.shared.project.ProjectImportsService;\n+import org.kie.workbench.common.services.shared.whitelist.PackageNameWhiteListService;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.uberfire.backend.vfs.Path;\n+import org.uberfire.io.IOService;\n+import org.uberfire.workbench.events.ResourceChange;\n+import org.uberfire.workbench.events.ResourceRenamed;\n+import org.uberfire.workbench.events.ResourceUpdated;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class BuilderRenameTest {\n+\n+    @Mock\n+    private KieFileSystem kieFileSystem;\n+\n+    private Module module;\n+\n+    private Builder builder;\n+    private TestFileSystem testFileSystem;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        testFileSystem = new TestFileSystem();\n+        final Path root = testFileSystem.createTempDirectory(\"root\");\n+        final Path pomFile = testFileSystem.createTempFile(\"root/pom.xml\");\n+\n+        module = new Module(root,\n+                            pomFile,\n+                            new POM(new GAV()));\n+\n+        builder = new Builder(module,\n+                              mock(IOService.class),\n+                              mock(KieModuleService.class),\n+                              mock(ProjectImportsService.class),\n+                              new ArrayList<>(),\n+                              mock(LRUModuleDependenciesClassLoaderCache.class),\n+                              mock(LRUPomModelCache.class),\n+                              mock(PackageNameWhiteListService.class),\n+                              mock(Predicate.class),\n+                              mock(KieBuilder.class),\n+                              kieFileSystem);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8108753a4f8afc49232d67712f8e85d97fdf922c"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "796c84cf30a74b0f5a2923303a1742dfa9467213", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/796c84cf30a74b0f5a2923303a1742dfa9467213", "committedDate": "2020-07-01T10:57:40Z", "message": "DROOLS-5419 : Scenario Coverage Report counts and shows previous names of renamed rules"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8108753a4f8afc49232d67712f8e85d97fdf922c", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8108753a4f8afc49232d67712f8e85d97fdf922c", "committedDate": "2020-06-24T04:24:01Z", "message": "DROOLS-5419 : Scenario Coverage Report counts and shows previous names of renamed rules"}, "afterCommit": {"oid": "796c84cf30a74b0f5a2923303a1742dfa9467213", "author": {"user": {"login": "Rikkola", "name": "Toni Rikkola"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/796c84cf30a74b0f5a2923303a1742dfa9467213", "committedDate": "2020-07-01T10:57:40Z", "message": "DROOLS-5419 : Scenario Coverage Report counts and shows previous names of renamed rules"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 411, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}