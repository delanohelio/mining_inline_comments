{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MjM0MzA3", "number": 3366, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozMTowOVrOETqGuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzo1MDo0OFrOEVbBdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDQ4MjQ5OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozMTowOVrOG5g7UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMTozNDoyM1rOG8FyEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MTQ4OA==", "bodyText": "shouldn't we use constants like: DMNImportTypes.PMML.getFileExtension() ?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r462961488", "createdAt": "2020-07-30T12:31:09Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -79,21 +77,26 @@\n     private final Promises promises;\n     private final DMNDiagramUtils diagramUtils;\n     private final DMNIncludedNodeFactory includedModelFactory;\n+    private final PMMLMarshallerService pmmlMarshallerService;\n \n     private static final Logger LOGGER = Logger.getLogger(DMNMarshallerImportsHelperKogitoImpl.class.getName());\n     private static final String DMN_FILES_PATTERN = \"*.dmn\";\n+    static final String PMML_FILES_PATTERN = \"*.pmml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwMDQxNw==", "bodyText": "@jstastny-cz I'm a DRY supporter, but in this case I don't think it's particular critical to use DMNImportTypes.PMML.getFileExtension() instead of \"dmn\". No problems to apply your suggestion (and your 3 comment as well). My only point is to use the same approach for DMN files as well. @karreiro and @danielzhe WDTY?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r463500417", "createdAt": "2020-07-31T09:17:46Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -79,21 +77,26 @@\n     private final Promises promises;\n     private final DMNDiagramUtils diagramUtils;\n     private final DMNIncludedNodeFactory includedModelFactory;\n+    private final PMMLMarshallerService pmmlMarshallerService;\n \n     private static final Logger LOGGER = Logger.getLogger(DMNMarshallerImportsHelperKogitoImpl.class.getName());\n     private static final String DMN_FILES_PATTERN = \"*.dmn\";\n+    static final String PMML_FILES_PATTERN = \"*.pmml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MTQ4OA=="}, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ5Mzg0OQ==", "bodyText": "I think is good to keep as it is, since for DMN_FILES_PATTERN is hardcoded just above.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r464493849", "createdAt": "2020-08-03T15:37:29Z", "author": {"login": "danielzhe"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -79,21 +77,26 @@\n     private final Promises promises;\n     private final DMNDiagramUtils diagramUtils;\n     private final DMNIncludedNodeFactory includedModelFactory;\n+    private final PMMLMarshallerService pmmlMarshallerService;\n \n     private static final Logger LOGGER = Logger.getLogger(DMNMarshallerImportsHelperKogitoImpl.class.getName());\n     private static final String DMN_FILES_PATTERN = \"*.dmn\";\n+    static final String PMML_FILES_PATTERN = \"*.pmml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MTQ4OA=="}, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MjQ4MQ==", "bodyText": "Outvoted. ;-)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465662481", "createdAt": "2020-08-05T11:34:23Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -79,21 +77,26 @@\n     private final Promises promises;\n     private final DMNDiagramUtils diagramUtils;\n     private final DMNIncludedNodeFactory includedModelFactory;\n+    private final PMMLMarshallerService pmmlMarshallerService;\n \n     private static final Logger LOGGER = Logger.getLogger(DMNMarshallerImportsHelperKogitoImpl.class.getName());\n     private static final String DMN_FILES_PATTERN = \"*.dmn\";\n+    static final String PMML_FILES_PATTERN = \"*.pmml\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MTQ4OA=="}, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDYwMTg2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowNDowMFrOG5iD2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOToxMTozNVrOG6BpBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4MDA1Ng==", "bodyText": "is there any reason not to wait for the async promise to resolve and return in a seemingly sync manner?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r462980056", "createdAt": "2020-07-30T13:04:00Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4MDYyNQ==", "bodyText": "in other words - are we trying to prevent such calls or just don't need them right now?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r462980625", "createdAt": "2020-07-30T13:04:56Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4MDA1Ng=="}, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NzQ3OQ==", "bodyText": "@jstastny-cz The method you highlighted is used on Business Central context, where a synchronous call is launched toward the backend side. In Kogito context, ResourceContentAPI (the module which searches for files and reads it) works in an Asynchronous way. For this reason we can't use that call (and all methods calls which require to read / search files) in Kogito.\nTherefore, that call should be never used in Kogito, because we don't have (and probably we will never have) a synchronous way to deal with ResourceContentAPI. For this reason a UnsupportedOperationException is thrown, in case someone uses it Kogito.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r463497479", "createdAt": "2020-07-31T09:11:35Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4MDA1Ng=="}, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDYxOTE1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMzowODo1MFrOG5iOew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMTozNDo0N1rOG8FyvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4Mjc3OQ==", "bodyText": "for better readability I'd propose introducing a constant pairs like\nprivate static final String DMN_FILE_EXTENSION = \".\" + DMNImportTypes.DMN.getFileExtension();\nprivate static final String DMN_FILES_PATTERN = \"*\" + DMN_FILE_EXTENSION;\n\nand reuse those.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r462982779", "createdAt": "2020-07-30T13:08:50Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MjY1Mg==", "bodyText": "resolving based on discussion in the thread above", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465662652", "createdAt": "2020-08-05T11:34:47Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4Mjc3OQ=="}, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDg2MDYyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerKogitoUnmarshallerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDowNDozOVrOG5kiXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzowNjoyMlrOG5-NQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyMDYzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void umarshall() {\n          \n          \n            \n                public void unmarshall() {", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r463020637", "createdAt": "2020-07-30T14:04:39Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerKogitoUnmarshallerTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.dmn12.JSITDefinitions;\n+import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.dmn12.JSITImport;\n+import org.kie.workbench.common.stunner.core.api.FactoryManager;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.mockito.Mock;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.promise.SyncPromises;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNMarshallerKogitoUnmarshallerTest {\n+\n+    @Mock\n+    private DMNMarshallerImportsHelperKogito dmnMarshallerImportsHelperKogitoMock;\n+    @Mock\n+    private FactoryManager factoryManagerMock;\n+    @Mock\n+    private Metadata metadataMock;\n+    @Mock\n+    private JSITDefinitions jsitDefinitionsMock;\n+    \n+    private DMNMarshallerKogitoUnmarshaller dmnMarshallerKogitoUnmarshaller;\n+    private List<JSITImport> imports;\n+    private Promises promises;\n+\n+    @Before\n+    public void setup() {\n+        promises = new SyncPromises();\n+        dmnMarshallerKogitoUnmarshaller = new DMNMarshallerKogitoUnmarshaller(factoryManagerMock,\n+                                                                              dmnMarshallerImportsHelperKogitoMock,\n+                                                                              promises);\n+        imports = new ArrayList<>();\n+        imports.add(mock(JSITImport.class));\n+        when(jsitDefinitionsMock.getImport()).thenReturn(imports);\n+        when(dmnMarshallerImportsHelperKogitoMock.getImportDefinitionsAsync(eq(metadataMock), eq(imports))).thenReturn(promises.resolve(Collections.emptyMap()));\n+        when(dmnMarshallerImportsHelperKogitoMock.getPMMLDocumentsAsync(eq(metadataMock), eq(imports))).thenReturn(promises.resolve(Collections.emptyMap()));\n+    }\n+\n+    @Test\n+    public void umarshall() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0MTIxNg==", "bodyText": "@jstastny-cz Thank you!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r463441216", "createdAt": "2020-07-31T07:06:22Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerKogitoUnmarshallerTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.dmn12.JSITDefinitions;\n+import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.dmn12.JSITImport;\n+import org.kie.workbench.common.stunner.core.api.FactoryManager;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.mockito.Mock;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.promise.SyncPromises;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNMarshallerKogitoUnmarshallerTest {\n+\n+    @Mock\n+    private DMNMarshallerImportsHelperKogito dmnMarshallerImportsHelperKogitoMock;\n+    @Mock\n+    private FactoryManager factoryManagerMock;\n+    @Mock\n+    private Metadata metadataMock;\n+    @Mock\n+    private JSITDefinitions jsitDefinitionsMock;\n+    \n+    private DMNMarshallerKogitoUnmarshaller dmnMarshallerKogitoUnmarshaller;\n+    private List<JSITImport> imports;\n+    private Promises promises;\n+\n+    @Before\n+    public void setup() {\n+        promises = new SyncPromises();\n+        dmnMarshallerKogitoUnmarshaller = new DMNMarshallerKogitoUnmarshaller(factoryManagerMock,\n+                                                                              dmnMarshallerImportsHelperKogitoMock,\n+                                                                              promises);\n+        imports = new ArrayList<>();\n+        imports.add(mock(JSITImport.class));\n+        when(jsitDefinitionsMock.getImport()).thenReturn(imports);\n+        when(dmnMarshallerImportsHelperKogitoMock.getImportDefinitionsAsync(eq(metadataMock), eq(imports))).thenReturn(promises.resolve(Collections.emptyMap()));\n+        when(dmnMarshallerImportsHelperKogitoMock.getPMMLDocumentsAsync(eq(metadataMock), eq(imports))).thenReturn(promises.resolve(Collections.emptyMap()));\n+    }\n+\n+    @Test\n+    public void umarshall() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyMDYzNw=="}, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDg4ODYwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoxMToxOVrOG5kz9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzowNTo0MVrOG5-MeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyNTE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        int modelNumber = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n          \n          \n            \n                                        int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r463025143", "createdAt": "2020-07-30T14:11:19Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelNumber = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0MTAxNg==", "bodyText": "@jstastny-cz Thank you!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r463441016", "createdAt": "2020-07-31T07:05:41Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelNumber = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyNTE0Mw=="}, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODg4MDIwOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyNjowNlrOG8JkgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzo0ODoyMFrOG8nQTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNDU0NQ==", "bodyText": "What 'Imports ' do we mean please? Is the message appropriate?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465724545", "createdAt": "2020-08-05T13:26:06Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getPMMLDocumentsAsync.\");\n+    }\n+\n+    @Override\n+    default List<JSITItemDefinition> getImportedItemDefinitionsByNamespace(final WorkspaceProject workspaceProject,\n+                                                                           final String modelName,\n+                                                                           final String namespace) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportedItemDefinitionsByNamespaceAsync.\");\n+    }\n+\n+    @Override\n+    default Path getDMNModelPath(final Metadata metadata,\n+                                 final String modelNamespace,\n+                                 final String modelName) {\n+        throw new UnsupportedOperationException(\"Imports are not supported in the kogito-based editors.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxMDg5Mw==", "bodyText": "@jomarko I updated it to Sync calls are not supported in the kogito-based editors.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r466210893", "createdAt": "2020-08-06T07:48:20Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getPMMLDocumentsAsync.\");\n+    }\n+\n+    @Override\n+    default List<JSITItemDefinition> getImportedItemDefinitionsByNamespace(final WorkspaceProject workspaceProject,\n+                                                                           final String modelName,\n+                                                                           final String namespace) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportedItemDefinitionsByNamespaceAsync.\");\n+    }\n+\n+    @Override\n+    default Path getDMNModelPath(final Metadata metadata,\n+                                 final String modelNamespace,\n+                                 final String modelName) {\n+        throw new UnsupportedOperationException(\"Imports are not supported in the kogito-based editors.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNDU0NQ=="}, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODg4MDU4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyNjoxMVrOG8JkxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzo0ODoyN1rOG8nQgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNDYxMw==", "bodyText": "What 'Imports ' do we mean please? Is the message appropriate?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465724613", "createdAt": "2020-08-05T13:26:11Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getPMMLDocumentsAsync.\");\n+    }\n+\n+    @Override\n+    default List<JSITItemDefinition> getImportedItemDefinitionsByNamespace(final WorkspaceProject workspaceProject,\n+                                                                           final String modelName,\n+                                                                           final String namespace) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportedItemDefinitionsByNamespaceAsync.\");\n+    }\n+\n+    @Override\n+    default Path getDMNModelPath(final Metadata metadata,\n+                                 final String modelNamespace,\n+                                 final String modelName) {\n+        throw new UnsupportedOperationException(\"Imports are not supported in the kogito-based editors.\");\n+    }\n+\n+    @Override\n+    default Optional<InputStream> loadPath(final Path path) {\n+        throw new UnsupportedOperationException(\"Imports are not supported in the kogito-based editors.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxMDk0NQ==", "bodyText": "@jomarko I updated it to Sync calls are not supported in the kogito-based editors.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r466210945", "createdAt": "2020-08-06T07:48:27Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getPMMLDocumentsAsync.\");\n+    }\n+\n+    @Override\n+    default List<JSITItemDefinition> getImportedItemDefinitionsByNamespace(final WorkspaceProject workspaceProject,\n+                                                                           final String modelName,\n+                                                                           final String namespace) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportedItemDefinitionsByNamespaceAsync.\");\n+    }\n+\n+    @Override\n+    default Path getDMNModelPath(final Metadata metadata,\n+                                 final String modelNamespace,\n+                                 final String modelName) {\n+        throw new UnsupportedOperationException(\"Imports are not supported in the kogito-based editors.\");\n+    }\n+\n+    @Override\n+    default Optional<InputStream> loadPath(final Path path) {\n+        throw new UnsupportedOperationException(\"Imports are not supported in the kogito-based editors.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNDYxMw=="}, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkyOTA2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozNzo1N1rOG8KDGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzo0ODo0M1rOG8nRBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMjM3OQ==", "bodyText": "Maybe we could mention supported extensions in the message", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465732379", "createdAt": "2020-08-05T13:37:57Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n+                            models.add(new PMMLIncludedModel(fileName,\n+                                                            \"\",\n+                                                             fileName,\n+                                                             DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                             modelCount));\n+                            return promises.resolve();\n+                        });\n+                }\n+                return promises.reject(\"Error: \" + fileName + \" is an invalid file.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxMTA3Nw==", "bodyText": "@jomarko Thank you, done!", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r466211077", "createdAt": "2020-08-06T07:48:43Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n+                            models.add(new PMMLIncludedModel(fileName,\n+                                                            \"\",\n+                                                             fileName,\n+                                                             DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                             modelCount));\n+                            return promises.resolve();\n+                        });\n+                }\n+                return promises.reject(\"Error: \" + fileName + \" is an invalid file.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMjM3OQ=="}, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkzMjQxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozODo0OFrOG8KFWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzo1MDowNVrOG8nUXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMjk1NQ==", "bodyText": "comparing with pmml, shouldn't we check diagramUtils.getDRGElements(diagram) is not null?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465732955", "createdAt": "2020-08-05T13:38:48Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n+                            models.add(new PMMLIncludedModel(fileName,\n+                                                            \"\",\n+                                                             fileName,\n+                                                             DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                             modelCount));\n+                            return promises.resolve();\n+                        });\n+                }\n+                return promises.reject(\"Error: \" + fileName + \" is an invalid file.\");\n+            }).then(v -> {\n+                callback.onSuccess(models);\n+                return promises.resolve();\n+            }));\n+    }\n \n-                        @Override\n-                        public void onError(final ClientRuntimeError error) {\n-                            LOGGER.log(Level.SEVERE, error.getMessage());\n-                        }\n-                    });\n-                    return promises.resolve();\n-                })).then(v -> {\n-                    callback.onSuccess(models);\n-                    return promises.resolve();\n-                }));\n+    private ServiceCallback<Diagram> getDMNDiagramCallback(final String fileName,\n+                                                           final List<IncludedModel> models,\n+                                                           final Promise.PromiseExecutorCallbackFn.ResolveCallbackFn<Object> success,\n+                                                           final Promise.PromiseExecutorCallbackFn.RejectCallbackFn failed) {\n+        return new ServiceCallback<Diagram>() {\n+\n+            @Override\n+            public void onSuccess(final Diagram diagram) {\n+                final String modelPackage = \"\";\n+                final String namespace = diagramUtils.getNamespace(diagram);\n+                final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n+                final int drgElementCount = diagramUtils.getDRGElements(diagram).size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxMTkzNA==", "bodyText": "@jomarko In this case, getDRGElements can never return a null value (collect() method is used, which return at least an empty collection)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r466211934", "createdAt": "2020-08-06T07:50:05Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n+                            models.add(new PMMLIncludedModel(fileName,\n+                                                            \"\",\n+                                                             fileName,\n+                                                             DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                             modelCount));\n+                            return promises.resolve();\n+                        });\n+                }\n+                return promises.reject(\"Error: \" + fileName + \" is an invalid file.\");\n+            }).then(v -> {\n+                callback.onSuccess(models);\n+                return promises.resolve();\n+            }));\n+    }\n \n-                        @Override\n-                        public void onError(final ClientRuntimeError error) {\n-                            LOGGER.log(Level.SEVERE, error.getMessage());\n-                        }\n-                    });\n-                    return promises.resolve();\n-                })).then(v -> {\n-                    callback.onSuccess(models);\n-                    return promises.resolve();\n-                }));\n+    private ServiceCallback<Diagram> getDMNDiagramCallback(final String fileName,\n+                                                           final List<IncludedModel> models,\n+                                                           final Promise.PromiseExecutorCallbackFn.ResolveCallbackFn<Object> success,\n+                                                           final Promise.PromiseExecutorCallbackFn.RejectCallbackFn failed) {\n+        return new ServiceCallback<Diagram>() {\n+\n+            @Override\n+            public void onSuccess(final Diagram diagram) {\n+                final String modelPackage = \"\";\n+                final String namespace = diagramUtils.getNamespace(diagram);\n+                final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n+                final int drgElementCount = diagramUtils.getDRGElements(diagram).size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMjk1NQ=="}, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODkzMzE1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzozOTowMlrOG8KF4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNzo1MToyM1rOG8nYcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMzA5MA==", "bodyText": "simila question", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465733090", "createdAt": "2020-08-05T13:39:02Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n+                            models.add(new PMMLIncludedModel(fileName,\n+                                                            \"\",\n+                                                             fileName,\n+                                                             DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                             modelCount));\n+                            return promises.resolve();\n+                        });\n+                }\n+                return promises.reject(\"Error: \" + fileName + \" is an invalid file.\");\n+            }).then(v -> {\n+                callback.onSuccess(models);\n+                return promises.resolve();\n+            }));\n+    }\n \n-                        @Override\n-                        public void onError(final ClientRuntimeError error) {\n-                            LOGGER.log(Level.SEVERE, error.getMessage());\n-                        }\n-                    });\n-                    return promises.resolve();\n-                })).then(v -> {\n-                    callback.onSuccess(models);\n-                    return promises.resolve();\n-                }));\n+    private ServiceCallback<Diagram> getDMNDiagramCallback(final String fileName,\n+                                                           final List<IncludedModel> models,\n+                                                           final Promise.PromiseExecutorCallbackFn.ResolveCallbackFn<Object> success,\n+                                                           final Promise.PromiseExecutorCallbackFn.RejectCallbackFn failed) {\n+        return new ServiceCallback<Diagram>() {\n+\n+            @Override\n+            public void onSuccess(final Diagram diagram) {\n+                final String modelPackage = \"\";\n+                final String namespace = diagramUtils.getNamespace(diagram);\n+                final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n+                final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n+                final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxMjk3OA==", "bodyText": "@jomarko I added the check on getDefinitions(diagram). getDefinition() never returns null.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r466212978", "createdAt": "2020-08-06T07:51:23Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n+                            models.add(new PMMLIncludedModel(fileName,\n+                                                            \"\",\n+                                                             fileName,\n+                                                             DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                             modelCount));\n+                            return promises.resolve();\n+                        });\n+                }\n+                return promises.reject(\"Error: \" + fileName + \" is an invalid file.\");\n+            }).then(v -> {\n+                callback.onSuccess(models);\n+                return promises.resolve();\n+            }));\n+    }\n \n-                        @Override\n-                        public void onError(final ClientRuntimeError error) {\n-                            LOGGER.log(Level.SEVERE, error.getMessage());\n-                        }\n-                    });\n-                    return promises.resolve();\n-                })).then(v -> {\n-                    callback.onSuccess(models);\n-                    return promises.resolve();\n-                }));\n+    private ServiceCallback<Diagram> getDMNDiagramCallback(final String fileName,\n+                                                           final List<IncludedModel> models,\n+                                                           final Promise.PromiseExecutorCallbackFn.ResolveCallbackFn<Object> success,\n+                                                           final Promise.PromiseExecutorCallbackFn.RejectCallbackFn failed) {\n+        return new ServiceCallback<Diagram>() {\n+\n+            @Override\n+            public void onSuccess(final Diagram diagram) {\n+                final String modelPackage = \"\";\n+                final String namespace = diagramUtils.getNamespace(diagram);\n+                final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n+                final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n+                final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMzA5MA=="}, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODk1MzY0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzo0NDowMFrOG8KTRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozOTo1M1rOG8PZIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjUxNg==", "bodyText": "Do I understand that right we just allow user to pick the pmml model in selectbox but we do not parse the content?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465736516", "createdAt": "2020-08-05T13:44:00Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.services;\n+\n+import java.util.Collections;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.Promise;\n+import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.stunner.core.util.FileUtils;\n+import org.kie.workbench.common.stunner.core.util.StringUtils;\n+import org.uberfire.client.promise.Promises;\n+\n+/**\n+ * Scope of this bean is to provide an entry point to the PMML client marshaller available thought enveloper\n+ */\n+@Dependent\n+public class PMMLMarshallerService {\n+\n+    private Promises promises;\n+\n+    public PMMLMarshallerService() {\n+        // CDI\n+    }\n+\n+    @Inject\n+    public PMMLMarshallerService(final Promises promises) {\n+        this.promises = promises;\n+    }\n+\n+    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFile, final String pmmlFileContent) {\n+        if (StringUtils.isEmpty(pmmlFile)) {\n+            return promises.reject(\"PMML fileName required to be marshalled is empty or null\");\n+        }\n+        if (StringUtils.isEmpty(pmmlFileContent)) {\n+            return promises.reject(\"PMML file \" + pmmlFile + \" content required to be marshalled is empty or null\");\n+        }\n+\n+        /* Here, a JSInterop call through enveloper should be used passing pmmlFileContent */\n+        String pmmlFileName = FileUtils.getFileName(pmmlFile);\n+        PMMLDocumentMetadata documentMetadata = new PMMLDocumentMetadata(pmmlFile,\n+                                                                         pmmlFileName,\n+                                                                         DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                                         Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxOTkzNw==", "bodyText": "@jomarko Correct, this because the Marshaller was unavailable until 2 days ago. The parsing will be introduced in another ticket https://issues.redhat.com/browse/KOGITO-2895 (currently in progress)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465819937", "createdAt": "2020-08-05T15:39:53Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.services;\n+\n+import java.util.Collections;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.Promise;\n+import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.stunner.core.util.FileUtils;\n+import org.kie.workbench.common.stunner.core.util.StringUtils;\n+import org.uberfire.client.promise.Promises;\n+\n+/**\n+ * Scope of this bean is to provide an entry point to the PMML client marshaller available thought enveloper\n+ */\n+@Dependent\n+public class PMMLMarshallerService {\n+\n+    private Promises promises;\n+\n+    public PMMLMarshallerService() {\n+        // CDI\n+    }\n+\n+    @Inject\n+    public PMMLMarshallerService(final Promises promises) {\n+        this.promises = promises;\n+    }\n+\n+    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFile, final String pmmlFileContent) {\n+        if (StringUtils.isEmpty(pmmlFile)) {\n+            return promises.reject(\"PMML fileName required to be marshalled is empty or null\");\n+        }\n+        if (StringUtils.isEmpty(pmmlFileContent)) {\n+            return promises.reject(\"PMML file \" + pmmlFile + \" content required to be marshalled is empty or null\");\n+        }\n+\n+        /* Here, a JSInterop call through enveloper should be used passing pmmlFileContent */\n+        String pmmlFileName = FileUtils.getFileName(pmmlFile);\n+        PMMLDocumentMetadata documentMetadata = new PMMLDocumentMetadata(pmmlFile,\n+                                                                         pmmlFileName,\n+                                                                         DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                                         Collections.emptyList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjUxNg=="}, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODk4Mjk0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzo1MDo0OFrOG8KlZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTo1MzoyM1rOG8P9KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0MTE1OA==", "bodyText": "Sorry, Promises are kind of new to me. I am not sure we are checking getPMMLDocumentsAsync returned empty map or throw an error. Could you please explain it to me?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465741158", "createdAt": "2020-08-05T13:50:48Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImplTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.promise.Promise;\n+import org.appformer.kogito.bridge.client.resource.interop.ResourceListOptions;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n+import org.kie.workbench.common.dmn.api.editors.included.IncludedModel;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLIncludedModel;\n+import org.kie.workbench.common.dmn.api.graph.DMNDiagramUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.services.DMNClientDiagramServiceImpl;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.services.PMMLMarshallerService;\n+import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.dmn12.JSITImport;\n+import org.kie.workbench.common.kogito.webapp.base.client.workarounds.KogitoResourceContentService;\n+import org.kie.workbench.common.stunner.core.client.service.ServiceCallback;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.promise.SyncPromises;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.kie.workbench.common.dmn.webapp.kogito.common.client.converters.DMNMarshallerImportsHelperKogitoImpl.MODEL_FILES_PATTERN;\n+import static org.kie.workbench.common.dmn.webapp.kogito.common.client.converters.DMNMarshallerImportsHelperKogitoImpl.PMML_FILES_PATTERN;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Matchers.isA;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNMarshallerImportsHelperKogitoImplTest {\n+\n+    @Mock\n+    private DMNClientDiagramServiceImpl dmnClientDiagramServiceMock;\n+    @Mock\n+    private DMNDiagramUtils dmnDiagramUtilsMock;\n+    @Mock\n+    private DMNIncludedNodeFactory dmnIncludedNodeFactoryMock;\n+    @Mock\n+    private KogitoResourceContentService kogitoResourceContentServiceMock;\n+    @Mock\n+    private Metadata metadataMock;\n+    @Mock\n+    private PMMLMarshallerService pmmlMarshallerServiceMock;\n+    @Mock\n+    private ServiceCallback serviceCallbackMock;\n+    @Captor\n+    private ArgumentCaptor<List<IncludedModel>> modelsCapture;\n+\n+    private static final String DMN_FILE = \"test-dmn.dmn\";\n+    private static final String DMN_PATH = \"dmntest/\" + DMN_FILE;\n+    private static final String DMN_CONTENT = \"<xml> xml DMN content </xml>\";\n+\n+    private static final String PMML_FILE = \"test-pmml.pmml\";\n+    private static final String PMML_PATH = \"dmnpmml/\" + PMML_FILE;\n+    private static final String PMML_CONTENT = \"<xml> xml PMML content </xml>\";\n+\n+    private static final String TEXT_FILE = \"test-file.txt\";\n+    private static final String TEXT_PATH = \"invalidfile/\" + TEXT_FILE;\n+\n+    private DMNMarshallerImportsHelperKogitoImpl dmnMarshallerImportsHelperKogitoImpl;\n+    private Promises promises;\n+\n+    @Before\n+    public void setup() {\n+        promises = new SyncPromises();\n+        dmnMarshallerImportsHelperKogitoImpl = new DMNMarshallerImportsHelperKogitoImpl(kogitoResourceContentServiceMock,\n+                                                                                        dmnClientDiagramServiceMock,\n+                                                                                        promises,\n+                                                                                        dmnDiagramUtilsMock,\n+                                                                                        dmnIncludedNodeFactoryMock,\n+                                                                                        pmmlMarshallerServiceMock);\n+\n+    }\n+\n+    @Test\n+    public void loadModelsDMNFile() {\n+        when(kogitoResourceContentServiceMock.getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class))).thenReturn(promises.resolve(new String[]{DMN_PATH}));\n+        when(kogitoResourceContentServiceMock.loadFile(DMN_PATH)).thenReturn(promises.resolve(DMN_CONTENT));\n+        dmnMarshallerImportsHelperKogitoImpl.loadModels(serviceCallbackMock);\n+        verify(kogitoResourceContentServiceMock, times(1)).getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class));\n+        verify(kogitoResourceContentServiceMock, times(1)).loadFile(eq(DMN_PATH));\n+        verify(dmnClientDiagramServiceMock, times(1)).transform(eq(DMN_CONTENT), isA(ServiceCallback.class));\n+    }\n+\n+    @Test\n+    public void loadModelsPMMLFile() {\n+        when(kogitoResourceContentServiceMock.getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class))).thenReturn(promises.resolve(new String[]{PMML_PATH}));\n+        when(kogitoResourceContentServiceMock.loadFile(PMML_PATH)).thenReturn(promises.resolve(PMML_CONTENT));\n+        when(pmmlMarshallerServiceMock.getDocumentMetadata(PMML_PATH, PMML_CONTENT)).thenReturn(promises.resolve(new PMMLDocumentMetadata(PMML_PATH,\n+                                                                                                                         PMML_FILE,\n+                                                                                                                         DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                                                                                         Collections.emptyList())));\n+        dmnMarshallerImportsHelperKogitoImpl.loadModels(serviceCallbackMock);\n+        verify(kogitoResourceContentServiceMock, times(1)).getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class));\n+        verify(kogitoResourceContentServiceMock, times(1)).loadFile(eq(PMML_PATH));\n+        verify(pmmlMarshallerServiceMock, times(1)).getDocumentMetadata(eq(PMML_PATH), eq(PMML_CONTENT));\n+        verify(serviceCallbackMock, times(1)).onSuccess(modelsCapture.capture());\n+        assertEquals(1, modelsCapture.getValue().size());\n+        assertEquals(PMML_FILE, modelsCapture.getValue().get(0).getPath());\n+        assertEquals(PMML_FILE, modelsCapture.getValue().get(0).getModelName());\n+        assertEquals(DMNImportTypes.PMML.getDefaultNamespace(), modelsCapture.getValue().get(0).getImportType());\n+        assertEquals(0, ((PMMLIncludedModel) modelsCapture.getValue().get(0)).getModelCount().intValue());\n+    }\n+\n+    @Test\n+    public void loadModelsInvalidFile() {\n+        when(kogitoResourceContentServiceMock.getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class))).thenReturn(promises.resolve(new String[]{TEXT_PATH}));\n+        dmnMarshallerImportsHelperKogitoImpl.loadModels(serviceCallbackMock);\n+        verify(kogitoResourceContentServiceMock, times(1)).getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class));\n+        verify(kogitoResourceContentServiceMock, never()).loadFile(any());\n+        verify(pmmlMarshallerServiceMock, never()).getDocumentMetadata(any(), any());\n+        verify(dmnClientDiagramServiceMock, never()).transform(any(), any());\n+    }\n+\n+    @Test\n+    public void getPMMLDocumentsAsync_EmptyImports() {\n+        Promise<Map<JSITImport, PMMLDocumentMetadata>> returnPromise = dmnMarshallerImportsHelperKogitoImpl.getPMMLDocumentsAsync(metadataMock, Collections.emptyList());\n+        returnPromise.then(p0 -> {\n+            assertEquals(0, p0.size());\n+            return promises.resolve();\n+        }).catch_(i -> {\n+            Assert.fail(\"Promise should've been resolved!\");\n+            return promises.resolve();\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyOTE2MA==", "bodyText": "@jomarko To be successful, the test must returns a resolved promise with an empty map. In case the returned map is not equals to a empty map OR a failed promise is returned, the test will fail.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465829160", "createdAt": "2020-08-05T15:53:23Z", "author": {"login": "yesamer"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImplTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.promise.Promise;\n+import org.appformer.kogito.bridge.client.resource.interop.ResourceListOptions;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n+import org.kie.workbench.common.dmn.api.editors.included.IncludedModel;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLIncludedModel;\n+import org.kie.workbench.common.dmn.api.graph.DMNDiagramUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.services.DMNClientDiagramServiceImpl;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.services.PMMLMarshallerService;\n+import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.dmn12.JSITImport;\n+import org.kie.workbench.common.kogito.webapp.base.client.workarounds.KogitoResourceContentService;\n+import org.kie.workbench.common.stunner.core.client.service.ServiceCallback;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.promise.SyncPromises;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.kie.workbench.common.dmn.webapp.kogito.common.client.converters.DMNMarshallerImportsHelperKogitoImpl.MODEL_FILES_PATTERN;\n+import static org.kie.workbench.common.dmn.webapp.kogito.common.client.converters.DMNMarshallerImportsHelperKogitoImpl.PMML_FILES_PATTERN;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Matchers.isA;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNMarshallerImportsHelperKogitoImplTest {\n+\n+    @Mock\n+    private DMNClientDiagramServiceImpl dmnClientDiagramServiceMock;\n+    @Mock\n+    private DMNDiagramUtils dmnDiagramUtilsMock;\n+    @Mock\n+    private DMNIncludedNodeFactory dmnIncludedNodeFactoryMock;\n+    @Mock\n+    private KogitoResourceContentService kogitoResourceContentServiceMock;\n+    @Mock\n+    private Metadata metadataMock;\n+    @Mock\n+    private PMMLMarshallerService pmmlMarshallerServiceMock;\n+    @Mock\n+    private ServiceCallback serviceCallbackMock;\n+    @Captor\n+    private ArgumentCaptor<List<IncludedModel>> modelsCapture;\n+\n+    private static final String DMN_FILE = \"test-dmn.dmn\";\n+    private static final String DMN_PATH = \"dmntest/\" + DMN_FILE;\n+    private static final String DMN_CONTENT = \"<xml> xml DMN content </xml>\";\n+\n+    private static final String PMML_FILE = \"test-pmml.pmml\";\n+    private static final String PMML_PATH = \"dmnpmml/\" + PMML_FILE;\n+    private static final String PMML_CONTENT = \"<xml> xml PMML content </xml>\";\n+\n+    private static final String TEXT_FILE = \"test-file.txt\";\n+    private static final String TEXT_PATH = \"invalidfile/\" + TEXT_FILE;\n+\n+    private DMNMarshallerImportsHelperKogitoImpl dmnMarshallerImportsHelperKogitoImpl;\n+    private Promises promises;\n+\n+    @Before\n+    public void setup() {\n+        promises = new SyncPromises();\n+        dmnMarshallerImportsHelperKogitoImpl = new DMNMarshallerImportsHelperKogitoImpl(kogitoResourceContentServiceMock,\n+                                                                                        dmnClientDiagramServiceMock,\n+                                                                                        promises,\n+                                                                                        dmnDiagramUtilsMock,\n+                                                                                        dmnIncludedNodeFactoryMock,\n+                                                                                        pmmlMarshallerServiceMock);\n+\n+    }\n+\n+    @Test\n+    public void loadModelsDMNFile() {\n+        when(kogitoResourceContentServiceMock.getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class))).thenReturn(promises.resolve(new String[]{DMN_PATH}));\n+        when(kogitoResourceContentServiceMock.loadFile(DMN_PATH)).thenReturn(promises.resolve(DMN_CONTENT));\n+        dmnMarshallerImportsHelperKogitoImpl.loadModels(serviceCallbackMock);\n+        verify(kogitoResourceContentServiceMock, times(1)).getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class));\n+        verify(kogitoResourceContentServiceMock, times(1)).loadFile(eq(DMN_PATH));\n+        verify(dmnClientDiagramServiceMock, times(1)).transform(eq(DMN_CONTENT), isA(ServiceCallback.class));\n+    }\n+\n+    @Test\n+    public void loadModelsPMMLFile() {\n+        when(kogitoResourceContentServiceMock.getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class))).thenReturn(promises.resolve(new String[]{PMML_PATH}));\n+        when(kogitoResourceContentServiceMock.loadFile(PMML_PATH)).thenReturn(promises.resolve(PMML_CONTENT));\n+        when(pmmlMarshallerServiceMock.getDocumentMetadata(PMML_PATH, PMML_CONTENT)).thenReturn(promises.resolve(new PMMLDocumentMetadata(PMML_PATH,\n+                                                                                                                         PMML_FILE,\n+                                                                                                                         DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                                                                                         Collections.emptyList())));\n+        dmnMarshallerImportsHelperKogitoImpl.loadModels(serviceCallbackMock);\n+        verify(kogitoResourceContentServiceMock, times(1)).getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class));\n+        verify(kogitoResourceContentServiceMock, times(1)).loadFile(eq(PMML_PATH));\n+        verify(pmmlMarshallerServiceMock, times(1)).getDocumentMetadata(eq(PMML_PATH), eq(PMML_CONTENT));\n+        verify(serviceCallbackMock, times(1)).onSuccess(modelsCapture.capture());\n+        assertEquals(1, modelsCapture.getValue().size());\n+        assertEquals(PMML_FILE, modelsCapture.getValue().get(0).getPath());\n+        assertEquals(PMML_FILE, modelsCapture.getValue().get(0).getModelName());\n+        assertEquals(DMNImportTypes.PMML.getDefaultNamespace(), modelsCapture.getValue().get(0).getImportType());\n+        assertEquals(0, ((PMMLIncludedModel) modelsCapture.getValue().get(0)).getModelCount().intValue());\n+    }\n+\n+    @Test\n+    public void loadModelsInvalidFile() {\n+        when(kogitoResourceContentServiceMock.getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class))).thenReturn(promises.resolve(new String[]{TEXT_PATH}));\n+        dmnMarshallerImportsHelperKogitoImpl.loadModels(serviceCallbackMock);\n+        verify(kogitoResourceContentServiceMock, times(1)).getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class));\n+        verify(kogitoResourceContentServiceMock, never()).loadFile(any());\n+        verify(pmmlMarshallerServiceMock, never()).getDocumentMetadata(any(), any());\n+        verify(dmnClientDiagramServiceMock, never()).transform(any(), any());\n+    }\n+\n+    @Test\n+    public void getPMMLDocumentsAsync_EmptyImports() {\n+        Promise<Map<JSITImport, PMMLDocumentMetadata>> returnPromise = dmnMarshallerImportsHelperKogitoImpl.getPMMLDocumentsAsync(metadataMock, Collections.emptyList());\n+        returnPromise.then(p0 -> {\n+            assertEquals(0, p0.size());\n+            return promises.resolve();\n+        }).catch_(i -> {\n+            Assert.fail(\"Promise should've been resolved!\");\n+            return promises.resolve();\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0MTE1OA=="}, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1358, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}