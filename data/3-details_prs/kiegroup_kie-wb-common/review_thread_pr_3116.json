{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1MDY2OTkx", "number": 3116, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTo0NTozM1rODZYYag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyODozNFrODc6KnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQwNDU4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/test/java/org/kie/workbench/common/screens/server/management/client/wizard/NewContainerWizardTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTo0NTozM1rOFfu_Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjowMjoxNVrOFfvNAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxOTk3OA==", "bodyText": "mock(WizardPage.class) ?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r368819978", "createdAt": "2020-01-21T05:45:33Z", "author": {"login": "cristianonicolai"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/test/java/org/kie/workbench/common/screens/server/management/client/wizard/NewContainerWizardTest.java", "diffHunk": "@@ -176,4 +209,51 @@ public void testClose() {\n         verifyClear();\n     }\n \n-}\n\\ No newline at end of file\n+    @Test\n+    public void testPageSelected() {\n+        PageResponse<JarListPageRow> response = new PageResponse<JarListPageRow>();\n+        JarListPageRow jarListPageRow = new JarListPageRow();\n+        GAV gav = new GAV(\"test\", \"test\", \"\");\n+        jarListPageRow.setGav(gav);\n+        jarListPageRow.setPath(\"test_path\");\n+        response.setPageRowList(Arrays.asList(jarListPageRow));\n+        when(m2RepoService.listArtifacts(any())).thenReturn(response);\n+        when(newContainerFormPresenter.getCurrentGAV()).thenReturn(gav);\n+\n+        newContainerWizard.pages.add(initWizardPage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50537d8d12e5bce820d458c03bdfc607fed78784"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMzU1NA==", "bodyText": "ok", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r368823554", "createdAt": "2020-01-21T06:02:15Z", "author": {"login": "bxf12315"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/test/java/org/kie/workbench/common/screens/server/management/client/wizard/NewContainerWizardTest.java", "diffHunk": "@@ -176,4 +209,51 @@ public void testClose() {\n         verifyClear();\n     }\n \n-}\n\\ No newline at end of file\n+    @Test\n+    public void testPageSelected() {\n+        PageResponse<JarListPageRow> response = new PageResponse<JarListPageRow>();\n+        JarListPageRow jarListPageRow = new JarListPageRow();\n+        GAV gav = new GAV(\"test\", \"test\", \"\");\n+        jarListPageRow.setGav(gav);\n+        jarListPageRow.setPath(\"test_path\");\n+        response.setPageRowList(Arrays.asList(jarListPageRow));\n+        when(m2RepoService.listArtifacts(any())).thenReturn(response);\n+        when(newContainerFormPresenter.getCurrentGAV()).thenReturn(gav);\n+\n+        newContainerWizard.pages.add(initWizardPage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxOTk3OA=="}, "originalCommit": {"oid": "50537d8d12e5bce820d458c03bdfc607fed78784"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQwOTgyOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/resources/org/kie/workbench/common/screens/server/management/client/resources/i18n/Constants.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTo0OTo0MVrOFfvCQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjowOTowNFrOFfvS2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMDgwMA==", "bodyText": "Perhaps use something like: GAV '{0}' not found in the Maven repository", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r368820800", "createdAt": "2020-01-21T05:49:41Z", "author": {"login": "cristianonicolai"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/resources/org/kie/workbench/common/screens/server/management/client/resources/i18n/Constants.properties", "diffHunk": "@@ -147,3 +147,4 @@ ClientContainerRuntimeOperation.StopScanner=Stop Scanner\n ContainerUpdateEvent.ErrorMessage=The '{0}' operation has failed in {1} server instance(s).\n ContainerUpdateEvent.WarnMessage=The '{0}' operation may have failed in some of the {1} server instance(s).\n ContainerUpdateEvent.SuccessMessage=The '{0}' operation has succeeded, {1} server instances were affected.\n+NewContainer.GAVNotExist=not exist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50537d8d12e5bce820d458c03bdfc607fed78784"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyNTA0OQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r368825049", "createdAt": "2020-01-21T06:09:04Z", "author": {"login": "bxf12315"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/resources/org/kie/workbench/common/screens/server/management/client/resources/i18n/Constants.properties", "diffHunk": "@@ -147,3 +147,4 @@ ClientContainerRuntimeOperation.StopScanner=Stop Scanner\n ContainerUpdateEvent.ErrorMessage=The '{0}' operation has failed in {1} server instance(s).\n ContainerUpdateEvent.WarnMessage=The '{0}' operation may have failed in some of the {1} server instance(s).\n ContainerUpdateEvent.SuccessMessage=The '{0}' operation has succeeded, {1} server instances were affected.\n+NewContainer.GAVNotExist=not exist.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMDgwMA=="}, "originalCommit": {"oid": "50537d8d12e5bce820d458c03bdfc607fed78784"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQ2MDYzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoyNToxMVrOFfvgzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjo1MToxMVrOFfv4og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyODYyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!isSelected == that.isSelected) {\n          \n          \n            \n                    if (isSelected != that.isSelected) {", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r368828620", "createdAt": "2020-01-21T06:25:11Z", "author": {"login": "cristianonicolai"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "diffHunk": "@@ -49,6 +60,10 @@ public boolean equals( final Object o ) {\n         if ( !context.equals( that.context ) ) {\n             return false;\n         }\n+\n+        if (!isSelected == that.isSelected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa49997fc76f08c2ae278449ed154483b14f355a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgzNDcyMg==", "bodyText": "done", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r368834722", "createdAt": "2020-01-21T06:51:11Z", "author": {"login": "bxf12315"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "diffHunk": "@@ -49,6 +60,10 @@ public boolean equals( final Object o ) {\n         if ( !context.equals( that.context ) ) {\n             return false;\n         }\n+\n+        if (!isSelected == that.isSelected) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyODYyMA=="}, "originalCommit": {"oid": "aa49997fc76f08c2ae278449ed154483b14f355a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjM5NTM2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/wizard/NewContainerWizard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNToyNDowNFrOFjvAWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwOTozODoyMVrOFkF6CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxNDYxNg==", "bodyText": "@bxf12315  If we launch here DependencyPathSelectedEvent with the param isselected = true allows to respect the changes done at Runtime Strategy configuration changed by the user throw the wizard. I think the behaviour would be more consistent with the one that is performed when a kjar is selected from list. WDYT?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r373014616", "createdAt": "2020-01-30T15:24:04Z", "author": {"login": "nmirasch"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/wizard/NewContainerWizard.java", "diffHunk": "@@ -109,30 +129,66 @@ public void close() {\n     @Override\n     public void complete() {\n         final Map<Capability, ContainerConfig> mapConfig = new HashMap<Capability, ContainerConfig>();\n-        if ( getPages().size() == 2 ) {\n-            mapConfig.put( Capability.PROCESS, processConfigPagePresenter.buildProcessConfig() );\n+        if (getPages().size() == 2) {\n+            mapConfig.put(Capability.PROCESS, processConfigPagePresenter.buildProcessConfig());\n         }\n-        mapConfig.put( Capability.RULE, new RuleConfig( null, KieScannerStatus.STOPPED ) );\n-        final ContainerSpec newContainer = newContainerFormPresenter.buildContainerSpec( newContainerFormPresenter.getServerTemplate().getId(),\n-                                                                                         mapConfig );\n-        specManagementService.call( new RemoteCallback<Void>() {\n-            @Override\n-            public void callback( final Void o ) {\n-                notification.fire( new NotificationEvent( newContainerFormPresenter.getView().getNewContainerWizardSaveSuccess(), NotificationEvent.NotificationType.SUCCESS ) );\n-                clear();\n-                NewContainerWizard.super.complete();\n-                serverTemplateSelectedEvent.fire( new ServerTemplateSelected( serverTemplate, newContainer.getId() ) );\n-            }\n-        }, new ErrorCallback<Object>() {\n-            @Override\n-            public boolean error( final Object o,\n-                                  final Throwable throwable ) {\n-                notification.fire( new NotificationEvent( newContainerFormPresenter.getView().getNewContainerWizardSaveError(), NotificationEvent.NotificationType.ERROR ) );\n-                NewContainerWizard.this.pageSelected( 0 );\n-                NewContainerWizard.this.start();\n-                return false;\n+        mapConfig.put(Capability.RULE, new RuleConfig(null, KieScannerStatus.STOPPED));\n+        final ContainerSpec newContainer = newContainerFormPresenter.buildContainerSpec(newContainerFormPresenter.getServerTemplate().getId(),\n+                                                                                        mapConfig);\n+        GAV gav = new GAV(newContainer.getReleasedId().getGroupId(), newContainer.getReleasedId().getArtifactId(), newContainer.getReleasedId().getVersion());\n+        JarListPageRequest request = new JarListPageRequest(0, Integer.MAX_VALUE, null, Arrays.asList(\"jar\"), null, false);\n+\n+        m2RepoService.call(response -> {\n+            List<JarListPageRow> jarListPageRowList = ((PageResponse<JarListPageRow>) response).getPageRowList();\n+            Optional<JarListPageRow> optionalJarListPageRow = jarListPageRowList.stream().filter(jarListPageRow -> jarListPageRow.getGav().equals(gav)).findFirst();\n+            if (optionalJarListPageRow.isPresent()) {\n+                specManagementService.call(new RemoteCallback<Void>() {\n+                    @Override\n+                    public void callback(final Void o) {\n+                        notification.fire(new NotificationEvent(newContainerFormPresenter.getView().getNewContainerWizardSaveSuccess(), NotificationEvent.NotificationType.SUCCESS));\n+                        clear();\n+                        NewContainerWizard.super.complete();\n+                        serverTemplateSelectedEvent.fire(new ServerTemplateSelected(serverTemplate, newContainer.getId()));\n+                    }\n+                }, new ErrorCallback<Object>() {\n+                    @Override\n+                    public boolean error(final Object o,\n+                                         final Throwable throwable) {\n+                        notification.fire(new NotificationEvent(newContainerFormPresenter.getView().getNewContainerWizardSaveError(), NotificationEvent.NotificationType.ERROR));\n+                        NewContainerWizard.this.pageSelected(0);\n+                        NewContainerWizard.this.start();\n+                        return false;\n+                    }\n+                }).saveContainerSpec(newContainerFormPresenter.getServerTemplate().getId(), newContainer);\n+            } else {\n+                notification.fire(new NotificationEvent(newContainerFormPresenter.getView().getNewContainerGAVNotExist(gav.toString()), NotificationEvent.NotificationType.ERROR));\n             }\n-        } ).saveContainerSpec( newContainerFormPresenter.getServerTemplate().getId(), newContainer );\n+        }).listArtifacts(request);\n+    }\n+\n+    public void onDependencyPathSelectedEvent(@Observes DependencyPathSelectedEvent event){\n+            this.isSelected = event.isSelected();\n     }\n \n+    @Override\n+    public void pageSelected(final int pageNumber) {\n+        if (pageNumber == 1 && !isSelected) {\n+            GAV gav = newContainerFormPresenter.getCurrentGAV();\n+            JarListPageRequest request = new JarListPageRequest(0, Integer.MAX_VALUE, null, Arrays.asList(\"jar\"), null, false);\n+\n+            m2RepoService.call(response -> {\n+                List<JarListPageRow> jarListPageRowList = ((PageResponse<JarListPageRow>) response).getPageRowList();\n+                Optional<JarListPageRow> optionalJarListPageRow = jarListPageRowList.stream().filter(jarListPageRow -> jarListPageRow.getGav().equals(gav))\n+                        .sorted(Comparator.comparing(JarListPageRow::getLastModified).reversed()).findFirst();\n+                if (optionalJarListPageRow.isPresent()) {\n+                    if (optionalJarListPageRow.get().getPath() != null && !optionalJarListPageRow.get().getPath().isEmpty()) {\n+                        dependencyPathSelectedEvent.fire(new DependencyPathSelectedEvent(this, optionalJarListPageRow.get().getPath(), false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738876a84962ca3007ae1caa12c49ac2624f6b17"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzM4OTgzMg==", "bodyText": "+1", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r373389832", "createdAt": "2020-01-31T09:38:21Z", "author": {"login": "cristianonicolai"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/wizard/NewContainerWizard.java", "diffHunk": "@@ -109,30 +129,66 @@ public void close() {\n     @Override\n     public void complete() {\n         final Map<Capability, ContainerConfig> mapConfig = new HashMap<Capability, ContainerConfig>();\n-        if ( getPages().size() == 2 ) {\n-            mapConfig.put( Capability.PROCESS, processConfigPagePresenter.buildProcessConfig() );\n+        if (getPages().size() == 2) {\n+            mapConfig.put(Capability.PROCESS, processConfigPagePresenter.buildProcessConfig());\n         }\n-        mapConfig.put( Capability.RULE, new RuleConfig( null, KieScannerStatus.STOPPED ) );\n-        final ContainerSpec newContainer = newContainerFormPresenter.buildContainerSpec( newContainerFormPresenter.getServerTemplate().getId(),\n-                                                                                         mapConfig );\n-        specManagementService.call( new RemoteCallback<Void>() {\n-            @Override\n-            public void callback( final Void o ) {\n-                notification.fire( new NotificationEvent( newContainerFormPresenter.getView().getNewContainerWizardSaveSuccess(), NotificationEvent.NotificationType.SUCCESS ) );\n-                clear();\n-                NewContainerWizard.super.complete();\n-                serverTemplateSelectedEvent.fire( new ServerTemplateSelected( serverTemplate, newContainer.getId() ) );\n-            }\n-        }, new ErrorCallback<Object>() {\n-            @Override\n-            public boolean error( final Object o,\n-                                  final Throwable throwable ) {\n-                notification.fire( new NotificationEvent( newContainerFormPresenter.getView().getNewContainerWizardSaveError(), NotificationEvent.NotificationType.ERROR ) );\n-                NewContainerWizard.this.pageSelected( 0 );\n-                NewContainerWizard.this.start();\n-                return false;\n+        mapConfig.put(Capability.RULE, new RuleConfig(null, KieScannerStatus.STOPPED));\n+        final ContainerSpec newContainer = newContainerFormPresenter.buildContainerSpec(newContainerFormPresenter.getServerTemplate().getId(),\n+                                                                                        mapConfig);\n+        GAV gav = new GAV(newContainer.getReleasedId().getGroupId(), newContainer.getReleasedId().getArtifactId(), newContainer.getReleasedId().getVersion());\n+        JarListPageRequest request = new JarListPageRequest(0, Integer.MAX_VALUE, null, Arrays.asList(\"jar\"), null, false);\n+\n+        m2RepoService.call(response -> {\n+            List<JarListPageRow> jarListPageRowList = ((PageResponse<JarListPageRow>) response).getPageRowList();\n+            Optional<JarListPageRow> optionalJarListPageRow = jarListPageRowList.stream().filter(jarListPageRow -> jarListPageRow.getGav().equals(gav)).findFirst();\n+            if (optionalJarListPageRow.isPresent()) {\n+                specManagementService.call(new RemoteCallback<Void>() {\n+                    @Override\n+                    public void callback(final Void o) {\n+                        notification.fire(new NotificationEvent(newContainerFormPresenter.getView().getNewContainerWizardSaveSuccess(), NotificationEvent.NotificationType.SUCCESS));\n+                        clear();\n+                        NewContainerWizard.super.complete();\n+                        serverTemplateSelectedEvent.fire(new ServerTemplateSelected(serverTemplate, newContainer.getId()));\n+                    }\n+                }, new ErrorCallback<Object>() {\n+                    @Override\n+                    public boolean error(final Object o,\n+                                         final Throwable throwable) {\n+                        notification.fire(new NotificationEvent(newContainerFormPresenter.getView().getNewContainerWizardSaveError(), NotificationEvent.NotificationType.ERROR));\n+                        NewContainerWizard.this.pageSelected(0);\n+                        NewContainerWizard.this.start();\n+                        return false;\n+                    }\n+                }).saveContainerSpec(newContainerFormPresenter.getServerTemplate().getId(), newContainer);\n+            } else {\n+                notification.fire(new NotificationEvent(newContainerFormPresenter.getView().getNewContainerGAVNotExist(gav.toString()), NotificationEvent.NotificationType.ERROR));\n             }\n-        } ).saveContainerSpec( newContainerFormPresenter.getServerTemplate().getId(), newContainer );\n+        }).listArtifacts(request);\n+    }\n+\n+    public void onDependencyPathSelectedEvent(@Observes DependencyPathSelectedEvent event){\n+            this.isSelected = event.isSelected();\n     }\n \n+    @Override\n+    public void pageSelected(final int pageNumber) {\n+        if (pageNumber == 1 && !isSelected) {\n+            GAV gav = newContainerFormPresenter.getCurrentGAV();\n+            JarListPageRequest request = new JarListPageRequest(0, Integer.MAX_VALUE, null, Arrays.asList(\"jar\"), null, false);\n+\n+            m2RepoService.call(response -> {\n+                List<JarListPageRow> jarListPageRowList = ((PageResponse<JarListPageRow>) response).getPageRowList();\n+                Optional<JarListPageRow> optionalJarListPageRow = jarListPageRowList.stream().filter(jarListPageRow -> jarListPageRow.getGav().equals(gav))\n+                        .sorted(Comparator.comparing(JarListPageRow::getLastModified).reversed()).findFirst();\n+                if (optionalJarListPageRow.isPresent()) {\n+                    if (optionalJarListPageRow.get().getPath() != null && !optionalJarListPageRow.get().getPath().isEmpty()) {\n+                        dependencyPathSelectedEvent.fire(new DependencyPathSelectedEvent(this, optionalJarListPageRow.get().getPath(), false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxNDYxNg=="}, "originalCommit": {"oid": "738876a84962ca3007ae1caa12c49ac2624f6b17"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTcyNDI1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzowNzo0N1rOFlG4DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwMzoyMzowNVrOFlHDgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NDI4NA==", "bodyText": "check if needed", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r374454284", "createdAt": "2020-02-04T03:07:47Z", "author": {"login": "cristianonicolai"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "diffHunk": "@@ -20,13 +20,20 @@\n \n     private final Object context;\n     private final String path;\n+    private boolean isSelected = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b45def152dcbb13ea8e44de7cebdb54babbb9e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NzIxNg==", "bodyText": "done", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r374457216", "createdAt": "2020-02-04T03:23:05Z", "author": {"login": "bxf12315"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "diffHunk": "@@ -20,13 +20,20 @@\n \n     private final Object context;\n     private final String path;\n+    private boolean isSelected = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NDI4NA=="}, "originalCommit": {"oid": "57b45def152dcbb13ea8e44de7cebdb54babbb9e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM5NjQ4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyODoyMlrOFlNNEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyODoyMlrOFlNNEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1Nzk2OQ==", "bodyText": "remove change", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r374557969", "createdAt": "2020-02-04T09:28:22Z", "author": {"login": "cristianonicolai"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "diffHunk": "@@ -27,6 +27,7 @@ public DependencyPathSelectedEvent( final Object context,\n         this.path = path;\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b83ba3a130fec7e67135cae3c64e8e4e43a6c8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM5NjcxOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyODoyNlrOFlNNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyODoyNlrOFlNNNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1ODAwNQ==", "bodyText": "remove change", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r374558005", "createdAt": "2020-02-04T09:28:26Z", "author": {"login": "cristianonicolai"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "diffHunk": "@@ -35,6 +36,7 @@ public String getPath() {\n         return path;\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b83ba3a130fec7e67135cae3c64e8e4e43a6c8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjM5NzA4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyODozNFrOFlNNag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyODozNFrOFlNNag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1ODA1OA==", "bodyText": "remove change", "url": "https://github.com/kiegroup/kie-wb-common/pull/3116#discussion_r374558058", "createdAt": "2020-02-04T09:28:34Z", "author": {"login": "cristianonicolai"}, "path": "kie-wb-common-screens/kie-wb-common-server-ui/kie-wb-common-server-ui-client/src/main/java/org/kie/workbench/common/screens/server/management/client/events/DependencyPathSelectedEvent.java", "diffHunk": "@@ -49,6 +51,7 @@ public boolean equals( final Object o ) {\n         if ( !context.equals( that.context ) ) {\n             return false;\n         }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b83ba3a130fec7e67135cae3c64e8e4e43a6c8"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1488, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}