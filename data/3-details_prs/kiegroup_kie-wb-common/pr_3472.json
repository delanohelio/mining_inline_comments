{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0ODEzNDU3", "number": 3472, "title": "[DROOLS-5783] Make droolsjbpm-integration repo independent from appformer", "bodyText": "https://issues.redhat.com/browse/DROOLS-5783\nDescription:\nThe goal of this PR is to cleanup droolsjbpm-integration repo from unnecessary relation with other repos (in this case appformer). It is a sort of followup of this PR kiegroup/droolsjbpm-build-bootstrap#1505 that tries to do the same but it has been partially reverted because of some remaining usages\nDetails of this part of the PR:\n\nmoving kie-identity-session-provider from droolsjbpm-integration repo to here because it is used by some -wb repos but it uses kie-internal so this is the first repo in common we can use\n\nNOTE: I preserved same group and artifact of kie-identity-session-provider to preserve downstream usages. If we don't like to have a different naming I can change it + all downstreaming repos\n@mareknovotny @Ginxo @lucamolteni @mariofusco @ederign\nreferenced Pull Requests: (please edit the URLs of referenced pullrequests if they exist)\n\nkiegroup/droolsjbpm-build-bootstrap#1517\nkiegroup/kie-soup#163\nkiegroup/appformer#1073\nkiegroup/droolsjbpm-integration#2306\n#3472\n\n\n\nHow to retest this PR or trigger a specific build:\n\n\n\na pull request please add comment: Jenkins retest this\n\n\na full downstream build please add comment: Jenkins run fdb\n\n\na compile downstream build please  add comment: Jenkins run cdb\n\n\na full production downstream build please add comment: Jenkins execute product fdb\n\n\nan upstream build please add comment: Jenkins run upstream", "createdAt": "2020-11-03T15:29:07Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472", "merged": true, "mergeCommit": {"oid": "53cb51531173370d5524bebfa8cd767c3828aea5"}, "closed": true, "closedAt": "2020-11-09T08:34:35Z", "author": {"login": "danielezonca"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdY6rbmgH2gAyNTE0ODEzNDU3OjQ0ZWIwNmFjYTkzMzg0MDVjZWEzYWViZTAyMGM2MDIwNjEyMDUxOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZL1OZAFqTUyMzI2MzA1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "44eb06aca9338405cea3aebe020c602061205197", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/44eb06aca9338405cea3aebe020c602061205197", "committedDate": "2020-11-03T15:13:21Z", "message": "[DROOLS-5783] Moved kie-identity-session-provider to kie-wb-common"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNjMxNDE4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#pullrequestreview-522631418", "createdAt": "2020-11-03T15:47:36Z", "commit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzMxNTk1", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#pullrequestreview-522731595", "createdAt": "2020-11-03T17:36:31Z", "commit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDc4ODU5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#pullrequestreview-523078859", "createdAt": "2020-11-04T06:47:06Z", "commit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0NzowN1rOHtK6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0NzowN1rOHtK6BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyNjY2MA==", "bodyText": "not used anywhere?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import javax.enterprise.context.RequestScoped;", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#discussion_r517126660", "createdAt": "2020-11-04T06:47:07Z", "author": {"login": "mareknovotny"}, "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeIdentityProvider.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.provider.impl;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.enterprise.context.RequestScoped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDc5ODY0", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#pullrequestreview-523079864", "createdAt": "2020-11-04T06:49:42Z", "commit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0OTo0MlrOHtK86g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo0OTo0MlrOHtK86g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyNzQwMg==", "bodyText": "just minor thing, but sonar will be happy?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> roles = new ArrayList<String>();\n          \n          \n            \n                    List<String> roles = new ArrayList<>();", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#discussion_r517127402", "createdAt": "2020-11-04T06:49:42Z", "author": {"login": "mareknovotny"}, "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeIdentityProvider.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.provider.impl;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.context.SessionScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import org.jboss.errai.security.shared.api.Group;\n+import org.jboss.errai.security.shared.api.Role;\n+import org.jboss.errai.security.shared.api.identity.User;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@SessionScoped\n+public class SafeIdentityProvider implements IdentityProvider, Serializable {\n+\n+    private static final Logger logger = LoggerFactory.getLogger( SafeIdentityProvider.class );\n+\n+    /** generated serial version UID */\n+    private static final long serialVersionUID = 7709094889603436905L;\n+\n+    @Inject\n+    private Instance<User> identityInstance;\n+    \n+    @Inject\n+    private Instance<HttpServletRequest> request;\n+    \n+    @Override\n+    public String getName() {\n+        if( identityInstance.isUnsatisfied() ) { \n+            return getIdentityFromRequest();\n+        }\n+          \n+        // default\n+        try {\n+            return identityInstance.get().getIdentifier();\n+        } catch (Exception e) {\n+            logger.debug( \"Error on getting identity from User bean: \" + e.getMessage(), e );\n+            return getIdentityFromRequest();\n+        }\n+    }\n+\n+    private String getIdentityFromRequest() { \n+        if (!request.isUnsatisfied() && request.get().getUserPrincipal() != null) {\n+            return request.get().getUserPrincipal().getName();\n+        }\n+        return UNKNOWN_USER_IDENTITY;\n+    }\n+    \n+    @Override\n+    public List<String> getRoles() {\n+        List<String> roles = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDgwMzIz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#pullrequestreview-523080323", "createdAt": "2020-11-04T06:50:46Z", "commit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1MDo0N1rOHtK-Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1MDo0N1rOHtK-Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyNzc2Ng==", "bodyText": "A copy&paste error from past I think\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger( SafeIdentityProvider.class );\n          \n          \n            \n                private static final Logger logger = LoggerFactory.getLogger( SafeSessionInfoProvider.class );", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#discussion_r517127766", "createdAt": "2020-11-04T06:50:47Z", "author": {"login": "mareknovotny"}, "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeSessionInfoProvider.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.provider.impl;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.SessionScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import org.jboss.errai.security.shared.api.Role;\n+import org.jboss.errai.security.shared.api.RoleImpl;\n+import org.jboss.errai.security.shared.api.identity.User;\n+import org.jboss.errai.security.shared.api.identity.UserImpl;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.provider.SessionInfoProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.uberfire.rpc.SessionInfo;\n+import org.uberfire.rpc.impl.SessionInfoImpl;\n+\n+@SessionScoped\n+public class SafeSessionInfoProvider implements SessionInfoProvider, Serializable  {\n+\n+    /** Generated serial version UID */\n+    private static final long serialVersionUID = 8510219062936244657L;\n+\n+    private static final Logger logger = LoggerFactory.getLogger( SafeIdentityProvider.class );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDgwNjkx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#pullrequestreview-523080691", "createdAt": "2020-11-04T06:51:39Z", "commit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1MTozOVrOHtK_jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwNjo1MTozOVrOHtK_jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEyODA3Nw==", "bodyText": "shorter version\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<Role> roles = new ArrayList<Role>(roleStrList.size());\n          \n          \n            \n                    List<Role> roles = new ArrayList<>(roleStrList.size());", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#discussion_r517128077", "createdAt": "2020-11-04T06:51:39Z", "author": {"login": "mareknovotny"}, "path": "kie-identity-session-provider/src/main/java/org/kie/provider/impl/SafeSessionInfoProvider.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2015 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.kie.provider.impl;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.SessionScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.inject.Inject;\n+\n+import org.jboss.errai.security.shared.api.Role;\n+import org.jboss.errai.security.shared.api.RoleImpl;\n+import org.jboss.errai.security.shared.api.identity.User;\n+import org.jboss.errai.security.shared.api.identity.UserImpl;\n+import org.kie.internal.identity.IdentityProvider;\n+import org.kie.provider.SessionInfoProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.uberfire.rpc.SessionInfo;\n+import org.uberfire.rpc.impl.SessionInfoImpl;\n+\n+@SessionScoped\n+public class SafeSessionInfoProvider implements SessionInfoProvider, Serializable  {\n+\n+    /** Generated serial version UID */\n+    private static final long serialVersionUID = 8510219062936244657L;\n+\n+    private static final Logger logger = LoggerFactory.getLogger( SafeIdentityProvider.class );\n+            \n+    @Inject\n+    private Instance<SessionInfo> delegate;\n+\n+    @Inject \n+    private IdentityProvider identityProvider; \n+    \n+    @Override\n+    public String getId() {\n+        if( delegate.isUnsatisfied() ) { \n+            return UNKNOWN_SESSION_ID;\n+        }\n+        \n+        // default\n+        try {\n+            return delegate.get().getId();\n+        } catch ( Exception e ) {\n+            return UNKNOWN_SESSION_ID;\n+        }\n+    }\n+\n+    @Override\n+    public User getIdentity() {\n+        if( delegate.isUnsatisfied() ) { \n+           return getUserFromIdentityProvider(); \n+        } \n+       \n+        // default\n+        try {\n+            return delegate.get().getIdentity(); \n+        } catch ( Exception e ) {\n+            logger.debug(\"SessionInfo bean was available but could not return identity: \" + e.getMessage(), e );\n+            return getUserFromIdentityProvider();\n+        }\n+    }\n+    \n+    private User getUserFromIdentityProvider() { \n+        List<String> roleStrList = identityProvider.getRoles();\n+        List<Role> roles = new ArrayList<Role>(roleStrList.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMDgxMjQ4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#pullrequestreview-523081248", "createdAt": "2020-11-04T06:53:09Z", "commit": {"oid": "44eb06aca9338405cea3aebe020c602061205197"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d430d65aab6e39685077a1c21e1b1ef2f6e34379", "author": {"user": {"login": "danielezonca", "name": "Daniele Zonca"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d430d65aab6e39685077a1c21e1b1ef2f6e34379", "committedDate": "2020-11-04T07:48:24Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Marek Novotn\u00fd <hotmana76@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMTI3Mzc3", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#pullrequestreview-523127377", "createdAt": "2020-11-04T08:19:35Z", "commit": {"oid": "d430d65aab6e39685077a1c21e1b1ef2f6e34379"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMjYzMDUx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3472#pullrequestreview-523263051", "createdAt": "2020-11-04T11:12:25Z", "commit": {"oid": "d430d65aab6e39685077a1c21e1b1ef2f6e34379"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 363, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}