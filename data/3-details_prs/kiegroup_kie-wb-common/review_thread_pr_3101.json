{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMDY3NDQ2", "number": 3101, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDowNzo0MlrODXiAuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMjoxNlrODXiGhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDAxMDgzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDowNzo0MlrOFc3-lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDowNzo0MlrOFc3-lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyMTU4OA==", "bodyText": "So is the first parameter uri or path? I am confused after reading javadoc.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3101#discussion_r365821588", "createdAt": "2020-01-13T14:07:42Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.kogito.webapp.base.client.workarounds;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.IThenable;\n+import org.appformer.kogito.bridge.client.resource.ResourceContentService;\n+import org.jboss.errai.common.client.api.ErrorCallback;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+\n+/**\n+ * Class used to provide <i>resources</i> access to <i>kogito editors</i>\n+ */\n+@ApplicationScoped\n+public class KogitoResourceContentService {\n+\n+    public static final String CONTENT_PARAMETER_NAME = \"content\";\n+    public static final String FILE_NAME_PARAMETER_NAME = \"fileName\";\n+    private PlaceManager placeManager;\n+    private ResourceContentService resourceContentService;\n+    private Promises promises;\n+\n+    private KogitoResourceContentService() {\n+        //CDI proxy\n+    }\n+\n+    @Inject\n+    public KogitoResourceContentService(final PlaceManager placeManager,\n+                                        final ResourceContentService resourceContentService,\n+                                        final Promises promises) {\n+        this.placeManager = placeManager;\n+        this.resourceContentService = resourceContentService;\n+        this.promises = promises;\n+    }\n+\n+    /**\n+     * Open a file at given <code>Path</code> inside an <b>editor</b>\n+     * @param fileUri the <b>uri</code> to the file\n+     * @param editorId The <b>id</b> of the editor to open by the <code>PlaceRequest</code>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ac74165f8acb9ae807fc52b10200877545a9d82"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDAxMzE4OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDowODoyNFrOFc3__g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDowODoyNFrOFc3__g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyMTk1MA==", "bodyText": "similar question uri vs path", "url": "https://github.com/kiegroup/kie-wb-common/pull/3101#discussion_r365821950", "createdAt": "2020-01-13T14:08:24Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.kogito.webapp.base.client.workarounds;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.IThenable;\n+import org.appformer.kogito.bridge.client.resource.ResourceContentService;\n+import org.jboss.errai.common.client.api.ErrorCallback;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+\n+/**\n+ * Class used to provide <i>resources</i> access to <i>kogito editors</i>\n+ */\n+@ApplicationScoped\n+public class KogitoResourceContentService {\n+\n+    public static final String CONTENT_PARAMETER_NAME = \"content\";\n+    public static final String FILE_NAME_PARAMETER_NAME = \"fileName\";\n+    private PlaceManager placeManager;\n+    private ResourceContentService resourceContentService;\n+    private Promises promises;\n+\n+    private KogitoResourceContentService() {\n+        //CDI proxy\n+    }\n+\n+    @Inject\n+    public KogitoResourceContentService(final PlaceManager placeManager,\n+                                        final ResourceContentService resourceContentService,\n+                                        final Promises promises) {\n+        this.placeManager = placeManager;\n+        this.resourceContentService = resourceContentService;\n+        this.promises = promises;\n+    }\n+\n+    /**\n+     * Open a file at given <code>Path</code> inside an <b>editor</b>\n+     * @param fileUri the <b>uri</code> to the file\n+     * @param editorId The <b>id</b> of the editor to open by the <code>PlaceRequest</code>\n+     */\n+    public void openFile(final String fileUri,\n+                         final String editorId) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+            final PlaceRequest placeRequest = new DefaultPlaceRequest(editorId);\n+            placeRequest.addParameter(FILE_NAME_PARAMETER_NAME, fileUri);\n+            placeRequest.addParameter(CONTENT_PARAMETER_NAME, fileContent);\n+            placeManager.goTo(placeRequest);\n+            return promises.resolve();\n+        });\n+    }\n+\n+    /**\n+     * Load the file at given <code>Path</code> and returns content inside a callback\n+     * @param fileUri\n+     * @param callback\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ac74165f8acb9ae807fc52b10200877545a9d82"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDAxNjk1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDowOTozN1rOFc4CKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDowOTozN1rOFc4CKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyMjUwNg==", "bodyText": "Don't we need something similar for opening file?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3101#discussion_r365822506", "createdAt": "2020-01-13T14:09:37Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.kogito.webapp.base.client.workarounds;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.IThenable;\n+import org.appformer.kogito.bridge.client.resource.ResourceContentService;\n+import org.jboss.errai.common.client.api.ErrorCallback;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+\n+/**\n+ * Class used to provide <i>resources</i> access to <i>kogito editors</i>\n+ */\n+@ApplicationScoped\n+public class KogitoResourceContentService {\n+\n+    public static final String CONTENT_PARAMETER_NAME = \"content\";\n+    public static final String FILE_NAME_PARAMETER_NAME = \"fileName\";\n+    private PlaceManager placeManager;\n+    private ResourceContentService resourceContentService;\n+    private Promises promises;\n+\n+    private KogitoResourceContentService() {\n+        //CDI proxy\n+    }\n+\n+    @Inject\n+    public KogitoResourceContentService(final PlaceManager placeManager,\n+                                        final ResourceContentService resourceContentService,\n+                                        final Promises promises) {\n+        this.placeManager = placeManager;\n+        this.resourceContentService = resourceContentService;\n+        this.promises = promises;\n+    }\n+\n+    /**\n+     * Open a file at given <code>Path</code> inside an <b>editor</b>\n+     * @param fileUri the <b>uri</code> to the file\n+     * @param editorId The <b>id</b> of the editor to open by the <code>PlaceRequest</code>\n+     */\n+    public void openFile(final String fileUri,\n+                         final String editorId) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+            final PlaceRequest placeRequest = new DefaultPlaceRequest(editorId);\n+            placeRequest.addParameter(FILE_NAME_PARAMETER_NAME, fileUri);\n+            placeRequest.addParameter(CONTENT_PARAMETER_NAME, fileContent);\n+            placeManager.goTo(placeRequest);\n+            return promises.resolve();\n+        });\n+    }\n+\n+    /**\n+     * Load the file at given <code>Path</code> and returns content inside a callback\n+     * @param fileUri\n+     * @param callback\n+     */\n+    public void loadFile(final String fileUri,\n+                         final RemoteCallback<String> callback,\n+                         final ErrorCallback<Object> errorCallback) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+                                                     callback.callback(fileContent);\n+                                                     return promises.resolve();\n+                                                 })\n+                .catch_(error -> {\n+                    errorCallback.error(\"Error \" + error, new Throwable(\"Failed to load file \" + fileUri));\n+                    return null;\n+                })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ac74165f8acb9ae807fc52b10200877545a9d82"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDAyMzc0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMTo0MFrOFc4GSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMTo0MFrOFc4GSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyMzU2Mw==", "bodyText": "Can we clarify the javadoc and state that obtained list is returned via callback. As the method returns void?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3101#discussion_r365823563", "createdAt": "2020-01-13T14:11:40Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.kogito.webapp.base.client.workarounds;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.IThenable;\n+import org.appformer.kogito.bridge.client.resource.ResourceContentService;\n+import org.jboss.errai.common.client.api.ErrorCallback;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+\n+/**\n+ * Class used to provide <i>resources</i> access to <i>kogito editors</i>\n+ */\n+@ApplicationScoped\n+public class KogitoResourceContentService {\n+\n+    public static final String CONTENT_PARAMETER_NAME = \"content\";\n+    public static final String FILE_NAME_PARAMETER_NAME = \"fileName\";\n+    private PlaceManager placeManager;\n+    private ResourceContentService resourceContentService;\n+    private Promises promises;\n+\n+    private KogitoResourceContentService() {\n+        //CDI proxy\n+    }\n+\n+    @Inject\n+    public KogitoResourceContentService(final PlaceManager placeManager,\n+                                        final ResourceContentService resourceContentService,\n+                                        final Promises promises) {\n+        this.placeManager = placeManager;\n+        this.resourceContentService = resourceContentService;\n+        this.promises = promises;\n+    }\n+\n+    /**\n+     * Open a file at given <code>Path</code> inside an <b>editor</b>\n+     * @param fileUri the <b>uri</code> to the file\n+     * @param editorId The <b>id</b> of the editor to open by the <code>PlaceRequest</code>\n+     */\n+    public void openFile(final String fileUri,\n+                         final String editorId) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+            final PlaceRequest placeRequest = new DefaultPlaceRequest(editorId);\n+            placeRequest.addParameter(FILE_NAME_PARAMETER_NAME, fileUri);\n+            placeRequest.addParameter(CONTENT_PARAMETER_NAME, fileContent);\n+            placeManager.goTo(placeRequest);\n+            return promises.resolve();\n+        });\n+    }\n+\n+    /**\n+     * Load the file at given <code>Path</code> and returns content inside a callback\n+     * @param fileUri\n+     * @param callback\n+     */\n+    public void loadFile(final String fileUri,\n+                         final RemoteCallback<String> callback,\n+                         final ErrorCallback<Object> errorCallback) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+                                                     callback.callback(fileContent);\n+                                                     return promises.resolve();\n+                                                 })\n+                .catch_(error -> {\n+                    errorCallback.error(\"Error \" + error, new Throwable(\"Failed to load file \" + fileUri));\n+                    return null;\n+                })\n+        ;\n+    }\n+\n+    /**\n+     * Get the <code>List&lt;Path&gt;</code> from the project/workspace where the editor is running", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ac74165f8acb9ae807fc52b10200877545a9d82"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDAyNDE1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMTo0N1rOFc4GiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMTo0N1rOFc4GiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyMzYyNA==", "bodyText": "formatting", "url": "https://github.com/kiegroup/kie-wb-common/pull/3101#discussion_r365823624", "createdAt": "2020-01-13T14:11:47Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.kogito.webapp.base.client.workarounds;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.IThenable;\n+import org.appformer.kogito.bridge.client.resource.ResourceContentService;\n+import org.jboss.errai.common.client.api.ErrorCallback;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+\n+/**\n+ * Class used to provide <i>resources</i> access to <i>kogito editors</i>\n+ */\n+@ApplicationScoped\n+public class KogitoResourceContentService {\n+\n+    public static final String CONTENT_PARAMETER_NAME = \"content\";\n+    public static final String FILE_NAME_PARAMETER_NAME = \"fileName\";\n+    private PlaceManager placeManager;\n+    private ResourceContentService resourceContentService;\n+    private Promises promises;\n+\n+    private KogitoResourceContentService() {\n+        //CDI proxy\n+    }\n+\n+    @Inject\n+    public KogitoResourceContentService(final PlaceManager placeManager,\n+                                        final ResourceContentService resourceContentService,\n+                                        final Promises promises) {\n+        this.placeManager = placeManager;\n+        this.resourceContentService = resourceContentService;\n+        this.promises = promises;\n+    }\n+\n+    /**\n+     * Open a file at given <code>Path</code> inside an <b>editor</b>\n+     * @param fileUri the <b>uri</code> to the file\n+     * @param editorId The <b>id</b> of the editor to open by the <code>PlaceRequest</code>\n+     */\n+    public void openFile(final String fileUri,\n+                         final String editorId) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+            final PlaceRequest placeRequest = new DefaultPlaceRequest(editorId);\n+            placeRequest.addParameter(FILE_NAME_PARAMETER_NAME, fileUri);\n+            placeRequest.addParameter(CONTENT_PARAMETER_NAME, fileContent);\n+            placeManager.goTo(placeRequest);\n+            return promises.resolve();\n+        });\n+    }\n+\n+    /**\n+     * Load the file at given <code>Path</code> and returns content inside a callback\n+     * @param fileUri\n+     * @param callback\n+     */\n+    public void loadFile(final String fileUri,\n+                         final RemoteCallback<String> callback,\n+                         final ErrorCallback<Object> errorCallback) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+                                                     callback.callback(fileContent);\n+                                                     return promises.resolve();\n+                                                 })\n+                .catch_(error -> {\n+                    errorCallback.error(\"Error \" + error, new Throwable(\"Failed to load file \" + fileUri));\n+                    return null;\n+                })\n+        ;\n+    }\n+\n+    /**\n+     * Get the <code>List&lt;Path&gt;</code> from the project/workspace where the editor is running\n+     *\n+     * @param callback\n+     * @param errorCallback\n+     *\n+     * @see ResourceContentService#list(String)\n+     */\n+    public void getAllItems(final RemoteCallback<List<String>> callback,\n+                               final ErrorCallback<Object> errorCallback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ac74165f8acb9ae807fc52b10200877545a9d82"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDAyNTEzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMjowNlrOFc4HPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMjowNlrOFc4HPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyMzgwNA==", "bodyText": "similar question as above", "url": "https://github.com/kiegroup/kie-wb-common/pull/3101#discussion_r365823804", "createdAt": "2020-01-13T14:12:06Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.kogito.webapp.base.client.workarounds;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.IThenable;\n+import org.appformer.kogito.bridge.client.resource.ResourceContentService;\n+import org.jboss.errai.common.client.api.ErrorCallback;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+\n+/**\n+ * Class used to provide <i>resources</i> access to <i>kogito editors</i>\n+ */\n+@ApplicationScoped\n+public class KogitoResourceContentService {\n+\n+    public static final String CONTENT_PARAMETER_NAME = \"content\";\n+    public static final String FILE_NAME_PARAMETER_NAME = \"fileName\";\n+    private PlaceManager placeManager;\n+    private ResourceContentService resourceContentService;\n+    private Promises promises;\n+\n+    private KogitoResourceContentService() {\n+        //CDI proxy\n+    }\n+\n+    @Inject\n+    public KogitoResourceContentService(final PlaceManager placeManager,\n+                                        final ResourceContentService resourceContentService,\n+                                        final Promises promises) {\n+        this.placeManager = placeManager;\n+        this.resourceContentService = resourceContentService;\n+        this.promises = promises;\n+    }\n+\n+    /**\n+     * Open a file at given <code>Path</code> inside an <b>editor</b>\n+     * @param fileUri the <b>uri</code> to the file\n+     * @param editorId The <b>id</b> of the editor to open by the <code>PlaceRequest</code>\n+     */\n+    public void openFile(final String fileUri,\n+                         final String editorId) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+            final PlaceRequest placeRequest = new DefaultPlaceRequest(editorId);\n+            placeRequest.addParameter(FILE_NAME_PARAMETER_NAME, fileUri);\n+            placeRequest.addParameter(CONTENT_PARAMETER_NAME, fileContent);\n+            placeManager.goTo(placeRequest);\n+            return promises.resolve();\n+        });\n+    }\n+\n+    /**\n+     * Load the file at given <code>Path</code> and returns content inside a callback\n+     * @param fileUri\n+     * @param callback\n+     */\n+    public void loadFile(final String fileUri,\n+                         final RemoteCallback<String> callback,\n+                         final ErrorCallback<Object> errorCallback) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+                                                     callback.callback(fileContent);\n+                                                     return promises.resolve();\n+                                                 })\n+                .catch_(error -> {\n+                    errorCallback.error(\"Error \" + error, new Throwable(\"Failed to load file \" + fileUri));\n+                    return null;\n+                })\n+        ;\n+    }\n+\n+    /**\n+     * Get the <code>List&lt;Path&gt;</code> from the project/workspace where the editor is running\n+     *\n+     * @param callback\n+     * @param errorCallback\n+     *\n+     * @see ResourceContentService#list(String)\n+     */\n+    public void getAllItems(final RemoteCallback<List<String>> callback,\n+                               final ErrorCallback<Object> errorCallback) {\n+        getFilteredItems(\"*\", callback, errorCallback);\n+    }\n+\n+    /**\n+     * Get <b>filtered</b> <code>List&lt;Path&gt;</code> from the project/workspace where the editor is running\n+     * @param pattern A GLOB pattern to filter files. To list all files use \"*\"\n+     * @param callback\n+     * @param errorCallback\n+     *\n+     * @see ResourceContentService#list(String)\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ac74165f8acb9ae807fc52b10200877545a9d82"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDAyNTY1OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMjoxNlrOFc4HmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoxMjoxNlrOFc4HmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgyMzg5Nw==", "bodyText": "formating", "url": "https://github.com/kiegroup/kie-wb-common/pull/3101#discussion_r365823897", "createdAt": "2020-01-13T14:12:16Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-kogito/kie-wb-common-kogito-webapp-base/src/main/java/org/kie/workbench/common/kogito/webapp/base/client/workarounds/KogitoResourceContentService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.kogito.webapp.base.client.workarounds;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.IThenable;\n+import org.appformer.kogito.bridge.client.resource.ResourceContentService;\n+import org.jboss.errai.common.client.api.ErrorCallback;\n+import org.jboss.errai.common.client.api.RemoteCallback;\n+import org.uberfire.client.mvp.PlaceManager;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.mvp.PlaceRequest;\n+import org.uberfire.mvp.impl.DefaultPlaceRequest;\n+\n+/**\n+ * Class used to provide <i>resources</i> access to <i>kogito editors</i>\n+ */\n+@ApplicationScoped\n+public class KogitoResourceContentService {\n+\n+    public static final String CONTENT_PARAMETER_NAME = \"content\";\n+    public static final String FILE_NAME_PARAMETER_NAME = \"fileName\";\n+    private PlaceManager placeManager;\n+    private ResourceContentService resourceContentService;\n+    private Promises promises;\n+\n+    private KogitoResourceContentService() {\n+        //CDI proxy\n+    }\n+\n+    @Inject\n+    public KogitoResourceContentService(final PlaceManager placeManager,\n+                                        final ResourceContentService resourceContentService,\n+                                        final Promises promises) {\n+        this.placeManager = placeManager;\n+        this.resourceContentService = resourceContentService;\n+        this.promises = promises;\n+    }\n+\n+    /**\n+     * Open a file at given <code>Path</code> inside an <b>editor</b>\n+     * @param fileUri the <b>uri</code> to the file\n+     * @param editorId The <b>id</b> of the editor to open by the <code>PlaceRequest</code>\n+     */\n+    public void openFile(final String fileUri,\n+                         final String editorId) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+            final PlaceRequest placeRequest = new DefaultPlaceRequest(editorId);\n+            placeRequest.addParameter(FILE_NAME_PARAMETER_NAME, fileUri);\n+            placeRequest.addParameter(CONTENT_PARAMETER_NAME, fileContent);\n+            placeManager.goTo(placeRequest);\n+            return promises.resolve();\n+        });\n+    }\n+\n+    /**\n+     * Load the file at given <code>Path</code> and returns content inside a callback\n+     * @param fileUri\n+     * @param callback\n+     */\n+    public void loadFile(final String fileUri,\n+                         final RemoteCallback<String> callback,\n+                         final ErrorCallback<Object> errorCallback) {\n+        resourceContentService.get(fileUri).then((IThenable.ThenOnFulfilledCallbackFn<String, Void>) fileContent -> {\n+                                                     callback.callback(fileContent);\n+                                                     return promises.resolve();\n+                                                 })\n+                .catch_(error -> {\n+                    errorCallback.error(\"Error \" + error, new Throwable(\"Failed to load file \" + fileUri));\n+                    return null;\n+                })\n+        ;\n+    }\n+\n+    /**\n+     * Get the <code>List&lt;Path&gt;</code> from the project/workspace where the editor is running\n+     *\n+     * @param callback\n+     * @param errorCallback\n+     *\n+     * @see ResourceContentService#list(String)\n+     */\n+    public void getAllItems(final RemoteCallback<List<String>> callback,\n+                               final ErrorCallback<Object> errorCallback) {\n+        getFilteredItems(\"*\", callback, errorCallback);\n+    }\n+\n+    /**\n+     * Get <b>filtered</b> <code>List&lt;Path&gt;</code> from the project/workspace where the editor is running\n+     * @param pattern A GLOB pattern to filter files. To list all files use \"*\"\n+     * @param callback\n+     * @param errorCallback\n+     *\n+     * @see ResourceContentService#list(String)\n+     */\n+    public void getFilteredItems(final String pattern,\n+                               final RemoteCallback<List<String>> callback,\n+                               final ErrorCallback<Object> errorCallback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ac74165f8acb9ae807fc52b10200877545a9d82"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1468, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}