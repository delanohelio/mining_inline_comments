{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NTU2MDE5", "number": 3447, "title": "KOGITO-3364: [DMN Designer] Multiple DRDs support - When a node is deleted in the DRG, undo/redo operations do not work properly", "bodyText": "JIRA: KOGITO-3364\n\n\nHow to retest this PR or trigger a specific build:\n\n\nRetest PR: jenkins retest this\nA full downstream build: jenkins do fdb\nA compile downstream build: jenkins do cdb\nA full production downstream build: jenkins do product fdb\nAn upstream build: jenkins do upstream", "createdAt": "2020-10-01T21:25:45Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447", "merged": true, "mergeCommit": {"oid": "8df26fe582880f68148e1f5f9bd37c487cbce04e"}, "closed": true, "closedAt": "2020-10-22T13:32:41Z", "author": {"login": "danielzhe"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPoBGNABqjM4NDE4NDA1NjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdU_whGAFqTUxNDU5OTIzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51dea3a7d0eaf8fb9dad60795eb1bf8c94ab3a71", "author": {"user": {"login": "danielzhe", "name": "Daniel J dos Santos"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/51dea3a7d0eaf8fb9dad60795eb1bf8c94ab3a71", "committedDate": "2020-10-01T21:24:23Z", "message": "KOGITO-3364: [DMN Designer] Multiple DRDs support - When a node is deleted in the DRG, undo/redo operations do not work properly"}, "afterCommit": {"oid": "6eb98cda5335d6a94bb10b5670555a527e35623c", "author": {"user": {"login": "danielzhe", "name": "Daniel J dos Santos"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/6eb98cda5335d6a94bb10b5670555a527e35623c", "committedDate": "2020-10-05T18:23:16Z", "message": "SonarCloude issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6eb98cda5335d6a94bb10b5670555a527e35623c", "author": {"user": {"login": "danielzhe", "name": "Daniel J dos Santos"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/6eb98cda5335d6a94bb10b5670555a527e35623c", "committedDate": "2020-10-05T18:23:16Z", "message": "SonarCloude issues"}, "afterCommit": {"oid": "33ad4135185ed667903fe26693dcbad5a83d9ab8", "author": {"user": {"login": "danielzhe", "name": "Daniel J dos Santos"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/33ad4135185ed667903fe26693dcbad5a83d9ab8", "committedDate": "2020-10-06T12:54:25Z", "message": "SonarCloude issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyOTc1NTEw", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#pullrequestreview-502975510", "createdAt": "2020-10-06T13:42:11Z", "commit": {"oid": "33ad4135185ed667903fe26693dcbad5a83d9ab8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzo0MjoxMVrOHdHKYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzo0MjoxMVrOHdHKYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI4ODA5Ng==", "bodyText": "Can we remove these extra lines? :-)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r500288096", "createdAt": "2020-10-06T13:42:11Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/session/DMNCanvasHandler.java", "diffHunk": "@@ -121,5 +121,7 @@ void superAddChild(final Element parent,\n                        final Element child) {\n         super.addChild(parent, child);\n     }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ad4135185ed667903fe26693dcbad5a83d9ab8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzMwOTAy", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#pullrequestreview-503330902", "createdAt": "2020-10-06T20:25:39Z", "commit": {"oid": "55d009d46226aca52a38699e117007f9ba6d12aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NDE5OTM4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#pullrequestreview-506419938", "createdAt": "2020-10-12T08:51:57Z", "commit": {"oid": "55d009d46226aca52a38699e117007f9ba6d12aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwODo1MTo1OFrOHf1LHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOToyNDowMFrOHf2aXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEzOTEwMA==", "bodyText": "shouldn't we check that the setConnectionSourceCommand has correct parameters?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r503139100", "createdAt": "2020-10-12T08:51:58Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/test/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNDeleteConnectorCommandTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.commands.factory.graph;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.stunner.core.diagram.GraphsProvider;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.command.impl.SetConnectionSourceNodeCommand;\n+import org.kie.workbench.common.stunner.core.graph.command.impl.SetConnectionTargetNodeCommand;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.graph.content.view.ViewConnector;\n+import org.mockito.Mock;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNDeleteConnectorCommandTest {\n+\n+    @Mock\n+    private Edge<? extends View, Node> edge;\n+\n+    @Mock\n+    private GraphsProvider graphsProvider;\n+\n+    private Edge<? extends ViewConnector, Node> edgeParameter = mock(Edge.class);\n+\n+    private DMNDeleteConnectorCommand command;\n+\n+    @Before\n+    public void setup() {\n+\n+        when(edgeParameter.getUUID()).thenReturn(\"uuid\");\n+        when(edge.getUUID()).thenReturn(\"uuid\");\n+        command = new DMNDeleteConnectorCommand(edge, graphsProvider);\n+    }\n+\n+    @Test\n+    public void testGetSetConnectionSourceCommand() {\n+\n+        final SetConnectionSourceNodeCommand setConnectionSourceCommand = command.getSetConnectionSourceCommand(edgeParameter);\n+\n+        assertTrue(setConnectionSourceCommand instanceof DMNSetConnectionSourceNodeCommand);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55d009d46226aca52a38699e117007f9ba6d12aa"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1NzEyMg==", "bodyText": "sonar reporting critical code smells when having generic wildcards in return types: https://sonarcloud.io/organizations/kiegroup/rules?open=java%3AS1452&rule_key=java%3AS1452", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r503157122", "createdAt": "2020-10-12T09:20:22Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.commands.factory.graph;\n+\n+import java.util.Optional;\n+\n+import org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils;\n+import org.kie.workbench.common.stunner.core.command.CommandResult;\n+import org.kie.workbench.common.stunner.core.diagram.GraphsProvider;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.command.GraphCommandExecutionContext;\n+import org.kie.workbench.common.stunner.core.graph.command.impl.SetConnectionSourceNodeCommand;\n+import org.kie.workbench.common.stunner.core.graph.content.view.Connection;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.rule.RuleViolation;\n+\n+import static org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils.getDiagramId;\n+import static org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils.isTheCurrentDiagram;\n+\n+public class DMNSetConnectionSourceNodeCommand extends SetConnectionSourceNodeCommand {\n+\n+    private final GraphsProvider graphsProvider;\n+    private final Optional<String> diagramId;\n+\n+    public DMNSetConnectionSourceNodeCommand(final Node<? extends View<?>, Edge> sourceNode,\n+                                             final Edge<? extends View, Node> edge,\n+                                             final Connection connection,\n+                                             final GraphsProvider graphsProvider) {\n+        super(sourceNode, edge, connection);\n+        this.graphsProvider = graphsProvider;\n+        this.diagramId = ContentDefinitionIdUtils.getDiagramId(edge);\n+    }\n+\n+    @Override\n+    public Node<? extends View<?>, Edge> getSourceNode(final GraphCommandExecutionContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55d009d46226aca52a38699e117007f9ba6d12aa"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1OTEzMQ==", "bodyText": "here sonar reports bug on not calling isPresent() before get() on optional ... and the reason IMO is, that it's not called on a variable (method returns new optional each time). Please introduce a variable.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r503159131", "createdAt": "2020-10-12T09:23:37Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionSourceNodeCommand.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.commands.factory.graph;\n+\n+import java.util.Optional;\n+\n+import org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils;\n+import org.kie.workbench.common.stunner.core.command.CommandResult;\n+import org.kie.workbench.common.stunner.core.diagram.GraphsProvider;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.command.GraphCommandExecutionContext;\n+import org.kie.workbench.common.stunner.core.graph.command.impl.SetConnectionSourceNodeCommand;\n+import org.kie.workbench.common.stunner.core.graph.content.view.Connection;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.rule.RuleViolation;\n+\n+import static org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils.getDiagramId;\n+import static org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils.isTheCurrentDiagram;\n+\n+public class DMNSetConnectionSourceNodeCommand extends SetConnectionSourceNodeCommand {\n+\n+    private final GraphsProvider graphsProvider;\n+    private final Optional<String> diagramId;\n+\n+    public DMNSetConnectionSourceNodeCommand(final Node<? extends View<?>, Edge> sourceNode,\n+                                             final Edge<? extends View, Node> edge,\n+                                             final Connection connection,\n+                                             final GraphsProvider graphsProvider) {\n+        super(sourceNode, edge, connection);\n+        this.graphsProvider = graphsProvider;\n+        this.diagramId = ContentDefinitionIdUtils.getDiagramId(edge);\n+    }\n+\n+    @Override\n+    public Node<? extends View<?>, Edge> getSourceNode(final GraphCommandExecutionContext context) {\n+        if (commandBelongsToAnotherGraph()) {\n+            return getEdgesGraph().getNode(getSourceNodeUUID());\n+        } else {\n+            return superGetSourceNode(context);\n+        }\n+    }\n+\n+    Node<? extends View<?>, Edge> superGetSourceNode(final GraphCommandExecutionContext context) {\n+        return super.getSourceNode(context);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public CommandResult<RuleViolation> undo(final GraphCommandExecutionContext context) {\n+        final DMNSetConnectionSourceNodeCommand undoCommand = new DMNSetConnectionSourceNodeCommand((Node<? extends View<?>, Edge>) getNode(context,\n+                                                                                                                                            getLastSourceNodeUUID()),\n+                                                                                                    getEdge(context),\n+                                                                                                    getLastConnection(),\n+                                                                                                    graphsProvider);\n+        return undoCommand.execute(context);\n+    }\n+\n+    public Optional<String> getDiagramId() {\n+        return diagramId;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected Node<?, Edge> getNode(final GraphCommandExecutionContext context,\n+                                    final String uuid) {\n+        if (commandBelongsToAnotherGraph()) {\n+            return getEdgesGraph().getNode(uuid);\n+        } else {\n+            return superGetNode(context, uuid);\n+        }\n+    }\n+\n+    Node<?, Edge> superGetNode(final GraphCommandExecutionContext context,\n+                               final String uuid) {\n+        return super.getNode(context, uuid);\n+    }\n+\n+    boolean commandBelongsToAnotherGraph() {\n+        return getDiagramId().isPresent()\n+                && !isTheCurrentDiagram(getDiagramId(), graphsProvider);\n+    }\n+\n+    Graph getEdgesGraph() {\n+        if (getDiagramId().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55d009d46226aca52a38699e117007f9ba6d12aa"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE1OTM5MQ==", "bodyText": "again, please introduce variable.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#discussion_r503159391", "createdAt": "2020-10-12T09:24:00Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-client/src/main/java/org/kie/workbench/common/dmn/client/commands/factory/graph/DMNSetConnectionTargetNodeCommand.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.client.commands.factory.graph;\n+\n+import java.util.Optional;\n+\n+import org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils;\n+import org.kie.workbench.common.stunner.core.command.CommandResult;\n+import org.kie.workbench.common.stunner.core.diagram.GraphsProvider;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Graph;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.command.GraphCommandExecutionContext;\n+import org.kie.workbench.common.stunner.core.graph.command.impl.SetConnectionTargetNodeCommand;\n+import org.kie.workbench.common.stunner.core.graph.content.view.Connection;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+import org.kie.workbench.common.stunner.core.rule.RuleViolation;\n+\n+import static org.kie.workbench.common.dmn.client.commands.util.ContentDefinitionIdUtils.isTheCurrentDiagram;\n+\n+public class DMNSetConnectionTargetNodeCommand extends SetConnectionTargetNodeCommand {\n+\n+    private final GraphsProvider graphsProvider;\n+    private final Optional<String> diagramId;\n+\n+    public DMNSetConnectionTargetNodeCommand(final Node<? extends View<?>, Edge> targetNode,\n+                                             final Edge<? extends View, Node> edge,\n+                                             final Connection connection,\n+                                             final GraphsProvider graphsProvider) {\n+        super(targetNode, edge, connection);\n+        this.graphsProvider = graphsProvider;\n+        this.diagramId = ContentDefinitionIdUtils.getDiagramId(edge);\n+    }\n+\n+    @Override\n+    protected Node<? extends View<?>, Edge> getTargetNode(final GraphCommandExecutionContext context) {\n+        if (commandBelongsToAnotherGraph()) {\n+            return getEdgesGraph().getNode(getTargetNodeUUID());\n+        } else {\n+            return superGetTargetNode(context);\n+        }\n+    }\n+\n+    Node<? extends View<?>, Edge> superGetTargetNode(GraphCommandExecutionContext context) {\n+        return super.getTargetNode(context);\n+    }\n+\n+    public Optional<String> getDiagramId() {\n+        return diagramId;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public CommandResult<RuleViolation> undo(final GraphCommandExecutionContext context) {\n+        final DMNSetConnectionTargetNodeCommand undoCommand = new DMNSetConnectionTargetNodeCommand((Node<? extends View<?>, Edge>) getNode(context,\n+                                                                                                                                            getLastTargetNodeUUID()),\n+                                                                                                    getEdge(context),\n+                                                                                                    getLastConnection(),\n+                                                                                                    graphsProvider);\n+        return undoCommand.execute(context);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    protected Node<?, Edge> getNode(final GraphCommandExecutionContext context,\n+                                    final String uuid) {\n+        if (commandBelongsToAnotherGraph()) {\n+            return getEdgesGraph().getNode(uuid);\n+        } else {\n+            return superGetNode(context, uuid);\n+        }\n+    }\n+\n+    Node<?, Edge> superGetNode(final GraphCommandExecutionContext context,\n+                               final String uuid) {\n+        return super.getNode(context, uuid);\n+    }\n+\n+    boolean commandBelongsToAnotherGraph() {\n+        return getDiagramId().isPresent()\n+                && !isTheCurrentDiagram(getDiagramId(), graphsProvider);\n+    }\n+\n+    Graph getEdgesGraph() {\n+        if (getDiagramId().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55d009d46226aca52a38699e117007f9ba6d12aa"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb3a00de64465c1c70dd6595e95d1f048796899b", "author": {"user": {"login": "danielzhe", "name": "Daniel J dos Santos"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/fb3a00de64465c1c70dd6595e95d1f048796899b", "committedDate": "2020-10-14T19:32:36Z", "message": "KOGITO-3364: [DMN Designer] Multiple DRDs support - When a node is deleted in the DRG, undo/redo operations do not work properly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a899d2b2d64beabf39f9a9aaf1f74817635a31e0", "author": {"user": {"login": "danielzhe", "name": "Daniel J dos Santos"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a899d2b2d64beabf39f9a9aaf1f74817635a31e0", "committedDate": "2020-10-14T19:32:36Z", "message": "SonarCloude issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb49ae9896ecace4d86a3306ba5c2a3cdbfcb48", "author": {"user": {"login": "danielzhe", "name": "Daniel J dos Santos"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/4fb49ae9896ecace4d86a3306ba5c2a3cdbfcb48", "committedDate": "2020-10-14T19:32:36Z", "message": "CodeReview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2336d43a164ca76440381a01d4da190013fdef4", "author": {"user": {"login": "danielzhe", "name": "Daniel J dos Santos"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e2336d43a164ca76440381a01d4da190013fdef4", "committedDate": "2020-10-15T14:08:47Z", "message": "Code Review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55d009d46226aca52a38699e117007f9ba6d12aa", "author": {"user": {"login": "danielzhe", "name": "Daniel J dos Santos"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/55d009d46226aca52a38699e117007f9ba6d12aa", "committedDate": "2020-10-06T20:06:17Z", "message": "CodeReview"}, "afterCommit": {"oid": "e2336d43a164ca76440381a01d4da190013fdef4", "author": {"user": {"login": "danielzhe", "name": "Daniel J dos Santos"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e2336d43a164ca76440381a01d4da190013fdef4", "committedDate": "2020-10-15T14:08:47Z", "message": "Code Review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NTk5MjMz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3447#pullrequestreview-514599233", "createdAt": "2020-10-22T10:52:44Z", "commit": {"oid": "e2336d43a164ca76440381a01d4da190013fdef4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 334, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}