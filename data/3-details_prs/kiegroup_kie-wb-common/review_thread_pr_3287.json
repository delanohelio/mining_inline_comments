{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NzU3NDk0", "number": 3287, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1NToyMVrOD3hBsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1NToyMVrOD3hBsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTM5Mzc2OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-dmn/kie-wb-common-dmn-backend/src/main/java/org/kie/workbench/common/dmn/backend/DMNMarshallerStandalone.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1NToyMVrOGNzqGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxOTowMzo0MFrOGOM42Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTAzNQ==", "bodyText": "Isn't this extracting import prefix rather than namespace? Or it is the same thing?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3287#discussion_r417131035", "createdAt": "2020-04-29T07:55:21Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-backend/src/main/java/org/kie/workbench/common/dmn/backend/DMNMarshallerStandalone.java", "diffHunk": "@@ -1130,6 +1095,59 @@ private static DMNShape stunnerToDDExt(final View<? extends DMNElement> v) {\n         return result;\n     }\n \n+    static QName getDmnElementRef(final Definitions definitions,\n+                                  final View<? extends DMNElement> v) {\n+\n+        final DMNElement dmnElement = v.getDefinition();\n+        final String dmnElementId = dmnElement.getId().getValue();\n+\n+        return getImportPrefix(definitions, dmnElement)\n+                .map(prefix -> new QName(prefix + \":\" + dmnElementId))\n+                .orElse(new QName(dmnElementId));\n+    }\n+\n+    private static Optional<String> getImportPrefix(final Definitions definitions,\n+                                                    final DMNElement dmnElement) {\n+\n+        if (!(dmnElement instanceof NamedElement)) {\n+            return Optional.empty();\n+        }\n+\n+        final NamedElement namedElement = (NamedElement) dmnElement;\n+        final String drgElementPrefix = extractNamespaceFromName(namedElement.getName());\n+\n+        return definitions\n+                .getImport()\n+                .stream()\n+                .filter(anImport -> {\n+                    final String importName = anImport.getName().getValue();\n+                    return Objects.equals(importName, drgElementPrefix);\n+                })\n+                .map(anImport -> {\n+                    final String importNamespace = anImport.getNamespace();\n+                    return getNsContextsByNamespace(definitions, importNamespace);\n+                })\n+                .findFirst();\n+    }\n+\n+    private static String getNsContextsByNamespace(final Definitions definitions,\n+                                                   final String namespace) {\n+        return definitions\n+                .getNsContext()\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> Objects.equals(entry.getValue(), namespace))\n+                .map(Entry::getKey)\n+                .findFirst()\n+                .orElse(\"\");\n+    }\n+\n+    private static String extractNamespaceFromName(final Name name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0317c350b02fdbf91c14ecf1e917268e083ddbd4"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU0NDQwOQ==", "bodyText": "\"Fixed!\"", "url": "https://github.com/kiegroup/kie-wb-common/pull/3287#discussion_r417544409", "createdAt": "2020-04-29T19:03:40Z", "author": {"login": "karreiro"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-backend/src/main/java/org/kie/workbench/common/dmn/backend/DMNMarshallerStandalone.java", "diffHunk": "@@ -1130,6 +1095,59 @@ private static DMNShape stunnerToDDExt(final View<? extends DMNElement> v) {\n         return result;\n     }\n \n+    static QName getDmnElementRef(final Definitions definitions,\n+                                  final View<? extends DMNElement> v) {\n+\n+        final DMNElement dmnElement = v.getDefinition();\n+        final String dmnElementId = dmnElement.getId().getValue();\n+\n+        return getImportPrefix(definitions, dmnElement)\n+                .map(prefix -> new QName(prefix + \":\" + dmnElementId))\n+                .orElse(new QName(dmnElementId));\n+    }\n+\n+    private static Optional<String> getImportPrefix(final Definitions definitions,\n+                                                    final DMNElement dmnElement) {\n+\n+        if (!(dmnElement instanceof NamedElement)) {\n+            return Optional.empty();\n+        }\n+\n+        final NamedElement namedElement = (NamedElement) dmnElement;\n+        final String drgElementPrefix = extractNamespaceFromName(namedElement.getName());\n+\n+        return definitions\n+                .getImport()\n+                .stream()\n+                .filter(anImport -> {\n+                    final String importName = anImport.getName().getValue();\n+                    return Objects.equals(importName, drgElementPrefix);\n+                })\n+                .map(anImport -> {\n+                    final String importNamespace = anImport.getNamespace();\n+                    return getNsContextsByNamespace(definitions, importNamespace);\n+                })\n+                .findFirst();\n+    }\n+\n+    private static String getNsContextsByNamespace(final Definitions definitions,\n+                                                   final String namespace) {\n+        return definitions\n+                .getNsContext()\n+                .entrySet()\n+                .stream()\n+                .filter(entry -> Objects.equals(entry.getValue(), namespace))\n+                .map(Entry::getKey)\n+                .findFirst()\n+                .orElse(\"\");\n+    }\n+\n+    private static String extractNamespaceFromName(final Name name) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTAzNQ=="}, "originalCommit": {"oid": "0317c350b02fdbf91c14ecf1e917268e083ddbd4"}, "originalPosition": 180}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1457, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}