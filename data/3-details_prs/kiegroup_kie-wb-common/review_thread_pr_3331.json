{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTU1OTI2", "number": 3331, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoyMzoxMVrOEPP9gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDozMDo1N1rOEQpq2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDI1NjAzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/main/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoyMzoxMVrOGy3Hrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTo1MTo0N1rOGzYQaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NTA3MA==", "bodyText": "I would put this if block at the beginning of the method because there is no need to execute getModule and getPackage if path does not exist.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r455985070", "createdAt": "2020-07-16T18:23:11Z", "author": {"login": "caponetto"}, "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/main/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexer.java", "diffHunk": "@@ -102,6 +102,10 @@ public IndexBuilder fillIndexBuilder(final Path path) throws Exception {\n             return null;\n         }\n \n+        if (!ioService.exists(path)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd5a27f5e745320e0dc7901d40e48be12bd6772a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyNzk3Nw==", "bodyText": "Hi @caponetto , thanks for the suggestion. it's done.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r456527977", "createdAt": "2020-07-17T15:51:47Z", "author": {"login": "akumar074"}, "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/main/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexer.java", "diffHunk": "@@ -102,6 +102,10 @@ public IndexBuilder fillIndexBuilder(final Path path) throws Exception {\n             return null;\n         }\n \n+        if (!ioService.exists(path)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NTA3MA=="}, "originalCommit": {"oid": "cd5a27f5e745320e0dc7901d40e48be12bd6772a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDI2MDM5OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/main/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoyNDoxNlrOGy3KSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTo1NToyM1rOGzYYKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NTczNg==", "bodyText": "Consider adding a log message and creating a unit test that exercises this new condition.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r455985736", "createdAt": "2020-07-16T18:24:16Z", "author": {"login": "caponetto"}, "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/main/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexer.java", "diffHunk": "@@ -102,6 +102,10 @@ public IndexBuilder fillIndexBuilder(final Path path) throws Exception {\n             return null;\n         }\n \n+        if (!ioService.exists(path)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd5a27f5e745320e0dc7901d40e48be12bd6772a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyOTk2Mg==", "bodyText": "Hey @caponetto , I have added the log here. I am looking into the unit tests, but not sure how indexer tests are done right now. I will update it here.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r456529962", "createdAt": "2020-07-17T15:55:23Z", "author": {"login": "akumar074"}, "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/main/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexer.java", "diffHunk": "@@ -102,6 +102,10 @@ public IndexBuilder fillIndexBuilder(final Path path) throws Exception {\n             return null;\n         }\n \n+        if (!ioService.exists(path)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4NTczNg=="}, "originalCommit": {"oid": "cd5a27f5e745320e0dc7901d40e48be12bd6772a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDI3OTIzOnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-client/src/main/java/org/kie/workbench/common/screens/datamodeller/client/DataModelerScreenPresenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxODoyOTowM1rOGy3VgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTo1MjoyNFrOGzYRrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4ODYwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                  () -> getSaveFileCommand(newTypeInfo).execute(),\n          \n          \n            \n                                                  getSaveFileCommand(newTypeInfo),\n          \n      \n    \n    \n  \n\nIt makes more sense to pass the function itself since it returns a Command.\nSame for the others below.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r455988609", "createdAt": "2020-07-16T18:29:03Z", "author": {"login": "caponetto"}, "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-client/src/main/java/org/kie/workbench/common/screens/datamodeller/client/DataModelerScreenPresenter.java", "diffHunk": "@@ -545,20 +545,20 @@ private void saveFile(final JavaTypeInfo newTypeInfo) {\n         if (hasPackageNameChanged(newTypeInfo)) {\n             view.showYesNoCancelPopup(CommonConstants.INSTANCE.Information(),\n                                       Constants.INSTANCE.modelEditor_confirm_file_package_refactoring(newTypeInfo.getPackageName()),\n-                                      () -> getSaveFileCommand(newTypeInfo),\n+                                      () -> getSaveFileCommand(newTypeInfo).execute(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd5a27f5e745320e0dc7901d40e48be12bd6772a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyODMwMg==", "bodyText": "Done.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r456528302", "createdAt": "2020-07-17T15:52:24Z", "author": {"login": "akumar074"}, "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-client/src/main/java/org/kie/workbench/common/screens/datamodeller/client/DataModelerScreenPresenter.java", "diffHunk": "@@ -545,20 +545,20 @@ private void saveFile(final JavaTypeInfo newTypeInfo) {\n         if (hasPackageNameChanged(newTypeInfo)) {\n             view.showYesNoCancelPopup(CommonConstants.INSTANCE.Information(),\n                                       Constants.INSTANCE.modelEditor_confirm_file_package_refactoring(newTypeInfo.getPackageName()),\n-                                      () -> getSaveFileCommand(newTypeInfo),\n+                                      () -> getSaveFileCommand(newTypeInfo).execute(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk4ODYwOQ=="}, "originalCommit": {"oid": "cd5a27f5e745320e0dc7901d40e48be12bd6772a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODk1Mzg0OnYy", "diffSide": "RIGHT", "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/test/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDozMDo1N1rOG060zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyNTozMFrOG1CUig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MjkyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.kie.workbench.common.screens.datamodeller.backend.server.indexing;\n          \n          \n            \n            \n          \n          \n            \n            import org.junit.Assert;\n          \n          \n            \n            import org.kie.workbench.common.services.refactoring.backend.server.indexing.IndexBuilder;\n          \n          \n            \n            import org.uberfire.java.nio.file.Path;\n          \n          \n            \n            \n          \n          \n            \n            import org.junit.Test;\n          \n          \n            \n            import org.mockito.Mockito;\n          \n          \n            \n            import org.uberfire.io.IOService;\n          \n          \n            \n            \n          \n          \n            \n            public class JavaFileIndexerTest {\n          \n          \n            \n            \n          \n          \n            \n                @Test\n          \n          \n            \n                public void testFillIndexBuilderWithUnavailablePath () throws Exception {\n          \n          \n            \n                    final IOService ioService = Mockito.mock(IOService.class);\n          \n          \n            \n                    final JavaFileIndexer indexer = Mockito.mock(JavaFileIndexer.class);\n          \n          \n            \n                    final Path mockPath = Mockito.mock(Path.class);\n          \n          \n            \n                    Mockito.when(ioService.exists(mockPath)).thenReturn(false);\n          \n          \n            \n                    final IndexBuilder builder = indexer.fillIndexBuilder(mockPath);\n          \n          \n            \n                    Assert.assertNull(builder);\n          \n          \n            \n                }\n          \n          \n            \n            }\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             *\n          \n          \n            \n             * Licensed under the Apache License, Version 2.0 (the \"License\");\n          \n          \n            \n             * you may not use this file except in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *     http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing, software\n          \n          \n            \n             * distributed under the License is distributed on an \"AS IS\" BASIS,\n          \n          \n            \n             * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          \n          \n            \n             * See the License for the specific language governing permissions and\n          \n          \n            \n             * limitations under the License.\n          \n          \n            \n             */\n          \n          \n            \n            \n          \n          \n            \n            package org.kie.workbench.common.screens.datamodeller.backend.server.indexing;\n          \n          \n            \n            \n          \n          \n            \n            import org.junit.Test;\n          \n          \n            \n            import org.junit.runner.RunWith;\n          \n          \n            \n            import org.mockito.InjectMocks;\n          \n          \n            \n            import org.mockito.Mock;\n          \n          \n            \n            import org.mockito.runners.MockitoJUnitRunner;\n          \n          \n            \n            import org.uberfire.io.IOService;\n          \n          \n            \n            import org.uberfire.java.nio.file.Path;\n          \n          \n            \n            \n          \n          \n            \n            import static org.junit.Assert.assertNull;\n          \n          \n            \n            import static org.mockito.Mockito.mock;\n          \n          \n            \n            import static org.mockito.Mockito.when;\n          \n          \n            \n            \n          \n          \n            \n            @RunWith(MockitoJUnitRunner.class)\n          \n          \n            \n            public class JavaFileIndexerTest {\n          \n          \n            \n            \n          \n          \n            \n                @Mock\n          \n          \n            \n                private IOService ioService;\n          \n          \n            \n            \n          \n          \n            \n                @InjectMocks\n          \n          \n            \n                private JavaFileIndexer indexer;\n          \n          \n            \n            \n          \n          \n            \n                @Test\n          \n          \n            \n                public void testFillIndexBuilderWithUnavailablePath() throws Exception {\n          \n          \n            \n                    final Path mockPath = mock(Path.class);\n          \n          \n            \n            \n          \n          \n            \n                    when(ioService.exists(mockPath)).thenReturn(false);\n          \n          \n            \n            \n          \n          \n            \n                    assertNull(indexer.fillIndexBuilder(mockPath));\n          \n          \n            \n                }\n          \n          \n            \n            }\n          \n      \n    \n    \n  \n\nConsider this code as a suggestion.\nI've simplified things a little bit and also added the copyright header.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r458142926", "createdAt": "2020-07-21T14:30:57Z", "author": {"login": "caponetto"}, "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/test/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexerTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.kie.workbench.common.screens.datamodeller.backend.server.indexing;\n+\n+import org.junit.Assert;\n+import org.kie.workbench.common.services.refactoring.backend.server.indexing.IndexBuilder;\n+import org.uberfire.java.nio.file.Path;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.uberfire.io.IOService;\n+\n+public class JavaFileIndexerTest {\n+\n+    @Test\n+    public void testFillIndexBuilderWithUnavailablePath () throws Exception {\n+        final IOService ioService = Mockito.mock(IOService.class);\n+        final JavaFileIndexer indexer = Mockito.mock(JavaFileIndexer.class);\n+        final Path mockPath = Mockito.mock(Path.class);\n+        Mockito.when(ioService.exists(mockPath)).thenReturn(false);\n+        final IndexBuilder builder = indexer.fillIndexBuilder(mockPath);\n+        Assert.assertNull(builder);\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "720ecbba9784069f86086128285423cdcee60838"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NTczOA==", "bodyText": "Thanks @caponetto , I have added the copyright and proposed chnages. :)", "url": "https://github.com/kiegroup/kie-wb-common/pull/3331#discussion_r458265738", "createdAt": "2020-07-21T17:25:30Z", "author": {"login": "akumar074"}, "path": "kie-wb-common-screens/kie-wb-common-data-modeller/kie-wb-common-data-modeller-backend/src/test/java/org/kie/workbench/common/screens/datamodeller/backend/server/indexing/JavaFileIndexerTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.kie.workbench.common.screens.datamodeller.backend.server.indexing;\n+\n+import org.junit.Assert;\n+import org.kie.workbench.common.services.refactoring.backend.server.indexing.IndexBuilder;\n+import org.uberfire.java.nio.file.Path;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.uberfire.io.IOService;\n+\n+public class JavaFileIndexerTest {\n+\n+    @Test\n+    public void testFillIndexBuilderWithUnavailablePath () throws Exception {\n+        final IOService ioService = Mockito.mock(IOService.class);\n+        final JavaFileIndexer indexer = Mockito.mock(JavaFileIndexer.class);\n+        final Path mockPath = Mockito.mock(Path.class);\n+        Mockito.when(ioService.exists(mockPath)).thenReturn(false);\n+        final IndexBuilder builder = indexer.fillIndexBuilder(mockPath);\n+        Assert.assertNull(builder);\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0MjkyNg=="}, "originalCommit": {"oid": "720ecbba9784069f86086128285423cdcee60838"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1321, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}