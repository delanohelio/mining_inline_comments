{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjY0NzM3", "number": 3347, "title": "KOGITO-2528 : Reuse Data Types across the process", "bodyText": "Hi @romartin @LuboTerifaj this PR is just the data types, Data Objects code has been removed. After this is merged I can update Data Objects to use Data Types Service. Will upload War and VSCode extension. There is some Tests still to be written, will start on that and wait for Sonarcloud results as well. but as far as usability it can be tested now. Link for War and VS Code extension at https://drive.google.com/drive/folders/1jukaxObjhQklIDymbUC79MHZ5nk-gmwM?usp=sharing", "createdAt": "2020-06-30T20:05:23Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347", "merged": true, "mergeCommit": {"oid": "558105caf230415064f3b97db8b9dbbea40da1dc"}, "closed": true, "closedAt": "2021-04-22T19:42:48Z", "author": {"login": "inodeman"}, "timelineItems": {"totalCount": 59, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxU322gFqTQ0MjQ2OTAzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABePrb49AFqTY0MjU0NzYxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNDY5MDM3", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-442469037", "createdAt": "2020-07-03T15:07:28Z", "commit": {"oid": "475ba49fb2e2f0c56a0750d8cc44362abad03c5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTowNzoyOFrOGszC1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTowNzoyOFrOGszC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYyNjgzNg==", "bodyText": "Hey @inodeman, I notice that here we are creating a new instance of arraylist to match the method signature. Maybe it would be better to pass null and check internally or perhaps overload the method. Just thinking.\nWDYT?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r449626836", "createdAt": "2020-07-03T15:07:28Z", "author": {"login": "handreyrc"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-project-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/project/backend/service/service/FindDataTypesProjectServiceTest.java", "diffHunk": "@@ -91,7 +92,7 @@ public void testGetJavaTypeNames() throws Exception {\n \n         when(oracle.getModuleModelFields()).thenReturn(fields);\n \n-        final List<String> dataTypeNames = service.getDataTypeNames(path);\n+        final List<String> dataTypeNames = service.getDataTypeNames(path, new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "475ba49fb2e2f0c56a0750d8cc44362abad03c5b"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dc2297452a99fe242a35b4f7b2db1f675db540a", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3dc2297452a99fe242a35b4f7b2db1f675db540a", "committedDate": "2020-06-30T19:38:16Z", "message": "KOGITO-2528 : Reuse Data Types across the process removed DO References"}, "afterCommit": {"oid": "b8084619bf682bfa0454f1f1efe54f658fe023f8", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/b8084619bf682bfa0454f1f1efe54f658fe023f8", "committedDate": "2020-07-23T20:08:59Z", "message": "KOGITO-2528 : Reuse Data Types across the process Added support for Data Objects"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMDc5MzI5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-460079329", "createdAt": "2020-08-03T14:34:49Z", "commit": {"oid": "b8084619bf682bfa0454f1f1efe54f658fe023f8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDozNDo0OVrOG68BVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDozNTo1NlrOG68EUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1Mzk3NQ==", "bodyText": "why do we need this doneLoading flag, and also the timer? Looks tricky...", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r464453975", "createdAt": "2020-08-03T14:34:49Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/artifacts/DataObjectTypeWidget.java", "diffHunk": "@@ -161,6 +163,22 @@ public void setValue(DataObjectTypeValue value) {\n \n     @Override\n     public void setValue(DataObjectTypeValue value, boolean fireEvents) {\n+\n+        if (doneLoading) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8084619bf682bfa0454f1f1efe54f658fe023f8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1NDczOQ==", "bodyText": "maybe this can be simplified using Streams in a single or couple of lines", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r464454739", "createdAt": "2020-08-03T14:35:56Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/artifacts/DataObjectTypeWidget.java", "diffHunk": "@@ -227,6 +249,19 @@ public void notifyModelChanged() {\n         oldValue = currentValue;\n     }\n \n+    static String getRealType(String value) {\n+        if (isNullOrEmpty(value)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8084619bf682bfa0454f1f1efe54f658fe023f8"}, "originalPosition": 110}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8084619bf682bfa0454f1f1efe54f658fe023f8", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/b8084619bf682bfa0454f1f1efe54f658fe023f8", "committedDate": "2020-07-23T20:08:59Z", "message": "KOGITO-2528 : Reuse Data Types across the process Added support for Data Objects"}, "afterCommit": {"oid": "55d58ba1aa8bc1eddbb5c95bbd4741e441d23d2c", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/55d58ba1aa8bc1eddbb5c95bbd4741e441d23d2c", "committedDate": "2020-08-04T14:28:46Z", "message": "KOGITO-2528 : Reuse Data Types across the process Added support for Data Objects"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNTIzNjcx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-461523671", "createdAt": "2020-08-05T10:10:27Z", "commit": {"oid": "55d58ba1aa8bc1eddbb5c95bbd4741e441d23d2c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55d58ba1aa8bc1eddbb5c95bbd4741e441d23d2c", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/55d58ba1aa8bc1eddbb5c95bbd4741e441d23d2c", "committedDate": "2020-08-04T14:28:46Z", "message": "KOGITO-2528 : Reuse Data Types across the process Added support for Data Objects"}, "afterCommit": {"oid": "32b0d3b206e7258b62dd3fe72f0d09848098653d", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/32b0d3b206e7258b62dd3fe72f0d09848098653d", "committedDate": "2020-08-07T22:47:36Z", "message": "KOGITO-2528 : Reuse Data Types across the process"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32b0d3b206e7258b62dd3fe72f0d09848098653d", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/32b0d3b206e7258b62dd3fe72f0d09848098653d", "committedDate": "2020-08-07T22:47:36Z", "message": "KOGITO-2528 : Reuse Data Types across the process"}, "afterCommit": {"oid": "65b9ff77f4e4f9c9ed7e4e81749ede7b1f2e9171", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/65b9ff77f4e4f9c9ed7e4e81749ede7b1f2e9171", "committedDate": "2020-09-08T18:20:03Z", "message": "KOGITO-2528 : Reuse Data Types across the process / Removed Logging"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "65b9ff77f4e4f9c9ed7e4e81749ede7b1f2e9171", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/65b9ff77f4e4f9c9ed7e4e81749ede7b1f2e9171", "committedDate": "2020-09-08T18:20:03Z", "message": "KOGITO-2528 : Reuse Data Types across the process / Removed Logging"}, "afterCommit": {"oid": "d51868737b8e6ea5c08c8dcce07566f2c330a74c", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d51868737b8e6ea5c08c8dcce07566f2c330a74c", "committedDate": "2020-10-07T00:46:33Z", "message": "KOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d51868737b8e6ea5c08c8dcce07566f2c330a74c", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d51868737b8e6ea5c08c8dcce07566f2c330a74c", "committedDate": "2020-10-07T00:46:33Z", "message": "KOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests"}, "afterCommit": {"oid": "167c5f32a7897a0303e786c1536e66f116be48f8", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/167c5f32a7897a0303e786c1536e66f116be48f8", "committedDate": "2020-10-23T19:56:21Z", "message": "KOGITO-2528 : Reuse Data Types across the process (1/3)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "167c5f32a7897a0303e786c1536e66f116be48f8", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/167c5f32a7897a0303e786c1536e66f116be48f8", "committedDate": "2020-10-23T19:56:21Z", "message": "KOGITO-2528 : Reuse Data Types across the process (1/3)"}, "afterCommit": {"oid": "9e12ef961bb191a15ee7d11325980e150304ab5d", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/9e12ef961bb191a15ee7d11325980e150304ab5d", "committedDate": "2020-10-26T19:43:16Z", "message": "KOGITO-2528 : Reuse Data Types across the process (2/3)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68699403913cdaa7b0490b6b1e39ac6b0617e2e6", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/68699403913cdaa7b0490b6b1e39ac6b0617e2e6", "committedDate": "2020-10-27T23:02:29Z", "message": "KOGITO-2528 : Reuse Data Types across the process (2.5/3)"}, "afterCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/6c7b5a029da081f98cc08cf662dc26ef72a5680d", "committedDate": "2020-10-28T19:15:00Z", "message": "KOGITO-2528 : Reuse Data Types across the process (2.5/3)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3OTU1MTEw", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-527955110", "createdAt": "2020-11-11T08:23:12Z", "commit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODoyMzoxM1rOHxC7_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwODo0MTo1N1rOHxDiDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDM5OA==", "bodyText": "let's throw some exception when we encounter this and let's  log the type that wasn't processed by these if-else branches.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521190398", "createdAt": "2020-11-11T08:23:13Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected List<String> allDataTypes = new ArrayList<>();\n+\n+    public void extractFromItem(View view) {\n+        Object definition = view.getDefinition();\n+\n+        if (definition instanceof DataObject) {\n+            DataObject dataObject = (DataObject) view.getDefinition();\n+            allDataTypes.add(dataObject.getType().getValue().getType());\n+        } else if (definition instanceof AdHocSubprocess) {\n+            AdHocSubprocess mi = (AdHocSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof BPMNDiagramImpl) {\n+            BPMNDiagramImpl mi = (BPMNDiagramImpl) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EmbeddedSubprocess) {\n+            EmbeddedSubprocess mi = (EmbeddedSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EventSubprocess) {\n+            EventSubprocess mi = (EventSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof MultipleInstanceSubprocess) {\n+            MultipleInstanceSubprocess mi = (MultipleInstanceSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataInput().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataOutput().getValue()));\n+        } else if (definition instanceof UserTask) {\n+            UserTask ut = (UserTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(ut.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof GenericServiceTask) {\n+            GenericServiceTask st = (GenericServiceTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(st.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof BusinessRuleTask) {\n+            BusinessRuleTask bt = (BusinessRuleTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndErrorEvent) {\n+            EndErrorEvent bt = (EndErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndEscalationEvent) {\n+            EndEscalationEvent bt = (EndEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndMessageEvent) {\n+            EndMessageEvent bt = (EndMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndSignalEvent) {\n+            EndSignalEvent bt = (EndSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateErrorEventCatching) {\n+            IntermediateErrorEventCatching bt = (IntermediateErrorEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEvent) {\n+            IntermediateEscalationEvent bt = (IntermediateEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEventThrowing) {\n+            IntermediateEscalationEventThrowing bt = (IntermediateEscalationEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventCatching) {\n+            IntermediateMessageEventCatching bt = (IntermediateMessageEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventThrowing) {\n+            IntermediateMessageEventThrowing bt = (IntermediateMessageEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventCatching) {\n+            IntermediateSignalEventCatching bt = (IntermediateSignalEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventThrowing) {\n+            IntermediateSignalEventThrowing bt = (IntermediateSignalEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof ReusableSubprocess) {\n+            ReusableSubprocess bt = (ReusableSubprocess) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartErrorEvent) {\n+            StartErrorEvent bt = (StartErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartEscalationEvent) {\n+            StartEscalationEvent bt = (StartEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartMessageEvent) {\n+            StartMessageEvent bt = (StartMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartSignalEvent) {\n+            StartSignalEvent bt = (StartSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof CustomTask) {\n+            CustomTask bt = (CustomTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else {\n+            // ToDo: Add extra types to be supported", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDQ3Mw==", "bodyText": "Javadoc", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521190473", "createdAt": "2020-11-11T08:23:21Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+public abstract class AbstractDataTypeCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MDk3OQ==", "bodyText": "I suggest to split this into smaler test cases. For each datatype we should have one test case.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521190979", "createdAt": "2020-11-11T08:24:24Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+import static org.jgroups.util.Util.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+\n+public class AbstractDataTypeCacheTest {\n+\n+    private AbstractDataTypeCache dataTypeCache;\n+\n+    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\"));\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        dataTypeCache = new AbstractDataTypeCache() {\n+            @Override\n+            protected void cacheDataTypes(Object processRoot) {\n+            }\n+\n+            @Override\n+            protected List<String> processAssignments(AssignmentsInfo info) {\n+                return defaultDataTypes;\n+            }\n+\n+            @Override\n+            protected List<String> getDataTypes(String variables) {\n+                return defaultDataTypes;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testExtractFromItem() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MTYwMg==", "bodyText": "Could we please also test type that look like this com.myspace.Person or org.native.common.logging.ParserWagon Just to be sure.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521191602", "createdAt": "2020-11-11T08:25:35Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+import static org.jgroups.util.Util.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+\n+public class AbstractDataTypeCacheTest {\n+\n+    private AbstractDataTypeCache dataTypeCache;\n+\n+    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5Mjg3MQ==", "bodyText": "I notice we only check last item, would it be possible to check cases where we find more dataTypes in one definition?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521192871", "createdAt": "2020-11-11T08:28:06Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+import static org.jgroups.util.Util.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+\n+public class AbstractDataTypeCacheTest {\n+\n+    private AbstractDataTypeCache dataTypeCache;\n+\n+    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\"));\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        dataTypeCache = new AbstractDataTypeCache() {\n+            @Override\n+            protected void cacheDataTypes(Object processRoot) {\n+            }\n+\n+            @Override\n+            protected List<String> processAssignments(AssignmentsInfo info) {\n+                return defaultDataTypes;\n+            }\n+\n+            @Override\n+            protected List<String> getDataTypes(String variables) {\n+                return defaultDataTypes;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testExtractFromItem() {\n+        View view = mock(View.class);\n+\n+        // Test Data Object\n+        DataObject object = new DataObject();\n+        when(view.getDefinition()).thenReturn(object);\n+        dataTypeCache.extractFromItem(view);\n+        assertTrue(getLastItem().equals(object.getType().getValue().getType()));\n+\n+        // Test AdhocSubprocess\n+        AdHocSubprocess adHocSubprocess = new AdHocSubprocess();\n+        when(view.getDefinition()).thenReturn(adHocSubprocess);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");\n+\n+        // Test BPMNDiagramImpl\n+        BPMNDiagramImpl diaram = new BPMNDiagramImpl();\n+        when(view.getDefinition()).thenReturn(diaram);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");\n+\n+        // Test EmbeddedSubprocess\n+        EmbeddedSubprocess embeddedSubprocess = new EmbeddedSubprocess();\n+        when(view.getDefinition()).thenReturn(embeddedSubprocess);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");\n+\n+        // Test EventSubprocess\n+        EventSubprocess eventSubprocess = new EventSubprocess();\n+        when(view.getDefinition()).thenReturn(eventSubprocess);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5MzEyNg==", "bodyText": "Why is this removed?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521193126", "createdAt": "2020-11-11T08:28:39Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/BaseDirectDiagramMarshaller.java", "diffHunk": "@@ -161,8 +165,6 @@ public Graph unmarshall(Metadata metadata, InputStream input) {\n         final Metadata metadata = request.getMetadata();\n         final InputStream inputStream = request.getInput();\n \n-        LOG.debug(\"Starting diagram unmarshalling...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5NDkwMA==", "bodyText": "Also, what if we extract same datatype form one definition? Can that happen? is the expected output one datatype or two datatypes?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521194900", "createdAt": "2020-11-11T08:31:44Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/test/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCacheTest.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+import static org.jgroups.util.Util.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.when;\n+import static org.powermock.api.mockito.PowerMockito.mock;\n+\n+public class AbstractDataTypeCacheTest {\n+\n+    private AbstractDataTypeCache dataTypeCache;\n+\n+    private ArrayList<String> defaultDataTypes = new ArrayList<>(Arrays.asList(\"MyType\", \"MyString\", \"MyObject\"));\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        dataTypeCache = new AbstractDataTypeCache() {\n+            @Override\n+            protected void cacheDataTypes(Object processRoot) {\n+            }\n+\n+            @Override\n+            protected List<String> processAssignments(AssignmentsInfo info) {\n+                return defaultDataTypes;\n+            }\n+\n+            @Override\n+            protected List<String> getDataTypes(String variables) {\n+                return defaultDataTypes;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testExtractFromItem() {\n+        View view = mock(View.class);\n+\n+        // Test Data Object\n+        DataObject object = new DataObject();\n+        when(view.getDefinition()).thenReturn(object);\n+        dataTypeCache.extractFromItem(view);\n+        assertTrue(getLastItem().equals(object.getType().getValue().getType()));\n+\n+        // Test AdhocSubprocess\n+        AdHocSubprocess adHocSubprocess = new AdHocSubprocess();\n+        when(view.getDefinition()).thenReturn(adHocSubprocess);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");\n+\n+        // Test BPMNDiagramImpl\n+        BPMNDiagramImpl diaram = new BPMNDiagramImpl();\n+        when(view.getDefinition()).thenReturn(diaram);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");\n+\n+        // Test EmbeddedSubprocess\n+        EmbeddedSubprocess embeddedSubprocess = new EmbeddedSubprocess();\n+        when(view.getDefinition()).thenReturn(embeddedSubprocess);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");\n+\n+        // Test EventSubprocess\n+        EventSubprocess eventSubprocess = new EventSubprocess();\n+        when(view.getDefinition()).thenReturn(eventSubprocess);\n+        dataTypeCache.extractFromItem(view);\n+        assertEquals(getLastItem(), \"MyObject\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5Mjg3MQ=="}, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5NzY4Nw==", "bodyText": "please split this into multiple test cases,\n\nEmpty  diagram\nTest with two nodes\n\nI would also add check that verify that parent class AbstractDataTypeCache contains expected datatypes when the diagram is empty or has nodes with dataIOSets.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521197687", "createdAt": "2020-11-11T08:37:16Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/test/java/org/kie/workbench/common/stunner/bpmn/backend/converters/tostunner/processes/DataTypeCacheServerTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.backend.converters.tostunner.processes;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.stunner.bpmn.backend.converters.tostunner.BpmnNode;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.runners.MockitoJUnitRunner;\n+\n+import static org.jgroups.util.Util.assertEquals;\n+import static org.mockito.Matchers.anyObject;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DataTypeCacheServerTest {\n+\n+    @Mock\n+    private DataTypeCacheServer dataTypeCacheServer;\n+\n+    @Mock\n+    BpmnNode rootNode;\n+\n+    @Mock\n+    BpmnNode node1;\n+\n+    @Mock\n+    BpmnNode node2;\n+\n+    @Test\n+    public void testCacheServer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5ODA1MA==", "bodyText": "todo", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521198050", "createdAt": "2020-11-11T08:37:54Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected List<String> allDataTypes = new ArrayList<>();\n+\n+    public void extractFromItem(View view) {\n+        Object definition = view.getDefinition();\n+\n+        if (definition instanceof DataObject) {\n+            DataObject dataObject = (DataObject) view.getDefinition();\n+            allDataTypes.add(dataObject.getType().getValue().getType());\n+        } else if (definition instanceof AdHocSubprocess) {\n+            AdHocSubprocess mi = (AdHocSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof BPMNDiagramImpl) {\n+            BPMNDiagramImpl mi = (BPMNDiagramImpl) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EmbeddedSubprocess) {\n+            EmbeddedSubprocess mi = (EmbeddedSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EventSubprocess) {\n+            EventSubprocess mi = (EventSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof MultipleInstanceSubprocess) {\n+            MultipleInstanceSubprocess mi = (MultipleInstanceSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataInput().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataOutput().getValue()));\n+        } else if (definition instanceof UserTask) {\n+            UserTask ut = (UserTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(ut.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof GenericServiceTask) {\n+            GenericServiceTask st = (GenericServiceTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(st.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof BusinessRuleTask) {\n+            BusinessRuleTask bt = (BusinessRuleTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndErrorEvent) {\n+            EndErrorEvent bt = (EndErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndEscalationEvent) {\n+            EndEscalationEvent bt = (EndEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndMessageEvent) {\n+            EndMessageEvent bt = (EndMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndSignalEvent) {\n+            EndSignalEvent bt = (EndSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateErrorEventCatching) {\n+            IntermediateErrorEventCatching bt = (IntermediateErrorEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEvent) {\n+            IntermediateEscalationEvent bt = (IntermediateEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEventThrowing) {\n+            IntermediateEscalationEventThrowing bt = (IntermediateEscalationEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventCatching) {\n+            IntermediateMessageEventCatching bt = (IntermediateMessageEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventThrowing) {\n+            IntermediateMessageEventThrowing bt = (IntermediateMessageEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventCatching) {\n+            IntermediateSignalEventCatching bt = (IntermediateSignalEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventThrowing) {\n+            IntermediateSignalEventThrowing bt = (IntermediateSignalEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof ReusableSubprocess) {\n+            ReusableSubprocess bt = (ReusableSubprocess) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartErrorEvent) {\n+            StartErrorEvent bt = (StartErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartEscalationEvent) {\n+            StartEscalationEvent bt = (StartEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartMessageEvent) {\n+            StartMessageEvent bt = (StartMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartSignalEvent) {\n+            StartSignalEvent bt = (StartSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof CustomTask) {\n+            CustomTask bt = (CustomTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else {\n+            // ToDo: Add extra types to be supported\n+        }\n+    }\n+\n+    protected abstract void cacheDataTypes(Object processRoot);\n+\n+    protected abstract List<String> processAssignments(AssignmentsInfo info);\n+\n+    protected abstract List<String> getDataTypes(String variables);\n+\n+    private void cacheImports(List<DefaultImport> defaultImports) {\n+        for (DefaultImport imported : defaultImports) {\n+            allDataTypes.add(imported.getClassName());\n+        }\n+    }\n+\n+    public void initCache(Object diagramRoot, Node<View<? extends BPMNDiagram<? extends BaseDiagramSet, ? extends BaseProcessData, ? extends BaseAdvancedData>>, Edge> value) {\n+        final BPMNDiagram<? extends BaseDiagramSet, ? extends BaseProcessData, ? extends BaseAdvancedData> definition = value.getContent().getDefinition();\n+        cacheImports(definition.getDiagramSet().getImports().getValue().getDefaultImports());\n+        cacheProcessVariables(definition.getProcessData().getProcessVariables().getValue());\n+        cacheGlobalVariables(definition.getAdvancedData().getGlobalVariables().getValue());\n+        cacheDataTypes(diagramRoot);\n+    }\n+\n+    private void cacheProcessVariables(String processVariables) {\n+        allDataTypes.addAll(getDataTypes(processVariables));\n+    }\n+\n+    private void cacheGlobalVariables(String globalVariables) {\n+        allDataTypes.addAll(getDataTypes(globalVariables));\n+    }\n+\n+    public void doFlush() {\n+        // ToDo: Can implement Flushing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5ODMzNA==", "bodyText": "can this be just removed?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521198334", "createdAt": "2020-11-11T08:38:35Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-project-client/pom.xml", "diffHunk": "@@ -329,6 +328,22 @@\n       <scope>test</scope>\n     </dependency>\n \n+    <!--\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE5ODU2Mg==", "bodyText": "commented code", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521198562", "createdAt": "2020-11-11T08:39:03Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-marshalling/src/main/java/org/kie/workbench/common/stunner/bpmn/client/marshall/service/BPMNClientMarshalling.java", "diffHunk": "@@ -67,20 +68,24 @@\n     private final GraphCommandFactory commandFactory;\n     private final GraphCommandManager commandManager;\n     private final ManagedInstance<WorkItemDefinitionRegistry> widRegistries;\n+    private final DataTypeCache dataTypeCache;\n \n     @Inject\n     public BPMNClientMarshalling(final DefinitionManager definitionManager,\n                                  final RuleManager ruleManager,\n                                  final FactoryManager factoryManager,\n                                  final GraphCommandFactory commandFactory,\n                                  final GraphCommandManager commandManager,\n-                                 final ManagedInstance<WorkItemDefinitionRegistry> widRegistries) {\n+                                 final ManagedInstance<WorkItemDefinitionRegistry> widRegistries,\n+                                 final DataTypeCache dataTypeCache) {\n         this.definitionManager = definitionManager;\n         this.ruleManager = ruleManager;\n         this.typedFactoryManager = new TypedFactoryManager(factoryManager);\n         this.commandFactory = commandFactory;\n         this.commandManager = commandManager;\n         this.widRegistries = widRegistries;\n+        this.dataTypeCache = dataTypeCache;\n+        //  this.dataTypeNamesService = dataTypeNamesService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIwMDE0MQ==", "bodyText": "is this correct?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r521200141", "createdAt": "2020-11-11T08:41:57Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-kogito-runtime/pom.xml", "diffHunk": "@@ -29,6 +29,7 @@\n   <packaging>war</packaging>\n   <name>Kie Workbench - Common - Stunner - BPMN Definition Set - Kogito Runtime</name>\n   <description>Kie Workbench - Common - Stunner - BPMN Definition Set - Kogito Runtime</description>\n+  <version>7.43.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c7b5a029da081f98cc08cf662dc26ef72a5680d", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/6c7b5a029da081f98cc08cf662dc26ef72a5680d", "committedDate": "2020-10-28T19:15:00Z", "message": "KOGITO-2528 : Reuse Data Types across the process (2.5/3)"}, "afterCommit": {"oid": "70d1a283e00c735f4e3869e11e77d2a8c5afe845", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/70d1a283e00c735f4e3869e11e77d2a8c5afe845", "committedDate": "2021-01-19T18:54:55Z", "message": "KOGITO-2528 : Reuse Data Types across the process (2.5/3)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a4f7d19ece17680bb9b4beba1b1922050f098bf", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/7a4f7d19ece17680bb9b4beba1b1922050f098bf", "committedDate": "2021-01-19T18:59:19Z", "message": "KOGITO-2528 : Reuse Data Types across the process (3/3)"}, "afterCommit": {"oid": "c3215a74a89fe49179ee368d0f2b32669264382d", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/c3215a74a89fe49179ee368d0f2b32669264382d", "committedDate": "2021-01-20T21:11:52Z", "message": "KOGITO-2528 : Reuse Data Types across the process Fixed Comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3215a74a89fe49179ee368d0f2b32669264382d", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/c3215a74a89fe49179ee368d0f2b32669264382d", "committedDate": "2021-01-20T21:11:52Z", "message": "KOGITO-2528 : Reuse Data Types across the process Fixed Comments"}, "afterCommit": {"oid": "e83c5035341ed115051b4b16c9857bbb03b10508", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e83c5035341ed115051b4b16c9857bbb03b10508", "committedDate": "2021-01-25T19:00:57Z", "message": "KOGITO-2528 : Reuse Data Types across the process (3/3)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e83c5035341ed115051b4b16c9857bbb03b10508", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e83c5035341ed115051b4b16c9857bbb03b10508", "committedDate": "2021-01-25T19:00:57Z", "message": "KOGITO-2528 : Reuse Data Types across the process (3/3)"}, "afterCommit": {"oid": "1e63b599732944d2515e12cae139fe398a399646", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/1e63b599732944d2515e12cae139fe398a399646", "committedDate": "2021-01-27T20:26:29Z", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fc957aded0abebf5e386db599b13389b70f9d22", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/1fc957aded0abebf5e386db599b13389b70f9d22", "committedDate": "2021-01-27T22:00:53Z", "message": "KOGITO-2528 : Reuse Data Types across the process (3/3)"}, "afterCommit": {"oid": "cba806a9cdecee19c932f5bdb5616bc5e8d4e7cb", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/cba806a9cdecee19c932f5bdb5616bc5e8d4e7cb", "committedDate": "2021-02-02T19:29:25Z", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cba806a9cdecee19c932f5bdb5616bc5e8d4e7cb", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/cba806a9cdecee19c932f5bdb5616bc5e8d4e7cb", "committedDate": "2021-02-02T19:29:25Z", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)"}, "afterCommit": {"oid": "ae2a5a1f33ed410b66f160e2abf3e6ca6fa0ff63", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/ae2a5a1f33ed410b66f160e2abf3e6ca6fa0ff63", "committedDate": "2021-02-08T20:27:23Z", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae2a5a1f33ed410b66f160e2abf3e6ca6fa0ff63", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/ae2a5a1f33ed410b66f160e2abf3e6ca6fa0ff63", "committedDate": "2021-02-08T20:27:23Z", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)"}, "afterCommit": {"oid": "8dab347b416673b40c8c5dde3be2897a6c9e31e1", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8dab347b416673b40c8c5dde3be2897a6c9e31e1", "committedDate": "2021-02-17T20:47:53Z", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c9c8abba564544216672feb7eb7a5a87941a62b", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/4c9c8abba564544216672feb7eb7a5a87941a62b", "committedDate": "2021-02-18T19:57:27Z", "message": "KOGITO-2528 : Reuse Data Types across the process (3/3)"}, "afterCommit": {"oid": "861b8c017d2f4358b8340cfd562974084c577f48", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/861b8c017d2f4358b8340cfd562974084c577f48", "committedDate": "2021-02-25T21:19:14Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue when defining default data types in import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwNjgxMDQw", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-600681040", "createdAt": "2021-03-01T12:31:02Z", "commit": {"oid": "861b8c017d2f4358b8340cfd562974084c577f48"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQxMjozMTowMlrOItlpTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wMVQxMjozNzoyN1rOItl5Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3MzYxMg==", "bodyText": "it can be static", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r584673612", "createdAt": "2021-03-01T12:31:02Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+/** An Abstract Class to Handle Data Type Cache.\n+ */\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected List<String> allDataTypes = new ArrayList<>();\n+\n+    public void extractFromItem(View view) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861b8c017d2f4358b8340cfd562974084c577f48"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3MzkzNQ==", "bodyText": "no need for this empty else block, isn't it?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r584673935", "createdAt": "2021-03-01T12:31:36Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+/** An Abstract Class to Handle Data Type Cache.\n+ */\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected List<String> allDataTypes = new ArrayList<>();\n+\n+    public void extractFromItem(View view) {\n+        Object definition = view.getDefinition();\n+\n+        if (definition instanceof DataObject) {\n+            DataObject dataObject = (DataObject) view.getDefinition();\n+            allDataTypes.add(dataObject.getType().getValue().getType());\n+        } else if (definition instanceof AdHocSubprocess) {\n+            AdHocSubprocess mi = (AdHocSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof BPMNDiagramImpl) {\n+            BPMNDiagramImpl mi = (BPMNDiagramImpl) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EmbeddedSubprocess) {\n+            EmbeddedSubprocess mi = (EmbeddedSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EventSubprocess) {\n+            EventSubprocess mi = (EventSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof MultipleInstanceSubprocess) {\n+            MultipleInstanceSubprocess mi = (MultipleInstanceSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataInput().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataOutput().getValue()));\n+        } else if (definition instanceof UserTask) {\n+            UserTask ut = (UserTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(ut.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof GenericServiceTask) {\n+            GenericServiceTask st = (GenericServiceTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(st.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof BusinessRuleTask) {\n+            BusinessRuleTask bt = (BusinessRuleTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndErrorEvent) {\n+            EndErrorEvent bt = (EndErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndEscalationEvent) {\n+            EndEscalationEvent bt = (EndEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndMessageEvent) {\n+            EndMessageEvent bt = (EndMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndSignalEvent) {\n+            EndSignalEvent bt = (EndSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateErrorEventCatching) {\n+            IntermediateErrorEventCatching bt = (IntermediateErrorEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEvent) {\n+            IntermediateEscalationEvent bt = (IntermediateEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEventThrowing) {\n+            IntermediateEscalationEventThrowing bt = (IntermediateEscalationEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventCatching) {\n+            IntermediateMessageEventCatching bt = (IntermediateMessageEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventThrowing) {\n+            IntermediateMessageEventThrowing bt = (IntermediateMessageEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventCatching) {\n+            IntermediateSignalEventCatching bt = (IntermediateSignalEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventThrowing) {\n+            IntermediateSignalEventThrowing bt = (IntermediateSignalEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof ReusableSubprocess) {\n+            ReusableSubprocess bt = (ReusableSubprocess) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartErrorEvent) {\n+            StartErrorEvent bt = (StartErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartEscalationEvent) {\n+            StartEscalationEvent bt = (StartEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartMessageEvent) {\n+            StartMessageEvent bt = (StartMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartSignalEvent) {\n+            StartSignalEvent bt = (StartSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof CustomTask) {\n+            CustomTask bt = (CustomTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861b8c017d2f4358b8340cfd562974084c577f48"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3NjEyMg==", "bodyText": "why the cache relies on the BpmnNode instance? This is an eclipse model object, not our internal model object. I would prefer, if possible, to always rely on our models, so we can populate the cache any time, whitout the need for having the eclipse models being parsed as well.\nWDYT?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r584676122", "createdAt": "2021-03-01T12:35:03Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-backend/src/main/java/org/kie/workbench/common/stunner/bpmn/backend/BaseDirectDiagramMarshaller.java", "diffHunk": "@@ -179,8 +183,8 @@ public Graph unmarshall(Metadata metadata, InputStream input) {\n \n             // perform actual conversion. Process is the root of the diagram\n             Result<BpmnNode> result = converterFactory.rootProcessConverter().convertProcess();\n-\n             BpmnNode diagramRoot = result.value();\n+            dataTypeCache.initCache(diagramRoot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861b8c017d2f4358b8340cfd562974084c577f48"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3NzA0NA==", "bodyText": "hey @inodeman , I still see the use of the gwt timer here. Could you please consider my comment above? Lemme know what you think", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r584677044", "createdAt": "2021-03-01T12:36:31Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/artifacts/DataObjectTypeWidget.java", "diffHunk": "@@ -161,6 +163,22 @@ public void setValue(DataObjectTypeValue value) {\n \n     @Override\n     public void setValue(DataObjectTypeValue value, boolean fireEvents) {\n+\n+        if (doneLoading) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ1Mzk3NQ=="}, "originalCommit": {"oid": "b8084619bf682bfa0454f1f1efe54f658fe023f8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDY3NzY0Mw==", "bodyText": "another gwt timer here?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r584677643", "createdAt": "2021-03-01T12:37:27Z", "author": {"login": "romartin"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/variablesEditor/VariablesEditorWidgetViewImpl.java", "diffHunk": "@@ -324,6 +348,24 @@ public void setTagsNotEnabled() {\n         checkTagsNotEnabled();\n     }\n \n+    @Override\n+    public void addDataType(String dataType, String oldType) {\n+        if (dataType != null && !dataType.isEmpty()) {\n+            doAddDataType(dataType, oldType);\n+        }\n+    }\n+\n+    protected void doAddDataType(String dataType, String oldType) {\n+        clientDataTypesService.add(dataType, oldType);\n+        new Timer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "861b8c017d2f4358b8340cfd562974084c577f48"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "861b8c017d2f4358b8340cfd562974084c577f48", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/861b8c017d2f4358b8340cfd562974084c577f48", "committedDate": "2021-02-25T21:19:14Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue when defining default data types in import"}, "afterCommit": {"oid": "42858bb2fa0220dd5340ce3b5c78f5662015984e", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/42858bb2fa0220dd5340ce3b5c78f5662015984e", "committedDate": "2021-03-02T21:19:38Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with reviews"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzODIwODcz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-603820873", "createdAt": "2021-03-04T08:25:38Z", "commit": {"oid": "42858bb2fa0220dd5340ce3b5c78f5662015984e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQwODoyNTozOFrOIwDF2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQwODoyNTozOFrOIwDF2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzI1MzIwOA==", "bodyText": "Can we also add test for adding data types from Process Variable dropdown, Global Variables dropdown, Task Data I/O dropdown? Or did I miss it?\nAlso the values you use here, I suggest changing them to something actually used - com.myspace.DataTypeOfTypes - since Test 1 and Test 2 can never be inputted into BPMN Editor - text box does not allow whitespaces.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r587253208", "createdAt": "2021-03-04T08:25:38Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/test/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/importsEditor/popup/editor/defaultImport/DefaultImportsEditorWidgetTest.java", "diffHunk": "@@ -193,4 +205,45 @@ public void addDataTypes() {\n         assertTrue(tested.dataTypes.containsValue(\"test1\"));\n         assertTrue(tested.dataTypes.containsValue(\"test2 [org.test]\"));\n     }\n+\n+    @Test\n+    public void testLoadServerTypes() {\n+\n+        final List<String> list = new ArrayList<>();\n+        list.add(\"Test 1\");\n+        list.add(\"Test 2\");\n+\n+        doReturn(PromiseMock.success(list))\n+                .when(dataTypeNamesService)\n+                .call(any());\n+\n+        tested.loadServerDataTypes();\n+\n+        assertEquals(\"Test 1\", tested.dataTypes.get(\"Test 1\"));\n+        assertEquals(\"Test 2\", tested.dataTypes.get(\"Test 2\"));\n+    }\n+\n+    @Test\n+    public void testAddDataTypesFromImports() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42858bb2fa0220dd5340ce3b5c78f5662015984e"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzOTE3ODk3", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-603917897", "createdAt": "2021-03-04T10:03:13Z", "commit": {"oid": "42858bb2fa0220dd5340ce3b5c78f5662015984e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQxMDowMzoxM1rOIwHsWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQxMDowMzoxM1rOIwHsWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMyODYwMg==", "bodyText": "One suggestion here, let me know if it is valid. I understand that if we add some new instance and we forget to add it here we won't be able to extract the data types from it.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    } else {\n          \n          \n            \n                        // log error that we tried to extract data type for a definition we did not know about?\n          \n          \n            \n                    }", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r587328602", "createdAt": "2021-03-04T10:03:13Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+/**\n+ * An Abstract Class to Handle Data Type Cache.\n+ */\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected static Set<String> allDataTypes = new HashSet<>();\n+\n+    public void extractFromItem(View view) {\n+        Object definition = view.getDefinition();\n+\n+        if (definition instanceof DataObject) {\n+            DataObject dataObject = (DataObject) view.getDefinition();\n+            allDataTypes.add(dataObject.getType().getValue().getType());\n+        } else if (definition instanceof AdHocSubprocess) {\n+            AdHocSubprocess mi = (AdHocSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof BPMNDiagramImpl) {\n+            BPMNDiagramImpl mi = (BPMNDiagramImpl) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EmbeddedSubprocess) {\n+            EmbeddedSubprocess mi = (EmbeddedSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof EventSubprocess) {\n+            EventSubprocess mi = (EventSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+        } else if (definition instanceof MultipleInstanceSubprocess) {\n+            MultipleInstanceSubprocess mi = (MultipleInstanceSubprocess) view.getDefinition();\n+            allDataTypes.addAll(getDataTypes(mi.getProcessData().getProcessVariables().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataInput().getValue()));\n+            allDataTypes.addAll(getDataTypes(mi.getExecutionSet().getMultipleInstanceDataOutput().getValue()));\n+        } else if (definition instanceof UserTask) {\n+            UserTask ut = (UserTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(ut.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof GenericServiceTask) {\n+            GenericServiceTask st = (GenericServiceTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(st.getExecutionSet().getAssignmentsinfo()));\n+        } else if (definition instanceof BusinessRuleTask) {\n+            BusinessRuleTask bt = (BusinessRuleTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndErrorEvent) {\n+            EndErrorEvent bt = (EndErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndEscalationEvent) {\n+            EndEscalationEvent bt = (EndEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndMessageEvent) {\n+            EndMessageEvent bt = (EndMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof EndSignalEvent) {\n+            EndSignalEvent bt = (EndSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateErrorEventCatching) {\n+            IntermediateErrorEventCatching bt = (IntermediateErrorEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEvent) {\n+            IntermediateEscalationEvent bt = (IntermediateEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateEscalationEventThrowing) {\n+            IntermediateEscalationEventThrowing bt = (IntermediateEscalationEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventCatching) {\n+            IntermediateMessageEventCatching bt = (IntermediateMessageEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateMessageEventThrowing) {\n+            IntermediateMessageEventThrowing bt = (IntermediateMessageEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventCatching) {\n+            IntermediateSignalEventCatching bt = (IntermediateSignalEventCatching) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof IntermediateSignalEventThrowing) {\n+            IntermediateSignalEventThrowing bt = (IntermediateSignalEventThrowing) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof ReusableSubprocess) {\n+            ReusableSubprocess bt = (ReusableSubprocess) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartErrorEvent) {\n+            StartErrorEvent bt = (StartErrorEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartEscalationEvent) {\n+            StartEscalationEvent bt = (StartEscalationEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartMessageEvent) {\n+            StartMessageEvent bt = (StartMessageEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof StartSignalEvent) {\n+            StartSignalEvent bt = (StartSignalEvent) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        } else if (definition instanceof CustomTask) {\n+            CustomTask bt = (CustomTask) view.getDefinition();\n+            allDataTypes.addAll(processAssignments(bt.getDataIOSet().getAssignmentsinfo()));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42858bb2fa0220dd5340ce3b5c78f5662015984e"}, "originalPosition": 151}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAzOTI0MjAy", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-603924202", "createdAt": "2021-03-04T10:10:00Z", "commit": {"oid": "42858bb2fa0220dd5340ce3b5c78f5662015984e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQxMDoxMDowMFrOIwH_Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0wNFQxMDoxMDowMFrOIwH_Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NzMzMzM5NQ==", "bodyText": "@inodeman I think we have missed some nodes here. For example IntermediateLinkEvent\nWhen you open a process with node that is missing in this if-else tree the data type won't be extracted.\nApologies for missing this in earlier review.\nImho the AbstractDataTypeCacheTest needs to be extended for every possible node we have in our BPMN editor that can set Data Types in some way.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r587333395", "createdAt": "2021-03-04T10:10:00Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-api/src/main/java/org/kie/workbench/common/stunner/bpmn/definition/property/diagram/AbstractDataTypeCache.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.stunner.bpmn.definition.property.diagram;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.kie.workbench.common.stunner.bpmn.definition.AdHocSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagram;\n+import org.kie.workbench.common.stunner.bpmn.definition.BPMNDiagramImpl;\n+import org.kie.workbench.common.stunner.bpmn.definition.BusinessRuleTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.DataObject;\n+import org.kie.workbench.common.stunner.bpmn.definition.EmbeddedSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EndSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.EventSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.GenericServiceTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateErrorEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateEscalationEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateMessageEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventCatching;\n+import org.kie.workbench.common.stunner.bpmn.definition.IntermediateSignalEventThrowing;\n+import org.kie.workbench.common.stunner.bpmn.definition.MultipleInstanceSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.ReusableSubprocess;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartErrorEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartEscalationEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartMessageEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.StartSignalEvent;\n+import org.kie.workbench.common.stunner.bpmn.definition.UserTask;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.dataio.AssignmentsInfo;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.diagram.imports.DefaultImport;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseAdvancedData;\n+import org.kie.workbench.common.stunner.bpmn.definition.property.variables.BaseProcessData;\n+import org.kie.workbench.common.stunner.bpmn.workitem.CustomTask;\n+import org.kie.workbench.common.stunner.core.graph.Edge;\n+import org.kie.workbench.common.stunner.core.graph.Node;\n+import org.kie.workbench.common.stunner.core.graph.content.view.View;\n+\n+/**\n+ * An Abstract Class to Handle Data Type Cache.\n+ */\n+public abstract class AbstractDataTypeCache {\n+\n+    public AbstractDataTypeCache() {\n+    }\n+\n+    protected static Set<String> allDataTypes = new HashSet<>();\n+\n+    public void extractFromItem(View view) {\n+        Object definition = view.getDefinition();\n+\n+        if (definition instanceof DataObject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42858bb2fa0220dd5340ce3b5c78f5662015984e"}, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42858bb2fa0220dd5340ce3b5c78f5662015984e", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/42858bb2fa0220dd5340ce3b5c78f5662015984e", "committedDate": "2021-03-02T21:19:38Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with reviews"}, "afterCommit": {"oid": "32f99015cd7c819c0bef4f004d8cbecb01ea2c1d", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/32f99015cd7c819c0bef4f004d8cbecb01ea2c1d", "committedDate": "2021-03-04T22:07:04Z", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Removed Timers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3176bda432f6cd53c56893c4ca8c6d559031a43", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d3176bda432f6cd53c56893c4ca8c6d559031a43", "committedDate": "2021-03-08T17:10:55Z", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Fixed Bug"}, "afterCommit": {"oid": "74415af35e58b6e0099c45411129264e42465256", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/74415af35e58b6e0099c45411129264e42465256", "committedDate": "2021-03-10T18:41:27Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74415af35e58b6e0099c45411129264e42465256", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/74415af35e58b6e0099c45411129264e42465256", "committedDate": "2021-03-10T18:41:27Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue"}, "afterCommit": {"oid": "d069d2f56f41caada27dc729f3562db8e1dec508", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d069d2f56f41caada27dc729f3562db8e1dec508", "committedDate": "2021-03-18T22:40:31Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Scope and made custom types editable again"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjE3MjgxNzk0", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-617281794", "createdAt": "2021-03-22T09:04:32Z", "commit": {"oid": "d069d2f56f41caada27dc729f3562db8e1dec508"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwOTowNDozMlrOI6zenw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yMlQwOTowNDozMlrOI6zenw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5ODUzMTc0Mw==", "bodyText": "this method does not seem to be covered in tests, same for other methods. See - https://sonarcloud.io/component_measures?id=org.kie.workbench%3Akie-wb-common&pullRequest=3347&metric=new_coverage&view=list", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#discussion_r598531743", "createdAt": "2021-03-22T09:04:32Z", "author": {"login": "domhanak"}, "path": "kie-wb-common-stunner/kie-wb-common-stunner-sets/kie-wb-common-stunner-bpmn/kie-wb-common-stunner-bpmn-client/src/main/java/org/kie/workbench/common/stunner/bpmn/client/forms/fields/assignmentsEditor/ActivityDataIOEditor.java", "diffHunk": "@@ -171,4 +173,9 @@ public void show() {\n     public ListBoxValues.ValueTester processVarTester() {\n         return userValue -> null;\n     }\n+\n+    @Override\n+    public void addDataType(String dataType, String oldType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d069d2f56f41caada27dc729f3562db8e1dec508"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e962f0a7c545240fd035072627fdb894eb8d881", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/5e962f0a7c545240fd035072627fdb894eb8d881", "committedDate": "2021-03-30T17:51:40Z", "message": "KOGITO-2528 : Reuse Data Types across the process\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process Added support for Data Objects\n\nKOGITO-2528 : Reuse Data Types across the process\n\nWIP Iterates through the Items and retrieves Data Assignment, next step is to save it into a Cache\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP: Just need to call Service to Save Cached Data Types\n\nWIP on Adding to Service\n\nWIP on Adding to Service\n\nFinished Kogito Implementation, need to do BC and StandAlone\n\nWIP\n\nFinished getting the results on Both Kogito and BC\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Removed Logging\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process / Adding Sonar Cloud Tests\n\nKOGITO-2528 : Reuse Data Types across the process (1/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2/3)\n\nKOGITO-2528 : Reuse Data Types across the process (2.5/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process Fixed Comments\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)\n\nKOGITO-2528 : Reuse Data Types across the process (3/3)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6259459a2e7abc25c868de707704dd8418e48946", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/6259459a2e7abc25c868de707704dd8418e48946", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process (3/3)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47996bc65c93f9ff85db66ac0d4668cbda6c13b3", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/47996bc65c93f9ff85db66ac0d4668cbda6c13b3", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process (3/3)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbe48ac78e238b63d15b3a5829e8e5665d1f6deb", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/dbe48ac78e238b63d15b3a5829e8e5665d1f6deb", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with FQN"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2bab9bb6af7e71ece7677ca1d087c3a819df0ee", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a2bab9bb6af7e71ece7677ca1d087c3a819df0ee", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with values not set after defining customValue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54be509aa16d313111bc6e077934719d98244b7d", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/54be509aa16d313111bc6e077934719d98244b7d", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue when defining default data types in import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a0688497115787dba614f821aebebc3ad5bc597", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/0a0688497115787dba614f821aebebc3ad5bc597", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Default Object Import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fa5b0499d756e386184b4630e1ad512e77ee39a", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/1fa5b0499d756e386184b4630e1ad512e77ee39a", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Disappearing Data Type (Custom Type)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb0f8a7c8ba8552e83edb87591f0e95a6c0a0814", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/fb0f8a7c8ba8552e83edb87591f0e95a6c0a0814", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with FQN on Imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5203ad0b0c8625c6a1a34f99d944d49292463562", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/5203ad0b0c8625c6a1a34f99d944d49292463562", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be898c01f48a2a07c90b8445cbd45d7c20d5041a", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/be898c01f48a2a07c90b8445cbd45d7c20d5041a", "committedDate": "2021-03-30T17:51:41Z", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Fixed Bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a22f49b3e8b44d1ab52cc2d0a4dcd9b7a88c6415", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a22f49b3e8b44d1ab52cc2d0a4dcd9b7a88c6415", "committedDate": "2021-03-30T17:51:41Z", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Removed Timers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83ff683d241f822b9cbcb297e4814b97334ee713", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/83ff683d241f822b9cbcb297e4814b97334ee713", "committedDate": "2021-03-30T17:51:41Z", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Removed Timers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "685471327c59561dd8776208545df44860968974", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/685471327c59561dd8776208545df44860968974", "committedDate": "2021-03-30T17:51:41Z", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Fixed Bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797dd570c10a20c9125565aaf4ff8af9366b8666", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/797dd570c10a20c9125565aaf4ff8af9366b8666", "committedDate": "2021-03-30T17:51:41Z", "message": "JBPM-9385 : Stunner - Text area for scripts is cropped/shifted - Fixed Bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db44516a537a0b95644cbaf9ab97e5d65ac8c616", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/db44516a537a0b95644cbaf9ab97e5d65ac8c616", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d069ddce5739f6a9fa1963b64a8519e40a9cca9d", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d069ddce5739f6a9fa1963b64a8519e40a9cca9d", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with unable to rename in VariablesEditor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5a456c84a0d2d4b39fe34e899cfe5fa2f827e7b", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a5a456c84a0d2d4b39fe34e899cfe5fa2f827e7b", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with DO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13c2f74acc35015973993adfb9c9e549a2fa50c9", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/13c2f74acc35015973993adfb9c9e549a2fa50c9", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Scope and made custom types editable again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2971404ea4f5ea290fb8e1227f5c83e7f0043d0e", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/2971404ea4f5ea290fb8e1227f5c83e7f0043d0e", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Scope and made custom types editable again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ce19538bd2b5e16d731badcca23d6d757a9bc04", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/6ce19538bd2b5e16d731badcca23d6d757a9bc04", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Scope and made custom types editable again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1060a4a6f5af15a0ab0099522dc433477609c9e", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a1060a4a6f5af15a0ab0099522dc433477609c9e", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fix issue with Scope, Edit issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56071d4189c0ce58b514464695370c5934cde081", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/56071d4189c0ce58b514464695370c5934cde081", "committedDate": "2021-03-30T17:51:41Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Added Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "321e18558a003eb2764c9e3713e9423683063f80", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/321e18558a003eb2764c9e3713e9423683063f80", "committedDate": "2021-03-30T17:51:42Z", "message": "KOGITO-2528 : Reuse Data Types across the process."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bbc2aa1115bfc0ac1435c803a5ec25f33aa9551", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8bbc2aa1115bfc0ac1435c803a5ec25f33aa9551", "committedDate": "2021-03-31T19:33:55Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fixed Issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b93698f0b17434cbc1f9171ab3a52322b4bfa73", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/5b93698f0b17434cbc1f9171ab3a52322b4bfa73", "committedDate": "2021-03-31T19:50:34Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fixed Issues"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13a2910e134f83f2b790eac05991b02316eb997e", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/13a2910e134f83f2b790eac05991b02316eb997e", "committedDate": "2021-03-24T16:41:16Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Added Tests"}, "afterCommit": {"oid": "5b93698f0b17434cbc1f9171ab3a52322b4bfa73", "author": {"user": {"login": "inodeman", "name": "Jaime Enriquez"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/5b93698f0b17434cbc1f9171ab3a52322b4bfa73", "committedDate": "2021-03-31T19:50:34Z", "message": "KOGITO-2528 : Reuse Data Types across the process. Fixed Issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQwNjk2OTM5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-640696939", "createdAt": "2021-04-21T07:10:06Z", "commit": {"oid": "5b93698f0b17434cbc1f9171ab3a52322b4bfa73"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQyMjA4ODQx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-642208841", "createdAt": "2021-04-22T13:35:43Z", "commit": {"oid": "5b93698f0b17434cbc1f9171ab3a52322b4bfa73"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjQyNTQ3NjE3", "url": "https://github.com/kiegroup/kie-wb-common/pull/3347#pullrequestreview-642547617", "createdAt": "2021-04-22T18:33:38Z", "commit": {"oid": "5b93698f0b17434cbc1f9171ab3a52322b4bfa73"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 449, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}