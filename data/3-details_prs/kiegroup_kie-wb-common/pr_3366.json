{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MjM0MzA3", "number": 3366, "title": "KOGITO-2761: PMML Support: Resource content API integration", "bodyText": "@karreiro @danielzhe @jomarko @jstastny-cz Can you please review and test it?\nThis PR scope is to enable PMML files inclusion using Included Models tab.\n\nEffect into dmn file, after adding the PMML file and saving:\n\nPlease note: This PR permits to link the files only. Using the file is still not possible, it will be managed in a future PR.\nThe number of models are temporary mocked to 0. Reason is that PMML marshaller integration will be managed in a different ticket.\nhttps://issues.redhat.com/browse/KOGITO-2761", "createdAt": "2020-07-24T11:26:34Z", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366", "merged": true, "mergeCommit": {"oid": "4853c3acfccdb59265e15a8c554b580a79eb6f87"}, "closed": true, "closedAt": "2020-08-06T13:13:51Z", "author": {"login": "yesamer"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcurfcuAH2gAyNDU2MjM0MzA3OjlhZDhkOWY4ZTFhNjE3N2UzYTRmMDIzMTI4NzMyYmU3NjQ5NDRiZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8NodnAFqTQ2MjQxMjMyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9ad8d9f8e1a6177e3a4f023128732be764944bd6", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/9ad8d9f8e1a6177e3a4f023128732be764944bd6", "committedDate": "2020-06-25T09:46:52Z", "message": "KOGITO-2337: State Control API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c79ba064a075487909af56a862d81f4e8e57f74d", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/c79ba064a075487909af56a862d81f4e8e57f74d", "committedDate": "2020-06-30T09:42:48Z", "message": "Merge remote-tracking branch 'origin/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3260de75e24d15f0911382a02b15c53893a735c0", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3260de75e24d15f0911382a02b15c53893a735c0", "committedDate": "2020-07-06T06:59:29Z", "message": "Merge remote-tracking branch 'origin/master'\n\n# Conflicts:\n#\tkie-wb-common-command-api/src/main/java/org/kie/workbench/common/command/client/registry/AbstractCommandRegistryManager.java\n#\tkie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/common/GuidedTourActions.java\n#\tkie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/tour/providers/PositionProviderFactory.java\n#\tkie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-runtime/src/test/java/org/kie/workbench/common/dmn/showcase/client/selenium/locator/XPathLocator.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d931c9c96e39b28c4b882a9ba06627359451ca8f", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/d931c9c96e39b28c4b882a9ba06627359451ca8f", "committedDate": "2020-07-10T06:36:29Z", "message": "Merge remote-tracking branch 'origin/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40eaf8c9baddb3056707876949e07e6b6a6a4ab", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/c40eaf8c9baddb3056707876949e07e6b6a6a4ab", "committedDate": "2020-07-16T10:15:44Z", "message": "Merge remote-tracking branch 'origin/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cece0b2ba7a9654ce91c1b03688990ce509ed3c5", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/cece0b2ba7a9654ce91c1b03688990ce509ed3c5", "committedDate": "2020-07-17T10:07:32Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35089211913a1fe6c4fb97e5df21ee16315665c1", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/35089211913a1fe6c4fb97e5df21ee16315665c1", "committedDate": "2020-07-17T10:07:50Z", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2761"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f486e970fa7df7b74b08fefa334cb201f24322b", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/4f486e970fa7df7b74b08fefa334cb201f24322b", "committedDate": "2020-07-20T15:51:06Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90304ff2a18649de9e81b8a1bc77298551573d80", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/90304ff2a18649de9e81b8a1bc77298551573d80", "committedDate": "2020-07-21T07:12:19Z", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2761"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd9160e1835f5271913507e8fb05e87d95f54fa7", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/dd9160e1835f5271913507e8fb05e87d95f54fa7", "committedDate": "2020-07-22T07:25:32Z", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2761"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a05f093e716d2d2f069118b5381bfca7dc20536", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8a05f093e716d2d2f069118b5381bfca7dc20536", "committedDate": "2020-07-22T09:54:05Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a59c91dd1eafea9741d62286cd07f92ce2084f8", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/0a59c91dd1eafea9741d62286cd07f92ce2084f8", "committedDate": "2020-07-22T13:40:45Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e37a8fb2d905441271fc4db7c23063abe2d24b5", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/0e37a8fb2d905441271fc4db7c23063abe2d24b5", "committedDate": "2020-07-22T14:51:46Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b48dbcce31ca6c48f41d8a5ae3a11b2422e78d", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/02b48dbcce31ca6c48f41d8a5ae3a11b2422e78d", "committedDate": "2020-07-23T09:47:17Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ea56440aff074b08578d08304e9e2b3ce76c0b6", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/4ea56440aff074b08578d08304e9e2b3ce76c0b6", "committedDate": "2020-07-23T09:49:02Z", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2761"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1350478a4c8a5925015e3f4425123e8a0151ae5", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/b1350478a4c8a5925015e3f4425123e8a0151ae5", "committedDate": "2020-07-23T15:30:00Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de5e31f4fd47cdb76e91e8a8c2bcb41813ba99e1", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/de5e31f4fd47cdb76e91e8a8c2bcb41813ba99e1", "committedDate": "2020-07-24T07:38:28Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c814c08aa0368e77880f8a8e86d8978dc945767", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/8c814c08aa0368e77880f8a8e86d8978dc945767", "committedDate": "2020-07-24T07:44:34Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "850c6aa2ee30e24c882a8190af87f0e175b25d4d", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/850c6aa2ee30e24c882a8190af87f0e175b25d4d", "committedDate": "2020-07-24T08:48:07Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c8f0e1b0998057306a4e57549e716e3e2c43f5", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/09c8f0e1b0998057306a4e57549e716e3e2c43f5", "committedDate": "2020-07-27T06:56:03Z", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2761"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e46d81b434f2eef5f9a4e834bef890b8833f696", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/9e46d81b434f2eef5f9a4e834bef890b8833f696", "committedDate": "2020-07-27T12:26:02Z", "message": "KOGITO-2761: Enabling loading of PMMLs files on Including model tab"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d1449db3c5a3c748c89461289ca112dec36e926", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/4d1449db3c5a3c748c89461289ca112dec36e926", "committedDate": "2020-07-27T12:26:25Z", "message": "KOGITO-2761: Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4198e457a6b6c72e13cefa80805109c22147879", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/e4198e457a6b6c72e13cefa80805109c22147879", "committedDate": "2020-07-27T13:35:14Z", "message": "KOGITO-2761: Tests + Minor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f4c04b62b90eded50c15d092e2232be69820d0c", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/5f4c04b62b90eded50c15d092e2232be69820d0c", "committedDate": "2020-07-27T15:29:08Z", "message": "KOGITO-2761: Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f0c7314231863c129c40cd7d025cbe086826bcb", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/7f0c7314231863c129c40cd7d025cbe086826bcb", "committedDate": "2020-07-28T07:56:59Z", "message": "KOGITO-2761: Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "972e479e14ae5621a6e9093f7044b2e8647c3589", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/972e479e14ae5621a6e9093f7044b2e8647c3589", "committedDate": "2020-07-28T08:41:14Z", "message": "KOGITO-2761: Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2be4ce4133efdf54e9fb90067fd7558fc29a439", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a2be4ce4133efdf54e9fb90067fd7558fc29a439", "committedDate": "2020-07-28T09:02:34Z", "message": "KOGITO-2761: Tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ff91b17b58a99ff25cc07a1092b960d9570aff", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/f3ff91b17b58a99ff25cc07a1092b960d9570aff", "committedDate": "2020-07-28T13:16:22Z", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2761"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bc7bb4bcf2f48a43d83bef1a2d023fe12e4db64", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/4bc7bb4bcf2f48a43d83bef1a2d023fe12e4db64", "committedDate": "2020-07-28T13:51:42Z", "message": "KOGITO-2761: Minor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd488ebbcbb9d4cd2fad9847a71c0a084d26af98", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/fd488ebbcbb9d4cd2fad9847a71c0a084d26af98", "committedDate": "2020-07-29T07:12:22Z", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2761"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97e9587d4412a590538c13ff3917b4dc6e27d218", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/97e9587d4412a590538c13ff3917b4dc6e27d218", "committedDate": "2020-07-30T07:46:54Z", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2761"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/620b16509a2bbcfa4f67edd3a5e631846185f6bb", "committedDate": "2020-07-30T07:47:14Z", "message": "KOGITO-2761: Minor changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzUzNDIx", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#pullrequestreview-458353421", "createdAt": "2020-07-30T12:31:09Z", "commit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjozMTowOVrOG5g7UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNDoxMToxOVrOG5kz9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MTQ4OA==", "bodyText": "shouldn't we use constants like: DMNImportTypes.PMML.getFileExtension() ?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r462961488", "createdAt": "2020-07-30T12:31:09Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -79,21 +77,26 @@\n     private final Promises promises;\n     private final DMNDiagramUtils diagramUtils;\n     private final DMNIncludedNodeFactory includedModelFactory;\n+    private final PMMLMarshallerService pmmlMarshallerService;\n \n     private static final Logger LOGGER = Logger.getLogger(DMNMarshallerImportsHelperKogitoImpl.class.getName());\n     private static final String DMN_FILES_PATTERN = \"*.dmn\";\n+    static final String PMML_FILES_PATTERN = \"*.pmml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4MDA1Ng==", "bodyText": "is there any reason not to wait for the async promise to resolve and return in a seemingly sync manner?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r462980056", "createdAt": "2020-07-30T13:04:00Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4MDYyNQ==", "bodyText": "in other words - are we trying to prevent such calls or just don't need them right now?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r462980625", "createdAt": "2020-07-30T13:04:56Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4MDA1Ng=="}, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4Mjc3OQ==", "bodyText": "for better readability I'd propose introducing a constant pairs like\nprivate static final String DMN_FILE_EXTENSION = \".\" + DMNImportTypes.DMN.getFileExtension();\nprivate static final String DMN_FILES_PATTERN = \"*\" + DMN_FILE_EXTENSION;\n\nand reuse those.", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r462982779", "createdAt": "2020-07-30T13:08:50Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyMDYzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void umarshall() {\n          \n          \n            \n                public void unmarshall() {", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r463020637", "createdAt": "2020-07-30T14:04:39Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerKogitoUnmarshallerTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.dmn12.JSITDefinitions;\n+import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.dmn12.JSITImport;\n+import org.kie.workbench.common.stunner.core.api.FactoryManager;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.mockito.Mock;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.promise.SyncPromises;\n+\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNMarshallerKogitoUnmarshallerTest {\n+\n+    @Mock\n+    private DMNMarshallerImportsHelperKogito dmnMarshallerImportsHelperKogitoMock;\n+    @Mock\n+    private FactoryManager factoryManagerMock;\n+    @Mock\n+    private Metadata metadataMock;\n+    @Mock\n+    private JSITDefinitions jsitDefinitionsMock;\n+    \n+    private DMNMarshallerKogitoUnmarshaller dmnMarshallerKogitoUnmarshaller;\n+    private List<JSITImport> imports;\n+    private Promises promises;\n+\n+    @Before\n+    public void setup() {\n+        promises = new SyncPromises();\n+        dmnMarshallerKogitoUnmarshaller = new DMNMarshallerKogitoUnmarshaller(factoryManagerMock,\n+                                                                              dmnMarshallerImportsHelperKogitoMock,\n+                                                                              promises);\n+        imports = new ArrayList<>();\n+        imports.add(mock(JSITImport.class));\n+        when(jsitDefinitionsMock.getImport()).thenReturn(imports);\n+        when(dmnMarshallerImportsHelperKogitoMock.getImportDefinitionsAsync(eq(metadataMock), eq(imports))).thenReturn(promises.resolve(Collections.emptyMap()));\n+        when(dmnMarshallerImportsHelperKogitoMock.getPMMLDocumentsAsync(eq(metadataMock), eq(imports))).thenReturn(promises.resolve(Collections.emptyMap()));\n+    }\n+\n+    @Test\n+    public void umarshall() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzAyNTE0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        int modelNumber = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n          \n          \n            \n                                        int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r463025143", "createdAt": "2020-07-30T14:11:19Z", "author": {"login": "jstastny-cz"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelNumber = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzcwNTQ3", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#pullrequestreview-458770547", "createdAt": "2020-07-30T21:30:44Z", "commit": {"oid": "620b16509a2bbcfa4f67edd3a5e631846185f6bb"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f1681a45ef195e87385acaf6104e78262903036", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3f1681a45ef195e87385acaf6104e78262903036", "committedDate": "2020-07-31T07:05:13Z", "message": "Update kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java\r\n\r\nChanges required during code review\n\nCo-authored-by: Jan Stastny <jstastny@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e54e03ab2fe3819690eb1a5aa751d3ffc7c9652", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/2e54e03ab2fe3819690eb1a5aa751d3ffc7c9652", "committedDate": "2020-07-31T07:06:03Z", "message": "Update kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerKogitoUnmarshallerTest.java\r\n\r\nChanges required during code review\n\nCo-authored-by: Jan Stastny <jstastny@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3add5271f636ea3a25c9b5535f5b621197a2f069", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/3add5271f636ea3a25c9b5535f5b621197a2f069", "committedDate": "2020-07-31T07:10:45Z", "message": "KOGITO-2761: Changes required during code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/a552e251cd4148f35f33af7f32a99fc80f67f6f0", "committedDate": "2020-07-31T07:10:59Z", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2761"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMDUxODAy", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#pullrequestreview-460051802", "createdAt": "2020-08-03T14:01:57Z", "commit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMTMzNjYy", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#pullrequestreview-460133662", "createdAt": "2020-08-03T15:41:24Z", "commit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNjYxMTc5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#pullrequestreview-461661179", "createdAt": "2020-08-05T13:26:06Z", "commit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzoyNjowNlrOG8JkgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzo1MDo0OFrOG8KlZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNDU0NQ==", "bodyText": "What 'Imports ' do we mean please? Is the message appropriate?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465724545", "createdAt": "2020-08-05T13:26:06Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getPMMLDocumentsAsync.\");\n+    }\n+\n+    @Override\n+    default List<JSITItemDefinition> getImportedItemDefinitionsByNamespace(final WorkspaceProject workspaceProject,\n+                                                                           final String modelName,\n+                                                                           final String namespace) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportedItemDefinitionsByNamespaceAsync.\");\n+    }\n+\n+    @Override\n+    default Path getDMNModelPath(final Metadata metadata,\n+                                 final String modelNamespace,\n+                                 final String modelName) {\n+        throw new UnsupportedOperationException(\"Imports are not supported in the kogito-based editors.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNDYxMw==", "bodyText": "What 'Imports ' do we mean please? Is the message appropriate?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465724613", "createdAt": "2020-08-05T13:26:11Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogito.java", "diffHunk": "@@ -44,4 +52,38 @@ void loadNodesFromModels(final List<DMNIncludedModel> includedModels,\n                              final ServiceCallback<List<DMNIncludedNode>> callback);\n \n     void loadModels(final ServiceCallback<List<IncludedModel>> callback);\n+\n+    @Override\n+    default Map<JSITImport, JSITDefinitions> getImportDefinitions(final Metadata metadata,\n+                                                                  final List<JSITImport> jsitImports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportDefinitionsAsync.\");\n+    }\n+\n+    @Override\n+    default Map<JSITImport, PMMLDocumentMetadata> getPMMLDocuments(final Metadata metadata,\n+                                                                   final List<JSITImport> imports) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getPMMLDocumentsAsync.\");\n+    }\n+\n+    @Override\n+    default List<JSITItemDefinition> getImportedItemDefinitionsByNamespace(final WorkspaceProject workspaceProject,\n+                                                                           final String modelName,\n+                                                                           final String namespace) {\n+        throw new UnsupportedOperationException(\"This implementation does not support sync calls. \" +\n+                \"Please, use getImportedItemDefinitionsByNamespaceAsync.\");\n+    }\n+\n+    @Override\n+    default Path getDMNModelPath(final Metadata metadata,\n+                                 final String modelNamespace,\n+                                 final String modelName) {\n+        throw new UnsupportedOperationException(\"Imports are not supported in the kogito-based editors.\");\n+    }\n+\n+    @Override\n+    default Optional<InputStream> loadPath(final Path path) {\n+        throw new UnsupportedOperationException(\"Imports are not supported in the kogito-based editors.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMjM3OQ==", "bodyText": "Maybe we could mention supported extensions in the message", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465732379", "createdAt": "2020-08-05T13:37:57Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n+                            models.add(new PMMLIncludedModel(fileName,\n+                                                            \"\",\n+                                                             fileName,\n+                                                             DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                             modelCount));\n+                            return promises.resolve();\n+                        });\n+                }\n+                return promises.reject(\"Error: \" + fileName + \" is an invalid file.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMjk1NQ==", "bodyText": "comparing with pmml, shouldn't we check diagramUtils.getDRGElements(diagram) is not null?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465732955", "createdAt": "2020-08-05T13:38:48Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n+                            models.add(new PMMLIncludedModel(fileName,\n+                                                            \"\",\n+                                                             fileName,\n+                                                             DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                             modelCount));\n+                            return promises.resolve();\n+                        });\n+                }\n+                return promises.reject(\"Error: \" + fileName + \" is an invalid file.\");\n+            }).then(v -> {\n+                callback.onSuccess(models);\n+                return promises.resolve();\n+            }));\n+    }\n \n-                        @Override\n-                        public void onError(final ClientRuntimeError error) {\n-                            LOGGER.log(Level.SEVERE, error.getMessage());\n-                        }\n-                    });\n-                    return promises.resolve();\n-                })).then(v -> {\n-                    callback.onSuccess(models);\n-                    return promises.resolve();\n-                }));\n+    private ServiceCallback<Diagram> getDMNDiagramCallback(final String fileName,\n+                                                           final List<IncludedModel> models,\n+                                                           final Promise.PromiseExecutorCallbackFn.ResolveCallbackFn<Object> success,\n+                                                           final Promise.PromiseExecutorCallbackFn.RejectCallbackFn failed) {\n+        return new ServiceCallback<Diagram>() {\n+\n+            @Override\n+            public void onSuccess(final Diagram diagram) {\n+                final String modelPackage = \"\";\n+                final String namespace = diagramUtils.getNamespace(diagram);\n+                final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n+                final int drgElementCount = diagramUtils.getDRGElements(diagram).size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczMzA5MA==", "bodyText": "simila question", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465733090", "createdAt": "2020-08-05T13:39:02Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImpl.java", "diffHunk": "@@ -183,38 +186,64 @@ public void onError(final ClientRuntimeError error) {\n \n     @Override\n     public void loadModels(final ServiceCallback<List<IncludedModel>> callback) {\n-        final List<IncludedModel> models = new Vector<>();\n-        contentService.getFilteredItems(DMN_FILES_PATTERN, ResourceListOptions.assetFolder())\n-                .then(items -> promises.all(Arrays.asList(items), file -> contentService.loadFile(file).then(fileContent -> {\n-                    diagramService.transform(fileContent, new ServiceCallback<Diagram>() {\n-                        @Override\n-                        public void onSuccess(final Diagram item) {\n-                            final String modelPackage = \"\";\n-                            final Diagram<Graph, Metadata> diagram = (Diagram<Graph, Metadata>) item;\n-                            final String namespace = diagramUtils.getNamespace(diagram);\n-                            final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n-                            final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n-                            final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();\n-                            final String filename = FileUtils.getFileName(file);\n-                            models.add(new DMNIncludedModel(filename,\n-                                                            modelPackage,\n-                                                            filename,\n-                                                            namespace,\n-                                                            importType,\n-                                                            drgElementCount,\n-                                                            itemDefinitionCount));\n-                        }\n+        final List<IncludedModel> models = new ArrayList<>();\n+        contentService.getFilteredItems(MODEL_FILES_PATTERN, ResourceListOptions.assetFolder())\n+            .then(items -> promises.all(Arrays.asList(items), file -> {\n+                final String fileName = FileUtils.getFileName(file);\n+                if (fileName.endsWith(\".\" + DMNImportTypes.DMN.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                            .then(fileContent -> promises.create((success, failed) ->\n+                                diagramService.transform(fileContent, getDMNDiagramCallback(fileName, models, success, failed))));\n+                }\n+                if (fileName.endsWith(\".\" + DMNImportTypes.PMML.getFileExtension())) {\n+                    return contentService.loadFile(file)\n+                        .then(fileContent -> pmmlMarshallerService.getDocumentMetadata(file, fileContent))\n+                        .then(pmmlDocumentMetadata -> {\n+                            int modelCount = pmmlDocumentMetadata.getModels() != null ? pmmlDocumentMetadata.getModels().size() : 0;\n+                            models.add(new PMMLIncludedModel(fileName,\n+                                                            \"\",\n+                                                             fileName,\n+                                                             DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                             modelCount));\n+                            return promises.resolve();\n+                        });\n+                }\n+                return promises.reject(\"Error: \" + fileName + \" is an invalid file.\");\n+            }).then(v -> {\n+                callback.onSuccess(models);\n+                return promises.resolve();\n+            }));\n+    }\n \n-                        @Override\n-                        public void onError(final ClientRuntimeError error) {\n-                            LOGGER.log(Level.SEVERE, error.getMessage());\n-                        }\n-                    });\n-                    return promises.resolve();\n-                })).then(v -> {\n-                    callback.onSuccess(models);\n-                    return promises.resolve();\n-                }));\n+    private ServiceCallback<Diagram> getDMNDiagramCallback(final String fileName,\n+                                                           final List<IncludedModel> models,\n+                                                           final Promise.PromiseExecutorCallbackFn.ResolveCallbackFn<Object> success,\n+                                                           final Promise.PromiseExecutorCallbackFn.RejectCallbackFn failed) {\n+        return new ServiceCallback<Diagram>() {\n+\n+            @Override\n+            public void onSuccess(final Diagram diagram) {\n+                final String modelPackage = \"\";\n+                final String namespace = diagramUtils.getNamespace(diagram);\n+                final String importType = DMNImportTypes.DMN.getDefaultNamespace();\n+                final int drgElementCount = diagramUtils.getDRGElements(diagram).size();\n+                final int itemDefinitionCount = diagramUtils.getDefinitions(diagram).getItemDefinition().size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNjUxNg==", "bodyText": "Do I understand that right we just allow user to pick the pmml model in selectbox but we do not parse the content?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465736516", "createdAt": "2020-08-05T13:44:00Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/main/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/services/PMMLMarshallerService.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.services;\n+\n+import java.util.Collections;\n+\n+import javax.enterprise.context.Dependent;\n+import javax.inject.Inject;\n+\n+import elemental2.promise.Promise;\n+import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.stunner.core.util.FileUtils;\n+import org.kie.workbench.common.stunner.core.util.StringUtils;\n+import org.uberfire.client.promise.Promises;\n+\n+/**\n+ * Scope of this bean is to provide an entry point to the PMML client marshaller available thought enveloper\n+ */\n+@Dependent\n+public class PMMLMarshallerService {\n+\n+    private Promises promises;\n+\n+    public PMMLMarshallerService() {\n+        // CDI\n+    }\n+\n+    @Inject\n+    public PMMLMarshallerService(final Promises promises) {\n+        this.promises = promises;\n+    }\n+\n+    public Promise<PMMLDocumentMetadata> getDocumentMetadata(final String pmmlFile, final String pmmlFileContent) {\n+        if (StringUtils.isEmpty(pmmlFile)) {\n+            return promises.reject(\"PMML fileName required to be marshalled is empty or null\");\n+        }\n+        if (StringUtils.isEmpty(pmmlFileContent)) {\n+            return promises.reject(\"PMML file \" + pmmlFile + \" content required to be marshalled is empty or null\");\n+        }\n+\n+        /* Here, a JSInterop call through enveloper should be used passing pmmlFileContent */\n+        String pmmlFileName = FileUtils.getFileName(pmmlFile);\n+        PMMLDocumentMetadata documentMetadata = new PMMLDocumentMetadata(pmmlFile,\n+                                                                         pmmlFileName,\n+                                                                         DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                                         Collections.emptyList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc0MTE1OA==", "bodyText": "Sorry, Promises are kind of new to me. I am not sure we are checking getPMMLDocumentsAsync returned empty map or throw an error. Could you please explain it to me?", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#discussion_r465741158", "createdAt": "2020-08-05T13:50:48Z", "author": {"login": "jomarko"}, "path": "kie-wb-common-dmn/kie-wb-common-dmn-webapp-kogito-common/src/test/java/org/kie/workbench/common/dmn/webapp/kogito/common/client/converters/DMNMarshallerImportsHelperKogitoImplTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.workbench.common.dmn.webapp.kogito.common.client.converters;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.gwtmockito.GwtMockitoTestRunner;\n+import elemental2.promise.Promise;\n+import org.appformer.kogito.bridge.client.resource.interop.ResourceListOptions;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.kie.workbench.common.dmn.api.editors.included.DMNImportTypes;\n+import org.kie.workbench.common.dmn.api.editors.included.IncludedModel;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLDocumentMetadata;\n+import org.kie.workbench.common.dmn.api.editors.included.PMMLIncludedModel;\n+import org.kie.workbench.common.dmn.api.graph.DMNDiagramUtils;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.services.DMNClientDiagramServiceImpl;\n+import org.kie.workbench.common.dmn.webapp.kogito.common.client.services.PMMLMarshallerService;\n+import org.kie.workbench.common.dmn.webapp.kogito.marshaller.js.model.dmn12.JSITImport;\n+import org.kie.workbench.common.kogito.webapp.base.client.workarounds.KogitoResourceContentService;\n+import org.kie.workbench.common.stunner.core.client.service.ServiceCallback;\n+import org.kie.workbench.common.stunner.core.diagram.Metadata;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.uberfire.client.promise.Promises;\n+import org.uberfire.promise.SyncPromises;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.kie.workbench.common.dmn.webapp.kogito.common.client.converters.DMNMarshallerImportsHelperKogitoImpl.MODEL_FILES_PATTERN;\n+import static org.kie.workbench.common.dmn.webapp.kogito.common.client.converters.DMNMarshallerImportsHelperKogitoImpl.PMML_FILES_PATTERN;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Matchers.isA;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(GwtMockitoTestRunner.class)\n+public class DMNMarshallerImportsHelperKogitoImplTest {\n+\n+    @Mock\n+    private DMNClientDiagramServiceImpl dmnClientDiagramServiceMock;\n+    @Mock\n+    private DMNDiagramUtils dmnDiagramUtilsMock;\n+    @Mock\n+    private DMNIncludedNodeFactory dmnIncludedNodeFactoryMock;\n+    @Mock\n+    private KogitoResourceContentService kogitoResourceContentServiceMock;\n+    @Mock\n+    private Metadata metadataMock;\n+    @Mock\n+    private PMMLMarshallerService pmmlMarshallerServiceMock;\n+    @Mock\n+    private ServiceCallback serviceCallbackMock;\n+    @Captor\n+    private ArgumentCaptor<List<IncludedModel>> modelsCapture;\n+\n+    private static final String DMN_FILE = \"test-dmn.dmn\";\n+    private static final String DMN_PATH = \"dmntest/\" + DMN_FILE;\n+    private static final String DMN_CONTENT = \"<xml> xml DMN content </xml>\";\n+\n+    private static final String PMML_FILE = \"test-pmml.pmml\";\n+    private static final String PMML_PATH = \"dmnpmml/\" + PMML_FILE;\n+    private static final String PMML_CONTENT = \"<xml> xml PMML content </xml>\";\n+\n+    private static final String TEXT_FILE = \"test-file.txt\";\n+    private static final String TEXT_PATH = \"invalidfile/\" + TEXT_FILE;\n+\n+    private DMNMarshallerImportsHelperKogitoImpl dmnMarshallerImportsHelperKogitoImpl;\n+    private Promises promises;\n+\n+    @Before\n+    public void setup() {\n+        promises = new SyncPromises();\n+        dmnMarshallerImportsHelperKogitoImpl = new DMNMarshallerImportsHelperKogitoImpl(kogitoResourceContentServiceMock,\n+                                                                                        dmnClientDiagramServiceMock,\n+                                                                                        promises,\n+                                                                                        dmnDiagramUtilsMock,\n+                                                                                        dmnIncludedNodeFactoryMock,\n+                                                                                        pmmlMarshallerServiceMock);\n+\n+    }\n+\n+    @Test\n+    public void loadModelsDMNFile() {\n+        when(kogitoResourceContentServiceMock.getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class))).thenReturn(promises.resolve(new String[]{DMN_PATH}));\n+        when(kogitoResourceContentServiceMock.loadFile(DMN_PATH)).thenReturn(promises.resolve(DMN_CONTENT));\n+        dmnMarshallerImportsHelperKogitoImpl.loadModels(serviceCallbackMock);\n+        verify(kogitoResourceContentServiceMock, times(1)).getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class));\n+        verify(kogitoResourceContentServiceMock, times(1)).loadFile(eq(DMN_PATH));\n+        verify(dmnClientDiagramServiceMock, times(1)).transform(eq(DMN_CONTENT), isA(ServiceCallback.class));\n+    }\n+\n+    @Test\n+    public void loadModelsPMMLFile() {\n+        when(kogitoResourceContentServiceMock.getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class))).thenReturn(promises.resolve(new String[]{PMML_PATH}));\n+        when(kogitoResourceContentServiceMock.loadFile(PMML_PATH)).thenReturn(promises.resolve(PMML_CONTENT));\n+        when(pmmlMarshallerServiceMock.getDocumentMetadata(PMML_PATH, PMML_CONTENT)).thenReturn(promises.resolve(new PMMLDocumentMetadata(PMML_PATH,\n+                                                                                                                         PMML_FILE,\n+                                                                                                                         DMNImportTypes.PMML.getDefaultNamespace(),\n+                                                                                                                         Collections.emptyList())));\n+        dmnMarshallerImportsHelperKogitoImpl.loadModels(serviceCallbackMock);\n+        verify(kogitoResourceContentServiceMock, times(1)).getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class));\n+        verify(kogitoResourceContentServiceMock, times(1)).loadFile(eq(PMML_PATH));\n+        verify(pmmlMarshallerServiceMock, times(1)).getDocumentMetadata(eq(PMML_PATH), eq(PMML_CONTENT));\n+        verify(serviceCallbackMock, times(1)).onSuccess(modelsCapture.capture());\n+        assertEquals(1, modelsCapture.getValue().size());\n+        assertEquals(PMML_FILE, modelsCapture.getValue().get(0).getPath());\n+        assertEquals(PMML_FILE, modelsCapture.getValue().get(0).getModelName());\n+        assertEquals(DMNImportTypes.PMML.getDefaultNamespace(), modelsCapture.getValue().get(0).getImportType());\n+        assertEquals(0, ((PMMLIncludedModel) modelsCapture.getValue().get(0)).getModelCount().intValue());\n+    }\n+\n+    @Test\n+    public void loadModelsInvalidFile() {\n+        when(kogitoResourceContentServiceMock.getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class))).thenReturn(promises.resolve(new String[]{TEXT_PATH}));\n+        dmnMarshallerImportsHelperKogitoImpl.loadModels(serviceCallbackMock);\n+        verify(kogitoResourceContentServiceMock, times(1)).getFilteredItems(eq(MODEL_FILES_PATTERN), isA(ResourceListOptions.class));\n+        verify(kogitoResourceContentServiceMock, never()).loadFile(any());\n+        verify(pmmlMarshallerServiceMock, never()).getDocumentMetadata(any(), any());\n+        verify(dmnClientDiagramServiceMock, never()).transform(any(), any());\n+    }\n+\n+    @Test\n+    public void getPMMLDocumentsAsync_EmptyImports() {\n+        Promise<Map<JSITImport, PMMLDocumentMetadata>> returnPromise = dmnMarshallerImportsHelperKogitoImpl.getPMMLDocumentsAsync(metadataMock, Collections.emptyList());\n+        returnPromise.then(p0 -> {\n+            assertEquals(0, p0.size());\n+            return promises.resolve();\n+        }).catch_(i -> {\n+            Assert.fail(\"Promise should've been resolved!\");\n+            return promises.resolve();\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "originalPosition": 155}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzAxNDQ5", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#pullrequestreview-461701449", "createdAt": "2020-08-05T14:09:32Z", "commit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMjA0Njcz", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#pullrequestreview-462204673", "createdAt": "2020-08-06T05:50:16Z", "commit": {"oid": "a552e251cd4148f35f33af7f32a99fc80f67f6f0"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "890ace2ac1712c64d70a8cd689cdd1dd93a969cf", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/890ace2ac1712c64d70a8cd689cdd1dd93a969cf", "committedDate": "2020-08-06T07:45:51Z", "message": "Merge remote-tracking branch 'origin/master' into KOGITO-2761"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c7682f6594397d01ebe1e59b939ecea79b77034", "author": {"user": {"login": "yesamer", "name": "Yeser Amer"}}, "url": "https://github.com/kiegroup/kie-wb-common/commit/2c7682f6594397d01ebe1e59b939ecea79b77034", "committedDate": "2020-08-06T07:46:23Z", "message": "KOGITO-2761: Changes required during CR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNDEyMzI4", "url": "https://github.com/kiegroup/kie-wb-common/pull/3366#pullrequestreview-462412328", "createdAt": "2020-08-06T10:54:31Z", "commit": {"oid": "2c7682f6594397d01ebe1e59b939ecea79b77034"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 480, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}