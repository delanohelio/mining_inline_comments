{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MTY0NTEz", "number": 121, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxMjowN1rODmLdWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozNjozOVrODmwu4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzYwMjE2OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxMjowN1rOFzcrGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0NjoxMlrOFzrrmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MTQ4MQ==", "bodyText": "@Christopher-Chianelli Please use the latest Final version, so 7.33.0.Final. You can look that up here:\nhttps://mvnrepository.com/artifact/org.optaplanner/optaplanner-core\nThere are a few bigger discussions here - such as kogito vs optaplanner versioning - as well as kogito-examples vs quarkus-quickstarts (that doesn't use SNAPSHOTs at all on master to make it easy for users to play with it) - but those are out of scope for this PR.", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389491481", "createdAt": "2020-03-09T07:12:07Z", "author": {"login": "ge0ffrey"}, "path": "jbpm-optaplanner-springboot-example/pom.xml", "diffHunk": "@@ -0,0 +1,171 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.kie.kogito.examples</groupId>\n+  <artifactId>jbpm-optaplanner-springboot-example</artifactId>\n+\n+  <name>Kogito Example :: jBPM, OptaPlanner and SpringBoot</name>\n+  <description>Flight assignment process and optimization</description>\n+\n+  <properties>\n+    <springboot.version>2.2.2.RELEASE</springboot.version>\n+    <version.org.optaplanner>7.33.0-SNAPSHOT</version.org.optaplanner>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NTA5Ng==", "bodyText": "AFAIK Kogito has a reference to the latest droolsjbpm. We should use that, instead of hard-coding a version.", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389555096", "createdAt": "2020-03-09T09:50:35Z", "author": {"login": "triceo"}, "path": "jbpm-optaplanner-springboot-example/pom.xml", "diffHunk": "@@ -0,0 +1,171 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.kie.kogito.examples</groupId>\n+  <artifactId>jbpm-optaplanner-springboot-example</artifactId>\n+\n+  <name>Kogito Example :: jBPM, OptaPlanner and SpringBoot</name>\n+  <description>Flight assignment process and optimization</description>\n+\n+  <properties>\n+    <springboot.version>2.2.2.RELEASE</springboot.version>\n+    <version.org.optaplanner>7.33.0-SNAPSHOT</version.org.optaplanner>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MTQ4MQ=="}, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNzM2OQ==", "bodyText": "@triceo That property was removed from the kogito-examples parent pom recently; I was using it, and then discovered it was removed after I merge changes from master.", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389737369", "createdAt": "2020-03-09T14:46:12Z", "author": {"login": "Christopher-Chianelli"}, "path": "jbpm-optaplanner-springboot-example/pom.xml", "diffHunk": "@@ -0,0 +1,171 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.kie.kogito.examples</groupId>\n+  <artifactId>jbpm-optaplanner-springboot-example</artifactId>\n+\n+  <name>Kogito Example :: jBPM, OptaPlanner and SpringBoot</name>\n+  <description>Flight assignment process and optimization</description>\n+\n+  <properties>\n+    <springboot.version>2.2.2.RELEASE</springboot.version>\n+    <version.org.optaplanner>7.33.0-SNAPSHOT</version.org.optaplanner>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MTQ4MQ=="}, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzYwODg5OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxNjoxMlrOFzcvOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxNjoxMlrOFzcvOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MjUzNg==", "bodyText": "JavaEE is being replaced by JakartaEE. I'd expect this dependency to be replaced too. Also, it's probably not going to be a \"aggregate dependency\" but specifically the parts we need (for example only JPA, or only JAXB or only JPA and JAXB, etc).\nCan be done as a separate PR later.", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389492536", "createdAt": "2020-03-09T07:16:12Z", "author": {"login": "ge0ffrey"}, "path": "jbpm-optaplanner-springboot-example/pom.xml", "diffHunk": "@@ -0,0 +1,171 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.kie.kogito.examples</groupId>\n+  <artifactId>jbpm-optaplanner-springboot-example</artifactId>\n+\n+  <name>Kogito Example :: jBPM, OptaPlanner and SpringBoot</name>\n+  <description>Flight assignment process and optimization</description>\n+\n+  <properties>\n+    <springboot.version>2.2.2.RELEASE</springboot.version>\n+    <version.org.optaplanner>7.33.0-SNAPSHOT</version.org.optaplanner>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-web</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-devtools</artifactId>\n+      <optional>true</optional>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.optaplanner</groupId>\n+      <artifactId>optaplanner-spring-boot-starter</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>javax</groupId>\n+      <artifactId>javaee-api</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <!-- Testing -->\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+\n+    <!-- JavaScript libraries for frontend -->\n+    <dependency>\n+      <groupId>org.webjars</groupId>\n+      <artifactId>webjars-locator</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.webjars</groupId>\n+      <artifactId>bootstrap</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.webjars</groupId>\n+      <artifactId>font-awesome</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.webjars</groupId>\n+      <artifactId>momentjs</artifactId>\n+      <scope>runtime</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-dependencies</artifactId>\n+        <version>${springboot.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>javax</groupId>\n+        <artifactId>javaee-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzYxNDAxOnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxODo1MFrOFzcyMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoxODo1MFrOFzcyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5MzI5OA==", "bodyText": "@Christopher-Chianelli Is this the workaround for the lack of a solveAndListen method that has both a newBestSolution and finalBestSolution consumer?\nIn that case, add \"// TODO workaround for \"\n(Create an issue if it doesn't exist yet)", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389493298", "createdAt": "2020-03-09T07:18:50Z", "author": {"login": "ge0ffrey"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.kie.kogito.examples.service;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.kie.kogito.examples.domain.Flight;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.impl.Sig;\n+import org.optaplanner.core.api.solver.SolverJob;\n+import org.optaplanner.core.api.solver.SolverManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class FlightSeatingSolveService {\n+\n+    @Autowired\n+    private SolverManager<Flight, String> solverManager;\n+\n+    @Autowired\n+    @Qualifier(\"flights\")\n+    Process<?> process;\n+\n+    public void assignSeats(String id, Flight problem) {\n+        SolverJob<Flight, String> solverJob = solverManager.solveAndListen(id, (problemId) -> problem, (bestSolution) -> {\n+            // Can also use Kafka messages for this; probably would be a good showcase of Optaplanner + Kafka\n+            process.instances().findById(id).ifPresent(pi -> {\n+                pi.send(Sig.of(\"newSolution\", bestSolution));\n+            });\n+        });\n+\n+        // Wait for solving to finish in new thread (so we don't block the return)\n+        new Thread(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMzYxOTM4OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/solver/FlightSeatingConstraintProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyMTozNlrOFzc1VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNzoyMTozNlrOFzc1VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ5NDEwMQ==", "bodyText": "Almost nobody uses Java literal 2d. Use 2.0 instead.\nPS: For longs, put the L in capital (to avoid java puzzlers, see Josh Bloch's effictive java etc).", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389494101", "createdAt": "2020-03-09T07:21:36Z", "author": {"login": "ge0ffrey"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/solver/FlightSeatingConstraintProvider.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.kie.kogito.examples.solver;\n+\n+import org.kie.kogito.examples.domain.FlightInfo;\n+import org.kie.kogito.examples.domain.Passenger;\n+import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScore;\n+import org.optaplanner.core.api.score.stream.Constraint;\n+import org.optaplanner.core.api.score.stream.ConstraintCollectors;\n+import org.optaplanner.core.api.score.stream.ConstraintFactory;\n+import org.optaplanner.core.api.score.stream.ConstraintProvider;\n+\n+import static org.optaplanner.core.api.score.stream.Joiners.equal;\n+\n+import java.awt.geom.Point2D;\n+\n+public class FlightSeatingConstraintProvider implements ConstraintProvider {\n+\n+    @Override\n+    public Constraint[] defineConstraints(ConstraintFactory factory) {\n+        return new Constraint[] {\n+                seatConflict(factory),\n+                emergencyExitRow(factory),\n+                seatTypePreference(factory),\n+                planeBalance(factory)\n+        };\n+    }\n+\n+    private Constraint seatConflict(ConstraintFactory factory) {\n+        return factory\n+                .fromUniquePair(Passenger.class, equal(Passenger::getSeat))\n+                .penalize(\"Seat conflict\", HardSoftScore.ONE_HARD);\n+    }\n+\n+    private Constraint emergencyExitRow(ConstraintFactory factory) {\n+        return factory\n+                .from(Passenger.class)\n+                .filter(passenger -> passenger.getSeat().isEmergencyExitRow()\n+                        && !passenger.isEmergencyExitRowCapable())\n+                .penalize(\"Emergency exit row has incapable passenger\", HardSoftScore.ONE_HARD);\n+    }\n+\n+    private Constraint seatTypePreference(ConstraintFactory factory) {\n+        return factory\n+                .from(Passenger.class)\n+                .filter(passenger -> passenger.getSeat().getSeatType().violatesPreference(\n+                        passenger.getSeatTypePreference()))\n+                .penalize(\"Seat type preference\", HardSoftScore.ONE_SOFT);\n+    }\n+\n+    private Constraint planeBalance(ConstraintFactory factory) {\n+        return factory.from(Passenger.class).groupBy(ConstraintCollectors.sum(p -> p.getSeat().getColumn()))\n+                .join(factory.from(Passenger.class).groupBy(ConstraintCollectors.sum(p -> p.getSeat().getRow())))\n+                .join(factory.from(Passenger.class).groupBy(ConstraintCollectors.count()))\n+                .join(FlightInfo.class)\n+                .penalize(\"Plane Balance\", HardSoftScore.ONE_SOFT, (totalX, totalY, passengerCount, flightInfo) -> {\n+                    double localTotalX = totalX - passengerCount * ((flightInfo.getSeatColumnSize() / 2d) - 0.5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDAyMDA2OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Passenger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1MTo0MVrOFzgmBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNToxMTowMVrOFzsu9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NTcxOA==", "bodyText": "AFAIK, paid is the proper English past tense for pay.", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389555718", "createdAt": "2020-03-09T09:51:41Z", "author": {"login": "triceo"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Passenger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.kie.kogito.examples.domain;\n+\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.entity.PlanningPin;\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+import org.optaplanner.core.api.domain.variable.PlanningVariable;\n+\n+@PlanningEntity\n+public class Passenger {\n+\n+    @PlanningId\n+    private Long id;\n+\n+    private String name;\n+    // Sometimes null\n+    private SeatType seatTypePreference;\n+    // At least 15 years old, sufficient mobility, strength and dexterity to assist in an evacuation.\n+    private boolean emergencyExitRowCapable;\n+    @PlanningPin\n+    private boolean payedForSeat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1NDYxMw==", "bodyText": "Yes, despite payed also being an English past tense for pay (but only for ships!)", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389754613", "createdAt": "2020-03-09T15:11:01Z", "author": {"login": "Christopher-Chianelli"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Passenger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package org.kie.kogito.examples.domain;\n+\n+import org.optaplanner.core.api.domain.entity.PlanningEntity;\n+import org.optaplanner.core.api.domain.entity.PlanningPin;\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+import org.optaplanner.core.api.domain.variable.PlanningVariable;\n+\n+@PlanningEntity\n+public class Passenger {\n+\n+    @PlanningId\n+    private Long id;\n+\n+    private String name;\n+    // Sometimes null\n+    private SeatType seatTypePreference;\n+    // At least 15 years old, sufficient mobility, strength and dexterity to assist in an evacuation.\n+    private boolean emergencyExitRowCapable;\n+    @PlanningPin\n+    private boolean payedForSeat;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1NTcxOA=="}, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDAzOTU5OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1NzoyMFrOFzgxpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDoyMjo0NFrOFzhkdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1ODY5Mw==", "bodyText": "No this in this case?\nAlso, it took me a while to figure out what Character.toString((char) ('A' + column)); actually does. Either replace with a switch or at least add a comment explaining that it assigns seat A-F based on the column number.", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389558693", "createdAt": "2020-03-09T09:57:20Z", "author": {"login": "triceo"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.kie.kogito.examples.domain;\n+\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+\n+public class Seat {\n+\n+    @PlanningId\n+    private String name;\n+    private int row;\n+    private int column;\n+    private SeatType seatType;\n+    private boolean emergencyExitRow;\n+\n+    public Seat() {\n+    }\n+\n+    public Seat(int row, int column, SeatType seatType, boolean emergencyExitRow) {\n+        this.row = row;\n+        this.column = column;\n+        name = (row + 1) + Character.toString((char) ('A' + column));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU3MTcwMQ==", "bodyText": "+1 for the comment\n-1 for the switch as it can have up to 26 cases :)", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389571701", "createdAt": "2020-03-09T10:22:44Z", "author": {"login": "ge0ffrey"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.kie.kogito.examples.domain;\n+\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+\n+public class Seat {\n+\n+    @PlanningId\n+    private String name;\n+    private int row;\n+    private int column;\n+    private SeatType seatType;\n+    private boolean emergencyExitRow;\n+\n+    public Seat() {\n+    }\n+\n+    public Seat(int row, int column, SeatType seatType, boolean emergencyExitRow) {\n+        this.row = row;\n+        this.column = column;\n+        name = (row + 1) + Character.toString((char) ('A' + column));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1ODY5Mw=="}, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDA0NjQxOnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1OTowN1rOFzg1lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1OTowN1rOFzg1lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1OTcwMg==", "bodyText": "I'd add equals() and hashCode() here. Since this class is immutable, its instances should be considered equal where possible.", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389559702", "createdAt": "2020-03-09T09:59:07Z", "author": {"login": "triceo"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.kie.kogito.examples.domain;\n+\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+\n+public class Seat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDA0NzQ1OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1OToyNVrOFzg2Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwOTo1OToyNVrOFzg2Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU1OTg3MQ==", "bodyText": "Since this class is immutable, all of these could be final.", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389559871", "createdAt": "2020-03-09T09:59:25Z", "author": {"login": "triceo"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/domain/Seat.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.kie.kogito.examples.domain;\n+\n+import org.optaplanner.core.api.domain.lookup.PlanningId;\n+\n+public class Seat {\n+\n+    @PlanningId\n+    private String name;\n+    private int row;\n+    private int column;\n+    private SeatType seatType;\n+    private boolean emergencyExitRow;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDI0MDU0OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDo1ODoyNlrOFzip_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMDo1ODoyNlrOFzip_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU4OTUwMQ==", "bodyText": "small typo in path => 2 /", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389589501", "createdAt": "2020-03-09T10:58:26Z", "author": {"login": "radtriste"}, "path": "jbpm-optaplanner-springboot-example/README.md", "diffHunk": "@@ -0,0 +1,323 @@\n+# jBPM + OptaPlanner + SpringBoot example\n+\n+## Description\n+\n+A simple process service for an airline scheduling flights and optimizing seat\n+assignments using OptaPlanner.\n+\n+It uses an event-based subprocess to simulate\n+passengers buying tickets, who the airline security officer must approve via\n+a user task before the passenger is allowed to get a ticket.\n+\n+The main process waits for a user task to be completed to finalize the passenger list.\n+It then invokes a custom Java service `FlightSeatingSolveService.assignSeats`\n+to optimize the flight's seats following the rules in `FlightSeatingConstraintProvider`\n+using OptaPlanner's, followed by a user task to finalize seat assignments.\n+\n+Based on these two processes (defined using BPMN 2.0 format), the custom data object\n+and custom Java service, a new service is generated that exposes REST operations to\n+create new flights (following the steps as defined in the main and sub-process)\n+and add passengers to flights.\n+\n+An UI is included in this example, which can be accessed on `localhost:8080`\n+when the application is running.\n+\n+## Installing and Running\n+\n+### Prerequisites\n+\n+You will need:\n+  - Java 1.8.0+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.5.4+ installed\n+\n+## Installing and Running\n+\n+```\n+mvn clean package spring-boot:run    \n+```\n+\n+## Swagger documentation\n+\n+You can take a look at the [swagger definition](http://localhost:8080/docs/swagger.json) - automatically generated and included in this service - to determine all available operations exposed by this service.  For easy readability you can visualize the swagger definition file using a swagger UI like for example available [here](https://editor.swagger.io). In addition, various clients to interact with this service can be easily generated using this swagger definition.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can access the UI at `localhost:8080` or use\n+the following examples to interact with the service.\n+\n+### POST  /rest/flights\n+\n+Allows to create a new flight with the given data:\n+\n+```sh\n+curl -d '{ \"params\": { \"origin\" : \"JFK\", \"destination\": \"SFO\", \"departureDateTime\": \"2020-01-01T12:00\", \"seatRowSize\": 8, \"seatColumnSize\": 6 } }' -H \"Content-Type: application/json\" -X POST http://localhost:8080/rest/flights\n+```\n+or on windows\n+\n+```sh\n+curl -d \"{\\\"params\\\": { \\\"origin\\\" : \\\"JFK\\\", \\\"destination\\\": \\\"SFO\\\", \\\"departureDateTime\\\": \\\"2020-01-01T12:00\\\", \\\"seatRowSize\\\": 8, \\\"seatColumnSize\\\": 6 }}\" -H \"Content-Type: application/json\" -X POST http://localhost:8080/rest/flights\n+```\n+\n+As response the created flight is returned (in field \"flight\").\n+Example response:\n+```json\n+{\n+  \"id\":\"7f24831f-9dc6-44c7-8dec-9b4a696506b5\",\n+  \"flight\":{\n+    \"flightInfo\":{\n+      \"origin\":\"YYZ\",\n+      \"destination\":\"KRND\",\n+      \"departureDateTime\":{...},\n+      \"seatRowSize\":1,\n+      \"seatColumnSize\":1\n+      },\n+    \"seatList\":[{\"name\":\"1A\",\"row\":0,\"column\":0,\"seatType\":\"WINDOW\",\"emergencyExitRow\":false}],\n+    \"passengerList\":[],\n+    \"score\":null,\n+    \"origin\":\"YYZ\",\n+    \"seatColumnSize\":6,\n+    \"seatRowSize\":4,\n+    \"destination\":\"KRND\",\n+    \"departureDateTime\":{...}\n+    },\n+  \"isSolving\":true,\n+  \"processId\":\"7f24831f-9dc6-44c7-8dec-9b4a696506b5\",\n+  \"params\":{\n+    \"origin\":\"YYZ\",\n+    \"destination\":\"KRND\",\n+    \"departureDateTime\":\"2020-03-06T20:19:49.240\",\n+    \"seatRowSize\":4,\n+    \"seatColumnSize\":6\n+  },\n+  \"isPassengerListFinalized\":false\n+}\n+```\n+\n+### GET  /rest/flights\n+\n+Returns list of flights currently being scheduled:\n+\n+```sh\n+curl -X GET http://localhost:8080/rest/flights\n+```\n+\n+As response an array of flights is returned.\n+\n+### GET  /rest/flight/{id}\n+\n+Returns flight with given id (if being scheduled):\n+\n+```sh\n+curl -X GET http://localhost:8080/rest/flights/62f1c985-d31c-4ead-9906-2fe8d05937f0\n+```\n+\n+As response a single flight is returned if found, otherwise no content (204) is returned.\n+\n+### DELETE /rest/flights/{id}\n+\n+Cancels flight with given id\n+\n+```sh\n+curl -X DELETE http://localhost:8080/rest/flights/62f1c985-d31c-4ead-9906-2fe8d05937f0\n+```\n+\n+### GET /rest/flights/{id}/tasks\n+\n+Get user tasks that currently require action for a flight.\n+\n+```sh\n+curl -X GET http://localhost:8080/rest/flights/62f1c985-d31c-4ead-9906-2fe8d05937f0/tasks\n+```\n+\n+Example response:\n+```json\n+{\n+  \"66c11e3e-c211-4cee-9a07-848b5e861bc5\": \"finalizePassengerList\",\n+  \"a2c11e3e-c211-4cee-9a07-848b5e861bc5\": \"finalizeSeatAssignment\",\n+  \"f4c11e3e-c211-4cee-9a07-848b5e861bc5\": \"approveDenyPassenger\"\n+}\n+```\n+\n+### POST /rest//flights/{id}/newPassengerRequest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDI0Nzk1OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/README.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMTowMTowMlrOFziuyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMTowMTowMlrOFziuyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTU5MDcyOA==", "bodyText": "In all curl commands with an id, I would avoid putting an example id.\nInstead put a placeholder and tell the user to replace this placeholder.", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r389590728", "createdAt": "2020-03-09T11:01:02Z", "author": {"login": "radtriste"}, "path": "jbpm-optaplanner-springboot-example/README.md", "diffHunk": "@@ -0,0 +1,323 @@\n+# jBPM + OptaPlanner + SpringBoot example\n+\n+## Description\n+\n+A simple process service for an airline scheduling flights and optimizing seat\n+assignments using OptaPlanner.\n+\n+It uses an event-based subprocess to simulate\n+passengers buying tickets, who the airline security officer must approve via\n+a user task before the passenger is allowed to get a ticket.\n+\n+The main process waits for a user task to be completed to finalize the passenger list.\n+It then invokes a custom Java service `FlightSeatingSolveService.assignSeats`\n+to optimize the flight's seats following the rules in `FlightSeatingConstraintProvider`\n+using OptaPlanner's, followed by a user task to finalize seat assignments.\n+\n+Based on these two processes (defined using BPMN 2.0 format), the custom data object\n+and custom Java service, a new service is generated that exposes REST operations to\n+create new flights (following the steps as defined in the main and sub-process)\n+and add passengers to flights.\n+\n+An UI is included in this example, which can be accessed on `localhost:8080`\n+when the application is running.\n+\n+## Installing and Running\n+\n+### Prerequisites\n+\n+You will need:\n+  - Java 1.8.0+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.5.4+ installed\n+\n+## Installing and Running\n+\n+```\n+mvn clean package spring-boot:run    \n+```\n+\n+## Swagger documentation\n+\n+You can take a look at the [swagger definition](http://localhost:8080/docs/swagger.json) - automatically generated and included in this service - to determine all available operations exposed by this service.  For easy readability you can visualize the swagger definition file using a swagger UI like for example available [here](https://editor.swagger.io). In addition, various clients to interact with this service can be easily generated using this swagger definition.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can access the UI at `localhost:8080` or use\n+the following examples to interact with the service.\n+\n+### POST  /rest/flights\n+\n+Allows to create a new flight with the given data:\n+\n+```sh\n+curl -d '{ \"params\": { \"origin\" : \"JFK\", \"destination\": \"SFO\", \"departureDateTime\": \"2020-01-01T12:00\", \"seatRowSize\": 8, \"seatColumnSize\": 6 } }' -H \"Content-Type: application/json\" -X POST http://localhost:8080/rest/flights\n+```\n+or on windows\n+\n+```sh\n+curl -d \"{\\\"params\\\": { \\\"origin\\\" : \\\"JFK\\\", \\\"destination\\\": \\\"SFO\\\", \\\"departureDateTime\\\": \\\"2020-01-01T12:00\\\", \\\"seatRowSize\\\": 8, \\\"seatColumnSize\\\": 6 }}\" -H \"Content-Type: application/json\" -X POST http://localhost:8080/rest/flights\n+```\n+\n+As response the created flight is returned (in field \"flight\").\n+Example response:\n+```json\n+{\n+  \"id\":\"7f24831f-9dc6-44c7-8dec-9b4a696506b5\",\n+  \"flight\":{\n+    \"flightInfo\":{\n+      \"origin\":\"YYZ\",\n+      \"destination\":\"KRND\",\n+      \"departureDateTime\":{...},\n+      \"seatRowSize\":1,\n+      \"seatColumnSize\":1\n+      },\n+    \"seatList\":[{\"name\":\"1A\",\"row\":0,\"column\":0,\"seatType\":\"WINDOW\",\"emergencyExitRow\":false}],\n+    \"passengerList\":[],\n+    \"score\":null,\n+    \"origin\":\"YYZ\",\n+    \"seatColumnSize\":6,\n+    \"seatRowSize\":4,\n+    \"destination\":\"KRND\",\n+    \"departureDateTime\":{...}\n+    },\n+  \"isSolving\":true,\n+  \"processId\":\"7f24831f-9dc6-44c7-8dec-9b4a696506b5\",\n+  \"params\":{\n+    \"origin\":\"YYZ\",\n+    \"destination\":\"KRND\",\n+    \"departureDateTime\":\"2020-03-06T20:19:49.240\",\n+    \"seatRowSize\":4,\n+    \"seatColumnSize\":6\n+  },\n+  \"isPassengerListFinalized\":false\n+}\n+```\n+\n+### GET  /rest/flights\n+\n+Returns list of flights currently being scheduled:\n+\n+```sh\n+curl -X GET http://localhost:8080/rest/flights\n+```\n+\n+As response an array of flights is returned.\n+\n+### GET  /rest/flight/{id}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a27e29caff54c3a3243ee0add42185629a0b901"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTY2ODI1OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoyNzowNFrOF0W2yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0NjoxN1rOF0Xqvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NDc0NQ==", "bodyText": "\"A UI\" ?", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390444745", "createdAt": "2020-03-10T16:27:04Z", "author": {"login": "evacchi"}, "path": "jbpm-optaplanner-springboot-example/README.md", "diffHunk": "@@ -0,0 +1,341 @@\n+# jBPM + OptaPlanner + SpringBoot example\n+\n+## Description\n+\n+A simple process service for an airline scheduling flights and optimizing seat\n+assignments using OptaPlanner.\n+\n+It uses an event-based subprocess to simulate\n+passengers buying tickets, who the airline security officer must approve via\n+a user task before the passenger is allowed to get a ticket.\n+\n+The main process waits for a user task to be completed to finalize the passenger list.\n+It then invokes a custom Java service `FlightSeatingSolveService.assignSeats`\n+to optimize the flight's seats following the rules in `FlightSeatingConstraintProvider`\n+using OptaPlanner's, followed by a user task to finalize seat assignments.\n+\n+Based on these two processes (defined using BPMN 2.0 format), the custom data object\n+and custom Java service, a new service is generated that exposes REST operations to\n+create new flights (following the steps as defined in the main and sub-process)\n+and add passengers to flights.\n+\n+An UI is included in this example, which can be accessed on `localhost:8080`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccda51c379e938fabaa87297d9e66a4d9419d73"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODA0Ng==", "bodyText": "\"U\" sounds like \"You-I\", so \"a\" instead of \"an\" (although \"u\" a vowel, and \"an\" is typically used for vowels; nice catch).", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390458046", "createdAt": "2020-03-10T16:46:17Z", "author": {"login": "Christopher-Chianelli"}, "path": "jbpm-optaplanner-springboot-example/README.md", "diffHunk": "@@ -0,0 +1,341 @@\n+# jBPM + OptaPlanner + SpringBoot example\n+\n+## Description\n+\n+A simple process service for an airline scheduling flights and optimizing seat\n+assignments using OptaPlanner.\n+\n+It uses an event-based subprocess to simulate\n+passengers buying tickets, who the airline security officer must approve via\n+a user task before the passenger is allowed to get a ticket.\n+\n+The main process waits for a user task to be completed to finalize the passenger list.\n+It then invokes a custom Java service `FlightSeatingSolveService.assignSeats`\n+to optimize the flight's seats following the rules in `FlightSeatingConstraintProvider`\n+using OptaPlanner's, followed by a user task to finalize seat assignments.\n+\n+Based on these two processes (defined using BPMN 2.0 format), the custom data object\n+and custom Java service, a new service is generated that exposes REST operations to\n+create new flights (following the steps as defined in the main and sub-process)\n+and add passengers to flights.\n+\n+An UI is included in this example, which can be accessed on `localhost:8080`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NDc0NQ=="}, "originalCommit": {"oid": "8ccda51c379e938fabaa87297d9e66a4d9419d73"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTY3NTcwOnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjoyODo0M1rOF0W7lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0Nzo0MlrOF0XuYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NTk3Mg==", "bodyText": "is this supposed to be a comment for end users?", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390445972", "createdAt": "2020-03-10T16:28:43Z", "author": {"login": "evacchi"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.kie.kogito.examples.service;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.kie.kogito.examples.domain.Flight;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.impl.Sig;\n+import org.optaplanner.core.api.solver.SolverJob;\n+import org.optaplanner.core.api.solver.SolverManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class FlightSeatingSolveService {\n+\n+    @Autowired\n+    private SolverManager<Flight, String> solverManager;\n+\n+    @Autowired\n+    @Qualifier(\"flights\")\n+    Process<?> process;\n+\n+    public void assignSeats(String id, Flight problem) {\n+        SolverJob<Flight, String> solverJob = solverManager.solveAndListen(id, (problemId) -> problem, (bestSolution) -> {\n+            // Can also use Kafka messages for this; probably would be a good showcase of Optaplanner + Kafka", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccda51c379e938fabaa87297d9e66a4d9419d73"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODk3Ng==", "bodyText": "A comment for myself mostly, can be removed or tweaked to \"can also use Kafka messages\"", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390458976", "createdAt": "2020-03-10T16:47:42Z", "author": {"login": "Christopher-Chianelli"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.kie.kogito.examples.service;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.kie.kogito.examples.domain.Flight;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.impl.Sig;\n+import org.optaplanner.core.api.solver.SolverJob;\n+import org.optaplanner.core.api.solver.SolverManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class FlightSeatingSolveService {\n+\n+    @Autowired\n+    private SolverManager<Flight, String> solverManager;\n+\n+    @Autowired\n+    @Qualifier(\"flights\")\n+    Process<?> process;\n+\n+    public void assignSeats(String id, Flight problem) {\n+        SolverJob<Flight, String> solverJob = solverManager.solveAndListen(id, (problemId) -> problem, (bestSolution) -> {\n+            // Can also use Kafka messages for this; probably would be a good showcase of Optaplanner + Kafka", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0NTk3Mg=="}, "originalCommit": {"oid": "8ccda51c379e938fabaa87297d9e66a4d9419d73"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTcwMDE4OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozNDozMlrOF0XLEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo0NDowNFrOF0Xksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTkzOQ==", "bodyText": "Is it really necessary to spawn a bare thread here? I think you may want to use some Spring facility for async scheduling", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390449939", "createdAt": "2020-03-10T16:34:32Z", "author": {"login": "evacchi"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.kie.kogito.examples.service;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.kie.kogito.examples.domain.Flight;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.impl.Sig;\n+import org.optaplanner.core.api.solver.SolverJob;\n+import org.optaplanner.core.api.solver.SolverManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class FlightSeatingSolveService {\n+\n+    @Autowired\n+    private SolverManager<Flight, String> solverManager;\n+\n+    @Autowired\n+    @Qualifier(\"flights\")\n+    Process<?> process;\n+\n+    public void assignSeats(String id, Flight problem) {\n+        SolverJob<Flight, String> solverJob = solverManager.solveAndListen(id, (problemId) -> problem, (bestSolution) -> {\n+            // Can also use Kafka messages for this; probably would be a good showcase of Optaplanner + Kafka\n+            process.instances().findById(id).ifPresent(pi -> {\n+                pi.send(Sig.of(\"newSolution\", bestSolution));\n+            });\n+        });\n+\n+        // TODO: Workaround for https://issues.redhat.com/browse/PLANNER-1868\n+        // Wait for solving to finish in new thread (so we don't block the return)\n+        new Thread(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccda51c379e938fabaa87297d9e66a4d9419d73"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1NjQ5OA==", "bodyText": "(I think you should @Autowire a TaskExecutor or an ExecutorService)", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390456498", "createdAt": "2020-03-10T16:44:04Z", "author": {"login": "evacchi"}, "path": "jbpm-optaplanner-springboot-example/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package org.kie.kogito.examples.service;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import org.kie.kogito.examples.domain.Flight;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.impl.Sig;\n+import org.optaplanner.core.api.solver.SolverJob;\n+import org.optaplanner.core.api.solver.SolverManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class FlightSeatingSolveService {\n+\n+    @Autowired\n+    private SolverManager<Flight, String> solverManager;\n+\n+    @Autowired\n+    @Qualifier(\"flights\")\n+    Process<?> process;\n+\n+    public void assignSeats(String id, Flight problem) {\n+        SolverJob<Flight, String> solverJob = solverManager.solveAndListen(id, (problemId) -> problem, (bestSolution) -> {\n+            // Can also use Kafka messages for this; probably would be a good showcase of Optaplanner + Kafka\n+            process.instances().findById(id).ifPresent(pi -> {\n+                pi.send(Sig.of(\"newSolution\", bestSolution));\n+            });\n+        });\n+\n+        // TODO: Workaround for https://issues.redhat.com/browse/PLANNER-1868\n+        // Wait for solving to finish in new thread (so we don't block the return)\n+        new Thread(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0OTkzOQ=="}, "originalCommit": {"oid": "8ccda51c379e938fabaa87297d9e66a4d9419d73"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTcwOTE1OnYy", "diffSide": "RIGHT", "path": "jbpm-optaplanner-springboot-example/src/main/resources/META-INF/kmodule.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozNjozOVrOF0XQ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjozNjozOVrOF0XQ5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1MTQzMA==", "bodyText": "in kogito this file should be unnecessary", "url": "https://github.com/kiegroup/kogito-examples/pull/121#discussion_r390451430", "createdAt": "2020-03-10T16:36:39Z", "author": {"login": "evacchi"}, "path": "jbpm-optaplanner-springboot-example/src/main/resources/META-INF/kmodule.xml", "diffHunk": "@@ -0,0 +1 @@\n+<kmodule xmlns=\"http://www.drools.org/xsd/kmodule\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccda51c379e938fabaa87297d9e66a4d9419d73"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 563, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}