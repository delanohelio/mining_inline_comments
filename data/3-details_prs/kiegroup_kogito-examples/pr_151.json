{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzA2ODkx", "number": 151, "title": "KOGITO-1618: System metrics example", "bodyText": "Added dmn-drools-quarkus-metrics example. It contains an example for the feature implemented in kiegroup/kogito-runtimes#327 . It contains a dmn model and a drl example, and tests that prometheus metrics are exported properly.\nI suggest to start from the README, that contains all the detailed steps to enable the feature and try it out.", "createdAt": "2020-03-18T09:02:52Z", "url": "https://github.com/kiegroup/kogito-examples/pull/151", "merged": true, "mergeCommit": {"oid": "9cccfaed9399d97bb96cfdf7abd94ed62df7aa4f"}, "closed": true, "closedAt": "2020-05-07T18:02:20Z", "author": {"login": "r00ta"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGhPrOgH2gAyMzkwMzA2ODkxOjYzYzczMmVhYzRmMzc1ZDU0MTIxYjVkNDE4MjU3NzUzMGQ0ZmU0ZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfBNRQAFqTQwNzcxMDQ1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "63c732eac4f375d54121b5d4182577530d4fe4df", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/63c732eac4f375d54121b5d4182577530d4fe4df", "committedDate": "2020-02-21T15:13:37Z", "message": "Add metrics example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85058396899734a6e0d336de57c820129903be10", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/85058396899734a6e0d336de57c820129903be10", "committedDate": "2020-02-21T15:18:47Z", "message": "Update README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dbd515701e788c849fd2f601af6a4b5abef26d4", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/7dbd515701e788c849fd2f601af6a4b5abef26d4", "committedDate": "2020-02-21T15:20:28Z", "message": "remove file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f502d40b9b931d5410264668257884013f139b2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/4f502d40b9b931d5410264668257884013f139b2", "committedDate": "2020-03-04T11:45:00Z", "message": "update metrics example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d22636458a450487f5768715df97aa7d584062f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/5d22636458a450487f5768715df97aa7d584062f", "committedDate": "2020-03-04T11:46:12Z", "message": "remove dmn model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dced3a771bd3fcbd2fef056ac06d4e9e6b37d52", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/7dced3a771bd3fcbd2fef056ac06d4e9e6b37d52", "committedDate": "2020-03-04T11:46:31Z", "message": "remove dmn file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4236798e8ffc39a09aa6fe8f46b6cba9b23a5865", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/4236798e8ffc39a09aa6fe8f46b6cba9b23a5865", "committedDate": "2020-03-10T14:26:28Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa6b7318aaa342cb2741a9ee7f58162e6c41df11", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/aa6b7318aaa342cb2741a9ee7f58162e6c41df11", "committedDate": "2020-03-10T14:28:54Z", "message": "remove logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d9c04b2ccc6915bf3bcd335ce53abba0dd8c1bc", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/3d9c04b2ccc6915bf3bcd335ce53abba0dd8c1bc", "committedDate": "2020-03-16T10:09:10Z", "message": "Update README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbc9ad238ec06d7305ac4f4aa38c43644114b663", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/dbc9ad238ec06d7305ac4f4aa38c43644114b663", "committedDate": "2020-03-16T14:28:13Z", "message": "update example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab0baed7f07e733dfce3aa507c7334b24206ca3c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/ab0baed7f07e733dfce3aa507c7334b24206ca3c", "committedDate": "2020-03-18T08:58:53Z", "message": "add metrics example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9640f6b51f4bef437f816432ac0c26bb7edf6264", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/9640f6b51f4bef437f816432ac0c26bb7edf6264", "committedDate": "2020-03-18T12:35:05Z", "message": "remove old files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b052914d8ba03581571fb11ec76acd9eda0e7d07", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/b052914d8ba03581571fb11ec76acd9eda0e7d07", "committedDate": "2020-03-18T12:43:05Z", "message": "update dockerfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4356efd363812242a0e2f723a6db4ddeccc7ddc5", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/4356efd363812242a0e2f723a6db4ddeccc7ddc5", "committedDate": "2020-03-18T15:09:49Z", "message": "remove generated files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5f2c5c516436724fec5685428a908b4edce05bd", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/e5f2c5c516436724fec5685428a908b4edce05bd", "committedDate": "2020-03-18T15:17:31Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea4748a45bfa652f5b7e28f73e8262569887da67", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/ea4748a45bfa652f5b7e28f73e8262569887da67", "committedDate": "2020-03-18T17:04:56Z", "message": "update pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83457acf1194f86e6b82870eb15333ec78fad16b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/83457acf1194f86e6b82870eb15333ec78fad16b", "committedDate": "2020-03-18T17:05:46Z", "message": "remove test dmn"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b4ad40e736b18e71b1aa5c6e2dc72d47b69bec", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/80b4ad40e736b18e71b1aa5c6e2dc72d47b69bec", "committedDate": "2020-03-19T11:31:55Z", "message": "update example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a24df37c91d648f7a30b56af51575e7a1a64b8b5", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/a24df37c91d648f7a30b56af51575e7a1a64b8b5", "committedDate": "2020-03-19T14:29:04Z", "message": "update dockerfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8690f6206b693dc96668d6d9c0d64ddf9620e7a", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/d8690f6206b693dc96668d6d9c0d64ddf9620e7a", "committedDate": "2020-03-24T12:34:12Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b3dac01329d37b0bb76af171c4df0b9e6bbdd0e", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/7b3dac01329d37b0bb76af171c4df0b9e6bbdd0e", "committedDate": "2020-03-26T19:15:14Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f274069cbe17feac3c4e26966655c97eae87ae6b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/f274069cbe17feac3c4e26966655c97eae87ae6b", "committedDate": "2020-03-30T15:08:00Z", "message": "update dmn-drools-metrics example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e33c9b87464bdbb012892f575986015283991f5", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/9e33c9b87464bdbb012892f575986015283991f5", "committedDate": "2020-04-02T09:00:41Z", "message": "remove files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0deb78f1ab0b46da7e5305a75a63149ac23ebbd6", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/0deb78f1ab0b46da7e5305a75a63149ac23ebbd6", "committedDate": "2020-04-02T10:33:53Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "775a95db57dc911c7ce86f753fd4afe97094475e", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/775a95db57dc911c7ce86f753fd4afe97094475e", "committedDate": "2020-04-02T11:16:24Z", "message": "update master pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b8b401e7bed33483d394be6390933713df7e548", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/9b8b401e7bed33483d394be6390933713df7e548", "committedDate": "2020-04-02T11:18:08Z", "message": "remove json files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9851fcdd3f0d62038966634b2cef4a0ee81060d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/e9851fcdd3f0d62038966634b2cef4a0ee81060d", "committedDate": "2020-04-02T11:27:34Z", "message": "remove test files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/c9330be04eea19f3ad71168aff1c1954b0b45b79", "committedDate": "2020-04-02T11:41:51Z", "message": "update readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NDc2NTE0", "url": "https://github.com/kiegroup/kogito-examples/pull/151#pullrequestreview-386476514", "createdAt": "2020-04-02T14:22:41Z", "commit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyMjo0MVrOF_tpyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDozNDoxNlrOF_uNUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1MjU4NQ==", "bodyText": "why linux-only? (also: \"OS\").\nMaybe we can just write features specifically work best on Linux in the descriotion. If it's because of just docker, then that there is Docker for windows/mac; in that case, you may write e.g. \"Optional: a working Docker environment\"", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402352585", "createdAt": "2020-04-02T14:22:41Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTU1Ng==", "bodyText": "i think you want to add a newline here", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402355556", "createdAt": "2020-04-02T14:26:36Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTc4MQ==", "bodyText": "it's better to explain the steps rather than just add a script. You may then add \"script run-compose.sh\" is provided for convenience.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402355781", "createdAt": "2020-04-02T14:26:54Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjA4Ng==", "bodyText": "we usually write curl requests inline without scripts", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402356086", "createdAt": "2020-04-02T14:27:18Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjIwNQ==", "bodyText": "same", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402356205", "createdAt": "2020-04-02T14:27:24Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh\n+\n+```\n+\n+the service will return `[\"hello\", \"world\"]`\n+\n+### POST /LoanEligibility\n+\n+Post:\n+\n+```sh\n+./sample-requests/query-dmn-loan.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1ODY0OA==", "bodyText": "some people use hey", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402358648", "createdAt": "2020-04-02T14:30:27Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh\n+\n+```\n+\n+the service will return `[\"hello\", \"world\"]`\n+\n+### POST /LoanEligibility\n+\n+Post:\n+\n+```sh\n+./sample-requests/query-dmn-loan.sh\n+\n+```\n+\n+the service will return the decision results. You can generate some traffic with \n+\n+```sh\n+while true; do ./sample-requests/query-dmn-loan.sh; done", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTE5Mg==", "bodyText": "you can format this more neatly in the README using:\ncurl -X POST http://localhost:8080/fraud-scoring \\\n  -H 'Content-Type: application/json' -d '{\n  \"Transactions\": [\n    {\n      \"tRiskScore\": 1,\n      \"tCardType\": \"Debit\",\n      \"tAuthCode\": \"Authorized\",\n      \"tLocation\": \"Local\"\n    }\n  ]\n}' \nis -L (--location) needed?", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402361192", "createdAt": "2020-04-02T14:33:39Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/sample-requests/query-dmn-fraud.sh", "diffHunk": "@@ -0,0 +1 @@\n+curl --location --request POST 'http://localhost:8080/fraud-scoring' --header 'Content-Type: application/json' -d \"{  \\\"Transactions\\\" : [{\\\"tRiskScore\\\" : 1, \\\"tCardType\\\" : \\\"Debit\\\", \\\"tAuthCode\\\" : \\\"Authorized\\\", \\\"tLocation\\\" : \\\"Local\\\"}]}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTY4MA==", "bodyText": "there should be no need to use sudo generally, and I would discourage to put it in a readme", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402361680", "createdAt": "2020-04-02T14:34:16Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/docker-compose/run-compose.sh", "diffHunk": "@@ -0,0 +1,9 @@\n+#!/bin/bash\n+\n+cd ../\n+mvn clean package\n+\n+cd docker-compose/ \n+cp ../target/resources/dashboards/* grafana/provisioning/dashboards\n+\n+sudo docker-compose build && sudo docker-compose up", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b3a7ed595d2b49df2d38eed5c15089c4e7361f3", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/2b3a7ed595d2b49df2d38eed5c15089c4e7361f3", "committedDate": "2020-04-02T17:13:02Z", "message": "resolve comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODc4Nzgx", "url": "https://github.com/kiegroup/kogito-examples/pull/151#pullrequestreview-398878781", "createdAt": "2020-04-23T08:34:37Z", "commit": {"oid": "2b3a7ed595d2b49df2d38eed5c15089c4e7361f3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/a0eac148e622cb99730de7637f5c79a4b5576343", "committedDate": "2020-04-23T11:34:52Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjU1NDY4", "url": "https://github.com/kiegroup/kogito-examples/pull/151#pullrequestreview-399255468", "createdAt": "2020-04-23T16:09:32Z", "commit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f660e8255589b3e9e6dd2db36cc8853f06e10a7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/3f660e8255589b3e9e6dd2db36cc8853f06e10a7", "committedDate": "2020-04-28T08:46:00Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzcxNzA4", "url": "https://github.com/kiegroup/kogito-examples/pull/151#pullrequestreview-402771708", "createdAt": "2020-04-29T15:16:46Z", "commit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToxNjo0NlrOGOD5rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo1Mjo0OFrOGOFjDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5NzE2Nw==", "bodyText": "Do we need to copy everything?", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417397167", "createdAt": "2020-04-29T15:16:46Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/Dockerfile", "diffHunk": "@@ -0,0 +1,4 @@\n+FROM openjdk:11\n+COPY . /", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5ODczMg==", "bodyText": "Just a typo two kinds.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417398732", "createdAt": "2020-04-29T15:18:49Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,109 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/resources/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance.\n+\n+The use case is summarized in the following schema:\n+ \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNjcwMg==", "bodyText": "Shouldn't this be localhost instead of hello?", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417406702", "createdAt": "2020-04-29T15:29:13Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/docker-compose/prometheus/prometheus.yml", "diffHunk": "@@ -0,0 +1,13 @@\n+# A scrape configuration containing exactly one endpoint to scrape:\n+scrape_configs:\n+  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n+  - job_name: 'kogito-app'\n+\n+    scrape_interval: 10s\n+\n+    metrics_path: /metrics\n+\n+    static_configs:\n+      - targets: ['hello:8080'] ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNzc1OA==", "bodyText": "This sounds like it should be done as a part of the script, but it is already written in the yaml file, so maybe a little rewording might help.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417407758", "createdAt": "2020-04-29T15:30:33Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,109 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/resources/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance.\n+\n+The use case is summarized in the following schema:\n+ \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+A script `docker-compose/run-compose.sh` is provided to demonstrate how to inject the generated dashboards in the volume of the grafana container:\n+ 1. the generated dashboards are copied from `target/resources/dashboards/` to the directory `docker-compose/grafana/provisioning/dashboards` \n+ 2. The volumes of the grafana container are properly set in the `docker-compose.yml` file, so that the dashboards are properly loaded at startup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMTA3NA==", "bodyText": "I think that the hello part can be deleted as it is not used for the purposes of the example, right?", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417411074", "createdAt": "2020-04-29T15:34:57Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/Hello.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;\n+\n+import org.kie.kogito.rules.DataSource;\n+import org.kie.kogito.rules.DataStore;\n+import org.kie.kogito.rules.RuleUnitData;\n+\n+public class Hello implements RuleUnitData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNDE0Mw==", "bodyText": "Same here, this is not needed.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417424143", "createdAt": "2020-04-29T15:52:48Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/src/main/resources/org/kie/kogito/examples/Hello.drl", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;\n+unit Hello;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMjkyNjQx", "url": "https://github.com/kiegroup/kogito-examples/pull/151#pullrequestreview-403292641", "createdAt": "2020-04-30T08:06:54Z", "commit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMjkzMDYy", "url": "https://github.com/kiegroup/kogito-examples/pull/151#pullrequestreview-403293062", "createdAt": "2020-04-30T08:07:31Z", "commit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a0f70e3994c68be99102ef1d44407e0ef0b724e", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/9a0f70e3994c68be99102ef1d44407e0ef0b724e", "committedDate": "2020-05-04T08:22:10Z", "message": "improve Dockerfile, fix typos, fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2", "committedDate": "2020-05-04T08:23:07Z", "message": "remove generated dashboards"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjU0NDYy", "url": "https://github.com/kiegroup/kogito-examples/pull/151#pullrequestreview-406654462", "createdAt": "2020-05-06T14:12:59Z", "commit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxMjo1OVrOGRVEbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxNToyOVrOGRVMEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNDE3Mw==", "bodyText": "Could you try to replace base image to use UBI OpenJDK 11 one ( registry.access.redhat.com/ubi8/openjdk-11 )?\nSee https://jmtd.net/log/ubi-openjdk/\nThis should simplify a lot this Dockerfile", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420824173", "createdAt": "2020-05-06T14:12:59Z", "author": {"login": "danielezonca"}, "path": "dmn-drools-quarkus-metrics/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:8.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNTc0NA==", "bodyText": "License", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420825744", "createdAt": "2020-05-06T14:15:01Z", "author": {"login": "danielezonca"}, "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/Hello.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNTg2Mw==", "bodyText": "License", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420825863", "createdAt": "2020-05-06T14:15:10Z", "author": {"login": "danielezonca"}, "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/MyInterceptor.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.kie.kogito.examples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNjEzMQ==", "bodyText": "License", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420826131", "createdAt": "2020-05-06T14:15:29Z", "author": {"login": "danielezonca"}, "path": "dmn-drools-quarkus-metrics/src/test/java/org/kie/kogito/examples/LoanEligibilityTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.kie.kogito.examples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86fb66ed67ea8031c64ab6a7419adf936c6813c2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/86fb66ed67ea8031c64ab6a7419adf936c6813c2", "committedDate": "2020-05-06T16:47:03Z", "message": "add licences"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cb6be073e2471b8acbc31e160c42ebcf47739ef", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/0cb6be073e2471b8acbc31e160c42ebcf47739ef", "committedDate": "2020-05-07T08:19:01Z", "message": "Merge remote-tracking branch 'upstream/master' into system-metrics-example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3e89497f152db174825815f22b00ec763bcfe4a", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/f3e89497f152db174825815f22b00ec763bcfe4a", "committedDate": "2020-05-07T08:20:59Z", "message": "update licences"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjU5MjI1", "url": "https://github.com/kiegroup/kogito-examples/pull/151#pullrequestreview-407659225", "createdAt": "2020-05-07T16:53:44Z", "commit": {"oid": "f3e89497f152db174825815f22b00ec763bcfe4a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzEwNDUx", "url": "https://github.com/kiegroup/kogito-examples/pull/151#pullrequestreview-407710451", "createdAt": "2020-05-07T18:02:08Z", "commit": {"oid": "f3e89497f152db174825815f22b00ec763bcfe4a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4540, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}