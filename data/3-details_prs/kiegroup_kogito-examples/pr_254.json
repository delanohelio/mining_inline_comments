{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzM0NzA5", "number": 254, "title": "KOGITO-2111 - Serverless Workflow - create event-based kogito example (quarkus)", "bodyText": "DEPENDS ON kiegroup/kogito-runtimes#499", "createdAt": "2020-05-06T21:07:35Z", "url": "https://github.com/kiegroup/kogito-examples/pull/254", "merged": true, "mergeCommit": {"oid": "7b4330fe313fa363a46694a887c3f325f2637b16"}, "closed": true, "closedAt": "2020-05-27T06:14:04Z", "author": {"login": "tsurdilo"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchij2ngH2gAyNDE0MzM0NzA5OmJhN2RkOGFhODZkODY1ZGI3NTRhZjlkZGUwMTI4YmViY2YyNmUyMjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABck0KczAH2gAyNDE0MzM0NzA5OjAwM2I0MDU4NmFjMWJjZDk4YmQ1YTFlZjg3NjBmYTliZTVjM2QxMjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ba7dd8aa86d865db754af9dde0128bebcf26e227", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-examples/commit/ba7dd8aa86d865db754af9dde0128bebcf26e227", "committedDate": "2020-05-15T14:01:31Z", "message": "KOGITO-2111 - Serverless Workflow - create event-based kogito example (quarkus)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a13aa54686af1c0b957fab428c8bbb22c8cc3c7", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-examples/commit/8a13aa54686af1c0b957fab428c8bbb22c8cc3c7", "committedDate": "2020-05-15T14:01:31Z", "message": "rebasing and adding headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "025d7d67d67cec103608e31059054d363405de45", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-examples/commit/025d7d67d67cec103608e31059054d363405de45", "committedDate": "2020-05-15T14:01:31Z", "message": "fixing readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a2958f7931f5f2a5702a895b373085825ffb3a4", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-examples/commit/1a2958f7931f5f2a5702a895b373085825ffb3a4", "committedDate": "2020-05-15T14:01:31Z", "message": "update json according to the spec produceevent update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "794b00e48a6c2f34a1a2dc4320990e7367495385", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-examples/commit/794b00e48a6c2f34a1a2dc4320990e7367495385", "committedDate": "2020-05-15T14:01:31Z", "message": "small update to readme"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f3198a90fc03355c0f631b19e45d6e7b9e225ad", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-examples/commit/4f3198a90fc03355c0f631b19e45d6e7b9e225ad", "committedDate": "2020-05-15T13:51:15Z", "message": "small update to readme"}, "afterCommit": {"oid": "794b00e48a6c2f34a1a2dc4320990e7367495385", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-examples/commit/794b00e48a6c2f34a1a2dc4320990e7367495385", "committedDate": "2020-05-15T14:01:31Z", "message": "small update to readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjM5NjU3", "url": "https://github.com/kiegroup/kogito-examples/pull/254#pullrequestreview-413239657", "createdAt": "2020-05-18T02:37:53Z", "commit": {"oid": "794b00e48a6c2f34a1a2dc4320990e7367495385"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMjM5ODg5", "url": "https://github.com/kiegroup/kogito-examples/pull/254#pullrequestreview-413239889", "createdAt": "2020-05-18T02:38:53Z", "commit": {"oid": "794b00e48a6c2f34a1a2dc4320990e7367495385"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjozODo1NFrOGWl7mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwMjozODo1NFrOGWl7mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM0MzMyMw==", "bodyText": "you can return the kafka.bootstrap.servers here and inject in the tests instead of using the system property, see https://github.com/kiegroup/kogito-examples/blob/master/process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTestResource.java#L43", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r426343323", "createdAt": "2020-05-18T02:38:54Z", "author": {"login": "cristianonicolai"}, "path": "serverless-workflow-events-quarkus/src/test/java/org/kogito/serverless/examples/KafkaResource.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kogito.serverless.examples;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import org.testcontainers.containers.KafkaContainer;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+public class KafkaResource implements QuarkusTestResourceLifecycleManager {\n+\n+    private KafkaContainer kafka;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        kafka = new KafkaContainer();\n+        kafka.start();\n+        System.setProperty(\"kafka.bootstrap.servers\", kafka.getBootstrapServers());\n+        return Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794b00e48a6c2f34a1a2dc4320990e7367495385"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MjIzMTkz", "url": "https://github.com/kiegroup/kogito-examples/pull/254#pullrequestreview-416223193", "createdAt": "2020-05-21T14:57:21Z", "commit": {"oid": "794b00e48a6c2f34a1a2dc4320990e7367495385"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNDo1NzoyMVrOGY2L-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxNTowMDoxNFrOGY2Whw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwNjgxMA==", "bodyText": "Also add Kafka env here please: https://github.com/kiegroup/kogito-examples/blob/stable/process-kafka-quickstart-quarkus/operator/process-kafka-quickstart-quarkus.yaml#L6", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r428706810", "createdAt": "2020-05-21T14:57:21Z", "author": {"login": "ricardozanini"}, "path": "serverless-workflow-events-quarkus/operator/serverless-workflow-events-quarkus.yaml", "diffHunk": "@@ -0,0 +1,15 @@\n+apiVersion: app.kiegroup.org/v1alpha1\n+kind: KogitoApp\n+metadata:\n+  name: serverless-workflow-events-quarkus\n+spec:\n+  build:\n+    #envs:\n+    # envs can be used to set variables during build\n+    #- name: MY_CUSTOM_ENV\n+    #  value: \"my value\"\n+    gitSource:\n+      contextDir: serverless-workflow-events-quarkus\n+      uri: 'https://github.com/kiegroup/kogito-examples'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794b00e48a6c2f34a1a2dc4320990e7367495385"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODcwOTUxMQ==", "bodyText": "Could you please also add this property to make sure that Quarkus will allow us to inject the prperty via env var? https://github.com/kiegroup/kogito-examples/blob/stable/process-kafka-quickstart-quarkus/src/main/resources/application.properties#L3", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r428709511", "createdAt": "2020-05-21T15:00:14Z", "author": {"login": "ricardozanini"}, "path": "serverless-workflow-events-quarkus/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,15 @@\n+mp.messaging.outgoing.out-applicants.connector=smallrye-kafka", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794b00e48a6c2f34a1a2dc4320990e7367495385"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34f28f523c8184a01fd8ed26ba931780c955e408", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-examples/commit/34f28f523c8184a01fd8ed26ba931780c955e408", "committedDate": "2020-05-21T23:44:25Z", "message": "updates per zanini review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODA4ODEy", "url": "https://github.com/kiegroup/kogito-examples/pull/254#pullrequestreview-417808812", "createdAt": "2020-05-25T16:45:09Z", "commit": {"oid": "34f28f523c8184a01fd8ed26ba931780c955e408"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODIwNjQ4", "url": "https://github.com/kiegroup/kogito-examples/pull/254#pullrequestreview-417820648", "createdAt": "2020-05-25T17:24:11Z", "commit": {"oid": "34f28f523c8184a01fd8ed26ba931780c955e408"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzoyNDoxMVrOGaGtwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNzozNTo0NlrOGaG4Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNjE3OA==", "bodyText": "You can use the interface CloudEvent instead of impl.", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430026178", "createdAt": "2020-05-25T17:24:11Z", "author": {"login": "tiagodolphine"}, "path": "serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kogito.serverless.examples;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import io.cloudevents.v1.CloudEventBuilder;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import java.net.URI;\n+import java.util.Random;\n+\n+@Path(\"/newapplicant\")\n+public class ApplicantResource {\n+\n+    Random rand = new Random();\n+\n+    @Inject\n+    @Channel(\"out-applicants\")\n+    Emitter<String> newApplicantEmitter;\n+\n+    @POST\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public void submitApplicant(JsonNode newApplicant) {\n+        CloudEventImpl<JsonNode> applicantEvent =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f28f523c8184a01fd8ed26ba931780c955e408"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNjk0Mw==", "bodyText": "what about UUID.randomUUID()  ?", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430026943", "createdAt": "2020-05-25T17:27:35Z", "author": {"login": "tiagodolphine"}, "path": "serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kogito.serverless.examples;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import io.cloudevents.v1.CloudEventBuilder;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.eclipse.microprofile.reactive.messaging.Emitter;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import java.net.URI;\n+import java.util.Random;\n+\n+@Path(\"/newapplicant\")\n+public class ApplicantResource {\n+\n+    Random rand = new Random();\n+\n+    @Inject\n+    @Channel(\"out-applicants\")\n+    Emitter<String> newApplicantEmitter;\n+\n+    @POST\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public void submitApplicant(JsonNode newApplicant) {\n+        CloudEventImpl<JsonNode> applicantEvent =\n+                CloudEventBuilder.<JsonNode>builder()\n+                        .withId(String.valueOf(rand.nextInt(1000)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f28f523c8184a01fd8ed26ba931780c955e408"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNzYzMA==", "bodyText": "Can't it be a Publisher<String>? I mean to avoid using Jackson JsonNode?", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430027630", "createdAt": "2020-05-25T17:30:27Z", "author": {"login": "tiagodolphine"}, "path": "serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/DecisionResource.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kogito.serverless.examples;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.eclipse.microprofile.reactive.messaging.Channel;\n+import org.jboss.resteasy.annotations.SseElementType;\n+import org.reactivestreams.Publisher;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"/decisions\")\n+public class DecisionResource {\n+\n+    @Inject\n+    @Channel(\"out-decisions\")\n+    Publisher<JsonNode> decisions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f28f523c8184a01fd8ed26ba931780c955e408"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyNzk5NQ==", "bodyText": "I'm just wondering if adding the js file is really necessary, or could you use a reference to the source.", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430027995", "createdAt": "2020-05-25T17:32:03Z", "author": {"login": "tiagodolphine"}, "path": "serverless-workflow-events-quarkus/src/main/resources/META-INF/resources/serializetojson.js", "diffHunk": "@@ -0,0 +1,223 @@\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f28f523c8184a01fd8ed26ba931780c955e408"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDAyODg5OQ==", "bodyText": "Can't you use the CloudEvent here, like mapper.readValue(received.get(0), CloudEvent.class)?", "url": "https://github.com/kiegroup/kogito-examples/pull/254#discussion_r430028899", "createdAt": "2020-05-25T17:35:46Z", "author": {"login": "tiagodolphine"}, "path": "serverless-workflow-events-quarkus/src/test/java/org/kogito/serverless/examples/ApplicantWorkflowTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kogito.serverless.examples;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.awaitility.Awaitility.await;\n+\n+import java.util.List;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+\n+import javax.ws.rs.client.Client;\n+import javax.ws.rs.client.ClientBuilder;\n+import javax.ws.rs.client.WebTarget;\n+import javax.ws.rs.sse.SseEventSource;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.Assert;\n+import org.junit.jupiter.api.Test;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaResource.class)\n+public class ApplicantWorkflowTest {\n+    private static final String DECISION_SSE_ENDPOINT = \"http://localhost:8081/decisions/stream\";\n+\n+    @Test\n+    public void testApplicantProcess() throws Exception {\n+\n+        Client client = ClientBuilder.newClient();\n+        WebTarget target = client.target(DECISION_SSE_ENDPOINT);\n+\n+        List<String> received = new CopyOnWriteArrayList<>();\n+\n+        SseEventSource source = SseEventSource.target(target).build();\n+        source.register(inboundSseEvent -> received.add(String.valueOf(inboundSseEvent.readData())));\n+        source.open();\n+\n+        given()\n+                .body(\"{\\\"name\\\":\\\"Cristiano\\\",\\\"position\\\":\\\"iOS Engineer\\\",\\\"office\\\":\\\"Berlin\\\",\\\"salary\\\":\\\"20000\\\"}\")\n+                .header(\"Content-Type\", MediaType.APPLICATION_JSON)\n+                .when()\n+                .post(\"/newapplicant\")\n+                .then()\n+                .statusCode(204);\n+        await().atMost(10000, MILLISECONDS).until(() -> received.size() == 1);\n+        source.close();\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+        JsonNode decisionObj = mapper.readTree(received.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34f28f523c8184a01fd8ed26ba931780c955e408"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "003b40586ac1bcd98bd5a1ef8760fa9be5c3d120", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-examples/commit/003b40586ac1bcd98bd5a1ef8760fa9be5c3d120", "committedDate": "2020-05-25T18:13:50Z", "message": "update to use uuid"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4470, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}