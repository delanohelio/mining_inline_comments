{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDM5MTcw", "number": 208, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo0MTozOFrODxkLhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTozOToxOVrODxtHKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjk5NTg4OnYy", "diffSide": "RIGHT", "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo0MTozOFrOGFGlKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1OToxOFrOGFHRNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMzg4Mg==", "bodyText": "Can you please unify assetions?\nYou seems to use old and new JUnit at the same time.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408003882", "createdAt": "2020-04-14T09:41:38Z", "author": {"login": "sutaakar"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14802de701c0c2507f1e3b9397b59757377f4c7c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTE1Nw==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408015157", "createdAt": "2020-04-14T09:59:18Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwMzg4Mg=="}, "originalCommit": {"oid": "14802de701c0c2507f1e3b9397b59757377f4c7c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzAxMjc2OnYy", "diffSide": "RIGHT", "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo0NToyNFrOGFGvHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDo0ODoyNVrOGFI_aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwNjQzMQ==", "bodyText": "Why did you delete assertEquals(ProcessInstance.STATE_COMPLETED, processInstance.status());", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408006431", "createdAt": "2020-04-14T09:45:24Z", "author": {"login": "sutaakar"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstances;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersProcessTest {\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\tprivate SecurityPolicy policy = SecurityPolicy\n+\t\t\t.of(new StaticIdentityProvider(\"john\", Collections.singletonList(\"managers\")));\n+\n+\t@Test\n+\tpublic void testOrderProcess() {\n+\t\tassertNotNull(orderProcess);\n+\n+\t\tModel m = orderProcess.createModel();\n+\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\tparameters.put(\"approver\", \"john\");\n+\t\tparameters.put(\"order\", new Order(\"12345\", false, 0.0));\n+\t\tm.fromMap(parameters);\n+\n+\t\tProcessInstance<?> processInstance = orderProcess.createInstance(m);\n+\t\tprocessInstance.start();\n+\n+\t\tassertEquals(ProcessInstance.STATE_ACTIVE, processInstance.status());\n+\t\tModel result = (Model) processInstance.variables();\n+\t\tassertEquals(2, result.toMap().size());\n+\t\tassertTrue(((Order) result.toMap().get(\"order\")).getTotal() > 0);\n+\n+\t\tProcessInstances<? extends Model> orderItemProcesses = orderItemsProcess.instances();\n+\t\tassertEquals(1, orderItemProcesses.values().size());\n+\n+\t\tProcessInstance<?> childProcessInstance = orderItemProcesses.values().iterator().next();\n+\n+\t\tList<WorkItem> workItems = childProcessInstance.workItems(policy);\n+\t\tassertEquals(1, workItems.size());\n+\n+\t\tchildProcessInstance.completeWorkItem(workItems.get(0).getId(), null, policy);\n+\n+\t\tassertEquals(ProcessInstance.STATE_COMPLETED, childProcessInstance.status());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14802de701c0c2507f1e3b9397b59757377f4c7c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxMjU2MA==", "bodyText": "It was failing and looking at the Quarkus version, this line was removed as part of https://issues.redhat.com/browse/KOGITO-173.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408012560", "createdAt": "2020-04-14T09:55:12Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstances;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersProcessTest {\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\tprivate SecurityPolicy policy = SecurityPolicy\n+\t\t\t.of(new StaticIdentityProvider(\"john\", Collections.singletonList(\"managers\")));\n+\n+\t@Test\n+\tpublic void testOrderProcess() {\n+\t\tassertNotNull(orderProcess);\n+\n+\t\tModel m = orderProcess.createModel();\n+\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\tparameters.put(\"approver\", \"john\");\n+\t\tparameters.put(\"order\", new Order(\"12345\", false, 0.0));\n+\t\tm.fromMap(parameters);\n+\n+\t\tProcessInstance<?> processInstance = orderProcess.createInstance(m);\n+\t\tprocessInstance.start();\n+\n+\t\tassertEquals(ProcessInstance.STATE_ACTIVE, processInstance.status());\n+\t\tModel result = (Model) processInstance.variables();\n+\t\tassertEquals(2, result.toMap().size());\n+\t\tassertTrue(((Order) result.toMap().get(\"order\")).getTotal() > 0);\n+\n+\t\tProcessInstances<? extends Model> orderItemProcesses = orderItemsProcess.instances();\n+\t\tassertEquals(1, orderItemProcesses.values().size());\n+\n+\t\tProcessInstance<?> childProcessInstance = orderItemProcesses.values().iterator().next();\n+\n+\t\tList<WorkItem> workItems = childProcessInstance.workItems(policy);\n+\t\tassertEquals(1, workItems.size());\n+\n+\t\tchildProcessInstance.completeWorkItem(workItems.get(0).getId(), null, policy);\n+\n+\t\tassertEquals(ProcessInstance.STATE_COMPLETED, childProcessInstance.status());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwNjQzMQ=="}, "originalCommit": {"oid": "14802de701c0c2507f1e3b9397b59757377f4c7c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNjMyNw==", "bodyText": "hmm, ok\nbut why it doesn't fail in the test below? The line is there.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408016327", "createdAt": "2020-04-14T10:01:22Z", "author": {"login": "sutaakar"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstances;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersProcessTest {\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\tprivate SecurityPolicy policy = SecurityPolicy\n+\t\t\t.of(new StaticIdentityProvider(\"john\", Collections.singletonList(\"managers\")));\n+\n+\t@Test\n+\tpublic void testOrderProcess() {\n+\t\tassertNotNull(orderProcess);\n+\n+\t\tModel m = orderProcess.createModel();\n+\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\tparameters.put(\"approver\", \"john\");\n+\t\tparameters.put(\"order\", new Order(\"12345\", false, 0.0));\n+\t\tm.fromMap(parameters);\n+\n+\t\tProcessInstance<?> processInstance = orderProcess.createInstance(m);\n+\t\tprocessInstance.start();\n+\n+\t\tassertEquals(ProcessInstance.STATE_ACTIVE, processInstance.status());\n+\t\tModel result = (Model) processInstance.variables();\n+\t\tassertEquals(2, result.toMap().size());\n+\t\tassertTrue(((Order) result.toMap().get(\"order\")).getTotal() > 0);\n+\n+\t\tProcessInstances<? extends Model> orderItemProcesses = orderItemsProcess.instances();\n+\t\tassertEquals(1, orderItemProcesses.values().size());\n+\n+\t\tProcessInstance<?> childProcessInstance = orderItemProcesses.values().iterator().next();\n+\n+\t\tList<WorkItem> workItems = childProcessInstance.workItems(policy);\n+\t\tassertEquals(1, workItems.size());\n+\n+\t\tchildProcessInstance.completeWorkItem(workItems.get(0).getId(), null, policy);\n+\n+\t\tassertEquals(ProcessInstance.STATE_COMPLETED, childProcessInstance.status());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwNjQzMQ=="}, "originalCommit": {"oid": "14802de701c0c2507f1e3b9397b59757377f4c7c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxODY2MA==", "bodyText": "I didn't take a look, but I'm sure this depends on retriggering processes.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408018660", "createdAt": "2020-04-14T10:05:06Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstances;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersProcessTest {\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\tprivate SecurityPolicy policy = SecurityPolicy\n+\t\t\t.of(new StaticIdentityProvider(\"john\", Collections.singletonList(\"managers\")));\n+\n+\t@Test\n+\tpublic void testOrderProcess() {\n+\t\tassertNotNull(orderProcess);\n+\n+\t\tModel m = orderProcess.createModel();\n+\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\tparameters.put(\"approver\", \"john\");\n+\t\tparameters.put(\"order\", new Order(\"12345\", false, 0.0));\n+\t\tm.fromMap(parameters);\n+\n+\t\tProcessInstance<?> processInstance = orderProcess.createInstance(m);\n+\t\tprocessInstance.start();\n+\n+\t\tassertEquals(ProcessInstance.STATE_ACTIVE, processInstance.status());\n+\t\tModel result = (Model) processInstance.variables();\n+\t\tassertEquals(2, result.toMap().size());\n+\t\tassertTrue(((Order) result.toMap().get(\"order\")).getTotal() > 0);\n+\n+\t\tProcessInstances<? extends Model> orderItemProcesses = orderItemsProcess.instances();\n+\t\tassertEquals(1, orderItemProcesses.values().size());\n+\n+\t\tProcessInstance<?> childProcessInstance = orderItemProcesses.values().iterator().next();\n+\n+\t\tList<WorkItem> workItems = childProcessInstance.workItems(policy);\n+\t\tassertEquals(1, workItems.size());\n+\n+\t\tchildProcessInstance.completeWorkItem(workItems.get(0).getId(), null, policy);\n+\n+\t\tassertEquals(ProcessInstance.STATE_COMPLETED, childProcessInstance.status());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwNjQzMQ=="}, "originalCommit": {"oid": "14802de701c0c2507f1e3b9397b59757377f4c7c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyMjE4Nw==", "bodyText": "ok, can you please take a look then?", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408022187", "createdAt": "2020-04-14T10:10:56Z", "author": {"login": "sutaakar"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstances;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersProcessTest {\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\tprivate SecurityPolicy policy = SecurityPolicy\n+\t\t\t.of(new StaticIdentityProvider(\"john\", Collections.singletonList(\"managers\")));\n+\n+\t@Test\n+\tpublic void testOrderProcess() {\n+\t\tassertNotNull(orderProcess);\n+\n+\t\tModel m = orderProcess.createModel();\n+\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\tparameters.put(\"approver\", \"john\");\n+\t\tparameters.put(\"order\", new Order(\"12345\", false, 0.0));\n+\t\tm.fromMap(parameters);\n+\n+\t\tProcessInstance<?> processInstance = orderProcess.createInstance(m);\n+\t\tprocessInstance.start();\n+\n+\t\tassertEquals(ProcessInstance.STATE_ACTIVE, processInstance.status());\n+\t\tModel result = (Model) processInstance.variables();\n+\t\tassertEquals(2, result.toMap().size());\n+\t\tassertTrue(((Order) result.toMap().get(\"order\")).getTotal() > 0);\n+\n+\t\tProcessInstances<? extends Model> orderItemProcesses = orderItemsProcess.instances();\n+\t\tassertEquals(1, orderItemProcesses.values().size());\n+\n+\t\tProcessInstance<?> childProcessInstance = orderItemProcesses.values().iterator().next();\n+\n+\t\tList<WorkItem> workItems = childProcessInstance.workItems(policy);\n+\t\tassertEquals(1, workItems.size());\n+\n+\t\tchildProcessInstance.completeWorkItem(workItems.get(0).getId(), null, policy);\n+\n+\t\tassertEquals(ProcessInstance.STATE_COMPLETED, childProcessInstance.status());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwNjQzMQ=="}, "originalCommit": {"oid": "14802de701c0c2507f1e3b9397b59757377f4c7c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0MzM2OQ==", "bodyText": "Raised: https://issues.redhat.com/browse/KOGITO-1848", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408043369", "createdAt": "2020-04-14T10:48:25Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.auth.SecurityPolicy;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.ProcessInstances;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.services.identity.StaticIdentityProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersProcessTest {\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Autowired\n+\t@Qualifier(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\tprivate SecurityPolicy policy = SecurityPolicy\n+\t\t\t.of(new StaticIdentityProvider(\"john\", Collections.singletonList(\"managers\")));\n+\n+\t@Test\n+\tpublic void testOrderProcess() {\n+\t\tassertNotNull(orderProcess);\n+\n+\t\tModel m = orderProcess.createModel();\n+\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\tparameters.put(\"approver\", \"john\");\n+\t\tparameters.put(\"order\", new Order(\"12345\", false, 0.0));\n+\t\tm.fromMap(parameters);\n+\n+\t\tProcessInstance<?> processInstance = orderProcess.createInstance(m);\n+\t\tprocessInstance.start();\n+\n+\t\tassertEquals(ProcessInstance.STATE_ACTIVE, processInstance.status());\n+\t\tModel result = (Model) processInstance.variables();\n+\t\tassertEquals(2, result.toMap().size());\n+\t\tassertTrue(((Order) result.toMap().get(\"order\")).getTotal() > 0);\n+\n+\t\tProcessInstances<? extends Model> orderItemProcesses = orderItemsProcess.instances();\n+\t\tassertEquals(1, orderItemProcesses.values().size());\n+\n+\t\tProcessInstance<?> childProcessInstance = orderItemProcesses.values().iterator().next();\n+\n+\t\tList<WorkItem> workItems = childProcessInstance.workItems(policy);\n+\t\tassertEquals(1, workItems.size());\n+\n+\t\tchildProcessInstance.completeWorkItem(workItems.get(0).getId(), null, policy);\n+\n+\t\tassertEquals(ProcessInstance.STATE_COMPLETED, childProcessInstance.status());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAwNjQzMQ=="}, "originalCommit": {"oid": "14802de701c0c2507f1e3b9397b59757377f4c7c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzA3Nzg2OnYy", "diffSide": "RIGHT", "path": "process-quarkus-example/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowMjowOFrOGFHXjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowNToyNFrOGFHflw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNjc4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t      </plugin>\n          \n          \n            \n            \t    </plugin>", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408016780", "createdAt": "2020-04-14T10:02:08Z", "author": {"login": "sutaakar"}, "path": "process-quarkus-example/pom.xml", "diffHunk": "@@ -129,6 +129,19 @@\n           <version>${project.version}</version>\n         </dependency>\n       </dependencies>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <configuration>\n+              <systemPropertyVariables>\n+                <tests.category>persistence</tests.category>\n+              </systemPropertyVariables>\n+            </configuration>\n+\t      </plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxODgzOQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408018839", "createdAt": "2020-04-14T10:05:24Z", "author": {"login": "Sgitario"}, "path": "process-quarkus-example/pom.xml", "diffHunk": "@@ -129,6 +129,19 @@\n           <version>${project.version}</version>\n         </dependency>\n       </dependencies>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-surefire-plugin</artifactId>\n+            <configuration>\n+              <systemPropertyVariables>\n+                <tests.category>persistence</tests.category>\n+              </systemPropertyVariables>\n+            </configuration>\n+\t      </plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNjc4MA=="}, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzA4MTQzOnYy", "diffSide": "RIGHT", "path": "process-springboot-example/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowMzowMlrOGFHZsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowMzowMlrOGFHZsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNzMzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \t<tests.category>persistence</tests.category>\n          \n          \n            \n                    <tests.category>persistence</tests.category>", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408017331", "createdAt": "2020-04-14T10:03:02Z", "author": {"login": "sutaakar"}, "path": "process-springboot-example/pom.xml", "diffHunk": "@@ -119,6 +119,9 @@\n           <name>persistence</name>\n         </property>\n       </activation>\n+      <properties>\n+      \t<tests.category>persistence</tests.category>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzE1NzM0OnYy", "diffSide": "RIGHT", "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDoyMjo1NlrOGFIH_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDoyODowOFrOGFITVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTE4Mg==", "bodyText": "Wouldn't it have more sense to keep there AFTER_EACH_TEST_METHOD?", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408029182", "createdAt": "2020-04-14T10:22:56Z", "author": {"login": "sutaakar"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) // reset spring context after each test method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzMjA4Ng==", "bodyText": "changed .....", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408032086", "createdAt": "2020-04-14T10:28:08Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) // reset spring context after each test method", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTE4Mg=="}, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzE2MDY2OnYy", "diffSide": "RIGHT", "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDoyMzo1NFrOGFIKGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMTo1MzozMlrOGF2NjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTcyMg==", "bodyText": "IMHO it should be rather placed in AfterEach so the test cleans up after it has been executed.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408029722", "createdAt": "2020-04-14T10:23:54Z", "author": {"login": "sutaakar"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersRestTest {\n+\n+\tprivate static String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n+\n+\t@Inject\n+\t@Named(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Inject\n+\t@Named(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\t@LocalServerPort\n+\tint port;\n+\n+\t@BeforeEach\n+\tpublic void setUp() {\n+\t\tRestAssured.port = port;\n+\n+        // need it when running with persistence\n+        orderProcess.instances().values().forEach(pi -> pi.abort());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzMTI4NA==", "bodyText": "In Quarkus version, it was being done before each test and it does not really matter if done before or after....", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408031284", "createdAt": "2020-04-14T10:26:37Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersRestTest {\n+\n+\tprivate static String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n+\n+\t@Inject\n+\t@Named(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Inject\n+\t@Named(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\t@LocalServerPort\n+\tint port;\n+\n+\t@BeforeEach\n+\tpublic void setUp() {\n+\t\tRestAssured.port = port;\n+\n+        // need it when running with persistence\n+        orderProcess.instances().values().forEach(pi -> pi.abort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTcyMg=="}, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAzNDM0OA==", "bodyText": "Yes, though it may affect other tests when the cleanup is done in Before phase.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408034348", "createdAt": "2020-04-14T10:32:17Z", "author": {"login": "sutaakar"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersRestTest {\n+\n+\tprivate static String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n+\n+\t@Inject\n+\t@Named(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Inject\n+\t@Named(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\t@LocalServerPort\n+\tint port;\n+\n+\t@BeforeEach\n+\tpublic void setUp() {\n+\t\tRestAssured.port = port;\n+\n+        // need it when running with persistence\n+        orderProcess.instances().values().forEach(pi -> pi.abort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTcyMg=="}, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA0NTIxMw==", "bodyText": "It's not going to be an issue since no more tests are using the order process, but will do.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408045213", "createdAt": "2020-04-14T10:51:53Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersRestTest {\n+\n+\tprivate static String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n+\n+\t@Inject\n+\t@Named(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Inject\n+\t@Named(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\t@LocalServerPort\n+\tint port;\n+\n+\t@BeforeEach\n+\tpublic void setUp() {\n+\t\tRestAssured.port = port;\n+\n+        // need it when running with persistence\n+        orderProcess.instances().values().forEach(pi -> pi.abort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTcyMg=="}, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzNTg1MQ==", "bodyText": "I usually prefer to have the clean up done in the before method. That helps if you run let's say a separated service ( infinispan ? ) so the state is always the expected one when the test executes.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408235851", "createdAt": "2020-04-14T15:38:06Z", "author": {"login": "cristianonicolai"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersRestTest {\n+\n+\tprivate static String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n+\n+\t@Inject\n+\t@Named(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Inject\n+\t@Named(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\t@LocalServerPort\n+\tint port;\n+\n+\t@BeforeEach\n+\tpublic void setUp() {\n+\t\tRestAssured.port = port;\n+\n+        // need it when running with persistence\n+        orderProcess.instances().values().forEach(pi -> pi.abort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTcyMg=="}, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNzMzNg==", "bodyText": "I agree with you. Usually, I do this stuff in the before methods as a setup configuration of my test suite. What do you think about @sutaakar ? Let me know whether reverting this or keeping it like this.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408617336", "createdAt": "2020-04-15T06:50:40Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersRestTest {\n+\n+\tprivate static String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n+\n+\t@Inject\n+\t@Named(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Inject\n+\t@Named(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\t@LocalServerPort\n+\tint port;\n+\n+\t@BeforeEach\n+\tpublic void setUp() {\n+\t\tRestAssured.port = port;\n+\n+        // need it when running with persistence\n+        orderProcess.instances().values().forEach(pi -> pi.abort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTcyMg=="}, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NzIwMg==", "bodyText": "@Sgitario I don't have a strong preference in that, if you think it is better to do the cleanup before then feel free to do so.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408777202", "createdAt": "2020-04-15T11:40:04Z", "author": {"login": "sutaakar"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersRestTest {\n+\n+\tprivate static String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n+\n+\t@Inject\n+\t@Named(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Inject\n+\t@Named(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\t@LocalServerPort\n+\tint port;\n+\n+\t@BeforeEach\n+\tpublic void setUp() {\n+\t\tRestAssured.port = port;\n+\n+        // need it when running with persistence\n+        orderProcess.instances().values().forEach(pi -> pi.abort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTcyMg=="}, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NDI2OQ==", "bodyText": "In order to avoid to have an afterEach and a beforeEach both in the Spring Boot examples, I've changed it to be done in the beforeEach method as at the beginning.", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408784269", "createdAt": "2020-04-15T11:53:32Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestTest.java", "diffHunk": "@@ -0,0 +1,303 @@\n+package org.kie.kogito.examples.demo;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.examples.DemoApplication;\n+import org.kie.kogito.process.Process;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.annotation.DirtiesContext.ClassMode;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+\n+@ExtendWith(SpringExtension.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = DemoApplication.class)\n+@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD) // reset spring context after each test method\n+public class OrdersRestTest {\n+\n+\tprivate static String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n+\n+\t@Inject\n+\t@Named(\"demo.orders\")\n+\tProcess<? extends Model> orderProcess;\n+\n+\t@Inject\n+\t@Named(\"demo.orderItems\")\n+\tProcess<? extends Model> orderItemsProcess;\n+\n+\t@LocalServerPort\n+\tint port;\n+\n+\t@BeforeEach\n+\tpublic void setUp() {\n+\t\tRestAssured.port = port;\n+\n+        // need it when running with persistence\n+        orderProcess.instances().values().forEach(pi -> pi.abort());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAyOTcyMg=="}, "originalCommit": {"oid": "8532e321f7d680fb3a3c3567a76c415a3b633369"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzQ5MDI1OnYy", "diffSide": "RIGHT", "path": "process-springboot-example/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjowMjoxOVrOGFLUng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDozOTo0MVrOGFR6wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4MTU2Ng==", "bodyText": "did you add the auth yourself ?", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408081566", "createdAt": "2020-04-14T12:02:19Z", "author": {"login": "radtriste"}, "path": "process-springboot-example/src/main/resources/application.properties", "diffHunk": "@@ -2,4 +2,8 @@ spring.mvc.servlet.path=/docs\n \n resteasy.jaxrs.scan-packages=org.kie.kogito.**\n \n-infinispan.remote.server-list=127.0.0.1:11222\n\\ No newline at end of file\n+infinispan.remote.server-list=127.0.0.1:11222", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a49c23e28aa46407372de4f3c8178dedcaf379"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE4OTYzNA==", "bodyText": "Removed ...", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408189634", "createdAt": "2020-04-14T14:39:41Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/main/resources/application.properties", "diffHunk": "@@ -2,4 +2,8 @@ spring.mvc.servlet.path=/docs\n \n resteasy.jaxrs.scan-packages=org.kie.kogito.**\n \n-infinispan.remote.server-list=127.0.0.1:11222\n\\ No newline at end of file\n+infinispan.remote.server-list=127.0.0.1:11222", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4MTU2Ng=="}, "originalCommit": {"oid": "94a49c23e28aa46407372de4f3c8178dedcaf379"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzk4NjA1OnYy", "diffSide": "RIGHT", "path": "process-springboot-example/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDowMTozN1rOGFQHjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MToyMlrOGFR_0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2MDE0Mg==", "bodyText": "any reason for double tests.category ?", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408160142", "createdAt": "2020-04-14T14:01:37Z", "author": {"login": "radtriste"}, "path": "process-springboot-example/pom.xml", "diffHunk": "@@ -119,6 +119,9 @@\n           <name>persistence</name>\n         </property>\n       </activation>\n+      <properties>\n+      \t<tests.category>persistence</tests.category>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a49c23e28aa46407372de4f3c8178dedcaf379"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MDkzMQ==", "bodyText": "fixed", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408190931", "createdAt": "2020-04-14T14:41:22Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/pom.xml", "diffHunk": "@@ -119,6 +119,9 @@\n           <name>persistence</name>\n         </property>\n       </activation>\n+      <properties>\n+      \t<tests.category>persistence</tests.category>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE2MDE0Mg=="}, "originalCommit": {"oid": "94a49c23e28aa46407372de4f3c8178dedcaf379"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDQ1OTMwOnYy", "diffSide": "RIGHT", "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTozOToxOVrOGFUzEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxNTo1NlrOGF27WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzNjgxNg==", "bodyText": "missing headers?", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408236816", "createdAt": "2020-04-14T15:39:19Z", "author": {"login": "cristianonicolai"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba140456694b353e2d9c9734e2910a309771f664"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxNjI1MA==", "bodyText": "I don't see any header in the process-quarkus-example and process-springboot-example projects at least. Should we add them to all the sources? If so, I guess this should be done as part of another task. What do you think about?", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408616250", "createdAt": "2020-04-15T06:48:17Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzNjgxNg=="}, "originalCommit": {"oid": "ba140456694b353e2d9c9734e2910a309771f664"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5NTk5Mg==", "bodyText": "Raised a ticket for adding the headers: https://issues.redhat.com/browse/KOGITO-1866", "url": "https://github.com/kiegroup/kogito-examples/pull/208#discussion_r408795992", "createdAt": "2020-04-15T12:15:56Z", "author": {"login": "Sgitario"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersProcessTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.kie.kogito.examples.demo;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzNjgxNg=="}, "originalCommit": {"oid": "ba140456694b353e2d9c9734e2910a309771f664"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 461, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}