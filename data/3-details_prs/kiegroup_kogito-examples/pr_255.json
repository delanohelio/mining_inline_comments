{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NzMwOTQw", "number": 255, "title": "[KOGITO-2055] [KOGITO-2056] Integration tests for process-kafka-quickstart-quarkus/springboot", "bodyText": "https://issues.redhat.com/browse/KOGITO-2055\nhttps://issues.redhat.com/browse/KOGITO-2056", "createdAt": "2020-05-07T14:40:59Z", "url": "https://github.com/kiegroup/kogito-examples/pull/255", "merged": true, "mergeCommit": {"oid": "fb6e49c9941268c4e9ce1b854b78e13bea2c1ce0"}, "closed": true, "closedAt": "2020-05-13T19:30:22Z", "author": {"login": "tiagodolphine"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfJJGOgFqTQwNzk2Nzk0Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg78csgFqTQxMTEyNTA2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3OTY3OTQy", "url": "https://github.com/kiegroup/kogito-examples/pull/255#pullrequestreview-407967942", "createdAt": "2020-05-08T03:08:15Z", "commit": {"oid": "36641d6398c4166d293ede827863f085b6bd1135"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzowODoxNVrOGSXa3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoxMjo1N1rOGSXf1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMTI2MA==", "bodyText": "@tiagodolphine maybe use a timeout to not wait forever\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        shutdownLatch.await();\n          \n          \n            \n                        shutdownLatch.await(1, TimeUnit.MINUTES);\n          \n      \n    \n    \n  \n\nand maybe move consumer and produce to a separated block as the latch can still throw an exception.", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421911260", "createdAt": "2020-05-08T03:08:15Z", "author": {"login": "cristianonicolai"}, "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.IntegerDeserializer;\n+import org.apache.kafka.common.serialization.IntegerSerializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KafkaTester {\n+\n+    private KafkaProducer<String, String> producer;\n+    private KafkaConsumer<String, String> consumer;\n+    private CountDownLatch shutdownLatch = new CountDownLatch(1);\n+    private AtomicBoolean shutdown = new AtomicBoolean(false);\n+    private static Logger LOGGER = LoggerFactory.getLogger(KafkaTester.class);\n+\n+    public KafkaTester(String hosts) {\n+        Properties producerConfig = new Properties();\n+        producerConfig.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, hosts);\n+        producerConfig.put(ProducerConfig.CLIENT_ID_CONFIG, this.getClass().getName() + \"Producer\");\n+        producerConfig.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, IntegerSerializer.class.getName());\n+        producerConfig.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n+        producer = new KafkaProducer<>(producerConfig);\n+\n+        Properties consumerConfig = new Properties();\n+        consumerConfig.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \"true\");\n+        consumerConfig.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n+        consumerConfig.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, hosts);\n+        consumerConfig.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, IntegerDeserializer.class.getName());\n+        consumerConfig.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());\n+        consumerConfig.put(ConsumerConfig.GROUP_ID_CONFIG, this.getClass().getName() + \"Consumer\");\n+        consumer = new KafkaConsumer<>(consumerConfig);\n+    }\n+\n+    public void consume(String topic, Consumer<String> callback) {\n+        consumer.subscribe(Collections.singletonList(topic));\n+\n+        CompletableFuture.runAsync(() -> {\n+            while (!shutdown.get()) {\n+                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(500));\n+\n+                StreamSupport.stream(records.spliterator(), true)\n+                        .map(ConsumerRecord::value)\n+                        .forEach(callback::accept);\n+\n+                consumer.commitSync();\n+            }\n+            shutdownLatch.countDown();\n+        });\n+    }\n+\n+    public void produce(String data, String topic) {\n+        producer.send(new ProducerRecord<>(topic, data), (m, ex) -> {\n+            Optional.ofNullable(ex).ifPresent(e -> LOGGER.error(\"Error publishing message {}\", m, ex));\n+        });\n+    }\n+\n+    public void shutdown() {\n+        try {\n+            shutdown.set(true);\n+            shutdownLatch.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36641d6398c4166d293ede827863f085b6bd1135"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMTk0OA==", "bodyText": "already handled in the After, maybe can be removed from here", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421911948", "createdAt": "2020-05-08T03:10:39Z", "author": {"login": "cristianonicolai"}, "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaTestResource.class)\n+public class MessagingIntegrationTest {\n+\n+    public static final String TOPIC_PRODUCER = \"travellers\";\n+    public static final String TOPIC_CONSUMER = \"processedtravellers\";\n+    private static Logger LOGGER = LoggerFactory.getLogger(MessagingIntegrationTest.class);\n+\n+    @Inject\n+    private ObjectMapper objectMapper;\n+\n+    public KafkaTester kafkaTester;\n+\n+    @ConfigProperty(name = KafkaTestResource.KAFKA_BOOTSTRAP_SERVERS)\n+    private String kafkaBootstrapServers;\n+\n+    @Test\n+    public void testProcess() throws InterruptedException {\n+        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n+        kafkaTester = new KafkaTester(kafkaBootstrapServers);\n+\n+        //number of generated events to test\n+        final int count = 3;\n+        final CountDownLatch countDownLatch = new CountDownLatch(count);\n+\n+        kafkaTester.consume(TOPIC_CONSUMER, s -> {\n+            LOGGER.info(\"Received from kafka: {}\", s);\n+            try {\n+                JsonNode event = objectMapper.readValue(s, JsonNode.class);\n+                Traveller traveller = objectMapper.readValue(event.get(\"data\").toString(), Traveller.class);\n+                assertTrue(traveller.isProcessed());\n+                assertTrue(traveller.getFirstName().matches(\"Name[0-9]+\"));\n+                assertTrue(traveller.getLastName().matches(\"LastName[0-9]+\"));\n+                assertTrue(traveller.getEmail().matches(\"email[0-9]+\"));\n+                assertTrue(traveller.getNationality().matches(\"Nationality[0-9]+\"));\n+                countDownLatch.countDown();\n+            } catch (JsonProcessingException e) {\n+                LOGGER.error(\"Error parsing {}\", s, e);\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        IntStream.range(0, count)\n+                .mapToObj(i -> new Traveller(\"Name\" + i, \"LastName\" + i, \"email\" + i, \"Nationality\" + i))\n+                .forEach(traveller -> kafkaTester.produce(generateCloudEvent(traveller), TOPIC_PRODUCER));\n+\n+        countDownLatch.await(5, TimeUnit.SECONDS);\n+        assertEquals(countDownLatch.getCount(), 0);\n+        kafkaTester.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36641d6398c4166d293ede827863f085b6bd1135"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMjExNw==", "bodyText": "not sure how this annotation will the used, if we really need it.", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421912117", "createdAt": "2020-05-08T03:11:14Z", "author": {"login": "cristianonicolai"}, "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaTestResource.class)\n+public class MessagingIntegrationTest {\n+\n+    public static final String TOPIC_PRODUCER = \"travellers\";\n+    public static final String TOPIC_CONSUMER = \"processedtravellers\";\n+    private static Logger LOGGER = LoggerFactory.getLogger(MessagingIntegrationTest.class);\n+\n+    @Inject\n+    private ObjectMapper objectMapper;\n+\n+    public KafkaTester kafkaTester;\n+\n+    @ConfigProperty(name = KafkaTestResource.KAFKA_BOOTSTRAP_SERVERS)\n+    private String kafkaBootstrapServers;\n+\n+    @Test\n+    public void testProcess() throws InterruptedException {\n+        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n+        kafkaTester = new KafkaTester(kafkaBootstrapServers);\n+\n+        //number of generated events to test\n+        final int count = 3;\n+        final CountDownLatch countDownLatch = new CountDownLatch(count);\n+\n+        kafkaTester.consume(TOPIC_CONSUMER, s -> {\n+            LOGGER.info(\"Received from kafka: {}\", s);\n+            try {\n+                JsonNode event = objectMapper.readValue(s, JsonNode.class);\n+                Traveller traveller = objectMapper.readValue(event.get(\"data\").toString(), Traveller.class);\n+                assertTrue(traveller.isProcessed());\n+                assertTrue(traveller.getFirstName().matches(\"Name[0-9]+\"));\n+                assertTrue(traveller.getLastName().matches(\"LastName[0-9]+\"));\n+                assertTrue(traveller.getEmail().matches(\"email[0-9]+\"));\n+                assertTrue(traveller.getNationality().matches(\"Nationality[0-9]+\"));\n+                countDownLatch.countDown();\n+            } catch (JsonProcessingException e) {\n+                LOGGER.error(\"Error parsing {}\", s, e);\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        IntStream.range(0, count)\n+                .mapToObj(i -> new Traveller(\"Name\" + i, \"LastName\" + i, \"email\" + i, \"Nationality\" + i))\n+                .forEach(traveller -> kafkaTester.produce(generateCloudEvent(traveller), TOPIC_PRODUCER));\n+\n+        countDownLatch.await(5, TimeUnit.SECONDS);\n+        assertEquals(countDownLatch.getCount(), 0);\n+        kafkaTester.shutdown();\n+    }\n+\n+    @NotNull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36641d6398c4166d293ede827863f085b6bd1135"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMjUzNA==", "bodyText": "perhaps it should propagate the exception to let the test fail?", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421912534", "createdAt": "2020-05-08T03:12:57Z", "author": {"login": "cristianonicolai"}, "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaTestResource.class)\n+public class MessagingIntegrationTest {\n+\n+    public static final String TOPIC_PRODUCER = \"travellers\";\n+    public static final String TOPIC_CONSUMER = \"processedtravellers\";\n+    private static Logger LOGGER = LoggerFactory.getLogger(MessagingIntegrationTest.class);\n+\n+    @Inject\n+    private ObjectMapper objectMapper;\n+\n+    public KafkaTester kafkaTester;\n+\n+    @ConfigProperty(name = KafkaTestResource.KAFKA_BOOTSTRAP_SERVERS)\n+    private String kafkaBootstrapServers;\n+\n+    @Test\n+    public void testProcess() throws InterruptedException {\n+        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n+        kafkaTester = new KafkaTester(kafkaBootstrapServers);\n+\n+        //number of generated events to test\n+        final int count = 3;\n+        final CountDownLatch countDownLatch = new CountDownLatch(count);\n+\n+        kafkaTester.consume(TOPIC_CONSUMER, s -> {\n+            LOGGER.info(\"Received from kafka: {}\", s);\n+            try {\n+                JsonNode event = objectMapper.readValue(s, JsonNode.class);\n+                Traveller traveller = objectMapper.readValue(event.get(\"data\").toString(), Traveller.class);\n+                assertTrue(traveller.isProcessed());\n+                assertTrue(traveller.getFirstName().matches(\"Name[0-9]+\"));\n+                assertTrue(traveller.getLastName().matches(\"LastName[0-9]+\"));\n+                assertTrue(traveller.getEmail().matches(\"email[0-9]+\"));\n+                assertTrue(traveller.getNationality().matches(\"Nationality[0-9]+\"));\n+                countDownLatch.countDown();\n+            } catch (JsonProcessingException e) {\n+                LOGGER.error(\"Error parsing {}\", s, e);\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        IntStream.range(0, count)\n+                .mapToObj(i -> new Traveller(\"Name\" + i, \"LastName\" + i, \"email\" + i, \"Nationality\" + i))\n+                .forEach(traveller -> kafkaTester.produce(generateCloudEvent(traveller), TOPIC_PRODUCER));\n+\n+        countDownLatch.await(5, TimeUnit.SECONDS);\n+        assertEquals(countDownLatch.getCount(), 0);\n+        kafkaTester.shutdown();\n+    }\n+\n+    @NotNull\n+    public String generateCloudEvent(Traveller traveller) {\n+        assertFalse(traveller.isProcessed());\n+        try {\n+            return JsonNodeFactory.instance\n+                    .objectNode()\n+                    .put(\"specversion\", \"0.3\")\n+                    .put(\"id\", UUID.randomUUID().toString())\n+                    .put(\"source\", \"\")\n+                    .put(\"type\", \"TravelersMessageDataEvent_3\")\n+                    .put(\"time\", ZonedDateTime.now().toString())\n+                    .set(\"data\", JsonNodeFactory.instance.pojoNode(traveller))\n+                    .toPrettyString();\n+        } catch (Exception e) {\n+            return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36641d6398c4166d293ede827863f085b6bd1135"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3OTg3NzE1", "url": "https://github.com/kiegroup/kogito-examples/pull/255#pullrequestreview-407987715", "createdAt": "2020-05-08T04:26:40Z", "commit": {"oid": "36641d6398c4166d293ede827863f085b6bd1135"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDoyNjo0MVrOGSYl3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDoyNjo0MVrOGSYl3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMDQ2MA==", "bodyText": "I added the proper cloudevents api in this pr - https://github.com/kiegroup/kogito-examples/pull/254/files\nand think we could use it here as well, there is example in pr how to use that api.", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421930460", "createdAt": "2020-05-08T04:26:41Z", "author": {"login": "tsurdilo"}, "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/MessagingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.ZonedDateTime;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.After;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(KafkaTestResource.class)\n+public class MessagingIntegrationTest {\n+\n+    public static final String TOPIC_PRODUCER = \"travellers\";\n+    public static final String TOPIC_CONSUMER = \"processedtravellers\";\n+    private static Logger LOGGER = LoggerFactory.getLogger(MessagingIntegrationTest.class);\n+\n+    @Inject\n+    private ObjectMapper objectMapper;\n+\n+    public KafkaTester kafkaTester;\n+\n+    @ConfigProperty(name = KafkaTestResource.KAFKA_BOOTSTRAP_SERVERS)\n+    private String kafkaBootstrapServers;\n+\n+    @Test\n+    public void testProcess() throws InterruptedException {\n+        objectMapper.configure(JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES, true);\n+        kafkaTester = new KafkaTester(kafkaBootstrapServers);\n+\n+        //number of generated events to test\n+        final int count = 3;\n+        final CountDownLatch countDownLatch = new CountDownLatch(count);\n+\n+        kafkaTester.consume(TOPIC_CONSUMER, s -> {\n+            LOGGER.info(\"Received from kafka: {}\", s);\n+            try {\n+                JsonNode event = objectMapper.readValue(s, JsonNode.class);\n+                Traveller traveller = objectMapper.readValue(event.get(\"data\").toString(), Traveller.class);\n+                assertTrue(traveller.isProcessed());\n+                assertTrue(traveller.getFirstName().matches(\"Name[0-9]+\"));\n+                assertTrue(traveller.getLastName().matches(\"LastName[0-9]+\"));\n+                assertTrue(traveller.getEmail().matches(\"email[0-9]+\"));\n+                assertTrue(traveller.getNationality().matches(\"Nationality[0-9]+\"));\n+                countDownLatch.countDown();\n+            } catch (JsonProcessingException e) {\n+                LOGGER.error(\"Error parsing {}\", s, e);\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        IntStream.range(0, count)\n+                .mapToObj(i -> new Traveller(\"Name\" + i, \"LastName\" + i, \"email\" + i, \"Nationality\" + i))\n+                .forEach(traveller -> kafkaTester.produce(generateCloudEvent(traveller), TOPIC_PRODUCER));\n+\n+        countDownLatch.await(5, TimeUnit.SECONDS);\n+        assertEquals(countDownLatch.getCount(), 0);\n+        kafkaTester.shutdown();\n+    }\n+\n+    @NotNull\n+    public String generateCloudEvent(Traveller traveller) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36641d6398c4166d293ede827863f085b6bd1135"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3OTg5MzEx", "url": "https://github.com/kiegroup/kogito-examples/pull/255#pullrequestreview-407989311", "createdAt": "2020-05-08T04:33:13Z", "commit": {"oid": "36641d6398c4166d293ede827863f085b6bd1135"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDozMzoxM1rOGSYsDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDozMzoxM1rOGSYsDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzMjA0Ng==", "bodyText": "To me it seems easier maybe to write a small Emitter and Publisher if needed  and use application.properties than having to define one of these types of classes for every test that might test different messages.\nWould be useful if it was generic (reusable) but serializer and deserializer definitions make it specific.", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r421932046", "createdAt": "2020-05-08T04:33:13Z", "author": {"login": "tsurdilo"}, "path": "process-kafka-quickstart-quarkus/src/test/java/org.acme.travel/KafkaTester.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travel;\n+\n+import java.time.Duration;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.stream.StreamSupport;\n+\n+import org.apache.kafka.clients.consumer.ConsumerConfig;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.common.serialization.IntegerDeserializer;\n+import org.apache.kafka.common.serialization.IntegerSerializer;\n+import org.apache.kafka.common.serialization.StringDeserializer;\n+import org.apache.kafka.common.serialization.StringSerializer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KafkaTester {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36641d6398c4166d293ede827863f085b6bd1135"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9807b013cfce8f67a493f4673e81893504de24a", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/d9807b013cfce8f67a493f4673e81893504de24a", "committedDate": "2020-05-08T12:30:03Z", "message": "KOGITO-2055 Create integration tests for process-kafka-quickstart-quarkus check\n\nRefactoring MessagingIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f5ba1ed34b2d218f712480b61469c4a9510d81", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/e8f5ba1ed34b2d218f712480b61469c4a9510d81", "committedDate": "2020-05-08T14:22:40Z", "message": "Add cloud events api and apply comments on the PR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcfa0848cd4622e3208c2a4a59d08c21e3c228be", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/dcfa0848cd4622e3208c2a4a59d08c21e3c228be", "committedDate": "2020-05-08T14:28:39Z", "message": "Removing unecessary dependency"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36641d6398c4166d293ede827863f085b6bd1135", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/36641d6398c4166d293ede827863f085b6bd1135", "committedDate": "2020-05-07T14:24:21Z", "message": "KOGITO-2055 Create integration tests for process-kafka-quickstart-quarkus check\n\nRefactoring MessagingIntegrationTest"}, "afterCommit": {"oid": "dcfa0848cd4622e3208c2a4a59d08c21e3c228be", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/dcfa0848cd4622e3208c2a4a59d08c21e3c228be", "committedDate": "2020-05-08T14:28:39Z", "message": "Removing unecessary dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2191b316753d2739e21698d930c2e7d6537eba97", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/2191b316753d2739e21698d930c2e7d6537eba97", "committedDate": "2020-05-08T20:08:12Z", "message": "KOGITO-2056 adding integration tests to process-kafka-quickstart-springboot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODEzODY4", "url": "https://github.com/kiegroup/kogito-examples/pull/255#pullrequestreview-408813868", "createdAt": "2020-05-11T01:36:58Z", "commit": {"oid": "2191b316753d2739e21698d930c2e7d6537eba97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MjAwODAy", "url": "https://github.com/kiegroup/kogito-examples/pull/255#pullrequestreview-409200802", "createdAt": "2020-05-11T14:01:13Z", "commit": {"oid": "2191b316753d2739e21698d930c2e7d6537eba97"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDowMToxM1rOGTdnkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDowMToyM1rOGTdoAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2MTM5Mg==", "bodyText": "which version of cloudevents-api should be used ?", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r423061392", "createdAt": "2020-05-11T14:01:13Z", "author": {"login": "radtriste"}, "path": "pom.xml", "diffHunk": "@@ -195,6 +196,21 @@\n         <artifactId>infinispan-spring-boot-starter-remote</artifactId>\n         <version>${infinispan.starter.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>io.cloudevents</groupId>\n+        <artifactId>cloudevents-api</artifactId>\n+        <version>${version.cloudevents.api}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2191b316753d2739e21698d930c2e7d6537eba97"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzA2MTUwNg==", "bodyText": "see other version here", "url": "https://github.com/kiegroup/kogito-examples/pull/255#discussion_r423061506", "createdAt": "2020-05-11T14:01:23Z", "author": {"login": "radtriste"}, "path": "pom.xml", "diffHunk": "@@ -195,6 +196,21 @@\n         <artifactId>infinispan-spring-boot-starter-remote</artifactId>\n         <version>${infinispan.starter.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>io.cloudevents</groupId>\n+        <artifactId>cloudevents-api</artifactId>\n+        <version>${version.cloudevents.api}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.testcontainers</groupId>\n+        <artifactId>kafka</artifactId>\n+        <version>${version.testcontainers}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.cloudevents</groupId>\n+        <artifactId>cloudevents-api</artifactId>\n+        <version>${version.kafka}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2191b316753d2739e21698d930c2e7d6537eba97"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e4e9e48a474e1d73b09382e97c366ae6a621fe", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/21e4e9e48a474e1d73b09382e97c366ae6a621fe", "committedDate": "2020-05-13T16:37:28Z", "message": "Removing duplicated dependency"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTI1MDYx", "url": "https://github.com/kiegroup/kogito-examples/pull/255#pullrequestreview-411125061", "createdAt": "2020-05-13T17:02:06Z", "commit": {"oid": "21e4e9e48a474e1d73b09382e97c366ae6a621fe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4475, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}