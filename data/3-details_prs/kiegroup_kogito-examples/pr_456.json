{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjgyMTg3", "number": 456, "title": "PLANNER-2145: Remove workaround in flight example solver manager", "bodyText": "https://issues.redhat.com/browse/PLANNER-2145\nAlso fixed errors that were introduced from changes to the tasks\napi.\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\nWARNING! Please make sure you are opening your PR against master branch!\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-11-13T16:27:59Z", "url": "https://github.com/kiegroup/kogito-examples/pull/456", "merged": true, "mergeCommit": {"oid": "05f3d48aa9510d4c443a8b5764ce8bbb5faa1b88"}, "closed": true, "closedAt": "2020-11-26T19:28:29Z", "author": {"login": "Christopher-Chianelli"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcJu9QgH2gAyNTIwNjgyMTg3OmFlMWM4YWNmOWNiYzUxZDYyNTFjOTFjYTU2OTk5MzM0YmExOGI3YTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfq-SUAFqTUzNzU3MDgzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ae1c8acf9cbc51d6251c91ca56999334ba18b7a5", "author": {"user": {"login": "Christopher-Chianelli", "name": "Christopher Chianelli"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/ae1c8acf9cbc51d6251c91ca56999334ba18b7a5", "committedDate": "2020-11-13T16:27:33Z", "message": "PLANNER-2145: Remove workaround in flight example solver manager\n\nAlso fixed errors that were introduced from changes to the tasks\napi."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTcwNzE4", "url": "https://github.com/kiegroup/kogito-examples/pull/456#pullrequestreview-537570718", "createdAt": "2020-11-24T14:52:50Z", "commit": {"oid": "ae1c8acf9cbc51d6251c91ca56999334ba18b7a5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDo1Mjo1MFrOH5Ehaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDo1Mjo1MFrOH5Ehaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYwNDk3MQ==", "bodyText": "If an error occurs, does the user somehow get told in the UI that it did? (and kind of of error it was?)\nOr does the error get swept under the carpet?", "url": "https://github.com/kiegroup/kogito-examples/pull/456#discussion_r529604971", "createdAt": "2020-11-24T14:52:50Z", "author": {"login": "ge0ffrey"}, "path": "process-optaplanner-quarkus/src/main/java/org/kie/kogito/examples/service/FlightSeatingSolveService.java", "diffHunk": "@@ -39,23 +36,17 @@\n     Process<?> process;\n \n     public void assignSeats(String id, Flight problem) {\n-        SolverJob<Flight, String> solverJob = solverManager.solveAndListen(id, (problemId) -> problem, (bestSolution) -> {\n-            process.instances().findById(id).ifPresent(pi -> {\n-                pi.send(Sig.of(\"newSolution\", bestSolution));\n-            });\n-        });\n-\n-        // TODO: Workaround for https://issues.redhat.com/browse/PLANNER-1868\n-        // Wait for solving to finish in new thread (so we don't block the return)\n-        new Thread(() -> {\n-            try {\n-                Flight finalBestSolution = solverJob.getFinalBestSolution();\n-                process.instances().findById(id).ifPresent(pi -> {\n-                    pi.send(Sig.of(\"solvingTerminated\", finalBestSolution));\n-                });\n-            } catch (InterruptedException | ExecutionException e) {\n-                e.printStackTrace();\n-            }\n-        }).start();\n+        solverManager.solveAndListen(id, (problemId) -> problem, bestSolution -> {\n+                                         process.instances().findById(id).ifPresent(pi -> {\n+                                             pi.send(Sig.of(\"newSolution\", bestSolution));\n+                                         });\n+                                     }, finalBestSolution -> {\n+                                         process.instances().findById(id).ifPresent(pi -> {\n+                                             pi.send(Sig.of(\"solvingTerminated\", finalBestSolution));\n+                                         });\n+                                     },\n+                                     (message, exception) -> {\n+                                         process.instances().findById(id).ifPresent(ProcessInstance::abort);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae1c8acf9cbc51d6251c91ca56999334ba18b7a5"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTcwODMw", "url": "https://github.com/kiegroup/kogito-examples/pull/456#pullrequestreview-537570830", "createdAt": "2020-11-24T14:52:56Z", "commit": {"oid": "ae1c8acf9cbc51d6251c91ca56999334ba18b7a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4289, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}