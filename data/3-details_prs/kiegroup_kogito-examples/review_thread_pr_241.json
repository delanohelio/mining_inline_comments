{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzM3ODUz", "number": 241, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0OTo1NVrOD3iLvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo1MTozNlrOEc4GXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTU4MzMzOnYy", "diffSide": "RIGHT", "path": "kogito-mongodb-persistence-springboot/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0OTo1NlrOGN1fXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0OTo1NlrOGN1fXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE2MTA1Mg==", "bodyText": "you should probably remove this", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r417161052", "createdAt": "2020-04-29T08:49:56Z", "author": {"login": "evacchi"}, "path": "kogito-mongodb-persistence-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,122 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kogito-mongodb-persistence-springboot</artifactId>\n+  <name>Kogito-mongodb-persistence-springboot</name>\n+  <description>Kogito with MongoDB persistence - Spring Boot</description>\n+\n+  \n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-dependencies</artifactId>\n+        <version>${springboot.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-bom</artifactId>\n+        <version>${kogito.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mongodb</groupId>\n+      <artifactId>mongo-java-driver</artifactId>\n+      <version>3.12.2</version>\n+    </dependency>\n+    <!-- <dependency>\n+\t\t\t<groupId>org.springframework.boot</groupId>\n+\t\t\t<artifactId>spring-boot-starter-data-rest</artifactId>\n+    </dependency> -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe23f9e3aa6cb579a529f6a0bd1e2ab719566cc8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODA2MjMyOnYy", "diffSide": "RIGHT", "path": "kogito-mongodb-persistence-springboot/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDowMDo0OVrOGnqtGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDowMDo0OVrOGnqtGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI0NzMyMA==", "bodyText": "Multiple blank lines here.", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r444247320", "createdAt": "2020-06-23T14:00:49Z", "author": {"login": "Sgitario"}, "path": "kogito-mongodb-persistence-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,122 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>kogito-mongodb-persistence-springboot</artifactId>\n+  <name>Kogito-mongodb-persistence-springboot</name>\n+  <description>Kogito with MongoDB persistence - Spring Boot</description>\n+\n+  \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe23f9e3aa6cb579a529f6a0bd1e2ab719566cc8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzkxNjI2OnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/src/main/java/META-INF/MANIFEST.MF", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowNDo1NFrOG6BcYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowNDo1NFrOG6BcYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NDI0Mg==", "bodyText": "probably we dont need this file?", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r463494242", "createdAt": "2020-07-31T09:04:54Z", "author": {"login": "cristianonicolai"}, "path": "process-mongodb-persistence-springboot/src/main/java/META-INF/MANIFEST.MF", "diffHunk": "@@ -0,0 +1,3 @@\n+Manifest-Version: 1.0\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321a5094e6b08b23fb4bc87ec9deaaa1efe73b4b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzkxNjg4OnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/src/main/resources/META-INF/MANIFEST.MF", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowNToxMVrOG6Bc2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTowNToxMVrOG6Bc2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NDM2Mg==", "bodyText": "same?", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r463494362", "createdAt": "2020-07-31T09:05:11Z", "author": {"login": "cristianonicolai"}, "path": "process-mongodb-persistence-springboot/src/main/resources/META-INF/MANIFEST.MF", "diffHunk": "@@ -0,0 +1,3 @@\n+Manifest-Version: 1.0\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321a5094e6b08b23fb4bc87ec9deaaa1efe73b4b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mzk0MDE0OnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/src/test/java/org/acme/deals/DealsRestIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOToxMjoyNVrOG6BqvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOToxMjoyNVrOG6BqvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NzkxNg==", "bodyText": "please review code format and remove comment out code.", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r463497916", "createdAt": "2020-07-31T09:12:25Z", "author": {"login": "cristianonicolai"}, "path": "process-mongodb-persistence-springboot/src/test/java/org/acme/deals/DealsRestIT.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.deals;\n+\n+import java.util.Map;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.acme.travels.KogitoApplication;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.springboot.MongoDBSpringBootTestResource;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@SpringBootTest(classes = KogitoApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ContextConfiguration(initializers = MongoDBSpringBootTestResource.Conditional.class)\n+public class DealsRestIT {\n+\n+\t@LocalServerPort\n+    int randomServerPort;\n+    \n+    @BeforeEach\n+    public void setup() {\n+        RestAssured.port = randomServerPort;\n+    }\n+   \n+    @Test\n+    public void testDealsRest() {\n+        // test adding new deal\n+        String addDealPayload = \"{\\\"name\\\" : \\\"my fancy deal\\\", \\\"traveller\\\" : { \\\"firstName\\\" : \\\"John\\\", \\\"lastName\\\" : \\\"Doe\\\", \\\"email\\\" : \\\"jon.doe@example.com\\\", \\\"nationality\\\" : \\\"American\\\",\\\"address\\\" : { \\\"street\\\" : \\\"main street\\\", \\\"city\\\" : \\\"Boston\\\", \\\"zipCode\\\" : \\\"10005\\\", \\\"country\\\" : \\\"US\\\" }}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321a5094e6b08b23fb4bc87ec9deaaa1efe73b4b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mzk0Mzg5OnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/src/test/java/org/acme/deals/DealsRestIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOToxMzo0M1rOG6BtAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOToxMzo0M1rOG6BtAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5ODQ5Nw==", "bodyText": "this validation looks fine to me. The one below is missing to check the actual id.", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r463498497", "createdAt": "2020-07-31T09:13:43Z", "author": {"login": "cristianonicolai"}, "path": "process-mongodb-persistence-springboot/src/test/java/org/acme/deals/DealsRestIT.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.deals;\n+\n+import java.util.Map;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.acme.travels.KogitoApplication;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.springboot.MongoDBSpringBootTestResource;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@SpringBootTest(classes = KogitoApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ContextConfiguration(initializers = MongoDBSpringBootTestResource.Conditional.class)\n+public class DealsRestIT {\n+\n+\t@LocalServerPort\n+    int randomServerPort;\n+    \n+    @BeforeEach\n+    public void setup() {\n+        RestAssured.port = randomServerPort;\n+    }\n+   \n+    @Test\n+    public void testDealsRest() {\n+        // test adding new deal\n+        String addDealPayload = \"{\\\"name\\\" : \\\"my fancy deal\\\", \\\"traveller\\\" : { \\\"firstName\\\" : \\\"John\\\", \\\"lastName\\\" : \\\"Doe\\\", \\\"email\\\" : \\\"jon.doe@example.com\\\", \\\"nationality\\\" : \\\"American\\\",\\\"address\\\" : { \\\"street\\\" : \\\"main street\\\", \\\"city\\\" : \\\"Boston\\\", \\\"zipCode\\\" : \\\"10005\\\", \\\"country\\\" : \\\"US\\\" }}}\";\n+        ValidatableResponse statusCode1 = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(\n+                                                                                                              addDealPayload)\n+                .when().post(\"/deals\")\n+                                                 .then().log().ifValidationFails().statusCode(200);\n+        String dealId = statusCode1.extract().jsonPath().getString(\"id\");\n+\n+        // test getting the created deal\n+        //        given().accept(ContentType.JSON)\n+        //                .when().get(\"/deals\")\n+        //                .then().log().ifValidationFails().statusCode(200).body(\"$.size()\", is(1), \"[0].id\", is(dealId));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "321a5094e6b08b23fb4bc87ec9deaaa1efe73b4b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjU2NTczOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzowMTowM1rOHG-fhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzowMTowM1rOHG-fhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3NzM4MQ==", "bodyText": "Formatting is a little bit off.", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r477077381", "createdAt": "2020-08-26T07:01:03Z", "author": {"login": "MarianMacik"}, "path": "pom.xml", "diffHunk": "@@ -306,6 +313,7 @@\n               <container.image.infinispan>${container.image.infinispan}</container.image.infinispan>\n               <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\n               <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\n+               <enable.resource.mongodb>${enable.resource.mongodb}</enable.resource.mongodb>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64191e7809ee36ed3a2e316f653fb043567112f5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjU3MzI4OnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzowMzozMVrOHG-kRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzowMzozMVrOHG-kRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3ODU5OQ==", "bodyText": "Shouldn't it be MongoDB server? We shouldn't need Infinispan as this example doesn't use Data Index or Jobs Service.", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r477078599", "createdAt": "2020-08-26T07:03:31Z", "author": {"login": "MarianMacik"}, "path": "process-mongodb-persistence-springboot/README.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# Kogito with persistence powered by Mongo DB\n+\n+## Description\n+\n+A quickstart project that processes deals for travellers. It utilizes process composition to split the work of\n+\n+* submitting a deal\n+* reviewing a deal\n+\n+At the same time shows simplified version of a approval process that waits for human actor to provide review.\n+\n+This example shows\n+\n+* exposing Submit Deal as public service\n+* each process instance is going to be evaluated and asks for review\n+* at any point in time service can be shutdown and when brought back it will keep the state of the instances\n+\n+Note: The use of this example shows that the data sent to mongodb is saved, you can shut down the application and restart it\n+and as long as mongodb is running after you restart you should still see the data\n+\n+It utilizes MongoDB server as the backend store. \n+\t\n+* Process (submitDeal.bpmn)\t\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/process.png\"></p>\n+\n+* Process Properties (top)\n+<p align=\"center\"><img src=\"docs/images/processProperties.png\"></p>\n+\n+* Process Properties (bottom)\n+<p align=\"center\"><img src=\"docs/images/processProperties2.png\"></p>\n+\n+* Call a deal\t\n+<p align=\"center\"><img src=\"docs/images/callADeal.png\"></p>\n+\n+* Call a deal (Assignments)\n+<p align=\"center\"><img src=\"docs/images/callADeal2.png\"></p>\n+\n+* Print review the Deal\t\n+<p align=\"center\"><img src=\"docs/images/printReviewTheDeal.png\"></p>\n+\n+* Subprocess (reviewDeal.bpmn)\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/subprocess.png\"></p>\n+\n+* Deal Review (top)\n+<p align=\"center\"><img src=\"docs/images/dealReview.png\"></p>\n+\n+* Deal Review (bottom)\n+<p align=\"center\"><img src=\"docs/images/dealReview3.png\"></p>\n+\n+* Review deal user task\t(top)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask.png\"></p>\n+\n+* Review deal user task (bottom)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask2.png\"></p>\n+\n+* Review deal user task\t(Assignments)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask3.png\"></p>\n+\n+## Infrastructure requirements\n+\n+This quickstart requires an Inifinispan server to be available and by default expects it to be on default port (27017) and localhost.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64191e7809ee36ed3a2e316f653fb043567112f5"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjU3Njc5OnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzowNDozN1rOHG-mUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzowNDozN1rOHG-mUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA3OTEyMw==", "bodyText": "that you can work with probably?", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r477079123", "createdAt": "2020-08-26T07:04:37Z", "author": {"login": "MarianMacik"}, "path": "process-mongodb-persistence-springboot/README.md", "diffHunk": "@@ -0,0 +1,175 @@\n+# Kogito with persistence powered by Mongo DB\n+\n+## Description\n+\n+A quickstart project that processes deals for travellers. It utilizes process composition to split the work of\n+\n+* submitting a deal\n+* reviewing a deal\n+\n+At the same time shows simplified version of a approval process that waits for human actor to provide review.\n+\n+This example shows\n+\n+* exposing Submit Deal as public service\n+* each process instance is going to be evaluated and asks for review\n+* at any point in time service can be shutdown and when brought back it will keep the state of the instances\n+\n+Note: The use of this example shows that the data sent to mongodb is saved, you can shut down the application and restart it\n+and as long as mongodb is running after you restart you should still see the data\n+\n+It utilizes MongoDB server as the backend store. \n+\t\n+* Process (submitDeal.bpmn)\t\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/process.png\"></p>\n+\n+* Process Properties (top)\n+<p align=\"center\"><img src=\"docs/images/processProperties.png\"></p>\n+\n+* Process Properties (bottom)\n+<p align=\"center\"><img src=\"docs/images/processProperties2.png\"></p>\n+\n+* Call a deal\t\n+<p align=\"center\"><img src=\"docs/images/callADeal.png\"></p>\n+\n+* Call a deal (Assignments)\n+<p align=\"center\"><img src=\"docs/images/callADeal2.png\"></p>\n+\n+* Print review the Deal\t\n+<p align=\"center\"><img src=\"docs/images/printReviewTheDeal.png\"></p>\n+\n+* Subprocess (reviewDeal.bpmn)\n+<p align=\"center\"><img width=75% height=50% src=\"docs/images/subprocess.png\"></p>\n+\n+* Deal Review (top)\n+<p align=\"center\"><img src=\"docs/images/dealReview.png\"></p>\n+\n+* Deal Review (bottom)\n+<p align=\"center\"><img src=\"docs/images/dealReview3.png\"></p>\n+\n+* Review deal user task\t(top)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask.png\"></p>\n+\n+* Review deal user task (bottom)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask2.png\"></p>\n+\n+* Review deal user task\t(Assignments)\n+<p align=\"center\"><img src=\"docs/images/reviewDealUserTask3.png\"></p>\n+\n+## Infrastructure requirements\n+\n+This quickstart requires an Inifinispan server to be available and by default expects it to be on default port (27017) and localhost.\n+\n+* MongoDB installed and running\t\n+<p align=\"center\"><img src=\"docs/images/MongoDB_connection.png\"></p>\n+\n+## Build and run\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+### Compile and Run in Local Dev Mode\n+\n+```\n+mvn clean package spring-boot:run    \n+```\n+\n+NOTE: With dev mode of Quarkus you can take advantage of hot reload for business assets like processes, rules, decision tables and java code. No need to redeploy or restart your running application.\n+\n+\n+### Compile and Run using uberjar\n+\n+```\n+mvn clean package \n+```\n+  \n+To run the generated native executable, generated in `target/`, execute\n+\n+```\n+java -jar target/process-mongodb-persistence-springboot.jar\n+```\n+\n+### OpenAPI (Swagger) documentation\n+[Specification at swagger.io](https://swagger.io/docs/specification/about/)\n+\n+You can take a look at the [OpenAPI definition](http://localhost:8080/docs/swagger.json) - automatically generated and included in this service - to determine all available operations exposed by this service. For easy readability you can visualize the OpenAPI definition file using a UI tool like for example available [Swagger UI](https://editor.swagger.io).\n+\n+In addition, various clients to interact with this service can be easily generated using this OpenAPI definition.\n+\n+\n+### Submit a deal\n+\n+To make use of this application it is as simple as putting a sending request to `http://localhost:8080/deals`  with following content \n+\n+```\n+{\n+\"name\" : \"my fancy deal\",\n+\"traveller\" : { \n+  \"firstName\" : \"John\", \n+  \"lastName\" : \"Doe\", \n+  \"email\" : \"jon.doe@example.com\", \n+  \"nationality\" : \"American\",\n+  \"address\" : { \n+  \t\"street\" : \"main street\", \n+  \t\"city\" : \"Boston\", \n+  \t\"zipCode\" : \"10005\", \n+  \t\"country\" : \"US\" }\n+  }\n+}\n+\n+```\n+\n+Complete curl command can be found below:\n+\n+```\n+curl -X POST -H 'Content-Type:application/json' -H 'Accept:application/json' -d '{\"name\" : \"my fancy deal\", \"traveller\" : { \"firstName\" : \"John\", \"lastName\" : \"Doe\", \"email\" : \"jon.doe@example.com\", \"nationality\" : \"American\",\"address\" : { \"street\" : \"main street\", \"city\" : \"Boston\", \"zipCode\" : \"10005\", \"country\" : \"US\" }}}' http://localhost:8080/deals\n+```\n+\n+this will then trigger the review user task that you can work.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64191e7809ee36ed3a2e316f653fb043567112f5"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjU5NTY2OnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxMTowNVrOHG-yBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxMTowNVrOHG-yBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4MjExNg==", "bodyText": "test scope should be enough here.", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r477082116", "createdAt": "2020-08-26T07:11:05Z", "author": {"login": "MarianMacik"}, "path": "process-mongodb-persistence-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,152 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>process-mongodb-persistence-springboot</artifactId>\n+  <name>Kogito Example :: Process MongoDB Persistence Spring Boot</name>\n+  <description>Kogito with MongoDB persistence - Spring Boot</description>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-dependencies</artifactId>\n+        <version>${springboot.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-bom</artifactId>\n+        <version>${kogito.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-data-mongodb</artifactId>\n+    </dependency>\n+\n+    <!-- kogito -->\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>mongodb-persistence-addon</artifactId>\n+    </dependency>\n+\n+   <dependency>\n+      <groupId>org.springframework.boot</groupId>\n+      <artifactId>spring-boot-starter-test</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+     <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>mongodb</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64191e7809ee36ed3a2e316f653fb043567112f5"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjU5OTA2OnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/src/main/java/org/acme/travels/Address.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxMjoxNlrOHG-0Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxMjoxNlrOHG-0Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4MjY1MQ==", "bodyText": "This is not needed as it is called automatically...", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r477082651", "createdAt": "2020-08-26T07:12:16Z", "author": {"login": "MarianMacik"}, "path": "process-mongodb-persistence-springboot/src/main/java/org/acme/travels/Address.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.acme.travels;\n+\n+public class Address {\n+\n+    private String street;\n+    private String city;\n+    private String zipCode;\n+    private String country;\n+\n+    public Address() {\n+\n+    }\n+\n+    public Address(String street, String city, String zipCode, String country) {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64191e7809ee36ed3a2e316f653fb043567112f5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjYwMDczOnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/src/main/java/org/acme/travels/Traveller.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxMjo1MVrOHG-1IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxMjo1MVrOHG-1IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4MjkxMg==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r477082912", "createdAt": "2020-08-26T07:12:51Z", "author": {"login": "MarianMacik"}, "path": "process-mongodb-persistence-springboot/src/main/java/org/acme/travels/Traveller.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.acme.travels;\n+\n+public class Traveller {\n+\n+    private String firstName;\n+    private String lastName;\n+    private String email;\n+    private String nationality;\n+    private Address address;\n+\n+    public Traveller() {\n+\n+    }\n+\n+    public Traveller(String firstName, String lastName, String email, String nationality, Address address) {\n+        super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64191e7809ee36ed3a2e316f653fb043567112f5"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjYwMjUyOnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/src/test/java/org/acme/deals/DealsRestIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxMzoyOFrOHG-2Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxMzoyOFrOHG-2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4MzE4Nw==", "bodyText": "Formatting.", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r477083187", "createdAt": "2020-08-26T07:13:28Z", "author": {"login": "MarianMacik"}, "path": "process-mongodb-persistence-springboot/src/test/java/org/acme/deals/DealsRestIT.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.deals;\n+\n+import java.util.Map;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.acme.travels.KogitoApplication;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.springboot.MongoDBSpringBootTestResource;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@SpringBootTest(classes = KogitoApplication.class, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ContextConfiguration(initializers = MongoDBSpringBootTestResource.Conditional.class)\n+public class DealsRestIT {\n+\n+\t@LocalServerPort\n+    int randomServerPort;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64191e7809ee36ed3a2e316f653fb043567112f5"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjYxNjY3OnYy", "diffSide": "RIGHT", "path": "process-mongodb-persistence-springboot/src/test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxNzo1NlrOHG--iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoxNzo1NlrOHG--iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA4NTMyMQ==", "bodyText": "Quarkus config is not needed as this is purely Spring Boot-based example.", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r477085321", "createdAt": "2020-08-26T07:17:56Z", "author": {"login": "MarianMacik"}, "path": "process-mongodb-persistence-springboot/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,10 @@\n+# Quarkus\n+quarkus.http.test-port=0\n+quarkus.log.console.enable=true\n+quarkus.log.console.level=INFO\n+quarkus.log.level=INFO\n+\n+# MongoDB\n+quarkus.mongodb.connection-string = mongodb://localhost:27017\n+quarkus.mongodb.database=kogito_test\n+kogito.persistence.type=mongodb", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64191e7809ee36ed3a2e316f653fb043567112f5"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NzE0NzE4OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo1MTozNlrOHHriZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwMDo1MTozNlrOHHriZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzgxNTM5Ng==", "bodyText": "@swati-kale you can just reuse the container from kogito-test-utils right? I think this is probably not needed anymore.", "url": "https://github.com/kiegroup/kogito-examples/pull/241#discussion_r477815396", "createdAt": "2020-08-27T00:51:36Z", "author": {"login": "cristianonicolai"}, "path": "pom.xml", "diffHunk": "@@ -262,6 +263,12 @@\n         <artifactId>kafka</artifactId>\n         <version>${version.testcontainers}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.testcontainers</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "126c99c099674c7c744b308dbc468bd79c8d7081"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 498, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}