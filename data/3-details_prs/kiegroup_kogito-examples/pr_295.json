{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzkyNDY2", "number": 295, "title": "[KOGITO-2053] [KOGITO-2054] Create integration tests for process-timer-quarkus/springboot", "bodyText": "https://issues.redhat.com/browse/KOGITO-2053\nhttps://issues.redhat.com/browse/KOGITO-2054\nThe integration tests are using the external Job Service, it is being fetched the same version as the examples project and started locally as a Test Resource. The needed configurations are on the pom.xml.\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\nWARNING! Please make sure you are opening your PR against master branch!\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-07-06T13:55:30Z", "url": "https://github.com/kiegroup/kogito-examples/pull/295", "merged": true, "mergeCommit": {"oid": "3a90bcdaf847337b473a994f2a19cba25f1ebd39"}, "closed": true, "closedAt": "2020-07-08T01:33:21Z", "author": {"login": "tiagodolphine"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyRj4AAH2gAyNDQ0NzkyNDY2OjQyMzlkZjY0MzRmNDQ0MzI1NWM3MzFlMmIwZmRkZWUzNjJlYzZmNTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyqNAhgH2gAyNDQ0NzkyNDY2OjM2YmVkZmZlOTcyNzcxYjQ2YTMyZmZlOGZjNGIyNGE1MmY4YzRlZDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/4239df6434f4443255c731e2b0fddee362ec6f51", "committedDate": "2020-07-06T13:49:52Z", "message": "Create integration tests for process-timer-quarkus\n\nAdding job service parameter from pom.xml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMTMxNzAx", "url": "https://github.com/kiegroup/kogito-examples/pull/295#pullrequestreview-443131701", "createdAt": "2020-07-06T14:33:05Z", "commit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDozMzowNlrOGtZ6SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDozNjozOFrOGtaEOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2MzYyNA==", "bodyText": "maybe use ${kogito.version} ?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450263624", "createdAt": "2020-07-06T14:33:06Z", "author": {"login": "cristianonicolai"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>\n+              <version>${parent.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA==", "bodyText": "shouldnt it be added as a test scope dependency?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450266168", "createdAt": "2020-07-06T14:36:38Z", "author": {"login": "cristianonicolai"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/ca9b3fb4283958c854796fbcd4ac43e85ec001ca", "committedDate": "2020-07-06T15:12:08Z", "message": "Using kogito.version for jobs-service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNDk1MjMw", "url": "https://github.com/kiegroup/kogito-examples/pull/295#pullrequestreview-443495230", "createdAt": "2020-07-07T01:04:05Z", "commit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNTgxOTIw", "url": "https://github.com/kiegroup/kogito-examples/pull/295#pullrequestreview-443581920", "createdAt": "2020-07-07T05:57:28Z", "commit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNTo1NzoyOFrOGtwHMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODo0N1rOGt1BVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzM3Nw==", "bodyText": "This field should be marked as final.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450627377", "createdAt": "2020-07-07T05:57:28Z", "author": {"login": "Sgitario"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.kie.kogito.resources.ConditionHolder;\n+import org.kie.kogito.resources.ConditionalTestResource;\n+\n+public class LocalProcessTestResource implements ConditionalTestResource<LocalProcessTestResource> {\n+\n+    private URL resource;\n+    private Process process;\n+    private final ConditionHolder condition;\n+    private String jvmArguments;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzQyNQ==", "bodyText": "This field should be marked as final.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450627425", "createdAt": "2020-07-07T05:57:37Z", "author": {"login": "Sgitario"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.kie.kogito.resources.ConditionHolder;\n+import org.kie.kogito.resources.ConditionalTestResource;\n+\n+public class LocalProcessTestResource implements ConditionalTestResource<LocalProcessTestResource> {\n+\n+    private URL resource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzU1MQ==", "bodyText": "The package \"local\" is to ambiguous for me. What about \"process\" ?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450627551", "createdAt": "2020-07-07T05:58:08Z", "author": {"login": "Sgitario"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNDk2Ng==", "bodyText": "Why are not we using the jobs service image instead of the jobs service binary? From my point of view, using the jobs service docker image from quay.io is more realistic scenario and cope with running parallel tests (right now this is not an issue as no other examples are using the jobs service resource).", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450704966", "createdAt": "2020-07-07T08:44:20Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjUxMw==", "bodyText": "If using testcontainers, the Jobs Service test resource could go to the example test utils module and be shared to other examples that might need it in the future.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450706513", "createdAt": "2020-07-07T08:46:40Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/JobServiceTestResource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import java.util.Optional;\n+\n+import org.kie.kogito.local.LocalProcessTestResource;\n+import org.kie.kogito.resources.ConditionalQuarkusTestResource;\n+\n+public class JobServiceTestResource extends ConditionalQuarkusTestResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjgzNQ==", "bodyText": "Can we move this class in a separate file or move it to the bottom?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450706835", "createdAt": "2020-07-07T08:47:09Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzUyOA==", "bodyText": "The test methods should go before the rest of methods.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707528", "createdAt": "2020-07-07T08:48:20Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {\n+        return given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(delay)\n+                .when()\n+                .post(\"/\" + path)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public String getTimerById(String id, String path) {\n+        return getTimerWithStatusCode(id, 200, path)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public Object deleteTimer(String id, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .delete(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzU5Nw==", "bodyText": "why public?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707597", "createdAt": "2020-07-07T08:48:28Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzY0OQ==", "bodyText": "why public?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707649", "createdAt": "2020-07-07T08:48:33Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzcyMQ==", "bodyText": "why public?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707721", "createdAt": "2020-07-07T08:48:40Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {\n+        return given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(delay)\n+                .when()\n+                .post(\"/\" + path)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public String getTimerById(String id, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzc5OA==", "bodyText": "why public?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707798", "createdAt": "2020-07-07T08:48:47Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {\n+        return given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(delay)\n+                .when()\n+                .post(\"/\" + path)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public String getTimerById(String id, String path) {\n+        return getTimerWithStatusCode(id, 200, path)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public Object deleteTimer(String id, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 84}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da", "committedDate": "2020-07-07T14:11:52Z", "message": "Adding process-timer-springboot integration tests and applying PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzOTUyMDI3", "url": "https://github.com/kiegroup/kogito-examples/pull/295#pullrequestreview-443952027", "createdAt": "2020-07-07T14:33:14Z", "commit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDozMzoxNFrOGuBd9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo0MToyMVrOGuB1Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMTczNQ==", "bodyText": "There is a meeting led by @radtriste  \"Examples testing with Docker images\" next Thursday to agree a solution about the current dependencies.\nFor now, using the dependency is fine with me.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450911735", "createdAt": "2020-07-07T14:33:14Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzI5Ng==", "bodyText": "The format is not correct here.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450913296", "createdAt": "2020-07-07T14:35:17Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.process.JobServiceQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceQuarkusTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS);\n+        Object id2 = getTimerById(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testCancelTimer() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS);\n+        Object id2 = deleteTimer(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        getTimerWithStatusCode(id, 204, TIMERS);\n+    }\n+\n+    //Cycle Timers Tests\n+    @Test\n+    public void testTimerCycle() {\n+        String id = createTimer(new Delay(\"R2/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testDeleteTimerCycle() {\n+        String id = createTimer(new Delay(\"R20/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_CYCLE);\n+    }\n+\n+    //Boundary Timers Tests\n+    @Test\n+    public void testBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS_ON_TASK));\n+    }\n+\n+    @Test\n+    public void testDeleteBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_ON_TASK);\n+    }\n+\n+    private ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    private String createTimer(Delay delay, String path) {\n+        return given()\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzk0OQ==", "bodyText": "This class should be in a separate file or at the bottom of this class.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450913949", "createdAt": "2020-07-07T14:36:12Z", "author": {"login": "Sgitario"}, "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNDg4NA==", "bodyText": "Why aren't you using the @container and @testcontainers annotations for sprintboot? This way, you don't need to start/stop the resource.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450914884", "createdAt": "2020-07-07T14:37:29Z", "author": {"login": "Sgitario"}, "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+    private static JobServiceTestResource jobServiceTestResource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNjI3MA==", "bodyText": "Wrong format here. Are you using the formatter from here?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450916270", "createdAt": "2020-07-07T14:39:26Z", "author": {"login": "Sgitario"}, "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+    private static JobServiceTestResource jobServiceTestResource;\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS);\n+        Object id2 = getTimerById(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testCancelTimer() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS);\n+        Object id2 = deleteTimer(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        getTimerWithStatusCode(id, 204, TIMERS);\n+    }\n+\n+    //Cycle Timers Tests\n+    @Test\n+    public void testTimerCycle() {\n+        String id = createTimer(new Delay(\"R2/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testDeleteTimerCycle() {\n+        String id = createTimer(new Delay(\"R20/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_CYCLE);\n+    }\n+\n+    //Boundary Timers Tests\n+    @Test\n+    public void testBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS_ON_TASK));\n+    }\n+\n+    @Test\n+    public void testDeleteBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_ON_TASK);\n+    }\n+\n+    @BeforeAll\n+    public static void beforeAll() {\n+        jobServiceTestResource = new JobServiceTestResource();\n+        jobServiceTestResource.start();\n+    }\n+\n+    @BeforeEach\n+    public void beforeEach(){\n+        RestAssured.port = httpPort;\n+    }\n+\n+    @AfterAll\n+    public static void destroy() {\n+        jobServiceTestResource.stop();\n+    }\n+\n+    private ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    private String createTimer(Delay delay, String path) {\n+        return given()\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNzcwMg==", "bodyText": "I think this property is not used (persistence is not needed here)", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450917702", "createdAt": "2020-07-07T14:41:21Z", "author": {"login": "Sgitario"}, "path": "process-timer-springboot/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,11 @@\n+server.address=0.0.0.0\n+\n+spring.mvc.servlet.path=/docs\n+\n+resteasy.jaxrs.scan-packages=org.kie.kogito.**\n+\n+kogito.jobs-service.url=http://localhost:8086\n+kogito.service.url=http://localhost:8081\n+server.port=8081\n+\n+infinispan.remote.server-list=127.0.0.1:11222", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "766e078c63384331c1ec29c0d5228b4283cc7be5", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/766e078c63384331c1ec29c0d5228b4283cc7be5", "committedDate": "2020-07-07T16:05:33Z", "message": "Applying PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36bedffe972771b46a32ffe8fc4b24a52f8c4ed1", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/36bedffe972771b46a32ffe8fc4b24a52f8c4ed1", "committedDate": "2020-07-07T18:32:31Z", "message": "Fix broken tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4518, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}