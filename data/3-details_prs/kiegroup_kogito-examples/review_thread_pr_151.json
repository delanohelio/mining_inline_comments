{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzA2ODkx", "number": 151, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyMjo0MVrODt-gOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxNToyOVrOD51oEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTM2NTY5OnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyMjo0MVrOF_tpyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjozMTo1M1rOF_zirQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1MjU4NQ==", "bodyText": "why linux-only? (also: \"OS\").\nMaybe we can just write features specifically work best on Linux in the descriotion. If it's because of just docker, then that there is Docker for windows/mac; in that case, you may write e.g. \"Optional: a working Docker environment\"", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402352585", "createdAt": "2020-04-02T14:22:41Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0OTA2OQ==", "bodyText": "My bad, I meant that given that I provided a run-compose.sh of course if was designed for Linux. But the feature itself is not linux-specific. I'll fix this", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402449069", "createdAt": "2020-04-02T16:31:53Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1MjU4NQ=="}, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTM4NDAxOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyNjozNlrOF_t1ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNToyM1rOF_1PMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTU1Ng==", "bodyText": "i think you want to add a newline here", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402355556", "createdAt": "2020-04-02T14:26:36Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3Njg0OQ==", "bodyText": "fixed", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402476849", "createdAt": "2020-04-02T17:15:23Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTU1Ng=="}, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTM4NTQwOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyNjo1NFrOF_t2RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNjoxNVrOF_1RKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTc4MQ==", "bodyText": "it's better to explain the steps rather than just add a script. You may then add \"script run-compose.sh\" is provided for convenience.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402355781", "createdAt": "2020-04-02T14:26:54Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NzM1NA==", "bodyText": "Yep, I updated the readme accordingly", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402477354", "createdAt": "2020-04-02T17:16:15Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NTc4MQ=="}, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTM4NzIwOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyNzoxOFrOF_t3dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNjoyOFrOF_1Rww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjA4Ng==", "bodyText": "we usually write curl requests inline without scripts", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402356086", "createdAt": "2020-04-02T14:27:18Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NzUwNw==", "bodyText": "fixed", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402477507", "createdAt": "2020-04-02T17:16:28Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjA4Ng=="}, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTM4ODAwOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoyNzoyNFrOF_t37Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNjozMFrOF_1R0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjIwNQ==", "bodyText": "same", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402356205", "createdAt": "2020-04-02T14:27:24Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh\n+\n+```\n+\n+the service will return `[\"hello\", \"world\"]`\n+\n+### POST /LoanEligibility\n+\n+Post:\n+\n+```sh\n+./sample-requests/query-dmn-loan.sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NzUyMg==", "bodyText": "fixed", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402477522", "createdAt": "2020-04-02T17:16:30Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh\n+\n+```\n+\n+the service will return `[\"hello\", \"world\"]`\n+\n+### POST /LoanEligibility\n+\n+Post:\n+\n+```sh\n+./sample-requests/query-dmn-loan.sh", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1NjIwNQ=="}, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTQwMjkxOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDozMDoyN1rOF_uBeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNzowOVrOF_1TZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1ODY0OA==", "bodyText": "some people use hey", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402358648", "createdAt": "2020-04-02T14:30:27Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh\n+\n+```\n+\n+the service will return `[\"hello\", \"world\"]`\n+\n+### POST /LoanEligibility\n+\n+Post:\n+\n+```sh\n+./sample-requests/query-dmn-loan.sh\n+\n+```\n+\n+the service will return the decision results. You can generate some traffic with \n+\n+```sh\n+while true; do ./sample-requests/query-dmn-loan.sh; done", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3NzkyNg==", "bodyText": "I just removed that, I understand it's a bit out of scope :)", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402477926", "createdAt": "2020-04-02T17:17:09Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,113 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  - Linux SO \n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/generated-sources/kogito/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance and that's it.\n+\n+The use case is summarized in the following schema: \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+Run\n+```sh\n+cd  docker-compose\n+./run-compose.sh\n+```\n+It will compile the app and spin it up together with a grafana and prometheus instances.\n+\n+## Example Usage\n+\n+Once the service is up and running, you can use the following example to interact with the service.\n+\n+### POST /hello\n+\n+Post \"hello\":\n+\n+```sh\n+./sample-requests/query-drl-hello.sh\n+\n+```\n+\n+the service will return `[\"hello\", \"world\"]`\n+\n+### POST /LoanEligibility\n+\n+Post:\n+\n+```sh\n+./sample-requests/query-dmn-loan.sh\n+\n+```\n+\n+the service will return the decision results. You can generate some traffic with \n+\n+```sh\n+while true; do ./sample-requests/query-dmn-loan.sh; done", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM1ODY0OA=="}, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTQxODY2OnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/sample-requests/query-dmn-fraud.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDozMzozOVrOF_uLaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxNzo1OFrOF_1Vmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTE5Mg==", "bodyText": "you can format this more neatly in the README using:\ncurl -X POST http://localhost:8080/fraud-scoring \\\n  -H 'Content-Type: application/json' -d '{\n  \"Transactions\": [\n    {\n      \"tRiskScore\": 1,\n      \"tCardType\": \"Debit\",\n      \"tAuthCode\": \"Authorized\",\n      \"tLocation\": \"Local\"\n    }\n  ]\n}' \nis -L (--location) needed?", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402361192", "createdAt": "2020-04-02T14:33:39Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/sample-requests/query-dmn-fraud.sh", "diffHunk": "@@ -0,0 +1 @@\n+curl --location --request POST 'http://localhost:8080/fraud-scoring' --header 'Content-Type: application/json' -d \"{  \\\"Transactions\\\" : [{\\\"tRiskScore\\\" : 1, \\\"tCardType\\\" : \\\"Debit\\\", \\\"tAuthCode\\\" : \\\"Authorized\\\", \\\"tLocation\\\" : \\\"Local\\\"}]}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3ODQ5MA==", "bodyText": "I removed the fraud dmn, 'cause it was not needed. I updated the loan eligibility query accordingly", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402478490", "createdAt": "2020-04-02T17:17:58Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/sample-requests/query-dmn-fraud.sh", "diffHunk": "@@ -0,0 +1 @@\n+curl --location --request POST 'http://localhost:8080/fraud-scoring' --header 'Content-Type: application/json' -d \"{  \\\"Transactions\\\" : [{\\\"tRiskScore\\\" : 1, \\\"tCardType\\\" : \\\"Debit\\\", \\\"tAuthCode\\\" : \\\"Authorized\\\", \\\"tLocation\\\" : \\\"Local\\\"}]}\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTE5Mg=="}, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTQyMTg1OnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/docker-compose/run-compose.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDozNDoxNlrOF_uNUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzoxODowNlrOF_1V6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTY4MA==", "bodyText": "there should be no need to use sudo generally, and I would discourage to put it in a readme", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402361680", "createdAt": "2020-04-02T14:34:16Z", "author": {"login": "evacchi"}, "path": "dmn-drools-quarkus-metrics/docker-compose/run-compose.sh", "diffHunk": "@@ -0,0 +1,9 @@\n+#!/bin/bash\n+\n+cd ../\n+mvn clean package\n+\n+cd docker-compose/ \n+cp ../target/resources/dashboards/* grafana/provisioning/dashboards\n+\n+sudo docker-compose build && sudo docker-compose up", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ3ODU2OA==", "bodyText": "fixed", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r402478568", "createdAt": "2020-04-02T17:18:06Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/docker-compose/run-compose.sh", "diffHunk": "@@ -0,0 +1,9 @@\n+#!/bin/bash\n+\n+cd ../\n+mvn clean package\n+\n+cd docker-compose/ \n+cp ../target/resources/dashboards/* grafana/provisioning/dashboards\n+\n+sudo docker-compose build && sudo docker-compose up", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM2MTY4MA=="}, "originalCommit": {"oid": "c9330be04eea19f3ad71168aff1c1954b0b45b79"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzA2ODgyOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/Dockerfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToxNjo0NlrOGOD5rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoyNToyMVrOGP22eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5NzE2Nw==", "bodyText": "Do we need to copy everything?", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417397167", "createdAt": "2020-04-29T15:16:46Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/Dockerfile", "diffHunk": "@@ -0,0 +1,4 @@\n+FROM openjdk:11\n+COPY . /", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4MDUwNQ==", "bodyText": "Thx for the comment! I've improved the Dockerfile, let me know if that's ok for you and I'll resolve the comment", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419280505", "createdAt": "2020-05-04T08:25:21Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/Dockerfile", "diffHunk": "@@ -0,0 +1,4 @@\n+FROM openjdk:11\n+COPY . /", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5NzE2Nw=="}, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzA3ODYzOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToxODo0OVrOGOD_zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoyNToyOVrOGP22uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5ODczMg==", "bodyText": "Just a typo two kinds.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417398732", "createdAt": "2020-04-29T15:18:49Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,109 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/resources/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance.\n+\n+The use case is summarized in the following schema:\n+ \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4MDU2OQ==", "bodyText": "fixed", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419280569", "createdAt": "2020-05-04T08:25:29Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,109 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/resources/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance.\n+\n+The use case is summarized in the following schema:\n+ \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM5ODczMg=="}, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzEyNjAwOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/docker-compose/prometheus/prometheus.yml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNToyOToxM1rOGOEe7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo1MzowOVrOGSHh2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNjcwMg==", "bodyText": "Shouldn't this be localhost instead of hello?", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417406702", "createdAt": "2020-04-29T15:29:13Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/docker-compose/prometheus/prometheus.yml", "diffHunk": "@@ -0,0 +1,13 @@\n+# A scrape configuration containing exactly one endpoint to scrape:\n+scrape_configs:\n+  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n+  - job_name: 'kogito-app'\n+\n+    scrape_interval: 10s\n+\n+    metrics_path: /metrics\n+\n+    static_configs:\n+      - targets: ['hello:8080'] ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4MzkzNg==", "bodyText": "Hi, nope: this container is running in the docker-compose enviroment and the kogito-app is reachable on hello and not localhost", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419083936", "createdAt": "2020-05-03T10:40:43Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/docker-compose/prometheus/prometheus.yml", "diffHunk": "@@ -0,0 +1,13 @@\n+# A scrape configuration containing exactly one endpoint to scrape:\n+scrape_configs:\n+  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n+  - job_name: 'kogito-app'\n+\n+    scrape_interval: 10s\n+\n+    metrics_path: /metrics\n+\n+    static_configs:\n+      - targets: ['hello:8080'] ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNjcwMg=="}, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1MDkwNQ==", "bodyText": "I see now, thanks for explanation.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r421650905", "createdAt": "2020-05-07T16:53:09Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/docker-compose/prometheus/prometheus.yml", "diffHunk": "@@ -0,0 +1,13 @@\n+# A scrape configuration containing exactly one endpoint to scrape:\n+scrape_configs:\n+  # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.\n+  - job_name: 'kogito-app'\n+\n+    scrape_interval: 10s\n+\n+    metrics_path: /metrics\n+\n+    static_configs:\n+      - targets: ['hello:8080'] ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNjcwMg=="}, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzEzMjE5OnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozMDozM1rOGOEjDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODoyNjoyMFrOGP24Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNzc1OA==", "bodyText": "This sounds like it should be done as a part of the script, but it is already written in the yaml file, so maybe a little rewording might help.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417407758", "createdAt": "2020-04-29T15:30:33Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,109 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/resources/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance.\n+\n+The use case is summarized in the following schema:\n+ \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+A script `docker-compose/run-compose.sh` is provided to demonstrate how to inject the generated dashboards in the volume of the grafana container:\n+ 1. the generated dashboards are copied from `target/resources/dashboards/` to the directory `docker-compose/grafana/provisioning/dashboards` \n+ 2. The volumes of the grafana container are properly set in the `docker-compose.yml` file, so that the dashboards are properly loaded at startup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI4MDk4Mg==", "bodyText": "You are right, I've changed it a bit. Let me know if you are fine with that and I'll close the comment", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419280982", "createdAt": "2020-05-04T08:26:20Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/README.md", "diffHunk": "@@ -0,0 +1,109 @@\n+# Drools + Quarkus + Runtime metrics\n+\n+## Description\n+\n+This example demonstrates how to enable and consume the runtime metrics monitoring feature in Kogito. \n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed \n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+  \n+### How to enable the feature\n+\n+Import the following dependency in your `pom.xml`:\n+\n+```XML\n+<dependency>\n+ <groupId>org.kie.kogito</groupId>\n+ <artifactId>monitoring-prometheus-addon</artifactId>\n+</dependency>\n+```\n+\n+And add the following class in your quarkus project: \n+\n+```Java\n+package org.kie.kogito.examples;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.ext.Provider;\n+\n+import org.kie.addons.monitoring.system.interceptor.MetricsInterceptor;\n+\n+@Provider\n+public class MyInterceptor extends MetricsInterceptor {\n+    @Override\n+    public void filter(ContainerRequestContext requestContext, ContainerResponseContext responseContext) {\n+        super.filter(requestContext, responseContext);\n+    }\n+}\n+```\n+\n+### Architecture\n+\n+Once you compile your Quarkus project, a dashboard for each available endpoint will be generated under the path `target/resources/dashboards/`. You can then inject those grafana dashboards during the deployment of the grafana instance.\n+\n+The use case is summarized in the following schema:\n+ \n+![RuntimeMetrics](https://user-images.githubusercontent.com/18282531/76740726-a0cbdd80-676e-11ea-8cc3-63ed5cbb3ac8.png)\n+\n+To summarize, the kogito app will expose by default an endpoint `/metrics` with the prometheus variables, and a prometheus instance will simply fetch the data from there.\n+\n+### Dashboards\n+\n+Two kind of dashboards will be generated depending on the model used on the endpoint: \n+1. DRL: A basic dashboard is exported and it contains: \n+a. Total number of requests on the endpoint.\n+b. Average per minute of the number of requests on the endpoint.\n+c. Quantiles on the elapsed time to evaluate the requests.\n+d. Exception details.\n+![Screenshot from 2020-03-16 11-08-21](https://user-images.githubusercontent.com/18282531/76745628-79790e80-6776-11ea-87ca-6f56233c38a8.png)\n+2. DMN: A dashboard *containing all the \"standard\" information already described above for the DRL dashboard* plus a graph for each type of decision in the DMN model depending on the type of the decision:\n+a. if the output of the decision is a number, the quantiles for that metric (on a sliding window of 3 minutes).\n+b. If the output is a boolean or a string, the number of occurrences for each output (10 minutes average).\n+![Screenshot from 2020-03-16 10-58-45](https://user-images.githubusercontent.com/18282531/76744997-674aa080-6775-11ea-801e-5ef0484206ad.png)\n+\n+\n+You can use this default dashboards, or you can personalize them and use your custom dashboards.\n+\n+### Compile and Run in Local Dev Mode\n+\n+A script `docker-compose/run-compose.sh` is provided to demonstrate how to inject the generated dashboards in the volume of the grafana container:\n+ 1. the generated dashboards are copied from `target/resources/dashboards/` to the directory `docker-compose/grafana/provisioning/dashboards` \n+ 2. The volumes of the grafana container are properly set in the `docker-compose.yml` file, so that the dashboards are properly loaded at startup.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQwNzc1OA=="}, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzE1MTcwOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/Hello.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozNDo1N1rOGOEwAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNjo1MzozNFrOGSHiyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMTA3NA==", "bodyText": "I think that the hello part can be deleted as it is not used for the purposes of the example, right?", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417411074", "createdAt": "2020-04-29T15:34:57Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/Hello.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;\n+\n+import org.kie.kogito.rules.DataSource;\n+import org.kie.kogito.rules.DataStore;\n+import org.kie.kogito.rules.RuleUnitData;\n+\n+public class Hello implements RuleUnitData {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NDExMw==", "bodyText": "This example is covering also a drl case. So if I remove this, I should also remove the drl.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419084113", "createdAt": "2020-05-03T10:41:57Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/Hello.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;\n+\n+import org.kie.kogito.rules.DataSource;\n+import org.kie.kogito.rules.DataStore;\n+import org.kie.kogito.rules.RuleUnitData;\n+\n+public class Hello implements RuleUnitData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMTA3NA=="}, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1MTE0NQ==", "bodyText": "Right, I didn't notice the drl in the readme.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r421651145", "createdAt": "2020-05-07T16:53:34Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/Hello.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;\n+\n+import org.kie.kogito.rules.DataSource;\n+import org.kie.kogito.rules.DataStore;\n+import org.kie.kogito.rules.RuleUnitData;\n+\n+public class Hello implements RuleUnitData {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMTA3NA=="}, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzIzMjc2OnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/src/main/resources/org/kie/kogito/examples/Hello.drl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo1Mjo0OFrOGOFjDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMDo0MjowOVrOGPq3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNDE0Mw==", "bodyText": "Same here, this is not needed.", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r417424143", "createdAt": "2020-04-29T15:52:48Z", "author": {"login": "MarianMacik"}, "path": "dmn-drools-quarkus-metrics/src/main/resources/org/kie/kogito/examples/Hello.drl", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;\n+unit Hello;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA4NDEyNg==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r419084126", "createdAt": "2020-05-03T10:42:09Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/src/main/resources/org/kie/kogito/examples/Hello.drl", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;\n+unit Hello;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQyNDE0Mw=="}, "originalCommit": {"oid": "a0eac148e622cb99730de7637f5c79a4b5576343"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTcyNzU1OnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/Dockerfile", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxMjo1OVrOGRVEbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODowMTo1M1rOGSKDBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNDE3Mw==", "bodyText": "Could you try to replace base image to use UBI OpenJDK 11 one ( registry.access.redhat.com/ubi8/openjdk-11 )?\nSee https://jmtd.net/log/ubi-openjdk/\nThis should simplify a lot this Dockerfile", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420824173", "createdAt": "2020-05-06T14:12:59Z", "author": {"login": "danielezonca"}, "path": "dmn-drools-quarkus-metrics/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:8.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzM2NQ==", "bodyText": "@danielezonca do you have any pointer that shows how this image should be used to deploy applications? I don't find anything :)\nbtw the current Dockerfile is the one that Quarkus recommends", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420933365", "createdAt": "2020-05-06T16:39:19Z", "author": {"login": "r00ta"}, "path": "dmn-drools-quarkus-metrics/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:8.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNDE3Mw=="}, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MDU4Mg==", "bodyText": "You can try with\nFROM registry.access.redhat.com/ubi8/openjdk-11\n\nCOPY target/greeter.jar /deployments/greeter.jar\n\nEXPOSE 8080\n\nUSER 1001\n\nENTRYPOINT [ \"/deployments/run-java.sh\" ]\n\nor even\nFROM registry.access.redhat.com/ubi8/openjdk-11:latest\n\nCOPY my.jar /deployments\n\nshould work", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r421440582", "createdAt": "2020-05-07T11:43:41Z", "author": {"login": "danielezonca"}, "path": "dmn-drools-quarkus-metrics/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:8.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNDE3Mw=="}, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5MjE2NQ==", "bodyText": "Btw let's do it with another ticket so we can proceed and merge :)", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r421692165", "createdAt": "2020-05-07T18:01:53Z", "author": {"login": "danielezonca"}, "path": "dmn-drools-quarkus-metrics/Dockerfile", "diffHunk": "@@ -0,0 +1,32 @@\n+FROM registry.access.redhat.com/ubi8/ubi-minimal:8.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNDE3Mw=="}, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTczNzcxOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/Hello.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxNTowMVrOGRVKkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxNTowMVrOGRVKkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNTc0NA==", "bodyText": "License", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420825744", "createdAt": "2020-05-06T14:15:01Z", "author": {"login": "danielezonca"}, "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/Hello.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.kie.kogito.examples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTczODUyOnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/MyInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxNToxMFrOGRVLBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxNToxMFrOGRVLBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNTg2Mw==", "bodyText": "License", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420825863", "createdAt": "2020-05-06T14:15:10Z", "author": {"login": "danielezonca"}, "path": "dmn-drools-quarkus-metrics/src/main/java/org/kie/kogito/examples/MyInterceptor.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.kie.kogito.examples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTc0MDM1OnYy", "diffSide": "RIGHT", "path": "dmn-drools-quarkus-metrics/src/test/java/org/kie/kogito/examples/LoanEligibilityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxNToyOVrOGRVMEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDoxNToyOVrOGRVMEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyNjEzMQ==", "bodyText": "License", "url": "https://github.com/kiegroup/kogito-examples/pull/151#discussion_r420826131", "createdAt": "2020-05-06T14:15:29Z", "author": {"login": "danielezonca"}, "path": "dmn-drools-quarkus-metrics/src/test/java/org/kie/kogito/examples/LoanEligibilityTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.kie.kogito.examples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b038bd54650e09ca8762bbc1f2e6a8e16ee4c0e2"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 580, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}