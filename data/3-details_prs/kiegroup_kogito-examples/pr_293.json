{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzQwMTgx", "number": 293, "title": "[KOGITO-2423] Add flexible-process-quarkus example", "bodyText": "Signed-off-by: ruromero rromerom@redhat.com\nFix https://issues.redhat.com/browse/KOGITO-2423", "createdAt": "2020-07-06T12:23:22Z", "url": "https://github.com/kiegroup/kogito-examples/pull/293", "merged": true, "mergeCommit": {"oid": "24f4bed9f39886543514c873ee09fde6f213ab1f"}, "closed": true, "closedAt": "2020-07-07T13:45:09Z", "author": {"login": "ruromero"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyRp3ygBqjM1MTYwNjQ3MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcymFx2AFqTQ0MzkwNDQyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "323817ae2277217364c0ffe797d10971d8192251", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/323817ae2277217364c0ffe797d10971d8192251", "committedDate": "2020-07-06T12:22:05Z", "message": "[KOGITO-2423] Add flexible-process-quarkus example\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "e2d7bfe2e044d10cafe137c53b15b898d0a4f732", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/e2d7bfe2e044d10cafe137c53b15b898d0a4f732", "committedDate": "2020-07-06T13:56:15Z", "message": "[KOGITO-2423] Add flexible-process-quarkus example\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/154faaf0a51c375c93979566b6962d1e57b95635", "committedDate": "2020-07-06T17:17:38Z", "message": "[KOGITO-2423] Add flexible-process-quarkus example\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2d7bfe2e044d10cafe137c53b15b898d0a4f732", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/e2d7bfe2e044d10cafe137c53b15b898d0a4f732", "committedDate": "2020-07-06T13:56:15Z", "message": "[KOGITO-2423] Add flexible-process-quarkus example\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}, "afterCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/154faaf0a51c375c93979566b6962d1e57b95635", "committedDate": "2020-07-06T17:17:38Z", "message": "[KOGITO-2423] Add flexible-process-quarkus example\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjg1NzI0", "url": "https://github.com/kiegroup/kogito-examples/pull/293#pullrequestreview-443285724", "createdAt": "2020-07-06T17:45:03Z", "commit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0NTowNFrOGthKkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNzo0ODozNFrOGthRvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MjQ4Mg==", "bodyText": "Is this wid file required?", "url": "https://github.com/kiegroup/kogito-examples/pull/293#discussion_r450382482", "createdAt": "2020-07-06T17:45:04Z", "author": {"login": "tiagodolphine"}, "path": "flexible-process-quarkus/src/main/resources/ServiceDesk.wid", "diffHunk": "@@ -0,0 +1,9 @@\n+[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4NDMxNw==", "bodyText": "You could have the integration test sending requests to the REST APIs as well, wdyt?", "url": "https://github.com/kiegroup/kogito-examples/pull/293#discussion_r450384317", "createdAt": "2020-07-06T17:48:34Z", "author": {"login": "tiagodolphine"}, "path": "flexible-process-quarkus/src/test/java/org/kie/flexible/kogito/example/ServiceDeskProcessTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.flexible.kogito.example;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.flexible.kogito.example.model.Product;\n+import org.kie.flexible.kogito.example.model.State;\n+import org.kie.flexible.kogito.example.model.SupportCase;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.impl.Sig;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class ServiceDeskProcessTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNTAyNjk4", "url": "https://github.com/kiegroup/kogito-examples/pull/293#pullrequestreview-443502698", "createdAt": "2020-07-07T01:29:11Z", "commit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMToyOToxMVrOGtsHOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMjo0ODo1OFrOGttWwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2MTg1MQ==", "bodyText": "@ruromero would be worth adding an example comment from the customer as well?", "url": "https://github.com/kiegroup/kogito-examples/pull/293#discussion_r450561851", "createdAt": "2020-07-07T01:29:11Z", "author": {"login": "cristianonicolai"}, "path": "flexible-process-quarkus/README.md", "diffHunk": "@@ -0,0 +1,261 @@\n+# Flexible process\n+\n+## Description\n+\n+A quickstart project that shows the use of flexible processes.\n+\n+This example shows how to\n+\n+* make use of ad-hoc subprocesses\n+* make use of milestones\n+* make use of DMN business rule integration\n+\n+### Help Desk process\n+\n+![help desk flexible process](docs/images/process_overview.png)\n+\n+### Triage decision table\n+\n+![triage decision table](docs/images/triage_decision_table.png)\n+\n+The example shows a help desk process to allow customers creating support cases\n+that will be assigned to engineers based on the product family and name using\n+a DMN decision table. If an automatic assignment is not possible, a manual\n+assignment task will be created.\n+\n+Once assigned the support case will be set to `WAITING_FOR_OWNER` state meaning\n+that the engineer has to work on the case and provide a solution or add a\n+comment asking for more information.\n+\n+At any moment customers or engineers can add comments until the case is\n+`CLOSED`.\n+\n+The case can be set as `RESOLVED` by either an engineer or a customer. Once\n+this happens a Questionnaire task will be made available where the customer\n+can provide feedback about the case resolution.\n+\n+After the Questionnaire submission the case will be `CLOSED` and the process\n+will terminate.\n+\n+## Build and run\n+\n+### Prerequisites\n+\n+You will need:\n+\n+* Java 11+ installed\n+* Environment variable JAVA_HOME set accordingly\n+* Maven 3.6.2+ installed\n+\n+When using native image compilation, you will also need:\n+\n+* GraalVM 19.3+ installed\n+* Environment variable GRAALVM_HOME set accordingly\n+* GraalVM native image needs as well the [native-image extension](https://www.graalvm.org/docs/reference-manual/native-image/)\n+* Note that GraalVM native image compilation typically requires other packages (glibc-devel, zlib-devel and gcc) to be installed too, please refer to GraalVM installation documentation for more details.\n+\n+### Compile and Run in Local Dev Mode\n+\n+```sh\n+mvn clean compile quarkus:dev\n+```\n+\n+NOTE: With dev mode of Quarkus you can take advantage of hot reload for business assets like processes, rules, decision tables and java code. No need to redeploy or restart your running application.\n+\n+### Package and Run in JVM mode\n+\n+```sh\n+mvn clean package\n+java -jar target/flexible-process-quarkus-runner.jar\n+```\n+\n+or on windows\n+\n+```sh\n+mvn clean package\n+java -jar target\\flexible-process-quarkus-runner.jar\n+```\n+\n+### Package and Run using Local Native Image\n+\n+Note that this requires GRAALVM_HOME to point to a valid GraalVM installation\n+\n+```sh\n+mvn clean package -Pnative\n+```\n+\n+To run the generated native executable, generated in `target/`, execute\n+\n+```{bash}\n+./target/flexible-process-quarkus-runner\n+```\n+\n+## OpenAPI (Swagger) documentation\n+\n+[Specification at swagger.io](https://swagger.io/docs/specification/about/)\n+\n+You can take a look at the [OpenAPI definition](http://localhost:8080/openapi?format=json) - automatically generated and included in this service - to determine all available operations exposed by this service. For easy readability you can visualize the OpenAPI definition file using a UI tool like for example available [Swagger UI](https://editor.swagger.io).\n+\n+In addition, various clients to interact with this service can be easily generated using this OpenAPI definition.\n+\n+When running in either Quarkus Development or Native mode, we also leverage the [Quarkus OpenAPI extension](https://quarkus.io/guides/openapi-swaggerui#use-swagger-ui-for-development) that exposes [Swagger UI](http://localhost:8080/swagger-ui/) that you can use to look at available REST endpoints and send test requests.\n+\n+## Deploying with the Kogito Operator\n+\n+In the [operator](operator) directory you'll find the custom resources needed to deploy this example on OpenShift with the [Kogito Operator](https://docs.jboss.org/kogito/release/latest/html_single/#chap_kogito-deploying-on-openshift).\n+\n+## Usage example\n+\n+### Create a support case\n+\n+Given the following support case:\n+\n+```{json}\n+{\n+  \"supportCase\": {\n+    \"customer\": \"Paco the customer\",\n+    \"description\": \"Kogito is not working for some reason.\",\n+    \"product\": {\n+      \"family\": \"Middleware\",\n+      \"name\": \"Kogito\"\n+    }\n+  }\n+}\n+```\n+\n+Create a POST request to the service desk endpoint.\n+\n+```{bash}\n+curl -H 'Content-Type:application/json' -H 'Accept:application/json' -d @docs/requests/newTicket.json http://localhost:8080/serviceDesk\n+```\n+\n+Expect a response containing the ticket id and the current status of the process data where the engineer is assigned and the state is `WAITING_FOR_OWNER`:\n+\n+```{json}\n+{\n+  \"id\": \"b3c75b24-2691-4a76-902c-c9bc29ea076c\",\n+  \"supportCase\": {\n+    \"product\": {\n+      \"name\": \"Kogito\",\n+      \"family\": \"Middleware\"\n+    },\n+    \"description\": \"Kogito is not working for some reason.\",\n+    \"engineer\": \"kelly\",\n+    \"customer\": \"Paco the customer\",\n+    \"state\": \"WAITING_FOR_OWNER\",\n+    \"comments\": null,\n+    \"questionnaire\": null\n+  },\n+  \"supportGroup\": \"Kogito\"\n+}\n+```\n+\n+### Add a support comment\n+\n+As this is a flexible process, it is up to the customer or the engineer to decide when the case is `RESOLVED`. Both ends can add comments\n+and each time a comment is added the state will be updated as waiting for the other party.\n+\n+There are no pre-existing tasks for adding comments but an endpoint is available to instantiate these ad-hoc tasks.\n+\n+For that an empty post should be sent to `/serviceDesk/ReceiveSupportComment`. Note the extra flag to retreive the response headers.\n+\n+```{bash}\n+$ curl -D - -XPOST -H 'Content-Type:application/json' -H 'Accept:application/json' http://localhost:8080/serviceDesk/b3c75b24-2691-4a76-902c-c9bc29ea076c/ReceiveSupportComment\n+\n+HTTP/1.1 200 OK\n+Content-Length: 305\n+Link: </b3c75b24-2691-4a76-902c-c9bc29ea076c/ReceiveSupportComment/f3b36cf9-3953-43ae-afe6-2a48fea8a79a>; rel='instance'\n+Content-Type: application/json\n+\n+{\"id\":\"b3c75b24-2691-4a76-902c-c9bc29ea076c\",\"supportCase\":{\"product\":{\"name\":\"Kogito\",\"family\":\"Middleware\"},\"description\":\"Kogito is not working for some reason.\",\"engineer\":\"kelly\",\"customer\":\"Paco the customer\",\"state\":\"WAITING_FOR_OWNER\",\"comments\":null,\"questionnaire\":null},\"supportGroup\":\"Kogito\"}\n+```\n+\n+The response returns an HTTP Link header with the relative path of the generated task. `/b3c75b24-2691-4a76-902c-c9bc29ea076c/ReceiveSupportComment/f3b36cf9-3953-43ae-afe6-2a48fea8a79a`\n+\n+Use this path to create the comment (note the user query parameter):\n+\n+```{bash}\n+curl -H 'Content-Type:application/json' -H 'Accept:application/json' -d @docs/requests/supportComment.json http://localhost:8080/serviceDesk/b3c75b24-2691-4a76-902c-c9bc29ea076c/ReceiveSupportComment/f3b36cf9-3953-43ae-afe6-2a48fea8a79a?user=kelly\n+```\n+\n+And the data containing the comment and the updated state will be returned:\n+\n+```{json}\n+{\n+  \"id\": \"b3c75b24-2691-4a76-902c-c9bc29ea076c\",\n+  \"supportCase\": {\n+    \"product\": {\n+      \"name\": \"Kogito\",\n+      \"family\": \"Middleware\"\n+    },\n+    \"description\": \"Kogito is not working for some reason.\",\n+    \"engineer\": \"kelly\",\n+    \"customer\": \"Paco the customer\",\n+    \"state\": \"WAITING_FOR_CUSTOMER\",\n+    \"comments\": [\n+      {\n+        \"author\": \"kelly\",\n+        \"date\": 1594034179.628926,\n+        \"text\": \"Have you tried to switch it off and on again?\"\n+      }\n+    ],\n+    \"questionnaire\": null\n+  },\n+  \"supportGroup\": \"Kogito\"\n+}\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2MjQ1MA==", "bodyText": "@ruromero mvnw and .mvn are already added at the root of the kogito-examples project, I don't think we need it again here.", "url": "https://github.com/kiegroup/kogito-examples/pull/293#discussion_r450562450", "createdAt": "2020-07-07T01:31:24Z", "author": {"login": "cristianonicolai"}, "path": "flexible-process-quarkus/mvnw", "diffHunk": "@@ -0,0 +1,310 @@\n+#!/bin/sh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2Njk2Nw==", "bodyText": "not needed? :)", "url": "https://github.com/kiegroup/kogito-examples/pull/293#discussion_r450566967", "createdAt": "2020-07-07T01:48:57Z", "author": {"login": "cristianonicolai"}, "path": "flexible-process-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,118 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>kogito-examples</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>flexible-process-quarkus</artifactId>\n+  <name>Kogito Example :: Flexible Process - Quarkus</name>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-quarkus-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-quarkus</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-arc</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2NzkxMw==", "bodyText": "@ruromero why not simply return the SupportCase object instead of recreating?", "url": "https://github.com/kiegroup/kogito-examples/pull/293#discussion_r450567913", "createdAt": "2020-07-07T01:52:31Z", "author": {"login": "cristianonicolai"}, "path": "flexible-process-quarkus/src/main/java/org/kie/flexible/kogito/example/service/CommentService.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.flexible.kogito.example.service;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.flexible.kogito.example.model.Comment;\n+import org.kie.flexible.kogito.example.model.State;\n+import org.kie.flexible.kogito.example.model.SupportCase;\n+\n+import static org.kie.flexible.kogito.example.model.State.WAITING_FOR_CUSTOMER;\n+import static org.kie.flexible.kogito.example.model.State.WAITING_FOR_OWNER;\n+\n+@ApplicationScoped\n+public class CommentService {\n+\n+    public SupportCase addCustomerComment(SupportCase supportCase, String comment, String author) {\n+        return addComment(supportCase, author, comment, WAITING_FOR_OWNER);\n+    }\n+\n+    public SupportCase addSupportComment(SupportCase supportCase, String comment, String author) {\n+        return addComment(supportCase, author, comment, WAITING_FOR_CUSTOMER);\n+    }\n+\n+    private SupportCase addComment(SupportCase supportCase, String author, String comment, State newState) {\n+        SupportCase sCase = new SupportCase(supportCase).addComment(new Comment().setAuthor(author).setText(comment));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2ODA1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public SupportCase close(SupportCase supportCase, int evaluation, String comment) {\n          \n          \n            \n                public SupportCase close(SupportCase supportCase, Integer evaluation, String comment) {", "url": "https://github.com/kiegroup/kogito-examples/pull/293#discussion_r450568051", "createdAt": "2020-07-07T01:53:04Z", "author": {"login": "cristianonicolai"}, "path": "flexible-process-quarkus/src/main/java/org/kie/flexible/kogito/example/service/StateService.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.flexible.kogito.example.service;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.flexible.kogito.example.model.Questionnaire;\n+import org.kie.flexible.kogito.example.model.State;\n+import org.kie.flexible.kogito.example.model.SupportCase;\n+\n+@ApplicationScoped\n+public class StateService {\n+\n+    public void resolve() {\n+    }\n+\n+    public SupportCase resolve(SupportCase supportCase) {\n+        return new SupportCase(supportCase).setState(State.RESOLVED);\n+    }\n+\n+    public SupportCase close(SupportCase supportCase, int evaluation, String comment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2ODExNg==", "bodyText": "same, I guess no need to recreate the object", "url": "https://github.com/kiegroup/kogito-examples/pull/293#discussion_r450568116", "createdAt": "2020-07-07T01:53:20Z", "author": {"login": "cristianonicolai"}, "path": "flexible-process-quarkus/src/main/java/org/kie/flexible/kogito/example/service/StateService.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.flexible.kogito.example.service;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.kie.flexible.kogito.example.model.Questionnaire;\n+import org.kie.flexible.kogito.example.model.State;\n+import org.kie.flexible.kogito.example.model.SupportCase;\n+\n+@ApplicationScoped\n+public class StateService {\n+\n+    public void resolve() {\n+    }\n+\n+    public SupportCase resolve(SupportCase supportCase) {\n+        return new SupportCase(supportCase).setState(State.RESOLVED);\n+    }\n+\n+    public SupportCase close(SupportCase supportCase, int evaluation, String comment) {\n+        return new SupportCase(supportCase)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MjEwMA==", "bodyText": "the expectation is that this will be released as part of 0.12 so I feel that shouldnt merge it, wdyt?", "url": "https://github.com/kiegroup/kogito-examples/pull/293#discussion_r450582100", "createdAt": "2020-07-07T02:48:29Z", "author": {"login": "cristianonicolai"}, "path": "flexible-process-quarkus/src/main/resources/ServiceDesk.wid", "diffHunk": "@@ -0,0 +1,9 @@\n+[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4MjQ4Mg=="}, "originalCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU4MjIwOQ==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-examples/pull/293#discussion_r450582209", "createdAt": "2020-07-07T02:48:58Z", "author": {"login": "cristianonicolai"}, "path": "flexible-process-quarkus/src/test/java/org/kie/flexible/kogito/example/ServiceDeskProcessTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.flexible.kogito.example;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.flexible.kogito.example.model.Product;\n+import org.kie.flexible.kogito.example.model.State;\n+import org.kie.flexible.kogito.example.model.SupportCase;\n+import org.kie.kogito.Model;\n+import org.kie.kogito.process.Process;\n+import org.kie.kogito.process.ProcessInstance;\n+import org.kie.kogito.process.WorkItem;\n+import org.kie.kogito.process.impl.Sig;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+\n+@QuarkusTest\n+public class ServiceDeskProcessTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM4NDMxNw=="}, "originalCommit": {"oid": "154faaf0a51c375c93979566b6962d1e57b95635"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bce19e11ffb25d2710fff2f716b5067c01e016b", "author": {"user": {"login": "ruromero", "name": "Ruben Romero Montes"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/0bce19e11ffb25d2710fff2f716b5067c01e016b", "committedDate": "2020-07-07T11:20:54Z", "message": "[KOGITO-2423] Apply review changes\n\nSigned-off-by: ruromero <rromerom@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzODA2NTI5", "url": "https://github.com/kiegroup/kogito-examples/pull/293#pullrequestreview-443806529", "createdAt": "2020-07-07T11:37:32Z", "commit": {"oid": "0bce19e11ffb25d2710fff2f716b5067c01e016b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzOTA0NDI3", "url": "https://github.com/kiegroup/kogito-examples/pull/293#pullrequestreview-443904427", "createdAt": "2020-07-07T13:45:00Z", "commit": {"oid": "0bce19e11ffb25d2710fff2f716b5067c01e016b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4513, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}