{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzkyNDY2", "number": 295, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDozMzowNlrOELtmXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo0MToyMVrOEMG_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzE2ODkzOnYy", "diffSide": "RIGHT", "path": "process-timer-quarkus/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDozMzowNlrOGtZ6SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTowNDozM1rOGtbQoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2MzYyNA==", "bodyText": "maybe use ${kogito.version} ?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450263624", "createdAt": "2020-07-06T14:33:06Z", "author": {"login": "cristianonicolai"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>\n+              <version>${parent.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4NTcyOQ==", "bodyText": "+1 I'll change it.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450285729", "createdAt": "2020-07-06T15:04:33Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>\n+              <version>${parent.version}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2MzYyNA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzE4NTY5OnYy", "diffSide": "RIGHT", "path": "process-timer-quarkus/pom.xml", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNDozNjozOFrOGtaEOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDozMzoxNFrOGuBd9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA==", "bodyText": "shouldnt it be added as a test scope dependency?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450266168", "createdAt": "2020-07-06T14:36:38Z", "author": {"login": "cristianonicolai"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI4Nzg5Mw==", "bodyText": "in fact, this is not a dependency, I'm just copying the jar file during the build into a specified directory on the phase generate-test-resources, so there is no scope to be set. Here there is more info https://maven.apache.org/plugins/maven-dependency-plugin/copy-mojo.html#artifactItems", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450287893", "createdAt": "2020-07-06T15:07:45Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMxODQ5MQ==", "bodyText": "Yep, but in case the artifact is not available in the repo... will this config also resolve/download the dependency?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450318491", "createdAt": "2020-07-06T15:53:24Z", "author": {"login": "cristianonicolai"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MjUwNA==", "bodyText": "yeah, in the same way as other dependencies, if it is not on the local maven repo it will fetch the remote repo... So when running on Jenkins the kogito-apps should be built before the examples on the pipeline.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450342504", "createdAt": "2020-07-06T16:32:03Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNDk2Ng==", "bodyText": "Why are not we using the jobs service image instead of the jobs service binary? From my point of view, using the jobs service docker image from quay.io is more realistic scenario and cope with running parallel tests (right now this is not an issue as no other examples are using the jobs service resource).", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450704966", "createdAt": "2020-07-07T08:44:20Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMzM4Mg==", "bodyText": "@Sgitario the problem is, we want to test jobs service integrated with the runtime during the build, and at this moment we don't have the docker image, I mean if anything breaks jobs service integration with runtime the build should fail, this step is before docker image generation. At least this is what I think it the proper approach, do you have any other idea?\n@cristianonicolai ^ wdyt? this would be the same scenario as we may have with data-index as well...", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450803382", "createdAt": "2020-07-07T11:45:40Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg2ODQ4OA==", "bodyText": "using images would be ideal but not something we can do right now or even knowing if feasible during the build pipeline. I will start the conversation but I think we should merge as is, as it already adds value for testing verification.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450868488", "createdAt": "2020-07-07T13:35:03Z", "author": {"login": "cristianonicolai"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg4OTc2MA==", "bodyText": "@cristianonicolai and @tiagodolphine correct me if I'm wrong in the next. This is the steps along all the Kogito components:\n1.- Kogito Runtimes\n2.- Kogito Examples\n3.- Kogito Apps (Jobs Service is part of this)\n4.- Images\n5.- Operator\nAny time a change is pushed to any of component, the previous stages need to be regenerated. For example, if I change the Kogito Example, the build will regenerate the kogito runtimes and then the kogito examples as stated in the Jenkinsfile.\nTherefore, using the dependency does not guarantee that is using the latest binaries of Jobs Service either or that the Jobs Service binary has been created yet as the Jobs Service is built in a later stage (stage 3) and the kogito examples can be executed in stage 2.\nLet me know if this is a possible scenario.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450889760", "createdAt": "2020-07-07T14:04:22Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDg5ODI0OQ==", "bodyText": "@Sgitario the build order is done on jenkins in the following sequence:\n\nkogito-runtimes\nkogito-apps\nkogito-examples\nmeaning that jobs service will always be built before, so using the dependency will get the artifact that was just built.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450898249", "createdAt": "2020-07-07T14:15:55Z", "author": {"login": "cristianonicolai"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkwMjk4MA==", "bodyText": "@Sgitario I think kogito-apps should be built before kogito-examples, because some examples depend on apps (like the process-timer and travel-agency). But yeah, there is no guarantee the jobs-service binary is the one built on the build pipeline unless we use specific versions were used for each build =/", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450902980", "createdAt": "2020-07-07T14:22:06Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMTczNQ==", "bodyText": "There is a meeting led by @radtriste  \"Examples testing with Docker images\" next Thursday to agree a solution about the current dependencies.\nFor now, using the dependency is fine with me.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450911735", "createdAt": "2020-07-07T14:33:14Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/pom.xml", "diffHunk": "@@ -82,8 +99,47 @@\n           </execution>\n         </executions>\n       </plugin>\n+\n+      <!-- Test Resources -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <configuration>\n+          <systemPropertyVariables>\n+            <jobs.service.path>test-resources/jobs-service.jar</jobs.service.path>\n+          </systemPropertyVariables>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>copy</id>\n+            <phase>generate-test-resources</phase>\n+            <goals>\n+              <goal>copy</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+        <configuration>\n+          <artifactItems>\n+            <artifactItem>\n+              <groupId>org.kie.kogito</groupId>\n+              <artifactId>jobs-service</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDI2NjE2OA=="}, "originalCommit": {"oid": "4239df6434f4443255c731e2b0fddee362ec6f51"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTUwNTA1OnYy", "diffSide": "RIGHT", "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNTo1NzoyOFrOGtwHMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0NzowM1rOGt65cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzM3Nw==", "bodyText": "This field should be marked as final.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450627377", "createdAt": "2020-07-07T05:57:28Z", "author": {"login": "Sgitario"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.kie.kogito.resources.ConditionHolder;\n+import org.kie.kogito.resources.ConditionalTestResource;\n+\n+public class LocalProcessTestResource implements ConditionalTestResource<LocalProcessTestResource> {\n+\n+    private URL resource;\n+    private Process process;\n+    private final ConditionHolder condition;\n+    private String jvmArguments;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNDA4Mw==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450804083", "createdAt": "2020-07-07T11:47:03Z", "author": {"login": "tiagodolphine"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.kie.kogito.resources.ConditionHolder;\n+import org.kie.kogito.resources.ConditionalTestResource;\n+\n+public class LocalProcessTestResource implements ConditionalTestResource<LocalProcessTestResource> {\n+\n+    private URL resource;\n+    private Process process;\n+    private final ConditionHolder condition;\n+    private String jvmArguments;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzM3Nw=="}, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTUwNTM3OnYy", "diffSide": "RIGHT", "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNTo1NzozN1rOGtwHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0Njo1MFrOGt64-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzQyNQ==", "bodyText": "This field should be marked as final.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450627425", "createdAt": "2020-07-07T05:57:37Z", "author": {"login": "Sgitario"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.kie.kogito.resources.ConditionHolder;\n+import org.kie.kogito.resources.ConditionalTestResource;\n+\n+public class LocalProcessTestResource implements ConditionalTestResource<LocalProcessTestResource> {\n+\n+    private URL resource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwMzk2MA==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450803960", "createdAt": "2020-07-07T11:46:50Z", "author": {"login": "tiagodolphine"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Optional;\n+\n+import org.kie.kogito.resources.ConditionHolder;\n+import org.kie.kogito.resources.ConditionalTestResource;\n+\n+public class LocalProcessTestResource implements ConditionalTestResource<LocalProcessTestResource> {\n+\n+    private URL resource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzQyNQ=="}, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTUwNjIxOnYy", "diffSide": "RIGHT", "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwNTo1ODowOFrOGtwH3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0Njo1NlrOGt65Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzU1MQ==", "bodyText": "The package \"local\" is to ambiguous for me. What about \"process\" ?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450627551", "createdAt": "2020-07-07T05:58:08Z", "author": {"login": "Sgitario"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNDAyMg==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450804022", "createdAt": "2020-07-07T11:46:56Z", "author": {"login": "tiagodolphine"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/local/LocalProcessTestResource.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.local;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDYyNzU1MQ=="}, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTk5NDQ1OnYy", "diffSide": "RIGHT", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/JobServiceTestResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0Njo0MFrOGt08UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxMTo0ODowMVrOGt67Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjUxMw==", "bodyText": "If using testcontainers, the Jobs Service test resource could go to the example test utils module and be shared to other examples that might need it in the future.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450706513", "createdAt": "2020-07-07T08:46:40Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/JobServiceTestResource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import java.util.Optional;\n+\n+import org.kie.kogito.local.LocalProcessTestResource;\n+import org.kie.kogito.resources.ConditionalQuarkusTestResource;\n+\n+public class JobServiceTestResource extends ConditionalQuarkusTestResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgwNDU4Mw==", "bodyText": "check my comment here #295 (comment)", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450804583", "createdAt": "2020-07-07T11:48:01Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/JobServiceTestResource.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import java.util.Optional;\n+\n+import org.kie.kogito.local.LocalProcessTestResource;\n+import org.kie.kogito.resources.ConditionalQuarkusTestResource;\n+\n+public class JobServiceTestResource extends ConditionalQuarkusTestResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjUxMw=="}, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTk5NjY2OnYy", "diffSide": "RIGHT", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NzowOVrOGt09kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0NzowOVrOGt09kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNjgzNQ==", "bodyText": "Can we move this class in a separate file or move it to the bottom?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450706835", "createdAt": "2020-07-07T08:47:09Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAwMDk0OnYy", "diffSide": "RIGHT", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODoyMFrOGt1ASA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODoyMFrOGt1ASA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzUyOA==", "bodyText": "The test methods should go before the rest of methods.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707528", "createdAt": "2020-07-07T08:48:20Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {\n+        return given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(delay)\n+                .when()\n+                .post(\"/\" + path)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public String getTimerById(String id, String path) {\n+        return getTimerWithStatusCode(id, 200, path)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public Object deleteTimer(String id, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .delete(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAwMTMxOnYy", "diffSide": "RIGHT", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODoyOFrOGt1AjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODoyOFrOGt1AjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzU5Nw==", "bodyText": "why public?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707597", "createdAt": "2020-07-07T08:48:28Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAwMTY2OnYy", "diffSide": "RIGHT", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODozM1rOGt1AwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODozM1rOGt1AwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzY0OQ==", "bodyText": "why public?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707649", "createdAt": "2020-07-07T08:48:33Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAwMjE3OnYy", "diffSide": "RIGHT", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODo0MFrOGt1BCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODo0MFrOGt1BCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzcyMQ==", "bodyText": "why public?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707721", "createdAt": "2020-07-07T08:48:40Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {\n+        return given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(delay)\n+                .when()\n+                .post(\"/\" + path)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public String getTimerById(String id, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMDAwMjY1OnYy", "diffSide": "RIGHT", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODo0N1rOGt1BVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0ODo0N1rOGt1BVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwNzc5OA==", "bodyText": "why public?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450707798", "createdAt": "2020-07-07T08:48:47Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    public static final String TIMERS = \"timers\";\n+    public static final String TIMERS_CYCLE = \"timerscycle\";\n+    public static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    public ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    public String createTimer(Delay delay, String path) {\n+        return given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(delay)\n+                .when()\n+                .post(\"/\" + path)\n+                .then()\n+                .statusCode(200)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public String getTimerById(String id, String path) {\n+        return getTimerWithStatusCode(id, 200, path)\n+                .body(\"id\", notNullValue())\n+                .extract()\n+                .path(\"id\");\n+    }\n+\n+    public Object deleteTimer(String id, String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca9b3fb4283958c854796fbcd4ac43e85ec001ca"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTMwMzEwOnYy", "diffSide": "RIGHT", "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDozNToxN1rOGuBkEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTo1ODoxN1rOGuFNnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzI5Ng==", "bodyText": "The format is not correct here.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450913296", "createdAt": "2020-07-07T14:35:17Z", "author": {"login": "Sgitario"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.process.JobServiceQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceQuarkusTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS);\n+        Object id2 = getTimerById(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testCancelTimer() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS);\n+        Object id2 = deleteTimer(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        getTimerWithStatusCode(id, 204, TIMERS);\n+    }\n+\n+    //Cycle Timers Tests\n+    @Test\n+    public void testTimerCycle() {\n+        String id = createTimer(new Delay(\"R2/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testDeleteTimerCycle() {\n+        String id = createTimer(new Delay(\"R20/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_CYCLE);\n+    }\n+\n+    //Boundary Timers Tests\n+    @Test\n+    public void testBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS_ON_TASK));\n+    }\n+\n+    @Test\n+    public void testDeleteBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_ON_TASK);\n+    }\n+\n+    private ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    private String createTimer(Delay delay, String path) {\n+        return given()\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3MzA4NQ==", "bodyText": "there was one line break\nfixed", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450973085", "createdAt": "2020-07-07T15:58:17Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-quarkus/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.process.JobServiceQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@QuarkusTest\n+@QuarkusTestResource(JobServiceQuarkusTestResource.class)\n+public class ProcessTimerIT {\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS);\n+        Object id2 = getTimerById(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testCancelTimer() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS);\n+        Object id2 = deleteTimer(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        getTimerWithStatusCode(id, 204, TIMERS);\n+    }\n+\n+    //Cycle Timers Tests\n+    @Test\n+    public void testTimerCycle() {\n+        String id = createTimer(new Delay(\"R2/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testDeleteTimerCycle() {\n+        String id = createTimer(new Delay(\"R20/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_CYCLE);\n+    }\n+\n+    //Boundary Timers Tests\n+    @Test\n+    public void testBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS_ON_TASK));\n+    }\n+\n+    @Test\n+    public void testDeleteBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_ON_TASK);\n+    }\n+\n+    private ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    private String createTimer(Delay delay, String path) {\n+        return given()\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzI5Ng=="}, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTMwNjk4OnYy", "diffSide": "RIGHT", "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDozNjoxMlrOGuBmnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTo1OTo0N1rOGuFRug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzk0OQ==", "bodyText": "This class should be in a separate file or at the bottom of this class.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450913949", "createdAt": "2020-07-07T14:36:12Z", "author": {"login": "Sgitario"}, "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NDEzOA==", "bodyText": "moved to the bottom, since it is used just on this test I'll keep here but we can move outside if needed.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450974138", "createdAt": "2020-07-07T15:59:47Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxMzk0OQ=="}, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTMxMzAyOnYy", "diffSide": "RIGHT", "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDozNzoyOVrOGuBqRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjowMjowNVrOGuFX-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNDg4NA==", "bodyText": "Why aren't you using the @container and @testcontainers annotations for sprintboot? This way, you don't need to start/stop the resource.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450914884", "createdAt": "2020-07-07T14:37:29Z", "author": {"login": "Sgitario"}, "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+    private static JobServiceTestResource jobServiceTestResource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NTczNw==", "bodyText": "if the JobSErviceTestResource were a container we could do it, but since for now, it is just a process running locally I needed to control the lifecycle here to start/stop, anyway if we go to use it as a container we can change.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450975737", "createdAt": "2020-07-07T16:02:05Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+    private static JobServiceTestResource jobServiceTestResource;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNDg4NA=="}, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTMyMTM4OnYy", "diffSide": "RIGHT", "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDozOToyNlrOGuBvrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjowNDowM1rOGuFcvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNjI3MA==", "bodyText": "Wrong format here. Are you using the formatter from here?", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450916270", "createdAt": "2020-07-07T14:39:26Z", "author": {"login": "Sgitario"}, "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+    private static JobServiceTestResource jobServiceTestResource;\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS);\n+        Object id2 = getTimerById(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testCancelTimer() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS);\n+        Object id2 = deleteTimer(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        getTimerWithStatusCode(id, 204, TIMERS);\n+    }\n+\n+    //Cycle Timers Tests\n+    @Test\n+    public void testTimerCycle() {\n+        String id = createTimer(new Delay(\"R2/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testDeleteTimerCycle() {\n+        String id = createTimer(new Delay(\"R20/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_CYCLE);\n+    }\n+\n+    //Boundary Timers Tests\n+    @Test\n+    public void testBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS_ON_TASK));\n+    }\n+\n+    @Test\n+    public void testDeleteBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_ON_TASK);\n+    }\n+\n+    @BeforeAll\n+    public static void beforeAll() {\n+        jobServiceTestResource = new JobServiceTestResource();\n+        jobServiceTestResource.start();\n+    }\n+\n+    @BeforeEach\n+    public void beforeEach(){\n+        RestAssured.port = httpPort;\n+    }\n+\n+    @AfterAll\n+    public static void destroy() {\n+        jobServiceTestResource.stop();\n+    }\n+\n+    private ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    private String createTimer(Delay delay, String path) {\n+        return given()\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3Njk1OQ==", "bodyText": "yes I use it on IDEA, but there was a  wrong linebreak, it didn't complain don't know why, anyway, fixed.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450976959", "createdAt": "2020-07-07T16:04:03Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-springboot/src/test/java/org/acme/travels/it/ProcessTimerIT.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.travels.it;\n+\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.process.JobServiceTestResource;\n+import org.kie.kogito.tests.KogitoApplication;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static io.restassured.RestAssured.given;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.with;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, classes = KogitoApplication.class)\n+@ExtendWith(SpringExtension.class)\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_CLASS) // reset spring context after each test method\n+public class ProcessTimerIT {\n+\n+    @LocalServerPort\n+    private Integer httpPort;\n+\n+    /**\n+     * Simple bean class to send as body on the requests\n+     */\n+    private class Delay {\n+\n+        String delay;\n+\n+        public Delay(String delay) {\n+            this.delay = delay;\n+        }\n+\n+        public String getDelay() {\n+            return delay;\n+        }\n+    }\n+\n+    private static final String TIMERS = \"timers\";\n+    private static final String TIMERS_CYCLE = \"timerscycle\";\n+    private static final String TIMERS_ON_TASK = \"timersOnTask\";\n+    private static JobServiceTestResource jobServiceTestResource;\n+\n+    //Timers Tests\n+    @Test\n+    public void testTimers() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS);\n+        Object id2 = getTimerById(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testCancelTimer() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS);\n+        Object id2 = deleteTimer(id, TIMERS);\n+        assertThat(id).isEqualTo(id2);\n+        getTimerWithStatusCode(id, 204, TIMERS);\n+    }\n+\n+    //Cycle Timers Tests\n+    @Test\n+    public void testTimerCycle() {\n+        String id = createTimer(new Delay(\"R2/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS));\n+    }\n+\n+    @Test\n+    public void testDeleteTimerCycle() {\n+        String id = createTimer(new Delay(\"R20/PT1S\"), TIMERS_CYCLE);\n+        String id2 = getTimerById(id, TIMERS_CYCLE);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_CYCLE);\n+    }\n+\n+    //Boundary Timers Tests\n+    @Test\n+    public void testBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT02S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        with().pollDelay(2, SECONDS)\n+                .atMost(3, SECONDS)\n+                .untilAsserted(() -> getTimerWithStatusCode(id, 204, TIMERS_ON_TASK));\n+    }\n+\n+    @Test\n+    public void testDeleteBoundaryTimersOnTask() {\n+        String id = createTimer(new Delay(\"PT030S\"), TIMERS_ON_TASK);\n+        String id2 = getTimerById(id, TIMERS_ON_TASK);\n+        assertThat(id).isEqualTo(id2);\n+        deleteTimer(id, TIMERS_ON_TASK);\n+    }\n+\n+    @BeforeAll\n+    public static void beforeAll() {\n+        jobServiceTestResource = new JobServiceTestResource();\n+        jobServiceTestResource.start();\n+    }\n+\n+    @BeforeEach\n+    public void beforeEach(){\n+        RestAssured.port = httpPort;\n+    }\n+\n+    @AfterAll\n+    public static void destroy() {\n+        jobServiceTestResource.stop();\n+    }\n+\n+    private ValidatableResponse getTimerWithStatusCode(String id, int code, String path) {\n+        return given()\n+                .accept(ContentType.JSON)\n+                .when()\n+                .get(\"/\" + path + \"/{id}\", id)\n+                .then()\n+                .statusCode(code);\n+    }\n+\n+    private String createTimer(Delay delay, String path) {\n+        return given()\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNjI3MA=="}, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTMzMDMzOnYy", "diffSide": "RIGHT", "path": "process-timer-springboot/src/test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNDo0MToyMVrOGuB1Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjowNDo1N1rOGuFe9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNzcwMg==", "bodyText": "I think this property is not used (persistence is not needed here)", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450917702", "createdAt": "2020-07-07T14:41:21Z", "author": {"login": "Sgitario"}, "path": "process-timer-springboot/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,11 @@\n+server.address=0.0.0.0\n+\n+spring.mvc.servlet.path=/docs\n+\n+resteasy.jaxrs.scan-packages=org.kie.kogito.**\n+\n+kogito.jobs-service.url=http://localhost:8086\n+kogito.service.url=http://localhost:8081\n+server.port=8081\n+\n+infinispan.remote.server-list=127.0.0.1:11222", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk3NzUyNw==", "bodyText": "yeah, I'll remove, once we add the integration test with persistence we can add it then.", "url": "https://github.com/kiegroup/kogito-examples/pull/295#discussion_r450977527", "createdAt": "2020-07-07T16:04:57Z", "author": {"login": "tiagodolphine"}, "path": "process-timer-springboot/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,11 @@\n+server.address=0.0.0.0\n+\n+spring.mvc.servlet.path=/docs\n+\n+resteasy.jaxrs.scan-packages=org.kie.kogito.**\n+\n+kogito.jobs-service.url=http://localhost:8086\n+kogito.service.url=http://localhost:8081\n+server.port=8081\n+\n+infinispan.remote.server-list=127.0.0.1:11222", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxNzcwMg=="}, "originalCommit": {"oid": "a0b7a0ae2f4d95e7bb3b25a51fa660fe8f8809da"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 560, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}