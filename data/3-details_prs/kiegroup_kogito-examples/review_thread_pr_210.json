{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNzM2ODIz", "number": 210, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjowMTo1NVrODxfhdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjowMTo1NVrODxfhdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjIzMjg0OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-greeting-springboot/README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNjowMTo1NVrOGE_YWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxMjozMlrOGF20fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NTkxMw==", "bodyText": "If the example is based on CURL requests and we're also providing swagger.json I would put here the instructions for what swagger is and where it's located, see other springboot examples for the wording.", "url": "https://github.com/kiegroup/kogito-examples/pull/210#discussion_r407885913", "createdAt": "2020-04-14T06:01:55Z", "author": {"login": "jstastny-cz"}, "path": "serverless-workflow-greeting-springboot/README.md", "diffHunk": "@@ -0,0 +1,128 @@\n+# Kogito Serverless Workflow - Greeting Example\n+\n+## Description\n+\n+This example contains two simple greeting workflow services. \n+The services are described using both JSON and YAML formats as defined in the \n+[CNCF Serverless Workflow specification](https://github.com/cncf/wg-serverless/tree/master/workflow/spec).\n+\n+The workflow expects as JSON input containing the name of the person to greet, and the language in \n+which to greet them in\n+(see details in the [Submit a request](#Submit-a-request) section).\n+\n+The workflow starts with a SWICH state, which is like a gateway. The switch state \n+decides which language to greet the person in based on the workflow input \"language\" parameter.\n+Depending on the language the workflow then injects the language-based greeting via RELAY states.\n+Relay states are just \"pass\" states which do no execute any functions and only have the ability\n+to inject data into the workflow.\n+The relay states then transition to the OPERATION state which call a \"sysout\" function passing it \n+input parameter containing the greeting and the name of the person to greet: \"$.greeting $.name\".\n+The function then prints out the greeting to the console.\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+### Compile and Run in Local Dev Mode\n+\n+```sh\n+mvn clean compile spring-boot:run\n+```\n+\n+### Package and Run using uberjar\n+\n+```sh\n+mvn clean package\n+```\n+\n+To run the generated native executable, generated in `target/`, execute\n+\n+```sh\n+java -jar target/serverless-workflow-greeting-springboot.jar\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46d9f245539175eab9eb30cb6b0d5b07c8e9be0a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4MDc2Ng==", "bodyText": "just curl. thanks.", "url": "https://github.com/kiegroup/kogito-examples/pull/210#discussion_r408080766", "createdAt": "2020-04-14T12:00:49Z", "author": {"login": "tsurdilo"}, "path": "serverless-workflow-greeting-springboot/README.md", "diffHunk": "@@ -0,0 +1,128 @@\n+# Kogito Serverless Workflow - Greeting Example\n+\n+## Description\n+\n+This example contains two simple greeting workflow services. \n+The services are described using both JSON and YAML formats as defined in the \n+[CNCF Serverless Workflow specification](https://github.com/cncf/wg-serverless/tree/master/workflow/spec).\n+\n+The workflow expects as JSON input containing the name of the person to greet, and the language in \n+which to greet them in\n+(see details in the [Submit a request](#Submit-a-request) section).\n+\n+The workflow starts with a SWICH state, which is like a gateway. The switch state \n+decides which language to greet the person in based on the workflow input \"language\" parameter.\n+Depending on the language the workflow then injects the language-based greeting via RELAY states.\n+Relay states are just \"pass\" states which do no execute any functions and only have the ability\n+to inject data into the workflow.\n+The relay states then transition to the OPERATION state which call a \"sysout\" function passing it \n+input parameter containing the greeting and the name of the person to greet: \"$.greeting $.name\".\n+The function then prints out the greeting to the console.\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+### Compile and Run in Local Dev Mode\n+\n+```sh\n+mvn clean compile spring-boot:run\n+```\n+\n+### Package and Run using uberjar\n+\n+```sh\n+mvn clean package\n+```\n+\n+To run the generated native executable, generated in `target/`, execute\n+\n+```sh\n+java -jar target/serverless-workflow-greeting-springboot.jar\n+```\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NTkxMw=="}, "originalCommit": {"oid": "46d9f245539175eab9eb30cb6b0d5b07c8e9be0a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY1MDg1MA==", "bodyText": "In that case please put here the instructions for Swagger (as is in other Spring Boot examples - mind that there's difference in those instructions between quarkus and boot examples). Usually it is after Packaging, before the first example.", "url": "https://github.com/kiegroup/kogito-examples/pull/210#discussion_r408650850", "createdAt": "2020-04-15T07:56:12Z", "author": {"login": "jstastny-cz"}, "path": "serverless-workflow-greeting-springboot/README.md", "diffHunk": "@@ -0,0 +1,128 @@\n+# Kogito Serverless Workflow - Greeting Example\n+\n+## Description\n+\n+This example contains two simple greeting workflow services. \n+The services are described using both JSON and YAML formats as defined in the \n+[CNCF Serverless Workflow specification](https://github.com/cncf/wg-serverless/tree/master/workflow/spec).\n+\n+The workflow expects as JSON input containing the name of the person to greet, and the language in \n+which to greet them in\n+(see details in the [Submit a request](#Submit-a-request) section).\n+\n+The workflow starts with a SWICH state, which is like a gateway. The switch state \n+decides which language to greet the person in based on the workflow input \"language\" parameter.\n+Depending on the language the workflow then injects the language-based greeting via RELAY states.\n+Relay states are just \"pass\" states which do no execute any functions and only have the ability\n+to inject data into the workflow.\n+The relay states then transition to the OPERATION state which call a \"sysout\" function passing it \n+input parameter containing the greeting and the name of the person to greet: \"$.greeting $.name\".\n+The function then prints out the greeting to the console.\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+### Compile and Run in Local Dev Mode\n+\n+```sh\n+mvn clean compile spring-boot:run\n+```\n+\n+### Package and Run using uberjar\n+\n+```sh\n+mvn clean package\n+```\n+\n+To run the generated native executable, generated in `target/`, execute\n+\n+```sh\n+java -jar target/serverless-workflow-greeting-springboot.jar\n+```\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NTkxMw=="}, "originalCommit": {"oid": "46d9f245539175eab9eb30cb6b0d5b07c8e9be0a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5NDIzNw==", "bodyText": "added", "url": "https://github.com/kiegroup/kogito-examples/pull/210#discussion_r408794237", "createdAt": "2020-04-15T12:12:32Z", "author": {"login": "tsurdilo"}, "path": "serverless-workflow-greeting-springboot/README.md", "diffHunk": "@@ -0,0 +1,128 @@\n+# Kogito Serverless Workflow - Greeting Example\n+\n+## Description\n+\n+This example contains two simple greeting workflow services. \n+The services are described using both JSON and YAML formats as defined in the \n+[CNCF Serverless Workflow specification](https://github.com/cncf/wg-serverless/tree/master/workflow/spec).\n+\n+The workflow expects as JSON input containing the name of the person to greet, and the language in \n+which to greet them in\n+(see details in the [Submit a request](#Submit-a-request) section).\n+\n+The workflow starts with a SWICH state, which is like a gateway. The switch state \n+decides which language to greet the person in based on the workflow input \"language\" parameter.\n+Depending on the language the workflow then injects the language-based greeting via RELAY states.\n+Relay states are just \"pass\" states which do no execute any functions and only have the ability\n+to inject data into the workflow.\n+The relay states then transition to the OPERATION state which call a \"sysout\" function passing it \n+input parameter containing the greeting and the name of the person to greet: \"$.greeting $.name\".\n+The function then prints out the greeting to the console.\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+### Compile and Run in Local Dev Mode\n+\n+```sh\n+mvn clean compile spring-boot:run\n+```\n+\n+### Package and Run using uberjar\n+\n+```sh\n+mvn clean package\n+```\n+\n+To run the generated native executable, generated in `target/`, execute\n+\n+```sh\n+java -jar target/serverless-workflow-greeting-springboot.jar\n+```\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4NTkxMw=="}, "originalCommit": {"oid": "46d9f245539175eab9eb30cb6b0d5b07c8e9be0a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 465, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}