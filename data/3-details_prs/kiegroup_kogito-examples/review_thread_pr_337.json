{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NDEyOTk3", "number": 337, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzoxOTo1NVrOEYJqlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzozNjoxNlrOEYKQdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzU5NjM5OnYy", "diffSide": "RIGHT", "path": "process-quarkus-example/src/test/java/org/kie/kogito/examples/OrdersRestIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzoxOTo1NVrOHAVWIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzoxOTo1NVrOHAVWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDExMTc3Ng==", "bodyText": "why it was expecting and error 500 before and now success?", "url": "https://github.com/kiegroup/kogito-examples/pull/337#discussion_r470111776", "createdAt": "2020-08-13T17:19:55Z", "author": {"login": "tiagodolphine"}, "path": "process-quarkus-example/src/test/java/org/kie/kogito/examples/OrdersRestIT.java", "diffHunk": "@@ -98,8 +138,16 @@ public void testOrdersWithErrorRest() {\n \n         // test adding new order\n         String addOrderPayload = \"{\\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(addOrderPayload).when()\n-                .post(\"/orders\").then().statusCode(500).body(\"id\", notNullValue()).extract().path(\"id\");\n+        String firstCreatedId = given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(addOrderPayload).when()\n+                .post(\"/orders\")\n+            .then()\n+                .statusCode(201)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a6020e7d5682b1927464fd303fe1e0796dfd63"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzY3ODQ0OnYy", "diffSide": "RIGHT", "path": "process-quarkus-example/src/test/java/org/kie/kogito/examples/OrdersRestIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzozMzo0NVrOHAWIPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODo0NzowMVrOHC9fNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNDYwNw==", "bodyText": "minor, since there is no way to check but shouldn't we keep the business key on the query param since it remains in this way?", "url": "https://github.com/kiegroup/kogito-examples/pull/337#discussion_r470124607", "createdAt": "2020-08-13T17:33:45Z", "author": {"login": "tiagodolphine"}, "path": "process-quarkus-example/src/test/java/org/kie/kogito/examples/OrdersRestIT.java", "diffHunk": "@@ -212,60 +264,41 @@ public void testOrdersWithOrderItemsAbortedRest() {\n         given().accept(ContentType.JSON).when().get(\"/orderItems\").then().statusCode(200)\n                 .body(\"$.size()\", is(0));\n     }\n-    \n-\n-    @Test\n-    public void testCreateAndGetOrderByBusinessKey() {\n-        String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders?businessKey=ORD-0001\").then().statusCode(200).body(\"id\",\n-                                                             notNullValue()).extract().path(\"id\");\n \n-        assertNotNull(firstCreatedId);\n-\n-        // get order by its business key and test\n-        given().accept(ContentType.JSON).body(orderPayload).when().get(\"/orders/ORD-0001\").then()\n-                .statusCode(200).body(\"id\",\n-                                      is(firstCreatedId));\n-        \n-        // test deleting order items by business key\n-        given().accept(ContentType.JSON).when().delete(\"/orders/ORD-0001\").then().statusCode(200);\n-        \n-        // get all orders make sure there is zero\n-        given().accept(ContentType.JSON).when().get(\"/orders\").then().statusCode(200)\n-                .body(\"$.size()\", is(0));\n-    }\n-    \n     @Test\n-    public void testCreateDuplicateOrders() {\n+    public void testCreateAndUpdateOrders() {\n         String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders?businessKey=ORD-0001\").then().statusCode(200).body(\"id\",\n+        String id = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n+                .post(\"/orders\").then().statusCode(201).body(\"id\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a6020e7d5682b1927464fd303fe1e0796dfd63"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MzcwMg==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-examples/pull/337#discussion_r471853702", "createdAt": "2020-08-18T00:58:39Z", "author": {"login": "cristianonicolai"}, "path": "process-quarkus-example/src/test/java/org/kie/kogito/examples/OrdersRestIT.java", "diffHunk": "@@ -212,60 +264,41 @@ public void testOrdersWithOrderItemsAbortedRest() {\n         given().accept(ContentType.JSON).when().get(\"/orderItems\").then().statusCode(200)\n                 .body(\"$.size()\", is(0));\n     }\n-    \n-\n-    @Test\n-    public void testCreateAndGetOrderByBusinessKey() {\n-        String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders?businessKey=ORD-0001\").then().statusCode(200).body(\"id\",\n-                                                             notNullValue()).extract().path(\"id\");\n \n-        assertNotNull(firstCreatedId);\n-\n-        // get order by its business key and test\n-        given().accept(ContentType.JSON).body(orderPayload).when().get(\"/orders/ORD-0001\").then()\n-                .statusCode(200).body(\"id\",\n-                                      is(firstCreatedId));\n-        \n-        // test deleting order items by business key\n-        given().accept(ContentType.JSON).when().delete(\"/orders/ORD-0001\").then().statusCode(200);\n-        \n-        // get all orders make sure there is zero\n-        given().accept(ContentType.JSON).when().get(\"/orders\").then().statusCode(200)\n-                .body(\"$.size()\", is(0));\n-    }\n-    \n     @Test\n-    public void testCreateDuplicateOrders() {\n+    public void testCreateAndUpdateOrders() {\n         String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders?businessKey=ORD-0001\").then().statusCode(200).body(\"id\",\n+        String id = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n+                .post(\"/orders\").then().statusCode(201).body(\"id\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNDYwNw=="}, "originalCommit": {"oid": "a8a6020e7d5682b1927464fd303fe1e0796dfd63"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NjYxNA==", "bodyText": "I don't see any benefit as businessKeys are tested in many other places and here doesn't bring any benefit.Besides as you mention, there is no way to verify it.", "url": "https://github.com/kiegroup/kogito-examples/pull/337#discussion_r472866614", "createdAt": "2020-08-19T08:47:01Z", "author": {"login": "ruromero"}, "path": "process-quarkus-example/src/test/java/org/kie/kogito/examples/OrdersRestIT.java", "diffHunk": "@@ -212,60 +264,41 @@ public void testOrdersWithOrderItemsAbortedRest() {\n         given().accept(ContentType.JSON).when().get(\"/orderItems\").then().statusCode(200)\n                 .body(\"$.size()\", is(0));\n     }\n-    \n-\n-    @Test\n-    public void testCreateAndGetOrderByBusinessKey() {\n-        String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders?businessKey=ORD-0001\").then().statusCode(200).body(\"id\",\n-                                                             notNullValue()).extract().path(\"id\");\n \n-        assertNotNull(firstCreatedId);\n-\n-        // get order by its business key and test\n-        given().accept(ContentType.JSON).body(orderPayload).when().get(\"/orders/ORD-0001\").then()\n-                .statusCode(200).body(\"id\",\n-                                      is(firstCreatedId));\n-        \n-        // test deleting order items by business key\n-        given().accept(ContentType.JSON).when().delete(\"/orders/ORD-0001\").then().statusCode(200);\n-        \n-        // get all orders make sure there is zero\n-        given().accept(ContentType.JSON).when().get(\"/orders\").then().statusCode(200)\n-                .body(\"$.size()\", is(0));\n-    }\n-    \n     @Test\n-    public void testCreateDuplicateOrders() {\n+    public void testCreateAndUpdateOrders() {\n         String orderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders?businessKey=ORD-0001\").then().statusCode(200).body(\"id\",\n+        String id = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n+                .post(\"/orders\").then().statusCode(201).body(\"id\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNDYwNw=="}, "originalCommit": {"oid": "a8a6020e7d5682b1927464fd303fe1e0796dfd63"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzY5MzMyOnYy", "diffSide": "RIGHT", "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzozNjoxNlrOHAWRhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNzozNjoxNlrOHAWRhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDEyNjk4Mg==", "bodyText": "is it necessary to set the body on the get request?", "url": "https://github.com/kiegroup/kogito-examples/pull/337#discussion_r470126982", "createdAt": "2020-08-13T17:36:16Z", "author": {"login": "tiagodolphine"}, "path": "process-springboot-example/src/test/java/org/kie/kogito/examples/demo/OrdersRestIT.java", "diffHunk": "@@ -71,120 +71,131 @@ public void setUp() {\n     }\n \n     @Test\n-    public void testCreateNewOrder() {\n-        // create order\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders\").then().statusCode(200).body(\"id\",\n-                                                             notNullValue()).extract().path(\"id\");\n-\n-        assertNotNull(firstCreatedId);\n-    }\n-\n-    @Test\n-    public void testGetOrders() {\n-        // create two orders\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders\").then().statusCode(200).body(\"id\",\n-                                                             notNullValue()).extract().path(\"id\");\n+    public void testOrdersRest() {\n+        assertNotNull(orderProcess);\n \n-        assertNotNull(firstCreatedId);\n-\n-        String secondCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders\").then().statusCode(200).body(\"id\",\n-                                                             notNullValue()).extract().path(\"id\");\n-\n-        assertNotNull(secondCreatedId);\n+        // test adding new order\n+        String addOrderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n+        String firstCreatedId = given()\n+                    .contentType(ContentType.JSON)\n+                    .accept(ContentType.JSON)\n+                    .body(addOrderPayload).when()\n+                    .post(\"/orders\")\n+                .then()\n+                    .statusCode(201)\n+                    .header(\"Location\", notNullValue())\n+                .extract().path(\"id\");\n \n-        // get all orders\n+        // test getting the created order\n         given().accept(ContentType.JSON).when().get(\"/orders\").then().statusCode(200)\n-                .body(\"$.size()\",\n-                      is(2));\n-    }\n-\n-    @Test\n-    public void testGetOrderById() {\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders\").then().statusCode(200).body(\"id\",\n-                                                             notNullValue()).extract().path(\"id\");\n-\n-        assertNotNull(firstCreatedId);\n-\n-        // get order by its id and test\n-        given().accept(ContentType.JSON).body(orderPayload).when().get(\"/orders/\" + firstCreatedId).then()\n-                .statusCode(200).body(\"id\",\n-                                      is(firstCreatedId));\n-    }\n-\n-    @Test\n-    public void testDeleteOrder() {\n-        // create two orders\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders\").then().statusCode(200).body(\"id\",\n-                                                             notNullValue()).extract().path(\"id\");\n-\n-        assertNotNull(firstCreatedId);\n-\n-        String secondCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(orderPayload).when()\n-                .post(\"/orders\").then().statusCode(200).body(\"id\",\n-                                                             notNullValue()).extract().path(\"id\");\n-\n-        assertNotNull(secondCreatedId);\n-\n-        // delete first order\n-        given().accept(ContentType.JSON).when().delete(\"/orders/\" + firstCreatedId).then().statusCode(200);\n+                .body(\"$.size()\", is(1), \"[0].id\", is(firstCreatedId));\n \n+        // test getting order by id\n+        given()\n+                .accept(ContentType.JSON)\n+            .when()\n+                .get(\"/orders/{id}\", firstCreatedId)\n+            .then()\n+                .statusCode(200)\n+                .body(\"id\", is(firstCreatedId));\n+\n+        // test delete order\n+        // first add second order...\n+        String secondCreatedId =\n+                given()\n+                    .contentType(ContentType.JSON)\n+                    .accept(ContentType.JSON)\n+                    .body(addOrderPayload)\n+                .when()\n+                    .post(\"/orders\")\n+                .then()\n+                    .statusCode(201)\n+                .extract()\n+                    .path(\"id\");\n+        // now delete the first order created\n+        given()\n+                .accept(ContentType.JSON)\n+            .when()\n+                .delete(\"/orders/{id}\", firstCreatedId)\n+            .then()\n+                .statusCode(200);\n         // get all orders make sure there is only one\n-        given().accept(ContentType.JSON).when().get(\"/orders\").then().statusCode(200)\n-                .body(\"$.size()\",\n-                      is(1),\n-                      \"[0].id\",\n-                      is(secondCreatedId));\n+        given()\n+                .accept(ContentType.JSON)\n+            .when()\n+                .get(\"/orders\")\n+            .then()\n+                .statusCode(200)\n+                .body(\"$.size()\", is(1), \"[0].id\", is(secondCreatedId));\n \n         // delete second before finishing\n-        given().accept(ContentType.JSON).when().delete(\"/orders/\" + secondCreatedId).then().statusCode(200);\n+        given()\n+                .accept(ContentType.JSON)\n+            .when()\n+                .delete(\"/orders/{id}\", secondCreatedId)\n+            .then()\n+                .statusCode(200);\n         // get all orders make sure there is zero\n-        given().accept(ContentType.JSON).when().get(\"/orders\").then().statusCode(200)\n-                .body(\"$.size()\",\n-                      is(0));\n+        given()\n+                .accept(ContentType.JSON)\n+            .when()\n+                .get(\"/orders\")\n+            .then()\n+                .statusCode(200)\n+                .body(\"$.size()\", is(0));\n     }\n \n     @Test\n     public void testOrdersWithErrorRest() {\n+        assertNotNull(orderProcess);\n \n         // test adding new order\n         String addOrderPayload = \"{\\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n-        String firstCreatedId = given().contentType(ContentType.JSON).accept(ContentType.JSON).body(addOrderPayload).when()\n-                .post(\"/orders\").then().statusCode(500).body(\"id\", notNullValue()).extract().path(\"id\");\n+        String firstCreatedId = given()\n+                .contentType(ContentType.JSON)\n+                .accept(ContentType.JSON)\n+                .body(addOrderPayload).when()\n+                .post(\"/orders\")\n+            .then()\n+                .statusCode(201)\n+                .body(\"id\", notNullValue())\n+            .extract()\n+                .path(\"id\");\n \n         // test getting the created order\n         given().accept(ContentType.JSON).when().get(\"/orders\").then().statusCode(200)\n                 .body(\"$.size()\", is(1), \"[0].id\", is(firstCreatedId));\n \n         // test retrieving error info using process management addon\n         given().accept(ContentType.JSON).when().get(\"/management/processes/demo.orders/instances/\" + firstCreatedId + \"/error\").then()\n-                .statusCode(200).body(\"id\", is(firstCreatedId));\n+        .statusCode(200).body(\"id\", is(firstCreatedId));\n \n         String fixedOrderPayload = \"{\\\"approver\\\" : \\\"john\\\", \\\"order\\\" : {\\\"orderNumber\\\" : \\\"12345\\\", \\\"shipped\\\" : false}}\";\n-        given().contentType(ContentType.JSON).accept(ContentType.JSON).body(fixedOrderPayload).when().post(\"/orders/\" + firstCreatedId).then()\n-                .statusCode(200).body(\"id\", is(firstCreatedId));\n+        given().contentType(ContentType.JSON).accept(ContentType.JSON).body(fixedOrderPayload).when().put(\"/orders/\" + firstCreatedId).then()\n+        .statusCode(200)\n+                .body(\"id\", is(firstCreatedId))\n+                .body(\"approver\", equalTo(\"john\"))\n+                .body(\"order.orderNumber\", equalTo(\"12345\"))\n+                .body(\"order.shipped\", equalTo(false));\n \n         given().accept(ContentType.JSON).when().post(\"/management/processes/demo.orders/instances/\" + firstCreatedId + \"/retrigger\").then()\n-                .statusCode(200);\n+        .statusCode(200);\n \n         // delete second before finishing\n         given().accept(ContentType.JSON).when().delete(\"/orders/\" + firstCreatedId).then().statusCode(200);\n         // get all orders make sure there is zero\n-        given().accept(ContentType.JSON).when().get(\"/orders\").then().statusCode(200)\n+        given().accept(ContentType.JSON).body(addOrderPayload).when().get(\"/orders\").then().statusCode(200)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a6020e7d5682b1927464fd303fe1e0796dfd63"}, "originalPosition": 207}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 407, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}