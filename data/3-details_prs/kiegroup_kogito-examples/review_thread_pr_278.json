{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODExMDU4", "number": 278, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjoxMzoxOFrOEGnJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMjo0N1rOEGsbJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzY4MTkyOnYy", "diffSide": "RIGHT", "path": "examples-test-utils/src/main/java/org/kie/kogito/testcontainers/KeycloakContainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjoxMzoxOFrOGlg7Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjozMDoyMVrOGlhUKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4OTk3OA==", "bodyText": "could we turn the image specs to a constant too? KEYCLOAK_IMAGE for example? so that it's in top of the class definition.", "url": "https://github.com/kiegroup/kogito-examples/pull/278#discussion_r441989978", "createdAt": "2020-06-18T06:13:18Z", "author": {"login": "jstastny-cz"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/testcontainers/KeycloakContainer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.testcontainers;\n+\n+import java.time.Duration;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+/**\n+ * This container wraps Keycloak container\n+ *\n+ */\n+public class KeycloakContainer extends ConditionalGenericContainer<KeycloakContainer> {\n+\n+    public static final String KEYCLOAK_PROPERTY = \"container.image.keycloak\";\n+\n+    private static final String REALM_FILE = \"/tmp/realm.json\";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeycloakContainer.class);\n+\n+    public KeycloakContainer() {\n+        addFixedExposedPort(8281, 8080);\n+        withEnv(\"KEYCLOAK_USER\", \"admin\");\n+        withEnv(\"KEYCLOAK_PASSWORD\", \"admin\");\n+        withEnv(\"KEYCLOAK_IMPORT\", REALM_FILE);\n+        withClasspathResourceMapping(\"testcontainers/keycloak/kogito-realm.json\", REALM_FILE, BindMode.READ_ONLY);\n+        withLogConsumer(new Slf4jLogConsumer(LOGGER));\n+        waitingFor(Wait.forHttp(\"/auth\").withStartupTimeout(Duration.ofMinutes(5)));\n+    }\n+\n+    @Override\n+    protected void preStart() {\n+        setDockerImageName(System.getProperty(KEYCLOAK_PROPERTY, \"quay.io/keycloak/keycloak:8.0.1\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d041071f21da22105db6d11a5bccfce488a72f7"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NjMyOA==", "bodyText": "Sorry, this is a leftover. I will remove it instead.", "url": "https://github.com/kiegroup/kogito-examples/pull/278#discussion_r441996328", "createdAt": "2020-06-18T06:30:21Z", "author": {"login": "Sgitario"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/testcontainers/KeycloakContainer.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.testcontainers;\n+\n+import java.time.Duration;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.BindMode;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+/**\n+ * This container wraps Keycloak container\n+ *\n+ */\n+public class KeycloakContainer extends ConditionalGenericContainer<KeycloakContainer> {\n+\n+    public static final String KEYCLOAK_PROPERTY = \"container.image.keycloak\";\n+\n+    private static final String REALM_FILE = \"/tmp/realm.json\";\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeycloakContainer.class);\n+\n+    public KeycloakContainer() {\n+        addFixedExposedPort(8281, 8080);\n+        withEnv(\"KEYCLOAK_USER\", \"admin\");\n+        withEnv(\"KEYCLOAK_PASSWORD\", \"admin\");\n+        withEnv(\"KEYCLOAK_IMPORT\", REALM_FILE);\n+        withClasspathResourceMapping(\"testcontainers/keycloak/kogito-realm.json\", REALM_FILE, BindMode.READ_ONLY);\n+        withLogConsumer(new Slf4jLogConsumer(LOGGER));\n+        waitingFor(Wait.forHttp(\"/auth\").withStartupTimeout(Duration.ofMinutes(5)));\n+    }\n+\n+    @Override\n+    protected void preStart() {\n+        setDockerImageName(System.getProperty(KEYCLOAK_PROPERTY, \"quay.io/keycloak/keycloak:8.0.1\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4OTk3OA=="}, "originalCommit": {"oid": "1d041071f21da22105db6d11a5bccfce488a72f7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzcxNjE5OnYy", "diffSide": "RIGHT", "path": "examples-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/ConditionalQuarkusResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjoyNzozNFrOGlhP9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoyNToyMlrOGli0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NTI1Mw==", "bodyText": "Since the class is called ConditionalQuarkusResource I would expect this to be a general use test resource, but it's tightly coupled with the containers, the name should reflect that too. Plus I would also keep the full substring TestResource as part of the name.\nWouldn't here be more general approach to extend the QUarkusTestResourceLifecycleManager interface by a method like boolean isEnabled() that would then be used in start/stop. That we can call ConditionalTestResource and then by all means having an abstract class that introduces the container support to be extended by particular testcontainers based test resources.", "url": "https://github.com/kiegroup/kogito-examples/pull/278#discussion_r441995253", "createdAt": "2020-06-18T06:27:34Z", "author": {"login": "jstastny-cz"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/ConditionalQuarkusResource.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.testcontainers.quarkus;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.kie.kogito.testcontainers.ConditionalGenericContainer;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+/**\n+ * Quarkus resource to be run if and only if it was enabled.\n+ */\n+public abstract class ConditionalQuarkusResource implements QuarkusTestResourceLifecycleManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d041071f21da22105db6d11a5bccfce488a72f7"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMDkyMA==", "bodyText": "If I understood correctly your comment, you are proposing either (a) to rename this class with a better name as this is tightly coupled with testcontainers, or (b) isolate it from testcontainers.\nI partly did (b). Ideally, the ConditionalGenericContainer class should be isolated as well, but this would not be compatible with the builder pattern: doing this.enableIfTestCategoryIs().withEnv(\"x\", \"y), and for spring boot, I think this is quite useful as it allows to set your container in one line.\nLet me know if you're ok with these changes. Thanks!", "url": "https://github.com/kiegroup/kogito-examples/pull/278#discussion_r442020920", "createdAt": "2020-06-18T07:25:22Z", "author": {"login": "Sgitario"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/ConditionalQuarkusResource.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.testcontainers.quarkus;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.kie.kogito.testcontainers.ConditionalGenericContainer;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+/**\n+ * Quarkus resource to be run if and only if it was enabled.\n+ */\n+public abstract class ConditionalQuarkusResource implements QuarkusTestResourceLifecycleManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NTI1Mw=="}, "originalCommit": {"oid": "1d041071f21da22105db6d11a5bccfce488a72f7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzcxODMzOnYy", "diffSide": "RIGHT", "path": "examples-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/KeycloakQuarkusResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjoyODoyMVrOGlhRQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoyNjoyN1rOGli2eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NTU4Nw==", "bodyText": "I would keep the word TestResource in names.", "url": "https://github.com/kiegroup/kogito-examples/pull/278#discussion_r441995587", "createdAt": "2020-06-18T06:28:21Z", "author": {"login": "jstastny-cz"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/KeycloakQuarkusResource.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.testcontainers.quarkus;\n+\n+import org.kie.kogito.testcontainers.KeycloakContainer;\n+\n+/**\n+ * Keycloak quarkus resource that works within the test lifecycle.\n+ *\n+ */\n+public class KeycloakQuarkusResource extends ConditionalQuarkusResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d041071f21da22105db6d11a5bccfce488a72f7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMTQ5Ng==", "bodyText": "Renamed this and InfinispanQuarkusResource.", "url": "https://github.com/kiegroup/kogito-examples/pull/278#discussion_r442021496", "createdAt": "2020-06-18T07:26:27Z", "author": {"login": "Sgitario"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/testcontainers/quarkus/KeycloakQuarkusResource.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.testcontainers.quarkus;\n+\n+import org.kie.kogito.testcontainers.KeycloakContainer;\n+\n+/**\n+ * Keycloak quarkus resource that works within the test lifecycle.\n+ *\n+ */\n+public class KeycloakQuarkusResource extends ConditionalQuarkusResource {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5NTU4Nw=="}, "originalCommit": {"oid": "1d041071f21da22105db6d11a5bccfce488a72f7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDA4NTczOnYy", "diffSide": "RIGHT", "path": "examples-test-utils/src/main/java/org/kie/kogito/resources/ConditionalTestResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoyNTowMlrOGlk4bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDowNjoyM1rOGlompg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NDc2NQ==", "bodyText": "I meant extending QuarkusTestResourceLifecycleManager here and implementing just this in ConditionalQuarkusTestResource\npublic abstract class ConditionalQuarkusTestResource implements ConditionalTestResource.", "url": "https://github.com/kiegroup/kogito-examples/pull/278#discussion_r442054765", "createdAt": "2020-06-18T08:25:02Z", "author": {"login": "jstastny-cz"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/resources/ConditionalTestResource.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.resources;\n+\n+/**\n+ * Conditional test resource for kogito tests.\n+ * \n+ */\n+public interface ConditionalTestResource<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a64012f21bb570560c8d0a21fcef19208dbddf"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjExNTc1MA==", "bodyText": "As agreed, I've already renamed the field to conditionalResource. Thanks for spotting this!", "url": "https://github.com/kiegroup/kogito-examples/pull/278#discussion_r442115750", "createdAt": "2020-06-18T10:06:23Z", "author": {"login": "Sgitario"}, "path": "examples-test-utils/src/main/java/org/kie/kogito/resources/ConditionalTestResource.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.kie.kogito.resources;\n+\n+/**\n+ * Conditional test resource for kogito tests.\n+ * \n+ */\n+public interface ConditionalTestResource<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NDc2NQ=="}, "originalCommit": {"oid": "04a64012f21bb570560c8d0a21fcef19208dbddf"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDU0NzU4OnYy", "diffSide": "RIGHT", "path": "process-usertasks-with-security-oidc-springboot/src/test/java/org/acme/travels/ApprovalsRestIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozMjo0N1rOGlpefA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMDozNTo1M1rOGlpkww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMDA0NA==", "bodyText": "can be still final, right?", "url": "https://github.com/kiegroup/kogito-examples/pull/278#discussion_r442130044", "createdAt": "2020-06-18T10:32:47Z", "author": {"login": "jstastny-cz"}, "path": "process-usertasks-with-security-oidc-springboot/src/test/java/org/acme/travels/ApprovalsRestIT.java", "diffHunk": "@@ -22,41 +22,42 @@\n \n import java.util.Map;\n \n-import org.junit.Before;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n import org.keycloak.representations.AccessTokenResponse;\n import org.kie.kogito.springboot.KogitoSpringbootApplication;\n+import org.kie.kogito.testcontainers.KeycloakContainer;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.annotation.DirtiesContext.ClassMode;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n \n import io.restassured.RestAssured;\n import io.restassured.http.ContentType;\n \n-@RunWith(SpringRunner.class)\n+@Testcontainers\n+@ExtendWith(SpringExtension.class)\n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n @DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)\n public class ApprovalsRestIT {\n \n-    @ClassRule\n-    public static final KeycloakContainerResource keycloak = new KeycloakContainerResource();\n+    @Container\n+    public static KeycloakContainer KEYCLOAK = new KeycloakContainer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f125f959df08009d1634a3a27f08c09f1c9e3ecf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMTY1MQ==", "bodyText": "Sure. Re-added.", "url": "https://github.com/kiegroup/kogito-examples/pull/278#discussion_r442131651", "createdAt": "2020-06-18T10:35:53Z", "author": {"login": "Sgitario"}, "path": "process-usertasks-with-security-oidc-springboot/src/test/java/org/acme/travels/ApprovalsRestIT.java", "diffHunk": "@@ -22,41 +22,42 @@\n \n import java.util.Map;\n \n-import org.junit.Before;\n-import org.junit.ClassRule;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n import org.keycloak.representations.AccessTokenResponse;\n import org.kie.kogito.springboot.KogitoSpringbootApplication;\n+import org.kie.kogito.testcontainers.KeycloakContainer;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.web.server.LocalServerPort;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.annotation.DirtiesContext.ClassMode;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+import org.testcontainers.junit.jupiter.Container;\n+import org.testcontainers.junit.jupiter.Testcontainers;\n \n import io.restassured.RestAssured;\n import io.restassured.http.ContentType;\n \n-@RunWith(SpringRunner.class)\n+@Testcontainers\n+@ExtendWith(SpringExtension.class)\n @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = KogitoSpringbootApplication.class)\n @DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)\n public class ApprovalsRestIT {\n \n-    @ClassRule\n-    public static final KeycloakContainerResource keycloak = new KeycloakContainerResource();\n+    @Container\n+    public static KeycloakContainer KEYCLOAK = new KeycloakContainer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEzMDA0NA=="}, "originalCommit": {"oid": "f125f959df08009d1634a3a27f08c09f1c9e3ecf"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 533, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}