{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NzgwODM0", "number": 448, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoxMzowOVrOE4jvpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzozMToxMlrOE6retg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzQxMzQ4OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/src/main/resources/onbording.sw.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoxMzowOVrOHyjnSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODoxMzowOVrOHyjnSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc3NDM0Ng==", "bodyText": "typo in file name \"onbording\" should be \"onboarding\"", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r522774346", "createdAt": "2020-11-13T08:13:09Z", "author": {"login": "evacchi"}, "path": "serverless-workflow-functions-events-quarkus/src/main/resources/onbording.sw.json", "diffHunk": "@@ -0,0 +1,73 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b5e510f01b8c29fc24a59478ff53584683746"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDQ0NTc2OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo0MTowMlrOH0f2cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo0MTowMlrOH0f2cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgwOTg0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>1.0.0-SNAPSHOT</version>\n          \n          \n            \n                <version>2.0.0-SNAPSHOT</version>", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r524809841", "createdAt": "2020-11-17T00:41:02Z", "author": {"login": "cristianonicolai"}, "path": "serverless-workflow-functions-events-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-examples</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b5e510f01b8c29fc24a59478ff53584683746"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDQ3OTAxOnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/services/ScheduleService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMDo1NjoxM1rOH0gJ0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTo0MzoxMlrOH07kdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDgwMQ==", "bodyText": "On a local test I got the following error:\nAppointmentResourceTest.verifySchedulePatientAppointment:75  Expected: a value equal to or greater than <Tue Nov 17 10:50:11 AEST 2020> but: <Tue Nov 17 01:50:00 AEST 2020> was less than <Tue Nov 17 10:50:11 AEST 2020>\nI would suggest to use java.time API, ex LocalDateTime instead of plain Dates as it makes this calculations a lot more consistent.", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r524814801", "createdAt": "2020-11-17T00:56:13Z", "author": {"login": "cristianonicolai"}, "path": "serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/services/ScheduleService.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.sw.onboarding.services;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.acme.sw.onboarding.model.Appointment;\n+import org.acme.sw.onboarding.model.Patient;\n+\n+@ApplicationScoped\n+public class ScheduleService {\n+\n+    public final static int FIRST_HOUR_MORNING = 9;\n+\n+    /*\n+    Our doctors can attend one patient per day only :)\n+    */\n+    private final Map<String, List<Date>> schedule;\n+\n+    public ScheduleService() {\n+        this.schedule = new ConcurrentHashMap<>();\n+    }\n+\n+    /*\n+    In a real world scenario this can get far more complex, we should have a transactions and sync access to the schedule.\n+    We don't want to mess with our doctors schedule, right? :)\n+    To make it simple and less error prone, we are using a simple Map to hold our data.\n+     */\n+    public Appointment createAppointment(final Patient patient) {\n+        final Appointment appointment = new Appointment();\n+        final String doctorId = patient.getAssignedDoctor().getId();\n+        appointment.setPatient(patient);\n+        // better case scenario we set an appointment today an hour from now :)\n+        appointment.setDate(this.addOneHour(new Date()));\n+        appointment.setDoctor(patient.getAssignedDoctor());\n+\n+        // let's find room for our patient\n+        if (this.schedule.get(doctorId) != null) {\n+            final Optional<Date> lastDate = this.schedule.get(doctorId).stream().max(Comparator.nullsFirst(Comparator.naturalOrder()));\n+            appointment.setDate(this.addOneDayFirstHourInMorning(lastDate.orElseThrow(IllegalStateException::new)));\n+        } else { // this doctor hasn't been set an appointment yet\n+            this.schedule.put(doctorId, new ArrayList<>());\n+        }\n+        this.schedule.get(doctorId).add(appointment.getDate());\n+\n+        return appointment;\n+    }\n+\n+    private Date addOneHour(final Date targetDate) {\n+        final Calendar calendar = Calendar.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b5e510f01b8c29fc24a59478ff53584683746"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI2Mzk5MA==", "bodyText": "LOL, why did I use Calendar? Brain farts...", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r525263990", "createdAt": "2020-11-17T15:43:12Z", "author": {"login": "ricardozanini"}, "path": "serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/services/ScheduleService.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.sw.onboarding.services;\n+\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import org.acme.sw.onboarding.model.Appointment;\n+import org.acme.sw.onboarding.model.Patient;\n+\n+@ApplicationScoped\n+public class ScheduleService {\n+\n+    public final static int FIRST_HOUR_MORNING = 9;\n+\n+    /*\n+    Our doctors can attend one patient per day only :)\n+    */\n+    private final Map<String, List<Date>> schedule;\n+\n+    public ScheduleService() {\n+        this.schedule = new ConcurrentHashMap<>();\n+    }\n+\n+    /*\n+    In a real world scenario this can get far more complex, we should have a transactions and sync access to the schedule.\n+    We don't want to mess with our doctors schedule, right? :)\n+    To make it simple and less error prone, we are using a simple Map to hold our data.\n+     */\n+    public Appointment createAppointment(final Patient patient) {\n+        final Appointment appointment = new Appointment();\n+        final String doctorId = patient.getAssignedDoctor().getId();\n+        appointment.setPatient(patient);\n+        // better case scenario we set an appointment today an hour from now :)\n+        appointment.setDate(this.addOneHour(new Date()));\n+        appointment.setDoctor(patient.getAssignedDoctor());\n+\n+        // let's find room for our patient\n+        if (this.schedule.get(doctorId) != null) {\n+            final Optional<Date> lastDate = this.schedule.get(doctorId).stream().max(Comparator.nullsFirst(Comparator.naturalOrder()));\n+            appointment.setDate(this.addOneDayFirstHourInMorning(lastDate.orElseThrow(IllegalStateException::new)));\n+        } else { // this doctor hasn't been set an appointment yet\n+            this.schedule.put(doctorId, new ArrayList<>());\n+        }\n+        this.schedule.get(doctorId).add(appointment.getDate());\n+\n+        return appointment;\n+    }\n+\n+    private Date addOneHour(final Date targetDate) {\n+        final Calendar calendar = Calendar.getInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgxNDgwMQ=="}, "originalCommit": {"oid": "c89b5e510f01b8c29fc24a59478ff53584683746"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MDUxNDgyOnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMToxMTozOVrOH0geIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwMToxMTozOVrOH0geIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDgyMDAwMg==", "bodyText": "@ricardozanini would be nice to also have the CURL command example here so people can simply copy and execute, like https://github.com/kiegroup/kogito-examples/tree/stable/kogito-travel-agency/extended/travels#post-travels", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r524820002", "createdAt": "2020-11-17T01:11:39Z", "author": {"login": "cristianonicolai"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,101 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b5e510f01b8c29fc24a59478ff53584683746"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjAzMDExOnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/model/Gender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDozMjo0NFrOH0ucgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDozMjo0NFrOH0ucgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA0ODk2MA==", "bodyText": "This is just an extreme nitpick, but I'd leave out any reference to the gender here: it doesn't seem relevant for the example and it's a slippery topic.", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r525048960", "createdAt": "2020-11-17T10:32:44Z", "author": {"login": "mariofusco"}, "path": "serverless-workflow-functions-events-quarkus/src/main/java/org/acme/sw/onboarding/model/Gender.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.acme.sw.onboarding.model;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+\n+public enum Gender {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b5e510f01b8c29fc24a59478ff53584683746"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjA4NzgyOnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/src/main/resources/org/acme/sw/onboarding/queries/doctor_assignment.drl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDo0Njo0MlrOH0u_kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMDo0Njo0MlrOH0u_kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA1NzkzNg==", "bodyText": "In general using no-loop is a drl-smell. I didn't give it a run, but it shouldn't be necessary in this case because property reactivity should avoid the loop. Even if I'm wrong on this you could better avoid any possible loop by adding the condition assignedDoctor == null to the patients. Actually I believe that you should add this condition regardless to avoid that a rule will overwrite the doctor assigned by another formerly fired rule.", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r525057936", "createdAt": "2020-11-17T10:46:42Z", "author": {"login": "mariofusco"}, "path": "serverless-workflow-functions-events-quarkus/src/main/resources/org/acme/sw/onboarding/queries/doctor_assignment.drl", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.acme.sw.onboarding.queries;\n+unit AssignmentUnit;\n+\n+import org.acme.sw.onboarding.model.Doctor;\n+import org.acme.sw.onboarding.model.Patient;\n+import org.acme.sw.onboarding.model.SymptomSpecialty;\n+import org.acme.sw.onboarding.helpers.CalendarHelper;\n+import java.util.Collections;\n+\n+rule PatientIsAChild no-loop", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b5e510f01b8c29fc24a59478ff53584683746"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjE1MTA4OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/src/main/resources/org/acme/sw/onboarding/queries/doctor_assignment.drl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTowMjozNFrOH0vmNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTowMjozNFrOH0vmNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA2NzgyOA==", "bodyText": "I'm afraid you're misusing salience here (or at least I want to be sure that we're on the same page on this). I guess you wanted to enforce that a kid will be assigned to a pediatric regardless of his disease. You're actually obtaining this result but in a quite \"unconventional\" way. What it's happening here (see also the former comment) is that other rules may fire before of this but regardless of it this rule (which has the lowest salience) will eventually fire (for a kid) as the last one overwriting any other assigned doctor. What I'd do to obtain the same result would be giving this rule the highest possible salience (in a business domain related sense this is the most relevant/important rule and it is counter-intuitive that you're giving the lowest salience to it) and adding the condition assignedDoctor == null to other rules. Finally note that implicitly the rules are considered having decreasing salience in a drl file (unless you don't override this behaviour explicitly using the salience attribute as you're doing here) so if you follow my suggestion you could completely remove the salience attributes from all the rules.", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r525067828", "createdAt": "2020-11-17T11:02:34Z", "author": {"login": "mariofusco"}, "path": "serverless-workflow-functions-events-quarkus/src/main/resources/org/acme/sw/onboarding/queries/doctor_assignment.drl", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.acme.sw.onboarding.queries;\n+unit AssignmentUnit;\n+\n+import org.acme.sw.onboarding.model.Doctor;\n+import org.acme.sw.onboarding.model.Patient;\n+import org.acme.sw.onboarding.model.SymptomSpecialty;\n+import org.acme.sw.onboarding.helpers.CalendarHelper;\n+import java.util.Collections;\n+\n+rule PatientIsAChild no-loop\n+    salience 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b5e510f01b8c29fc24a59478ff53584683746"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTYwNzA0OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyMzoxNlrOH1434w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyMzoxNlrOH1434w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2ODM4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Or you can use CURL and set the CloudEvents parameters in the request headers:\n          \n          \n            \n            Or you can use cURL and set the CloudEvents parameters in the request headers:", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526268387", "createdAt": "2020-11-18T17:23:16Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTYwOTQ2OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyMzo1MFrOH145bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyMzo1MFrOH145bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2ODc4MQ==", "bodyText": "generating a new ID for they ???", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526268781", "createdAt": "2020-11-18T17:23:50Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTYxMTM4OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNDoxOVrOH146rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNDoxOVrOH146rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2OTEwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n          \n          \n            \n            2. `AssignDoctorToPatient` will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n          \n      \n    \n    \n  \n\nfor consistency in phrasing", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526269101", "createdAt": "2020-11-18T17:24:19Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTYxMzQ2OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNDo0NVrOH147-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNDo0NVrOH147-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2OTQzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)\n          \n          \n            \n            to determine to which doctor this patient should be assigned, based on their symptoms or general characteristics (children always go to Pediatrics, for example)", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526269433", "createdAt": "2020-11-18T17:24:45Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n+to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTYxNjE0OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNToxNlrOH149bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNToxNlrOH149bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2OTgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            3. `SchedulePatientAppointment` will find a schedule for this patient based on the agenda of the doctor assigned\n          \n          \n            \n            3. `SchedulePatientAppointment` will find a time slot for this patient based on the agenda of the assigned doctor", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526269805", "createdAt": "2020-11-18T17:25:16Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n+to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)\n+3. `SchedulePatientAppointment` will find a schedule for this patient based on the agenda of the doctor assigned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTYxOTk5OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNjowNFrOH14_rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNjowNFrOH14_rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3MDM4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Also, there's the Swagger UI that can also be used to explore the APIs in this example: http://localhost:8080/swagger-ui/\n          \n          \n            \n            Also, there is the Swagger UI that can also be used to explore the APIs in this example: http://localhost:8080/swagger-ui/", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526270382", "createdAt": "2020-11-18T17:26:04Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n+to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)\n+3. `SchedulePatientAppointment` will find a schedule for this patient based on the agenda of the doctor assigned\n+\n+After executing the workflow, the appointments' data can be fetched using the `/onboarding/schedule/appointment` endpoint.\n+\n+There's a nice web interface for you to try the example available in the root url (http://localhost:8080 for local environments):\n+\n+![](imgs/web_ui.png)\n+\n+Enter the data into the provided form to see the example in action! Date of Birth must be in `YYYY-MM-DD` format.\n+\n+Also, there's the Swagger UI that can also be used to explore the APIs in this example: http://localhost:8080/swagger-ui/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTYyNDMyOnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyNjo1OVrOH15CUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxODoxNTozMlrOH172iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3MTA1OA==", "bodyText": "thinking that now, with https://quarkus.io/guides/building-native-image#container-runtime, you don't need Gradle installed anymore if you have Docker/Podman ;)", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526271058", "createdAt": "2020-11-18T17:26:59Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n+to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)\n+3. `SchedulePatientAppointment` will find a schedule for this patient based on the agenda of the doctor assigned\n+\n+After executing the workflow, the appointments' data can be fetched using the `/onboarding/schedule/appointment` endpoint.\n+\n+There's a nice web interface for you to try the example available in the root url (http://localhost:8080 for local environments):\n+\n+![](imgs/web_ui.png)\n+\n+Enter the data into the provided form to see the example in action! Date of Birth must be in `YYYY-MM-DD` format.\n+\n+Also, there's the Swagger UI that can also be used to explore the APIs in this example: http://localhost:8080/swagger-ui/\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+When using native image compilation, you will also need: \n+  - [GraalVm](https://www.graalvm.org/downloads/) 20.2.0+ installed\n+  - Environment variable GRAALVM_HOME set accordingly\n+  - Note that GraalVM native image compilation typically requires other packages (glibc-devel, zlib-devel and gcc) to be installed too.  You also need 'native-image' installed in GraalVM (using 'gu install native-image'). Please refer to [GraalVM installation documentation](https://www.graalvm.org/docs/reference-manual/aot-compilation/#prerequisites) for more details.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMxNzE5Mw==", "bodyText": "Well, I believe we need to rephrase all the other examples as well! \ud83d\ude13", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526317193", "createdAt": "2020-11-18T18:15:32Z", "author": {"login": "ricardozanini"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n+to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)\n+3. `SchedulePatientAppointment` will find a schedule for this patient based on the agenda of the doctor assigned\n+\n+After executing the workflow, the appointments' data can be fetched using the `/onboarding/schedule/appointment` endpoint.\n+\n+There's a nice web interface for you to try the example available in the root url (http://localhost:8080 for local environments):\n+\n+![](imgs/web_ui.png)\n+\n+Enter the data into the provided form to see the example in action! Date of Birth must be in `YYYY-MM-DD` format.\n+\n+Also, there's the Swagger UI that can also be used to explore the APIs in this example: http://localhost:8080/swagger-ui/\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+When using native image compilation, you will also need: \n+  - [GraalVm](https://www.graalvm.org/downloads/) 20.2.0+ installed\n+  - Environment variable GRAALVM_HOME set accordingly\n+  - Note that GraalVM native image compilation typically requires other packages (glibc-devel, zlib-devel and gcc) to be installed too.  You also need 'native-image' installed in GraalVM (using 'gu install native-image'). Please refer to [GraalVM installation documentation](https://www.graalvm.org/docs/reference-manual/aot-compilation/#prerequisites) for more details.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3MTA1OA=="}, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTYzMTMyOnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyODozMlrOH15GhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyODozMlrOH15GhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3MjEzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use `curl` to send the CloudEvent through HTTP to the application:\n          \n          \n            \n            Use `curl` command to send the CloudEvent through HTTP to the application:", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526272132", "createdAt": "2020-11-18T17:28:32Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n+to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)\n+3. `SchedulePatientAppointment` will find a schedule for this patient based on the agenda of the doctor assigned\n+\n+After executing the workflow, the appointments' data can be fetched using the `/onboarding/schedule/appointment` endpoint.\n+\n+There's a nice web interface for you to try the example available in the root url (http://localhost:8080 for local environments):\n+\n+![](imgs/web_ui.png)\n+\n+Enter the data into the provided form to see the example in action! Date of Birth must be in `YYYY-MM-DD` format.\n+\n+Also, there's the Swagger UI that can also be used to explore the APIs in this example: http://localhost:8080/swagger-ui/\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+When using native image compilation, you will also need: \n+  - [GraalVm](https://www.graalvm.org/downloads/) 20.2.0+ installed\n+  - Environment variable GRAALVM_HOME set accordingly\n+  - Note that GraalVM native image compilation typically requires other packages (glibc-devel, zlib-devel and gcc) to be installed too.  You also need 'native-image' installed in GraalVM (using 'gu install native-image'). Please refer to [GraalVM installation documentation](https://www.graalvm.org/docs/reference-manual/aot-compilation/#prerequisites) for more details.\n+\n+### Compile and Run in Local Dev Mode\n+\n+```text\n+mvn clean package quarkus:dev    \n+```\n+\n+Use `curl` to send the CloudEvent through HTTP to the application:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTYzMjIwOnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyODo0NlrOH15HHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyODo0NlrOH15HHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3MjI4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the application log, you will see something like:\n          \n          \n            \n            In the application's log, you will see something like:", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526272285", "createdAt": "2020-11-18T17:28:46Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n+to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)\n+3. `SchedulePatientAppointment` will find a schedule for this patient based on the agenda of the doctor assigned\n+\n+After executing the workflow, the appointments' data can be fetched using the `/onboarding/schedule/appointment` endpoint.\n+\n+There's a nice web interface for you to try the example available in the root url (http://localhost:8080 for local environments):\n+\n+![](imgs/web_ui.png)\n+\n+Enter the data into the provided form to see the example in action! Date of Birth must be in `YYYY-MM-DD` format.\n+\n+Also, there's the Swagger UI that can also be used to explore the APIs in this example: http://localhost:8080/swagger-ui/\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+When using native image compilation, you will also need: \n+  - [GraalVm](https://www.graalvm.org/downloads/) 20.2.0+ installed\n+  - Environment variable GRAALVM_HOME set accordingly\n+  - Note that GraalVM native image compilation typically requires other packages (glibc-devel, zlib-devel and gcc) to be installed too.  You also need 'native-image' installed in GraalVM (using 'gu install native-image'). Please refer to [GraalVM installation documentation](https://www.graalvm.org/docs/reference-manual/aot-compilation/#prerequisites) for more details.\n+\n+### Compile and Run in Local Dev Mode\n+\n+```text\n+mvn clean package quarkus:dev    \n+```\n+\n+Use `curl` to send the CloudEvent through HTTP to the application:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+In the application log, you will see something like:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTYzNzY0OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyOToyNFrOH15KjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyOToyNFrOH15KjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3MzE2NA==", "bodyText": "See comment above", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526273164", "createdAt": "2020-11-18T17:29:24Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n+to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)\n+3. `SchedulePatientAppointment` will find a schedule for this patient based on the agenda of the doctor assigned\n+\n+After executing the workflow, the appointments' data can be fetched using the `/onboarding/schedule/appointment` endpoint.\n+\n+There's a nice web interface for you to try the example available in the root url (http://localhost:8080 for local environments):\n+\n+![](imgs/web_ui.png)\n+\n+Enter the data into the provided form to see the example in action! Date of Birth must be in `YYYY-MM-DD` format.\n+\n+Also, there's the Swagger UI that can also be used to explore the APIs in this example: http://localhost:8080/swagger-ui/\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+When using native image compilation, you will also need: \n+  - [GraalVm](https://www.graalvm.org/downloads/) 20.2.0+ installed\n+  - Environment variable GRAALVM_HOME set accordingly\n+  - Note that GraalVM native image compilation typically requires other packages (glibc-devel, zlib-devel and gcc) to be installed too.  You also need 'native-image' installed in GraalVM (using 'gu install native-image'). Please refer to [GraalVM installation documentation](https://www.graalvm.org/docs/reference-manual/aot-compilation/#prerequisites) for more details.\n+\n+### Compile and Run in Local Dev Mode\n+\n+```text\n+mvn clean package quarkus:dev    \n+```\n+\n+Use `curl` to send the CloudEvent through HTTP to the application:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+In the application log, you will see something like:\n+\n+```log\n+2020-11-17 12:51:11,581 DEBUG [org.acm.sw.onb.res.PatientResource] (executor-thread-198) Received patient to store in the internal in memory database: Patient{name='Mick', id='null', symptoms=[seizures], dateOfBirth=1983-08-15}\n+2020-11-17 12:51:11,581 DEBUG [org.acm.sw.onb.res.PatientResource] (executor-thread-198) Patient has been stored in the internal memory: Patient{name='Mick', id='5560ed3d-becb-4f35-8c6a-2816338bf8fd', symptoms=[seizures], dateOfBirth=1983-08-15}\n+2020-11-17 12:51:11,600 DEBUG [org.acm.sw.onb.res.AppointmentResource] (executor-thread-198) Receive patient to schedule appointments: Patient{name='Mick', id='5560ed3d-becb-4f35-8c6a-2816338bf8fd', symptoms=[seizures], dateOfBirth=1983-08-15}\n+2020-11-17 12:51:11,600 DEBUG [org.acm.sw.onb.res.AppointmentResource] (executor-thread-198) Processed patient: Patient{name='Mick', id='5560ed3d-becb-4f35-8c6a-2816338bf8fd', symptoms=[seizures], dateOfBirth=1983-08-15}\n+```\n+\n+Then query the appointments' resource to see the assigned doctor:\n+\n+```shell script\n+$ curl http://localhost:8080/onboarding/schedule/appointment | jq '.'\n+\n+[\n+  {\n+    \"doctor\": {\n+      \"id\": \"8293dc94-2386-11eb-adc1-0242ac120002\",\n+      \"name\": \"Maria Mind\",\n+      \"specialty\": \"Neurology\"\n+    },\n+    \"patient\": {\n+      \"name\": \"Mick\",\n+      \"id\": \"5560ed3d-becb-4f35-8c6a-2816338bf8fd\",\n+      \"symptoms\": [\n+        \"seizures\"\n+      ],\n+      \"dateOfBirth\": \"1983-08-15\",\n+      \"assignedDoctor\": {\n+        \"id\": \"8293dc94-2386-11eb-adc1-0242ac120002\",\n+        \"name\": \"Maria Mind\",\n+        \"specialty\": \"Neurology\"\n+      }\n+    },\n+    \"date\": \"2020-11-18 09:00\"\n+  }\n+]\n+```\n+\n+_**Note:** Please make sure you have [jq](https://stedolan.github.io/jq/download/) installed in your system to see the formatted output._\n+\n+### Compile and Run in JVM mode\n+\n+```text\n+mvn clean package \n+java -jar target/serverless-workflow-functions-quarkus-runner.jar   \n+```\n+\n+or on windows\n+\n+```text\n+mvn clean package\n+java -jar target\\serverless-workflow-functions-quarkus-runner.jar\n+```\n+\n+### Compile and Run using Local Native Image\n+Note that this requires GRAALVM_HOME to point to a valid GraalVM installation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTY0MDkwOnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyOTo0NlrOH15Miw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoyOTo0NlrOH15Miw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3MzY3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the [`operator`](operator) directory you'll find the custom resources needed to deploy this example on OpenShift or Kubernetes with the [Kogito Operator](https://docs.jboss.org/kogito/release/latest/html_single/#chap_kogito-deploying-on-openshift).\n          \n          \n            \n            In the [`operator`](operator) directory you can find the custom resources needed to deploy this example on OpenShift or Kubernetes with the [Kogito Operator](https://docs.jboss.org/kogito/release/latest/html_single/#chap_kogito-deploying-on-openshift).", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526273675", "createdAt": "2020-11-18T17:29:46Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n+to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)\n+3. `SchedulePatientAppointment` will find a schedule for this patient based on the agenda of the doctor assigned\n+\n+After executing the workflow, the appointments' data can be fetched using the `/onboarding/schedule/appointment` endpoint.\n+\n+There's a nice web interface for you to try the example available in the root url (http://localhost:8080 for local environments):\n+\n+![](imgs/web_ui.png)\n+\n+Enter the data into the provided form to see the example in action! Date of Birth must be in `YYYY-MM-DD` format.\n+\n+Also, there's the Swagger UI that can also be used to explore the APIs in this example: http://localhost:8080/swagger-ui/\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+When using native image compilation, you will also need: \n+  - [GraalVm](https://www.graalvm.org/downloads/) 20.2.0+ installed\n+  - Environment variable GRAALVM_HOME set accordingly\n+  - Note that GraalVM native image compilation typically requires other packages (glibc-devel, zlib-devel and gcc) to be installed too.  You also need 'native-image' installed in GraalVM (using 'gu install native-image'). Please refer to [GraalVM installation documentation](https://www.graalvm.org/docs/reference-manual/aot-compilation/#prerequisites) for more details.\n+\n+### Compile and Run in Local Dev Mode\n+\n+```text\n+mvn clean package quarkus:dev    \n+```\n+\n+Use `curl` to send the CloudEvent through HTTP to the application:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+In the application log, you will see something like:\n+\n+```log\n+2020-11-17 12:51:11,581 DEBUG [org.acm.sw.onb.res.PatientResource] (executor-thread-198) Received patient to store in the internal in memory database: Patient{name='Mick', id='null', symptoms=[seizures], dateOfBirth=1983-08-15}\n+2020-11-17 12:51:11,581 DEBUG [org.acm.sw.onb.res.PatientResource] (executor-thread-198) Patient has been stored in the internal memory: Patient{name='Mick', id='5560ed3d-becb-4f35-8c6a-2816338bf8fd', symptoms=[seizures], dateOfBirth=1983-08-15}\n+2020-11-17 12:51:11,600 DEBUG [org.acm.sw.onb.res.AppointmentResource] (executor-thread-198) Receive patient to schedule appointments: Patient{name='Mick', id='5560ed3d-becb-4f35-8c6a-2816338bf8fd', symptoms=[seizures], dateOfBirth=1983-08-15}\n+2020-11-17 12:51:11,600 DEBUG [org.acm.sw.onb.res.AppointmentResource] (executor-thread-198) Processed patient: Patient{name='Mick', id='5560ed3d-becb-4f35-8c6a-2816338bf8fd', symptoms=[seizures], dateOfBirth=1983-08-15}\n+```\n+\n+Then query the appointments' resource to see the assigned doctor:\n+\n+```shell script\n+$ curl http://localhost:8080/onboarding/schedule/appointment | jq '.'\n+\n+[\n+  {\n+    \"doctor\": {\n+      \"id\": \"8293dc94-2386-11eb-adc1-0242ac120002\",\n+      \"name\": \"Maria Mind\",\n+      \"specialty\": \"Neurology\"\n+    },\n+    \"patient\": {\n+      \"name\": \"Mick\",\n+      \"id\": \"5560ed3d-becb-4f35-8c6a-2816338bf8fd\",\n+      \"symptoms\": [\n+        \"seizures\"\n+      ],\n+      \"dateOfBirth\": \"1983-08-15\",\n+      \"assignedDoctor\": {\n+        \"id\": \"8293dc94-2386-11eb-adc1-0242ac120002\",\n+        \"name\": \"Maria Mind\",\n+        \"specialty\": \"Neurology\"\n+      }\n+    },\n+    \"date\": \"2020-11-18 09:00\"\n+  }\n+]\n+```\n+\n+_**Note:** Please make sure you have [jq](https://stedolan.github.io/jq/download/) installed in your system to see the formatted output._\n+\n+### Compile and Run in JVM mode\n+\n+```text\n+mvn clean package \n+java -jar target/serverless-workflow-functions-quarkus-runner.jar   \n+```\n+\n+or on windows\n+\n+```text\n+mvn clean package\n+java -jar target\\serverless-workflow-functions-quarkus-runner.jar\n+```\n+\n+### Compile and Run using Local Native Image\n+Note that this requires GRAALVM_HOME to point to a valid GraalVM installation\n+\n+```text\n+mvn clean package -Pnative\n+```\n+  \n+To run the generated native executable, generated in `target/`, execute\n+\n+```text\n+./target/serverless-workflow-functions-quarkus-runner.jar\n+```\n+\n+## Deploying with Kogito Operator\n+\n+In the [`operator`](operator) directory you'll find the custom resources needed to deploy this example on OpenShift or Kubernetes with the [Kogito Operator](https://docs.jboss.org/kogito/release/latest/html_single/#chap_kogito-deploying-on-openshift).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTY1MjM4OnYy", "diffSide": "RIGHT", "path": "serverless-workflow-functions-events-quarkus/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzozMToxMlrOH15ULA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzozMToxMlrOH15ULA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3NTYyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n            Don't forget to replace the `<namespace>` placeholder in yaml files", "url": "https://github.com/kiegroup/kogito-examples/pull/448#discussion_r526275628", "createdAt": "2020-11-18T17:31:12Z", "author": {"login": "radtriste"}, "path": "serverless-workflow-functions-events-quarkus/README.md", "diffHunk": "@@ -0,0 +1,167 @@\n+# Kogito Serverless Workflow - Patient Onboarding\n+\n+## Description\n+\n+In this example we will see how to use the [Serverless Workflow specification](https://github.com/serverlessworkflow/specification)\n+implementation on Kogito to orchestrate a sequence of REST calls in an Event-Driven architecture.\n+\n+This use case is about onboarding a new patient in a hospital, and based on their symptom, the \n+application will assign to the right expert. \n+\n+The workflow starts with a CloudEvent informing a new patient entry:\n+\n+```json\n+{\n+   \"id\":\"12345\",\n+   \"source\":\"/hospital/entry\",\n+   \"specversion\":\"1.0\",\n+   \"type\":\"new.patient.events\",\n+   \"data\":{\n+      \"name\":\"John\",\n+      \"dateOfBirth\":\"2017-08-15\",\n+      \"symptoms\":[\n+         \"seizures\"\n+      ]\n+   }\n+}\n+```\n+\n+Or you can use CURL and set the CloudEvents parameters in the request headers:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+The [workflow](src/main/resources/onbording.sw.json) will then call a sequence of REST services:\n+\n+1. `StoreNewPatient` will store the patient in the internal database for later processing, generating a new ID for they\n+2. `AssignDoctorToPatient` service will run a set of [rules](https://docs.jboss.org/kogito/release/latest/html_single/#con-drl-rule-units_drl-rules) \n+to determine which doctor this patient should be assigned based on their symptoms or general characteristics (children always go to Pediatrics, for example)\n+3. `SchedulePatientAppointment` will find a schedule for this patient based on the agenda of the doctor assigned\n+\n+After executing the workflow, the appointments' data can be fetched using the `/onboarding/schedule/appointment` endpoint.\n+\n+There's a nice web interface for you to try the example available in the root url (http://localhost:8080 for local environments):\n+\n+![](imgs/web_ui.png)\n+\n+Enter the data into the provided form to see the example in action! Date of Birth must be in `YYYY-MM-DD` format.\n+\n+Also, there's the Swagger UI that can also be used to explore the APIs in this example: http://localhost:8080/swagger-ui/\n+\n+## Installing and Running\n+\n+### Prerequisites\n+ \n+You will need:\n+  - Java 11+ installed\n+  - Environment variable JAVA_HOME set accordingly\n+  - Maven 3.6.2+ installed\n+\n+When using native image compilation, you will also need: \n+  - [GraalVm](https://www.graalvm.org/downloads/) 20.2.0+ installed\n+  - Environment variable GRAALVM_HOME set accordingly\n+  - Note that GraalVM native image compilation typically requires other packages (glibc-devel, zlib-devel and gcc) to be installed too.  You also need 'native-image' installed in GraalVM (using 'gu install native-image'). Please refer to [GraalVM installation documentation](https://www.graalvm.org/docs/reference-manual/aot-compilation/#prerequisites) for more details.\n+\n+### Compile and Run in Local Dev Mode\n+\n+```text\n+mvn clean package quarkus:dev    \n+```\n+\n+Use `curl` to send the CloudEvent through HTTP to the application:\n+\n+```shell script\n+$ curl -X POST \\\n+      -H \"content-type: application/json\"  \\\n+      -H \"ce-specversion: 1.0\"  \\\n+      -H \"ce-source: /hospital/entry\"  \\\n+      -H \"ce-type: new.patients.events\"  \\\n+      -H \"ce-id: 12346\"  \\\n+      -d \"{ \\\"name\\\": \\\"Mick\\\", \\\"dateOfBirth\\\": \\\"1983-08-15\\\", \\\"symptoms\\\":[\\\"seizures\\\"]}\" \\\n+  http://localhost:8080\n+```\n+\n+In the application log, you will see something like:\n+\n+```log\n+2020-11-17 12:51:11,581 DEBUG [org.acm.sw.onb.res.PatientResource] (executor-thread-198) Received patient to store in the internal in memory database: Patient{name='Mick', id='null', symptoms=[seizures], dateOfBirth=1983-08-15}\n+2020-11-17 12:51:11,581 DEBUG [org.acm.sw.onb.res.PatientResource] (executor-thread-198) Patient has been stored in the internal memory: Patient{name='Mick', id='5560ed3d-becb-4f35-8c6a-2816338bf8fd', symptoms=[seizures], dateOfBirth=1983-08-15}\n+2020-11-17 12:51:11,600 DEBUG [org.acm.sw.onb.res.AppointmentResource] (executor-thread-198) Receive patient to schedule appointments: Patient{name='Mick', id='5560ed3d-becb-4f35-8c6a-2816338bf8fd', symptoms=[seizures], dateOfBirth=1983-08-15}\n+2020-11-17 12:51:11,600 DEBUG [org.acm.sw.onb.res.AppointmentResource] (executor-thread-198) Processed patient: Patient{name='Mick', id='5560ed3d-becb-4f35-8c6a-2816338bf8fd', symptoms=[seizures], dateOfBirth=1983-08-15}\n+```\n+\n+Then query the appointments' resource to see the assigned doctor:\n+\n+```shell script\n+$ curl http://localhost:8080/onboarding/schedule/appointment | jq '.'\n+\n+[\n+  {\n+    \"doctor\": {\n+      \"id\": \"8293dc94-2386-11eb-adc1-0242ac120002\",\n+      \"name\": \"Maria Mind\",\n+      \"specialty\": \"Neurology\"\n+    },\n+    \"patient\": {\n+      \"name\": \"Mick\",\n+      \"id\": \"5560ed3d-becb-4f35-8c6a-2816338bf8fd\",\n+      \"symptoms\": [\n+        \"seizures\"\n+      ],\n+      \"dateOfBirth\": \"1983-08-15\",\n+      \"assignedDoctor\": {\n+        \"id\": \"8293dc94-2386-11eb-adc1-0242ac120002\",\n+        \"name\": \"Maria Mind\",\n+        \"specialty\": \"Neurology\"\n+      }\n+    },\n+    \"date\": \"2020-11-18 09:00\"\n+  }\n+]\n+```\n+\n+_**Note:** Please make sure you have [jq](https://stedolan.github.io/jq/download/) installed in your system to see the formatted output._\n+\n+### Compile and Run in JVM mode\n+\n+```text\n+mvn clean package \n+java -jar target/serverless-workflow-functions-quarkus-runner.jar   \n+```\n+\n+or on windows\n+\n+```text\n+mvn clean package\n+java -jar target\\serverless-workflow-functions-quarkus-runner.jar\n+```\n+\n+### Compile and Run using Local Native Image\n+Note that this requires GRAALVM_HOME to point to a valid GraalVM installation\n+\n+```text\n+mvn clean package -Pnative\n+```\n+  \n+To run the generated native executable, generated in `target/`, execute\n+\n+```text\n+./target/serverless-workflow-functions-quarkus-runner.jar\n+```\n+\n+## Deploying with Kogito Operator\n+\n+In the [`operator`](operator) directory you'll find the custom resources needed to deploy this example on OpenShift or Kubernetes with the [Kogito Operator](https://docs.jboss.org/kogito/release/latest/html_single/#chap_kogito-deploying-on-openshift).\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bca0879b8314d5d5923a24a50e0d9c8a23853d09"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 359, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}