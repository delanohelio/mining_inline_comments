{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjg4OTcz", "number": 355, "title": "[KOGITO-3294] - Improving unit tests for Knative example", "bodyText": "Signed-off-by: Ricardo Zanini zanini@redhat.com\nSee: https://issues.redhat.com/browse/KOGITO-3294\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\nWARNING! Please make sure you are opening your PR against master branch!\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-09-08T20:50:06Z", "url": "https://github.com/kiegroup/kogito-examples/pull/355", "merged": true, "mergeCommit": {"oid": "4883e23f0eb7564fdd48cfd59d4240a93edc3f10"}, "closed": true, "closedAt": "2020-09-10T12:57:29Z", "author": {"login": "ricardozanini"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHQwuAABqjM3NDczMDAwMzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHgVNZAFqTQ4NTg5ODE5NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "152f633c027d13c97ad024973f121b146d3f982d", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/152f633c027d13c97ad024973f121b146d3f982d", "committedDate": "2020-09-08T20:45:37Z", "message": "[KOGITO-3294] - Improving unit tests for Knative example\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "97a3b0d20a58cf34f029eccaa93a5d271812493c", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/97a3b0d20a58cf34f029eccaa93a5d271812493c", "committedDate": "2020-09-09T18:46:06Z", "message": "[KOGITO-3294] - Improving unit tests for Knative example\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1Mzg3ODg2", "url": "https://github.com/kiegroup/kogito-examples/pull/355#pullrequestreview-485387886", "createdAt": "2020-09-09T20:41:37Z", "commit": {"oid": "97a3b0d20a58cf34f029eccaa93a5d271812493c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo0MTozOFrOHPZkJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMDo0MTozOFrOHPZkJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkwOTU0Mw==", "bodyText": "info?", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r485909543", "createdAt": "2020-09-09T20:41:38Z", "author": {"login": "evacchi"}, "path": "process-knative-quickstart-quarkus/src/main/resources/application.properties", "diffHunk": "@@ -1,6 +1,6 @@\n quarkus.swagger-ui.always-include=true\n \n-quarkus.log.level=INFO\n+quarkus.log.level=DEBUG", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a3b0d20a58cf34f029eccaa93a5d271812493c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "committedDate": "2020-09-09T21:43:46Z", "message": "[KOGITO-3294] - Improving unit tests for Knative example\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97a3b0d20a58cf34f029eccaa93a5d271812493c", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/97a3b0d20a58cf34f029eccaa93a5d271812493c", "committedDate": "2020-09-09T18:46:06Z", "message": "[KOGITO-3294] - Improving unit tests for Knative example\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}, "afterCommit": {"oid": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/3805c13258a8d2ff23a2a22dab55c42c7a4acfb7", "committedDate": "2020-09-09T21:43:46Z", "message": "[KOGITO-3294] - Improving unit tests for Knative example\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NjIxOTg5", "url": "https://github.com/kiegroup/kogito-examples/pull/355#pullrequestreview-485621989", "createdAt": "2020-09-10T06:38:27Z", "commit": {"oid": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjozODoyN1rOHPlHbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNjo0MDo0MVrOHPlLbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5ODc5Nw==", "bodyText": "maybe add a line explaining why this env variable is necessary", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486098797", "createdAt": "2020-09-10T06:38:27Z", "author": {"login": "evacchi"}, "path": "process-knative-quickstart-quarkus/README.md", "diffHunk": "@@ -94,7 +94,7 @@ When using native image compilation, you will also need:\n ### Compile and Run in Local Dev Mode\n \n ```sh\n-mvn clean compile quarkus:dev\n+K_SINK=localhost:8181 mvn clean compile quarkus:dev", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5OTM0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // have we received the message? We force the sleep since the WoreMock framework doesn't support waiting/timeout verification\n          \n          \n            \n                    // have we received the message? We force the sleep since the WireMock framework doesn't support waiting/timeout verification", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486099344", "createdAt": "2020-09-10T06:39:44Z", "author": {"login": "evacchi"}, "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.acme.travel;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.shaded.com.fasterxml.jackson.core.JsonProcessingException;\n+import org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.containing;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+public class CloudEventListenerTest {\n+\n+    private static WireMockServer sink;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CloudEventListenerTest.class);\n+\n+    @BeforeAll\n+    public static void startSink() {\n+        sink = new WireMockServer(options().port(8181));\n+        sink.start();\n+        sink.stubFor(post(\"/\").willReturn(aResponse().withBody(\"ok\").withStatus(200)));\n+    }\n+\n+    @AfterAll\n+    public static void stopSink() {\n+        if (sink != null) {\n+            sink.stop();\n+        }\n+    }\n+\n+    @Test\n+    void checkStartNewProcessInstanceWithCEForAmericans() throws JsonProcessingException {\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        final Traveller traveller = new Traveller();\n+        traveller.setFirstName(\"Jane\");\n+        traveller.setLastName(\"Doe\");\n+        traveller.setEmail(\"jane.doe@example.com\");\n+        traveller.setNationality(\"American\");\n+\n+        given()\n+                .header(\"ce-specversion\", \"1.0\")\n+                .header(\"ce-id\", \"000\")\n+                .header(\"ce-source\", \"/from/test\")\n+                .header(\"ce-type\", \"travellers\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .body(objectMapper.writeValueAsString(traveller)).post(\"/\").then().statusCode(200);\n+    }\n+\n+    @Test\n+    void checkStartNewProcessInstanceWithCE() throws JsonProcessingException, InterruptedException {\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        final Traveller traveller = new Traveller();\n+        traveller.setFirstName(\"Jane\");\n+        traveller.setLastName(\"Doe\");\n+        traveller.setEmail(\"jane.doe@example.com\");\n+        traveller.setNationality(\"Polish\");\n+\n+        given()\n+                .header(\"ce-specversion\", \"1.0\")\n+                .header(\"ce-id\", \"000\")\n+                .header(\"ce-source\", \"/from/test\")\n+                .header(\"ce-type\", \"travellers\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .body(objectMapper.writeValueAsString(traveller)).post(\"/\").then().statusCode(200);\n+\n+        // have we received the message? We force the sleep since the WoreMock framework doesn't support waiting/timeout verification", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5OTU2MQ==", "bodyText": "hope this won't turn into a flaky test nightmare :D", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486099561", "createdAt": "2020-09-10T06:40:10Z", "author": {"login": "evacchi"}, "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.acme.travel;\n+\n+import javax.ws.rs.core.MediaType;\n+\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.shaded.com.fasterxml.jackson.core.JsonProcessingException;\n+import org.testcontainers.shaded.com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.containing;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.postRequestedFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+public class CloudEventListenerTest {\n+\n+    private static WireMockServer sink;\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CloudEventListenerTest.class);\n+\n+    @BeforeAll\n+    public static void startSink() {\n+        sink = new WireMockServer(options().port(8181));\n+        sink.start();\n+        sink.stubFor(post(\"/\").willReturn(aResponse().withBody(\"ok\").withStatus(200)));\n+    }\n+\n+    @AfterAll\n+    public static void stopSink() {\n+        if (sink != null) {\n+            sink.stop();\n+        }\n+    }\n+\n+    @Test\n+    void checkStartNewProcessInstanceWithCEForAmericans() throws JsonProcessingException {\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        final Traveller traveller = new Traveller();\n+        traveller.setFirstName(\"Jane\");\n+        traveller.setLastName(\"Doe\");\n+        traveller.setEmail(\"jane.doe@example.com\");\n+        traveller.setNationality(\"American\");\n+\n+        given()\n+                .header(\"ce-specversion\", \"1.0\")\n+                .header(\"ce-id\", \"000\")\n+                .header(\"ce-source\", \"/from/test\")\n+                .header(\"ce-type\", \"travellers\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .body(objectMapper.writeValueAsString(traveller)).post(\"/\").then().statusCode(200);\n+    }\n+\n+    @Test\n+    void checkStartNewProcessInstanceWithCE() throws JsonProcessingException, InterruptedException {\n+        final ObjectMapper objectMapper = new ObjectMapper();\n+        final Traveller traveller = new Traveller();\n+        traveller.setFirstName(\"Jane\");\n+        traveller.setLastName(\"Doe\");\n+        traveller.setEmail(\"jane.doe@example.com\");\n+        traveller.setNationality(\"Polish\");\n+\n+        given()\n+                .header(\"ce-specversion\", \"1.0\")\n+                .header(\"ce-id\", \"000\")\n+                .header(\"ce-source\", \"/from/test\")\n+                .header(\"ce-type\", \"travellers\")\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .body(objectMapper.writeValueAsString(traveller)).post(\"/\").then().statusCode(200);\n+\n+        // have we received the message? We force the sleep since the WoreMock framework doesn't support waiting/timeout verification\n+        LOGGER.info(\"Waiting 2 seconds to receive the produced message\");\n+        Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5OTgyMw==", "bodyText": "${K_SINK} or something ?", "url": "https://github.com/kiegroup/kogito-examples/pull/355#discussion_r486099823", "createdAt": "2020-09-10T06:40:41Z", "author": {"login": "evacchi"}, "path": "process-knative-quickstart-quarkus/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,6 @@\n+quarkus.http.test-port=8282\n+quarkus.log.level=INFO\n+\n+# mocked during tests\n+mp.messaging.outgoing.processedtravellers.connector=smallrye-http\n+mp.messaging.outgoing.processedtravellers.url=http://0.0.0.0:8181", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1NzA2MDA1", "url": "https://github.com/kiegroup/kogito-examples/pull/355#pullrequestreview-485706005", "createdAt": "2020-09-10T08:34:18Z", "commit": {"oid": "3805c13258a8d2ff23a2a22dab55c42c7a4acfb7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "292197724d693c2d79926fd51cebe68746ce7944", "author": {"user": {"login": "ricardozanini", "name": "Ricardo Zanini"}}, "url": "https://github.com/kiegroup/kogito-examples/commit/292197724d693c2d79926fd51cebe68746ce7944", "committedDate": "2020-09-10T11:51:07Z", "message": "Explanning K_SINK\n\nSigned-off-by: Ricardo Zanini <zanini@redhat.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1ODk4MTk0", "url": "https://github.com/kiegroup/kogito-examples/pull/355#pullrequestreview-485898194", "createdAt": "2020-09-10T12:54:50Z", "commit": {"oid": "292197724d693c2d79926fd51cebe68746ce7944"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4351, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}