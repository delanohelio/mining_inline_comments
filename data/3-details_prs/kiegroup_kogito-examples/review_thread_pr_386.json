{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5OTgzNjkx", "number": 386, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0Njo0NVrOEtJ5Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTozNjoyMFrOEtMYdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NzgzNTE0OnYy", "diffSide": "RIGHT", "path": "kogito-travel-agency/extended/visas/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0Njo0NVrOHgyeVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwOTo1MDozMVrOHnG3Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MzQ0NQ==", "bodyText": "So now every produced messages will be delivered to the same Topic? On Knative we can filter by CE attributes (like type or source), how we would do that from a java client app for instance? (just adding this question here to give u the opportunity to answer and leave it documented).", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504143445", "createdAt": "2020-10-13T17:46:45Z", "author": {"login": "ricardozanini"}, "path": "kogito-travel-agency/extended/visas/src/main/resources/application.properties", "diffHunk": "@@ -16,21 +16,20 @@ quarkus.infinispan-client.sasl-mechanism=\n \n kafka.bootstrap.servers=localhost:9092\n \n-#mp.messaging.incoming.visaapplications.bootstrap.servers=localhost:9092\n-mp.messaging.incoming.visaapplications.connector=smallrye-kafka\n-mp.messaging.incoming.visaapplications.topic=visaapplications\n-mp.messaging.incoming.visaapplications.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n-#mp.messaging.incoming.visaapplications.auto.offset.reset=earliest\n-\n-#mp.messaging.outgoing.visasapproved.bootstrap.servers=localhost:9092\n-mp.messaging.outgoing.visasapproved.connector=smallrye-kafka\n-mp.messaging.outgoing.visasapproved.topic=visasapproved\n-mp.messaging.outgoing.visasapproved.value.serializer=org.apache.kafka.common.serialization.StringSerializer\n-\n-#mp.messaging.outgoing.visasrejected.bootstrap.servers=localhost:9092\n-mp.messaging.outgoing.visasrejected.connector=smallrye-kafka\n-mp.messaging.outgoing.visasrejected.topic=visasrejected\n-mp.messaging.outgoing.visasrejected.value.serializer=org.apache.kafka.common.serialization.StringSerializer\n+## main transport\n+\n+#mp.messaging.incoming.kogito_incoming_stream.bootstrap.servers=localhost:9092\n+mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka\n+mp.messaging.incoming.kogito_incoming_stream.topic=visaapplications\n+mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n+#mp.messaging.incoming.kogito_incoming_stream.auto.offset.reset=earliest\n+\n+#mp.messaging.outgoing.kogito_outgoing_stream.bootstrap.servers=localhost:9092\n+mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka\n+mp.messaging.outgoing.kogito_outgoing_stream.topic=visasresponses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc2ODk2Ng==", "bodyText": "AFAIR we decided we will always use a CE envelope; otherwise an alternative (for kafka) would be to use the key value", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r510768966", "createdAt": "2020-10-23T09:50:31Z", "author": {"login": "evacchi"}, "path": "kogito-travel-agency/extended/visas/src/main/resources/application.properties", "diffHunk": "@@ -16,21 +16,20 @@ quarkus.infinispan-client.sasl-mechanism=\n \n kafka.bootstrap.servers=localhost:9092\n \n-#mp.messaging.incoming.visaapplications.bootstrap.servers=localhost:9092\n-mp.messaging.incoming.visaapplications.connector=smallrye-kafka\n-mp.messaging.incoming.visaapplications.topic=visaapplications\n-mp.messaging.incoming.visaapplications.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n-#mp.messaging.incoming.visaapplications.auto.offset.reset=earliest\n-\n-#mp.messaging.outgoing.visasapproved.bootstrap.servers=localhost:9092\n-mp.messaging.outgoing.visasapproved.connector=smallrye-kafka\n-mp.messaging.outgoing.visasapproved.topic=visasapproved\n-mp.messaging.outgoing.visasapproved.value.serializer=org.apache.kafka.common.serialization.StringSerializer\n-\n-#mp.messaging.outgoing.visasrejected.bootstrap.servers=localhost:9092\n-mp.messaging.outgoing.visasrejected.connector=smallrye-kafka\n-mp.messaging.outgoing.visasrejected.topic=visasrejected\n-mp.messaging.outgoing.visasrejected.value.serializer=org.apache.kafka.common.serialization.StringSerializer\n+## main transport\n+\n+#mp.messaging.incoming.kogito_incoming_stream.bootstrap.servers=localhost:9092\n+mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka\n+mp.messaging.incoming.kogito_incoming_stream.topic=visaapplications\n+mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n+#mp.messaging.incoming.kogito_incoming_stream.auto.offset.reset=earliest\n+\n+#mp.messaging.outgoing.kogito_outgoing_stream.bootstrap.servers=localhost:9092\n+mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka\n+mp.messaging.outgoing.kogito_outgoing_stream.topic=visasresponses", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0MzQ0NQ=="}, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg0Mjk2OnYy", "diffSide": "RIGHT", "path": "process-kafka-quickstart-quarkus/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0Nzo1MVrOHgyiaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0Nzo1MVrOHgyiaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NDQ4OQ==", "bodyText": "Having the predictable topics would work nicely from the Operator perspective, since we can already create them before deploying the app, without having to fetch for the required topics first.", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504144489", "createdAt": "2020-10-13T17:47:51Z", "author": {"login": "ricardozanini"}, "path": "process-kafka-quickstart-quarkus/src/main/resources/application.properties", "diffHunk": "@@ -2,20 +2,18 @@ quarkus.swagger-ui.always-include=true\n \n kafka.bootstrap.servers=localhost:9092\n \n-mp.messaging.incoming.travellers.connector=smallrye-kafka\n-mp.messaging.incoming.travellers.topic=travellers\n-mp.messaging.incoming.travellers.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n-#mp.messaging.incoming.travellers.bootstrap.servers=localhost:9092\n-#mp.messaging.incoming.travellers.auto.offset.reset=earliest\n+mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka\n+mp.messaging.incoming.kogito_incoming_stream.topic=travellers\n+mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n+#mp.messaging.incoming.kogito_incoming_stream.bootstrap.servers=localhost:9092\n+#mp.messaging.incoming.kogito_incoming_stream.auto.offset.reset=earliest\n \n \n-mp.messaging.outgoing.processedtravellers.connector=smallrye-kafka\n-mp.messaging.outgoing.processedtravellers.topic=processedtravellers\n-mp.messaging.outgoing.processedtravellers.value.serializer=org.apache.kafka.common.serialization.StringSerializer\n-#mp.messaging.outgoing.processedtravellers.bootstrap.servers=localhost:9092\n-\n-# uncomment below line if you don't want to use cloud event payload format\n-#kogito.messaging.as-cloudevents=false\n+mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka\n+mp.messaging.outgoing.kogito_outgoing_stream.topic=processedtravellers\n+mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg0NTU0OnYy", "diffSide": "RIGHT", "path": "process-kafka-quickstart-quarkus/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0ODoxMlrOHgyjtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0ODoxMlrOHgyjtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NDgyMw==", "bodyText": "Maybe removing this DEBUG flag?", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504144823", "createdAt": "2020-10-13T17:48:12Z", "author": {"login": "ricardozanini"}, "path": "process-kafka-quickstart-quarkus/src/main/resources/application.properties", "diffHunk": "@@ -2,20 +2,18 @@ quarkus.swagger-ui.always-include=true\n \n kafka.bootstrap.servers=localhost:9092\n \n-mp.messaging.incoming.travellers.connector=smallrye-kafka\n-mp.messaging.incoming.travellers.topic=travellers\n-mp.messaging.incoming.travellers.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n-#mp.messaging.incoming.travellers.bootstrap.servers=localhost:9092\n-#mp.messaging.incoming.travellers.auto.offset.reset=earliest\n+mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka\n+mp.messaging.incoming.kogito_incoming_stream.topic=travellers\n+mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer\n+#mp.messaging.incoming.kogito_incoming_stream.bootstrap.servers=localhost:9092\n+#mp.messaging.incoming.kogito_incoming_stream.auto.offset.reset=earliest\n \n \n-mp.messaging.outgoing.processedtravellers.connector=smallrye-kafka\n-mp.messaging.outgoing.processedtravellers.topic=processedtravellers\n-mp.messaging.outgoing.processedtravellers.value.serializer=org.apache.kafka.common.serialization.StringSerializer\n-#mp.messaging.outgoing.processedtravellers.bootstrap.servers=localhost:9092\n-\n-# uncomment below line if you don't want to use cloud event payload format\n-#kogito.messaging.as-cloudevents=false\n+mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka\n+mp.messaging.outgoing.kogito_outgoing_stream.topic=processedtravellers\n+mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer\n+#mp.messaging.outgoing.kogito_outgoing_stream.bootstrap.servers=localhost:9092\n \n # Maximum Java heap to be used during the native image generation\n-quarkus.native.native-image-xmx=4g\n\\ No newline at end of file\n+quarkus.native.native-image-xmx=4g\n+quarkus.log.category.\"org.kie.kogito\".level=DEBUG", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg0ODY2OnYy", "diffSide": "RIGHT", "path": "process-knative-quickstart-quarkus/TravelersMessageProducer_7.java_txt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo0ODo1N1rOHgyleg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOToyMzoxMlrOHhKJuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NTI3NA==", "bodyText": "Why do we need this txt file?", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504145274", "createdAt": "2020-10-13T17:48:57Z", "author": {"login": "ricardozanini"}, "path": "process-knative-quickstart-quarkus/TravelersMessageProducer_7.java_txt", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.kie.kogito.test;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMTM4NA==", "bodyText": "whoops forgot it from a debugging section", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504531384", "createdAt": "2020-10-14T09:23:12Z", "author": {"login": "evacchi"}, "path": "process-knative-quickstart-quarkus/TravelersMessageProducer_7.java_txt", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.kie.kogito.test;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NTI3NA=="}, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg1MjkyOnYy", "diffSide": "RIGHT", "path": "process-knative-quickstart-quarkus/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1MDowOFrOHgyoFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNjozNTo1MFrOHhENpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NTk0MQ==", "bodyText": "there's no incoming for smallrye-http plugin. I understand that the implementation needs that, but seems weird from an user perspective and that might confuse people.", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504145941", "createdAt": "2020-10-13T17:50:08Z", "author": {"login": "ricardozanini"}, "path": "process-knative-quickstart-quarkus/src/main/resources/application.properties", "diffHunk": "@@ -1,4 +1,7 @@\n quarkus.swagger-ui.always-include=true\n+\n+mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-http", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzNDA4Ng==", "bodyText": "+1 added as a workaround, because of the eager initialization. let's revisit that; will file jira", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504434086", "createdAt": "2020-10-14T06:35:50Z", "author": {"login": "evacchi"}, "path": "process-knative-quickstart-quarkus/src/main/resources/application.properties", "diffHunk": "@@ -1,4 +1,7 @@\n quarkus.swagger-ui.always-include=true\n+\n+mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-http", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NTk0MQ=="}, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg2MDkzOnYy", "diffSide": "RIGHT", "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1MjoxNlrOHgys4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMzo1NDo0NVrOHhUSdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzE2OA==", "bodyText": "We would need to revert back to the name of the node. The entire SW implementation and the addon were created around that.\nThis event would be consumed / published in a Kubernetes cluster. So would make sense to have the message id from BPMN or the event type from SW spec in this field.\nPlus source means the actual source of the event, like in the GitHub demo: the source is the repository URL.", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504147168", "createdAt": "2020-10-13T17:52:16Z", "author": {"login": "ricardozanini"}, "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -115,7 +115,7 @@ void checkStartNewProcessInstanceWithSourceField() throws JsonProcessingExceptio\n         given()\n                 .header(\"ce-specversion\", \"1.0\")\n                 .header(\"ce-id\", \"000\")\n-                .header(\"ce-source\", \"travellers\")\n+                .header(\"ce-source\", \"TravelersMessageDataEvent_3\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQzNDg3Nw==", "bodyText": "+1\nTBF the implementation will be totally different for knative. I expect the knative addon to provide an ad-hoc Publisher implementation overriding the usual behavior", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504434877", "createdAt": "2020-10-14T06:37:33Z", "author": {"login": "evacchi"}, "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -115,7 +115,7 @@ void checkStartNewProcessInstanceWithSourceField() throws JsonProcessingExceptio\n         given()\n                 .header(\"ce-specversion\", \"1.0\")\n                 .header(\"ce-id\", \"000\")\n-                .header(\"ce-source\", \"travellers\")\n+                .header(\"ce-source\", \"TravelersMessageDataEvent_3\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzE2OA=="}, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzMzUyNw==", "bodyText": "I am adding an additional accepting filter that lets messages pass if their type/source == trigger. Would that work?", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504533527", "createdAt": "2020-10-14T09:26:31Z", "author": {"login": "evacchi"}, "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -115,7 +115,7 @@ void checkStartNewProcessInstanceWithSourceField() throws JsonProcessingExceptio\n         given()\n                 .header(\"ce-specversion\", \"1.0\")\n                 .header(\"ce-id\", \"000\")\n-                .header(\"ce-source\", \"travellers\")\n+                .header(\"ce-source\", \"TravelersMessageDataEvent_3\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzE2OA=="}, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY5NzQ2Mw==", "bodyText": "If this would help the CloudEventListener to route and consume the messages based on the type/source from CE to the internal Kogito channel, I'm ok with that. I mean, the behavior we have today must not change.", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504697463", "createdAt": "2020-10-14T13:54:45Z", "author": {"login": "ricardozanini"}, "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -115,7 +115,7 @@ void checkStartNewProcessInstanceWithSourceField() throws JsonProcessingExceptio\n         given()\n                 .header(\"ce-specversion\", \"1.0\")\n                 .header(\"ce-id\", \"000\")\n-                .header(\"ce-source\", \"travellers\")\n+                .header(\"ce-source\", \"TravelersMessageDataEvent_3\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzE2OA=="}, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg2MzY2OnYy", "diffSide": "RIGHT", "path": "process-knative-quickstart-quarkus/src/test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1Mjo1NFrOHgyuhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1Mjo1NFrOHgyuhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzU4OQ==", "bodyText": "Same here (to remove incoming from smallrye-http).", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504147589", "createdAt": "2020-10-13T17:52:54Z", "author": {"login": "ricardozanini"}, "path": "process-knative-quickstart-quarkus/src/test/resources/application.properties", "diffHunk": "@@ -2,5 +2,7 @@ quarkus.http.test-port=8282\n quarkus.log.level=INFO\n \n # mocked during tests\n+mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-http", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Nzg2NTEzOnYy", "diffSide": "RIGHT", "path": "serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1MzoxNVrOHgyvZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNzo1MzoxNVrOHgyvZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDE0NzgxMg==", "bodyText": "Same here.", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504147812", "createdAt": "2020-10-13T17:53:15Z", "author": {"login": "ricardozanini"}, "path": "serverless-workflow-events-quarkus/src/main/java/org/kogito/serverless/examples/ApplicantResource.java", "diffHunk": "@@ -61,7 +61,7 @@ public void submitApplicant(JsonNode newApplicant) {\n         try {\n             CloudEvent applicantEvent = CloudEventBuilder.v1()\n                     .withId(UUID.randomUUID().toString())\n-                    .withType(\"newApplicantEvent\")\n+                    .withType(\"ApplicantworkflowMessageDataEvent_1\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1ODI0MjQ0OnYy", "diffSide": "RIGHT", "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTozNjoyMFrOHg2ZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxOTozNjoyMFrOHg2ZRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDIwNzY4NA==", "bodyText": "Fix formatting", "url": "https://github.com/kiegroup/kogito-examples/pull/386#discussion_r504207684", "createdAt": "2020-10-13T19:36:20Z", "author": {"login": "danielezonca"}, "path": "process-knative-quickstart-quarkus/src/test/java/org/acme/travel/CloudEventListenerTest.java", "diffHunk": "@@ -38,7 +38,7 @@\n import static io.restassured.RestAssured.given;\n \n @QuarkusTest\n-public class CloudEventListenerTest {\n+    public class CloudEventListenerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cba67152c72c5c62d3c86b6434745e5e21ee4d8"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 438, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}