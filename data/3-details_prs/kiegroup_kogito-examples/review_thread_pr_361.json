{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MTU0NzU3", "number": 361, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODo1Nzo1M1rOEjuoLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToxMzoyN1rOEju-VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODk5NTY2OnYy", "diffSide": "RIGHT", "path": "dmn-tracing-quarkus/Dockerfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODo1Nzo1M1rOHSP5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo0NzowOFrOHS3RQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5NjgxMw==", "bodyText": "What about add this COPY layer too?\nhttps://github.com/kiegroup/kogito-examples/blob/stable/dmn-drools-quarkus-metrics/Dockerfile#L25\nIt should make uberJar flag optional", "url": "https://github.com/kiegroup/kogito-examples/pull/361#discussion_r488896813", "createdAt": "2020-09-15T18:57:53Z", "author": {"login": "danielezonca"}, "path": "dmn-tracing-quarkus/Dockerfile", "diffHunk": "@@ -0,0 +1,3 @@\n+FROM quay.io/kiegroup/kogito-quarkus-jvm-ubi8:latest\n+\n+COPY target/*-runner.jar $KOGITO_HOME/bin    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c753678ac502db8c1aa792b8e232aa69024bb132"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0MTk1Mg==", "bodyText": "Yeah, my env was broken and I thought that only uber jar was working. Fixed", "url": "https://github.com/kiegroup/kogito-examples/pull/361#discussion_r489541952", "createdAt": "2020-09-16T15:47:08Z", "author": {"login": "r00ta"}, "path": "dmn-tracing-quarkus/Dockerfile", "diffHunk": "@@ -0,0 +1,3 @@\n+FROM quay.io/kiegroup/kogito-quarkus-jvm-ubi8:latest\n+\n+COPY target/*-runner.jar $KOGITO_HOME/bin    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5NjgxMw=="}, "originalCommit": {"oid": "c753678ac502db8c1aa792b8e232aa69024bb132"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODk5NzA1OnYy", "diffSide": "RIGHT", "path": "dmn-tracing-quarkus/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODo1ODowOFrOHSP6HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODo1ODowOFrOHSP6HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5NzA1Mg==", "bodyText": "See comment above", "url": "https://github.com/kiegroup/kogito-examples/pull/361#discussion_r488897052", "createdAt": "2020-09-15T18:58:08Z", "author": {"login": "danielezonca"}, "path": "dmn-tracing-quarkus/pom.xml", "diffHunk": "@@ -76,9 +76,12 @@\n   <build>\n     <finalName>${project.artifactId}</finalName>\n     <plugins>\n-      <plugin>\n+     <plugin>\n         <groupId>io.quarkus</groupId>\n         <artifactId>quarkus-maven-plugin</artifactId>\n+        <configuration>\n+          <uberJar>true</uberJar>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c753678ac502db8c1aa792b8e232aa69024bb132"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTAwMTI5OnYy", "diffSide": "RIGHT", "path": "trusty-demonstration/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODo1ODo0OFrOHSP83A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODo1ODo0OFrOHSP83A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5Nzc1Ng==", "bodyText": "Awesome? xD", "url": "https://github.com/kiegroup/kogito-examples/pull/361#discussion_r488897756", "createdAt": "2020-09-15T18:58:48Z", "author": {"login": "danielezonca"}, "path": "trusty-demonstration/README.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Awesome Trusty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c753678ac502db8c1aa792b8e232aa69024bb132"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTAxNzcxOnYy", "diffSide": "RIGHT", "path": "trusty-demonstration/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowMzoxNVrOHSQHJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo0NzozM1rOHS3SYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMDM5MA==", "bodyText": "Please change hardcoded version with a placeholder and refer to https://kogito.kie.org or similar to get the latest version.", "url": "https://github.com/kiegroup/kogito-examples/pull/361#discussion_r488900390", "createdAt": "2020-09-15T19:03:15Z", "author": {"login": "danielezonca"}, "path": "trusty-demonstration/README.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Awesome Trusty\n+\n+This is a demonstration of the trusty AI tracing capabilities. \n+\n+## Requirements\n+\n+- docker version > 19.03.12\n+- minikube version  > 1.11.0\n+- java version > 1.9\n+- maven version > 3.6.3\n+- kubernetes version > 1.18\n+\n+Note: also previous versions of `docker`, `minikube` and `kubernetes`  might work, but they were not tested. \n+\n+## Build your kogito runtime application\n+\n+In this example, we will use the `dmn-tracing-quarkus` application that you can find in the root of this repository. This kogito application is using the `tracing-addon` so to export the tracing information that will be used by the trusty and explainability services for further analysis.\n+\n+Navigate under the folder `kogito-examples/dmn-tracing-quarkus` and run \n+```bash\n+mvn clean package -DskipTests\n+```\n+\n+Now you need to have an account on a remote hub like `quay` or `dockerhub` for example. Assuming that you have an account on `quay` and you are using `docker`, build the image with \n+```bash\n+docker build --tag quay.io/<your_namespace>/dmn-tracing-quarkus:1.0.0 .\n+```\n+replacing the string `<your_namespace>` with your namespace (i.e. your username).\n+\n+Push the image\n+```bash\n+docker push quay.io/<your_namespace>/dmn-tracing-quarkus:1.0.0\n+```\n+\n+## Deploy the infrastructure with minishift/kubernetes\n+\n+Navigate back to the current directory where this `README.md` file is stored. \n+\n+The first step is to start your `minikube` cluster: \n+\n+```bash\n+minikube start\n+minikube addons enable ingress\n+minikube addons enable olm\n+```\n+\n+and then download/unpack the kogito operator\n+\n+```bash\n+wget https://github.com/kiegroup/kogito-cloud-operator/releases/download/v0.15.0/kogito-cli-0.15.0-linux-amd64.tar.gz\n+tar zxf kogito-cli-0.14.0-linux-amd64.tar.gz", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c753678ac502db8c1aa792b8e232aa69024bb132"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0MjI0Mw==", "bodyText": "Changed so that the user can set the KOGITO_VERSION to be used", "url": "https://github.com/kiegroup/kogito-examples/pull/361#discussion_r489542243", "createdAt": "2020-09-16T15:47:33Z", "author": {"login": "r00ta"}, "path": "trusty-demonstration/README.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Awesome Trusty\n+\n+This is a demonstration of the trusty AI tracing capabilities. \n+\n+## Requirements\n+\n+- docker version > 19.03.12\n+- minikube version  > 1.11.0\n+- java version > 1.9\n+- maven version > 3.6.3\n+- kubernetes version > 1.18\n+\n+Note: also previous versions of `docker`, `minikube` and `kubernetes`  might work, but they were not tested. \n+\n+## Build your kogito runtime application\n+\n+In this example, we will use the `dmn-tracing-quarkus` application that you can find in the root of this repository. This kogito application is using the `tracing-addon` so to export the tracing information that will be used by the trusty and explainability services for further analysis.\n+\n+Navigate under the folder `kogito-examples/dmn-tracing-quarkus` and run \n+```bash\n+mvn clean package -DskipTests\n+```\n+\n+Now you need to have an account on a remote hub like `quay` or `dockerhub` for example. Assuming that you have an account on `quay` and you are using `docker`, build the image with \n+```bash\n+docker build --tag quay.io/<your_namespace>/dmn-tracing-quarkus:1.0.0 .\n+```\n+replacing the string `<your_namespace>` with your namespace (i.e. your username).\n+\n+Push the image\n+```bash\n+docker push quay.io/<your_namespace>/dmn-tracing-quarkus:1.0.0\n+```\n+\n+## Deploy the infrastructure with minishift/kubernetes\n+\n+Navigate back to the current directory where this `README.md` file is stored. \n+\n+The first step is to start your `minikube` cluster: \n+\n+```bash\n+minikube start\n+minikube addons enable ingress\n+minikube addons enable olm\n+```\n+\n+and then download/unpack the kogito operator\n+\n+```bash\n+wget https://github.com/kiegroup/kogito-cloud-operator/releases/download/v0.15.0/kogito-cli-0.15.0-linux-amd64.tar.gz\n+tar zxf kogito-cli-0.14.0-linux-amd64.tar.gz", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMDM5MA=="}, "originalCommit": {"oid": "c753678ac502db8c1aa792b8e232aa69024bb132"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTAyMTExOnYy", "diffSide": "RIGHT", "path": "trusty-demonstration/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowNDoyMlrOHSQJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowNDoyMlrOHSQJeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMDk4NQ==", "bodyText": "Replace 0.17.0 hardcoded version", "url": "https://github.com/kiegroup/kogito-examples/pull/361#discussion_r488900985", "createdAt": "2020-09-15T19:04:22Z", "author": {"login": "danielezonca"}, "path": "trusty-demonstration/README.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Awesome Trusty\n+\n+This is a demonstration of the trusty AI tracing capabilities. \n+\n+## Requirements\n+\n+- docker version > 19.03.12\n+- minikube version  > 1.11.0\n+- java version > 1.9\n+- maven version > 3.6.3\n+- kubernetes version > 1.18\n+\n+Note: also previous versions of `docker`, `minikube` and `kubernetes`  might work, but they were not tested. \n+\n+## Build your kogito runtime application\n+\n+In this example, we will use the `dmn-tracing-quarkus` application that you can find in the root of this repository. This kogito application is using the `tracing-addon` so to export the tracing information that will be used by the trusty and explainability services for further analysis.\n+\n+Navigate under the folder `kogito-examples/dmn-tracing-quarkus` and run \n+```bash\n+mvn clean package -DskipTests\n+```\n+\n+Now you need to have an account on a remote hub like `quay` or `dockerhub` for example. Assuming that you have an account on `quay` and you are using `docker`, build the image with \n+```bash\n+docker build --tag quay.io/<your_namespace>/dmn-tracing-quarkus:1.0.0 .\n+```\n+replacing the string `<your_namespace>` with your namespace (i.e. your username).\n+\n+Push the image\n+```bash\n+docker push quay.io/<your_namespace>/dmn-tracing-quarkus:1.0.0\n+```\n+\n+## Deploy the infrastructure with minishift/kubernetes\n+\n+Navigate back to the current directory where this `README.md` file is stored. \n+\n+The first step is to start your `minikube` cluster: \n+\n+```bash\n+minikube start\n+minikube addons enable ingress\n+minikube addons enable olm\n+```\n+\n+and then download/unpack the kogito operator\n+\n+```bash\n+wget https://github.com/kiegroup/kogito-cloud-operator/releases/download/v0.15.0/kogito-cli-0.15.0-linux-amd64.tar.gz\n+tar zxf kogito-cli-0.14.0-linux-amd64.tar.gz\n+```\n+\n+Create a new project called (for example) `trusty-demo` \n+\n+```bash \n+PROJECT_NAME=trusty-demo\n+kubectl create namespace \"$PROJECT_NAME\"\n+```\n+\n+Deploy the kogito operator\n+```bash\n+./kogito use-project \"$PROJECT_NAME\"\n+```\n+\n+You should see that the `kogito-operator` has one pod running within some minutes: the command `kubectl get pods -n \"trusty-demo\"` should return something like \n+\n+```bash\n+NAME                             READY   STATUS    RESTARTS   AGE\n+kogito-operator-9f575f64-zp56t   1/1     Running   0          98s\n+```\n+\n+Install the `kafka` and the `infinispan` operators with \n+\n+```bash\n+TARGET_DIR=\".\"\n+STRIMZI_VERSION=0.17.0\n+INFINISPAN_VERSION=1.1.1.Final\n+\n+echo \"Installing Infinispan Operator\"\n+kubectl apply -f \"https://raw.githubusercontent.com/infinispan/infinispan-operator/${INFINISPAN_VERSION}/deploy/crd.yaml\" -n ${PROJECT_NAME}\n+kubectl apply -f \"https://raw.githubusercontent.com/infinispan/infinispan-operator/${INFINISPAN_VERSION}/deploy/rbac.yaml\" -n ${PROJECT_NAME}\n+kubectl apply -f \"https://raw.githubusercontent.com/infinispan/infinispan-operator/${INFINISPAN_VERSION}/deploy/operator.yaml\" -n ${PROJECT_NAME}\n+\n+wget \"https://github.com/strimzi/strimzi-kafka-operator/releases/download/${STRIMZI_VERSION}/strimzi-${STRIMZI_VERSION}.tar.gz\" -P \"$TARGET_DIR/\"\n+tar zxf \"${TARGET_DIR}/strimzi-${STRIMZI_VERSION}.tar.gz\" -C \"$TARGET_DIR\"\n+find strimzi-0.17.0/install/cluster-operator -name '*RoleBinding*.yaml' -type f -exec sed -i \"s/namespace: .*/namespace: ${PROJECT_NAME}/\" {} \\;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c753678ac502db8c1aa792b8e232aa69024bb132"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTA1MjM2OnYy", "diffSide": "RIGHT", "path": "trusty-demonstration/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToxMzoyN1rOHSQcvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozNDo1MlrOHSj9Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwNTkxOA==", "bodyText": "Which IP? My local env IP? Why don't suggest localhost if user is going to run everything locally specifying to change it if needed?\nAre both envs variables equivalent? Is it possible to have them differently?", "url": "https://github.com/kiegroup/kogito-examples/pull/361#discussion_r488905918", "createdAt": "2020-09-15T19:13:27Z", "author": {"login": "danielezonca"}, "path": "trusty-demonstration/README.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Awesome Trusty\n+\n+This is a demonstration of the trusty AI tracing capabilities. \n+\n+## Requirements\n+\n+- docker version > 19.03.12\n+- minikube version  > 1.11.0\n+- java version > 1.9\n+- maven version > 3.6.3\n+- kubernetes version > 1.18\n+\n+Note: also previous versions of `docker`, `minikube` and `kubernetes`  might work, but they were not tested. \n+\n+## Build your kogito runtime application\n+\n+In this example, we will use the `dmn-tracing-quarkus` application that you can find in the root of this repository. This kogito application is using the `tracing-addon` so to export the tracing information that will be used by the trusty and explainability services for further analysis.\n+\n+Navigate under the folder `kogito-examples/dmn-tracing-quarkus` and run \n+```bash\n+mvn clean package -DskipTests\n+```\n+\n+Now you need to have an account on a remote hub like `quay` or `dockerhub` for example. Assuming that you have an account on `quay` and you are using `docker`, build the image with \n+```bash\n+docker build --tag quay.io/<your_namespace>/dmn-tracing-quarkus:1.0.0 .\n+```\n+replacing the string `<your_namespace>` with your namespace (i.e. your username).\n+\n+Push the image\n+```bash\n+docker push quay.io/<your_namespace>/dmn-tracing-quarkus:1.0.0\n+```\n+\n+## Deploy the infrastructure with minishift/kubernetes\n+\n+Navigate back to the current directory where this `README.md` file is stored. \n+\n+The first step is to start your `minikube` cluster: \n+\n+```bash\n+minikube start\n+minikube addons enable ingress\n+minikube addons enable olm\n+```\n+\n+and then download/unpack the kogito operator\n+\n+```bash\n+wget https://github.com/kiegroup/kogito-cloud-operator/releases/download/v0.15.0/kogito-cli-0.15.0-linux-amd64.tar.gz\n+tar zxf kogito-cli-0.14.0-linux-amd64.tar.gz\n+```\n+\n+Create a new project called (for example) `trusty-demo` \n+\n+```bash \n+PROJECT_NAME=trusty-demo\n+kubectl create namespace \"$PROJECT_NAME\"\n+```\n+\n+Deploy the kogito operator\n+```bash\n+./kogito use-project \"$PROJECT_NAME\"\n+```\n+\n+You should see that the `kogito-operator` has one pod running within some minutes: the command `kubectl get pods -n \"trusty-demo\"` should return something like \n+\n+```bash\n+NAME                             READY   STATUS    RESTARTS   AGE\n+kogito-operator-9f575f64-zp56t   1/1     Running   0          98s\n+```\n+\n+Install the `kafka` and the `infinispan` operators with \n+\n+```bash\n+TARGET_DIR=\".\"\n+STRIMZI_VERSION=0.17.0\n+INFINISPAN_VERSION=1.1.1.Final\n+\n+echo \"Installing Infinispan Operator\"\n+kubectl apply -f \"https://raw.githubusercontent.com/infinispan/infinispan-operator/${INFINISPAN_VERSION}/deploy/crd.yaml\" -n ${PROJECT_NAME}\n+kubectl apply -f \"https://raw.githubusercontent.com/infinispan/infinispan-operator/${INFINISPAN_VERSION}/deploy/rbac.yaml\" -n ${PROJECT_NAME}\n+kubectl apply -f \"https://raw.githubusercontent.com/infinispan/infinispan-operator/${INFINISPAN_VERSION}/deploy/operator.yaml\" -n ${PROJECT_NAME}\n+\n+wget \"https://github.com/strimzi/strimzi-kafka-operator/releases/download/${STRIMZI_VERSION}/strimzi-${STRIMZI_VERSION}.tar.gz\" -P \"$TARGET_DIR/\"\n+tar zxf \"${TARGET_DIR}/strimzi-${STRIMZI_VERSION}.tar.gz\" -C \"$TARGET_DIR\"\n+find strimzi-0.17.0/install/cluster-operator -name '*RoleBinding*.yaml' -type f -exec sed -i \"s/namespace: .*/namespace: ${PROJECT_NAME}/\" {} \\;\n+kubectl apply -f strimzi-${STRIMZI_VERSION}/install/cluster-operator/ -n ${PROJECT_NAME}\n+```\n+\n+Deploy a kafka instance and wait for it\n+```bash\n+kubectl apply -f resources/kafka.yaml -n ${PROJECT_NAME}\n+kubectl wait kafka/my-cluster --for=condition=Ready --timeout=300s -n ${PROJECT_NAME} \n+```\n+\n+Create the kafka topics\n+```bash\n+kubectl apply -f resources/kafka-topics.yaml -n ${PROJECT_NAME}\n+```\n+\n+and the infinispan resource\n+```bash\n+kubectl apply -f resources/infinispan-minimal.yaml -n ${PROJECT_NAME}\n+```\n+\n+Now extract the infinispan secrets with \n+```bash\n+kubectl get secret example-infinispan-generated-secret -o jsonpath=\"{.data.identities\\.yaml}\" -n ${PROJECT_NAME} | base64 --decode\n+```\n+\n+Take the `operator` name and password and calculate the `base64` encoding, and replace the keys `user` and `pass` in `resources/trusty-secrets.yaml` with the encoding. For example, if `operator` is the username and `mysecretpassword` is the password, then \n+```bash\n+$ printf \"operator\" | base64\n+b3BlcmF0b3I=\n+printf \"mysecretpassword\" | base64\n+bXlzZWNyZXRwYXNzd29yZA==\n+```\n+\n+and the content of `resources/trusty-secrets.yaml` should look like the following\n+```yaml\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: kogito-external-infinispan-secret\n+type: Opaque\n+data:\n+  user: b3BlcmF0b3I= \n+  pass: bXlzZWNyZXRwYXNzd29yZA==\n+```\n+\n+Deploy the secret with \n+\n+```bash\n+kubectl apply -f resources/trusty-secrets.yaml -n ${PROJECT_NAME}\n+```\n+\n+Get the ip address of the cluster with \n+```bash\n+minikube ip\n+```\n+\n+and replace the env variables `KOGITO_TRUSTY_ENDPOINT` and `KOGITO_TRUSTY_WS_URL` in the file `resources/trusty-ui.yaml`. For example, if the ip is `172.17.0.2`, then the content of the file should be ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c753678ac502db8c1aa792b8e232aa69024bb132"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNTQ4Mw==", "bodyText": "Hi @danielezonca , the cluster ip is never localhost, that's why we need to get the ip with minikube ip and then change accordingly the configuration in the trusty-ui.\nKOGITO_TRUSTY_ENDPOINT and KOGITO_TRUSTY_WS_URL contains the same ip but the prefix (\"http\" and \"ws\") is different, so that's why the user has to set both of them.", "url": "https://github.com/kiegroup/kogito-examples/pull/361#discussion_r489225483", "createdAt": "2020-09-16T07:34:52Z", "author": {"login": "r00ta"}, "path": "trusty-demonstration/README.md", "diffHunk": "@@ -0,0 +1,212 @@\n+# Awesome Trusty\n+\n+This is a demonstration of the trusty AI tracing capabilities. \n+\n+## Requirements\n+\n+- docker version > 19.03.12\n+- minikube version  > 1.11.0\n+- java version > 1.9\n+- maven version > 3.6.3\n+- kubernetes version > 1.18\n+\n+Note: also previous versions of `docker`, `minikube` and `kubernetes`  might work, but they were not tested. \n+\n+## Build your kogito runtime application\n+\n+In this example, we will use the `dmn-tracing-quarkus` application that you can find in the root of this repository. This kogito application is using the `tracing-addon` so to export the tracing information that will be used by the trusty and explainability services for further analysis.\n+\n+Navigate under the folder `kogito-examples/dmn-tracing-quarkus` and run \n+```bash\n+mvn clean package -DskipTests\n+```\n+\n+Now you need to have an account on a remote hub like `quay` or `dockerhub` for example. Assuming that you have an account on `quay` and you are using `docker`, build the image with \n+```bash\n+docker build --tag quay.io/<your_namespace>/dmn-tracing-quarkus:1.0.0 .\n+```\n+replacing the string `<your_namespace>` with your namespace (i.e. your username).\n+\n+Push the image\n+```bash\n+docker push quay.io/<your_namespace>/dmn-tracing-quarkus:1.0.0\n+```\n+\n+## Deploy the infrastructure with minishift/kubernetes\n+\n+Navigate back to the current directory where this `README.md` file is stored. \n+\n+The first step is to start your `minikube` cluster: \n+\n+```bash\n+minikube start\n+minikube addons enable ingress\n+minikube addons enable olm\n+```\n+\n+and then download/unpack the kogito operator\n+\n+```bash\n+wget https://github.com/kiegroup/kogito-cloud-operator/releases/download/v0.15.0/kogito-cli-0.15.0-linux-amd64.tar.gz\n+tar zxf kogito-cli-0.14.0-linux-amd64.tar.gz\n+```\n+\n+Create a new project called (for example) `trusty-demo` \n+\n+```bash \n+PROJECT_NAME=trusty-demo\n+kubectl create namespace \"$PROJECT_NAME\"\n+```\n+\n+Deploy the kogito operator\n+```bash\n+./kogito use-project \"$PROJECT_NAME\"\n+```\n+\n+You should see that the `kogito-operator` has one pod running within some minutes: the command `kubectl get pods -n \"trusty-demo\"` should return something like \n+\n+```bash\n+NAME                             READY   STATUS    RESTARTS   AGE\n+kogito-operator-9f575f64-zp56t   1/1     Running   0          98s\n+```\n+\n+Install the `kafka` and the `infinispan` operators with \n+\n+```bash\n+TARGET_DIR=\".\"\n+STRIMZI_VERSION=0.17.0\n+INFINISPAN_VERSION=1.1.1.Final\n+\n+echo \"Installing Infinispan Operator\"\n+kubectl apply -f \"https://raw.githubusercontent.com/infinispan/infinispan-operator/${INFINISPAN_VERSION}/deploy/crd.yaml\" -n ${PROJECT_NAME}\n+kubectl apply -f \"https://raw.githubusercontent.com/infinispan/infinispan-operator/${INFINISPAN_VERSION}/deploy/rbac.yaml\" -n ${PROJECT_NAME}\n+kubectl apply -f \"https://raw.githubusercontent.com/infinispan/infinispan-operator/${INFINISPAN_VERSION}/deploy/operator.yaml\" -n ${PROJECT_NAME}\n+\n+wget \"https://github.com/strimzi/strimzi-kafka-operator/releases/download/${STRIMZI_VERSION}/strimzi-${STRIMZI_VERSION}.tar.gz\" -P \"$TARGET_DIR/\"\n+tar zxf \"${TARGET_DIR}/strimzi-${STRIMZI_VERSION}.tar.gz\" -C \"$TARGET_DIR\"\n+find strimzi-0.17.0/install/cluster-operator -name '*RoleBinding*.yaml' -type f -exec sed -i \"s/namespace: .*/namespace: ${PROJECT_NAME}/\" {} \\;\n+kubectl apply -f strimzi-${STRIMZI_VERSION}/install/cluster-operator/ -n ${PROJECT_NAME}\n+```\n+\n+Deploy a kafka instance and wait for it\n+```bash\n+kubectl apply -f resources/kafka.yaml -n ${PROJECT_NAME}\n+kubectl wait kafka/my-cluster --for=condition=Ready --timeout=300s -n ${PROJECT_NAME} \n+```\n+\n+Create the kafka topics\n+```bash\n+kubectl apply -f resources/kafka-topics.yaml -n ${PROJECT_NAME}\n+```\n+\n+and the infinispan resource\n+```bash\n+kubectl apply -f resources/infinispan-minimal.yaml -n ${PROJECT_NAME}\n+```\n+\n+Now extract the infinispan secrets with \n+```bash\n+kubectl get secret example-infinispan-generated-secret -o jsonpath=\"{.data.identities\\.yaml}\" -n ${PROJECT_NAME} | base64 --decode\n+```\n+\n+Take the `operator` name and password and calculate the `base64` encoding, and replace the keys `user` and `pass` in `resources/trusty-secrets.yaml` with the encoding. For example, if `operator` is the username and `mysecretpassword` is the password, then \n+```bash\n+$ printf \"operator\" | base64\n+b3BlcmF0b3I=\n+printf \"mysecretpassword\" | base64\n+bXlzZWNyZXRwYXNzd29yZA==\n+```\n+\n+and the content of `resources/trusty-secrets.yaml` should look like the following\n+```yaml\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: kogito-external-infinispan-secret\n+type: Opaque\n+data:\n+  user: b3BlcmF0b3I= \n+  pass: bXlzZWNyZXRwYXNzd29yZA==\n+```\n+\n+Deploy the secret with \n+\n+```bash\n+kubectl apply -f resources/trusty-secrets.yaml -n ${PROJECT_NAME}\n+```\n+\n+Get the ip address of the cluster with \n+```bash\n+minikube ip\n+```\n+\n+and replace the env variables `KOGITO_TRUSTY_ENDPOINT` and `KOGITO_TRUSTY_WS_URL` in the file `resources/trusty-ui.yaml`. For example, if the ip is `172.17.0.2`, then the content of the file should be ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwNTkxOA=="}, "originalCommit": {"oid": "c753678ac502db8c1aa792b8e232aa69024bb132"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 425, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}