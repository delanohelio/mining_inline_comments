{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NTY1NzQy", "number": 1625, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo1NjowNFrOEjxZlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyMzoxNlrOEnH2EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTQ0OTgwOnYy", "diffSide": "RIGHT", "path": "avro-data/src/test/java/io/confluent/connect/avro/AvroDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo1NjowNFrOHSUOig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTowMTowMVrOHXAzqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NzgxOA==", "bodyText": "We should keep the doc calls in this test and modify what we expect.", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r488967818", "createdAt": "2020-09-15T20:56:04Z", "author": {"login": "rayokota"}, "path": "avro-data/src/test/java/io/confluent/connect/avro/AvroDataTest.java", "diffHunk": "@@ -503,22 +490,35 @@ public void testFromConnectComplexWithDefaults() {\n     org.apache.avro.Schema avroSchema = org.apache.avro.SchemaBuilder\n         .record(AvroData.DEFAULT_SCHEMA_NAME).namespace(AvroData.NAMESPACE) // default values\n         .fields()\n-        .name(\"int8\").doc(\"int8 field\").type(int8Schema).withDefault(2)\n-        .name(\"int16\").doc(\"int16 field\").type(int16Schema).withDefault(12)\n-        .name(\"int32\").doc(\"int32 field\").type(int32Schema).withDefault(12)\n-        .name(\"int64\").doc(\"int64 field\").type(int64Schema).withDefault(12L)\n-        .name(\"float32\").doc(\"float32 field\").type(float32Schema).withDefault(12.2f)\n-        .name(\"float64\").doc(\"float64 field\").type(float64Schema).withDefault(12.2)\n-        .name(\"boolean\").doc(\"bool field\").type(boolSchema).withDefault(true)\n-        .name(\"string\").doc(\"string field\").type(stringSchema).withDefault(\"foo\")\n-        .name(\"bytes\").doc(\"bytes field\").type(bytesSchema).withDefault(ByteBuffer.wrap(\"foo\".getBytes()))\n+        .name(\"int8\").type(int8Schema).withDefault(2)\n+        .name(\"int16\").type(int16Schema).withDefault(12)\n+        .name(\"int32\").type(int32Schema).withDefault(12)\n+        .name(\"int64\").type(int64Schema).withDefault(12L)\n+        .name(\"float32\").type(float32Schema).withDefault(12.2f)\n+        .name(\"float64\").type(float64Schema).withDefault(12.2)\n+        .name(\"boolean\").type(boolSchema).withDefault(true)\n+        .name(\"string\").type(stringSchema).withDefault(\"foo\")\n+        .name(\"bytes\").type(bytesSchema).withDefault(ByteBuffer.wrap(\"foo\".getBytes()))\n         .name(\"array\").type(arraySchema).withDefault(Arrays.asList(\"a\", \"b\", \"c\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cde07b12a51d140121294e82867682729af3213c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg5MjUyMQ==", "bodyText": "avroSchema (what we expect) will not have field doc because we will no longer add content of connect.doc to avro field's doc, it will have the connect.doc property at field schema level instead.", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493892521", "createdAt": "2020-09-23T21:01:01Z", "author": {"login": "xiaoyali97"}, "path": "avro-data/src/test/java/io/confluent/connect/avro/AvroDataTest.java", "diffHunk": "@@ -503,22 +490,35 @@ public void testFromConnectComplexWithDefaults() {\n     org.apache.avro.Schema avroSchema = org.apache.avro.SchemaBuilder\n         .record(AvroData.DEFAULT_SCHEMA_NAME).namespace(AvroData.NAMESPACE) // default values\n         .fields()\n-        .name(\"int8\").doc(\"int8 field\").type(int8Schema).withDefault(2)\n-        .name(\"int16\").doc(\"int16 field\").type(int16Schema).withDefault(12)\n-        .name(\"int32\").doc(\"int32 field\").type(int32Schema).withDefault(12)\n-        .name(\"int64\").doc(\"int64 field\").type(int64Schema).withDefault(12L)\n-        .name(\"float32\").doc(\"float32 field\").type(float32Schema).withDefault(12.2f)\n-        .name(\"float64\").doc(\"float64 field\").type(float64Schema).withDefault(12.2)\n-        .name(\"boolean\").doc(\"bool field\").type(boolSchema).withDefault(true)\n-        .name(\"string\").doc(\"string field\").type(stringSchema).withDefault(\"foo\")\n-        .name(\"bytes\").doc(\"bytes field\").type(bytesSchema).withDefault(ByteBuffer.wrap(\"foo\".getBytes()))\n+        .name(\"int8\").type(int8Schema).withDefault(2)\n+        .name(\"int16\").type(int16Schema).withDefault(12)\n+        .name(\"int32\").type(int32Schema).withDefault(12)\n+        .name(\"int64\").type(int64Schema).withDefault(12L)\n+        .name(\"float32\").type(float32Schema).withDefault(12.2f)\n+        .name(\"float64\").type(float64Schema).withDefault(12.2)\n+        .name(\"boolean\").type(boolSchema).withDefault(true)\n+        .name(\"string\").type(stringSchema).withDefault(\"foo\")\n+        .name(\"bytes\").type(bytesSchema).withDefault(ByteBuffer.wrap(\"foo\".getBytes()))\n         .name(\"array\").type(arraySchema).withDefault(Arrays.asList(\"a\", \"b\", \"c\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NzgxOA=="}, "originalCommit": {"oid": "cde07b12a51d140121294e82867682729af3213c"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTQ1MDA2OnYy", "diffSide": "RIGHT", "path": "avro-data/src/test/java/io/confluent/connect/avro/AvroDataTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo1NjoxNFrOHSUOvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo1NjoxNFrOHSUOvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2Nzg2OQ==", "bodyText": "Same", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r488967869", "createdAt": "2020-09-15T20:56:14Z", "author": {"login": "rayokota"}, "path": "avro-data/src/test/java/io/confluent/connect/avro/AvroDataTest.java", "diffHunk": "@@ -503,22 +490,35 @@ public void testFromConnectComplexWithDefaults() {\n     org.apache.avro.Schema avroSchema = org.apache.avro.SchemaBuilder\n         .record(AvroData.DEFAULT_SCHEMA_NAME).namespace(AvroData.NAMESPACE) // default values\n         .fields()\n-        .name(\"int8\").doc(\"int8 field\").type(int8Schema).withDefault(2)\n-        .name(\"int16\").doc(\"int16 field\").type(int16Schema).withDefault(12)\n-        .name(\"int32\").doc(\"int32 field\").type(int32Schema).withDefault(12)\n-        .name(\"int64\").doc(\"int64 field\").type(int64Schema).withDefault(12L)\n-        .name(\"float32\").doc(\"float32 field\").type(float32Schema).withDefault(12.2f)\n-        .name(\"float64\").doc(\"float64 field\").type(float64Schema).withDefault(12.2)\n-        .name(\"boolean\").doc(\"bool field\").type(boolSchema).withDefault(true)\n-        .name(\"string\").doc(\"string field\").type(stringSchema).withDefault(\"foo\")\n-        .name(\"bytes\").doc(\"bytes field\").type(bytesSchema).withDefault(ByteBuffer.wrap(\"foo\".getBytes()))\n+        .name(\"int8\").type(int8Schema).withDefault(2)\n+        .name(\"int16\").type(int16Schema).withDefault(12)\n+        .name(\"int32\").type(int32Schema).withDefault(12)\n+        .name(\"int64\").type(int64Schema).withDefault(12L)\n+        .name(\"float32\").type(float32Schema).withDefault(12.2f)\n+        .name(\"float64\").type(float64Schema).withDefault(12.2)\n+        .name(\"boolean\").type(boolSchema).withDefault(true)\n+        .name(\"string\").type(stringSchema).withDefault(\"foo\")\n+        .name(\"bytes\").type(bytesSchema).withDefault(ByteBuffer.wrap(\"foo\".getBytes()))\n         .name(\"array\").type(arraySchema).withDefault(Arrays.asList(\"a\", \"b\", \"c\"))\n         .name(\"map\").type(mapSchema).withDefault(Collections.singletonMap(\"field\", 1))\n-        .name(\"date\").doc(\"date field\").type(dateSchema).withDefault(dateDefVal)\n-        .name(\"time\").doc(\"time field\").type(timeSchema).withDefault(timeDefVal)\n-        .name(\"ts\").doc(\"ts field\").type(tsSchema).withDefault(tsDefVal)\n-        .name(\"decimal\").doc(\"decimal field\").type(decimalSchema).withDefault(ByteBuffer.wrap(decimalDefVal))\n+        .name(\"date\").type(dateSchema).withDefault(dateDefVal)\n+        .name(\"time\").type(timeSchema).withDefault(timeDefVal)\n+        .name(\"ts\").type(tsSchema).withDefault(tsDefVal)\n+        .name(\"decimal\").type(decimalSchema).withDefault(ByteBuffer.wrap(decimalDefVal))\n         .endRecord();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cde07b12a51d140121294e82867682729af3213c"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTQ2MjM5OnYy", "diffSide": "LEFT", "path": "avro-data/src/test/java/io/confluent/connect/avro/AvroDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDo1OTo1OVrOHSUWUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMjoyNTozNlrOHSX6HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2OTgwOA==", "bodyText": "I think we still need tests to cover record-level docs from Connect schema to Avro schema.", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r488969808", "createdAt": "2020-09-15T20:59:59Z", "author": {"login": "rayokota"}, "path": "avro-data/src/test/java/io/confluent/connect/avro/AvroDataTest.java", "diffHunk": "@@ -736,8 +735,8 @@ public void testFromConnectOptionalPrimitiveWithMetadata() {\n   @Test\n   public void testFromConnectRecordWithMetadata() {\n     Schema schema = SchemaBuilder.struct()\n-        .name(\"io.confluent.test.TestSchema\").version(12).doc(\"doc\")\n-        .field(\"int32\", Schema.INT32_SCHEMA)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cde07b12a51d140121294e82867682729af3213c"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTAyODEyNQ==", "bodyText": "The Avro spec https://avro.apache.org/docs/current/spec.html#schema_primitive states\n\nPrimitive types have no specified attributes.\n\nSo only complex type schema will have connect.record.doc.\nPrimitive type can only have connect.field.doc because the current implementation can't distinguish a primitive schema from being a field level schema or is itself a record level schema.", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r489028125", "createdAt": "2020-09-15T22:25:36Z", "author": {"login": "xiaoyali97"}, "path": "avro-data/src/test/java/io/confluent/connect/avro/AvroDataTest.java", "diffHunk": "@@ -736,8 +735,8 @@ public void testFromConnectOptionalPrimitiveWithMetadata() {\n   @Test\n   public void testFromConnectRecordWithMetadata() {\n     Schema schema = SchemaBuilder.struct()\n-        .name(\"io.confluent.test.TestSchema\").version(12).doc(\"doc\")\n-        .field(\"int32\", Schema.INT32_SCHEMA)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2OTgwOA=="}, "originalCommit": {"oid": "cde07b12a51d140121294e82867682729af3213c"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDIyMTc5OnYy", "diffSide": "RIGHT", "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozMzoxMFrOHW5QkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozMzoxMFrOHW5QkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2ODg0OQ==", "bodyText": "We don't need this null check since it is already performed a few lines above.", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493768849", "createdAt": "2020-09-23T17:33:10Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -779,10 +783,18 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n               symbols.add(entry.getValue());\n             }\n           }\n+          String enumDoc = null;\n+          String enumDefault = null;\n+          if (schema.parameters() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c7fc480670f7e6b0a7f704b5768fc8bd69af3d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDIzODY3OnYy", "diffSide": "RIGHT", "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozODowMVrOHW5bWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzozODowMVrOHW5bWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTYxMA==", "bodyText": "Change to\nString fieldDoc = schema.parameters() != null ? schema.parameters().getOrDefault(AVRO_FIELD_DOC_PREFIX_PROP + field.name(), null) : null;\nWe check for != null for consistency with other parts of the code.\nPerforming get after containsKey is generally an anti-pattern.", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493771610", "createdAt": "2020-09-23T17:38:01Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -871,7 +885,10 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           }\n           List<org.apache.avro.Schema.Field> fields = new ArrayList<>();\n           for (Field field : schema.fields()) {\n-            addAvroRecordField(fields, field.name(), field.schema(), fromConnectContext);\n+            String fieldDoc = schema.parameters() == null ? null :\n+                (schema.parameters().containsKey(AVRO_FIELD_DOC_PREFIX_PROP + field.name())\n+                    ? schema.parameters().get(AVRO_FIELD_DOC_PREFIX_PROP + field.name()) : null);\n+            addAvroRecordField(fields, field.name(), field.schema(), fromConnectContext, fieldDoc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c7fc480670f7e6b0a7f704b5768fc8bd69af3d"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDI2NTk4OnYy", "diffSide": "RIGHT", "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0NTozMlrOHW5sZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0NTozMlrOHW5sZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3NTk3NQ==", "bodyText": "Let's switch fromConnectContext and fieldDoc so that fromConnectContext is last.  Generally we want context objects to always be the first or last parameter.", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493775975", "createdAt": "2020-09-23T17:45:32Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -1020,7 +1043,8 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n   private void addAvroRecordField(\n       List<org.apache.avro.Schema.Field> fields,\n       String fieldName, Schema fieldSchema,\n-      FromConnectContext fromConnectContext) {\n+      FromConnectContext fromConnectContext,\n+      String fieldDoc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c7fc480670f7e6b0a7f704b5768fc8bd69af3d"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDI3NTk3OnYy", "diffSide": "RIGHT", "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0ODowOVrOHW5yeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo0ODowOVrOHW5yeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3NzUyOA==", "bodyText": "Let's merge this method with parametersFromConnect by just adding the check for AVRO_FIELD_DEFAULT_FLAG_PROP to parametersFromConnect and removing this method.", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493777528", "createdAt": "2020-09-23T17:48:09Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -1169,6 +1193,16 @@ private static JsonNode defaultValueFromConnect(Schema schema, Object value) {\n     }\n   }\n \n+  private static JsonNode parametersFromConncetWithoutAvroDefaultFlag(Map<String, String> params) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c7fc480670f7e6b0a7f704b5768fc8bd69af3d"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDI5MTcwOnYy", "diffSide": "RIGHT", "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo1MjowOFrOHW58PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozNjozMVrOHXB1wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4MDAyOQ==", "bodyText": "Can this TODO be removed?", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493780029", "createdAt": "2020-09-23T17:52:08Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -1745,14 +1791,11 @@ private Schema toConnectSchema(org.apache.avro.Schema schema,\n                                 + schema.getType().getName() + \".\");\n     }\n \n-    String docVal = docDefaultVal != null ? docDefaultVal :\n-        (schema.getDoc() != null ? schema.getDoc() : schema.getProp(CONNECT_DOC_PROP));\n-    if (docVal != null) {\n+    String docVal = schema.getProp(CONNECT_DOC_PROP);\n+    if (connectMetaData && docVal != null) {\n       builder.doc(docVal);\n     }\n-    if (connectMetaData && schema.getDoc() != null) {\n-      builder.parameter(CONNECT_RECORD_DOC_PROP, schema.getDoc());\n-    }\n+    //todo: handle connect default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c7fc480670f7e6b0a7f704b5768fc8bd69af3d"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg3MjQxMA==", "bodyText": "Yes.", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493872410", "createdAt": "2020-09-23T20:23:04Z", "author": {"login": "xiaoyali97"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -1745,14 +1791,11 @@ private Schema toConnectSchema(org.apache.avro.Schema schema,\n                                 + schema.getType().getName() + \".\");\n     }\n \n-    String docVal = docDefaultVal != null ? docDefaultVal :\n-        (schema.getDoc() != null ? schema.getDoc() : schema.getProp(CONNECT_DOC_PROP));\n-    if (docVal != null) {\n+    String docVal = schema.getProp(CONNECT_DOC_PROP);\n+    if (connectMetaData && docVal != null) {\n       builder.doc(docVal);\n     }\n-    if (connectMetaData && schema.getDoc() != null) {\n-      builder.parameter(CONNECT_RECORD_DOC_PROP, schema.getDoc());\n-    }\n+    //todo: handle connect default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4MDAyOQ=="}, "originalCommit": {"oid": "f8c7fc480670f7e6b0a7f704b5768fc8bd69af3d"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwOTQ0MQ==", "bodyText": "todo:  remove todo :)", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493909441", "createdAt": "2020-09-23T21:36:31Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -1745,14 +1791,11 @@ private Schema toConnectSchema(org.apache.avro.Schema schema,\n                                 + schema.getType().getName() + \".\");\n     }\n \n-    String docVal = docDefaultVal != null ? docDefaultVal :\n-        (schema.getDoc() != null ? schema.getDoc() : schema.getProp(CONNECT_DOC_PROP));\n-    if (docVal != null) {\n+    String docVal = schema.getProp(CONNECT_DOC_PROP);\n+    if (connectMetaData && docVal != null) {\n       builder.doc(docVal);\n     }\n-    if (connectMetaData && schema.getDoc() != null) {\n-      builder.parameter(CONNECT_RECORD_DOC_PROP, schema.getDoc());\n-    }\n+    //todo: handle connect default", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4MDAyOQ=="}, "originalCommit": {"oid": "f8c7fc480670f7e6b0a7f704b5768fc8bd69af3d"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDMyMzY5OnYy", "diffSide": "RIGHT", "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowMDoxMVrOHW6QGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODowMDoxMVrOHW6QGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NTExMg==", "bodyText": "Simplify to\n    Object connectDefault = schema.getObjectProp(CONNECT_DEFAULT_VALUE_PROP);\n    if (fieldDefaultVal == null) {\n      fieldDefaultVal = JacksonUtils.toJsonNode(connectDefault);\n    } else if (connectDefault == null) {\n      builder.parameter(AVRO_FIELD_DEFAULT_FLAG_PROP, \"true\");\n    }", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493785112", "createdAt": "2020-09-23T18:00:11Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -1805,6 +1848,9 @@ private Schema toConnectSchema(org.apache.avro.Schema schema,\n       }\n     }\n \n+    if (fieldDefaultVal != null && schema.getObjectProp(CONNECT_DEFAULT_VALUE_PROP) == null) {\n+      builder.parameter(AVRO_FIELD_DEFAULT_FLAG_PROP, \"true\");\n+    }\n     if (fieldDefaultVal == null) {\n       fieldDefaultVal = JacksonUtils.toJsonNode(schema.getObjectProp(CONNECT_DEFAULT_VALUE_PROP));\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c7fc480670f7e6b0a7f704b5768fc8bd69af3d"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDM3NTkxOnYy", "diffSide": "RIGHT", "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoxNDo0NVrOHW6xeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODoxNDo0NVrOHW6xeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5MzY1Ng==", "bodyText": "We should probably leave this as defaultValueFromConnect", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493793656", "createdAt": "2020-09-23T18:14:45Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -891,11 +908,17 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n                              JsonNodeFactory.instance.numberNode(schema.version()));\n         }\n         if (schema.parameters() != null) {\n-          baseSchema.addProp(CONNECT_PARAMETERS_PROP, parametersFromConnect(schema.parameters()));\n+          JsonNode params = parametersFromConncetWithoutAvroDefaultFlag(schema.parameters());\n+          if (!params.isEmpty()) {\n+            baseSchema.addProp(CONNECT_PARAMETERS_PROP, params);\n+          }\n         }\n         if (schema.defaultValue() != null) {\n-          baseSchema.addProp(CONNECT_DEFAULT_VALUE_PROP,\n-                             defaultValueFromConnect(schema, schema.defaultValue()));\n+          if (schema.parameters() == null\n+              || !schema.parameters().containsKey(AVRO_FIELD_DEFAULT_FLAG_PROP)) {\n+            baseSchema.addProp(CONNECT_DEFAULT_VALUE_PROP,\n+                defaultValueToConnect(schema, schema.defaultValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c7fc480670f7e6b0a7f704b5768fc8bd69af3d"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTA5NDk2OnYy", "diffSide": "RIGHT", "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozMTowN1rOHXBsww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozMTowN1rOHXBsww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNzEzOQ==", "bodyText": "I think this can just be get()", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493907139", "createdAt": "2020-09-23T21:31:07Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -779,10 +783,15 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n               symbols.add(entry.getValue());\n             }\n           }\n+          String enumDoc = schema.parameters()\n+              .getOrDefault(AVRO_ENUM_DOC_PREFIX_PROP + name, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42ed392f5ac248698ae7996cd3ce272801ba5540"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTA5NTA4OnYy", "diffSide": "RIGHT", "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozMToxMlrOHXBs3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozMToxMlrOHXBs3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNzE2NA==", "bodyText": "I think this can just be get()", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493907164", "createdAt": "2020-09-23T21:31:12Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -779,10 +783,15 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n               symbols.add(entry.getValue());\n             }\n           }\n+          String enumDoc = schema.parameters()\n+              .getOrDefault(AVRO_ENUM_DOC_PREFIX_PROP + name, null);\n+          String enumDefault = schema.parameters()\n+              .getOrDefault(AVRO_ENUM_DEFAULT_PREFIX_PROP + name, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42ed392f5ac248698ae7996cd3ce272801ba5540"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTA5NjQ3OnYy", "diffSide": "RIGHT", "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozMTo0NVrOHXBtwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozMTo0NVrOHXBtwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNzM5Mw==", "bodyText": "I think this can just be get()", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r493907393", "createdAt": "2020-09-23T21:31:45Z", "author": {"login": "rayokota"}, "path": "avro-data/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -871,7 +882,11 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           }\n           List<org.apache.avro.Schema.Field> fields = new ArrayList<>();\n           for (Field field : schema.fields()) {\n-            addAvroRecordField(fields, field.name(), field.schema(), fromConnectContext);\n+            String fieldDoc = schema.parameters() != null\n+                ? schema.parameters()\n+                  .getOrDefault(AVRO_FIELD_DOC_PREFIX_PROP + field.name(), null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42ed392f5ac248698ae7996cd3ce272801ba5540"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDU4MzkwOnYy", "diffSide": "RIGHT", "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyMzowNVrOHXizpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyMzowNVrOHXizpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0OTU3Mg==", "bodyText": "Let's comment this property, something like \"This property is used to determine whether a default value in the Connect schema originated from an Avro field default.\"", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r494449572", "createdAt": "2020-09-24T16:23:05Z", "author": {"login": "rayokota"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -85,12 +84,15 @@\n \n   public static final String CONNECT_NAME_PROP = \"connect.name\";\n   public static final String CONNECT_DOC_PROP = \"connect.doc\";\n-  public static final String CONNECT_RECORD_DOC_PROP = \"connect.record.doc\";\n-  public static final String CONNECT_ENUM_DOC_PROP = \"connect.enum.doc\";\n   public static final String CONNECT_VERSION_PROP = \"connect.version\";\n   public static final String CONNECT_DEFAULT_VALUE_PROP = \"connect.default\";\n   public static final String CONNECT_PARAMETERS_PROP = \"connect.parameters\";\n   public static final String CONNECT_INTERNAL_TYPE_NAME = \"connect.internal.type\";\n+  public static final String AVRO_RECORD_DOC_PROP = NAMESPACE + \".record.doc\";\n+  public static final String AVRO_ENUM_DOC_PREFIX_PROP = NAMESPACE + \".enum.doc.\";\n+  public static final String AVRO_FIELD_DOC_PREFIX_PROP = NAMESPACE + \".field.doc.\";\n+  public static final String AVRO_FIELD_DEFAULT_FLAG_PROP = NAMESPACE + \".field.default\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0506c660a284da01a04d5f073d95c0999a6f32c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDU4NDQ4OnYy", "diffSide": "RIGHT", "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyMzoxNlrOHXi0BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyMzoxNlrOHXi0BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0OTY2OA==", "bodyText": "nit: extra line", "url": "https://github.com/confluentinc/schema-registry/pull/1625#discussion_r494449668", "createdAt": "2020-09-24T16:23:16Z", "author": {"login": "rayokota"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -100,6 +102,7 @@\n   public static final String AVRO_TYPE_UNION = NAMESPACE + \".Union\";\n   public static final String AVRO_TYPE_ENUM = NAMESPACE + \".Enum\";\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0506c660a284da01a04d5f073d95c0999a6f32c"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1840, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}