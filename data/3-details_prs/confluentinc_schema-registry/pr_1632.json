{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0Mzg1OTkz", "number": 1632, "title": "Add Mode.READONLY_OVERRIDE and global mode", "bodyText": "https://confluentinc.atlassian.net/browse/DG-891", "createdAt": "2020-09-28T20:33:53Z", "url": "https://github.com/confluentinc/schema-registry/pull/1632", "merged": true, "mergeCommit": {"oid": "ee48518e04de3c7cfaaa80c0edde0eb106fc7449"}, "closed": true, "closedAt": "2020-10-28T22:28:49Z", "author": {"login": "xiaoyali97"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOdjbRgFqTUwMDg0MzQ3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXErjSgFqTUxOTEwODMxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODQzNDc5", "url": "https://github.com/confluentinc/schema-registry/pull/1632#pullrequestreview-500843479", "createdAt": "2020-10-02T03:34:20Z", "commit": {"oid": "343c070b8208d8bb4ad300a590c01cedb2ca0486"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMzozNDoyMVrOHbgfUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwMzozNzozMVrOHbghdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNTkwNA==", "bodyText": "Let's create a method isReadOnlyMode(String subject)", "url": "https://github.com/confluentinc/schema-registry/pull/1632#discussion_r498605904", "createdAt": "2020-10-02T03:34:21Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -525,7 +525,8 @@ public int register(String subject,\n   private void checkRegisterMode(\n       String subject, Schema schema\n   ) throws OperationNotPermittedException, SchemaRegistryStoreException {\n-    if (getModeInScope(subject) == Mode.READONLY) {\n+    if (getModeInScope(subject) == Mode.READONLY", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "343c070b8208d8bb4ad300a590c01cedb2ca0486"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNjE5MQ==", "bodyText": "I think this can be replaced with Mode globalMode = lookupCache.mode(null, false, defaultMode)", "url": "https://github.com/confluentinc/schema-registry/pull/1632#discussion_r498606191", "createdAt": "2020-10-02T03:36:14Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1338,15 +1342,35 @@ private void deleteSubjectCompatibility(String subject) throws StoreException {\n \n   public Mode getMode(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, false, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "343c070b8208d8bb4ad300a590c01cedb2ca0486"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNjMwOA==", "bodyText": "I think this can be replaced with Mode globalMode = lookupCache.mode(null, false, defaultMode)", "url": "https://github.com/confluentinc/schema-registry/pull/1632#discussion_r498606308", "createdAt": "2020-10-02T03:36:44Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1338,15 +1342,35 @@ private void deleteSubjectCompatibility(String subject) throws StoreException {\n \n   public Mode getMode(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, false, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;\n+      Mode subjectMode = lookupCache.mode(subject, false, defaultMode);\n+\n+      if (globalMode == Mode.READONLY_OVERRIDE) {\n+        return globalMode;\n+      } else if (subjectMode != null) {\n+        return subjectMode;\n+      } else {\n+        return globalMode != null ? globalMode : defaultMode;\n+      }\n     } catch (StoreException e) {\n       throw new SchemaRegistryStoreException(\"Failed to write new config value to the store\", e);\n     }\n   }\n \n   private Mode getModeInScope(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, true, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "343c070b8208d8bb4ad300a590c01cedb2ca0486"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNjQzNw==", "bodyText": "I think can be replaced with return subjectMode", "url": "https://github.com/confluentinc/schema-registry/pull/1632#discussion_r498606437", "createdAt": "2020-10-02T03:37:24Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1338,15 +1342,35 @@ private void deleteSubjectCompatibility(String subject) throws StoreException {\n \n   public Mode getMode(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, false, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;\n+      Mode subjectMode = lookupCache.mode(subject, false, defaultMode);\n+\n+      if (globalMode == Mode.READONLY_OVERRIDE) {\n+        return globalMode;\n+      } else if (subjectMode != null) {\n+        return subjectMode;\n+      } else {\n+        return globalMode != null ? globalMode : defaultMode;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "343c070b8208d8bb4ad300a590c01cedb2ca0486"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYwNjQ1Mw==", "bodyText": "I think can be replaced with return subjectMode", "url": "https://github.com/confluentinc/schema-registry/pull/1632#discussion_r498606453", "createdAt": "2020-10-02T03:37:31Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1338,15 +1342,35 @@ private void deleteSubjectCompatibility(String subject) throws StoreException {\n \n   public Mode getMode(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, false, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;\n+      Mode subjectMode = lookupCache.mode(subject, false, defaultMode);\n+\n+      if (globalMode == Mode.READONLY_OVERRIDE) {\n+        return globalMode;\n+      } else if (subjectMode != null) {\n+        return subjectMode;\n+      } else {\n+        return globalMode != null ? globalMode : defaultMode;\n+      }\n     } catch (StoreException e) {\n       throw new SchemaRegistryStoreException(\"Failed to write new config value to the store\", e);\n     }\n   }\n \n   private Mode getModeInScope(String subject) throws SchemaRegistryStoreException {\n     try {\n-      return lookupCache.mode(subject, true, defaultMode);\n+      SchemaRegistryValue globalModeValue = this.kafkaStore.get(new ModeKey(null));\n+      Mode globalMode = globalModeValue != null ? ((ModeValue) globalModeValue).getMode() : null;\n+      Mode subjectMode = lookupCache.mode(subject, false, defaultMode);\n+\n+      if (globalMode == Mode.READONLY_OVERRIDE) {\n+        return globalMode;\n+      } else if (subjectMode != null) {\n+        return subjectMode;\n+      } else {\n+        return globalMode != null ? globalMode : defaultMode;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "343c070b8208d8bb4ad300a590c01cedb2ca0486"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58bc14eb6074724d7d0aa7256efc4d1cd7fe0187", "author": {"user": {"login": "xiaoyali97", "name": "Xiaoya Li"}}, "url": "https://github.com/confluentinc/schema-registry/commit/58bc14eb6074724d7d0aa7256efc4d1cd7fe0187", "committedDate": "2020-10-02T19:02:12Z", "message": "add Mode.READONLY_OVERRIDE and global mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62eb4b2c8d8b4ff3691bb1b55261ea44fe0acb97", "author": {"user": {"login": "xiaoyali97", "name": "Xiaoya Li"}}, "url": "https://github.com/confluentinc/schema-registry/commit/62eb4b2c8d8b4ff3691bb1b55261ea44fe0acb97", "committedDate": "2020-10-02T19:02:12Z", "message": "polishing code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4e1cd795a88a9ee0d94cbc88d3da40c4cb260c4", "author": {"user": {"login": "xiaoyali97", "name": "Xiaoya Li"}}, "url": "https://github.com/confluentinc/schema-registry/commit/a4e1cd795a88a9ee0d94cbc88d3da40c4cb260c4", "committedDate": "2020-10-02T19:02:12Z", "message": "add unit test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "343c070b8208d8bb4ad300a590c01cedb2ca0486", "author": {"user": {"login": "xiaoyali97", "name": "Xiaoya Li"}}, "url": "https://github.com/confluentinc/schema-registry/commit/343c070b8208d8bb4ad300a590c01cedb2ca0486", "committedDate": "2020-09-28T20:32:16Z", "message": "add Mode.READONLY_OVERRIDE and global mode"}, "afterCommit": {"oid": "a4e1cd795a88a9ee0d94cbc88d3da40c4cb260c4", "author": {"user": {"login": "xiaoyali97", "name": "Xiaoya Li"}}, "url": "https://github.com/confluentinc/schema-registry/commit/a4e1cd795a88a9ee0d94cbc88d3da40c4cb260c4", "committedDate": "2020-10-02T19:02:12Z", "message": "add unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MTA4MzEw", "url": "https://github.com/confluentinc/schema-registry/pull/1632#pullrequestreview-519108310", "createdAt": "2020-10-28T21:44:41Z", "commit": {"oid": "a4e1cd795a88a9ee0d94cbc88d3da40c4cb260c4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4466, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}