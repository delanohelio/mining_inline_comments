{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODA2MDY2", "number": 1426, "title": "DG-377 Allow generated classes to use refs during serialization", "bodyText": "When passing an Avro or Jackson-serializable object to its appropriate serializer, ref information is not available (as it is with Protobuf).  To avoid registering another schema without refs, we do the following:\n\nTo handle Avro, SR will also check for any schemas in the same subject that are equal after ref resolution has taken place.\nTo handle JSON Schema, the POJO can be annotated with the schema using @Schema and refs to be used during serialization.", "createdAt": "2020-04-24T23:23:21Z", "url": "https://github.com/confluentinc/schema-registry/pull/1426", "merged": true, "mergeCommit": {"oid": "4ec197da910b2d80d6be588c6ad600cde4792002"}, "closed": true, "closedAt": "2020-04-27T23:53:05Z", "author": {"login": "rayokota"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca5_PvgH2gAyNDA4ODA2MDY2OjAzMzcwMjNiOTA0ZjdlMjM0MGY1ZDEyNjYxZjhkNzdhYWFiNTVjNjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcb3jyFAH2gAyNDA4ODA2MDY2Ojc3NjI3NGUyMmI4NDUzNmMyNTU1YzAxNWZmZTFmZGExZGUwZTFjZjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0337023b904f7e2340f5d12661f8d77aaab55c67", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/0337023b904f7e2340f5d12661f8d77aaab55c67", "committedDate": "2020-04-24T23:21:47Z", "message": "DG-377 Compare schemas using deepEquals during register"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c088eb76590329f970ed0a1588242fffd1d84cc", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/5c088eb76590329f970ed0a1588242fffd1d84cc", "committedDate": "2020-04-24T23:21:47Z", "message": "Optionally generate nullable JSON fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0853f3c8659dd90655374a57cd6cc89b97dbb4f", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/e0853f3c8659dd90655374a57cd6cc89b97dbb4f", "committedDate": "2020-04-24T23:21:47Z", "message": "Add a Schema annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d43be740aab560e84f425096c98d05e650b473f7", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/d43be740aab560e84f425096c98d05e650b473f7", "committedDate": "2020-04-24T23:21:47Z", "message": "Add unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3152e5a8c4f1932536bd309590f44b110e317811", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/3152e5a8c4f1932536bd309590f44b110e317811", "committedDate": "2020-04-25T00:06:01Z", "message": "Fix unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a23dab7a7cdff11b9bc399929942de480eee22a", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/5a23dab7a7cdff11b9bc399929942de480eee22a", "committedDate": "2020-04-25T00:12:56Z", "message": "Minor optimization"}, "afterCommit": {"oid": "3152e5a8c4f1932536bd309590f44b110e317811", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/3152e5a8c4f1932536bd309590f44b110e317811", "committedDate": "2020-04-25T00:06:01Z", "message": "Fix unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a792bff3cb0380ca95446b88b9dfa07f53d5fbb8", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/a792bff3cb0380ca95446b88b9dfa07f53d5fbb8", "committedDate": "2020-04-27T17:05:45Z", "message": "Minor POM fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzc0MDM3", "url": "https://github.com/confluentinc/schema-registry/pull/1426#pullrequestreview-401374037", "createdAt": "2020-04-27T22:32:39Z", "commit": {"oid": "a792bff3cb0380ca95446b88b9dfa07f53d5fbb8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzc0NTQ5", "url": "https://github.com/confluentinc/schema-registry/pull/1426#pullrequestreview-401374549", "createdAt": "2020-04-27T22:33:45Z", "commit": {"oid": "a792bff3cb0380ca95446b88b9dfa07f53d5fbb8"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMjozMzo0NVrOGM6hyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMjo1NDo1NlrOGM7E-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5NTAxNw==", "bodyText": "Nit: '//'.", "url": "https://github.com/confluentinc/schema-registry/pull/1426#discussion_r416195017", "createdAt": "2020-04-27T22:33:45Z", "author": {"login": "dragosvictor"}, "path": "core/pom.xml", "diffHunk": "@@ -256,7 +256,28 @@\n                     <mainClass>io.confluent.kafka.schemaregistry.rest.SchemaRegistryMain</mainClass>\n                 </configuration>\n             </plugin>\n-\n+            <plugin>\n+                <groupId>org.apache.avro</groupId>\n+                <artifactId>avro-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <phase>generate-sources</phase>\n+                        <goals>\n+                            <goal>schema</goal>\n+                        </goals>\n+                        <configuration>\n+                            <testSourceDirectory>${project.basedir}/src/test/avro</testSourceDirectory>\n+                            <imports>\n+                                <import>${project.basedir}/src/test//avro/subrecord.avsc</import>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a792bff3cb0380ca95446b88b9dfa07f53d5fbb8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE5Nzg5Mg==", "bodyText": "Is this optimization still happening ? As it is, we are parsing the previous schemas.", "url": "https://github.com/confluentinc/schema-registry/pull/1426#discussion_r416197892", "createdAt": "2020-04-27T22:40:29Z", "author": {"login": "dragosvictor"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1182,23 +1207,27 @@ public boolean isCompatible(String subject,\n       throw new InvalidSchemaException(\"Previous schema not provided\");\n     }\n \n-    CompatibilityLevel compatibility = getCompatibilityLevelInScope(subject);\n-    if (compatibility == CompatibilityLevel.NONE) {\n-      // optimization to avoid parsing schemas\n-      return true;\n-    }\n-\n     List<ParsedSchema> prevParsedSchemas = new ArrayList<>(previousSchemas.size());\n     for (Schema previousSchema : previousSchemas) {\n       ParsedSchema prevParsedSchema = parseSchema(previousSchema);\n       prevParsedSchemas.add(prevParsedSchema);\n     }\n \n-    ParsedSchema parsedSchema = parseSchema(newSchema);\n-    boolean isCompatible = parsedSchema.isCompatible(compatibility, prevParsedSchemas);\n-    // Allow schema providers to modify the schema during compatibility checks\n-    newSchema.setSchema(parsedSchema.canonicalString());\n-    return isCompatible;\n+    return isCompatibleWithPrevious(subject, parseSchema(newSchema), prevParsedSchemas);\n+  }\n+\n+  private boolean isCompatibleWithPrevious(String subject,\n+                                           ParsedSchema parsedSchema,\n+                                           List<ParsedSchema> previousSchemas)\n+      throws SchemaRegistryException {\n+\n+    CompatibilityLevel compatibility = getCompatibilityLevelInScope(subject);\n+    if (compatibility == CompatibilityLevel.NONE) {\n+      // optimization to avoid parsing schemas\n+      return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a792bff3cb0380ca95446b88b9dfa07f53d5fbb8"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIwNDAyNA==", "bodyText": "Do we need to collect this ?", "url": "https://github.com/confluentinc/schema-registry/pull/1426#discussion_r416204024", "createdAt": "2020-04-27T22:54:56Z", "author": {"login": "dragosvictor"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -432,26 +434,35 @@ public int register(String subject,\n \n       // determine the latest version of the schema in the subject\n       List<SchemaValue> allVersions = getAllSchemaValues(subject);\n+      Collections.reverse(allVersions);\n \n       List<SchemaValue> deletedVersions = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a792bff3cb0380ca95446b88b9dfa07f53d5fbb8"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "776274e22b84536c2555c015ffe1fda1de0e1cf2", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/776274e22b84536c2555c015ffe1fda1de0e1cf2", "committedDate": "2020-04-27T23:05:54Z", "message": "Minor cleanup from review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4473, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}