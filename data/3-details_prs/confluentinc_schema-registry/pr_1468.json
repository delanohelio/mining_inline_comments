{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMTMxNzgy", "number": 1468, "title": "Implement new Schema Registry Metrics", "bodyText": "Add new Kafka metrics to track the following:\n\nnumber of nodes\nnumber of schemas created (total and by schema type)\nnumber of schemas deleted (total and by schema type)\nnumber of custom schema providers\nnumber of successful and failed API calls", "createdAt": "2020-05-22T20:46:08Z", "url": "https://github.com/confluentinc/schema-registry/pull/1468", "merged": true, "mergeCommit": {"oid": "43f45b6963176e7b886b6277920008f42f270dbc"}, "closed": true, "closedAt": "2020-05-27T01:58:03Z", "author": {"login": "dragosvictor"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj4YmTgH2gAyNDIyMTMxNzgyOmQyZmQwODM3ZTBkY2ZjMzEyZTQxNDg3NjdhZjE0NTM3MjZiOWE4YmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclOdbvAH2gAyNDIyMTMxNzgyOmVjYzI3MzcxZjk0M2NmZDQ0YzBiODE0M2JlM2U4MGI2MTU1NGNlMzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d2fd0837e0dcfc312e4148767af1453726b9a8bb", "author": {"user": {"login": "dragosvictor", "name": "Dragos Misca"}}, "url": "https://github.com/confluentinc/schema-registry/commit/d2fd0837e0dcfc312e4148767af1453726b9a8bb", "committedDate": "2020-05-22T20:34:59Z", "message": "Implement Schema Registry metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b71c7868aae5b9f69441a0891f124aae7c4130c", "author": {"user": {"login": "dragosvictor", "name": "Dragos Misca"}}, "url": "https://github.com/confluentinc/schema-registry/commit/2b71c7868aae5b9f69441a0891f124aae7c4130c", "committedDate": "2020-05-22T20:37:30Z", "message": "Merge branch 'master' into schema-registry-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6feb5af9758e4bf6b7ec264d169079f7d117ff4a", "author": {"user": {"login": "dragosvictor", "name": "Dragos Misca"}}, "url": "https://github.com/confluentinc/schema-registry/commit/6feb5af9758e4bf6b7ec264d169079f7d117ff4a", "committedDate": "2020-05-22T23:13:32Z", "message": "Use try-with-resources in getCommitId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed8b5691195cade94491bc1920c95632589fcb2e", "author": {"user": {"login": "dragosvictor", "name": "Dragos Misca"}}, "url": "https://github.com/confluentinc/schema-registry/commit/ed8b5691195cade94491bc1920c95632589fcb2e", "committedDate": "2020-05-23T00:18:20Z", "message": "Minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58b4e891c48d80d34726a1a8b2d968d92c15f882", "author": {"user": {"login": "dragosvictor", "name": "Dragos Misca"}}, "url": "https://github.com/confluentinc/schema-registry/commit/58b4e891c48d80d34726a1a8b2d968d92c15f882", "committedDate": "2020-05-23T01:31:07Z", "message": "Fix spotbugs errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b857a6af0d2c2683987117d9df998df3f2e516e", "author": {"user": {"login": "dragosvictor", "name": "Dragos Misca"}}, "url": "https://github.com/confluentinc/schema-registry/commit/4b857a6af0d2c2683987117d9df998df3f2e516e", "committedDate": "2020-05-23T17:44:59Z", "message": "Merge branch 'master' into schema-registry-metrics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTM3ODIw", "url": "https://github.com/confluentinc/schema-registry/pull/1468#pullrequestreview-418537820", "createdAt": "2020-05-26T17:51:40Z", "commit": {"oid": "4b857a6af0d2c2683987117d9df998df3f2e516e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1MTo0MFrOGapmrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODowOTo0MVrOGaqU-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzgwNQ==", "bodyText": "nit: can we change to isMaster", "url": "https://github.com/confluentinc/schema-registry/pull/1468#discussion_r430597805", "createdAt": "2020-05-26T17:51:40Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/metrics/MetricsContainer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.metrics;\n+\n+import io.confluent.kafka.schemaregistry.avro.AvroSchema;\n+import io.confluent.kafka.schemaregistry.json.JsonSchema;\n+import io.confluent.kafka.schemaregistry.protobuf.ProtobufSchema;\n+import io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig;\n+import io.confluent.rest.Application;\n+import io.confluent.rest.RestConfig;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.JmxReporter;\n+import org.apache.kafka.common.metrics.MetricConfig;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.MetricsReporter;\n+import org.apache.kafka.common.utils.SystemTime;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MetricsContainer {\n+\n+  private static final Logger log = LoggerFactory.getLogger(MetricsContainer.class);\n+\n+  private static final String JMX_PREFIX = \"kafka.schema.registry\";\n+\n+  private final Metrics metrics;\n+  private final Map<String, String> configuredTags;\n+  private final String commitId;\n+\n+  private final SchemaRegistryMetric isMasterNode;\n+  private final SchemaRegistryMetric nodeCount;\n+\n+  private final SchemaRegistryMetric schemasCreated;\n+  private final SchemaRegistryMetric schemasDeleted;\n+  private final SchemaRegistryMetric customSchemaProviders;\n+  private final SchemaRegistryMetric apiCallsSuccess;\n+  private final SchemaRegistryMetric apiCallsFailure;\n+\n+  private final SchemaRegistryMetric avroSchemasCreated;\n+  private final SchemaRegistryMetric jsonSchemasCreated;\n+  private final SchemaRegistryMetric protobufSchemasCreated;\n+\n+  private final SchemaRegistryMetric avroSchemasDeleted;\n+  private final SchemaRegistryMetric jsonSchemasDeleted;\n+  private final SchemaRegistryMetric protobufSchemasDeleted;\n+\n+  public MetricsContainer(SchemaRegistryConfig config) {\n+    this.configuredTags =\n+            Application.parseListToMap(config.getList(RestConfig.METRICS_TAGS_CONFIG));\n+    this.commitId = getCommitId();\n+\n+    MetricConfig metricConfig =\n+            new MetricConfig().samples(config.getInt(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG))\n+                    .timeWindow(config.getLong(ProducerConfig.METRICS_SAMPLE_WINDOW_MS_CONFIG),\n+                            TimeUnit.MILLISECONDS);\n+    List<MetricsReporter> reporters =\n+            config.getConfiguredInstances(ProducerConfig.METRIC_REPORTER_CLASSES_CONFIG,\n+                    MetricsReporter.class);\n+    reporters.add(new JmxReporter(JMX_PREFIX));\n+\n+    this.metrics = new Metrics(metricConfig, reporters, new SystemTime());\n+\n+    this.isMasterNode = createMetric(\"master-slave-role\",\n+            \"1.0 indicates the node is the active master in the cluster and is the\"\n+            + \" node where all register schema and config update requests are \"\n+            + \"served.\");\n+    this.nodeCount = createMetric(\"node-count\", \"Number of Schema Registry nodes in the cluster\");\n+\n+    this.apiCallsSuccess = createMetric(\"api-success-count\", \"Number of successful API calls\");\n+    this.apiCallsFailure = createMetric(\"api-failure-count\", \"Number of failed API calls\");\n+\n+    this.customSchemaProviders = createMetric(\"custom-schema-provider-count\",\n+            \"Number of custom schema providers\");\n+\n+    this.schemasCreated = createMetric(\"registered-count\", \"Number of registered schemas\");\n+    this.schemasDeleted = createMetric(\"deleted-count\", \"Number of deleted schemas\");\n+\n+    this.avroSchemasCreated = createMetric(\"avro-schemas-created\",\n+            \"Number of registered Avro schemas\");\n+\n+    this.avroSchemasDeleted = createMetric(\"avro-schemas-deleted\",\n+            \"Number of deleted Avro schemas\");\n+\n+    this.jsonSchemasCreated = createMetric(\"json-schemas-created\",\n+            \"Number of registered JSON schemas\");\n+\n+    this.jsonSchemasDeleted = createMetric(\"json-schemas-deleted\",\n+            \"Number of deleted JSON schemas\");\n+\n+    this.protobufSchemasCreated = createMetric(\"protobuf-schemas-created\",\n+            \"Number of registered Protobuf schemas\");\n+\n+    this.protobufSchemasDeleted = createMetric(\"protobuf-schemas-deleted\",\n+            \"Number of deleted Protobuf schemas\");\n+  }\n+\n+  private SchemaRegistryMetric createMetric(String name, String metricDescription) {\n+    return createMetric(name, name, name, metricDescription);\n+  }\n+\n+  private SchemaRegistryMetric createMetric(String sensorName, String metricName,\n+                                            String metricGroup, String metricDescription) {\n+    MetricName mn = new MetricName(metricName, metricGroup, metricDescription, configuredTags);\n+    return new SchemaRegistryMetric(metrics, sensorName, mn);\n+  }\n+\n+  public SchemaRegistryMetric getNodeCountMetric() {\n+    return nodeCount;\n+  }\n+\n+  public SchemaRegistryMetric getIsMaster() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b857a6af0d2c2683987117d9df998df3f2e516e"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwOTY1Nw==", "bodyText": "Can this be a switch statement?", "url": "https://github.com/confluentinc/schema-registry/pull/1468#discussion_r430609657", "createdAt": "2020-05-26T18:09:41Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/filters/RestCallMetricFilter.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.rest.filters;\n+\n+import io.confluent.kafka.schemaregistry.metrics.SchemaRegistryMetric;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.Response;\n+import java.io.IOException;\n+\n+public class RestCallMetricFilter implements ContainerResponseFilter {\n+  private final SchemaRegistryMetric metricSucceeded;\n+  private final SchemaRegistryMetric metricFailed;\n+\n+  public RestCallMetricFilter(SchemaRegistryMetric metricSucceeded,\n+                              SchemaRegistryMetric metricFailed) {\n+    this.metricSucceeded = metricSucceeded;\n+    this.metricFailed = metricFailed;\n+  }\n+\n+  @Override\n+  public void filter(ContainerRequestContext containerRequestContext,\n+                     ContainerResponseContext containerResponseContext) throws IOException {\n+    final Response.Status.Family family = containerResponseContext.getStatusInfo().getFamily();\n+    if (family == Response.Status.Family.SUCCESSFUL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b857a6af0d2c2683987117d9df998df3f2e516e"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2242d70feb6a4c5c75946f10fa440a87d629fc67", "author": {"user": {"login": "dragosvictor", "name": "Dragos Misca"}}, "url": "https://github.com/confluentinc/schema-registry/commit/2242d70feb6a4c5c75946f10fa440a87d629fc67", "committedDate": "2020-05-26T23:13:53Z", "message": "Merge branch 'master' into schema-registry-metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe679f471b4018877fa78fe584c0fbb88839f0f7", "author": {"user": {"login": "dragosvictor", "name": "Dragos Misca"}}, "url": "https://github.com/confluentinc/schema-registry/commit/fe679f471b4018877fa78fe584c0fbb88839f0f7", "committedDate": "2020-05-26T23:45:06Z", "message": "Address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5fccd01180888f776ac9bb56add069e3dd8fa6e", "author": {"user": {"login": "dragosvictor", "name": "Dragos Misca"}}, "url": "https://github.com/confluentinc/schema-registry/commit/c5fccd01180888f776ac9bb56add069e3dd8fa6e", "committedDate": "2020-05-27T00:47:32Z", "message": "Add custom schema provider metric test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecc27371f943cfd44c0b8143be3e80b61554ce30", "author": {"user": {"login": "dragosvictor", "name": "Dragos Misca"}}, "url": "https://github.com/confluentinc/schema-registry/commit/ecc27371f943cfd44c0b8143be3e80b61554ce30", "committedDate": "2020-05-27T00:52:06Z", "message": "Add missing copyright info"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4478, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}