{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4MDc4ODUz", "number": 1389, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozNTo1OVrODpSYSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo0Mzo0MVrODqfEqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjE5MzM3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozNTo1OVrOF4XvJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1NjozNVrOF5nZhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzQ3OQ==", "bodyText": "The query param should be deleted to be consistent with other endpoints.  Also the parameter should be named lookupDeletedSchema for consistency", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394653479", "createdAt": "2020-03-18T21:35:59Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -768,6 +768,19 @@ public String getLatestVersionSchemaOnly(String subject)\n     return response;\n   }\n \n+  public List<Integer> getAllVersions(Map<String, String> requestProperties,\n+                                      String subject,\n+                                      boolean includeDeleted)\n+          throws IOException, RestClientException {\n+    UriBuilder builder = UriBuilder.fromPath(\"/subjects/{subject}/versions\");\n+    builder.queryParam(\"includeDeleted\", includeDeleted);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NzYxMA==", "bodyText": "Also we should add a deleted query param on SubjectsResource.list as well.", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394677610", "createdAt": "2020-03-18T22:32:49Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -768,6 +768,19 @@ public String getLatestVersionSchemaOnly(String subject)\n     return response;\n   }\n \n+  public List<Integer> getAllVersions(Map<String, String> requestProperties,\n+                                      String subject,\n+                                      boolean includeDeleted)\n+          throws IOException, RestClientException {\n+    UriBuilder builder = UriBuilder.fromPath(\"/subjects/{subject}/versions\");\n+    builder.queryParam(\"includeDeleted\", includeDeleted);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzQ3OQ=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY2Mw==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958663", "createdAt": "2020-03-21T03:56:35Z", "author": {"login": "maverick64"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -768,6 +768,19 @@ public String getLatestVersionSchemaOnly(String subject)\n     return response;\n   }\n \n+  public List<Integer> getAllVersions(Map<String, String> requestProperties,\n+                                      String subject,\n+                                      boolean includeDeleted)\n+          throws IOException, RestClientException {\n+    UriBuilder builder = UriBuilder.fromPath(\"/subjects/{subject}/versions\");\n+    builder.queryParam(\"includeDeleted\", includeDeleted);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1MzQ3OQ=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjE5OTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozODowM1rOF4XypA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1Njo0MVrOF5nZiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDM3Mg==", "bodyText": "before being permanently deleted", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394654372", "createdAt": "2020-03-18T21:38:03Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.exceptions;\n+\n+public class SchemaVersionNotSoftDeletedException extends SchemaRegistryException {\n+  private final String subject;\n+  private final String version;\n+\n+  public SchemaVersionNotSoftDeletedException(String subject, String version) {\n+    super(\"Subject:\" + subject + \" Version:\"\n+            + version + \" must be deleted first before permanent delete.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY2Nw==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958667", "createdAt": "2020-03-21T03:56:41Z", "author": {"login": "maverick64"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.exceptions;\n+\n+public class SchemaVersionNotSoftDeletedException extends SchemaRegistryException {\n+  private final String subject;\n+  private final String version;\n+\n+  public SchemaVersionNotSoftDeletedException(String subject, String version) {\n+    super(\"Subject:\" + subject + \" Version:\"\n+            + version + \" must be deleted first before permanent delete.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDM3Mg=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjIwMDU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SubjectNotSoftDeletedException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozODozN1rOF4Xznw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1Njo0OFrOF5nZjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDYyMw==", "bodyText": "before being permanently deleted", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394654623", "createdAt": "2020-03-18T21:38:37Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SubjectNotSoftDeletedException.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.exceptions;\n+\n+public class SubjectNotSoftDeletedException extends SchemaRegistryException {\n+  public SubjectNotSoftDeletedException(String subject) {\n+    super(\"Subject \" + subject + \" must be deleted first before permanent delete.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY3MQ==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958671", "createdAt": "2020-03-21T03:56:48Z", "author": {"login": "maverick64"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SubjectNotSoftDeletedException.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.exceptions;\n+\n+public class SubjectNotSoftDeletedException extends SchemaRegistryException {\n+  public SubjectNotSoftDeletedException(String subject) {\n+    super(\"Subject \" + subject + \" must be deleted first before permanent delete.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDYyMw=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjIwMjg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTozOTozNFrOF4X1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1NzowMFrOF5nZnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTAwNQ==", "bodyText": "Subject '%s' has been soft-deleted.", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394655005", "createdAt": "2020-03-18T21:39:34Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "diffHunk": "@@ -30,6 +30,20 @@\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY4Nw==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958687", "createdAt": "2020-03-21T03:57:00Z", "author": {"login": "maverick64"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "diffHunk": "@@ -30,6 +30,20 @@\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTAwNQ=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjIwNTg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0MDozM1rOF4X27A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1Njo1NVrOF5nZnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTQ2OA==", "bodyText": "before being permanently deleted", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394655468", "createdAt": "2020-03-18T21:40:33Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "diffHunk": "@@ -30,6 +30,20 @@\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+          + \"Set permanent=true to delete permanently\";\n+  public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n+  public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n+          + \"first before permanent delete\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY4NA==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958684", "createdAt": "2020-03-21T03:56:55Z", "author": {"login": "maverick64"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "diffHunk": "@@ -30,6 +30,20 @@\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+          + \"Set permanent=true to delete permanently\";\n+  public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n+  public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n+          + \"first before permanent delete\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTQ2OA=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjIwNjIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0MDozOVrOF4X3Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0MDozOVrOF4X3Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTUxMQ==", "bodyText": "before being permanently deleted", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394655511", "createdAt": "2020-03-18T21:40:39Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "diffHunk": "@@ -30,6 +30,20 @@\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+          + \"Set permanent=true to delete permanently\";\n+  public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n+  public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n+          + \"first before permanent delete\";\n+  public static final int SUBJECT_NOT_SOFT_DELETED_ERROR_CODE = 40405;\n+  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s exists in soft deleted format.\"\n+          + \"Set permanent=true to delete permanently\";\n+  public static final int SCHEMAVERSION_SOFT_DELETED_ERROR_CODE = 40406;\n+  public static final String SCHEMAVERSION_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s was not deleted \"\n+          + \"first before permanent delete\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjIwNzY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0MToxM1rOF4X4Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0MToxM1rOF4X4Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NTc0Ng==", "bodyText": "exists in soft deleted format. -> was soft-deleted.", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394655746", "createdAt": "2020-03-18T21:41:13Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/exceptions/Errors.java", "diffHunk": "@@ -30,6 +30,20 @@\n   public static final String SCHEMA_NOT_FOUND_MESSAGE = \"Schema not found\";\n   public static final String SCHEMA_NOT_FOUND_MESSAGE_FORMAT = \"Schema %s not found\";\n   public static final int SCHEMA_NOT_FOUND_ERROR_CODE = 40403;\n+  public static final String SUBJECT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' exists in soft deleted format.\"\n+          + \"Set permanent=true to delete permanently\";\n+  public static final int SUBJECT_SOFT_DELETED_ERROR_CODE = 40404;\n+  public static final String SUBJECT_NOT_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' was not deleted \"\n+          + \"first before permanent delete\";\n+  public static final int SUBJECT_NOT_SOFT_DELETED_ERROR_CODE = 40405;\n+  public static final String SCHEMAVERSION_SOFT_DELETED_MESSAGE_FORMAT = \"Subject '%s' Version %s exists in soft deleted format.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjIxMTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0MjozN1rOF4X6aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0MjozN1rOF4X6aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjM2MA==", "bodyText": "Change query param to deleted, variable name to lookupDeletedSchema.", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394656360", "createdAt": "2020-03-18T21:42:37Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java", "diffHunk": "@@ -182,15 +183,16 @@ public String getSchemaOnly(\n       @ApiResponse(code = 500, message = \"Error code 50001 -- Error in the backend data store\")})\n   public List<Integer> listVersions(\n       @ApiParam(value = \"Name of the Subject\", required = true)\n-        @PathParam(\"subject\") String subject) {\n+        @PathParam(\"subject\") String subject,\n+      @QueryParam(\"includeDeleted\") boolean includeDeleted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjIxMzE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0MzowNFrOF4X7TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo0MzowNFrOF4X7TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NjU4OA==", "bodyText": "nit: need space before @PathParam", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394656588", "createdAt": "2020-03-18T21:43:04Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/SubjectVersionsResource.java", "diffHunk": "@@ -305,7 +307,8 @@ public void deleteSchemaVersion(\n       final @Suspended AsyncResponse asyncResponse,\n       @Context HttpHeaders headers,\n       @ApiParam(value = \"Name of the Subject\", required = true)@PathParam(\"subject\") String subject,\n-      @ApiParam(value = VERSION_PARAM_DESC, required = true)@PathParam(\"version\") String version) {\n+      @ApiParam(value = VERSION_PARAM_DESC, required = true)@PathParam(\"version\") String version,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjI1MzcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo1ODowMFrOF4YU9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo1ODowMFrOF4YU9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MzE1Nw==", "bodyText": "nit: space before colon, also maybe rename i -> version", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394663157", "createdAt": "2020-03-18T21:58:00Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -617,23 +631,36 @@ public void deleteSchemaVersionOrForward(\n       kafkaStore.waitUntilKafkaReaderReachesLastOffset(subject, kafkaStoreTimeoutMs);\n       List<Integer> deletedVersions = new ArrayList<>();\n       int deleteWatermarkVersion = 0;\n-      Iterator<Schema> schemasToBeDeleted = getAllVersions(subject, false);\n+      Iterator<Schema> schemasToBeDeleted = getAllVersions(subject, permanentDelete);\n       while (schemasToBeDeleted.hasNext()) {\n         deleteWatermarkVersion = schemasToBeDeleted.next().getVersion();\n         SchemaKey key = new SchemaKey(subject, deleteWatermarkVersion);\n         if (!lookupCache.referencesSchema(key).isEmpty()) {\n           throw new ReferenceExistsException(key.toString());\n         }\n+        if (permanentDelete) {\n+          SchemaValue schemaValue = (SchemaValue) lookupCache.get(key);\n+          if (!schemaValue.isDeleted()) {\n+            throw new SubjectNotSoftDeletedException(subject);\n+          }\n+        }\n         deletedVersions.add(deleteWatermarkVersion);\n       }\n-      DeleteSubjectKey key = new DeleteSubjectKey(subject);\n-      DeleteSubjectValue value = new DeleteSubjectValue(subject, deleteWatermarkVersion);\n-      kafkaStore.put(key, value);\n-      if (getMode(subject) != null) {\n-        deleteMode(subject);\n-      }\n-      if (getCompatibilityLevel(subject) != null) {\n-        deleteSubjectCompatibility(subject);\n+\n+      if (!permanentDelete) {\n+        DeleteSubjectKey key = new DeleteSubjectKey(subject);\n+        DeleteSubjectValue value = new DeleteSubjectValue(subject, deleteWatermarkVersion);\n+        kafkaStore.put(key, value);\n+        if (getMode(subject) != null) {\n+          deleteMode(subject);\n+        }\n+        if (getCompatibilityLevel(subject) != null) {\n+          deleteSubjectCompatibility(subject);\n+        }\n+      } else {\n+        for (Integer i: deletedVersions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjI1NTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo1ODo0MVrOF4YWPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo1ODo0MVrOF4YWPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MzQ4Nw==", "bodyText": "nit: return schema != null", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394663487", "createdAt": "2020-03-18T21:58:41Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -861,6 +894,13 @@ public Schema validateAndGetSchema(String subject, VersionId versionId, boolean\n     return schema;\n   }\n \n+  public boolean schemaVersionExists(String subject, VersionId versionId, boolean\n+          returnDeletedSchema) throws SchemaRegistryException {\n+    final int version = versionId.getVersionId();\n+    Schema schema = this.get(subject, version, returnDeletedSchema);\n+    return !(schema == null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMyNDg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyNzoyMVrOF4ZCoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyNzoyMVrOF4ZCoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NDg0OQ==", "bodyText": "nit: permanent -> permanentDelete", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394674849", "createdAt": "2020-03-18T22:27:21Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -554,7 +556,8 @@ public int registerOrForward(String subject,\n \n   @Override\n   public void deleteSchemaVersion(String subject,\n-                                  Schema schema)\n+                                  Schema schema,\n+                                  boolean permanent)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMyNTI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyNzozM1rOF4ZC3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyNzozM1rOF4ZC3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NDkxMA==", "bodyText": "nit: permanent -> permanentDelete", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394674910", "createdAt": "2020-03-18T22:27:33Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -587,16 +599,17 @@ public void deleteSchemaVersion(String subject,\n \n   public void deleteSchemaVersionOrForward(\n       Map<String, String> headerProperties, String subject,\n-      Schema schema) throws SchemaRegistryException {\n+      Schema schema, boolean permanent) throws SchemaRegistryException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMyNzczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyODoxNVrOF4ZEfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyODoxNVrOF4ZEfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NTMyNg==", "bodyText": "nit: permanent -> permanentDelete", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394675326", "createdAt": "2020-03-18T22:28:15Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -746,13 +776,15 @@ private void forwardUpdateCompatibilityLevelRequestToMaster(\n   private void forwardDeleteSchemaVersionRequestToMaster(\n       Map<String, String> headerProperties,\n       String subject,\n-      Integer version) throws SchemaRegistryRequestForwardingException {\n+      Integer version,\n+      boolean permanent) throws SchemaRegistryRequestForwardingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMzMDk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyODo1NVrOF4ZGhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyODo1NVrOF4ZGhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NTg0Nw==", "bodyText": "nit: lookupDeleted -> lookupDeletedSubjects", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394675847", "createdAt": "2020-03-18T22:28:55Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1033,9 +1073,10 @@ public SchemaString get(\n     return subjects;\n   }\n \n-  public boolean hasSubjects(String subject) throws SchemaRegistryStoreException {\n+  public boolean hasSubjects(String subject, boolean lookupDeleted)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMzMjU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/LookupCache.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyOToxNFrOF4ZHhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyOToxNFrOF4ZHhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjEwMQ==", "bodyText": "nit: lookupDeletedSubject -> lookupDeletedSubjects", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676101", "createdAt": "2020-03-18T22:29:14Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/LookupCache.java", "diffHunk": "@@ -121,7 +121,7 @@ CompatibilityLevel compatibilityLevel(String subject,\n    * @param subject the subject, or null for all subjects\n    * @return whether there exist matching schemas\n    */\n-  boolean hasSubjects(String subject) throws StoreException;\n+  boolean hasSubjects(String subject, boolean lookupDeletedSubject) throws StoreException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMzNDIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyOTozNVrOF4ZIkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1NzowNlrOF5nZog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjM3MQ==", "bodyText": "nit: permanent -> permanentDelete", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676371", "createdAt": "2020-03-18T22:29:35Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java", "diffHunk": "@@ -68,7 +69,8 @@ boolean isCompatible(String subject,\n \n   void close();\n \n-  void deleteSchemaVersion(String subject, Schema schema) throws SchemaRegistryException;\n+  void deleteSchemaVersion(String subject, Schema schema,\n+                           boolean permanent) throws SchemaRegistryException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY5MA==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958690", "createdAt": "2020-03-21T03:57:06Z", "author": {"login": "maverick64"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java", "diffHunk": "@@ -68,7 +69,8 @@ boolean isCompatible(String subject,\n \n   void close();\n \n-  void deleteSchemaVersion(String subject, Schema schema) throws SchemaRegistryException;\n+  void deleteSchemaVersion(String subject, Schema schema,\n+                           boolean permanent) throws SchemaRegistryException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjM3MQ=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMzNTAzOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjoyOTo1M1rOF4ZJJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1NzoxMFrOF5nZqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjUxOA==", "bodyText": "nit: permanent -> permanentDelete", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676518", "createdAt": "2020-03-18T22:29:53Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -828,6 +841,22 @@ public Integer deleteSchemaVersion(\n     return response;\n   }\n \n+  public Integer deleteSchemaVersion(\n+          Map<String, String> requestProperties,\n+          String subject,\n+          String version,\n+          boolean permanent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODY5OA==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958698", "createdAt": "2020-03-21T03:57:10Z", "author": {"login": "maverick64"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -828,6 +841,22 @@ public Integer deleteSchemaVersion(\n     return response;\n   }\n \n+  public Integer deleteSchemaVersion(\n+          Map<String, String> requestProperties,\n+          String subject,\n+          String version,\n+          boolean permanent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjUxOA=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMzNTc4OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjozMDoxNFrOF4ZJow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1NzoxNVrOF5nZrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjY0Mw==", "bodyText": "nit: permanent -> permanentDelete", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676643", "createdAt": "2020-03-18T22:30:14Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -841,6 +870,21 @@ public Integer deleteSchemaVersion(\n     return response;\n   }\n \n+  public List<Integer> deleteSubject(\n+          Map<String, String> requestProperties,\n+          String subject,\n+          boolean permanent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcwMQ==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958701", "createdAt": "2020-03-21T03:57:15Z", "author": {"login": "maverick64"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -841,6 +870,21 @@ public Integer deleteSchemaVersion(\n     return response;\n   }\n \n+  public List<Integer> deleteSubject(\n+          Map<String, String> requestProperties,\n+          String subject,\n+          boolean permanent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3NjY0Mw=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMzNzIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjozMDo0NlrOF4ZKcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1NzoyN1rOF5nZvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Njg0OA==", "bodyText": "nit: lookupDeletedSubject -> lookupDeletedSubjects", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676848", "createdAt": "2020-03-18T22:30:46Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java", "diffHunk": "@@ -232,19 +232,19 @@ public Mode mode(String subject,\n   }\n \n   @Override\n-  public boolean hasSubjects(String subject) {\n-    return hasSubjects(matchingPredicate(subject));\n+  public boolean hasSubjects(String subject, boolean lookupDeletedSubject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcwOA==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958708", "createdAt": "2020-03-21T03:57:22Z", "author": {"login": "maverick64"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java", "diffHunk": "@@ -232,19 +232,19 @@ public Mode mode(String subject,\n   }\n \n   @Override\n-  public boolean hasSubjects(String subject) {\n-    return hasSubjects(matchingPredicate(subject));\n+  public boolean hasSubjects(String subject, boolean lookupDeletedSubject) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Njg0OA=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcxOA==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958718", "createdAt": "2020-03-21T03:57:27Z", "author": {"login": "maverick64"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java", "diffHunk": "@@ -232,19 +232,19 @@ public Mode mode(String subject,\n   }\n \n   @Override\n-  public boolean hasSubjects(String subject) {\n-    return hasSubjects(matchingPredicate(subject));\n+  public boolean hasSubjects(String subject, boolean lookupDeletedSubject) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Njg0OA=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjMzODA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMjozMTowNlrOF4ZK8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQwMzo1NzozNFrOF5nZxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Njk3Nw==", "bodyText": "nit: lookupDeletedSubject -> lookupDeletedSubjects", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r394676977", "createdAt": "2020-03-18T22:31:06Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java", "diffHunk": "@@ -232,19 +232,19 @@ public Mode mode(String subject,\n   }\n \n   @Override\n-  public boolean hasSubjects(String subject) {\n-    return hasSubjects(matchingPredicate(subject));\n+  public boolean hasSubjects(String subject, boolean lookupDeletedSubject) {\n+    return hasSubjects(matchingPredicate(subject), lookupDeletedSubject);\n   }\n \n-  public boolean hasSubjects(Predicate<String> match) {\n+  public boolean hasSubjects(Predicate<String> match, boolean lookupDeletedSubject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk1ODcyNA==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r395958724", "createdAt": "2020-03-21T03:57:34Z", "author": {"login": "maverick64"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/InMemoryCache.java", "diffHunk": "@@ -232,19 +232,19 @@ public Mode mode(String subject,\n   }\n \n   @Override\n-  public boolean hasSubjects(String subject) {\n-    return hasSubjects(matchingPredicate(subject));\n+  public boolean hasSubjects(String subject, boolean lookupDeletedSubject) {\n+    return hasSubjects(matchingPredicate(subject), lookupDeletedSubject);\n   }\n \n-  public boolean hasSubjects(Predicate<String> match) {\n+  public boolean hasSubjects(Predicate<String> match, boolean lookupDeletedSubject) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY3Njk3Nw=="}, "originalCommit": {"oid": "0e51704e349b9d23ab5a83349985d5bfb32edce8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODc0ODAyOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo0MToxMVrOF6QuJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo0MToxMVrOF6QuJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNTY4Nw==", "bodyText": "Use the UriBuilder with queryParam as with other methods in this class.", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r396635687", "createdAt": "2020-03-23T17:41:11Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -786,6 +786,16 @@ public String getLatestVersionSchemaOnly(String subject)\n     return getAllSubjects(DEFAULT_REQUEST_PROPERTIES);\n   }\n \n+  public List<String> getAllSubjects(boolean deletedSubjects)\n+          throws IOException, RestClientException {\n+    List<String> response = httpRequest(\"/subjects\"\n+                    + (deletedSubjects ? \"?deleted=true\" : \"\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb52eb42506e74ee760d21ca4c22d27dd76e458e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODc1ODgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo0Mzo0MVrOF6Q04w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzo0Mzo0MVrOF6Q04w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYzNzQxMQ==", "bodyText": "nit: needs space after colons, \"Subject: \" and \" Version: \"", "url": "https://github.com/confluentinc/schema-registry/pull/1389#discussion_r396637411", "createdAt": "2020-03-23T17:43:41Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/exceptions/SchemaVersionNotSoftDeletedException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.exceptions;\n+\n+public class SchemaVersionNotSoftDeletedException extends SchemaRegistryException {\n+  private final String subject;\n+  private final String version;\n+\n+  public SchemaVersionNotSoftDeletedException(String subject, String version) {\n+    super(\"Subject:\" + subject + \" Version:\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb52eb42506e74ee760d21ca4c22d27dd76e458e"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1966, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}