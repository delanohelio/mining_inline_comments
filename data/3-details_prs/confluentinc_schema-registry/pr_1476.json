{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDk0MzU0", "number": 1476, "title": "Add unit test for mvn validate action", "bodyText": "", "createdAt": "2020-05-27T20:22:18Z", "url": "https://github.com/confluentinc/schema-registry/pull/1476", "merged": true, "mergeCommit": {"oid": "7c03336dd1f6e9478f7d124436372d7a8eae40e8"}, "closed": true, "closedAt": "2020-05-28T00:27:23Z", "author": {"login": "rayokota"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclfMGMgH2gAyNDI0MDk0MzU0OjJkZmVmMmQ0MDk1MDk1ZmJjZDExNmJjMjM5MDRjZDI4ZjBkODljZmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclhlU1gFqTQxOTY3MDcwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2dfef2d4095095fbcd116bc23904cd28f0d89cfd", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/2dfef2d4095095fbcd116bc23904cd28f0d89cfd", "committedDate": "2020-05-27T20:21:33Z", "message": "Add unit test for mvn validate action"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c", "committedDate": "2020-05-27T20:22:40Z", "message": "Fix copyright"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTkyODMw", "url": "https://github.com/confluentinc/schema-registry/pull/1476#pullrequestreview-419592830", "createdAt": "2020-05-27T20:43:23Z", "commit": {"oid": "6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDo0MzoyM1rOGbcZfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDo0OToxOVrOGbcmDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMDAxNA==", "bodyText": "Nit: missing space before bracket.", "url": "https://github.com/confluentinc/schema-registry/pull/1476#discussion_r431430014", "createdAt": "2020-05-27T20:43:23Z", "author": {"login": "dragosvictor"}, "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.confluent.kafka.schemaregistry.maven;\n+\n+import io.confluent.kafka.schemaregistry.client.MockSchemaRegistryClient;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ValidateSchemaRegistryMojoTest extends SchemaRegistryTest{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMjg0Ng==", "bodyText": "This seems to be testing both malformed and missing schemas. Is there a benefit to having 100 iterations here versus just one ?", "url": "https://github.com/confluentinc/schema-registry/pull/1476#discussion_r431432846", "createdAt": "2020-05-27T20:48:41Z", "author": {"login": "dragosvictor"}, "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.confluent.kafka.schemaregistry.maven;\n+\n+import io.confluent.kafka.schemaregistry.client.MockSchemaRegistryClient;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ValidateSchemaRegistryMojoTest extends SchemaRegistryTest{\n+  ValidateSchemaRegistryMojo mojo;\n+\n+  @Before\n+  public void createMojo(){\n+    this.mojo = new ValidateSchemaRegistryMojo();\n+    this.mojo.client(new MockSchemaRegistryClient());\n+  }\n+\n+  @Test\n+  public void validate() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      writeSchema(keySchemaFile, keySchema);\n+      writeSchema(valueSchemaFile, valueSchema);\n+      subjectToFile.put(keySubject, keySchemaFile);\n+      expectedVersions.put(keySubject, version);\n+      subjectToFile.put(valueSubject, valueSchemaFile);\n+      expectedVersions.put(valueSubject, version);\n+    }\n+\n+    this.mojo.subjects = subjectToFile;\n+    this.mojo.execute();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void malformedSchema() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      if (i % 7 == 0) {\n+        writeMalformedFile(keySchemaFile);\n+        writeMalformedFile(valueSchemaFile);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMzIyOQ==", "bodyText": "Ditto w.r.t. the 'extra' schemas.", "url": "https://github.com/confluentinc/schema-registry/pull/1476#discussion_r431433229", "createdAt": "2020-05-27T20:49:19Z", "author": {"login": "dragosvictor"}, "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.confluent.kafka.schemaregistry.maven;\n+\n+import io.confluent.kafka.schemaregistry.client.MockSchemaRegistryClient;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ValidateSchemaRegistryMojoTest extends SchemaRegistryTest{\n+  ValidateSchemaRegistryMojo mojo;\n+\n+  @Before\n+  public void createMojo(){\n+    this.mojo = new ValidateSchemaRegistryMojo();\n+    this.mojo.client(new MockSchemaRegistryClient());\n+  }\n+\n+  @Test\n+  public void validate() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      writeSchema(keySchemaFile, keySchema);\n+      writeSchema(valueSchemaFile, valueSchema);\n+      subjectToFile.put(keySubject, keySchemaFile);\n+      expectedVersions.put(keySubject, version);\n+      subjectToFile.put(valueSubject, valueSchemaFile);\n+      expectedVersions.put(valueSubject, version);\n+    }\n+\n+    this.mojo.subjects = subjectToFile;\n+    this.mojo.execute();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void malformedSchema() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      if (i % 7 == 0) {\n+        writeMalformedFile(keySchemaFile);\n+        writeMalformedFile(valueSchemaFile);\n+      }\n+      subjectToFile.put(keySubject, keySchemaFile);\n+      expectedVersions.put(keySubject, version);\n+      subjectToFile.put(valueSubject, valueSchemaFile);\n+      expectedVersions.put(valueSubject, version);\n+    }\n+\n+    this.mojo.subjects = subjectToFile;\n+    this.mojo.execute();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void missingSchemas() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      if (i % 7 == 0) {\n+        writeSchema(keySchemaFile, keySchema);\n+        writeSchema(valueSchemaFile, valueSchema);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d524b1bd622cdc4dcd8d4cbc80b9b692cc05a4e0", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/d524b1bd622cdc4dcd8d4cbc80b9b692cc05a4e0", "committedDate": "2020-05-27T21:08:17Z", "message": "Fix whitespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cda55c411748267922a832454116c0efb935b37", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/8cda55c411748267922a832454116c0efb935b37", "committedDate": "2020-05-27T23:05:52Z", "message": "Fix malform tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NjcwNzA4", "url": "https://github.com/confluentinc/schema-registry/pull/1476#pullrequestreview-419670708", "createdAt": "2020-05-27T23:08:55Z", "commit": {"oid": "8cda55c411748267922a832454116c0efb935b37"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4480, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}