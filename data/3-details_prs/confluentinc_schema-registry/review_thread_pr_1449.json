{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTk5Nzkz", "number": 1449, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyNToxMlrOD8Pg0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTozNzo0M1rOD8PuUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDk1MzEyOnYy", "diffSide": "RIGHT", "path": "protobuf-converter/src/main/java/io/confluent/connect/protobuf/ProtobufData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyNToxMlrOGVEFbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwMjo0OTozMVrOGVKPQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MDIwNQ==", "bodyText": "can fullName be just . ?", "url": "https://github.com/confluentinc/schema-registry/pull/1449#discussion_r424740205", "createdAt": "2020-05-13T21:25:12Z", "author": {"login": "maverick64"}, "path": "protobuf-converter/src/main/java/io/confluent/connect/protobuf/ProtobufData.java", "diffHunk": "@@ -317,14 +319,36 @@ private DynamicSchema rawSchemaFromConnectSchema(Schema rootElem) {\n     try {\n       DynamicSchema.Builder schema = DynamicSchema.newBuilder();\n       schema.setSyntax(ProtobufSchema.PROTO3);\n-      String name = getNameOrDefault(rootElem.name());\n+      String fullName = getNameOrDefault(rootElem.name());\n+      String[] split = splitName(fullName);\n+      String namespace = split[0];\n+      String name = split[1];\n+      if (namespace != null) {\n+        schema.setPackage(namespace);\n+      }\n       schema.addMessageDefinition(messageDefinitionFromConnectSchema(schema, name, rootElem));\n       return schema.build();\n     } catch (Descriptors.DescriptorValidationException e) {\n       throw new IllegalStateException(e);\n     }\n   }\n \n+  /**\n+   * Split a full dotted-syntax name into a namespace and a single-component name.\n+   */\n+  private static String[] splitName(String fullName) {\n+    String[] result = new String[2];\n+    int indexLastDot = fullName.lastIndexOf('.');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7ddf4f90f37ec933afdb4401ac0639016c9027"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg0MTAyNw==", "bodyText": "No", "url": "https://github.com/confluentinc/schema-registry/pull/1449#discussion_r424841027", "createdAt": "2020-05-14T02:49:31Z", "author": {"login": "rayokota"}, "path": "protobuf-converter/src/main/java/io/confluent/connect/protobuf/ProtobufData.java", "diffHunk": "@@ -317,14 +319,36 @@ private DynamicSchema rawSchemaFromConnectSchema(Schema rootElem) {\n     try {\n       DynamicSchema.Builder schema = DynamicSchema.newBuilder();\n       schema.setSyntax(ProtobufSchema.PROTO3);\n-      String name = getNameOrDefault(rootElem.name());\n+      String fullName = getNameOrDefault(rootElem.name());\n+      String[] split = splitName(fullName);\n+      String namespace = split[0];\n+      String name = split[1];\n+      if (namespace != null) {\n+        schema.setPackage(namespace);\n+      }\n       schema.addMessageDefinition(messageDefinitionFromConnectSchema(schema, name, rootElem));\n       return schema.build();\n     } catch (Descriptors.DescriptorValidationException e) {\n       throw new IllegalStateException(e);\n     }\n   }\n \n+  /**\n+   * Split a full dotted-syntax name into a namespace and a single-component name.\n+   */\n+  private static String[] splitName(String fullName) {\n+    String[] result = new String[2];\n+    int indexLastDot = fullName.lastIndexOf('.');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MDIwNQ=="}, "originalCommit": {"oid": "9d7ddf4f90f37ec933afdb4401ac0639016c9027"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDk4NzcxOnYy", "diffSide": "RIGHT", "path": "protobuf-converter/src/test/java/io/confluent/connect/protobuf/ProtobufConverterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTozNzo0M1rOGVEbeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMTozNzo0M1rOGVEbeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0NTg1MA==", "bodyText": "Do we need a test without namespace but have the flag set?", "url": "https://github.com/confluentinc/schema-registry/pull/1449#discussion_r424745850", "createdAt": "2020-05-13T21:37:43Z", "author": {"login": "maverick64"}, "path": "protobuf-converter/src/test/java/io/confluent/connect/protobuf/ProtobufConverterTest.java", "diffHunk": "@@ -232,6 +254,25 @@ public void testToConnectDataForValue() throws Exception {\n     assertEquals(expected, result);\n   }\n \n+  @Test\n+  public void testToConnectDataForValueWithNamespace() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7ddf4f90f37ec933afdb4401ac0639016c9027"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1869, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}