{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3OTcwMzcw", "number": 1614, "reviewThreads": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozMToyOVrOEhU56g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0NDo0NVrOEhzsTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzgwOTcwOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidatorBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozMToyOVrOHOlLMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozMToyOVrOHOlLMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MTE4Ng==", "bodyText": "I guess the whole \"if else\" block can be replaced by a single if given the other collection is empty in the else if we change a bit the condition.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!backward.isEmpty() && !forward.isEmpty()) {\n          \n          \n            \n                    backward.addAll(forward);\n          \n          \n            \n                    return backward;\n          \n          \n            \n                  } else if (!backward.isEmpty()) {\n          \n          \n            \n                    return backward;\n          \n          \n            \n                  } else if (!forward.isEmpty())  {\n          \n          \n            \n                    return forward;\n          \n          \n            \n                  } else {\n          \n          \n            \n                    return Collections.emptyList();\n          \n          \n            \n                  }\n          \n          \n            \n                  if (!backward.isEmpty() || !forward.isEmpty()) {\n          \n          \n            \n                    backward.addAll(forward);\n          \n          \n            \n                    return backward;\n          \n          \n            \n                  } else {\n          \n          \n            \n                    return Collections.emptyList();\n          \n          \n            \n                  }", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485051186", "createdAt": "2020-09-08T16:31:29Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidatorBuilder.java", "diffHunk": "@@ -53,8 +55,21 @@ public SchemaValidatorBuilder canBeReadStrategy() {\n    * and vice-versa, according to the JSON default schema resolution.\n    */\n   public SchemaValidatorBuilder mutualReadStrategy() {\n-    this.strategy = (toValidate, existing) -> existing.isBackwardCompatible(toValidate)\n-        && toValidate.isBackwardCompatible(existing);\n+\n+    this.strategy = (toValidate, existing) -> {\n+      List<String> backward = existing.isBackwardCompatible(toValidate);\n+      List<String> forward = toValidate.isBackwardCompatible(existing);\n+      if (!backward.isEmpty() && !forward.isEmpty()) {\n+        backward.addAll(forward);\n+        return backward;\n+      } else if (!backward.isEmpty()) {\n+        return backward;\n+      } else if (!forward.isEmpty())  {\n+        return forward;\n+      } else {\n+        return Collections.emptyList();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzgyMTMyOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidationStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozNDoyOVrOHOlSEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozNDoyOVrOHOlSEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1Mjk0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return List of error message, other wise empty list\n          \n          \n            \n               * @return List of error message, otherwise empty list", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485052945", "createdAt": "2020-09-08T16:34:29Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidationStrategy.java", "diffHunk": "@@ -34,6 +36,7 @@\n    *\n    * @param toValidate The schema to validate\n    * @param existing The schema to validate against\n+   * @return List of error message, other wise empty list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzgyMjM4OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozNDo1MFrOHOlSyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjozNDo1MFrOHOlSyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1MzEyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return empty list if the schema is compatible with the provided schema, other wise the list\n          \n          \n            \n               * @return List of error message, otherwise empty list", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485053128", "createdAt": "2020-09-08T16:34:50Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidator.java", "diffHunk": "@@ -42,6 +44,8 @@\n    * @param toValidate The schema to validate\n    * @param existing The schemas to validate against, in order from most recent to latest if\n    *     applicable\n+   * @return empty list if the schema is compatible with the provided schema, other wise the list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzg0NTIyOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/MockSchemaRegistryClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0MDo1NlrOHOlgqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjo0MDo1NlrOHOlgqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NjY4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return new LinkedList<>(Arrays.asList(\"Compatibility level not specify.\"));\n          \n          \n            \n                  return new LinkedList<>(Arrays.asList(\"Compatibility level not specified.\"));", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485056682", "createdAt": "2020-09-08T16:40:56Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/MockSchemaRegistryClient.java", "diffHunk": "@@ -364,6 +365,29 @@ public boolean testCompatibility(String subject, ParsedSchema newSchema) throws\n           schemaMetadata.getId()));\n     }\n \n+    return newSchema.isCompatible(compatibilityLevel, schemaHistory).isEmpty();\n+  }\n+\n+  @Override\n+  public List<String> testCompatibilityVerbose(String subject, ParsedSchema newSchema)\n+          throws IOException, RestClientException {\n+    String compatibility = compatibilityCache.get(subject);\n+    if (compatibility == null) {\n+      compatibility = defaultCompatibility;\n+    }\n+\n+    CompatibilityLevel compatibilityLevel = CompatibilityLevel.forName(compatibility);\n+    if (compatibilityLevel == null) {\n+      return new LinkedList<>(Arrays.asList(\"Compatibility level not specify.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk5MTk5OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMToyNVrOHOm6EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMToyNVrOHOm6EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3OTU2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));\n          \n          \n            \n                  return Arrays.asList(\"Incompatible because of different schema type\");", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485079569", "createdAt": "2020-09-08T17:21:25Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "diffHunk": "@@ -156,19 +159,20 @@ public Integer version() {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk5Mjk3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMTo0MlrOHOm6sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMTo0MlrOHOm6sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3OTcyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return new LinkedList<>(Arrays.asList(e.toString()));\n          \n          \n            \n                  return Arrays.asList(e.toString());", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485079728", "createdAt": "2020-09-08T17:21:42Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "diffHunk": "@@ -156,19 +159,20 @@ public Integer version() {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));\n     }\n     try {\n       BACKWARD_VALIDATOR.validate(this.schemaObj,\n           Collections.singleton(((AvroSchema) previousSchema).schemaObj));\n-      return true;\n+      return Collections.emptyList();\n     } catch (SchemaValidationException e) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(e.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk5NDUyOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMjowOVrOHOm7ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMjowOVrOHOm7ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA3OTk3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return new LinkedList<>(Arrays.asList(\n          \n          \n            \n                          String.format(\"Unexpected exception during compatibility check\", e)));\n          \n          \n            \n                  return Arrays.asList(\n          \n          \n            \n                          String.format(\"Unexpected exception during compatibility check\", e));", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485079971", "createdAt": "2020-09-08T17:22:09Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "diffHunk": "@@ -156,19 +159,20 @@ public Integer version() {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));\n     }\n     try {\n       BACKWARD_VALIDATOR.validate(this.schemaObj,\n           Collections.singleton(((AvroSchema) previousSchema).schemaObj));\n-      return true;\n+      return Collections.emptyList();\n     } catch (SchemaValidationException e) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(e.toString()));\n     } catch (Exception e) {\n       log.error(\"Unexpected exception during compatibility check\", e);\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\n+              String.format(\"Unexpected exception during compatibility check\", e)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzk5NzU5OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/MockSchemaRegistryClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMjo1MVrOHOm9WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyMjo1MVrOHOm9WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4MDQwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return new LinkedList<>(Arrays.asList(\"Compatibility level not specify.\"));\n          \n          \n            \n                  return Arrays.asList(\"Compatibility level not specified.\");", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485080408", "createdAt": "2020-09-08T17:22:51Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/MockSchemaRegistryClient.java", "diffHunk": "@@ -364,6 +365,29 @@ public boolean testCompatibility(String subject, ParsedSchema newSchema) throws\n           schemaMetadata.getId()));\n     }\n \n+    return newSchema.isCompatible(compatibilityLevel, schemaHistory).isEmpty();\n+  }\n+\n+  @Override\n+  public List<String> testCompatibilityVerbose(String subject, ParsedSchema newSchema)\n+          throws IOException, RestClientException {\n+    String compatibility = compatibilityCache.get(subject);\n+    if (compatibility == null) {\n+      compatibility = defaultCompatibility;\n+    }\n+\n+    CompatibilityLevel compatibilityLevel = CompatibilityLevel.forName(compatibility);\n+    if (compatibilityLevel == null) {\n+      return new LinkedList<>(Arrays.asList(\"Compatibility level not specify.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDAxODM1OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzoyODo0N1rOHOnKfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToxNjoyN1rOHO-aIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4Mzc3Mg==", "bodyText": "I guess this could be put in common with the existing compatibility check rest call from the testCompatibility method.\nAlso adding a new field to the response should not break compatibility so maybe we could remove the queryParam. WDYT ?\nCC @rayokota", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485083772", "createdAt": "2020-09-08T17:28:47Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -549,6 +549,47 @@ public boolean testCompatibility(Map<String, String> requestProperties,\n     return response.getIsCompatible();\n   }\n \n+  public List<String> testCompatibilityVerbose(String schemaString,\n+                                               String schemaType,\n+                                               List<SchemaReference> references,\n+                                               String subject,\n+                                               String version)\n+      throws IOException, RestClientException {\n+    RegisterSchemaRequest request = new RegisterSchemaRequest();\n+    request.setSchema(schemaString);\n+    request.setSchemaType(schemaType);\n+    request.setReferences(references);\n+    return testCompatibilityVerbose(request, subject, version);\n+  }\n+\n+  public List<String> testCompatibilityVerbose(RegisterSchemaRequest registerSchemaRequest,\n+                                               String subject,\n+                                               String version)\n+      throws IOException, RestClientException {\n+    return testCompatibilityVerbose(\n+        DEFAULT_REQUEST_PROPERTIES, registerSchemaRequest, subject, version);\n+  }\n+\n+  public List<String> testCompatibilityVerbose(Map<String, String> requestProperties,\n+                                               RegisterSchemaRequest registerSchemaRequest,\n+                                               String subject,\n+                                               String version)\n+      throws IOException, RestClientException {\n+    UriBuilder builder =\n+        UriBuilder.fromPath(\"/compatibility/subjects/{subject}/versions/{version}\");\n+    builder.queryParam(\"verbose\", true);\n+    String path = builder.build(subject, version).toString();\n+\n+    CompatibilityCheckResponse response =\n+        httpRequest(\n+            path,\n+            \"POST\",\n+            registerSchemaRequest.toJson().getBytes(StandardCharsets.UTF_8),\n+            requestProperties,\n+            COMPATIBILITY_CHECK_RESPONSE_TYPE_REFERENCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMjU2Mg==", "bodyText": "Unfortunately the CompatibilityCheckResponse was not declared with @JsonIgnoreProperties(ignoreUnknown = true) so older clients will break if we add a new field to the response.", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485212562", "createdAt": "2020-09-08T21:42:51Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -549,6 +549,47 @@ public boolean testCompatibility(Map<String, String> requestProperties,\n     return response.getIsCompatible();\n   }\n \n+  public List<String> testCompatibilityVerbose(String schemaString,\n+                                               String schemaType,\n+                                               List<SchemaReference> references,\n+                                               String subject,\n+                                               String version)\n+      throws IOException, RestClientException {\n+    RegisterSchemaRequest request = new RegisterSchemaRequest();\n+    request.setSchema(schemaString);\n+    request.setSchemaType(schemaType);\n+    request.setReferences(references);\n+    return testCompatibilityVerbose(request, subject, version);\n+  }\n+\n+  public List<String> testCompatibilityVerbose(RegisterSchemaRequest registerSchemaRequest,\n+                                               String subject,\n+                                               String version)\n+      throws IOException, RestClientException {\n+    return testCompatibilityVerbose(\n+        DEFAULT_REQUEST_PROPERTIES, registerSchemaRequest, subject, version);\n+  }\n+\n+  public List<String> testCompatibilityVerbose(Map<String, String> requestProperties,\n+                                               RegisterSchemaRequest registerSchemaRequest,\n+                                               String subject,\n+                                               String version)\n+      throws IOException, RestClientException {\n+    UriBuilder builder =\n+        UriBuilder.fromPath(\"/compatibility/subjects/{subject}/versions/{version}\");\n+    builder.queryParam(\"verbose\", true);\n+    String path = builder.build(subject, version).toString();\n+\n+    CompatibilityCheckResponse response =\n+        httpRequest(\n+            path,\n+            \"POST\",\n+            registerSchemaRequest.toJson().getBytes(StandardCharsets.UTF_8),\n+            requestProperties,\n+            COMPATIBILITY_CHECK_RESPONSE_TYPE_REFERENCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4Mzc3Mg=="}, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2NDYwOQ==", "bodyText": "Oh yes, good catch.\nWe could add this annotation in the PR to avoid issues like this in the future ?", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485464609", "createdAt": "2020-09-09T09:16:27Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -549,6 +549,47 @@ public boolean testCompatibility(Map<String, String> requestProperties,\n     return response.getIsCompatible();\n   }\n \n+  public List<String> testCompatibilityVerbose(String schemaString,\n+                                               String schemaType,\n+                                               List<SchemaReference> references,\n+                                               String subject,\n+                                               String version)\n+      throws IOException, RestClientException {\n+    RegisterSchemaRequest request = new RegisterSchemaRequest();\n+    request.setSchema(schemaString);\n+    request.setSchemaType(schemaType);\n+    request.setReferences(references);\n+    return testCompatibilityVerbose(request, subject, version);\n+  }\n+\n+  public List<String> testCompatibilityVerbose(RegisterSchemaRequest registerSchemaRequest,\n+                                               String subject,\n+                                               String version)\n+      throws IOException, RestClientException {\n+    return testCompatibilityVerbose(\n+        DEFAULT_REQUEST_PROPERTIES, registerSchemaRequest, subject, version);\n+  }\n+\n+  public List<String> testCompatibilityVerbose(Map<String, String> requestProperties,\n+                                               RegisterSchemaRequest registerSchemaRequest,\n+                                               String subject,\n+                                               String version)\n+      throws IOException, RestClientException {\n+    UriBuilder builder =\n+        UriBuilder.fromPath(\"/compatibility/subjects/{subject}/versions/{version}\");\n+    builder.queryParam(\"verbose\", true);\n+    String path = builder.build(subject, version).toString();\n+\n+    CompatibilityCheckResponse response =\n+        httpRequest(\n+            path,\n+            \"POST\",\n+            registerSchemaRequest.toJson().getBytes(StandardCharsets.UTF_8),\n+            requestProperties,\n+            COMPATIBILITY_CHECK_RESPONSE_TYPE_REFERENCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4Mzc3Mg=="}, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA1NjA3OnYy", "diffSide": "RIGHT", "path": "json-schema-provider/src/main/java/io/confluent/kafka/schemaregistry/json/JsonSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozOTo0NVrOHOnhrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzozOTo0NVrOHOnhrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA4OTcxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));\n          \n          \n            \n                  return Arrays.asList(\"Incompatible because of different schema type\");", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485089710", "createdAt": "2020-09-08T17:39:45Z", "author": {"login": "ImFlog"}, "path": "json-schema-provider/src/main/java/io/confluent/kafka/schemaregistry/json/JsonSchema.java", "diffHunk": "@@ -300,9 +302,9 @@ private static boolean isPrimitive(Object value) {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDA2MTUyOnYy", "diffSide": "RIGHT", "path": "protobuf-provider/src/main/java/io/confluent/kafka/schemaregistry/protobuf/ProtobufSchema.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNzo0MToxNlrOHOnlAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0MTowNVrOHPU-4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDU2Mg==", "bodyText": "You can move the two errorMessages.add(..) after the if / else block to remove the duplicated lines.", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485090562", "createdAt": "2020-09-08T17:41:16Z", "author": {"login": "ImFlog"}, "path": "protobuf-provider/src/main/java/io/confluent/kafka/schemaregistry/protobuf/ProtobufSchema.java", "diffHunk": "@@ -798,17 +800,22 @@ public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n     boolean isCompatible = incompatibleDiffs.isEmpty();\n     if (!isCompatible) {\n       boolean first = true;\n+      List<String> errorMessages = new LinkedList<>();\n       for (Difference incompatibleDiff : incompatibleDiffs) {\n         if (first) {\n           // Log first incompatible change as warning\n           log.warn(\"Found incompatible change: {}\", incompatibleDiff);\n+          errorMessages.add(String.format(\"Found incompatible change: {}\", incompatibleDiff));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNDQ2NA==", "bodyText": "Good suggestion", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485834464", "createdAt": "2020-09-09T18:41:05Z", "author": {"login": "rayokota"}, "path": "protobuf-provider/src/main/java/io/confluent/kafka/schemaregistry/protobuf/ProtobufSchema.java", "diffHunk": "@@ -798,17 +800,22 @@ public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n     boolean isCompatible = incompatibleDiffs.isEmpty();\n     if (!isCompatible) {\n       boolean first = true;\n+      List<String> errorMessages = new LinkedList<>();\n       for (Difference incompatibleDiff : incompatibleDiffs) {\n         if (first) {\n           // Log first incompatible change as warning\n           log.warn(\"Found incompatible change: {}\", incompatibleDiff);\n+          errorMessages.add(String.format(\"Found incompatible change: {}\", incompatibleDiff));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA5MDU2Mg=="}, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDE5NDk3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidationStrategy.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyMTowMFrOHOo36Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyMTowMFrOHOo36Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMTc4NQ==", "bodyText": "nit: other wise -> otherwise", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485111785", "createdAt": "2020-09-08T18:21:00Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidationStrategy.java", "diffHunk": "@@ -34,6 +36,7 @@\n    *\n    * @param toValidate The schema to validate\n    * @param existing The schema to validate against\n+   * @return List of error message, other wise empty list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIwNjQ2OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidatorBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyNDozM1rOHOo_OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyNDozM1rOHOo_OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExMzY1Nw==", "bodyText": "Change to\nList<String> result = new ArrayList<>();\nresult.addAll(existing.isBackwardCompatible(toValidate);\nresult.addAll(toValidate.isBackwardCompatible(existing);\nreturn result;", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485113657", "createdAt": "2020-09-08T18:24:33Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/SchemaValidatorBuilder.java", "diffHunk": "@@ -53,8 +55,21 @@ public SchemaValidatorBuilder canBeReadStrategy() {\n    * and vice-versa, according to the JSON default schema resolution.\n    */\n   public SchemaValidatorBuilder mutualReadStrategy() {\n-    this.strategy = (toValidate, existing) -> existing.isBackwardCompatible(toValidate)\n-        && toValidate.isBackwardCompatible(existing);\n+\n+    this.strategy = (toValidate, existing) -> {\n+      List<String> backward = existing.isBackwardCompatible(toValidate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIxMjg4OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyNjoyMlrOHOpDFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyNjoyMlrOHOpDFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNDY0Ng==", "bodyText": "Replace with Collections.singletonList(...)", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485114646", "createdAt": "2020-09-08T18:26:22Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "diffHunk": "@@ -156,19 +159,20 @@ public Integer version() {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIxMzE4OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyNjoyOVrOHOpDRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyNjoyOVrOHOpDRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNDY5Mg==", "bodyText": "Replace with Collections.singletonList(...)", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485114692", "createdAt": "2020-09-08T18:26:29Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "diffHunk": "@@ -156,19 +159,20 @@ public Integer version() {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));\n     }\n     try {\n       BACKWARD_VALIDATOR.validate(this.schemaObj,\n           Collections.singleton(((AvroSchema) previousSchema).schemaObj));\n-      return true;\n+      return Collections.emptyList();\n     } catch (SchemaValidationException e) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(e.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIxMzg3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyNjo0NFrOHOpDsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyNjo0NFrOHOpDsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNDgwMw==", "bodyText": "Replace with Collections.singletonList(...)", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485114803", "createdAt": "2020-09-08T18:26:44Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "diffHunk": "@@ -156,19 +159,20 @@ public Integer version() {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));\n     }\n     try {\n       BACKWARD_VALIDATOR.validate(this.schemaObj,\n           Collections.singleton(((AvroSchema) previousSchema).schemaObj));\n-      return true;\n+      return Collections.emptyList();\n     } catch (SchemaValidationException e) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(e.toString()));\n     } catch (Exception e) {\n       log.error(\"Unexpected exception during compatibility check\", e);\n-      return false;\n+      return new LinkedList<>(Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIyNjcwOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMDoyOVrOHOpLvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMDoyOVrOHOpLvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjg2MQ==", "bodyText": "This is not the correct usage of String.format, you can replace with\n\"Unexpected exception during compatibility check: \" + e.getMessage()", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485116861", "createdAt": "2020-09-08T18:30:29Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "diffHunk": "@@ -156,19 +159,20 @@ public Integer version() {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));\n     }\n     try {\n       BACKWARD_VALIDATOR.validate(this.schemaObj,\n           Collections.singleton(((AvroSchema) previousSchema).schemaObj));\n-      return true;\n+      return Collections.emptyList();\n     } catch (SchemaValidationException e) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(e.toString()));\n     } catch (Exception e) {\n       log.error(\"Unexpected exception during compatibility check\", e);\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\n+              String.format(\"Unexpected exception during compatibility check\", e)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIzNDEwOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/SchemaRegistryClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMjo0M1rOHOpQMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMjo0M1rOHOpQMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExODAwMA==", "bodyText": "Change public -> default and have the implementation throw new UnsupportedOperationException()", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485118000", "createdAt": "2020-09-08T18:32:43Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/SchemaRegistryClient.java", "diffHunk": "@@ -121,6 +121,9 @@ default boolean testCompatibility(String subject, org.apache.avro.Schema schema)\n   public boolean testCompatibility(String subject, ParsedSchema schema)\n       throws IOException, RestClientException;\n \n+  public List<String> testCompatibilityVerbose(String subject, ParsedSchema schema)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI0MzkwOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/entities/requests/CompatibilityCheckResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNToyMlrOHOpV7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNToyMlrOHOpV7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTQ3MA==", "bodyText": "Let's call this property \"messages\" and getMessages, this will allow us to put other messages in the future.", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485119470", "createdAt": "2020-09-08T18:35:22Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/entities/requests/CompatibilityCheckResponse.java", "diffHunk": "@@ -45,6 +50,16 @@ public String toJson() throws IOException {\n     return JacksonMapper.INSTANCE.writeValueAsString(this);\n   }\n \n+  @JsonProperty(\"error_messages\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI0NTA2OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/entities/requests/CompatibilityCheckResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNTo0M1rOHOpWmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNTo0M1rOHOpWmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTY0Mg==", "bodyText": "Let's call this property \"messages\" and getMessages, this will allow us to put other messages in the future.", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485119642", "createdAt": "2020-09-08T18:35:43Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/entities/requests/CompatibilityCheckResponse.java", "diffHunk": "@@ -45,6 +50,16 @@ public String toJson() throws IOException {\n     return JacksonMapper.INSTANCE.writeValueAsString(this);\n   }\n \n+  @JsonProperty(\"error_messages\")\n+  public List<String> getErrorMessages() {\n+    return errorMessages;\n+  }\n+\n+  @JsonProperty(\"error_messages\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI2OTczOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/entities/requests/CompatibilityCheckResponse.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MzowM1rOHOplWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MzowM1rOHOplWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzQxNg==", "bodyText": "Let's call this property messages, this will allow us to put other messages in the future.", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485123416", "createdAt": "2020-09-08T18:43:03Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/entities/requests/CompatibilityCheckResponse.java", "diffHunk": "@@ -16,16 +16,21 @@\n \n package io.confluent.kafka.schemaregistry.client.rest.entities.requests;\n \n+import com.fasterxml.jackson.annotation.JsonInclude;\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n import java.io.IOException;\n \n import io.confluent.kafka.schemaregistry.utils.JacksonMapper;\n+\n+import java.util.List;\n import java.util.Objects;\n \n+@JsonInclude(JsonInclude.Include.NON_NULL)\n public class CompatibilityCheckResponse {\n \n   private boolean isCompatible;\n+  private List<String> errorMessages = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI4MDgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjowNFrOHOpr3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjowNFrOHOpr3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTA4NA==", "bodyText": "nit: fix indentation", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485125084", "createdAt": "2020-09-08T18:46:04Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1281,7 +1282,7 @@ public CompatibilityLevel getCompatibilityLevelInScope(String subject)\n   }\n \n   @Override\n-  public boolean isCompatible(String subject,\n+  public List<String> isCompatible(String subject,\n                               Schema newSchema,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI4MTIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjoxMFrOHOpsHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjoxMFrOHOpsHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTE0OA==", "bodyText": "nit: fix indentation", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485125148", "createdAt": "2020-09-08T18:46:10Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1296,7 +1297,7 @@ public boolean isCompatible(String subject,\n    * @param previousSchemas Full schema history in chronological order\n    */\n   @Override\n-  public boolean isCompatible(String subject,\n+  public List<String> isCompatible(String subject,\n                               Schema newSchema,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI4MTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjoxN1rOHOpsaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjoxN1rOHOpsaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTIyNA==", "bodyText": "nit: fix indentation", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485125224", "createdAt": "2020-09-08T18:46:17Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -1316,7 +1317,7 @@ public boolean isCompatible(String subject,\n     return isCompatibleWithPrevious(subject, parsedSchema, prevParsedSchemas);\n   }\n \n-  private boolean isCompatibleWithPrevious(String subject,\n+  private List<String> isCompatibleWithPrevious(String subject,\n                                            ParsedSchema parsedSchema,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI4MjEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjoyNlrOHOpsrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjoyNlrOHOpsrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTI5Mw==", "bodyText": "nit: fix indentation", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485125293", "createdAt": "2020-09-08T18:46:26Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java", "diffHunk": "@@ -71,11 +71,11 @@ Schema get(String subject, int version, boolean returnDeletedSchema)\n   Schema lookUpSchemaUnderSubject(String subject, Schema schema, boolean lookupDeletedSchema)\n       throws SchemaRegistryException;\n \n-  boolean isCompatible(String subject,\n+  List<String> isCompatible(String subject,\n                        Schema newSchema,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI4MzMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0Njo0N1rOHOptcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0Njo0N1rOHOptcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTQ4OA==", "bodyText": "nit: fix indentation", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485125488", "createdAt": "2020-09-08T18:46:47Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/SchemaRegistry.java", "diffHunk": "@@ -71,11 +71,11 @@ Schema get(String subject, int version, boolean returnDeletedSchema)\n   Schema lookUpSchemaUnderSubject(String subject, Schema schema, boolean lookupDeletedSchema)\n       throws SchemaRegistryException;\n \n-  boolean isCompatible(String subject,\n+  List<String> isCompatible(String subject,\n                        Schema newSchema,\n                        Schema targetSchema) throws SchemaRegistryException;\n \n-  boolean isCompatible(String subject,\n+  List<String> isCompatible(String subject,\n                        Schema newSchema,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI4NjM0OnYy", "diffSide": "RIGHT", "path": "json-schema-provider/src/main/java/io/confluent/kafka/schemaregistry/json/JsonSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0Nzo0NFrOHOpvag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0Nzo0NFrOHOpvag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTk5NA==", "bodyText": "Use Collections.singletonList", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485125994", "createdAt": "2020-09-08T18:47:44Z", "author": {"login": "rayokota"}, "path": "json-schema-provider/src/main/java/io/confluent/kafka/schemaregistry/json/JsonSchema.java", "diffHunk": "@@ -300,9 +302,9 @@ private static boolean isPrimitive(Object value) {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI4OTkxOnYy", "diffSide": "RIGHT", "path": "json-schema-provider/src/main/java/io/confluent/kafka/schemaregistry/json/JsonSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0ODo0OFrOHOpxsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0ODo0OFrOHOpxsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNjU3Ng==", "bodyText": "Use ArrayList instead of LinkedList", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485126576", "createdAt": "2020-09-08T18:48:48Z", "author": {"login": "rayokota"}, "path": "json-schema-provider/src/main/java/io/confluent/kafka/schemaregistry/json/JsonSchema.java", "diffHunk": "@@ -314,17 +316,22 @@ public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n     boolean isCompatible = incompatibleDiffs.isEmpty();\n     if (!isCompatible) {\n       boolean first = true;\n+      List<String> errorMessages = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI5NTc0OnYy", "diffSide": "RIGHT", "path": "protobuf-provider/src/main/java/io/confluent/kafka/schemaregistry/protobuf/ProtobufSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1MDoxOFrOHOp1Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1MDoxOFrOHOp1Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNzQ4Mg==", "bodyText": "Use Collections.singletonList", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485127482", "createdAt": "2020-09-08T18:50:18Z", "author": {"login": "rayokota"}, "path": "protobuf-provider/src/main/java/io/confluent/kafka/schemaregistry/protobuf/ProtobufSchema.java", "diffHunk": "@@ -785,9 +787,9 @@ public void validate() {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI5NjMwOnYy", "diffSide": "RIGHT", "path": "protobuf-provider/src/main/java/io/confluent/kafka/schemaregistry/protobuf/ProtobufSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1MDoyOFrOHOp1kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1MDoyOFrOHOp1kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNzU2OA==", "bodyText": "Use ArrayList", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485127568", "createdAt": "2020-09-08T18:50:28Z", "author": {"login": "rayokota"}, "path": "protobuf-provider/src/main/java/io/confluent/kafka/schemaregistry/protobuf/ProtobufSchema.java", "diffHunk": "@@ -798,17 +800,22 @@ public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n     boolean isCompatible = incompatibleDiffs.isEmpty();\n     if (!isCompatible) {\n       boolean first = true;\n+      List<String> errorMessages = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDMwNDU0OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1Mjo1NlrOHOp6iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo1Mjo1NlrOHOp6iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyODg0Mw==", "bodyText": "Actually RestService is more like an internal class (SchemaRegistryClient wraps it), so we can change this interface by adding a boolean verbose flag to the existing testCompatibility method", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485128843", "createdAt": "2020-09-08T18:52:56Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/client/rest/RestService.java", "diffHunk": "@@ -549,6 +549,47 @@ public boolean testCompatibility(Map<String, String> requestProperties,\n     return response.getIsCompatible();\n   }\n \n+  public List<String> testCompatibilityVerbose(String schemaString,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDM0MDA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/CompatibilityResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTowMjo1N1rOHOqQKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOTowMjo1N1rOHOqQKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEzNDM3OQ==", "bodyText": "A few lines above this line, we catch InvalidSchemaException.  If verbose is true, instead of throwing an exception, let's put the error message from InvalidSchemaException in a CompatibilityCheckResponse and return that.", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485134379", "createdAt": "2020-09-08T19:02:57Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/resources/CompatibilityResource.java", "diffHunk": "@@ -137,11 +141,22 @@ public void testCompatibilityBySubjectName(\n       throw Errors.schemaRegistryException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDM4NDExOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/ParsedSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToxNjozOFrOHOqrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToxNjozOFrOHOqrJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0MTI4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));\n          \n          \n            \n                    return Collections.singletonList(\"Incompatible because of different schema type\");", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485141284", "createdAt": "2020-09-08T19:16:38Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/ParsedSchema.java", "diffHunk": "@@ -95,13 +97,14 @@ default void validate() {\n    *\n    * @param level the compatibility level\n    * @param previousSchemas full schema history in chronological order\n-   * @return whether this schema is compatible with the previous schemas\n+   * @return an empty list if this schema is backward compatible with the previous schema, otherwise\n+   *         the list of error messages\n    */\n-  default boolean isCompatible(CompatibilityLevel level,\n-                               List<? extends ParsedSchema> previousSchemas) {\n+  default List<String> isCompatible(\n+      CompatibilityLevel level, List<? extends ParsedSchema> previousSchemas) {\n     for (ParsedSchema previousSchema : previousSchemas) {\n       if (!schemaType().equals(previousSchema.schemaType())) {\n-        return false;\n+        return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDM4ODkxOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToxODoxNFrOHOquEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxOToxODoxNFrOHOquEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTE0MjAzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));\n          \n          \n            \n                  return Collections.singletonList(\"Incompatible because of different schema type\");", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485142034", "createdAt": "2020-09-08T19:18:14Z", "author": {"login": "ImFlog"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "diffHunk": "@@ -156,19 +159,20 @@ public Integer version() {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88416cfcecd87c2c5c5bff5c28f449b1c2540bd3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODgxMzQ2OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/ParsedSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozMjo0MlrOHPUtUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozMjo0MlrOHPUtUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgyOTk2OA==", "bodyText": "Use Collections.singletonList", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485829968", "createdAt": "2020-09-09T18:32:42Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/ParsedSchema.java", "diffHunk": "@@ -95,13 +97,14 @@ default void validate() {\n    *\n    * @param level the compatibility level\n    * @param previousSchemas full schema history in chronological order\n-   * @return whether this schema is compatible with the previous schemas\n+   * @return an empty list if this schema is backward compatible with the previous schema, otherwise\n+   *         the list of error messages\n    */\n-  default boolean isCompatible(CompatibilityLevel level,\n-                               List<? extends ParsedSchema> previousSchemas) {\n+  default List<String> isCompatible(\n+      CompatibilityLevel level, List<? extends ParsedSchema> previousSchemas) {\n     for (ParsedSchema previousSchema : previousSchemas) {\n       if (!schemaType().equals(previousSchema.schemaType())) {\n-        return false;\n+        return new LinkedList<>(Arrays.asList(\"Incompatible because of different schema type\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aba4bf7fd5d5b3448d192e11787196cc03b5c5d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODgxNjM1OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozMzozNFrOHPUvFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozMzozNFrOHPUvFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMDQyMw==", "bodyText": "e.toString -> e.getMessage", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485830423", "createdAt": "2020-09-09T18:33:34Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/avro/AvroSchema.java", "diffHunk": "@@ -156,19 +157,20 @@ public Integer version() {\n   }\n \n   @Override\n-  public boolean isBackwardCompatible(ParsedSchema previousSchema) {\n+  public List<String> isBackwardCompatible(ParsedSchema previousSchema) {\n     if (!schemaType().equals(previousSchema.schemaType())) {\n-      return false;\n+      return Collections.singletonList(\"Incompatible because of different schema type\");\n     }\n     try {\n       BACKWARD_VALIDATOR.validate(this.schemaObj,\n           Collections.singleton(((AvroSchema) previousSchema).schemaObj));\n-      return true;\n+      return Collections.emptyList();\n     } catch (SchemaValidationException e) {\n-      return false;\n+      return Collections.singletonList(e.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aba4bf7fd5d5b3448d192e11787196cc03b5c5d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODg1MzkwOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/io/confluent/kafka/schemaregistry/CompatibilityChecker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0NDo0NVrOHPVGVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODo0NDo0NVrOHPVGVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNjM3NA==", "bodyText": "Checkstyle is complaining that this has the wrong indentation", "url": "https://github.com/confluentinc/schema-registry/pull/1614#discussion_r485836374", "createdAt": "2020-09-09T18:44:45Z", "author": {"login": "rayokota"}, "path": "client/src/main/java/io/confluent/kafka/schemaregistry/CompatibilityChecker.java", "diffHunk": "@@ -63,7 +63,9 @@\n   public static final CompatibilityChecker FULL_TRANSITIVE_CHECKER = new CompatibilityChecker(\n       FULL_TRANSITIVE_VALIDATOR);\n \n-  private static final SchemaValidator NO_OP_VALIDATOR = (schema, schemas) -> true;\n+  private static final SchemaValidator NO_OP_VALIDATOR =\n+          (schema, schemas) -> Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1aba4bf7fd5d5b3448d192e11787196cc03b5c5d"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1833, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}