{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwODI0NTYy", "number": 1483, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozMzowNlrOEDqTrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozMDo1MlrOEG2N9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjc0MzUxOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozMzowNlrOGgz1EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozMzowNlrOGgz1EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1Njc4NA==", "bodyText": "Can this be removed?", "url": "https://github.com/confluentinc/schema-registry/pull/1483#discussion_r437056784", "createdAt": "2020-06-08T23:33:06Z", "author": {"login": "rayokota"}, "path": "pom.xml", "diffHunk": "@@ -81,6 +81,7 @@\n         <wire.version>3.1.0</wire.version>\n         <swagger.version>1.6.0</swagger.version>\n         <spotbugs.plugin.version>4.0.0</spotbugs.plugin.version>\n+        <kafka.version>6.0.0-ce-SNAPSHOT</kafka.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322416d394035064918bd3f0386144245638d2ac"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjc1MTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozNzo1MlrOGgz6ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzozNzo1MlrOGgz6ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODE0OA==", "bodyText": "Can we move the logic in the line above to setLeader?", "url": "https://github.com/confluentinc/schema-registry/pull/1483#discussion_r437058148", "createdAt": "2020-06-08T23:37:52Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -371,6 +371,7 @@ public void setLeader(@Nullable SchemaRegistryIdentity newLeader)\n         idGenerator.init();\n       }\n       metricsContainer.isLeader().set(isLeader() ? 1 : 0);\n+      metricsContainer.setLeader(isLeader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322416d394035064918bd3f0386144245638d2ac"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjc1NTY0OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/io/confluent/kafka/schemaregistry/RestApp.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzo0MDoxNFrOGgz9Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMzo0Njo0OFrOGg3yYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODgyMg==", "bodyText": "Where is this used?", "url": "https://github.com/confluentinc/schema-registry/pull/1483#discussion_r437058822", "createdAt": "2020-06-08T23:40:14Z", "author": {"login": "rayokota"}, "path": "core/src/test/java/io/confluent/kafka/schemaregistry/RestApp.java", "diffHunk": "@@ -67,6 +66,8 @@ public RestApp(int port,\n     prop.put(SchemaRegistryConfig.KAFKASTORE_TOPIC_CONFIG, kafkaTopic);\n     prop.put(SchemaRegistryConfig.SCHEMA_COMPATIBILITY_CONFIG, compatibilityType);\n     prop.put(SchemaRegistryConfig.LEADER_ELIGIBILITY, leaderEligibility);\n+\n+    prop.put(\"metrics.jmx.prefix\", \"kafka.schema.registry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322416d394035064918bd3f0386144245638d2ac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyMTYzNA==", "bodyText": "Not needed after rest-utils got fixed, removed.", "url": "https://github.com/confluentinc/schema-registry/pull/1483#discussion_r437121634", "createdAt": "2020-06-09T03:46:48Z", "author": {"login": "dragosvictor"}, "path": "core/src/test/java/io/confluent/kafka/schemaregistry/RestApp.java", "diffHunk": "@@ -67,6 +66,8 @@ public RestApp(int port,\n     prop.put(SchemaRegistryConfig.KAFKASTORE_TOPIC_CONFIG, kafkaTopic);\n     prop.put(SchemaRegistryConfig.SCHEMA_COMPATIBILITY_CONFIG, compatibilityType);\n     prop.put(SchemaRegistryConfig.LEADER_ELIGIBILITY, leaderEligibility);\n+\n+    prop.put(\"metrics.jmx.prefix\", \"kafka.schema.registry\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1ODgyMg=="}, "originalCommit": {"oid": "322416d394035064918bd3f0386144245638d2ac"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjc3NTkzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/metrics/MetricsContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzo1MToxMFrOGg0JeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzo1MToxMFrOGg0JeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2MjAwOQ==", "bodyText": "note, we switched all labels to be lowercase by default", "url": "https://github.com/confluentinc/schema-registry/pull/1483#discussion_r437062009", "createdAt": "2020-06-08T23:51:10Z", "author": {"login": "xvrl"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/metrics/MetricsContainer.java", "diffHunk": "@@ -174,21 +202,15 @@ private SchemaRegistryMetric getSchemaTypeMetric(String type, boolean isRegister\n     }\n   }\n \n-  private static String getCommitId() {\n-    final String defaultValue = \"Unknown\";\n-\n-    String fileName = \"/schema-registry-app.properties\";\n-    try (InputStream propFile = MetricsContainer.class.getResourceAsStream(fileName)) {\n-      if (propFile != null) {\n-        Properties props = new Properties();\n-        props.load(propFile);\n-        return props.getProperty(\"application.commitId\", defaultValue).trim();\n-      } else {\n-        log.error(\"Cannot find properties file\");\n-      }\n-    } catch (IOException e) {\n-      log.warn(\"Cannot parse properties file\", e);\n-    }\n-    return defaultValue;\n+  @NotNull\n+  private static MetricsContext getMetricsContext(SchemaRegistryConfig config) {\n+    Map<String, Object> metadata =\n+            true ? config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX) :\n+                    config.originals();\n+    metadata.put(RESOURCE_LABEL_TYPE,  \"SCHEMAREGISTRY\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "322416d394035064918bd3f0386144245638d2ac"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzMzNDA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/leaderelector/kafka/KafkaGroupLeaderElector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxMzo0NVrOGj7Urw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjo1MTowMFrOGkkcvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNTI5NQ==", "bodyText": "If we use this Metrics constructor:\nhttps://github.com/confluentinc/ce-kafka/blob/d6ecf6a2d2d34c7fbea13880dea51585f87c7122/clients/src/main/java/org/apache/kafka/common/metrics/Metrics.java#L132\nThen there is no need to do the iteration here.", "url": "https://github.com/confluentinc/schema-registry/pull/1483#discussion_r440325295", "createdAt": "2020-06-15T17:13:45Z", "author": {"login": "xiaodongdu"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/leaderelector/kafka/KafkaGroupLeaderElector.java", "diffHunk": "@@ -97,8 +99,11 @@ public KafkaGroupLeaderElector(SchemaRegistryConfig config,\n           CommonClientConfigs.METRIC_REPORTER_CLASSES_CONFIG,\n           MetricsReporter.class\n       );\n-      reporters.add(new JmxReporter(JMX_PREFIX));\n-\n+      reporters.add(new JmxReporter());\n+      for (MetricsReporter reporter : reporters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84b58a701ce7c6d676b40da660ada00e3e846d8"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5OTEwMA==", "bodyText": "Fixed, thank you !", "url": "https://github.com/confluentinc/schema-registry/pull/1483#discussion_r440999100", "createdAt": "2020-06-16T16:51:00Z", "author": {"login": "dragosvictor"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/leaderelector/kafka/KafkaGroupLeaderElector.java", "diffHunk": "@@ -97,8 +99,11 @@ public KafkaGroupLeaderElector(SchemaRegistryConfig config,\n           CommonClientConfigs.METRIC_REPORTER_CLASSES_CONFIG,\n           MetricsReporter.class\n       );\n-      reporters.add(new JmxReporter(JMX_PREFIX));\n-\n+      reporters.add(new JmxReporter());\n+      for (MetricsReporter reporter : reporters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNTI5NQ=="}, "originalCommit": {"oid": "b84b58a701ce7c6d676b40da660ada00e3e846d8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzM3NTI1OnYy", "diffSide": "RIGHT", "path": "core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoyNToyN1rOGj7uIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzowOTozOFrOGklIXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMzMTgxMA==", "bodyText": "since this is a public repo, I don't think we can depend on proprietary jars", "url": "https://github.com/confluentinc/schema-registry/pull/1483#discussion_r440331810", "createdAt": "2020-06-15T17:25:27Z", "author": {"login": "xvrl"}, "path": "core/pom.xml", "diffHunk": "@@ -215,6 +215,11 @@\n             <groupId>io.swagger</groupId>\n             <artifactId>swagger-core</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.confluent</groupId>\n+            <artifactId>confluent-metrics</artifactId>\n+            <version>${ce.kafka.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84b58a701ce7c6d676b40da660ada00e3e846d8"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMDI2OQ==", "bodyText": "Removed, thank you !", "url": "https://github.com/confluentinc/schema-registry/pull/1483#discussion_r441010269", "createdAt": "2020-06-16T17:09:38Z", "author": {"login": "dragosvictor"}, "path": "core/pom.xml", "diffHunk": "@@ -215,6 +215,11 @@\n             <groupId>io.swagger</groupId>\n             <artifactId>swagger-core</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>io.confluent</groupId>\n+            <artifactId>confluent-metrics</artifactId>\n+            <version>${ce.kafka.version}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMzMTgxMA=="}, "originalCommit": {"oid": "b84b58a701ce7c6d676b40da660ada00e3e846d8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjE1MjIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/metrics/MetricsContainer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozMDo1MlrOGl5W5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozMDo1MlrOGl5W5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MDI0Ng==", "bodyText": "For components that are tied to a specific kafka cluster, we split out the tags rather than combining them. i.e. for connect to we use the group id as the cluster.id, and we add a nother tag or the kafka cluster id.\nThis matches the nomenclature we use to identify a cluster when defining RBAC permissions.", "url": "https://github.com/confluentinc/schema-registry/pull/1483#discussion_r442390246", "createdAt": "2020-06-18T17:30:52Z", "author": {"login": "xvrl"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/metrics/MetricsContainer.java", "diffHunk": "@@ -174,21 +198,41 @@ private SchemaRegistryMetric getSchemaTypeMetric(String type, boolean isRegister\n     }\n   }\n \n-  private static String getCommitId() {\n-    final String defaultValue = \"Unknown\";\n+  private static List<String> getMetricReporterConfig(SchemaRegistryConfig config) {\n+    List<String> classes = new ArrayList<>(config.getList(\n+            ProducerConfig.METRIC_REPORTER_CLASSES_CONFIG));\n+    try {\n+      if (!classes.contains(TELEMETRY_REPORTER_CLASS)) {\n+        Class.forName(TELEMETRY_REPORTER_CLASS);\n+        classes.add(TELEMETRY_REPORTER_CLASS);\n+      }\n+    } catch (ClassNotFoundException cnfe) {\n+      // Ignore\n+    }\n+    return classes;\n+  }\n \n-    String fileName = \"/schema-registry-app.properties\";\n-    try (InputStream propFile = MetricsContainer.class.getResourceAsStream(fileName)) {\n-      if (propFile != null) {\n-        Properties props = new Properties();\n-        props.load(propFile);\n-        return props.getProperty(\"application.commitId\", defaultValue).trim();\n-      } else {\n-        log.error(\"Cannot find properties file\");\n+  private static MetricsReporter getTelemetryReporter(List<MetricsReporter> reporters) {\n+    for (MetricsReporter reporter : reporters) {\n+      if (reporter.getClass().getName().equals(TELEMETRY_REPORTER_CLASS)) {\n+        return reporter;\n       }\n-    } catch (IOException e) {\n-      log.warn(\"Cannot parse properties file\", e);\n     }\n-    return defaultValue;\n+    return null;\n+  }\n+\n+  private static MetricsContext getMetricsContext(SchemaRegistryConfig config,\n+                                                  String kafkaClusterId) {\n+    Map<String, Object> metadata =\n+            config.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX);\n+\n+    String clusterId = String.format(\"%s-%s\", kafkaClusterId,\n+            config.getString(SchemaRegistryConfig.SCHEMAREGISTRY_GROUP_ID_CONFIG));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a26ec18af179fc077e3725064e3e49d0abbbe26a"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1889, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}