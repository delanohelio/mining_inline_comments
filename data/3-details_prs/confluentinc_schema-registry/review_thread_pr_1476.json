{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDk0MzU0", "number": 1476, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDo0MzoyM1rOEARJ0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDo0OToxOVrOEARRYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzE2NDk2OnYy", "diffSide": "RIGHT", "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDo0MzoyM1rOGbcZfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTowODo0MlrOGbdNdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMDAxNA==", "bodyText": "Nit: missing space before bracket.", "url": "https://github.com/confluentinc/schema-registry/pull/1476#discussion_r431430014", "createdAt": "2020-05-27T20:43:23Z", "author": {"login": "dragosvictor"}, "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.confluent.kafka.schemaregistry.maven;\n+\n+import io.confluent.kafka.schemaregistry.client.MockSchemaRegistryClient;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ValidateSchemaRegistryMojoTest extends SchemaRegistryTest{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MzMxNw==", "bodyText": "Fixed", "url": "https://github.com/confluentinc/schema-registry/pull/1476#discussion_r431443317", "createdAt": "2020-05-27T21:08:42Z", "author": {"login": "rayokota"}, "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.confluent.kafka.schemaregistry.maven;\n+\n+import io.confluent.kafka.schemaregistry.client.MockSchemaRegistryClient;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ValidateSchemaRegistryMojoTest extends SchemaRegistryTest{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMDAxNA=="}, "originalCommit": {"oid": "6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzE4MTg4OnYy", "diffSide": "RIGHT", "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDo0ODo0MVrOGbckjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTowODowMFrOGbdMCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMjg0Ng==", "bodyText": "This seems to be testing both malformed and missing schemas. Is there a benefit to having 100 iterations here versus just one ?", "url": "https://github.com/confluentinc/schema-registry/pull/1476#discussion_r431432846", "createdAt": "2020-05-27T20:48:41Z", "author": {"login": "dragosvictor"}, "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.confluent.kafka.schemaregistry.maven;\n+\n+import io.confluent.kafka.schemaregistry.client.MockSchemaRegistryClient;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ValidateSchemaRegistryMojoTest extends SchemaRegistryTest{\n+  ValidateSchemaRegistryMojo mojo;\n+\n+  @Before\n+  public void createMojo(){\n+    this.mojo = new ValidateSchemaRegistryMojo();\n+    this.mojo.client(new MockSchemaRegistryClient());\n+  }\n+\n+  @Test\n+  public void validate() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      writeSchema(keySchemaFile, keySchema);\n+      writeSchema(valueSchemaFile, valueSchema);\n+      subjectToFile.put(keySubject, keySchemaFile);\n+      expectedVersions.put(keySubject, version);\n+      subjectToFile.put(valueSubject, valueSchemaFile);\n+      expectedVersions.put(valueSubject, version);\n+    }\n+\n+    this.mojo.subjects = subjectToFile;\n+    this.mojo.execute();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void malformedSchema() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      if (i % 7 == 0) {\n+        writeMalformedFile(keySchemaFile);\n+        writeMalformedFile(valueSchemaFile);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0Mjk1NA==", "bodyText": "This test was copied from the register action test.  Register and validate are similar, except register will send it to SR which will validate, while the validate action is just performed locally.", "url": "https://github.com/confluentinc/schema-registry/pull/1476#discussion_r431442954", "createdAt": "2020-05-27T21:08:00Z", "author": {"login": "rayokota"}, "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.confluent.kafka.schemaregistry.maven;\n+\n+import io.confluent.kafka.schemaregistry.client.MockSchemaRegistryClient;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ValidateSchemaRegistryMojoTest extends SchemaRegistryTest{\n+  ValidateSchemaRegistryMojo mojo;\n+\n+  @Before\n+  public void createMojo(){\n+    this.mojo = new ValidateSchemaRegistryMojo();\n+    this.mojo.client(new MockSchemaRegistryClient());\n+  }\n+\n+  @Test\n+  public void validate() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      writeSchema(keySchemaFile, keySchema);\n+      writeSchema(valueSchemaFile, valueSchema);\n+      subjectToFile.put(keySubject, keySchemaFile);\n+      expectedVersions.put(keySubject, version);\n+      subjectToFile.put(valueSubject, valueSchemaFile);\n+      expectedVersions.put(valueSubject, version);\n+    }\n+\n+    this.mojo.subjects = subjectToFile;\n+    this.mojo.execute();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void malformedSchema() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      if (i % 7 == 0) {\n+        writeMalformedFile(keySchemaFile);\n+        writeMalformedFile(valueSchemaFile);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMjg0Ng=="}, "originalCommit": {"oid": "6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzE4NDMzOnYy", "diffSide": "RIGHT", "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDo0OToxOVrOGbcmDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMDo0OToxOVrOGbcmDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQzMzIyOQ==", "bodyText": "Ditto w.r.t. the 'extra' schemas.", "url": "https://github.com/confluentinc/schema-registry/pull/1476#discussion_r431433229", "createdAt": "2020-05-27T20:49:19Z", "author": {"login": "dragosvictor"}, "path": "maven-plugin/src/test/java/io/confluent/kafka/schemaregistry/maven/ValidateSchemaRegistryMojoTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.confluent.kafka.schemaregistry.maven;\n+\n+import io.confluent.kafka.schemaregistry.client.MockSchemaRegistryClient;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.avro.Schema;\n+import org.apache.maven.plugin.MojoExecutionException;\n+import org.apache.maven.plugin.MojoFailureException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ValidateSchemaRegistryMojoTest extends SchemaRegistryTest{\n+  ValidateSchemaRegistryMojo mojo;\n+\n+  @Before\n+  public void createMojo(){\n+    this.mojo = new ValidateSchemaRegistryMojo();\n+    this.mojo.client(new MockSchemaRegistryClient());\n+  }\n+\n+  @Test\n+  public void validate() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      writeSchema(keySchemaFile, keySchema);\n+      writeSchema(valueSchemaFile, valueSchema);\n+      subjectToFile.put(keySubject, keySchemaFile);\n+      expectedVersions.put(keySubject, version);\n+      subjectToFile.put(valueSubject, valueSchemaFile);\n+      expectedVersions.put(valueSubject, version);\n+    }\n+\n+    this.mojo.subjects = subjectToFile;\n+    this.mojo.execute();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void malformedSchema() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      if (i % 7 == 0) {\n+        writeMalformedFile(keySchemaFile);\n+        writeMalformedFile(valueSchemaFile);\n+      }\n+      subjectToFile.put(keySubject, keySchemaFile);\n+      expectedVersions.put(keySubject, version);\n+      subjectToFile.put(valueSubject, valueSchemaFile);\n+      expectedVersions.put(valueSubject, version);\n+    }\n+\n+    this.mojo.subjects = subjectToFile;\n+    this.mojo.execute();\n+  }\n+\n+  @Test(expected = IllegalStateException.class)\n+  public void missingSchemas() throws IOException, MojoFailureException, MojoExecutionException {\n+    Map<String, Integer> expectedVersions = new LinkedHashMap<>();\n+\n+    Map<String, File> subjectToFile = new LinkedHashMap<>();\n+    int version = 1;\n+    for (int i = 0; i < 100; i++) {\n+      String keySubject = String.format(\"TestSubject%03d-key\", i);\n+      String valueSubject = String.format(\"TestSubject%03d-value\", i);\n+      Schema keySchema = Schema.create(Schema.Type.STRING);\n+      Schema valueSchema = Schema.createUnion(Arrays.asList(Schema.create(Schema.Type.STRING), Schema.create(Schema.Type.NULL)));\n+      File keySchemaFile = new File(this.tempDirectory, keySubject + \".avsc\");\n+      File valueSchemaFile = new File(this.tempDirectory, valueSubject + \".avsc\");\n+      if (i % 7 == 0) {\n+        writeSchema(keySchemaFile, keySchema);\n+        writeSchema(valueSchemaFile, valueSchema);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b54c664cba96ca26d0cb3d6bf9cf6f7e829778c"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1881, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}