{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNzc2OTM4", "number": 1675, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOTo0OTowMFrOEy-ZPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOTo0OTowMFrOEy-ZPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxODg2NTI1OnYy", "diffSide": "RIGHT", "path": "json-schema-converter/src/test/java/io/confluent/connect/json/JsonSchemaDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOTo0OTowMFrOHp61PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxOTo1MjoyOFrOHp69Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxNzU2NQ==", "bodyText": "Do we need to test with a float i.e 1.5?", "url": "https://github.com/confluentinc/schema-registry/pull/1675#discussion_r513717565", "createdAt": "2020-10-28T19:49:00Z", "author": {"login": "maverick64"}, "path": "json-schema-converter/src/test/java/io/confluent/connect/json/JsonSchemaDataTest.java", "diffHunk": "@@ -885,6 +887,22 @@ public void testToConnectIntEnumInAllOfIsInvalid() {\n     checkNonObjectConversion(expectedSchema, 1, schema, IntNode.valueOf(1));\n   }\n \n+  @Test\n+  public void testToConnectStringConstInAllOf() {\n+    JsonSchema jsonSchema = new JsonSchema(\"{\\\"const\\\":\\\"money\\\",\\\"type\\\":\\\"string\\\"}\");\n+    CombinedSchema schema = (CombinedSchema) jsonSchema.rawSchema();\n+    Schema expectedSchema = new SchemaBuilder(Schema.Type.STRING).build();\n+    checkNonObjectConversion(expectedSchema, \"money\", schema, TextNode.valueOf(\"money\"));\n+  }\n+\n+  @Test\n+  public void testToConnectIntegerConstInAllOf() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68dc49ea060d2b347e2c3c6a78cfd99d386f77b8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxOTU3OQ==", "bodyText": "Thanks I added another test", "url": "https://github.com/confluentinc/schema-registry/pull/1675#discussion_r513719579", "createdAt": "2020-10-28T19:52:28Z", "author": {"login": "rayokota"}, "path": "json-schema-converter/src/test/java/io/confluent/connect/json/JsonSchemaDataTest.java", "diffHunk": "@@ -885,6 +887,22 @@ public void testToConnectIntEnumInAllOfIsInvalid() {\n     checkNonObjectConversion(expectedSchema, 1, schema, IntNode.valueOf(1));\n   }\n \n+  @Test\n+  public void testToConnectStringConstInAllOf() {\n+    JsonSchema jsonSchema = new JsonSchema(\"{\\\"const\\\":\\\"money\\\",\\\"type\\\":\\\"string\\\"}\");\n+    CombinedSchema schema = (CombinedSchema) jsonSchema.rawSchema();\n+    Schema expectedSchema = new SchemaBuilder(Schema.Type.STRING).build();\n+    checkNonObjectConversion(expectedSchema, \"money\", schema, TextNode.valueOf(\"money\"));\n+  }\n+\n+  @Test\n+  public void testToConnectIntegerConstInAllOf() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcxNzU2NQ=="}, "originalCommit": {"oid": "68dc49ea060d2b347e2c3c6a78cfd99d386f77b8"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1850, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}