{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyOTAxMzU2", "number": 1320, "title": "Fixes for map handling in Protobuf plugin", "bodyText": "Generate map entry messages as nested messages\nEnsure map_entry option is preserved\nFix compatibility check for generated map entry message\nSupport reading base64-encoded FileDescriptorProto\nExpand NestedTestProto example with more Protobuf features\nAdd unit tests for empty messages for ProtobufConverter\nUpgrade square wire to 3.0.3\nAdd support for /schemas/ids/{id}?format=serialized for Protobuf", "createdAt": "2020-02-10T01:19:28Z", "url": "https://github.com/confluentinc/schema-registry/pull/1320", "merged": true, "mergeCommit": {"oid": "1bc89da02bee3097ea7740581b5d240922473849"}, "closed": true, "closedAt": "2020-02-11T18:40:28Z", "author": {"login": "rayokota"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCgHc_AH2gAyMzcyOTAxMzU2OmNlNDFkZTFjMDY4Y2MwMWUzZGM0OWNlM2UwODBmMGQ1NjY5YmExNTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDY8N6gFqTM1NzAyMzEwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ce41de1c068cc01e3dc49ce3e080f0d5669ba157", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/ce41de1c068cc01e3dc49ce3e080f0d5669ba157", "committedDate": "2020-02-09T03:39:02Z", "message": "Allow reading from FileDescriptorProto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b82fb8538b1a86d356b6a6250c6ee643d21cc052", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/b82fb8538b1a86d356b6a6250c6ee643d21cc052", "committedDate": "2020-02-09T16:48:02Z", "message": "Fix map handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe7d03e4666abbb66aaca03edde06d42d3a1b90f", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/fe7d03e4666abbb66aaca03edde06d42d3a1b90f", "committedDate": "2020-02-09T20:26:26Z", "message": "Minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c399bfba8582d4d4a1fd967bbd1c52437a6b839c", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/c399bfba8582d4d4a1fd967bbd1c52437a6b839c", "committedDate": "2020-02-09T20:37:50Z", "message": "Upgrade to wire 3.0.3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a85e0c28b9339d5846865ea79b49306624dd4b59", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/a85e0c28b9339d5846865ea79b49306624dd4b59", "committedDate": "2020-02-09T23:28:04Z", "message": "Ensure map entries are generated last"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1bbf1043f417a671c2aa3ab4e11b6dfcff97778", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/f1bbf1043f417a671c2aa3ab4e11b6dfcff97778", "committedDate": "2020-02-09T23:33:44Z", "message": "Minor API cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7290de5b15471edacab1ef3a15a325bc5380b57e", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/7290de5b15471edacab1ef3a15a325bc5380b57e", "committedDate": "2020-02-10T00:05:06Z", "message": "Minor code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a459f1ffe0999eef6f4d49f339e3bea900243f0", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/1a459f1ffe0999eef6f4d49f339e3bea900243f0", "committedDate": "2020-02-10T01:20:01Z", "message": "Minor code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8bc69230c00d49aa09ee86d9c116342bd2fec20", "author": {"user": {"login": "rayokota", "name": "Robert Yokota"}}, "url": "https://github.com/confluentinc/schema-registry/commit/b8bc69230c00d49aa09ee86d9c116342bd2fec20", "committedDate": "2020-02-11T17:31:58Z", "message": "Add format query param to get by id"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODgyMjgz", "url": "https://github.com/confluentinc/schema-registry/pull/1320#pullrequestreview-356882283", "createdAt": "2020-02-11T18:15:02Z", "commit": {"oid": "b8bc69230c00d49aa09ee86d9c116342bd2fec20"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDIzMTA1", "url": "https://github.com/confluentinc/schema-registry/pull/1320#pullrequestreview-357023105", "createdAt": "2020-02-11T21:51:20Z", "commit": {"oid": "b8bc69230c00d49aa09ee86d9c116342bd2fec20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo1MToyMFrOFoaezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTo1MToyMFrOFoaezQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMTIyOQ==", "bodyText": "I think it might be a bit nicer to have another overload for the default format: 'text' (in addition to empty or null).\nIn the clients, I feel like I want an enum for specifying this: SchemaFormat.Text/Serialized. Less flexible structure than a string, but I don't feel it'll ever be too limiting?", "url": "https://github.com/confluentinc/schema-registry/pull/1320#discussion_r377921229", "createdAt": "2020-02-11T21:51:20Z", "author": {"login": "mhowlett"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/storage/KafkaSchemaRegistry.java", "diffHunk": "@@ -866,13 +877,19 @@ public SchemaString get(int id, boolean fetchMaxId) throws SchemaRegistryExcepti\n     }\n     SchemaString schemaString = new SchemaString();\n     schemaString.setSchemaType(schema.getSchemaType());\n-    schemaString.setSchemaString(schema.getSchema());\n-    List<SchemaReference> refs = schema.getReferences();\n-    if (refs != null) {\n-      schemaString.setReferences(refs.stream()\n-          .map(ref -> new io.confluent.kafka.schemaregistry.client.rest.entities.SchemaReference(\n-              ref.getName(), ref.getSubject(), ref.getVersion()))\n-          .collect(Collectors.toList()));\n+    List<io.confluent.kafka.schemaregistry.client.rest.entities.SchemaReference> refs =\n+        schema.getReferences() != null\n+        ? schema.getReferences().stream()\n+            .map(ref -> new io.confluent.kafka.schemaregistry.client.rest.entities.SchemaReference(\n+                ref.getName(), ref.getSubject(), ref.getVersion()))\n+          .collect(Collectors.toList())\n+        : null;\n+    schemaString.setReferences(refs);\n+    if (format != null && !format.trim().isEmpty()) {\n+      ParsedSchema parsedSchema = parseSchema(schema.getSchemaType(), schema.getSchema(), refs);\n+      schemaString.setSchemaString(parsedSchema.formattedString(format));\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8bc69230c00d49aa09ee86d9c116342bd2fec20"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4502, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}