{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODgwNzQx", "number": 1381, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1NzozMFrODm0ImQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowNzowNlrODnNcag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDI2NjQ5OnYy", "diffSide": "RIGHT", "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1NzozMFrOF0cyQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOToyMzo1NVrOF1Fc2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTg4OQ==", "bodyText": "Do we really want this as DEBUG?", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r390541889", "createdAt": "2020-03-10T18:57:30Z", "author": {"login": "rhauch"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +939,20 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {\n+            log.debug(\n+                \"Scale and precision of {} and {} cannot be serialized as native Avro logical \" \n+                    + \"decimal type; reverting to legacy serialization method\",\n+                scale,\n+                precision\n+            );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95c8b08bdbec5df1d03091c5374bd65e7ab6705"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1Njg3Nw==", "bodyText": "I'm afraid to put it much higher as this will be invoked potentially multiple times on every record and would result in log spam. Could put it at TRACE if you feel that DEBUG is too high, though.", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r390556877", "createdAt": "2020-03-10T19:24:09Z", "author": {"login": "C0urante"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +939,20 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {\n+            log.debug(\n+                \"Scale and precision of {} and {} cannot be serialized as native Avro logical \" \n+                    + \"decimal type; reverting to legacy serialization method\",\n+                scale,\n+                precision\n+            );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTg4OQ=="}, "originalCommit": {"oid": "d95c8b08bdbec5df1d03091c5374bd65e7ab6705"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MzIzOA==", "bodyText": "I was thinking DEBUG is too high, considering this might be output for potentially every record (or at least a lot of records) from a source connector. Might be useful to have a DEBUG message that happens once per connector instance, but more than that seems too many.", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r391193238", "createdAt": "2020-03-11T18:54:54Z", "author": {"login": "rhauch"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +939,20 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {\n+            log.debug(\n+                \"Scale and precision of {} and {} cannot be serialized as native Avro logical \" \n+                    + \"decimal type; reverting to legacy serialization method\",\n+                scale,\n+                precision\n+            );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTg4OQ=="}, "originalCommit": {"oid": "d95c8b08bdbec5df1d03091c5374bd65e7ab6705"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwODE1Mg==", "bodyText": "I can put it down to TRACE for now... I agree that it may be useful to add a once-per-connector (or, more accurately, once-per converter instance) message at DEBUG level but tracking that kind of state in this class would come with its own implementation complexity and complicate an already several-thousand-line-long file. I think that, given that all we're doing here is reverting to prior behavior in a case where things used to work and now break, it should be safe to put at TRACE for now.", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r391208152", "createdAt": "2020-03-11T19:23:55Z", "author": {"login": "C0urante"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +939,20 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {\n+            log.debug(\n+                \"Scale and precision of {} and {} cannot be serialized as native Avro logical \" \n+                    + \"decimal type; reverting to legacy serialization method\",\n+                scale,\n+                precision\n+            );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MTg4OQ=="}, "originalCommit": {"oid": "d95c8b08bdbec5df1d03091c5374bd65e7ab6705"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDI2OTY3OnYy", "diffSide": "RIGHT", "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxODo1ODoyM1rOF0c0PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDowOTo0NlrOF0fLLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MjM5Ng==", "bodyText": "How about a comment here to describe why this scenario needs special logic and how that logic deviates from using LogicalTypes.decimal(precision, scale).addToSchema(...)?", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r390542396", "createdAt": "2020-03-10T18:58:23Z", "author": {"login": "rhauch"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +939,20 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95c8b08bdbec5df1d03091c5374bd65e7ab6705"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU4MTAzOQ==", "bodyText": "Ack, addressed", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r390581039", "createdAt": "2020-03-10T20:09:46Z", "author": {"login": "C0urante"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +939,20 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0MjM5Ng=="}, "originalCommit": {"oid": "d95c8b08bdbec5df1d03091c5374bd65e7ab6705"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDQwOTQzOnYy", "diffSide": "RIGHT", "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowNjowM1rOF1E5Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTozMTo1MFrOF1FsbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTAxNA==", "bodyText": "Why would we not just add CONNECT_AVRO_DECIMAL_PRECISION_PROP as a property to the schema here? Then we wouldn't need the forceLegacyDecimal variable and would not need to modify line 963 (original). Or am I missing something?", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r391199014", "createdAt": "2020-03-11T19:06:03Z", "author": {"login": "rhauch"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +940,21 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {\n+            log.debug(\n+                \"Scale and precision of {} and {} cannot be serialized as native Avro logical \" \n+                    + \"decimal type; reverting to legacy serialization method\",\n+                scale,\n+                precision\n+            );\n+            // We cannot use the Avro Java library's support for the decimal logical type when the\n+            // scale is either negative or greater than the precision as this violates the Avro spec\n+            // and causes the Avro library to throw an exception, so we fall back in this case to\n+            // using the legacy method for encoding decimal logical type information.\n+            forceLegacyDecimal = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb9e75234e8491046ed1337c65872833f79999"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMDMxMA==", "bodyText": "Ran into this after adding the test, turns out the schema parameters map is (at least in some cases) an unmodifiable collection.", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r391200310", "createdAt": "2020-03-11T19:08:31Z", "author": {"login": "C0urante"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +940,21 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {\n+            log.debug(\n+                \"Scale and precision of {} and {} cannot be serialized as native Avro logical \" \n+                    + \"decimal type; reverting to legacy serialization method\",\n+                scale,\n+                precision\n+            );\n+            // We cannot use the Avro Java library's support for the decimal logical type when the\n+            // scale is either negative or greater than the precision as this violates the Avro spec\n+            // and causes the Avro library to throw an exception, so we fall back in this case to\n+            // using the legacy method for encoding decimal logical type information.\n+            forceLegacyDecimal = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTAxNA=="}, "originalCommit": {"oid": "dcdb9e75234e8491046ed1337c65872833f79999"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMjUxMw==", "bodyText": "See https://github.com/apache/kafka/blob/71113b4aac43a3a6f13625e25171ef8f2233fe7d/connect/api/src/main/java/org/apache/kafka/connect/data/SchemaBuilder.java#L186-L189", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r391202513", "createdAt": "2020-03-11T19:12:56Z", "author": {"login": "C0urante"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +940,21 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {\n+            log.debug(\n+                \"Scale and precision of {} and {} cannot be serialized as native Avro logical \" \n+                    + \"decimal type; reverting to legacy serialization method\",\n+                scale,\n+                precision\n+            );\n+            // We cannot use the Avro Java library's support for the decimal logical type when the\n+            // scale is either negative or greater than the precision as this violates the Avro spec\n+            // and causes the Avro library to throw an exception, so we fall back in this case to\n+            // using the legacy method for encoding decimal logical type information.\n+            forceLegacyDecimal = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTAxNA=="}, "originalCommit": {"oid": "dcdb9e75234e8491046ed1337c65872833f79999"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxMDcyNQ==", "bodyText": "Seems worthy of adding to the comment. I'd lose a lot of time trying to track that down.", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r391210725", "createdAt": "2020-03-11T19:28:51Z", "author": {"login": "rhauch"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +940,21 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {\n+            log.debug(\n+                \"Scale and precision of {} and {} cannot be serialized as native Avro logical \" \n+                    + \"decimal type; reverting to legacy serialization method\",\n+                scale,\n+                precision\n+            );\n+            // We cannot use the Avro Java library's support for the decimal logical type when the\n+            // scale is either negative or greater than the precision as this violates the Avro spec\n+            // and causes the Avro library to throw an exception, so we fall back in this case to\n+            // using the legacy method for encoding decimal logical type information.\n+            forceLegacyDecimal = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTAxNA=="}, "originalCommit": {"oid": "dcdb9e75234e8491046ed1337c65872833f79999"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxMjE0MA==", "bodyText": "Ack, added", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r391212140", "createdAt": "2020-03-11T19:31:50Z", "author": {"login": "C0urante"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -935,7 +940,21 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n           int precision = precisionString == null ? CONNECT_AVRO_DECIMAL_PRECISION_DEFAULT :\n               Integer.parseInt(precisionString);\n           int scale = scaleString == null ? 0 : Integer.parseInt(scaleString);\n-          org.apache.avro.LogicalTypes.decimal(precision, scale).addToSchema(baseSchema);\n+          if (scale < 0 || scale > precision) {\n+            log.debug(\n+                \"Scale and precision of {} and {} cannot be serialized as native Avro logical \" \n+                    + \"decimal type; reverting to legacy serialization method\",\n+                scale,\n+                precision\n+            );\n+            // We cannot use the Avro Java library's support for the decimal logical type when the\n+            // scale is either negative or greater than the precision as this violates the Avro spec\n+            // and causes the Avro library to throw an exception, so we fall back in this case to\n+            // using the legacy method for encoding decimal logical type information.\n+            forceLegacyDecimal = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTAxNA=="}, "originalCommit": {"oid": "dcdb9e75234e8491046ed1337c65872833f79999"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDQxMzIyOnYy", "diffSide": "RIGHT", "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowNzowNlrOF1E7XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowOTowNlrOF1E_bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTU4MQ==", "bodyText": "If we added CONNECT_AVRO_DECIMAL_PRECISION_PROP to the schema parameters in the block above, which only happens when Decimal.LOGICAL_NAME.equalsIgnoreCase(schema.name()), then we wouldn't need to modify this block.", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r391199581", "createdAt": "2020-03-11T19:07:06Z", "author": {"login": "rhauch"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -960,7 +979,8 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n       // and name().\n       if (schema.name() != null) {\n         if (Decimal.LOGICAL_NAME.equalsIgnoreCase(schema.name())\n-            && schema.parameters().containsKey(CONNECT_AVRO_DECIMAL_PRECISION_PROP)) {\n+            && (schema.parameters().containsKey(CONNECT_AVRO_DECIMAL_PRECISION_PROP)\n+                || forceLegacyDecimal)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcdb9e75234e8491046ed1337c65872833f79999"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMDYyMw==", "bodyText": "Yeah, originally tried that. Failed during testing because schema.paramaters() returned an immutable map.", "url": "https://github.com/confluentinc/schema-registry/pull/1381#discussion_r391200623", "createdAt": "2020-03-11T19:09:06Z", "author": {"login": "C0urante"}, "path": "avro-converter/src/main/java/io/confluent/connect/avro/AvroData.java", "diffHunk": "@@ -960,7 +979,8 @@ private static Object maybeWrapSchemaless(Schema schema, Object value, String ty\n       // and name().\n       if (schema.name() != null) {\n         if (Decimal.LOGICAL_NAME.equalsIgnoreCase(schema.name())\n-            && schema.parameters().containsKey(CONNECT_AVRO_DECIMAL_PRECISION_PROP)) {\n+            && (schema.parameters().containsKey(CONNECT_AVRO_DECIMAL_PRECISION_PROP)\n+                || forceLegacyDecimal)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTU4MQ=="}, "originalCommit": {"oid": "dcdb9e75234e8491046ed1337c65872833f79999"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1960, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}