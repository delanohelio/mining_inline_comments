{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMTMxNzgy", "number": 1468, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1MTo0MFrOD_yHLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODowOTo0MVrOD_yjsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjA3OTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/metrics/MetricsContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1MTo0MFrOGapmrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1MTo0MFrOGapmrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzgwNQ==", "bodyText": "nit: can we change to isMaster", "url": "https://github.com/confluentinc/schema-registry/pull/1468#discussion_r430597805", "createdAt": "2020-05-26T17:51:40Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/metrics/MetricsContainer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.metrics;\n+\n+import io.confluent.kafka.schemaregistry.avro.AvroSchema;\n+import io.confluent.kafka.schemaregistry.json.JsonSchema;\n+import io.confluent.kafka.schemaregistry.protobuf.ProtobufSchema;\n+import io.confluent.kafka.schemaregistry.rest.SchemaRegistryConfig;\n+import io.confluent.rest.Application;\n+import io.confluent.rest.RestConfig;\n+import org.apache.kafka.clients.producer.ProducerConfig;\n+import org.apache.kafka.common.MetricName;\n+import org.apache.kafka.common.metrics.JmxReporter;\n+import org.apache.kafka.common.metrics.MetricConfig;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.MetricsReporter;\n+import org.apache.kafka.common.utils.SystemTime;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+public class MetricsContainer {\n+\n+  private static final Logger log = LoggerFactory.getLogger(MetricsContainer.class);\n+\n+  private static final String JMX_PREFIX = \"kafka.schema.registry\";\n+\n+  private final Metrics metrics;\n+  private final Map<String, String> configuredTags;\n+  private final String commitId;\n+\n+  private final SchemaRegistryMetric isMasterNode;\n+  private final SchemaRegistryMetric nodeCount;\n+\n+  private final SchemaRegistryMetric schemasCreated;\n+  private final SchemaRegistryMetric schemasDeleted;\n+  private final SchemaRegistryMetric customSchemaProviders;\n+  private final SchemaRegistryMetric apiCallsSuccess;\n+  private final SchemaRegistryMetric apiCallsFailure;\n+\n+  private final SchemaRegistryMetric avroSchemasCreated;\n+  private final SchemaRegistryMetric jsonSchemasCreated;\n+  private final SchemaRegistryMetric protobufSchemasCreated;\n+\n+  private final SchemaRegistryMetric avroSchemasDeleted;\n+  private final SchemaRegistryMetric jsonSchemasDeleted;\n+  private final SchemaRegistryMetric protobufSchemasDeleted;\n+\n+  public MetricsContainer(SchemaRegistryConfig config) {\n+    this.configuredTags =\n+            Application.parseListToMap(config.getList(RestConfig.METRICS_TAGS_CONFIG));\n+    this.commitId = getCommitId();\n+\n+    MetricConfig metricConfig =\n+            new MetricConfig().samples(config.getInt(ProducerConfig.METRICS_NUM_SAMPLES_CONFIG))\n+                    .timeWindow(config.getLong(ProducerConfig.METRICS_SAMPLE_WINDOW_MS_CONFIG),\n+                            TimeUnit.MILLISECONDS);\n+    List<MetricsReporter> reporters =\n+            config.getConfiguredInstances(ProducerConfig.METRIC_REPORTER_CLASSES_CONFIG,\n+                    MetricsReporter.class);\n+    reporters.add(new JmxReporter(JMX_PREFIX));\n+\n+    this.metrics = new Metrics(metricConfig, reporters, new SystemTime());\n+\n+    this.isMasterNode = createMetric(\"master-slave-role\",\n+            \"1.0 indicates the node is the active master in the cluster and is the\"\n+            + \" node where all register schema and config update requests are \"\n+            + \"served.\");\n+    this.nodeCount = createMetric(\"node-count\", \"Number of Schema Registry nodes in the cluster\");\n+\n+    this.apiCallsSuccess = createMetric(\"api-success-count\", \"Number of successful API calls\");\n+    this.apiCallsFailure = createMetric(\"api-failure-count\", \"Number of failed API calls\");\n+\n+    this.customSchemaProviders = createMetric(\"custom-schema-provider-count\",\n+            \"Number of custom schema providers\");\n+\n+    this.schemasCreated = createMetric(\"registered-count\", \"Number of registered schemas\");\n+    this.schemasDeleted = createMetric(\"deleted-count\", \"Number of deleted schemas\");\n+\n+    this.avroSchemasCreated = createMetric(\"avro-schemas-created\",\n+            \"Number of registered Avro schemas\");\n+\n+    this.avroSchemasDeleted = createMetric(\"avro-schemas-deleted\",\n+            \"Number of deleted Avro schemas\");\n+\n+    this.jsonSchemasCreated = createMetric(\"json-schemas-created\",\n+            \"Number of registered JSON schemas\");\n+\n+    this.jsonSchemasDeleted = createMetric(\"json-schemas-deleted\",\n+            \"Number of deleted JSON schemas\");\n+\n+    this.protobufSchemasCreated = createMetric(\"protobuf-schemas-created\",\n+            \"Number of registered Protobuf schemas\");\n+\n+    this.protobufSchemasDeleted = createMetric(\"protobuf-schemas-deleted\",\n+            \"Number of deleted Protobuf schemas\");\n+  }\n+\n+  private SchemaRegistryMetric createMetric(String name, String metricDescription) {\n+    return createMetric(name, name, name, metricDescription);\n+  }\n+\n+  private SchemaRegistryMetric createMetric(String sensorName, String metricName,\n+                                            String metricGroup, String metricDescription) {\n+    MetricName mn = new MetricName(metricName, metricGroup, metricDescription, configuredTags);\n+    return new SchemaRegistryMetric(metrics, sensorName, mn);\n+  }\n+\n+  public SchemaRegistryMetric getNodeCountMetric() {\n+    return nodeCount;\n+  }\n+\n+  public SchemaRegistryMetric getIsMaster() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b857a6af0d2c2683987117d9df998df3f2e516e"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjE1MjE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/filters/RestCallMetricFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODowOTo0MVrOGaqU-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODowOTo0MVrOGaqU-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwOTY1Nw==", "bodyText": "Can this be a switch statement?", "url": "https://github.com/confluentinc/schema-registry/pull/1468#discussion_r430609657", "createdAt": "2020-05-26T18:09:41Z", "author": {"login": "rayokota"}, "path": "core/src/main/java/io/confluent/kafka/schemaregistry/rest/filters/RestCallMetricFilter.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.kafka.schemaregistry.rest.filters;\n+\n+import io.confluent.kafka.schemaregistry.metrics.SchemaRegistryMetric;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.container.ContainerResponseFilter;\n+import javax.ws.rs.core.Response;\n+import java.io.IOException;\n+\n+public class RestCallMetricFilter implements ContainerResponseFilter {\n+  private final SchemaRegistryMetric metricSucceeded;\n+  private final SchemaRegistryMetric metricFailed;\n+\n+  public RestCallMetricFilter(SchemaRegistryMetric metricSucceeded,\n+                              SchemaRegistryMetric metricFailed) {\n+    this.metricSucceeded = metricSucceeded;\n+    this.metricFailed = metricFailed;\n+  }\n+\n+  @Override\n+  public void filter(ContainerRequestContext containerRequestContext,\n+                     ContainerResponseContext containerResponseContext) throws IOException {\n+    final Response.Status.Family family = containerResponseContext.getStatusInfo().getFamily();\n+    if (family == Response.Status.Family.SUCCESSFUL) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b857a6af0d2c2683987117d9df998df3f2e516e"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1876, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}