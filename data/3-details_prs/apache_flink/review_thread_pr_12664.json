{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NzIwNTkx", "number": 12664, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0MDowMVrOEFxUOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNTozODo0OVrOEFyc2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg2MzMwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0MDowMVrOGkKJiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0MDowMVrOGkKJiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2ODIwMw==", "bodyText": "nit: it should be a separate hotfix commit.", "url": "https://github.com/apache/flink/pull/12664#discussion_r440568203", "createdAt": "2020-06-16T03:40:01Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -275,7 +277,7 @@ public void checkpointState(\n \t@Override\n \tpublic void notifyCheckpointComplete(long checkpointId, OperatorChain<?, ?> operatorChain, Supplier<Boolean> isRunning) throws Exception {\n \t\tif (isRunning.get()) {\n-\t\t\tLOG.debug(\"Notification of complete checkpoint for task {}\", taskName);\n+\t\t\tLOG.debug(\"Notification of complete checkpoint {} for task {}\", checkpointId, taskName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg2MzU3OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0MDowOVrOGkKJrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0MDowOVrOGkKJrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2ODIzOQ==", "bodyText": "ditto:", "url": "https://github.com/apache/flink/pull/12664#discussion_r440568239", "createdAt": "2020-06-16T03:40:09Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -291,7 +293,7 @@ public void notifyCheckpointAborted(long checkpointId, OperatorChain<?, ?> opera\n \n \t\tException previousException = null;\n \t\tif (isRunning.get()) {\n-\t\t\tLOG.debug(\"Notification of aborted checkpoint for task {}\", taskName);\n+\t\t\tLOG.debug(\"Notification of aborted checkpoint {} for task {}\", checkpointId, taskName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg3MjY2OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0Njo0OVrOGkKPTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0Njo0OVrOGkKPTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTY3Ng==", "bodyText": "SubtaskCheckpointCoordinatorImpl -> SubtaskCheckpointCoordinator , so we do not need the transformation", "url": "https://github.com/apache/flink/pull/12664#discussion_r440569676", "createdAt": "2020-06-16T03:46:49Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg3MzUzOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NzoyNVrOGkKP0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0NzoyNVrOGkKP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTgwOQ==", "bodyText": "no need for unaligned mode, the previous deadlock was actually found in alignment mode.", "url": "https://github.com/apache/flink/pull/12664#discussion_r440569809", "createdAt": "2020-06-16T03:47:25Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg3NDQzOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0Nzo1OFrOGkKQYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo0Nzo1OFrOGkKQYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU2OTk1Mw==", "bodyText": "i guess we do not need to set stateManager for the environment", "url": "https://github.com/apache/flink/pull/12664#discussion_r440569953", "createdAt": "2020-06-16T03:47:58Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg3NzQwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo1MDoxMVrOGkKSVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo1MDoxMVrOGkKSVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3MDQ1NA==", "bodyText": "RecordOrEventCollectingResultPartitionWriter -> ResultPartitionWriter for simple, also better to split the arguments in separate line because it seems too long line.", "url": "https://github.com/apache/flink/pull/12664#discussion_r440570454", "createdAt": "2020-06-16T03:50:11Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)\n+\t\t\t.build();\n+\n+\t\tfinal TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, 4096);\n+\t\tArrayList<Object> recordOrEvents = new ArrayList<>();\n+\t\tStreamElementSerializer<String> stringStreamElementSerializer = new StreamElementSerializer<>(StringSerializer.INSTANCE);\n+\t\tRecordOrEventCollectingResultPartitionWriter<StreamElement> resultPartitionWriter = new RecordOrEventCollectingResultPartitionWriter<>(recordOrEvents, bufferProvider, stringStreamElementSerializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDg4MDM1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo1MjowOVrOGkKUIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwMzo1MjowOVrOGkKUIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3MDkxMw==", "bodyText": "no need to call getChannelStateWriter().start, since the checkpoint will never been actually executed.", "url": "https://github.com/apache/flink/pull/12664#discussion_r440570913", "createdAt": "2020-06-16T03:52:09Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)\n+\t\t\t.build();\n+\n+\t\tfinal TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, 4096);\n+\t\tArrayList<Object> recordOrEvents = new ArrayList<>();\n+\t\tStreamElementSerializer<String> stringStreamElementSerializer = new StreamElementSerializer<>(StringSerializer.INSTANCE);\n+\t\tRecordOrEventCollectingResultPartitionWriter<StreamElement> resultPartitionWriter = new RecordOrEventCollectingResultPartitionWriter<>(recordOrEvents, bufferProvider, stringStreamElementSerializer);\n+\t\tmockEnvironment.addOutputs(Collections.singletonList(resultPartitionWriter));\n+\n+\t\tOneInputStreamTask<String, String> task = testHarness.getTask();\n+\t\tfinal OperatorChain<String, OneInputStreamOperator<String, String>> operatorChain = new OperatorChain<>(task, StreamTask.createRecordWriterDelegate(streamConfig, mockEnvironment));\n+\t\tlong checkpointId = 42L;\n+\t\t// notify checkpoint aborted before execution.\n+\t\tsubtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId, operatorChain, () -> true);\n+\t\tsubtaskCheckpointCoordinator.getChannelStateWriter().start(checkpointId, CheckpointOptions.forCheckpointWithDefaultLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDkzMDE1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDoyNTo1MFrOGkKx9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDoyNTo1MFrOGkKx9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3ODU1MQ==", "bodyText": "nit: separate line for every argument", "url": "https://github.com/apache/flink/pull/12664#discussion_r440578551", "createdAt": "2020-06-16T04:25:50Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDkzMjUzOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDoyNzoxMVrOGkKzaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDoyNzoxMVrOGkKzaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3ODkyMQ==", "bodyText": "it seems a bit inconsistent that only some variables with final decoration, better to unify it either use it or not.", "url": "https://github.com/apache/flink/pull/12664#discussion_r440578921", "createdAt": "2020-06-16T04:27:11Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)\n+\t\t\t.build();\n+\n+\t\tfinal TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, 4096);\n+\t\tArrayList<Object> recordOrEvents = new ArrayList<>();\n+\t\tStreamElementSerializer<String> stringStreamElementSerializer = new StreamElementSerializer<>(StringSerializer.INSTANCE);\n+\t\tRecordOrEventCollectingResultPartitionWriter<StreamElement> resultPartitionWriter = new RecordOrEventCollectingResultPartitionWriter<>(recordOrEvents, bufferProvider, stringStreamElementSerializer);\n+\t\tmockEnvironment.addOutputs(Collections.singletonList(resultPartitionWriter));\n+\n+\t\tOneInputStreamTask<String, String> task = testHarness.getTask();\n+\t\tfinal OperatorChain<String, OneInputStreamOperator<String, String>> operatorChain = new OperatorChain<>(task, StreamTask.createRecordWriterDelegate(streamConfig, mockEnvironment));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDk1MDA3OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDozOTowMFrOGkK-Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDozOTowMFrOGkK-Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MTY2Mg==", "bodyText": "nit: only 1 buffer is enough for this case. Integer.MAX_VALUE might bring some memory concerns if we change the implementation of TestPooledBufferProvider future. E.g. if we allocate the buffer early during constructor based on the size.", "url": "https://github.com/apache/flink/pull/12664#discussion_r440581662", "createdAt": "2020-06-16T04:39:00Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)\n+\t\t\t.build();\n+\n+\t\tfinal TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, 4096);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NDk1NDY5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDo0MTo1MVrOGkLA3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDo0MTo1MVrOGkLA3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MjM2Nw==", "bodyText": "testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase -> testBroadcastCancelCheckpointMarkerOnAbortingFromCoordinator?", "url": "https://github.com/apache/flink/pull/12664#discussion_r440582367", "createdAt": "2020-06-16T04:41:51Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTA0OTIwOnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNTozODo0OVrOGkL7NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNTozODo0OVrOGkL7NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU5NzMwMQ==", "bodyText": "We should make sure the internal task thread inside StreamTaskTestHarness exit at last to avoid remaining thread after test finishes?", "url": "https://github.com/apache/flink/pull/12664#discussion_r440597301", "createdAt": "2020-06-16T05:38:49Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorTest.java", "diffHunk": "@@ -218,6 +230,67 @@ public void testNotifyCheckpointAbortedBeforeAsyncPhase() throws Exception {\n \t\tassertEquals(0, subtaskCheckpointCoordinator.getAsyncCheckpointRunnableSize());\n \t}\n \n+\t@Test\n+\tpublic void testDownstreamReceiveCancelCheckpointMarkerOnUpstreamAbortedInSyncPhase() throws Exception {\n+\t\tfinal OneInputStreamTaskTestHarness<String, String> testHarness =\n+\t\t\tnew OneInputStreamTaskTestHarness<>(\n+\t\t\t\tOneInputStreamTask::new,\n+\t\t\t\t1, 1,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO,\n+\t\t\t\tBasicTypeInfo.STRING_TYPE_INFO);\n+\n+\t\ttestHarness.setupOutputForSingletonOperatorChain();\n+\t\tStreamConfig streamConfig = testHarness.getStreamConfig();\n+\t\tstreamConfig.setStreamOperator(new MapOperator());\n+\n+\t\ttestHarness.invoke();\n+\t\ttestHarness.waitForTaskRunning();\n+\n+\t\tTestTaskStateManager stateManager = new TestTaskStateManager();\n+\t\tMockEnvironment mockEnvironment = MockEnvironment.builder().setTaskStateManager(stateManager).build();\n+\t\tSubtaskCheckpointCoordinatorImpl subtaskCheckpointCoordinator = (SubtaskCheckpointCoordinatorImpl) new MockSubtaskCheckpointCoordinatorBuilder()\n+\t\t\t.setEnvironment(mockEnvironment)\n+\t\t\t.setUnalignedCheckpointEnabled(true)\n+\t\t\t.build();\n+\n+\t\tfinal TestPooledBufferProvider bufferProvider = new TestPooledBufferProvider(Integer.MAX_VALUE, 4096);\n+\t\tArrayList<Object> recordOrEvents = new ArrayList<>();\n+\t\tStreamElementSerializer<String> stringStreamElementSerializer = new StreamElementSerializer<>(StringSerializer.INSTANCE);\n+\t\tRecordOrEventCollectingResultPartitionWriter<StreamElement> resultPartitionWriter = new RecordOrEventCollectingResultPartitionWriter<>(recordOrEvents, bufferProvider, stringStreamElementSerializer);\n+\t\tmockEnvironment.addOutputs(Collections.singletonList(resultPartitionWriter));\n+\n+\t\tOneInputStreamTask<String, String> task = testHarness.getTask();\n+\t\tfinal OperatorChain<String, OneInputStreamOperator<String, String>> operatorChain = new OperatorChain<>(task, StreamTask.createRecordWriterDelegate(streamConfig, mockEnvironment));\n+\t\tlong checkpointId = 42L;\n+\t\t// notify checkpoint aborted before execution.\n+\t\tsubtaskCheckpointCoordinator.notifyCheckpointAborted(checkpointId, operatorChain, () -> true);\n+\t\tsubtaskCheckpointCoordinator.getChannelStateWriter().start(checkpointId, CheckpointOptions.forCheckpointWithDefaultLocation());\n+\t\tsubtaskCheckpointCoordinator.checkpointState(\n+\t\t\tnew CheckpointMetaData(checkpointId, System.currentTimeMillis()),\n+\t\t\tCheckpointOptions.forCheckpointWithDefaultLocation(),\n+\t\t\tnew CheckpointMetrics(),\n+\t\t\toperatorChain,\n+\t\t\t() -> true);\n+\n+\t\tassertEquals(1, recordOrEvents.size());\n+\t\tObject recordOrEvent = recordOrEvents.get(0);\n+\t\t// ensure CancelCheckpointMarker is broadcast downstream.\n+\t\tassertTrue(recordOrEvent instanceof CancelCheckpointMarker);\n+\t\tassertEquals(checkpointId, ((CancelCheckpointMarker) recordOrEvent).getCheckpointId());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3513fe0a856a0c678c9eea0cca246118b1ddc7bc"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4297, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}