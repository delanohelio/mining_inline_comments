{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzA4MjAy", "number": 14279, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxNjo1M1rOE_K5HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxNjo1M1rOE_K5HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0Njc0MjA1OnYy", "diffSide": "RIGHT", "path": "flink-tests/src/test/java/org/apache/flink/api/connector/source/lib/NumberSequenceSourceITCase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxNjo1M1rOH8ukqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDozNTo0N1rOH8vb6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzOTY1Ng==", "bodyText": "Sleeping here for a bit longer (50 in my setup) makes the 2nd issue (missing hasNext) fail more likely.", "url": "https://github.com/apache/flink/pull/14279#discussion_r533439656", "createdAt": "2020-12-01T14:16:53Z", "author": {"login": "rkhachatryan"}, "path": "flink-tests/src/test/java/org/apache/flink/api/connector/source/lib/NumberSequenceSourceITCase.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.common.restartstrategy.RestartStrategies;\n+import org.apache.flink.streaming.api.CheckpointingMode;\n+import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.util.StreamCollector;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.LongStream;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+/**\n+ * Tests {@link NumberSequenceSource}.\n+ */\n+public class NumberSequenceSourceITCase {\n+\t@Rule\n+\tpublic StreamCollector collector = new StreamCollector();\n+\n+\t@Test\n+\tpublic void testCheckpointingWithDelayedAssignment() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tenv.setParallelism(1);\n+\t\tenv.setRestartStrategy(new RestartStrategies.NoRestartStrategyConfiguration());\n+\t\tenv.enableCheckpointing(50, CheckpointingMode.EXACTLY_ONCE);\n+\t\tfinal SingleOutputStreamOperator<Long> stream = env\n+\t\t\t.fromSequence(0, 100)\n+\t\t\t.map(x -> {\n+\t\t\t\tThread.sleep(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05490783d40bea9c1a38f1af4c731f23bb5160c1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MDM2Mg==", "bodyText": "Yes, that's what I also thought. However, I also didn't want to make the test too long and was hoping that the sheer amount of AZP executions + VM hiccups actually provide enough coverage.", "url": "https://github.com/apache/flink/pull/14279#discussion_r533450362", "createdAt": "2020-12-01T14:31:11Z", "author": {"login": "AHeise"}, "path": "flink-tests/src/test/java/org/apache/flink/api/connector/source/lib/NumberSequenceSourceITCase.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.common.restartstrategy.RestartStrategies;\n+import org.apache.flink.streaming.api.CheckpointingMode;\n+import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.util.StreamCollector;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.LongStream;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+/**\n+ * Tests {@link NumberSequenceSource}.\n+ */\n+public class NumberSequenceSourceITCase {\n+\t@Rule\n+\tpublic StreamCollector collector = new StreamCollector();\n+\n+\t@Test\n+\tpublic void testCheckpointingWithDelayedAssignment() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tenv.setParallelism(1);\n+\t\tenv.setRestartStrategy(new RestartStrategies.NoRestartStrategyConfiguration());\n+\t\tenv.enableCheckpointing(50, CheckpointingMode.EXACTLY_ONCE);\n+\t\tfinal SingleOutputStreamOperator<Long> stream = env\n+\t\t\t.fromSequence(0, 100)\n+\t\t\t.map(x -> {\n+\t\t\t\tThread.sleep(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzOTY1Ng=="}, "originalCommit": {"oid": "05490783d40bea9c1a38f1af4c731f23bb5160c1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ1MzgwMg==", "bodyText": "Ah, I just noticed that it's much more likely if it's in sync with checkpointing time - so I decreased both to 10 now.", "url": "https://github.com/apache/flink/pull/14279#discussion_r533453802", "createdAt": "2020-12-01T14:35:47Z", "author": {"login": "AHeise"}, "path": "flink-tests/src/test/java/org/apache/flink/api/connector/source/lib/NumberSequenceSourceITCase.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.api.connector.source.lib;\n+\n+import org.apache.flink.api.common.restartstrategy.RestartStrategies;\n+import org.apache.flink.streaming.api.CheckpointingMode;\n+import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+import org.apache.flink.streaming.util.StreamCollector;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.LongStream;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+\n+/**\n+ * Tests {@link NumberSequenceSource}.\n+ */\n+public class NumberSequenceSourceITCase {\n+\t@Rule\n+\tpublic StreamCollector collector = new StreamCollector();\n+\n+\t@Test\n+\tpublic void testCheckpointingWithDelayedAssignment() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tenv.setParallelism(1);\n+\t\tenv.setRestartStrategy(new RestartStrategies.NoRestartStrategyConfiguration());\n+\t\tenv.enableCheckpointing(50, CheckpointingMode.EXACTLY_ONCE);\n+\t\tfinal SingleOutputStreamOperator<Long> stream = env\n+\t\t\t.fromSequence(0, 100)\n+\t\t\t.map(x -> {\n+\t\t\t\tThread.sleep(10);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzOTY1Ng=="}, "originalCommit": {"oid": "05490783d40bea9c1a38f1af4c731f23bb5160c1"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4677, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}