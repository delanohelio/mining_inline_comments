{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxODM1MTYx", "number": 13045, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNToxMToxNVrOEUeE4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToxNDozMVrOEUh4VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5ODk5NzQ2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNToxMToxNVrOG6sWjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNTozMTowMVrOG6-OEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5NzI2MA==", "bodyText": "maybe we can reuse the first in onTooEarly function", "url": "https://github.com/apache/flink/pull/13045#discussion_r464197260", "createdAt": "2020-08-03T05:11:15Z", "author": {"login": "klion26"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -136,6 +136,11 @@\n \t\t\t\t.map(unused -> queuedRequests.pollFirst());\n \t\t}\n \n+\t\tCheckpointTriggerRequest first = queuedRequests.first();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzMjk1Mg==", "bodyText": "thanks, @klion26 , I will reuse it.", "url": "https://github.com/apache/flink/pull/13045#discussion_r464232952", "createdAt": "2020-08-03T07:13:07Z", "author": {"login": "DG-Wangtao"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -136,6 +136,11 @@\n \t\t\t\t.map(unused -> queuedRequests.pollFirst());\n \t\t}\n \n+\t\tCheckpointTriggerRequest first = queuedRequests.first();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5NzI2MA=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ5MDAwMw==", "bodyText": "Hi, @klion26  @rkhachatryan  I remove onTooEarly function and put all statements in chooseRequestToExecute.", "url": "https://github.com/apache/flink/pull/13045#discussion_r464490003", "createdAt": "2020-08-03T15:31:01Z", "author": {"login": "DG-Wangtao"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -136,6 +136,11 @@\n \t\t\t\t.map(unused -> queuedRequests.pollFirst());\n \t\t}\n \n+\t\tCheckpointTriggerRequest first = queuedRequests.first();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE5NzI2MA=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTAyMzEyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDeciderTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNToyODo0N1rOG6slUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNToxMzowM1rOG69hUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw==", "bodyText": "after this change, do we need to add a test to guarantee \"savepoint and checkpoint would not execute concurrently under unaligned checkpoint mode\"", "url": "https://github.com/apache/flink/pull/13045#discussion_r464201043", "createdAt": "2020-08-03T05:28:47Z", "author": {"login": "klion26"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDeciderTest.java", "diffHunk": "@@ -119,13 +119,13 @@ public void testQueueSizeLimitPriority() {\n \tpublic void testSavepointTiming() {\n \t\ttestTiming(regularSavepoint(), TriggerExpectation.IMMEDIATELY);\n \t\ttestTiming(periodicSavepoint(), TriggerExpectation.IMMEDIATELY);\n-\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.AFTER_PAUSE);\n+\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.IMMEDIATELY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI0MDM4NA==", "bodyText": "Yes, @klion26 , maybe we need this.\nThere are two functions called  testUserSubmittedPrioritized and testSavepointPrioritized in CheckpointRequestDeciderTest for testing the ordering of requests', forced savepoint and checkpoints, and I will write two other test functions for testing the order of unforced savepoints'  and checkpoints' requests , using testRequestsOrdering too.\nWhat do you think about this, @klion26", "url": "https://github.com/apache/flink/pull/13045#discussion_r464240384", "createdAt": "2020-08-03T07:31:14Z", "author": {"login": "DG-Wangtao"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDeciderTest.java", "diffHunk": "@@ -119,13 +119,13 @@ public void testQueueSizeLimitPriority() {\n \tpublic void testSavepointTiming() {\n \t\ttestTiming(regularSavepoint(), TriggerExpectation.IMMEDIATELY);\n \t\ttestTiming(periodicSavepoint(), TriggerExpectation.IMMEDIATELY);\n-\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.AFTER_PAUSE);\n+\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.IMMEDIATELY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMwNDk3NQ==", "bodyText": "I think maxPendingCheckpoints limit (what @klion26 proposed) and order are different things to check.\nFor the 1st one, I think we can reuse testEnqueueOnTooManyPending by calling nonForcedSavepoint instead of  regularCheckpoint.", "url": "https://github.com/apache/flink/pull/13045#discussion_r464304975", "createdAt": "2020-08-03T09:39:16Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDeciderTest.java", "diffHunk": "@@ -119,13 +119,13 @@ public void testQueueSizeLimitPriority() {\n \tpublic void testSavepointTiming() {\n \t\ttestTiming(regularSavepoint(), TriggerExpectation.IMMEDIATELY);\n \t\ttestTiming(periodicSavepoint(), TriggerExpectation.IMMEDIATELY);\n-\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.AFTER_PAUSE);\n+\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.IMMEDIATELY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0OTIwOQ==", "bodyText": "thanks, I will add a test function reusing testEnqueueOnTooManyPending as you say.", "url": "https://github.com/apache/flink/pull/13045#discussion_r464349209", "createdAt": "2020-08-03T11:15:59Z", "author": {"login": "DG-Wangtao"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDeciderTest.java", "diffHunk": "@@ -119,13 +119,13 @@ public void testQueueSizeLimitPriority() {\n \tpublic void testSavepointTiming() {\n \t\ttestTiming(regularSavepoint(), TriggerExpectation.IMMEDIATELY);\n \t\ttestTiming(periodicSavepoint(), TriggerExpectation.IMMEDIATELY);\n-\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.AFTER_PAUSE);\n+\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.IMMEDIATELY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1MTEyNA==", "bodyText": "and I want also add two other test functions for testing order, too,  what do you think about this, will they become redundant?", "url": "https://github.com/apache/flink/pull/13045#discussion_r464351124", "createdAt": "2020-08-03T11:20:34Z", "author": {"login": "DG-Wangtao"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDeciderTest.java", "diffHunk": "@@ -119,13 +119,13 @@ public void testQueueSizeLimitPriority() {\n \tpublic void testSavepointTiming() {\n \t\ttestTiming(regularSavepoint(), TriggerExpectation.IMMEDIATELY);\n \t\ttestTiming(periodicSavepoint(), TriggerExpectation.IMMEDIATELY);\n-\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.AFTER_PAUSE);\n+\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.IMMEDIATELY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ3ODU0NA==", "bodyText": "Hi, @klion26  @rkhachatryan , I add three test functions:\n\ntestNonForcedEnqueueOnTooManyPending: testing for nonforced savepoint on too many pending\ntestNonForcedUserSubmittedPrioritized: testing for order of nonforced savpoint and nonForcedPeriodicSavepoint\ntestNonForcedSavepointPrioritized: testing for order of nonForcedSavepoint and regularCheckpoint", "url": "https://github.com/apache/flink/pull/13045#discussion_r464478544", "createdAt": "2020-08-03T15:13:03Z", "author": {"login": "DG-Wangtao"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDeciderTest.java", "diffHunk": "@@ -119,13 +119,13 @@ public void testQueueSizeLimitPriority() {\n \tpublic void testSavepointTiming() {\n \t\ttestTiming(regularSavepoint(), TriggerExpectation.IMMEDIATELY);\n \t\ttestTiming(periodicSavepoint(), TriggerExpectation.IMMEDIATELY);\n-\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.AFTER_PAUSE);\n+\t\ttestTiming(nonForcedSavepoint(), TriggerExpectation.IMMEDIATELY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIwMTA0Mw=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTU5NjMwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTowNzoyNlrOG6x4ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDoxODo0NlrOG67YYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Nzg4Mg==", "bodyText": "Can we make the connection between this check and onTooEarly more explicit?\nFor example, by inverting this condition and putting onTooEarly inside.", "url": "https://github.com/apache/flink/pull/13045#discussion_r464287882", "createdAt": "2020-08-03T09:07:26Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -136,6 +136,11 @@\n \t\t\t\t.map(unused -> queuedRequests.pollFirst());\n \t\t}\n \n+\t\tCheckpointTriggerRequest first = queuedRequests.first();\n+\t\tif (first.isForce() || !first.isPeriodic) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMzNzM2NQ==", "bodyText": "Hi, @rkhachatryan, thanks for your proposal. As you say, I will make the connection more explicit by inverting the condition and putting onTooEarly inside.", "url": "https://github.com/apache/flink/pull/13045#discussion_r464337365", "createdAt": "2020-08-03T10:48:07Z", "author": {"login": "DG-Wangtao"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -136,6 +136,11 @@\n \t\t\t\t.map(unused -> queuedRequests.pollFirst());\n \t\t}\n \n+\t\tCheckpointTriggerRequest first = queuedRequests.first();\n+\t\tif (first.isForce() || !first.isPeriodic) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Nzg4Mg=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0MzQ4OQ==", "bodyText": "Hi, @DG-Wangtao, thanks!", "url": "https://github.com/apache/flink/pull/13045#discussion_r464443489", "createdAt": "2020-08-03T14:18:46Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -136,6 +136,11 @@\n \t\t\t\t.map(unused -> queuedRequests.pollFirst());\n \t\t}\n \n+\t\tCheckpointTriggerRequest first = queuedRequests.first();\n+\t\tif (first.isForce() || !first.isPeriodic) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI4Nzg4Mg=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5OTYyMDY4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToxNDozMVrOG6yHFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNDoyNzoxMFrOG67tVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5MTYwNw==", "bodyText": "Can we inline this function now?\nOtherwise, we need to duplicate the check and return logic (or use preconditions).\nCurrently, I think if is missing && !isForce check,\nand in the end, it should return pollFirst.", "url": "https://github.com/apache/flink/pull/13045#discussion_r464291607", "createdAt": "2020-08-03T09:14:31Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -146,15 +151,11 @@\n \n \tprivate Optional<CheckpointTriggerRequest> onTooEarly(long nextTriggerDelayMillis) {\n \t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isForce()) {\n-\t\t\treturn Optional.of(queuedRequests.pollFirst());\n-\t\t} else if (first.isPeriodic) {\n+\t\tif (first.isPeriodic) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM0MzM0Mg==", "bodyText": "Yes, I will remove all if from this function.  The conditions-returnValue map of function chooseRequestToExecute would be like this:\n\n\n\nisForce\nisPeriodic\ntoo eraly\nreturn value of chooseRequestToExecute\n\n\n\n\ntrue\ntrue\ntrue\npollFirst\n\n\ntrue\ntrue\nfalse\npollFirst\n\n\ntrue\nfalse\ntrue\npollFirst\n\n\ntrue\nfalse\nfalse\npollFirst\n\n\nfalse\ntrue\ntrue\nempty,  and call queuedRequests.pollFirst().completeExceptionally\n\n\nfalse\ntrue\nfalse\npollFirst\n\n\nfalse\nfalse\ntrue\npollFirst\n\n\nfalse\nfalse\nfalse\npollFirst", "url": "https://github.com/apache/flink/pull/13045#discussion_r464343342", "createdAt": "2020-08-03T11:01:44Z", "author": {"login": "DG-Wangtao"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -146,15 +151,11 @@\n \n \tprivate Optional<CheckpointTriggerRequest> onTooEarly(long nextTriggerDelayMillis) {\n \t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isForce()) {\n-\t\t\treturn Optional.of(queuedRequests.pollFirst());\n-\t\t} else if (first.isPeriodic) {\n+\t\tif (first.isPeriodic) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5MTYwNw=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0MjE4Mg==", "bodyText": "Thanks, the table explains very clearly what chooseRequestToExecute will return.\n\nI will remove all if from this function.\n\nWDYT about removing the function (onTooEarly) at all? (and moving the two remaining statements into chooseRequestToExecute)", "url": "https://github.com/apache/flink/pull/13045#discussion_r464442182", "createdAt": "2020-08-03T14:16:39Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -146,15 +151,11 @@\n \n \tprivate Optional<CheckpointTriggerRequest> onTooEarly(long nextTriggerDelayMillis) {\n \t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isForce()) {\n-\t\t\treturn Optional.of(queuedRequests.pollFirst());\n-\t\t} else if (first.isPeriodic) {\n+\t\tif (first.isPeriodic) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5MTYwNw=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ0ODg1NA==", "bodyText": "I think it's a good idea.  It will make the logic of chooseRequestToExecute more clearer.", "url": "https://github.com/apache/flink/pull/13045#discussion_r464448854", "createdAt": "2020-08-03T14:27:10Z", "author": {"login": "DG-Wangtao"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointRequestDecider.java", "diffHunk": "@@ -146,15 +151,11 @@\n \n \tprivate Optional<CheckpointTriggerRequest> onTooEarly(long nextTriggerDelayMillis) {\n \t\tCheckpointTriggerRequest first = queuedRequests.first();\n-\t\tif (first.isForce()) {\n-\t\t\treturn Optional.of(queuedRequests.pollFirst());\n-\t\t} else if (first.isPeriodic) {\n+\t\tif (first.isPeriodic) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5MTYwNw=="}, "originalCommit": {"oid": "194431a72cad4b8069f29fdd39539b0544fd9d35"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4900, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}