{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NDE2NDc2", "number": 14218, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0Mzo1MVrOE9NjjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0NzoyN1rOE9NpOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjIwNjg0OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0Mzo1MVrOH5xwJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzoyMjo0MFrOH5zN4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0NjAyMw==", "bodyText": "I was in doubt whether this exception type is appropriate here or whether an Optional should be returned.\nBut at the upper level, it ultimately should be used, and the reason is only known here (so it would be harder to analyze the exception/empty buffers later).", "url": "https://github.com/apache/flink/pull/14218#discussion_r530346023", "createdAt": "2020-11-25T12:43:51Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -535,13 +536,16 @@ public void checkpointStopped(long checkpointId) {\n \t/**\n \t * Returns a list of buffers, checking the first n non-priority buffers, and skipping all events.\n \t */\n-\tprivate List<Buffer> getInflightBuffersUnsafe(long checkpointId) {\n+\tprivate List<Buffer> getInflightBuffersUnsafe(long checkpointId) throws CheckpointException {\n \t\tassert Thread.holdsLock(receivedBuffers);\n \n+\t\tif (checkpointId < lastBarrierId) {\n+\t\t\tthrow new CheckpointException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MDAxOA==", "bodyText": "I think this is exactly the case for which CheckpointException was designed.", "url": "https://github.com/apache/flink/pull/14218#discussion_r530370018", "createdAt": "2020-11-25T13:22:40Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -535,13 +536,16 @@ public void checkpointStopped(long checkpointId) {\n \t/**\n \t * Returns a list of buffers, checking the first n non-priority buffers, and skipping all events.\n \t */\n-\tprivate List<Buffer> getInflightBuffersUnsafe(long checkpointId) {\n+\tprivate List<Buffer> getInflightBuffersUnsafe(long checkpointId) throws CheckpointException {\n \t\tassert Thread.holdsLock(receivedBuffers);\n \n+\t\tif (checkpointId < lastBarrierId) {\n+\t\t\tthrow new CheckpointException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0NjAyMw=="}, "originalCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjIxMjI5OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0NToxNlrOH5xzjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzoyMzoyOFrOH5zPsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0Njg5NQ==", "bodyText": "Please double-check this @AHeise  :)", "url": "https://github.com/apache/flink/pull/14218#discussion_r530346895", "createdAt": "2020-11-25T12:45:16Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "diffHunk": "@@ -158,14 +163,16 @@ public void processBarrierAnnouncement(\n \t@Override\n \tpublic void processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws IOException {\n \t\tfinal long cancelledId = cancelBarrier.getCheckpointId();\n-\t\tif (currentCheckpointId > cancelledId || (currentCheckpointId == cancelledId && numBarriersReceived == 0)) {\n-\t\t\treturn;\n+\t\tif (cancelledId >= currentCheckpointId && (cancelledId > currentCheckpointId || numBarriersReceived > 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM1Njk5Nw==", "bodyText": "It's correct but it might be easier to do\ncancelledId > currentCheckpointId || (currentCheckpointId == cancelledId && numBarriersReceived > 0)\n\nSo either it's a future checkpoint, or it's the current checkpoint and not yet canceled.", "url": "https://github.com/apache/flink/pull/14218#discussion_r530356997", "createdAt": "2020-11-25T13:01:58Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "diffHunk": "@@ -158,14 +163,16 @@ public void processBarrierAnnouncement(\n \t@Override\n \tpublic void processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws IOException {\n \t\tfinal long cancelledId = cancelBarrier.getCheckpointId();\n-\t\tif (currentCheckpointId > cancelledId || (currentCheckpointId == cancelledId && numBarriersReceived == 0)) {\n-\t\t\treturn;\n+\t\tif (cancelledId >= currentCheckpointId && (cancelledId > currentCheckpointId || numBarriersReceived > 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0Njg5NQ=="}, "originalCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM3MDQ4MQ==", "bodyText": "I like it!", "url": "https://github.com/apache/flink/pull/14218#discussion_r530370481", "createdAt": "2020-11-25T13:23:28Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "diffHunk": "@@ -158,14 +163,16 @@ public void processBarrierAnnouncement(\n \t@Override\n \tpublic void processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws IOException {\n \t\tfinal long cancelledId = cancelBarrier.getCheckpointId();\n-\t\tif (currentCheckpointId > cancelledId || (currentCheckpointId == cancelledId && numBarriersReceived == 0)) {\n-\t\t\treturn;\n+\t\tif (cancelledId >= currentCheckpointId && (cancelledId > currentCheckpointId || numBarriersReceived > 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0Njg5NQ=="}, "originalCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjIyMTM3OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0NzoyN1rOH5x48w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjo0NzoyN1rOH5x48w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM0ODI3NQ==", "bodyText": "This is not necessary currently.\nBut because I extracted this method the assignment became more error-prone, so I added this check.", "url": "https://github.com/apache/flink/pull/14218#discussion_r530348275", "createdAt": "2020-11-25T12:47:27Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "diffHunk": "@@ -158,14 +163,16 @@ public void processBarrierAnnouncement(\n \t@Override\n \tpublic void processCancellationBarrier(CancelCheckpointMarker cancelBarrier) throws IOException {\n \t\tfinal long cancelledId = cancelBarrier.getCheckpointId();\n-\t\tif (currentCheckpointId > cancelledId || (currentCheckpointId == cancelledId && numBarriersReceived == 0)) {\n-\t\t\treturn;\n+\t\tif (cancelledId >= currentCheckpointId && (cancelledId > currentCheckpointId || numBarriersReceived > 0)) {\n+\t\t\tabortInternal(cancelledId, new CheckpointException(CheckpointFailureReason.CHECKPOINT_DECLINED_ON_CANCELLATION_BARRIER));\n \t\t}\n+\t}\n+\n+\tprivate void abortInternal(long cancelledId, CheckpointException exception) throws IOException {\n \t\t// by setting the currentCheckpointId to this checkpoint while keeping the numBarriers\n \t\t// at zero means that no checkpoint barrier can start a new alignment\n-\t\tcurrentCheckpointId = cancelledId;\n+\t\tcurrentCheckpointId = Math.max(cancelledId, currentCheckpointId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1109ad24aebd4a283c3ee77d798eff81bfab609f"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4760, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}