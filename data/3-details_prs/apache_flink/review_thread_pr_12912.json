{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMDY2MTE5", "number": 12912, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0NjozOVrOEPkEbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0NjozOVrOEPkEbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzU1MDU1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0NjozOVrOGzV4aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTowNDozMVrOG3mrNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTA2Nw==", "bodyText": "Before the change, if channel isReleased then we also set isWaitingForFloatingBuffers to false below.\nI'm not sure that leaving it as true would be correct.\nWDYT?", "url": "https://github.com/apache/flink/pull/12912#discussion_r456489067", "createdAt": "2020-07-17T14:46:39Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -356,6 +356,13 @@ public Buffer getNextReceivedBuffer() {\n \t@Override\n \tpublic NotificationResult notifyBufferAvailable(Buffer buffer) {\n \t\tNotificationResult notificationResult = NotificationResult.BUFFER_NOT_USED;\n+\t\t// Two remote channels might call this method mutually by task thread and canceller thread concurrently.\n+\t\t// To avoid deadlock issue we can check the released state to return immediately before synchronizing.\n+\t\t// See FLINK-18595 for details.\n+\t\tif (isReleased.get()) {\n+\t\t\treturn notificationResult;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356e5646f79c864a283b0a1f58fdd8339932fd68"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxMzc3Mg==", "bodyText": "Before the change, if the channel was already released while calling notifyBufferAvailable, it will exit directly by the following:\nif (isReleased.get() || bufferQueue.getAvailableBufferSize() >= numRequiredBuffers) {\n\tisWaitingForFloatingBuffers = false;\n\treturn notificationResult;\n}\n\nSo we will not leave it as true finally.\nAnother option is to explicitly reset this state as false in #releaseAllResources, but it would also bring some additional check while checking the isWaitingForFloatingBuffers state to avoid misleading exception.  Even we also need to remove listeners from LocalBufferPool to keep consistent state. Otherwise the channel is not waiting for floating buffers, but it is still keeping as listener inside LocalBufferPool to bring conflict. So in the past we took the way of delay handling this state together while notifyBufferAvailable.", "url": "https://github.com/apache/flink/pull/12912#discussion_r457013772", "createdAt": "2020-07-20T03:26:58Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -356,6 +356,13 @@ public Buffer getNextReceivedBuffer() {\n \t@Override\n \tpublic NotificationResult notifyBufferAvailable(Buffer buffer) {\n \t\tNotificationResult notificationResult = NotificationResult.BUFFER_NOT_USED;\n+\t\t// Two remote channels might call this method mutually by task thread and canceller thread concurrently.\n+\t\t// To avoid deadlock issue we can check the released state to return immediately before synchronizing.\n+\t\t// See FLINK-18595 for details.\n+\t\tif (isReleased.get()) {\n+\t\t\treturn notificationResult;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTA2Nw=="}, "originalCommit": {"oid": "356e5646f79c864a283b0a1f58fdd8339932fd68"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk1ODUxNg==", "bodyText": "I took a more thorough look at how isWaitingForFloatingBuffers is used and found that there is no change in behavior:\n\nif the channel is released before onSenderBacklog() then notifyBufferAvailable() exits and ignores isWaitingForFloatingBuffers\nif channel is released in the middle of onSenderBacklog() then notifyBufferAvailable() wouldn't be able to change  isWaitingForFloatingBuffers because of the lock - which is equivalent to this PR behavior\nif channel is not released then behavior is the same", "url": "https://github.com/apache/flink/pull/12912#discussion_r460958516", "createdAt": "2020-07-27T15:04:31Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -356,6 +356,13 @@ public Buffer getNextReceivedBuffer() {\n \t@Override\n \tpublic NotificationResult notifyBufferAvailable(Buffer buffer) {\n \t\tNotificationResult notificationResult = NotificationResult.BUFFER_NOT_USED;\n+\t\t// Two remote channels might call this method mutually by task thread and canceller thread concurrently.\n+\t\t// To avoid deadlock issue we can check the released state to return immediately before synchronizing.\n+\t\t// See FLINK-18595 for details.\n+\t\tif (isReleased.get()) {\n+\t\t\treturn notificationResult;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTA2Nw=="}, "originalCommit": {"oid": "356e5646f79c864a283b0a1f58fdd8339932fd68"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4947, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}