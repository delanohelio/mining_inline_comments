{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDg2MDEw", "number": 11855, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoxMzo1OFrOD0n9fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOToxODozOFrOD0p1jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTA3MjYzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoxMzo1OFrOGJpbsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozNToxOVrOGJqYww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2OTIwMQ==", "bodyText": "Consider make ResultID Serializable?", "url": "https://github.com/apache/flink/pull/11855#discussion_r412769201", "createdAt": "2020-04-22T08:13:58Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023e49457714f991f4213803372d5e3e2ba844f4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4NDgzNQ==", "bodyText": "Sounds good.", "url": "https://github.com/apache/flink/pull/11855#discussion_r412784835", "createdAt": "2020-04-22T08:35:19Z", "author": {"login": "KarmaGYZ"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2OTIwMQ=="}, "originalCommit": {"oid": "023e49457714f991f4213803372d5e3e2ba844f4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTA3NzYzOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoxNTowOFrOGJpeww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoxNTowOFrOGJpeww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2OTk4Nw==", "bodyText": "I think it's better to let intermediateDataSetID implement writeTo() and fromByteBuf (...) and just invokes them in IntermediateResultPartitionID.", "url": "https://github.com/apache/flink/pull/11855#discussion_r412769987", "createdAt": "2020-04-22T08:15:08Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());\n \t}\n \n-\tpublic IntermediateResultPartitionID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\t/**\n+\t * Creates an new intermediate result partition ID with {@link IntermediateDataSetID} and the partitionNum.\n+\t */\n+\tpublic IntermediateResultPartitionID(IntermediateDataSetID intermediateDataSetID, int partitionNum) {\n+\t\tthis.intermediateDataSetID = intermediateDataSetID;\n+\t\tthis.partitionNum = partitionNum;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\tbuf.writeLong(intermediateDataSetID.getLowerPart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023e49457714f991f4213803372d5e3e2ba844f4"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTA3OTY4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoxNTozN1rOGJpgBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOToxNzoxNFrOGJsPTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MDMwOA==", "bodyText": "consider implement IntermediateResultPartitionID#equals(...)", "url": "https://github.com/apache/flink/pull/11855#discussion_r412770308", "createdAt": "2020-04-22T08:15:37Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());\n \t}\n \n-\tpublic IntermediateResultPartitionID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\t/**\n+\t * Creates an new intermediate result partition ID with {@link IntermediateDataSetID} and the partitionNum.\n+\t */\n+\tpublic IntermediateResultPartitionID(IntermediateDataSetID intermediateDataSetID, int partitionNum) {\n+\t\tthis.intermediateDataSetID = intermediateDataSetID;\n+\t\tthis.partitionNum = partitionNum;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\tbuf.writeLong(intermediateDataSetID.getLowerPart());\n+\t\tbuf.writeLong(intermediateDataSetID.getUpperPart());\n+\t\tbuf.writeInt(partitionNum);\n \t}\n \n \tpublic static IntermediateResultPartitionID fromByteBuf(ByteBuf buf) {\n-\t\tlong lower = buf.readLong();\n-\t\tlong upper = buf.readLong();\n-\t\treturn new IntermediateResultPartitionID(lower, upper);\n+\t\tfinal long lower = buf.readLong();\n+\t\tfinal long upper = buf.readLong();\n+\t\tfinal int partitionNum = buf.readInt();\n+\t\tfinal IntermediateDataSetID intermediateDataSetID = new IntermediateDataSetID(new AbstractID(lower, upper));\n+\t\treturn new IntermediateResultPartitionID(intermediateDataSetID, partitionNum);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (obj == this) {\n+\t\t\treturn true;\n+\t\t} else if (obj != null && obj.getClass() == getClass()) {\n+\t\t\tIntermediateResultPartitionID that = (IntermediateResultPartitionID) obj;\n+\t\t\treturn that.intermediateDataSetID.getLowerPart() == this.intermediateDataSetID.getLowerPart()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023e49457714f991f4213803372d5e3e2ba844f4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4OTg3OA==", "bodyText": "I think you mean intermediateDataSetID#equals.", "url": "https://github.com/apache/flink/pull/11855#discussion_r412789878", "createdAt": "2020-04-22T08:42:24Z", "author": {"login": "KarmaGYZ"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());\n \t}\n \n-\tpublic IntermediateResultPartitionID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\t/**\n+\t * Creates an new intermediate result partition ID with {@link IntermediateDataSetID} and the partitionNum.\n+\t */\n+\tpublic IntermediateResultPartitionID(IntermediateDataSetID intermediateDataSetID, int partitionNum) {\n+\t\tthis.intermediateDataSetID = intermediateDataSetID;\n+\t\tthis.partitionNum = partitionNum;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\tbuf.writeLong(intermediateDataSetID.getLowerPart());\n+\t\tbuf.writeLong(intermediateDataSetID.getUpperPart());\n+\t\tbuf.writeInt(partitionNum);\n \t}\n \n \tpublic static IntermediateResultPartitionID fromByteBuf(ByteBuf buf) {\n-\t\tlong lower = buf.readLong();\n-\t\tlong upper = buf.readLong();\n-\t\treturn new IntermediateResultPartitionID(lower, upper);\n+\t\tfinal long lower = buf.readLong();\n+\t\tfinal long upper = buf.readLong();\n+\t\tfinal int partitionNum = buf.readInt();\n+\t\tfinal IntermediateDataSetID intermediateDataSetID = new IntermediateDataSetID(new AbstractID(lower, upper));\n+\t\treturn new IntermediateResultPartitionID(intermediateDataSetID, partitionNum);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (obj == this) {\n+\t\t\treturn true;\n+\t\t} else if (obj != null && obj.getClass() == getClass()) {\n+\t\t\tIntermediateResultPartitionID that = (IntermediateResultPartitionID) obj;\n+\t\t\treturn that.intermediateDataSetID.getLowerPart() == this.intermediateDataSetID.getLowerPart()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MDMwOA=="}, "originalCommit": {"oid": "023e49457714f991f4213803372d5e3e2ba844f4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxNTE4Mw==", "bodyText": "yes, I mean intermediateDataSetID", "url": "https://github.com/apache/flink/pull/11855#discussion_r412815183", "createdAt": "2020-04-22T09:17:14Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());\n \t}\n \n-\tpublic IntermediateResultPartitionID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\t/**\n+\t * Creates an new intermediate result partition ID with {@link IntermediateDataSetID} and the partitionNum.\n+\t */\n+\tpublic IntermediateResultPartitionID(IntermediateDataSetID intermediateDataSetID, int partitionNum) {\n+\t\tthis.intermediateDataSetID = intermediateDataSetID;\n+\t\tthis.partitionNum = partitionNum;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\tbuf.writeLong(intermediateDataSetID.getLowerPart());\n+\t\tbuf.writeLong(intermediateDataSetID.getUpperPart());\n+\t\tbuf.writeInt(partitionNum);\n \t}\n \n \tpublic static IntermediateResultPartitionID fromByteBuf(ByteBuf buf) {\n-\t\tlong lower = buf.readLong();\n-\t\tlong upper = buf.readLong();\n-\t\treturn new IntermediateResultPartitionID(lower, upper);\n+\t\tfinal long lower = buf.readLong();\n+\t\tfinal long upper = buf.readLong();\n+\t\tfinal int partitionNum = buf.readInt();\n+\t\tfinal IntermediateDataSetID intermediateDataSetID = new IntermediateDataSetID(new AbstractID(lower, upper));\n+\t\treturn new IntermediateResultPartitionID(intermediateDataSetID, partitionNum);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (obj == this) {\n+\t\t\treturn true;\n+\t\t} else if (obj != null && obj.getClass() == getClass()) {\n+\t\t\tIntermediateResultPartitionID that = (IntermediateResultPartitionID) obj;\n+\t\t\treturn that.intermediateDataSetID.getLowerPart() == this.intermediateDataSetID.getLowerPart()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MDMwOA=="}, "originalCommit": {"oid": "023e49457714f991f4213803372d5e3e2ba844f4"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTA4MTI1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoxNTo1NVrOGJpg8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo0MjozMlrOGJqs1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MDU0Ng==", "bodyText": "consider implement IntermediateResultPartitionID#hashCode(...)", "url": "https://github.com/apache/flink/pull/11855#discussion_r412770546", "createdAt": "2020-04-22T08:15:55Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());\n \t}\n \n-\tpublic IntermediateResultPartitionID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\t/**\n+\t * Creates an new intermediate result partition ID with {@link IntermediateDataSetID} and the partitionNum.\n+\t */\n+\tpublic IntermediateResultPartitionID(IntermediateDataSetID intermediateDataSetID, int partitionNum) {\n+\t\tthis.intermediateDataSetID = intermediateDataSetID;\n+\t\tthis.partitionNum = partitionNum;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\tbuf.writeLong(intermediateDataSetID.getLowerPart());\n+\t\tbuf.writeLong(intermediateDataSetID.getUpperPart());\n+\t\tbuf.writeInt(partitionNum);\n \t}\n \n \tpublic static IntermediateResultPartitionID fromByteBuf(ByteBuf buf) {\n-\t\tlong lower = buf.readLong();\n-\t\tlong upper = buf.readLong();\n-\t\treturn new IntermediateResultPartitionID(lower, upper);\n+\t\tfinal long lower = buf.readLong();\n+\t\tfinal long upper = buf.readLong();\n+\t\tfinal int partitionNum = buf.readInt();\n+\t\tfinal IntermediateDataSetID intermediateDataSetID = new IntermediateDataSetID(new AbstractID(lower, upper));\n+\t\treturn new IntermediateResultPartitionID(intermediateDataSetID, partitionNum);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (obj == this) {\n+\t\t\treturn true;\n+\t\t} else if (obj != null && obj.getClass() == getClass()) {\n+\t\t\tIntermediateResultPartitionID that = (IntermediateResultPartitionID) obj;\n+\t\t\treturn that.intermediateDataSetID.getLowerPart() == this.intermediateDataSetID.getLowerPart()\n+\t\t\t\t&& that.intermediateDataSetID.getUpperPart() == this.intermediateDataSetID.getUpperPart()\n+\t\t\t\t&& that.partitionNum == this.partitionNum;\n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn ((int)  this.intermediateDataSetID.getLowerPart()) ^", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023e49457714f991f4213803372d5e3e2ba844f4"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4OTk3Mw==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/11855#discussion_r412789973", "createdAt": "2020-04-22T08:42:32Z", "author": {"login": "KarmaGYZ"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());\n \t}\n \n-\tpublic IntermediateResultPartitionID(long lowerPart, long upperPart) {\n-\t\tsuper(lowerPart, upperPart);\n+\t/**\n+\t * Creates an new intermediate result partition ID with {@link IntermediateDataSetID} and the partitionNum.\n+\t */\n+\tpublic IntermediateResultPartitionID(IntermediateDataSetID intermediateDataSetID, int partitionNum) {\n+\t\tthis.intermediateDataSetID = intermediateDataSetID;\n+\t\tthis.partitionNum = partitionNum;\n \t}\n \n \tpublic void writeTo(ByteBuf buf) {\n-\t\tbuf.writeLong(this.lowerPart);\n-\t\tbuf.writeLong(this.upperPart);\n+\t\tbuf.writeLong(intermediateDataSetID.getLowerPart());\n+\t\tbuf.writeLong(intermediateDataSetID.getUpperPart());\n+\t\tbuf.writeInt(partitionNum);\n \t}\n \n \tpublic static IntermediateResultPartitionID fromByteBuf(ByteBuf buf) {\n-\t\tlong lower = buf.readLong();\n-\t\tlong upper = buf.readLong();\n-\t\treturn new IntermediateResultPartitionID(lower, upper);\n+\t\tfinal long lower = buf.readLong();\n+\t\tfinal long upper = buf.readLong();\n+\t\tfinal int partitionNum = buf.readInt();\n+\t\tfinal IntermediateDataSetID intermediateDataSetID = new IntermediateDataSetID(new AbstractID(lower, upper));\n+\t\treturn new IntermediateResultPartitionID(intermediateDataSetID, partitionNum);\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (obj == this) {\n+\t\t\treturn true;\n+\t\t} else if (obj != null && obj.getClass() == getClass()) {\n+\t\t\tIntermediateResultPartitionID that = (IntermediateResultPartitionID) obj;\n+\t\t\treturn that.intermediateDataSetID.getLowerPart() == this.intermediateDataSetID.getLowerPart()\n+\t\t\t\t&& that.intermediateDataSetID.getUpperPart() == this.intermediateDataSetID.getUpperPart()\n+\t\t\t\t&& that.partitionNum == this.partitionNum;\n+\t\t} else {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn ((int)  this.intermediateDataSetID.getLowerPart()) ^", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MDU0Ng=="}, "originalCommit": {"oid": "023e49457714f991f4213803372d5e3e2ba844f4"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTA5MDM4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoxNzo0OFrOGJpmWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODo0NjowM1rOGJq3Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MTkyOA==", "bodyText": "Why is Comparable needed?", "url": "https://github.com/apache/flink/pull/11855#discussion_r412771928", "createdAt": "2020-04-22T08:17:48Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023e49457714f991f4213803372d5e3e2ba844f4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc5MjU4Mg==", "bodyText": "I'll remove this and see if the Travis gives us green light.", "url": "https://github.com/apache/flink/pull/11855#discussion_r412792582", "createdAt": "2020-04-22T08:46:03Z", "author": {"login": "KarmaGYZ"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,76 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements Comparable<IntermediateResultPartitionID>, ResultID, java.io.Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3MTkyOA=="}, "originalCommit": {"oid": "023e49457714f991f4213803372d5e3e2ba844f4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTM3OTk2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOToxODozOVrOGJsTJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOToxODozOVrOGJsTJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgxNjE2Ng==", "bodyText": "IntermediateDataSetID has a param-less ctor I think.", "url": "https://github.com/apache/flink/pull/11855#discussion_r412816166", "createdAt": "2020-04-22T09:18:39Z", "author": {"login": "zhuzhurk"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobgraph/IntermediateResultPartitionID.java", "diffHunk": "@@ -27,29 +28,61 @@\n /**\n  * Id identifying {@link IntermediateResultPartition}.\n  */\n-public class IntermediateResultPartitionID extends AbstractID implements ResultID {\n+public class IntermediateResultPartitionID implements ResultID {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final IntermediateDataSetID intermediateDataSetID;\n+\tprivate final int partitionNum;\n+\n \t/**\n-\t * Creates an new random intermediate result partition ID.\n+\t * Creates an new random intermediate result partition ID for testing.\n \t */\n+\t@VisibleForTesting\n \tpublic IntermediateResultPartitionID() {\n-\t\tsuper();\n+\t\tthis.partitionNum = -1;\n+\t\tthis.intermediateDataSetID = new IntermediateDataSetID(new AbstractID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d093e3078fb4456fd866e6d63dd36b3da1a4f776"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1564, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}