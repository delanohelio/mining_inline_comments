{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDg3NjIw", "number": 11868, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozNDoyNlrOEGrNmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozNjo1MVrOEGrREw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDM0OTA0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/CheckpointConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozNDoyNlrOGlnf1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyOToxMlrOGm8rBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NzYyMg==", "bodyText": "Do we really need this method? Isn't enableUnalignedCheckpoints(false); enough? enableUnalignedCheckpoints() also is kind of redundant but probably more common.\nFor another boolean property we have just a single setter setPreferCheckpointForRecovery", "url": "https://github.com/apache/flink/pull/11868#discussion_r442097622", "createdAt": "2020-06-18T09:34:26Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/CheckpointConfig.java", "diffHunk": "@@ -414,9 +417,19 @@ public void enableUnalignedCheckpoints() {\n \t}\n \n \t/**\n-\t * Returns whether checkpoints should be persisted externally.\n+\t * Disables unaligned checkpoints.\n \t *\n-\t * @return <code>true</code> if checkpoints should be externalized.\n+\t * @see #enableUnalignedCheckpoints()\n+\t */\n+\t@PublicEvolving\n+\tpublic void disableUnalignedCheckpoints() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2MDA0NQ==", "bodyText": "No we don't need it and I have no hard feelings for removing it.\ndisableUnalignedCheckpoints would be relevant when UC becomes the default (see also StreamExecutionEnvironment#disableOperatorChaining).", "url": "https://github.com/apache/flink/pull/11868#discussion_r442860045", "createdAt": "2020-06-19T14:04:44Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/CheckpointConfig.java", "diffHunk": "@@ -414,9 +417,19 @@ public void enableUnalignedCheckpoints() {\n \t}\n \n \t/**\n-\t * Returns whether checkpoints should be persisted externally.\n+\t * Disables unaligned checkpoints.\n \t *\n-\t * @return <code>true</code> if checkpoints should be externalized.\n+\t * @see #enableUnalignedCheckpoints()\n+\t */\n+\t@PublicEvolving\n+\tpublic void disableUnalignedCheckpoints() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NzYyMg=="}, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkzODgyOQ==", "bodyText": "would be relevant when UC becomes the default\n\nThat's a point, but maybe more in favour of dropping enableUnalignedCheckpoints ()? What about keeping and using just setUnalignedCheckpoints(boolean) (without the Enable infix)?", "url": "https://github.com/apache/flink/pull/11868#discussion_r442938829", "createdAt": "2020-06-19T16:31:55Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/CheckpointConfig.java", "diffHunk": "@@ -414,9 +417,19 @@ public void enableUnalignedCheckpoints() {\n \t}\n \n \t/**\n-\t * Returns whether checkpoints should be persisted externally.\n+\t * Disables unaligned checkpoints.\n \t *\n-\t * @return <code>true</code> if checkpoints should be externalized.\n+\t * @see #enableUnalignedCheckpoints()\n+\t */\n+\t@PublicEvolving\n+\tpublic void disableUnalignedCheckpoints() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NzYyMg=="}, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3MzQ1NQ==", "bodyText": "Yes, I'd probably go this way. Should we mend that also on 1.11?", "url": "https://github.com/apache/flink/pull/11868#discussion_r443373455", "createdAt": "2020-06-22T07:45:22Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/CheckpointConfig.java", "diffHunk": "@@ -414,9 +417,19 @@ public void enableUnalignedCheckpoints() {\n \t}\n \n \t/**\n-\t * Returns whether checkpoints should be persisted externally.\n+\t * Disables unaligned checkpoints.\n \t *\n-\t * @return <code>true</code> if checkpoints should be externalized.\n+\t * @see #enableUnalignedCheckpoints()\n+\t */\n+\t@PublicEvolving\n+\tpublic void disableUnalignedCheckpoints() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NzYyMg=="}, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MzEyNQ==", "bodyText": "Extracted FLINK-18403, which will be backported (while this PR should only go to master).", "url": "https://github.com/apache/flink/pull/11868#discussion_r443493125", "createdAt": "2020-06-22T11:29:12Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/CheckpointConfig.java", "diffHunk": "@@ -414,9 +417,19 @@ public void enableUnalignedCheckpoints() {\n \t}\n \n \t/**\n-\t * Returns whether checkpoints should be persisted externally.\n+\t * Disables unaligned checkpoints.\n \t *\n-\t * @return <code>true</code> if checkpoints should be externalized.\n+\t * @see #enableUnalignedCheckpoints()\n+\t */\n+\t@PublicEvolving\n+\tpublic void disableUnalignedCheckpoints() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5NzYyMg=="}, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDM1MTI1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozNTowMFrOGlnhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMToyOToxN1rOGm8rGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5Nzk2Mg==", "bodyText": "Isn't this an independent bug fix?", "url": "https://github.com/apache/flink/pull/11868#discussion_r442097962", "createdAt": "2020-06-18T09:35:00Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -500,8 +500,9 @@ private void setVertexConfig(Integer vertexID, StreamConfig config,\n \n \t\tconfig.setStateBackend(streamGraph.getStateBackend());\n \t\tconfig.setCheckpointingEnabled(checkpointCfg.isCheckpointingEnabled());\n-\t\tconfig.setUnalignedCheckpointsEnabled(checkpointCfg.isUnalignedCheckpointsEnabled());\n \t\tconfig.setCheckpointMode(getCheckpointingMode(checkpointCfg));\n+\t\tconfig.setUnalignedCheckpointsEnabled(config.getCheckpointMode() == CheckpointingMode.EXACTLY_ONCE &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2Mjk2MA==", "bodyText": "So far, we have assumed that the user only sets UC when checkpoint mode is exactly once. In this PR, we ignoring checkpoint mode and set it for all.\nThe question is where to address that:\n\nWe could fail on that combination. Then we would need to disable UC for every at least once test. Not my favorite.\nWe change checkpointing mode with a warning. Not my favorite.\nWe disable/ignore UC (current way) with a warning (needs to be added).\nWe could have a value UC if exactly once and make checkpointCfg.isUnalignedCheckpointsEnabled() more intelligent. Would also be plausible.", "url": "https://github.com/apache/flink/pull/11868#discussion_r442862960", "createdAt": "2020-06-19T14:10:16Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -500,8 +500,9 @@ private void setVertexConfig(Integer vertexID, StreamConfig config,\n \n \t\tconfig.setStateBackend(streamGraph.getStateBackend());\n \t\tconfig.setCheckpointingEnabled(checkpointCfg.isCheckpointingEnabled());\n-\t\tconfig.setUnalignedCheckpointsEnabled(checkpointCfg.isUnalignedCheckpointsEnabled());\n \t\tconfig.setCheckpointMode(getCheckpointingMode(checkpointCfg));\n+\t\tconfig.setUnalignedCheckpointsEnabled(config.getCheckpointMode() == CheckpointingMode.EXACTLY_ONCE &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5Nzk2Mg=="}, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzAxNQ==", "bodyText": "I guess I would prefer the most:\n\nWe could fail on that combination. Then we would need to disable UC for every at least once test. Not my favorite.\n\nBut this one is probably also fine:\n\nWe disable/ignore UC (current way) with a warning (needs to be added).\n\nBut either way, I think this should deserve it's own ticket.", "url": "https://github.com/apache/flink/pull/11868#discussion_r442943015", "createdAt": "2020-06-19T16:41:23Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -500,8 +500,9 @@ private void setVertexConfig(Integer vertexID, StreamConfig config,\n \n \t\tconfig.setStateBackend(streamGraph.getStateBackend());\n \t\tconfig.setCheckpointingEnabled(checkpointCfg.isCheckpointingEnabled());\n-\t\tconfig.setUnalignedCheckpointsEnabled(checkpointCfg.isUnalignedCheckpointsEnabled());\n \t\tconfig.setCheckpointMode(getCheckpointingMode(checkpointCfg));\n+\t\tconfig.setUnalignedCheckpointsEnabled(config.getCheckpointMode() == CheckpointingMode.EXACTLY_ONCE &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5Nzk2Mg=="}, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MzE0NQ==", "bodyText": "Extracted FLINK-18403, which will be backported (while this PR should only go to master).", "url": "https://github.com/apache/flink/pull/11868#discussion_r443493145", "createdAt": "2020-06-22T11:29:17Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -500,8 +500,9 @@ private void setVertexConfig(Integer vertexID, StreamConfig config,\n \n \t\tconfig.setStateBackend(streamGraph.getStateBackend());\n \t\tconfig.setCheckpointingEnabled(checkpointCfg.isCheckpointingEnabled());\n-\t\tconfig.setUnalignedCheckpointsEnabled(checkpointCfg.isUnalignedCheckpointsEnabled());\n \t\tconfig.setCheckpointMode(getCheckpointingMode(checkpointCfg));\n+\t\tconfig.setUnalignedCheckpointsEnabled(config.getCheckpointMode() == CheckpointingMode.EXACTLY_ONCE &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5Nzk2Mg=="}, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDM1NTQ0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozNjowOVrOGlnjyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDoxMTozMlrOGmWQMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5ODYzNQ==", "bodyText": "This check seems duplicated exactlyOnce && cfg.isUnalignedCheckpointsEnabled() in two places. Maybe hide exactlyOnce && check inside isUnalignedCheckpointsEnabled?", "url": "https://github.com/apache/flink/pull/11868#discussion_r442098635", "createdAt": "2020-06-18T09:36:09Z", "author": {"login": "pnowojski"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -958,10 +960,10 @@ private void configureCheckpointing() {\n \t\t\t\t.setMinPauseBetweenCheckpoints(cfg.getMinPauseBetweenCheckpoints())\n \t\t\t\t.setMaxConcurrentCheckpoints(cfg.getMaxConcurrentCheckpoints())\n \t\t\t\t.setCheckpointRetentionPolicy(retentionAfterTermination)\n-\t\t\t\t.setExactlyOnce(getCheckpointingMode(cfg) == CheckpointingMode.EXACTLY_ONCE)\n+\t\t\t\t.setExactlyOnce(exactlyOnce)\n \t\t\t\t.setPreferCheckpointForRecovery(cfg.isPreferCheckpointForRecovery())\n \t\t\t\t.setTolerableCheckpointFailureNumber(cfg.getTolerableCheckpointFailureNumber())\n-\t\t\t\t.setUnalignedCheckpointsEnabled(cfg.isUnalignedCheckpointsEnabled())\n+\t\t\t\t.setUnalignedCheckpointsEnabled(exactlyOnce && cfg.isUnalignedCheckpointsEnabled())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg2MzY2NA==", "bodyText": "Also possible way, it's pretty much ignoring UC when at least once is set. See also above for a deeper discussion.", "url": "https://github.com/apache/flink/pull/11868#discussion_r442863664", "createdAt": "2020-06-19T14:11:32Z", "author": {"login": "AHeise"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGenerator.java", "diffHunk": "@@ -958,10 +960,10 @@ private void configureCheckpointing() {\n \t\t\t\t.setMinPauseBetweenCheckpoints(cfg.getMinPauseBetweenCheckpoints())\n \t\t\t\t.setMaxConcurrentCheckpoints(cfg.getMaxConcurrentCheckpoints())\n \t\t\t\t.setCheckpointRetentionPolicy(retentionAfterTermination)\n-\t\t\t\t.setExactlyOnce(getCheckpointingMode(cfg) == CheckpointingMode.EXACTLY_ONCE)\n+\t\t\t\t.setExactlyOnce(exactlyOnce)\n \t\t\t\t.setPreferCheckpointForRecovery(cfg.isPreferCheckpointForRecovery())\n \t\t\t\t.setTolerableCheckpointFailureNumber(cfg.getTolerableCheckpointFailureNumber())\n-\t\t\t\t.setUnalignedCheckpointsEnabled(cfg.isUnalignedCheckpointsEnabled())\n+\t\t\t\t.setUnalignedCheckpointsEnabled(exactlyOnce && cfg.isUnalignedCheckpointsEnabled())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5ODYzNQ=="}, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDM1Nzk1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/table/OverWindowITCase.scala", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTozNjo1MVrOGlnlWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMTozMDowOFrOGm8svQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5OTAzMg==", "bodyText": "Add a comment and link to a jira ticket why?", "url": "https://github.com/apache/flink/pull/11868#discussion_r442099032", "createdAt": "2020-06-18T09:36:51Z", "author": {"login": "pnowojski"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/table/OverWindowITCase.scala", "diffHunk": "@@ -40,6 +40,11 @@ import scala.collection.mutable\n @RunWith(classOf[Parameterized])\n class OverWindowITCase(mode: StateBackendMode) extends StreamingWithStateTestBase(mode) {\n \n+  @Before\n+  def setupEnv(): Unit = {\n+    env.getCheckpointConfig.disableUnalignedCheckpoints()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ5MzU2NQ==", "bodyText": "Created two tickets (watermarks/rescale) and linked to them with a small comment.", "url": "https://github.com/apache/flink/pull/11868#discussion_r443493565", "createdAt": "2020-06-22T11:30:08Z", "author": {"login": "AHeise"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/runtime/stream/table/OverWindowITCase.scala", "diffHunk": "@@ -40,6 +40,11 @@ import scala.collection.mutable\n @RunWith(classOf[Parameterized])\n class OverWindowITCase(mode: StateBackendMode) extends StreamingWithStateTestBase(mode) {\n \n+  @Before\n+  def setupEnv(): Unit = {\n+    env.getCheckpointConfig.disableUnalignedCheckpoints()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA5OTAzMg=="}, "originalCommit": {"oid": "2e55484af53240b19097d2536853b09c575f06d4"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1569, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}