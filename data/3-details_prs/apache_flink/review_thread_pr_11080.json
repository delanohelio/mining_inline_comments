{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NzI1MTgx", "number": 11080, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDowMDo0MVrODgVLDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDowMToxOFrODgVL1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjI3OTE5OnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowSerializationSchema.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDowMDo0MlrOFqekig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDowMDo0MlrOFqekig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA4NTM4Ng==", "bodyText": "Put the @deprecated comment after @param.", "url": "https://github.com/apache/flink/pull/11080#discussion_r380085386", "createdAt": "2020-02-17T10:00:42Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowSerializationSchema.java", "diffHunk": "@@ -99,35 +94,66 @@ public JsonRowSerializationSchema(TypeInformation<Row> typeInfo) {\n \t@PublicEvolving\n \tpublic static class Builder {\n \n-\t\tprivate final RowTypeInfo typeInfo;\n+\t\tprivate RowTypeInfo typeInfo;\n+\n+\t\tprivate Builder() {\n+\t\t\t// private constructor\n+\t\t}\n \n \t\t/**\n+\t\t * @deprecated Use {@link JsonRowSerializationSchema#builder()} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bed2dbf577c649ad3e6b411730763c90a898a5d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjI4MTE2OnYy", "diffSide": "RIGHT", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowSerializationSchema.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDowMToxOFrOFqel0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMDowMToxOFrOFqel0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA4NTcxMg==", "bodyText": "Add a javadoc on this method.", "url": "https://github.com/apache/flink/pull/11080#discussion_r380085712", "createdAt": "2020-02-17T10:01:18Z", "author": {"login": "wuchong"}, "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowSerializationSchema.java", "diffHunk": "@@ -99,35 +94,66 @@ public JsonRowSerializationSchema(TypeInformation<Row> typeInfo) {\n \t@PublicEvolving\n \tpublic static class Builder {\n \n-\t\tprivate final RowTypeInfo typeInfo;\n+\t\tprivate RowTypeInfo typeInfo;\n+\n+\t\tprivate Builder() {\n+\t\t\t// private constructor\n+\t\t}\n \n \t\t/**\n+\t\t * @deprecated Use {@link JsonRowSerializationSchema#builder()} instead.\n+\t\t *\n \t\t * Creates a JSON serialization schema for the given type information.\n \t\t *\n \t\t * @param typeInfo Type information describing the result type. The field names of {@link Row}\n \t\t *                 are used to parse the JSON properties.\n \t\t */\n+\t\t@Deprecated\n \t\tpublic Builder(TypeInformation<Row> typeInfo) {\n \t\t\tcheckArgument(typeInfo instanceof RowTypeInfo, \"Only RowTypeInfo is supported\");\n \t\t\tthis.typeInfo = (RowTypeInfo) typeInfo;\n \t\t}\n \n \t\t/**\n+\t\t * @deprecated Use {@link JsonRowSerializationSchema#builder()} instead.\n+\t\t *\n \t\t * Creates a JSON serialization schema for the given JSON schema.\n \t\t *\n \t\t * @param jsonSchema JSON schema describing the result type\n \t\t *\n \t\t * @see <a href=\"http://json-schema.org/\">http://json-schema.org/</a>\n \t\t */\n+\t\t@Deprecated\n \t\tpublic Builder(String jsonSchema) {\n \t\t\tthis(JsonRowSchemaConverter.convert(checkNotNull(jsonSchema)));\n \t\t}\n \n+\t\t/**\n+\t\t * Sets type information for JSON serialization schema.\n+\t\t *\n+\t\t * @param typeInfo Type information describing the result type. The field names of {@link Row}\n+\t\t *                 are used to parse the JSON properties.\n+\t\t */\n+\t\tpublic Builder withTypeInfo(TypeInformation<Row> typeInfo) {\n+\t\t\tcheckArgument(typeInfo instanceof RowTypeInfo, \"Only RowTypeInfo is supported\");\n+\t\t\tthis.typeInfo = (RowTypeInfo) typeInfo;\n+\t\t\treturn this;\n+\t\t}\n+\n+\t\t/**\n+\t\t * Finalizes the configuration and checks validity.\n+\t\t * @return Configured {@link JsonRowSerializationSchema}\n+\t\t */\n \t\tpublic JsonRowSerializationSchema build() {\n+\t\t\tcheckArgument(typeInfo != null, \"typeInfo should be set.\");\n \t\t\treturn new JsonRowSerializationSchema(typeInfo);\n \t\t}\n \t}\n \n+\tpublic static Builder builder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bed2dbf577c649ad3e6b411730763c90a898a5d"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1076, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}