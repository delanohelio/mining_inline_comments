{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjc2MDEz", "number": 11012, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoxNjoxOFrODc4IVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoxNzoyMlrODc4JNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjA2MzU3OnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/HiveCatalog.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoxNjoxOFrOFlKBbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTowMjo1MFrOFlMdIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNTgzNw==", "bodyText": "For compatibility issue, should throw exception now.", "url": "https://github.com/apache/flink/pull/11012#discussion_r374505837", "createdAt": "2020-02-04T07:16:18Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/HiveCatalog.java", "diffHunk": "@@ -587,57 +599,67 @@ protected static Table instantiateHiveTable(ObjectPath tablePath, CatalogBaseTab\n \t\t// When creating a table, A hive table needs explicitly have a key is_generic = false\n \t\t// otherwise, this is a generic table if 1) the key is missing 2) is_generic = true\n \t\t// this is opposite to reading a table and instantiating a CatalogTable. See instantiateCatalogTable()\n+\t\tboolean isGeneric;\n \t\tif (!properties.containsKey(CatalogConfig.IS_GENERIC)) {\n-\t\t\t// must be a generic catalog\n+\t\t\t// must be a generic table\n+\t\t\tisGeneric = true;\n \t\t\tproperties.put(CatalogConfig.IS_GENERIC, String.valueOf(true));\n-\t\t\tproperties = maskFlinkProperties(properties);\n \t\t} else {\n-\t\t\tboolean isGeneric = Boolean.valueOf(properties.get(CatalogConfig.IS_GENERIC));\n-\n-\t\t\tif (isGeneric) {\n-\t\t\t\tproperties = maskFlinkProperties(properties);\n-\t\t\t}\n+\t\t\tisGeneric = Boolean.parseBoolean(properties.get(CatalogConfig.IS_GENERIC));\n \t\t}\n \n-\t\t// Table properties\n-\t\thiveTable.setParameters(properties);\n-\n \t\t// Hive table's StorageDescriptor\n \t\tStorageDescriptor sd = hiveTable.getSd();\n \t\tsetStorageFormat(sd, properties);\n \n-\t\tList<FieldSchema> allColumns = HiveTableUtil.createHiveColumns(table.getSchema());\n-\n-\t\t// Table columns and partition keys\n-\t\tif (table instanceof CatalogTableImpl) {\n-\t\t\tCatalogTable catalogTable = (CatalogTableImpl) table;\n-\n-\t\t\tif (catalogTable.isPartitioned()) {\n-\t\t\t\tint partitionKeySize = catalogTable.getPartitionKeys().size();\n-\t\t\t\tList<FieldSchema> regularColumns = allColumns.subList(0, allColumns.size() - partitionKeySize);\n-\t\t\t\tList<FieldSchema> partitionColumns = allColumns.subList(allColumns.size() - partitionKeySize, allColumns.size());\n+\t\tif (isGeneric) {\n+\t\t\tDescriptorProperties tableSchemaProps = new DescriptorProperties(true);\n+\t\t\ttableSchemaProps.putTableSchema(HiveCatalogConfig.GENERIC_TABLE_SCHEMA_PREFIX, table.getSchema());\n+\t\t\tproperties.putAll(tableSchemaProps.asMap());\n+\n+\t\t\tif (table instanceof CatalogTableImpl) {\n+\t\t\t\tList<String> partColNames = ((CatalogTableImpl) table).getPartitionKeys();\n+\t\t\t\tif (!partColNames.isEmpty()) {\n+\t\t\t\t\tproperties.put(HiveCatalogConfig.GENERIC_PART_COL_NAMES, String.join(\",\", partColNames));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df658c89289171ef60b8939090fd53982ce46061"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMjk5NQ==", "bodyText": "We don't need support partition for generic table. And this serialization maybe not right.\nWe should wait #10059", "url": "https://github.com/apache/flink/pull/11012#discussion_r374512995", "createdAt": "2020-02-04T07:39:24Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/HiveCatalog.java", "diffHunk": "@@ -587,57 +599,67 @@ protected static Table instantiateHiveTable(ObjectPath tablePath, CatalogBaseTab\n \t\t// When creating a table, A hive table needs explicitly have a key is_generic = false\n \t\t// otherwise, this is a generic table if 1) the key is missing 2) is_generic = true\n \t\t// this is opposite to reading a table and instantiating a CatalogTable. See instantiateCatalogTable()\n+\t\tboolean isGeneric;\n \t\tif (!properties.containsKey(CatalogConfig.IS_GENERIC)) {\n-\t\t\t// must be a generic catalog\n+\t\t\t// must be a generic table\n+\t\t\tisGeneric = true;\n \t\t\tproperties.put(CatalogConfig.IS_GENERIC, String.valueOf(true));\n-\t\t\tproperties = maskFlinkProperties(properties);\n \t\t} else {\n-\t\t\tboolean isGeneric = Boolean.valueOf(properties.get(CatalogConfig.IS_GENERIC));\n-\n-\t\t\tif (isGeneric) {\n-\t\t\t\tproperties = maskFlinkProperties(properties);\n-\t\t\t}\n+\t\t\tisGeneric = Boolean.parseBoolean(properties.get(CatalogConfig.IS_GENERIC));\n \t\t}\n \n-\t\t// Table properties\n-\t\thiveTable.setParameters(properties);\n-\n \t\t// Hive table's StorageDescriptor\n \t\tStorageDescriptor sd = hiveTable.getSd();\n \t\tsetStorageFormat(sd, properties);\n \n-\t\tList<FieldSchema> allColumns = HiveTableUtil.createHiveColumns(table.getSchema());\n-\n-\t\t// Table columns and partition keys\n-\t\tif (table instanceof CatalogTableImpl) {\n-\t\t\tCatalogTable catalogTable = (CatalogTableImpl) table;\n-\n-\t\t\tif (catalogTable.isPartitioned()) {\n-\t\t\t\tint partitionKeySize = catalogTable.getPartitionKeys().size();\n-\t\t\t\tList<FieldSchema> regularColumns = allColumns.subList(0, allColumns.size() - partitionKeySize);\n-\t\t\t\tList<FieldSchema> partitionColumns = allColumns.subList(allColumns.size() - partitionKeySize, allColumns.size());\n+\t\tif (isGeneric) {\n+\t\t\tDescriptorProperties tableSchemaProps = new DescriptorProperties(true);\n+\t\t\ttableSchemaProps.putTableSchema(HiveCatalogConfig.GENERIC_TABLE_SCHEMA_PREFIX, table.getSchema());\n+\t\t\tproperties.putAll(tableSchemaProps.asMap());\n+\n+\t\t\tif (table instanceof CatalogTableImpl) {\n+\t\t\t\tList<String> partColNames = ((CatalogTableImpl) table).getPartitionKeys();\n+\t\t\t\tif (!partColNames.isEmpty()) {\n+\t\t\t\t\tproperties.put(HiveCatalogConfig.GENERIC_PART_COL_NAMES, String.join(\",\", partColNames));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNTgzNw=="}, "originalCommit": {"oid": "df658c89289171ef60b8939090fd53982ce46061"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU0NTY5Ng==", "bodyText": "OK I'll create another JIRA to track that.", "url": "https://github.com/apache/flink/pull/11012#discussion_r374545696", "createdAt": "2020-02-04T09:02:50Z", "author": {"login": "lirui-apache"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/HiveCatalog.java", "diffHunk": "@@ -587,57 +599,67 @@ protected static Table instantiateHiveTable(ObjectPath tablePath, CatalogBaseTab\n \t\t// When creating a table, A hive table needs explicitly have a key is_generic = false\n \t\t// otherwise, this is a generic table if 1) the key is missing 2) is_generic = true\n \t\t// this is opposite to reading a table and instantiating a CatalogTable. See instantiateCatalogTable()\n+\t\tboolean isGeneric;\n \t\tif (!properties.containsKey(CatalogConfig.IS_GENERIC)) {\n-\t\t\t// must be a generic catalog\n+\t\t\t// must be a generic table\n+\t\t\tisGeneric = true;\n \t\t\tproperties.put(CatalogConfig.IS_GENERIC, String.valueOf(true));\n-\t\t\tproperties = maskFlinkProperties(properties);\n \t\t} else {\n-\t\t\tboolean isGeneric = Boolean.valueOf(properties.get(CatalogConfig.IS_GENERIC));\n-\n-\t\t\tif (isGeneric) {\n-\t\t\t\tproperties = maskFlinkProperties(properties);\n-\t\t\t}\n+\t\t\tisGeneric = Boolean.parseBoolean(properties.get(CatalogConfig.IS_GENERIC));\n \t\t}\n \n-\t\t// Table properties\n-\t\thiveTable.setParameters(properties);\n-\n \t\t// Hive table's StorageDescriptor\n \t\tStorageDescriptor sd = hiveTable.getSd();\n \t\tsetStorageFormat(sd, properties);\n \n-\t\tList<FieldSchema> allColumns = HiveTableUtil.createHiveColumns(table.getSchema());\n-\n-\t\t// Table columns and partition keys\n-\t\tif (table instanceof CatalogTableImpl) {\n-\t\t\tCatalogTable catalogTable = (CatalogTableImpl) table;\n-\n-\t\t\tif (catalogTable.isPartitioned()) {\n-\t\t\t\tint partitionKeySize = catalogTable.getPartitionKeys().size();\n-\t\t\t\tList<FieldSchema> regularColumns = allColumns.subList(0, allColumns.size() - partitionKeySize);\n-\t\t\t\tList<FieldSchema> partitionColumns = allColumns.subList(allColumns.size() - partitionKeySize, allColumns.size());\n+\t\tif (isGeneric) {\n+\t\t\tDescriptorProperties tableSchemaProps = new DescriptorProperties(true);\n+\t\t\ttableSchemaProps.putTableSchema(HiveCatalogConfig.GENERIC_TABLE_SCHEMA_PREFIX, table.getSchema());\n+\t\t\tproperties.putAll(tableSchemaProps.asMap());\n+\n+\t\t\tif (table instanceof CatalogTableImpl) {\n+\t\t\t\tList<String> partColNames = ((CatalogTableImpl) table).getPartitionKeys();\n+\t\t\t\tif (!partColNames.isEmpty()) {\n+\t\t\t\t\tproperties.put(HiveCatalogConfig.GENERIC_PART_COL_NAMES, String.join(\",\", partColNames));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNTgzNw=="}, "originalCommit": {"oid": "df658c89289171ef60b8939090fd53982ce46061"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjA2NTgyOnYy", "diffSide": "RIGHT", "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/HiveCatalogConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzoxNzoyM1rOFlKCsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNzozMTo0NVrOFlKTrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNjE2Mw==", "bodyText": "consistent with CatalogConfig.FLINK_PROPERTY_PREFIX?", "url": "https://github.com/apache/flink/pull/11012#discussion_r374506163", "createdAt": "2020-02-04T07:17:23Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/HiveCatalogConfig.java", "diffHunk": "@@ -32,4 +32,9 @@\n \n \t// Partition related configs\n \tpublic static final String PARTITION_LOCATION = \"partition.location\";\n+\n+\t// config prefix for the table schema of a generic table\n+\tpublic static final String GENERIC_TABLE_SCHEMA_PREFIX = \"generic.table.schema\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df658c89289171ef60b8939090fd53982ce46061"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUxMDUxMQ==", "bodyText": "CatalogConfig.FLINK_PROPERTY_PREFIX will be added to all the Flink properties. So we'll have sth like flink.generic.table.schema.0... and flink.generic.table.schema.1... in the final table properties.", "url": "https://github.com/apache/flink/pull/11012#discussion_r374510511", "createdAt": "2020-02-04T07:31:45Z", "author": {"login": "lirui-apache"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/catalog/hive/HiveCatalogConfig.java", "diffHunk": "@@ -32,4 +32,9 @@\n \n \t// Partition related configs\n \tpublic static final String PARTITION_LOCATION = \"partition.location\";\n+\n+\t// config prefix for the table schema of a generic table\n+\tpublic static final String GENERIC_TABLE_SCHEMA_PREFIX = \"generic.table.schema\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDUwNjE2Mw=="}, "originalCommit": {"oid": "df658c89289171ef60b8939090fd53982ce46061"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1186, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}