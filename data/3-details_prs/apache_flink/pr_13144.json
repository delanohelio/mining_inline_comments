{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODA4OTIw", "number": 13144, "title": "[FLINK-15853][hive][table-planner-blink] Use the new type inference f\u2026", "bodyText": "\u2026or hive udf\n\nWhat is the purpose of the change\nMigrate Hive UDF to new type inference\nBrief change log\n\nReturn HiveSimpleUDF/HiveGenericUDF instead of ScalarFunctionDefinition in HiveFunctionDefinitionFactory\nImplement a TypeStrategy for HiveScalarFunction and use it to create the TypeInference. This TypeStrategy takes care of setting argument types & constants for the Hive function.\n\nVerifying this change\nExisting tests\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): no\nThe public API, i.e., is any changed class annotated with @Public(Evolving): no\nThe serializers: no\nThe runtime per-record code paths (performance sensitive): no\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: no\nThe S3 file system connector: no\n\nDocumentation\n\nDoes this pull request introduce a new feature? no\nIf yes, how is the feature documented? NA", "createdAt": "2020-08-14T06:57:17Z", "url": "https://github.com/apache/flink/pull/13144", "merged": true, "mergeCommit": {"oid": "7646188c05f25cfbd21a0178e3c092956e6ed4fe"}, "closed": true, "closedAt": "2020-08-31T04:03:53Z", "author": {"login": "lirui-apache"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-vlnugFqTQ2NzM2NDI4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEON-WAFqTQ3ODQwMTExNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MzY0Mjgz", "url": "https://github.com/apache/flink/pull/13144#pullrequestreview-467364283", "createdAt": "2020-08-14T07:32:16Z", "commit": {"oid": "409db9efb76541dd932a9b878ba45fa6a78d7c46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzozMjoxNlrOHAqgQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNzozMjoxNlrOHAqgQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ1ODQzNA==", "bodyText": "I guess we will also need a matching input type strategy such that the validation can work properly.", "url": "https://github.com/apache/flink/pull/13144#discussion_r470458434", "createdAt": "2020-08-14T07:32:16Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -82,6 +84,13 @@ public void open(FunctionContext context) {\n \t\tisArgsSingleArray = HiveFunctionUtil.isSingleBoxedArray(argTypes);\n \t}\n \n+\t@Override\n+\tpublic TypeInference getTypeInference(DataTypeFactory typeFactory) {\n+\t\tTypeInference.Builder builder = TypeInference.newBuilder();\n+\t\tbuilder.outputTypeStrategy(new ResultTypeStrategy(this));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "409db9efb76541dd932a9b878ba45fa6a78d7c46"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "409db9efb76541dd932a9b878ba45fa6a78d7c46", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/409db9efb76541dd932a9b878ba45fa6a78d7c46", "committedDate": "2020-08-14T06:46:03Z", "message": "[FLINK-15853][hive][table-planner-blink] Use the new type inference for hive udf"}, "afterCommit": {"oid": "059c4960d2201b0c18cba4f984df35c8af5585b6", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/059c4960d2201b0c18cba4f984df35c8af5585b6", "committedDate": "2020-08-17T10:12:42Z", "message": "implement input type strategy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "059c4960d2201b0c18cba4f984df35c8af5585b6", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/059c4960d2201b0c18cba4f984df35c8af5585b6", "committedDate": "2020-08-17T10:12:42Z", "message": "implement input type strategy"}, "afterCommit": {"oid": "3c30fef231493dd6cd8f3dec8838b6a7d663bc32", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/3c30fef231493dd6cd8f3dec8838b6a7d663bc32", "committedDate": "2020-08-18T07:18:35Z", "message": "implement input type strategy"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c30fef231493dd6cd8f3dec8838b6a7d663bc32", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/3c30fef231493dd6cd8f3dec8838b6a7d663bc32", "committedDate": "2020-08-18T07:18:35Z", "message": "implement input type strategy"}, "afterCommit": {"oid": "9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5", "committedDate": "2020-08-21T09:07:39Z", "message": "implement input type strategy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMTQ4OTUz", "url": "https://github.com/apache/flink/pull/13144#pullrequestreview-473148953", "createdAt": "2020-08-24T06:24:35Z", "commit": {"oid": "9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoyNDozNlrOHFWHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoyNDozNlrOHFWHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NzE3OQ==", "bodyText": "Looks like it is inferOutputType", "url": "https://github.com/apache/flink/pull/13144#discussion_r475367179", "createdAt": "2020-08-24T06:24:36Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +142,62 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate Tuple2<Object[], DataType[]> getConstantArgAndTypes(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\treturn Tuple2.of(constantArgs, inputTypes);\n+\t}\n+\n+\t/**\n+\t * Validate input argument types and decide result type.\n+\t */\n+\tprotected abstract DataType validateInputTypes(DataType[] argTypes) throws UDFArgumentException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMTQ5Njk4", "url": "https://github.com/apache/flink/pull/13144#pullrequestreview-473149698", "createdAt": "2020-08-24T06:26:19Z", "commit": {"oid": "9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoyNjoxOVrOHFWJkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoyNjoxOVrOHFWJkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NzgyNQ==", "bodyText": "I can not get it what this is for.", "url": "https://github.com/apache/flink/pull/13144#discussion_r475367825", "createdAt": "2020-08-24T06:26:19Z", "author": {"login": "JingsongLi"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +142,62 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate Tuple2<Object[], DataType[]> getConstantArgAndTypes(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\treturn Tuple2.of(constantArgs, inputTypes);\n+\t}\n+\n+\t/**\n+\t * Validate input argument types and decide result type.\n+\t */\n+\tprotected abstract DataType validateInputTypes(DataType[] argTypes) throws UDFArgumentException;\n+\n+\tprivate class HiveUDFOutputStrategy implements TypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic Optional<DataType> inferType(CallContext callContext) {\n+\t\t\tTuple2<Object[], DataType[]> constantArgAndTypes = getConstantArgAndTypes(callContext);\n+\t\t\treturn Optional.ofNullable(getHiveResultType(constantArgAndTypes.f0, constantArgAndTypes.f1));\n+\t\t}\n+\t}\n+\n+\tprivate class HiveUDFInputStrategy implements InputTypeStrategy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "289be5bacc5a37979ba81da7044b8d2f9a2aa96c", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/289be5bacc5a37979ba81da7044b8d2f9a2aa96c", "committedDate": "2020-08-24T06:49:11Z", "message": "[FLINK-15853][hive][table-planner-blink] Use the new type inference for hive udf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99dbe8bfead5fa8ef998c4b9933e61de0c5c9c01", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/99dbe8bfead5fa8ef998c4b9933e61de0c5c9c01", "committedDate": "2020-08-24T06:49:11Z", "message": "implement input type strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e59034c2ae2d7a9fdef6a2bdaaeda311d9464c7", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/5e59034c2ae2d7a9fdef6a2bdaaeda311d9464c7", "committedDate": "2020-08-24T08:19:46Z", "message": "refactor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/9b69c04b6a987bf81e21fd8a7c062fb72fe7ccb5", "committedDate": "2020-08-21T09:07:39Z", "message": "implement input type strategy"}, "afterCommit": {"oid": "5e59034c2ae2d7a9fdef6a2bdaaeda311d9464c7", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/5e59034c2ae2d7a9fdef6a2bdaaeda311d9464c7", "committedDate": "2020-08-24T08:19:46Z", "message": "refactor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MTc4NTA4", "url": "https://github.com/apache/flink/pull/13144#pullrequestreview-474178508", "createdAt": "2020-08-25T06:45:12Z", "commit": {"oid": "5e59034c2ae2d7a9fdef6a2bdaaeda311d9464c7"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7", "author": {"user": {"login": "lirui-apache", "name": "Rui Li"}}, "url": "https://github.com/apache/flink/commit/d18c88b2c9387076875d7e9f33b05d8f171ba8d7", "committedDate": "2020-08-25T07:46:35Z", "message": "fix call context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MjkzMzM4", "url": "https://github.com/apache/flink/pull/13144#pullrequestreview-478293338", "createdAt": "2020-08-31T04:01:57Z", "commit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NDAxMTE3", "url": "https://github.com/apache/flink/pull/13144#pullrequestreview-478401117", "createdAt": "2020-08-31T08:01:42Z", "commit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowMTo0MlrOHJuolA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODowNjozMlrOHJuxrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MzI4NA==", "bodyText": "Move this to a dedicated class because it will be shared for other functions as well?", "url": "https://github.com/apache/flink/pull/13144#discussion_r479963284", "createdAt": "2020-08-31T08:01:42Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2MzUzMg==", "bodyText": "We should also check for isNullLiteral?", "url": "https://github.com/apache/flink/pull/13144#discussion_r479963532", "createdAt": "2020-08-31T08:02:09Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NDA3OQ==", "bodyText": "the CallContext provides a method for throwing validation errors.", "url": "https://github.com/apache/flink/pull/13144#discussion_r479964079", "createdAt": "2020-08-31T08:03:21Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\tthis.constantArguments = constantArgs;\n+\t\tthis.argTypes = inputTypes;\n+\t}\n+\n+\t/**\n+\t * Infer return type of this function call.\n+\t */\n+\tprotected abstract DataType inferReturnType() throws UDFArgumentException;\n+\n+\tprivate class HiveUDFOutputStrategy implements TypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic Optional<DataType> inferType(CallContext callContext) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\treturn Optional.of(inferReturnType());\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tthrow new FlinkHiveUDFException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class HiveUDFInputStrategy implements InputTypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic ArgumentCount getArgumentCount() {\n+\t\t\treturn ConstantArgumentCount.any();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Optional<List<DataType>> inferInputTypes(CallContext callContext, boolean throwOnFailure) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\tinferReturnType();\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tif (throwOnFailure) {\n+\t\t\t\t\tthrow new ValidationException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NTQxMQ==", "bodyText": "I think it would be helpful to print the expected signature in case the user passes wrong arguments?", "url": "https://github.com/apache/flink/pull/13144#discussion_r479965411", "createdAt": "2020-08-31T08:06:05Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/main/java/org/apache/flink/table/functions/hive/HiveScalarFunction.java", "diffHunk": "@@ -104,4 +114,66 @@ public Object eval(Object... args) {\n \t * Evaluation logical, args will be wrapped when is a single array.\n \t */\n \tprotected abstract Object evalInternal(Object[] args);\n+\n+\tprivate void setArguments(CallContext callContext) {\n+\t\tDataType[] inputTypes = callContext.getArgumentDataTypes().toArray(new DataType[0]);\n+\t\tObject[] constantArgs = new Object[inputTypes.length];\n+\t\tfor (int i = 0; i < constantArgs.length; i++) {\n+\t\t\tif (callContext.isArgumentLiteral(i)) {\n+\t\t\t\tconstantArgs[i] = callContext.getArgumentValue(\n+\t\t\t\t\t\ti, ClassLogicalTypeConverter.getDefaultExternalClassForType(inputTypes[i].getLogicalType()))\n+\t\t\t\t\t\t.orElse(null);\n+\t\t\t}\n+\t\t}\n+\t\tthis.constantArguments = constantArgs;\n+\t\tthis.argTypes = inputTypes;\n+\t}\n+\n+\t/**\n+\t * Infer return type of this function call.\n+\t */\n+\tprotected abstract DataType inferReturnType() throws UDFArgumentException;\n+\n+\tprivate class HiveUDFOutputStrategy implements TypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic Optional<DataType> inferType(CallContext callContext) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\treturn Optional.of(inferReturnType());\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tthrow new FlinkHiveUDFException(e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate class HiveUDFInputStrategy implements InputTypeStrategy {\n+\n+\t\t@Override\n+\t\tpublic ArgumentCount getArgumentCount() {\n+\t\t\treturn ConstantArgumentCount.any();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Optional<List<DataType>> inferInputTypes(CallContext callContext, boolean throwOnFailure) {\n+\t\t\tsetArguments(callContext);\n+\t\t\ttry {\n+\t\t\t\tinferReturnType();\n+\t\t\t} catch (UDFArgumentException e) {\n+\t\t\t\tif (throwOnFailure) {\n+\t\t\t\t\tthrow new ValidationException(\n+\t\t\t\t\t\t\tString.format(\"Cannot find a suitable Hive function from %s for the input arguments\",\n+\t\t\t\t\t\t\t\t\thiveFunctionWrapper.getClassName()), e);\n+\t\t\t\t} else {\n+\t\t\t\t\treturn Optional.empty();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn Optional.of(callContext.getArgumentDataTypes());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic List<Signature> getExpectedSignatures(FunctionDefinition definition) {\n+\t\t\treturn Collections.singletonList(Signature.of(Signature.Argument.of(\"*\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2NTYxMw==", "bodyText": "Use org.apache.flink.table.types.inference.utils.CallContextMock", "url": "https://github.com/apache/flink/pull/13144#discussion_r479965613", "createdAt": "2020-08-31T08:06:32Z", "author": {"login": "twalthr"}, "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/functions/hive/HiveSimpleUDFTest.java", "diffHunk": "@@ -291,4 +297,58 @@ public String evaluate(String content) {\n \t\t\treturn content;\n \t\t}\n \t}\n+\n+\t/**\n+\t * A CallContext implementation for Hive UDF tests.\n+\t */\n+\tpublic static class HiveUDFCallContext implements CallContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18c88b2c9387076875d7e9f33b05d8f171ba8d7"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4873, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}