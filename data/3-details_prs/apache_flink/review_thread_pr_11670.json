{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODE3NzMz", "number": 11670, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1MDo0N1rODwQ2_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoyNzoxMFrODwRUHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTM0NDYxOnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/common/job_execution_result.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1MDo0N1rOGDKdLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1MDo0N1rOGDKdLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MDIyMQ==", "bodyText": "Also add this class in the __init__.py file under common folder.", "url": "https://github.com/apache/flink/pull/11670#discussion_r405970221", "createdAt": "2020-04-09T05:50:47Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTM2NTk3OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/common/job_execution_result.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjowMTo0NVrOGDKp0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjowMTo0NVrOGDKp0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MzQ1Nw==", "bodyText": "Add to_string method.", "url": "https://github.com/apache/flink/pull/11670#discussion_r405973457", "createdAt": "2020-04-09T06:01:45Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTM3ODM1OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/common/job_execution_result.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjowODowNFrOGDKxXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjowODowNFrOGDKxXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NTM4OA==", "bodyText": "It is strange to pass a java desired_unit here. I think it's ok to remove the desired_unit in Python and always return the net execution time in milliseconds. What do you think?", "url": "https://github.com/apache/flink/pull/11670#discussion_r405975388", "createdAt": "2020-04-09T06:08:04Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):\n+    \"\"\"\n+    The result of a job execution. Gives access to the execution time of the job,\n+    and to all accumulators created by this job.\n+    \"\"\"\n+\n+    def __init__(self, j_job_execution_result):\n+        self._j_job_execution_result = j_job_execution_result\n+\n+    def get_job_id(self):\n+        \"\"\"\n+        Returns the JobID assigned to the job by the Flink runtime.\n+\n+        :return: JobID, or null if the job has been executed on a runtime without JobIDs or if the execution failed.\n+        \"\"\"\n+        return self._j_job_execution_result.getJobID()\n+\n+    def is_job_execution_result(self):\n+        \"\"\"\n+        Checks if this JobSubmissionResult is also a JobExecutionResult.\n+\n+        .. seealso:: :func:`get_job_execution_result` to retrieve the JobExecutionResult.\n+\n+        :return: ``True`` if this is a JobExecutionResult, ``False`` otherwise.\n+        \"\"\"\n+        return self._j_job_execution_result.isJobExecutionResult()\n+\n+    def get_job_execution_result(self):\n+        \"\"\"\n+        Returns the JobExecutionResult if available.\n+\n+        :throws: Exception if this is not a JobExecutionResult.\n+        :return: The JobExecutionResult.\n+        \"\"\"\n+        return self\n+\n+    def get_net_runtime(self, desired_unit=None):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTQxMTE2OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/common/job_execution_result.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoyMzo0NlrOGDLFJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoyMzo0NlrOGDLFJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MDQ1Mg==", "bodyText": "_j_job_execution_result.get_all_accumulator_results() => _j_job_execution_result.getAllAccumulatorResults().\nIt's better to add tests to verify all the methods in this class.", "url": "https://github.com/apache/flink/pull/11670#discussion_r405980452", "createdAt": "2020-04-09T06:23:46Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):\n+    \"\"\"\n+    The result of a job execution. Gives access to the execution time of the job,\n+    and to all accumulators created by this job.\n+    \"\"\"\n+\n+    def __init__(self, j_job_execution_result):\n+        self._j_job_execution_result = j_job_execution_result\n+\n+    def get_job_id(self):\n+        \"\"\"\n+        Returns the JobID assigned to the job by the Flink runtime.\n+\n+        :return: JobID, or null if the job has been executed on a runtime without JobIDs or if the execution failed.\n+        \"\"\"\n+        return self._j_job_execution_result.getJobID()\n+\n+    def is_job_execution_result(self):\n+        \"\"\"\n+        Checks if this JobSubmissionResult is also a JobExecutionResult.\n+\n+        .. seealso:: :func:`get_job_execution_result` to retrieve the JobExecutionResult.\n+\n+        :return: ``True`` if this is a JobExecutionResult, ``False`` otherwise.\n+        \"\"\"\n+        return self._j_job_execution_result.isJobExecutionResult()\n+\n+    def get_job_execution_result(self):\n+        \"\"\"\n+        Returns the JobExecutionResult if available.\n+\n+        :throws: Exception if this is not a JobExecutionResult.\n+        :return: The JobExecutionResult.\n+        \"\"\"\n+        return self\n+\n+    def get_net_runtime(self, desired_unit=None):\n+        \"\"\"\n+        Gets the net execution time of the job, i.e., the execution time in the parallel system,\n+        without the pre-flight steps like the optimizer in a desired time unit.\n+\n+        :param desired_unit: the unit of the NetRuntime, optional.\n+        :return: The net execution time in the desired unit.\n+        \"\"\"\n+        if desired_unit is None:\n+            return self._j_job_execution_result.getNetRuntime()\n+        else:\n+            return self._j_job_execution_result.getNetRuntime(desired_unit)\n+\n+    def get_accumulator_result(self, accumulator_name):\n+        \"\"\"\n+        Gets the accumulator with the given name. Returns {@code null}, if no accumulator with\n+        that name was produced.\n+\n+        :param accumulator_name: The name of the accumulator.\n+        :return: The value of the accumulator with the given name.\n+        \"\"\"\n+        return self._j_job_execution_result.getAccumulatorResult(accumulator_name)\n+\n+    def get_all_accumulator_results(self):\n+        \"\"\"\n+        Gets all accumulators produced by the job. The map contains the accumulators as\n+        mappings from the accumulator name to the accumulator value.\n+\n+        :return: The dict which the keys are names of the accumulator and the values\n+                 are values of the accumulator produced by the job.\n+        \"\"\"\n+        j_result_map = self._j_job_execution_result.get_all_accumulator_results()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTQxOTE5OnYy", "diffSide": "RIGHT", "path": "flink-python/pyflink/common/job_execution_result.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoyNzoxMFrOGDLJ6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoyNzoxMFrOGDLJ6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk4MTY3Mw==", "bodyText": "There is no null type in Python, return None instead if accumulatorName does not exist in the accumulatorResults", "url": "https://github.com/apache/flink/pull/11670#discussion_r405981673", "createdAt": "2020-04-09T06:27:10Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/common/job_execution_result.py", "diffHunk": "@@ -0,0 +1,93 @@\n+################################################################################\n+#  Licensed to the Apache Software Foundation (ASF) under one\n+#  or more contributor license agreements.  See the NOTICE file\n+#  distributed with this work for additional information\n+#  regarding copyright ownership.  The ASF licenses this file\n+#  to you under the Apache License, Version 2.0 (the\n+#  \"License\"); you may not use this file except in compliance\n+#  with the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+# limitations under the License.\n+################################################################################\n+\n+__all__ = ['JobExecutionResult']\n+\n+\n+class JobExecutionResult(object):\n+    \"\"\"\n+    The result of a job execution. Gives access to the execution time of the job,\n+    and to all accumulators created by this job.\n+    \"\"\"\n+\n+    def __init__(self, j_job_execution_result):\n+        self._j_job_execution_result = j_job_execution_result\n+\n+    def get_job_id(self):\n+        \"\"\"\n+        Returns the JobID assigned to the job by the Flink runtime.\n+\n+        :return: JobID, or null if the job has been executed on a runtime without JobIDs or if the execution failed.\n+        \"\"\"\n+        return self._j_job_execution_result.getJobID()\n+\n+    def is_job_execution_result(self):\n+        \"\"\"\n+        Checks if this JobSubmissionResult is also a JobExecutionResult.\n+\n+        .. seealso:: :func:`get_job_execution_result` to retrieve the JobExecutionResult.\n+\n+        :return: ``True`` if this is a JobExecutionResult, ``False`` otherwise.\n+        \"\"\"\n+        return self._j_job_execution_result.isJobExecutionResult()\n+\n+    def get_job_execution_result(self):\n+        \"\"\"\n+        Returns the JobExecutionResult if available.\n+\n+        :throws: Exception if this is not a JobExecutionResult.\n+        :return: The JobExecutionResult.\n+        \"\"\"\n+        return self\n+\n+    def get_net_runtime(self, desired_unit=None):\n+        \"\"\"\n+        Gets the net execution time of the job, i.e., the execution time in the parallel system,\n+        without the pre-flight steps like the optimizer in a desired time unit.\n+\n+        :param desired_unit: the unit of the NetRuntime, optional.\n+        :return: The net execution time in the desired unit.\n+        \"\"\"\n+        if desired_unit is None:\n+            return self._j_job_execution_result.getNetRuntime()\n+        else:\n+            return self._j_job_execution_result.getNetRuntime(desired_unit)\n+\n+    def get_accumulator_result(self, accumulator_name):\n+        \"\"\"\n+        Gets the accumulator with the given name. Returns {@code null}, if no accumulator with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fb1f48213ccb2ddcda1651388253dec83cb0234"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1690, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}