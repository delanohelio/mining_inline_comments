{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5ODM4NDY3", "number": 13561, "title": "[FLINK-19315][coordination] Add AllocatedSlotPool", "bodyText": "Adds the AllocatedSlotPool, a component of the new declarative slot pool, providing basic book-keeping for allocated slots.\nWith this PR I'm also proposing a change in terminology in regards to allocate. Currently, \"allocating a slot\" has different meanings as it both describes a slot being assigned to a job by the ResourceManager, and an (allocated) slot being allocated for a task by the JobMaster.\nI'd like to get rid of this duality, and propose for the job master to \"reserve\" allocated slots when using them for a task.", "createdAt": "2020-10-08T11:03:03Z", "url": "https://github.com/apache/flink/pull/13561", "merged": true, "mergeCommit": {"oid": "099e98204fafe25b70eabe6b45e4e12868169a3e"}, "closed": true, "closedAt": "2020-10-13T14:41:30Z", "author": {"login": "zentol"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQfbvjgH2gAyNDk5ODM4NDY3OmI1YTE5MzgzNTBhOTM1YThkMjRlZTkzYzFmODMxMTRlNjU4MTliYzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSEcgrAH2gAyNDk5ODM4NDY3OmNlNzI4NTQ1YWY2YzMwZTYxNWQ0Yzk3MmI5MDJkMDY1YjQ1NGFlMTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b5a1938350a935a8d24ee93c1f83114e65819bc1", "author": {"user": {"login": "tillrohrmann", "name": "Till Rohrmann"}}, "url": "https://github.com/apache/flink/commit/b5a1938350a935a8d24ee93c1f83114e65819bc1", "committedDate": "2020-10-08T10:57:23Z", "message": "[FLINK-19315][coordination] Add AllocatedSlotPool"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NjExMTQ5", "url": "https://github.com/apache/flink/pull/13561#pullrequestreview-506611149", "createdAt": "2020-10-12T13:18:09Z", "commit": {"oid": "b5a1938350a935a8d24ee93c1f83114e65819bc1"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoxODowOVrOHf-X9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyMjo0N1rOHf-i-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI4OTg0Ng==", "bodyText": "I think we can remove this part.", "url": "https://github.com/apache/flink/pull/13561#discussion_r503289846", "createdAt": "2020-10-12T13:18:09Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/jobmaster/slotpool/DefaultAllocatedSlotPool.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.runtime.clusterframework.types.AllocationID;\n+import org.apache.flink.runtime.clusterframework.types.ResourceID;\n+import org.apache.flink.runtime.jobmaster.SlotInfo;\n+import org.apache.flink.util.Preconditions;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * Default {@link AllocatedSlotPool} implementation.\n+ */\n+public class DefaultAllocatedSlotPool implements AllocatedSlotPool {\n+\n+\tprivate final Map<AllocationID, AllocatedSlot> registeredSlots;\n+\n+\t/**\n+\t * Map containing all free slots and since when they are free.\n+\t */\n+\tprivate final Map<AllocationID, Long> freeSlotsSince;\n+\n+\t/**\n+\t * Index containing a mapping between TaskExecutors and their slots.\n+\t */\n+\tprivate final Map<ResourceID, Set<AllocationID>> slotsPerTaskExecutor;\n+\n+\tpublic DefaultAllocatedSlotPool() {\n+\t\tthis.registeredSlots = new HashMap<>();\n+\t\tthis.slotsPerTaskExecutor = new HashMap<>();\n+\t\tthis.freeSlotsSince = new HashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic void addSlots(Collection<AllocatedSlot> slots, long currentTime) {\n+\t\tfor (AllocatedSlot slot : slots) {\n+\t\t\taddSlot(slot, currentTime);\n+\t\t}\n+\t}\n+\n+\tprivate void addSlot(AllocatedSlot slot, long currentTime) {\n+\t\tPreconditions.checkState(!registeredSlots.containsKey(slot.getAllocationId()), \"The slot pool already contains a slot with id %s\", slot.getAllocationId());\n+\t\taddSlotInternal(slot, currentTime);\n+\n+\t\tslotsPerTaskExecutor\n+\t\t\t.computeIfAbsent(slot.getTaskManagerId(), resourceID -> new HashSet<>())\n+\t\t\t.add(slot.getAllocationId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5a1938350a935a8d24ee93c1f83114e65819bc1"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5MjY2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testFreeFreeSlotIsIgnored() {\n          \n          \n            \n            \tpublic void testFreeReservedSlotIsIgnored() {", "url": "https://github.com/apache/flink/pull/13561#discussion_r503292666", "createdAt": "2020-10-12T13:22:47Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/jobmaster/slotpool/DefaultAllocatedSlotPoolTest.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.jobmaster.slotpool;\n+\n+import org.apache.flink.runtime.clusterframework.types.AllocationID;\n+import org.apache.flink.runtime.clusterframework.types.ResourceID;\n+import org.apache.flink.runtime.clusterframework.types.ResourceProfile;\n+import org.apache.flink.runtime.jobmaster.JobMasterId;\n+import org.apache.flink.runtime.jobmaster.RpcTaskManagerGateway;\n+import org.apache.flink.runtime.jobmaster.SlotInfo;\n+import org.apache.flink.runtime.taskexecutor.TestingTaskExecutorGatewayBuilder;\n+import org.apache.flink.runtime.taskmanager.LocalTaskManagerLocation;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n+import org.apache.flink.util.TestLogger;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.Iterables;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.junit.Test;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import java.net.InetAddress;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.closeTo;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.sameInstance;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests for the {@link DefaultAllocatedSlotPool}.\n+ */\n+public class DefaultAllocatedSlotPoolTest extends TestLogger {\n+\n+\t@Test\n+\tpublic void testAddSlots() {\n+\t\tfinal DefaultAllocatedSlotPool slotPool = new DefaultAllocatedSlotPool();\n+\n+\t\tfinal Collection<AllocatedSlot> slots = createAllocatedSlots();\n+\n+\t\tslotPool.addSlots(slots, 0);\n+\n+\t\tassertSlotPoolContainsSlots(slotPool, slots);\n+\t\tassertSlotPoolContainsFreeSlots(slotPool, slots);\n+\t}\n+\n+\t@Test\n+\tpublic void testRemoveSlot() {\n+\t\tfinal DefaultAllocatedSlotPool slotPool = new DefaultAllocatedSlotPool();\n+\n+\t\tfinal Collection<AllocatedSlot> slots = createAllocatedSlots();\n+\n+\t\tslotPool.addSlots(slots, 0);\n+\n+\t\tfinal Iterator<AllocatedSlot> iterator = slots.iterator();\n+\t\tfinal AllocatedSlot removedSlot = iterator.next();\n+\t\titerator.remove();\n+\n+\t\tslotPool.removeSlot(removedSlot.getAllocationId());\n+\n+\t\tassertSlotPoolContainsSlots(slotPool, slots);\n+\t}\n+\n+\t@Test\n+\tpublic void testRemoveSlots() {\n+\t\tfinal DefaultAllocatedSlotPool slotPool = new DefaultAllocatedSlotPool();\n+\n+\t\tfinal ResourceID owner = ResourceID.generate();\n+\t\tfinal Collection<AllocatedSlot> slots = createAllocatedSlotsWithOwner(owner);\n+\t\tfinal AllocatedSlot otherSlot = createAllocatedSlot(ResourceID.generate());\n+\t\tslots.add(otherSlot);\n+\n+\t\tslotPool.addSlots(slots, 0);\n+\n+\t\tslotPool.removeSlots(owner);\n+\n+\t\tassertSlotPoolContainsSlots(slotPool, Collections.singleton(otherSlot));\n+\t}\n+\n+\t@Test\n+\tpublic void testContainsSlots() {\n+\t\tfinal DefaultAllocatedSlotPool slotPool = new DefaultAllocatedSlotPool();\n+\t\tfinal ResourceID owner = ResourceID.generate();\n+\t\tfinal AllocatedSlot allocatedSlot = createAllocatedSlot(owner);\n+\n+\t\tslotPool.addSlots(Collections.singleton(allocatedSlot), 0);\n+\n+\t\tassertTrue(slotPool.containsSlots(owner));\n+\t\tassertFalse(slotPool.containsSlots(ResourceID.generate()));\n+\t}\n+\n+\t@Test\n+\tpublic void testContainsSlot() {\n+\t\tfinal DefaultAllocatedSlotPool slotPool = new DefaultAllocatedSlotPool();\n+\t\tfinal AllocatedSlot allocatedSlot = createAllocatedSlot(null);\n+\n+\t\tslotPool.addSlots(Collections.singleton(allocatedSlot), 0);\n+\n+\t\tassertTrue(slotPool.containsSlot(allocatedSlot.getAllocationId()));\n+\t\tassertFalse(slotPool.containsSlot(new AllocationID()));\n+\t}\n+\n+\t@Test\n+\tpublic void testReserveFreeSlot() {\n+\t\tfinal DefaultAllocatedSlotPool slotPool = new DefaultAllocatedSlotPool();\n+\t\tfinal Collection<AllocatedSlot> allSlots = createAllocatedSlots();\n+\t\tfinal Collection<AllocatedSlot> freeSlots = new ArrayList<>(allSlots);\n+\t\tfinal Iterator<AllocatedSlot> iterator = freeSlots.iterator();\n+\t\tfinal AllocatedSlot allocatedSlot = iterator.next();\n+\t\titerator.remove();\n+\n+\t\tslotPool.addSlots(allSlots, 0);\n+\n+\t\tassertThat(slotPool.reserveFreeSlot(allocatedSlot.getAllocationId()), sameInstance(allocatedSlot));\n+\n+\t\tassertSlotPoolContainsFreeSlots(slotPool, freeSlots);\n+\t\tassertSlotPoolContainsSlots(slotPool, allSlots);\n+\t}\n+\n+\t@Test(expected = IllegalStateException.class)\n+\tpublic void testReserveNonFreeSlotFails() {\n+\t\tfinal DefaultAllocatedSlotPool slotPool = new DefaultAllocatedSlotPool();\n+\t\tfinal AllocatedSlot slot = createAllocatedSlot(null);\n+\n+\t\tslotPool.addSlots(Collections.singleton(slot), 0);\n+\n+\t\tslotPool.reserveFreeSlot(slot.getAllocationId());\n+\t\tslotPool.reserveFreeSlot(slot.getAllocationId());\n+\t}\n+\n+\t@Test\n+\tpublic void testFreeReservedSlot() {\n+\t\tfinal DefaultAllocatedSlotPool slotPool = new DefaultAllocatedSlotPool();\n+\t\tfinal Collection<AllocatedSlot> slots = createAllocatedSlots();\n+\n+\t\tfinal int initialTime = 0;\n+\t\tslotPool.addSlots(slots, initialTime);\n+\n+\t\tfinal AllocatedSlot slot = slots.iterator().next();\n+\n+\t\tslotPool.reserveFreeSlot(slot.getAllocationId());\n+\n+\t\tfinal int releaseTime = 1;\n+\t\tassertTrue(slotPool.freeReservedSlot(slot.getAllocationId(), releaseTime).isPresent());\n+\t\tassertSlotPoolContainsFreeSlots(slotPool, slots);\n+\n+\t\tfor (AllocatedSlotPool.FreeSlotInfo freeSlotInfo : slotPool.getFreeSlotsInformation()) {\n+\t\t\tfinal long time;\n+\t\t\tif (freeSlotInfo.getAllocationId().equals(slot.getAllocationId())) {\n+\t\t\t\ttime = releaseTime;\n+\t\t\t} else {\n+\t\t\t\ttime = initialTime;\n+\t\t\t}\n+\n+\t\t\tassertThat(freeSlotInfo.getFreeSince(), is(time));\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testFreeFreeSlotIsIgnored() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5a1938350a935a8d24ee93c1f83114e65819bc1"}, "originalPosition": 190}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce728545af6c30e615d4c972b902d065b454ae18", "author": {"user": {"login": "zentol", "name": "Chesnay Schepler"}}, "url": "https://github.com/apache/flink/commit/ce728545af6c30e615d4c972b902d065b454ae18", "committedDate": "2020-10-13T08:38:38Z", "message": "comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3825, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}