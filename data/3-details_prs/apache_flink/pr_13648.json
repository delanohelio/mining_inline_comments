{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzOTkwOTA4", "number": 13648, "title": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery", "bodyText": "What is the purpose of the change\nIntroduce a new ResultPartitionType.PIPELINED_APPROXIMATE for Approximate Local Recovery\nBrief change log\nThe first two commits belong to another ticket [FLINK-19547], which has already been reviewed.\nPlease only review the third commit: [FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery #13648\n\na new ResultPartitionType (ResultPartitionType.PIPELINED_APPROXIMATE) and\nPipelinedApproximateSubpartition and PipelinedApproximateSubpartitionView extending PipelinedSubpartition and PipelinedSubpartitionView respectively.\n\nPipelinedApproximateSubpartition and PipelinedSubpartition are different mainly in three places\n\nhow to release resources when downstream task disconnects to it\nhow to create a view\nhow to build a buffer when the subpartition is marked as \"partial\"\n\nVerifying this change\nunit tests\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)", "createdAt": "2020-10-15T10:19:00Z", "url": "https://github.com/apache/flink/pull/13648", "merged": true, "mergeCommit": {"oid": "1e4b380d65a54bcabceea1887168e03d5de4f0d3"}, "closed": true, "closedAt": "2020-11-02T08:34:13Z", "author": {"login": "curcur"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTDn7-ABqjM4ODU2NDk2ODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYbp9SgBqjM5NDYwMTk0Njg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ed05009530e34f77deff767a04cd4c14c15378d", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/4ed05009530e34f77deff767a04cd4c14c15378d", "committedDate": "2020-10-15T10:17:11Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}, "afterCommit": {"oid": "b0e37cb424abe4e95ebf7ba3f7e2943cf1bbcd6f", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/b0e37cb424abe4e95ebf7ba3f7e2943cf1bbcd6f", "committedDate": "2020-10-16T10:14:24Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0e37cb424abe4e95ebf7ba3f7e2943cf1bbcd6f", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/b0e37cb424abe4e95ebf7ba3f7e2943cf1bbcd6f", "committedDate": "2020-10-16T10:14:24Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}, "afterCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/d259609d97fa73cd79b3dd400e2868f6be1c5e89", "committedDate": "2020-10-16T10:30:58Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNzU5Nzg4", "url": "https://github.com/apache/flink/pull/13648#pullrequestreview-511759788", "createdAt": "2020-10-19T13:28:30Z", "commit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzoyODozMVrOHkOVwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo1Nzo1OFrOHkTA4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0NTczMA==", "bodyText": "Can you please explain why this partition type is bounded?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507745730", "createdAt": "2020-10-19T13:28:31Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartitionType.java", "diffHunk": "@@ -71,7 +71,17 @@\n \t * <p>For batch jobs, it will be best to keep this unlimited ({@link #PIPELINED}) since there are\n \t * no checkpoint barriers.\n \t */\n-\tPIPELINED_BOUNDED(true, true, true, false);\n+\tPIPELINED_BOUNDED(true, true, true, false),\n+\n+\t/**\n+\t * Pipelined partitions with a bounded (local) buffer pool to support downstream task to\n+\t * continue consuming data after reconnection in Approximate Local-Recovery.\n+\t *\n+\t * <p>Pipelined results can be consumed only once by a single consumer at one time.\n+\t * {@link #PIPELINED_APPROXIMATE} is different from {@link #PIPELINED_BOUNDED} in that\n+\t * {@link #PIPELINED_APPROXIMATE} is not decomposed automatically after consumption.\n+\t */\n+\tPIPELINED_APPROXIMATE(true, true, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0OTUwMA==", "bodyText": "I think this message should mention that a new view is being created.", "url": "https://github.com/apache/flink/pull/13648#discussion_r507749500", "createdAt": "2020-10-19T13:33:34Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NTI4MA==", "bodyText": "The writes in this method should be done under a lock, right?\nBut I'm not sure that all execution paths do acquire this lock.\nShould we add synchronized (buffers) or checkState(Thread.holdsLock)?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507755280", "createdAt": "2020-10-19T13:41:16Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTcxMw==", "bodyText": "I couldn't find any differences from super.toString other than class name.\nCan we just replace in super \"PipelinedSubpartition with getSiimpleClassName instead of overriding?\nditto: view", "url": "https://github.com/apache/flink/pull/13648#discussion_r507759713", "createdAt": "2020-10-19T13:47:10Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;\n+\t\tisPartialBuffer = true;\n+\t\tisBlockedByCheckpoint = false;\n+\t\tsequenceNumber = 0;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NTc5NQ==", "bodyText": "I think this method is called not only upon downstream RPC, but also on task shutdown and other cases.\nIf so, completely skipping of super.releaseAllResources can lead to resource leaks in those cases.\nWDYT?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507785795", "createdAt": "2020-10-19T14:17:01Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartitionView.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * View over a pipelined in-memory only subpartition allowing reconnecting.\n+ */\n+public class PipelinedApproximateSubpartitionView extends PipelinedSubpartitionView {\n+\n+\tPipelinedApproximateSubpartitionView(PipelinedApproximateSubpartition parent, BufferAvailabilityListener listener) {\n+\t\tsuper(parent, listener);\n+\t}\n+\n+\t@Override\n+\tpublic void releaseAllResources() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5MjcyNg==", "bodyText": "I think there is no point in adding explicit requireNonNull just before dereferencing it.", "url": "https://github.com/apache/flink/pull/13648#discussion_r507792726", "createdAt": "2020-10-19T14:25:28Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -259,9 +260,10 @@ BufferAndBacklog pollBuffer() {\n \t\t\t}\n \n \t\t\twhile (!buffers.isEmpty()) {\n-\t\t\t\tBufferConsumer bufferConsumer = buffers.peek().getBufferConsumer();\n+\t\t\t\tBufferConsumerWithPartialRecordLength bufferConsumerWithPartialRecordLength = buffers.peek();\n+\t\t\t\tBufferConsumer bufferConsumer = requireNonNull(bufferConsumerWithPartialRecordLength).getBufferConsumer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5Mzg0NQ==", "bodyText": "nit: super.buildSliceBuffer ?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507793845", "createdAt": "2020-10-19T14:26:42Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwMTI5Mg==", "bodyText": "nit: I'd prefer this simple ternary if in a loop:\nfor (int i = 0; i < subpartitions.length; i++) {\n    subpartitions[i] = type == ResultPartitionType.PIPELINED_APPROXIMATE ?\n        new PipelinedApproximateSubpartition(i, pipelinedPartition) :\n        new PipelinedSubpartition(i, pipelinedPartition);\n}", "url": "https://github.com/apache/flink/pull/13648#discussion_r507801292", "createdAt": "2020-10-19T14:33:06Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartitionFactory.java", "diffHunk": "@@ -130,8 +132,15 @@ public ResultPartition create(\n \t\t\t\tbufferCompressor,\n \t\t\t\tbufferPoolFactory);\n \n+\t\t\tBiFunction<Integer, PipelinedResultPartition, PipelinedSubpartition> factory;\n+\t\t\tif (type == ResultPartitionType.PIPELINED_APPROXIMATE) {\n+\t\t\t\tfactory = PipelinedApproximateSubpartition::new;\n+\t\t\t} else {\n+\t\t\t\tfactory = PipelinedSubpartition::new;\n+\t\t\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxMjI4NQ==", "bodyText": "The name isPartialBuffer is a bit misleading to me because it implies that partial buffer was emitted.\nBut in fact, this field reflects that the view was released.\nHow about isPartialBufferCleanupRequired?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507812285", "createdAt": "2020-10-19T14:45:40Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;\n+\t\tisPartialBuffer = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjMwNg==", "bodyText": "I'm concerned about a potential race condition here (even with synchronized added).\nConsider a case:\nThread1: call subpartition.createReadView() - create view1\nThread2: obtain a reference to view1\nThread1: call subpartition.createReadView() - create view2\nThread2: call view1.releaseAllResources <-- nulls out subpartition.readView; view2 is now corrupt?\nWDYT?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507822306", "createdAt": "2020-10-19T14:57:58Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/d259609d97fa73cd79b3dd400e2868f6be1c5e89", "committedDate": "2020-10-16T10:30:58Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}, "afterCommit": {"oid": "1dcce3b9301d178ae2e3ab05888260b05f24b15a", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/1dcce3b9301d178ae2e3ab05888260b05f24b15a", "committedDate": "2020-10-21T11:55:50Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NTI0MjQ2", "url": "https://github.com/apache/flink/pull/13648#pullrequestreview-514524246", "createdAt": "2020-10-22T09:18:59Z", "commit": {"oid": "1dcce3b9301d178ae2e3ab05888260b05f24b15a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToxODo1OVrOHmYfqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToxODo1OVrOHmYfqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwOTI1OA==", "bodyText": "@GuardedBy(\"buffers\") ?", "url": "https://github.com/apache/flink/pull/13648#discussion_r510009258", "createdAt": "2020-10-22T09:18:59Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBufferCleanupRequired = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dcce3b9301d178ae2e3ab05888260b05f24b15a"}, "originalPosition": 38}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1dcce3b9301d178ae2e3ab05888260b05f24b15a", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/1dcce3b9301d178ae2e3ab05888260b05f24b15a", "committedDate": "2020-10-21T11:55:50Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}, "afterCommit": {"oid": "d3709faf9515053ca9873382f5b0ce83c127ff2d", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/d3709faf9515053ca9873382f5b0ce83c127ff2d", "committedDate": "2020-10-23T07:45:50Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NjE0OTA4", "url": "https://github.com/apache/flink/pull/13648#pullrequestreview-516614908", "createdAt": "2020-10-26T09:52:17Z", "commit": {"oid": "d3709faf9515053ca9873382f5b0ce83c127ff2d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDMzNjkw", "url": "https://github.com/apache/flink/pull/13648#pullrequestreview-517033690", "createdAt": "2020-10-26T17:50:33Z", "commit": {"oid": "d3709faf9515053ca9873382f5b0ce83c127ff2d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3709faf9515053ca9873382f5b0ce83c127ff2d", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/d3709faf9515053ca9873382f5b0ce83c127ff2d", "committedDate": "2020-10-23T07:45:50Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}, "afterCommit": {"oid": "ff9581bc2381e224c042f954bac0a7d8c371845a", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/ff9581bc2381e224c042f954bac0a7d8c371845a", "committedDate": "2020-10-27T03:26:45Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff9581bc2381e224c042f954bac0a7d8c371845a", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/ff9581bc2381e224c042f954bac0a7d8c371845a", "committedDate": "2020-10-27T03:26:45Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}, "afterCommit": {"oid": "ccacf6664b0f6ec3630a939f8dd155f53226e4b7", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/ccacf6664b0f6ec3630a939f8dd155f53226e4b7", "committedDate": "2020-10-27T08:17:45Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccacf6664b0f6ec3630a939f8dd155f53226e4b7", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/ccacf6664b0f6ec3630a939f8dd155f53226e4b7", "committedDate": "2020-10-27T08:17:45Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}, "afterCommit": {"oid": "c306ae3258d3e27f22abafe3db27eeb413467dac", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/c306ae3258d3e27f22abafe3db27eeb413467dac", "committedDate": "2020-10-30T09:21:45Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNzEwNTkz", "url": "https://github.com/apache/flink/pull/13648#pullrequestreview-520710593", "createdAt": "2020-10-30T14:16:46Z", "commit": {"oid": "c306ae3258d3e27f22abafe3db27eeb413467dac"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c306ae3258d3e27f22abafe3db27eeb413467dac", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/c306ae3258d3e27f22abafe3db27eeb413467dac", "committedDate": "2020-10-30T09:21:45Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}, "afterCommit": {"oid": "40c0741086cd9cadd88165d58f59c3e3d04b3deb", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/40c0741086cd9cadd88165d58f59c3e3d04b3deb", "committedDate": "2020-10-30T14:16:37Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a8a44c098ddafaa6b849fdcb418bfda907298c9", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/0a8a44c098ddafaa6b849fdcb418bfda907298c9", "committedDate": "2020-11-02T03:04:13Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40c0741086cd9cadd88165d58f59c3e3d04b3deb", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/40c0741086cd9cadd88165d58f59c3e3d04b3deb", "committedDate": "2020-10-30T14:16:37Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}, "afterCommit": {"oid": "0a8a44c098ddafaa6b849fdcb418bfda907298c9", "author": {"user": {"login": "curcur", "name": "Yuan Mei"}}, "url": "https://github.com/apache/flink/commit/0a8a44c098ddafaa6b849fdcb418bfda907298c9", "committedDate": "2020-11-02T03:04:13Z", "message": "[FLINK-19632] Introduce a new ResultPartitionType for Approximate Local Recovery"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3303, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}