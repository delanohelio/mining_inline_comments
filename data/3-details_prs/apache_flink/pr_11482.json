{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDE5MzYx", "number": 11482, "title": "[FLINK-16581][table] Minibatch deduplication lack state TTL bug fix", "bodyText": "What is the purpose of the change\nfix the bug of minibatch deduplication lack state TTL, otherwise, it lead to OOM with long running streaming job\nBrief change log\n\nsupport minibatch deduplication keep first row with state TTL\nsupport minibatch deduplication keep last row with state TTL\n\nVerifying this change\nThis change added tests and can be verified as follows:\n\nMiniBatchDeduplicateKeepLastRowFunctionTest#tesKeepLastRowtProcessingTimeTimerWithStateAndGenerateRetraction\nMiniBatchDeduplicateKeepFirstRowFunctionTest#tesKeepFirstRowtProcessingTimeTimerWithState\n\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): (no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): (no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not documented)", "createdAt": "2020-03-22T14:57:40Z", "url": "https://github.com/apache/flink/pull/11482", "merged": true, "mergeCommit": {"oid": "3f6080f4e9bdeb564c32a1bbbd5f577b0fbfe873"}, "closed": true, "closedAt": "2020-04-17T06:26:24Z", "author": {"login": "lsyldliu"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSbOXlgFqTM4MzQxOTA1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYbP5gAFqTM5NTE4OTc2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDE5MDU0", "url": "https://github.com/apache/flink/pull/11482#pullrequestreview-383419054", "createdAt": "2020-03-29T14:44:52Z", "commit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNDo0NDo1MlrOF9SUOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNDo1ODozM1rOF9Sa4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwNzU0Ng==", "bodyText": "We don't need to add equals method for StateTtlConfig, if you want to compare an instance with StateTtlConfig.DISABLED, you can just do it like stateTtlConfig == StateTtlConfig.DISABLED", "url": "https://github.com/apache/flink/pull/11482#discussion_r399807546", "createdAt": "2020-03-29T14:44:52Z", "author": {"login": "libenchao"}, "path": "flink-core/src/main/java/org/apache/flink/api/common/state/StateTtlConfig.java", "diffHunk": "@@ -144,6 +145,21 @@ public String toString() {\n \t\t\t'}';\n \t}\n \n+\t@Override\n+\tpublic boolean equals(Object o){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwNzg2MA==", "bodyText": "Add an error message for this check.", "url": "https://github.com/apache/flink/pull/11482#discussion_r399807860", "createdAt": "2020-03-29T14:47:26Z", "author": {"login": "libenchao"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.bundle;\n+\n+import org.apache.flink.api.common.state.StateTtlConfig;\n+import org.apache.flink.api.common.state.StateTtlConfig.StateVisibility;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.table.runtime.functions.CleanupState;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * Basic interface for map bundle processing and could cleanup state.\n+ *\n+ * @param <K>   The type of the key in the bundle map\n+ * @param <V>   The type of the value in the bundle map\n+ * @param <IN>  Type of the input elements.\n+ * @param <OUT> Type of the returned elements.\n+ */\n+\n+public abstract class MapBundleFunctionWithStateRetention<K, V, IN, OUT> extends MapBundleFunction<K, V, IN, OUT> implements CleanupState {\n+\n+\tprivate final long minRetentionTime;\n+\tprivate final boolean stateCleaningEnabled;\n+\tprotected final StateTtlConfig stateTtlConfig;\n+\n+\tpublic MapBundleFunctionWithStateRetention(long minRetentionTime){\n+\t\tthis.minRetentionTime = minRetentionTime;\n+\t\tstateCleaningEnabled = minRetentionTime > 1;\n+\t\tstateTtlConfig = createTtlConfig(minRetentionTime, stateCleaningEnabled);\n+\t}\n+\n+\tprivate StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {\n+\t\tif (stateCleaningEnabled) {\n+\t\t\tcheckArgument(retentionTime > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwODgxMw==", "bodyText": "why do we need to implements CleanupState?", "url": "https://github.com/apache/flink/pull/11482#discussion_r399808813", "createdAt": "2020-03-29T14:54:44Z", "author": {"login": "libenchao"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.bundle;\n+\n+import org.apache.flink.api.common.state.StateTtlConfig;\n+import org.apache.flink.api.common.state.StateTtlConfig.StateVisibility;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.table.runtime.functions.CleanupState;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * Basic interface for map bundle processing and could cleanup state.\n+ *\n+ * @param <K>   The type of the key in the bundle map\n+ * @param <V>   The type of the value in the bundle map\n+ * @param <IN>  Type of the input elements.\n+ * @param <OUT> Type of the returned elements.\n+ */\n+\n+public abstract class MapBundleFunctionWithStateRetention<K, V, IN, OUT> extends MapBundleFunction<K, V, IN, OUT> implements CleanupState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwODk0MA==", "bodyText": "always add a space before {", "url": "https://github.com/apache/flink/pull/11482#discussion_r399808940", "createdAt": "2020-03-29T14:56:02Z", "author": {"login": "libenchao"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java", "diffHunk": "@@ -71,4 +71,41 @@ public void testKeepFirstRowWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t}\n \n+\t@Test\n+\tpublic void tesKeepFirstRowWithStateTtl() throws Exception{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA==", "bodyText": "Do we have any other way to test this, I don't think Thread.sleep is a good idea.", "url": "https://github.com/apache/flink/pull/11482#discussion_r399809248", "createdAt": "2020-03-29T14:58:33Z", "author": {"login": "libenchao"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java", "diffHunk": "@@ -71,4 +71,41 @@ public void testKeepFirstRowWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t}\n \n+\t@Test\n+\tpublic void tesKeepFirstRowWithStateTtl() throws Exception{\n+\t\tMiniBatchDeduplicateKeepFirstRowFunction func = new MiniBatchDeduplicateKeepFirstRowFunction(typeSerializer, minTime.toMilliseconds());\n+\t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n+\t\ttestHarness.setup();\n+\t\ttestHarness.open();\n+\t\ttestHarness.processElement(record(\"book\", 1L, 12));\n+\t\ttestHarness.processElement(record(\"book\", 2L, 11));\n+\t\t// output is empty because bundle not trigger yet.\n+\t\tAssert.assertTrue(testHarness.getOutput().isEmpty());\n+\t\ttestHarness.processElement(record(\"book\", 1L, 13));\n+\n+\t\tThread.sleep(30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNDk2NzUx", "url": "https://github.com/apache/flink/pull/11482#pullrequestreview-383496751", "createdAt": "2020-03-30T02:28:36Z", "commit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjoyODozN1rOF9XyGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMjo1MDo0NlrOF9YC9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5NzExMg==", "bodyText": "use stateTtlConfig.isEnabled. We should also correct the implementation in JoinRecordStateViews.", "url": "https://github.com/apache/flink/pull/11482#discussion_r399897112", "createdAt": "2020-03-30T02:28:37Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java", "diffHunk": "@@ -46,14 +47,18 @@\n \t// state stores a boolean flag to indicate whether key appears before.\n \tprivate ValueState<Boolean> state;\n \n-\tpublic MiniBatchDeduplicateKeepFirstRowFunction(TypeSerializer<BaseRow> typeSerializer) {\n+\tpublic MiniBatchDeduplicateKeepFirstRowFunction(TypeSerializer<BaseRow> typeSerializer, long minRetentionTime) {\n+\t\tsuper(minRetentionTime);\n \t\tthis.typeSerializer = typeSerializer;\n \t}\n \n \t@Override\n \tpublic void open(ExecutionContext ctx) throws Exception {\n \t\tsuper.open(ctx);\n \t\tValueStateDescriptor<Boolean> stateDesc = new ValueStateDescriptor<>(\"existsState\", Types.BOOLEAN);\n+\t\tif (!stateTtlConfig.equals(StateTtlConfig.DISABLED)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODM0NA==", "bodyText": "Is there any changes between these lines? It's not encouraged to refactor code sytle among some other changes.  If it is for code style, the later one is not good:\n\nplease add an additional indent for new line parameter.\nplease put each parameter in a speparate line if you think the method call is too long.\n\nPlease refer a more detailed code style guideline: https://flink.apache.org/contributing/code-style-and-quality-preamble.html", "url": "https://github.com/apache/flink/pull/11482#discussion_r399898344", "createdAt": "2020-03-30T02:35:11Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java", "diffHunk": "@@ -41,23 +41,28 @@\n  */\n public class MiniBatchDeduplicateKeepLastRowFunctionTest extends DeduplicateFunctionTestBase {\n \n-\tprivate TypeSerializer<BaseRow> typeSerializer = inputRowType.createSerializer(new ExecutionConfig());\n+\tprivate TypeSerializer<BaseRow> typeSerializer = inputRowType\n+\t\t.createSerializer(new ExecutionConfig());\n \n-\tprivate MiniBatchDeduplicateKeepLastRowFunction createFunction(boolean generateRetraction) {\n-\t\treturn new MiniBatchDeduplicateKeepLastRowFunction(inputRowType, generateRetraction, typeSerializer);\n+\tprivate MiniBatchDeduplicateKeepLastRowFunction createFunction(boolean generateRetraction,\n+\t\tlong minRetentionTime) {\n+\t\treturn new MiniBatchDeduplicateKeepLastRowFunction(inputRowType, generateRetraction,\n+\t\t\ttypeSerializer, minRetentionTime);\n \t}\n \n \tprivate OneInputStreamOperatorTestHarness<BaseRow, BaseRow> createTestHarness(\n-\t\t\tMiniBatchDeduplicateKeepLastRowFunction func)\n-\t\t\tthrows Exception {\n+\t\tMiniBatchDeduplicateKeepLastRowFunction func)\n+\t\tthrows Exception {\n \t\tCountBundleTrigger<Tuple2<String, String>> trigger = new CountBundleTrigger<>(3);\n \t\tKeyedMapBundleOperator op = new KeyedMapBundleOperator(func, trigger);\n-\t\treturn new KeyedOneInputStreamOperatorTestHarness<>(op, rowKeySelector, rowKeySelector.getProducedType());\n+\t\treturn new KeyedOneInputStreamOperatorTestHarness<>(op, rowKeySelector,\n+\t\t\trowKeySelector.getProducedType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5ODcyNA==", "bodyText": "The original Javadoc is correct.", "url": "https://github.com/apache/flink/pull/11482#discussion_r399898724", "createdAt": "2020-03-30T02:36:59Z", "author": {"login": "wuchong"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/state/ttl/AbstractTtlDecorator.java", "diffHunk": "@@ -40,7 +40,7 @@\n \t/** Whether to renew expiration timestamp on state read access. */\n \tfinal boolean updateTsOnRead;\n \n-\t/** Whether to renew expiration timestamp on state read access. */\n+\t/** Whether to return expired value if not cleaned up on state read access. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg5OTMyNA==", "bodyText": "I don't think we need an abstraction for such a simple member field. A utility to create StateTtlConfig is enough.", "url": "https://github.com/apache/flink/pull/11482#discussion_r399899324", "createdAt": "2020-03-30T02:39:53Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/bundle/MapBundleFunctionWithStateRetention.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.bundle;\n+\n+import org.apache.flink.api.common.state.StateTtlConfig;\n+import org.apache.flink.api.common.state.StateTtlConfig.StateVisibility;\n+import org.apache.flink.api.common.time.Time;\n+import org.apache.flink.table.runtime.functions.CleanupState;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * Basic interface for map bundle processing and could cleanup state.\n+ *\n+ * @param <K>   The type of the key in the bundle map\n+ * @param <V>   The type of the value in the bundle map\n+ * @param <IN>  Type of the input elements.\n+ * @param <OUT> Type of the returned elements.\n+ */\n+\n+public abstract class MapBundleFunctionWithStateRetention<K, V, IN, OUT> extends MapBundleFunction<K, V, IN, OUT> implements CleanupState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwODgxMw=="}, "originalCommit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkwMTQyOA==", "bodyText": "Does testHarness.setProcessingTime() work in this case? cc @Myasuka , can we use testHarness.setProcessingTime to test the expiration of state ttl?", "url": "https://github.com/apache/flink/pull/11482#discussion_r399901428", "createdAt": "2020-03-30T02:50:46Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java", "diffHunk": "@@ -71,4 +71,41 @@ public void testKeepFirstRowWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t}\n \n+\t@Test\n+\tpublic void tesKeepFirstRowWithStateTtl() throws Exception{\n+\t\tMiniBatchDeduplicateKeepFirstRowFunction func = new MiniBatchDeduplicateKeepFirstRowFunction(typeSerializer, minTime.toMilliseconds());\n+\t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n+\t\ttestHarness.setup();\n+\t\ttestHarness.open();\n+\t\ttestHarness.processElement(record(\"book\", 1L, 12));\n+\t\ttestHarness.processElement(record(\"book\", 2L, 11));\n+\t\t// output is empty because bundle not trigger yet.\n+\t\tAssert.assertTrue(testHarness.getOutput().isEmpty());\n+\t\ttestHarness.processElement(record(\"book\", 1L, 13));\n+\n+\t\tThread.sleep(30);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwOTI0OA=="}, "originalCommit": {"oid": "f6bab1e9ea3eff8eaa5eab70e8fcbf2ec34d5276"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODI4NDg2", "url": "https://github.com/apache/flink/pull/11482#pullrequestreview-391828486", "createdAt": "2020-04-12T07:08:36Z", "commit": {"oid": "f8ed0e698785e0b47ec4721b4a242b68cc8e7059"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzowODozNlrOGES6kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzowODozNlrOGES6kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NzM5Mg==", "bodyText": "if (ttlConfig.isEnabled()) {\nwe always add a space before {", "url": "https://github.com/apache/flink/pull/11482#discussion_r407157392", "createdAt": "2020-04-12T07:08:36Z", "author": {"login": "libenchao"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunction.java", "diffHunk": "@@ -42,18 +44,25 @@\n \tprivate static final long serialVersionUID = -7994602893547654994L;\n \n \tprivate final TypeSerializer<BaseRow> typeSerializer;\n-\n+\tprivate final long minRetentionTime;\n+\tprivate final boolean stateCleaningEnabled;\n \t// state stores a boolean flag to indicate whether key appears before.\n \tprivate ValueState<Boolean> state;\n \n-\tpublic MiniBatchDeduplicateKeepFirstRowFunction(TypeSerializer<BaseRow> typeSerializer) {\n+\tpublic MiniBatchDeduplicateKeepFirstRowFunction(TypeSerializer<BaseRow> typeSerializer, long minRetentionTime) {\n+\t\tthis.minRetentionTime = minRetentionTime;\n+\t\tstateCleaningEnabled = minRetentionTime > 1;\n \t\tthis.typeSerializer = typeSerializer;\n \t}\n \n \t@Override\n \tpublic void open(ExecutionContext ctx) throws Exception {\n \t\tsuper.open(ctx);\n \t\tValueStateDescriptor<Boolean> stateDesc = new ValueStateDescriptor<>(\"existsState\", Types.BOOLEAN);\n+\t\tStateTtlConfig ttlConfig = createTtlConfig(minRetentionTime, stateCleaningEnabled);\n+\t\tif (ttlConfig.isEnabled()){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ed0e698785e0b47ec4721b4a242b68cc8e7059"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODMxODUy", "url": "https://github.com/apache/flink/pull/11482#pullrequestreview-391831852", "createdAt": "2020-04-12T08:00:39Z", "commit": {"oid": "a85e34346824eb2b005b157801bf576ba901ea88"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwODowMDozOVrOGETPIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwODowMjowOFrOGETPpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MjY1Ng==", "bodyText": "nit: ) {", "url": "https://github.com/apache/flink/pull/11482#discussion_r407162656", "createdAt": "2020-04-12T08:00:39Z", "author": {"login": "libenchao"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java", "diffHunk": "@@ -113,4 +113,42 @@ public void testWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t\tassertor.assertOutputEqualsSorted(\"output wrong.\", expectedOutput, testHarness.getOutput());\n \t}\n+\n+\t@Test\n+\tpublic void tesKeepLastRowWithStateTtlAndGenerateRetraction() throws Exception {\n+\t\tMiniBatchDeduplicateKeepLastRowFunction func = createFunction(true, minTime.toMilliseconds());\n+\t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n+\t\ttestHarness.setup();\n+\t\ttestHarness.open();\n+\n+\t\ttestHarness.processElement(record(\"book\", 1L, 10));\n+\t\ttestHarness.processElement(record(\"book\", 2L, 11));\n+\t\t// output is empty because bundle not trigger yet.\n+\t\tAssert.assertTrue(testHarness.getOutput().isEmpty());\n+\t\ttestHarness.processElement(record(\"book\", 1L, 13));\n+\n+\t\ttestHarness.setStateTtlProcessingTime(30);\n+\t\t//Incremental cleanup is an eventual clean up, more state access guarantee more expired state cleaned\n+\t\tfor (long i = 3; i < 30; i++){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85e34346824eb2b005b157801bf576ba901ea88"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2Mjc5MA==", "bodyText": "just curious, if no more other state access, old state will be valid when it is accessed?", "url": "https://github.com/apache/flink/pull/11482#discussion_r407162790", "createdAt": "2020-04-12T08:02:08Z", "author": {"login": "libenchao"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunctionTest.java", "diffHunk": "@@ -113,4 +113,42 @@ public void testWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t\tassertor.assertOutputEqualsSorted(\"output wrong.\", expectedOutput, testHarness.getOutput());\n \t}\n+\n+\t@Test\n+\tpublic void tesKeepLastRowWithStateTtlAndGenerateRetraction() throws Exception {\n+\t\tMiniBatchDeduplicateKeepLastRowFunction func = createFunction(true, minTime.toMilliseconds());\n+\t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n+\t\ttestHarness.setup();\n+\t\ttestHarness.open();\n+\n+\t\ttestHarness.processElement(record(\"book\", 1L, 10));\n+\t\ttestHarness.processElement(record(\"book\", 2L, 11));\n+\t\t// output is empty because bundle not trigger yet.\n+\t\tAssert.assertTrue(testHarness.getOutput().isEmpty());\n+\t\ttestHarness.processElement(record(\"book\", 1L, 13));\n+\n+\t\ttestHarness.setStateTtlProcessingTime(30);\n+\t\t//Incremental cleanup is an eventual clean up, more state access guarantee more expired state cleaned\n+\t\tfor (long i = 3; i < 30; i++){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MjY1Ng=="}, "originalCommit": {"oid": "a85e34346824eb2b005b157801bf576ba901ea88"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNjEyNjUx", "url": "https://github.com/apache/flink/pull/11482#pullrequestreview-393612651", "createdAt": "2020-04-15T09:37:01Z", "commit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTozNzowMlrOGFxuLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDowNjozNFrOGFyz5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMDcwMA==", "bodyText": "We don't need the second parameter stateCleaningEnabled. If retentionTime <= 0, then return DISABLED.", "url": "https://github.com/apache/flink/pull/11482#discussion_r408710700", "createdAt": "2020-04-15T09:37:02Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.util;\n+\n+import org.apache.flink.api.common.state.StateTtlConfig;\n+import org.apache.flink.api.common.time.Time;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * Utility to create a {@link StateTtlConfig} object.\n+ * */\n+public class StateTtlConfigUtil {\n+\n+\tpublic static StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMDg5NQ==", "bodyText": "Please also add a Javadoc on this method, esp. what's the unit of retentionTime.", "url": "https://github.com/apache/flink/pull/11482#discussion_r408710895", "createdAt": "2020-04-15T09:37:20Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.util;\n+\n+import org.apache.flink.api.common.state.StateTtlConfig;\n+import org.apache.flink.api.common.time.Time;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * Utility to create a {@link StateTtlConfig} object.\n+ * */\n+public class StateTtlConfigUtil {\n+\n+\tpublic static StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMDcwMA=="}, "originalCommit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxMzM4OQ==", "bodyText": "Could you unify the behavior for non-mini-batch deduplication in this PR?", "url": "https://github.com/apache/flink/pull/11482#discussion_r408713389", "createdAt": "2020-04-15T09:41:19Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/physical/stream/StreamExecDeduplicate.scala", "diffHunk": "@@ -117,21 +117,23 @@ class StreamExecDeduplicate(\n     val tableConfig = planner.getTableConfig\n     val isMiniBatchEnabled = tableConfig.getConfiguration.getBoolean(\n       ExecutionConfigOptions.TABLE_EXEC_MINIBATCH_ENABLED)\n+    val minRetentionTime = tableConfig.getMinIdleStateRetentionTime\n+    val maxRetentionTime = tableConfig.getMaxIdleStateRetentionTime\n     val operator = if (isMiniBatchEnabled) {\n       val exeConfig = planner.getExecEnv.getConfig\n       val rowSerializer = rowTypeInfo.createSerializer(exeConfig)\n       val processFunction = if (keepLastRow) {\n-        new MiniBatchDeduplicateKeepLastRowFunction(rowTypeInfo, generateRetraction, rowSerializer)\n+        new MiniBatchDeduplicateKeepLastRowFunction(rowTypeInfo, generateRetraction, rowSerializer,\n+          minRetentionTime)\n       } else {\n-        new MiniBatchDeduplicateKeepFirstRowFunction(rowSerializer)\n+        new MiniBatchDeduplicateKeepFirstRowFunction(rowSerializer,\n+          minRetentionTime)\n       }\n       val trigger = AggregateUtil.createMiniBatchTrigger(tableConfig)\n       new KeyedMapBundleOperator(\n         processFunction,\n         trigger)\n     } else {\n-      val minRetentionTime = tableConfig.getMinIdleStateRetentionTime\n-      val maxRetentionTime = tableConfig.getMaxIdleStateRetentionTime\n       val processFunction = if (keepLastRow) {\n         new DeduplicateKeepLastRowFunction(minRetentionTime, maxRetentionTime, rowTypeInfo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNDA1MQ==", "bodyText": "Please keep parameters in separate lines if it's too long.\nnew MiniBatchDeduplicateKeepLastRowFunction(\n          rowTypeInfo,\n          generateRetraction,\n          rowSerializer,\n          minRetentionTime)", "url": "https://github.com/apache/flink/pull/11482#discussion_r408714051", "createdAt": "2020-04-15T09:42:24Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/physical/stream/StreamExecDeduplicate.scala", "diffHunk": "@@ -117,21 +117,23 @@ class StreamExecDeduplicate(\n     val tableConfig = planner.getTableConfig\n     val isMiniBatchEnabled = tableConfig.getConfiguration.getBoolean(\n       ExecutionConfigOptions.TABLE_EXEC_MINIBATCH_ENABLED)\n+    val minRetentionTime = tableConfig.getMinIdleStateRetentionTime\n+    val maxRetentionTime = tableConfig.getMaxIdleStateRetentionTime\n     val operator = if (isMiniBatchEnabled) {\n       val exeConfig = planner.getExecEnv.getConfig\n       val rowSerializer = rowTypeInfo.createSerializer(exeConfig)\n       val processFunction = if (keepLastRow) {\n-        new MiniBatchDeduplicateKeepLastRowFunction(rowTypeInfo, generateRetraction, rowSerializer)\n+        new MiniBatchDeduplicateKeepLastRowFunction(rowTypeInfo, generateRetraction, rowSerializer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcxNDI3Mw==", "bodyText": "ditto", "url": "https://github.com/apache/flink/pull/11482#discussion_r408714273", "createdAt": "2020-04-15T09:42:47Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/nodes/physical/stream/StreamExecDeduplicate.scala", "diffHunk": "@@ -117,21 +117,23 @@ class StreamExecDeduplicate(\n     val tableConfig = planner.getTableConfig\n     val isMiniBatchEnabled = tableConfig.getConfiguration.getBoolean(\n       ExecutionConfigOptions.TABLE_EXEC_MINIBATCH_ENABLED)\n+    val minRetentionTime = tableConfig.getMinIdleStateRetentionTime\n+    val maxRetentionTime = tableConfig.getMaxIdleStateRetentionTime\n     val operator = if (isMiniBatchEnabled) {\n       val exeConfig = planner.getExecEnv.getConfig\n       val rowSerializer = rowTypeInfo.createSerializer(exeConfig)\n       val processFunction = if (keepLastRow) {\n-        new MiniBatchDeduplicateKeepLastRowFunction(rowTypeInfo, generateRetraction, rowSerializer)\n+        new MiniBatchDeduplicateKeepLastRowFunction(rowTypeInfo, generateRetraction, rowSerializer,\n+          minRetentionTime)\n       } else {\n-        new MiniBatchDeduplicateKeepFirstRowFunction(rowSerializer)\n+        new MiniBatchDeduplicateKeepFirstRowFunction(rowSerializer,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA==", "bodyText": "cc @Myasuka , is this a correct way to trigger state cleanup?\nIs there a better to make sure the expired state cleaned?", "url": "https://github.com/apache/flink/pull/11482#discussion_r408728548", "createdAt": "2020-04-15T10:06:34Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java", "diffHunk": "@@ -71,4 +71,41 @@ public void testKeepFirstRowWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t}\n \n+\t@Test\n+\tpublic void tesKeepFirstRowWithStateTtl() throws Exception {\n+\t\tMiniBatchDeduplicateKeepFirstRowFunction func = new MiniBatchDeduplicateKeepFirstRowFunction(typeSerializer, minTime.toMilliseconds());\n+\t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n+\t\ttestHarness.setup();\n+\t\ttestHarness.open();\n+\t\ttestHarness.processElement(record(\"book\", 1L, 12));\n+\t\ttestHarness.processElement(record(\"book\", 2L, 11));\n+\t\t// output is empty because bundle not trigger yet.\n+\t\tAssert.assertTrue(testHarness.getOutput().isEmpty());\n+\t\ttestHarness.processElement(record(\"book\", 1L, 13));\n+\n+\t\ttestHarness.setStateTtlProcessingTime(30);\n+\t\t//Incremental cleanup is an eventual clean up, more state access guarantee more expired state cleaned\n+\t\tfor (long i = 3; i < 30; i++) {\n+\t\t\ttestHarness.processElement(record(\"book\", i, 20));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0MzY1MzIz", "url": "https://github.com/apache/flink/pull/11482#pullrequestreview-394365323", "createdAt": "2020-04-16T07:28:39Z", "commit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzoyODozOVrOGGYFAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwNzo0MDowOFrOGGYd1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzOTEzNg==", "bodyText": "Since we choose ReturnExpiredIfNotCleanedUp for better performance, and verifying the data has been physically deleted is a topic related to the implementation of clean up strategy for different state backends. For RocksDB, we have to reply on the compaction taken for sst files containing those keys. For Heap KeyedStateBackend, the records to fetch for cleaning up is related to the key groups (how many state map would existed) in one state backend.\nI think state backend module could guarantee the correctness, and this should be out of scope for SQL module. Once state backend changes the implementation of TTL cleanup strategy, verifying the data has been physically deleted in SQL module might be unstable.\nIn a nutshell, we would not need to ensure data has been physically deleted here, verifying the state in MiniBatchDeduplicateKeepFirstRowFunction has been configured with TTL is enough. Otherwise, if we use NeverReturnExpired strategy, things would be much simpler here.", "url": "https://github.com/apache/flink/pull/11482#discussion_r409339136", "createdAt": "2020-04-16T07:28:39Z", "author": {"login": "Myasuka"}, "path": "flink-table/flink-table-runtime-blink/src/test/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepFirstRowFunctionTest.java", "diffHunk": "@@ -71,4 +71,41 @@ public void testKeepFirstRowWithGenerateRetraction() throws Exception {\n \t\ttestHarness.close();\n \t}\n \n+\t@Test\n+\tpublic void tesKeepFirstRowWithStateTtl() throws Exception {\n+\t\tMiniBatchDeduplicateKeepFirstRowFunction func = new MiniBatchDeduplicateKeepFirstRowFunction(typeSerializer, minTime.toMilliseconds());\n+\t\tOneInputStreamOperatorTestHarness<BaseRow, BaseRow> testHarness = createTestHarness(func);\n+\t\ttestHarness.setup();\n+\t\ttestHarness.open();\n+\t\ttestHarness.processElement(record(\"book\", 1L, 12));\n+\t\ttestHarness.processElement(record(\"book\", 2L, 11));\n+\t\t// output is empty because bundle not trigger yet.\n+\t\tAssert.assertTrue(testHarness.getOutput().isEmpty());\n+\t\ttestHarness.processElement(record(\"book\", 1L, 13));\n+\n+\t\ttestHarness.setStateTtlProcessingTime(30);\n+\t\t//Incremental cleanup is an eventual clean up, more state access guarantee more expired state cleaned\n+\t\tfor (long i = 3; i < 30; i++) {\n+\t\t\ttestHarness.processElement(record(\"book\", i, 20));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyODU0OA=="}, "originalCommit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0MDE2NQ==", "bodyText": "StateTtlConfig would already check the TTL time larger than 0, this check might not be so useful.", "url": "https://github.com/apache/flink/pull/11482#discussion_r409340165", "createdAt": "2020-04-16T07:30:31Z", "author": {"login": "Myasuka"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/util/StateTtlConfigUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.util;\n+\n+import org.apache.flink.api.common.state.StateTtlConfig;\n+import org.apache.flink.api.common.time.Time;\n+\n+import static org.apache.flink.util.Preconditions.checkArgument;\n+\n+/**\n+ * Utility to create a {@link StateTtlConfig} object.\n+ * */\n+public class StateTtlConfigUtil {\n+\n+\tpublic static StateTtlConfig createTtlConfig(long retentionTime, boolean stateCleaningEnabled) {\n+\t\tif (stateCleaningEnabled) {\n+\t\t\tcheckArgument(retentionTime > 0, \"ttl time must be positive when enabling state cleanup\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NTQ5NA==", "bodyText": "No need to check here, just enable a StateTtlConfig.DISABLED is okay.", "url": "https://github.com/apache/flink/pull/11482#discussion_r409345494", "createdAt": "2020-04-16T07:40:08Z", "author": {"login": "Myasuka"}, "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/deduplicate/MiniBatchDeduplicateKeepLastRowFunction.java", "diffHunk": "@@ -59,6 +64,10 @@ public MiniBatchDeduplicateKeepLastRowFunction(BaseRowTypeInfo rowTypeInfo, bool\n \tpublic void open(ExecutionContext ctx) throws Exception {\n \t\tsuper.open(ctx);\n \t\tValueStateDescriptor<BaseRow> stateDesc = new ValueStateDescriptor<>(\"preRowState\", rowTypeInfo);\n+\t\tStateTtlConfig ttlConfig = createTtlConfig(minRetentionTime, stateCleaningEnabled);\n+\t\tif (ttlConfig.isEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96319a499db13811d5fa70058d6ef740c5219196", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/96319a499db13811d5fa70058d6ef740c5219196", "committedDate": "2020-04-16T07:46:47Z", "message": "minibatch and non-minibatch dedupliaction support state ttl using StateTtlConfig feature"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e69403459fd014a60d06457fc46d1379bece5aae", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/e69403459fd014a60d06457fc46d1379bece5aae", "committedDate": "2020-04-12T08:30:44Z", "message": "add a space before {"}, "afterCommit": {"oid": "96319a499db13811d5fa70058d6ef740c5219196", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/96319a499db13811d5fa70058d6ef740c5219196", "committedDate": "2020-04-16T07:46:47Z", "message": "minibatch and non-minibatch dedupliaction support state ttl using StateTtlConfig feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39032cfa3ec3d87d3419a75bc3e235c5dff54bb2", "author": {"user": null}, "url": "https://github.com/apache/flink/commit/39032cfa3ec3d87d3419a75bc3e235c5dff54bb2", "committedDate": "2020-04-16T10:14:03Z", "message": "update state ttl strategy to NeverReturnExpired"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MTg5NzY2", "url": "https://github.com/apache/flink/pull/11482#pullrequestreview-395189766", "createdAt": "2020-04-17T06:25:04Z", "commit": {"oid": "39032cfa3ec3d87d3419a75bc3e235c5dff54bb2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2432, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}