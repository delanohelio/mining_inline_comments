{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzOTkwOTA4", "number": 13648, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzoyODozMVrOEvUFEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToxODo1OVrOEwrN5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDQ3NTA3OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartitionType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzoyODozMVrOHkOVwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMzo1MToyN1rOHkppOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0NTczMA==", "bodyText": "Can you please explain why this partition type is bounded?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507745730", "createdAt": "2020-10-19T13:28:31Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartitionType.java", "diffHunk": "@@ -71,7 +71,17 @@\n \t * <p>For batch jobs, it will be best to keep this unlimited ({@link #PIPELINED}) since there are\n \t * no checkpoint barriers.\n \t */\n-\tPIPELINED_BOUNDED(true, true, true, false);\n+\tPIPELINED_BOUNDED(true, true, true, false),\n+\n+\t/**\n+\t * Pipelined partitions with a bounded (local) buffer pool to support downstream task to\n+\t * continue consuming data after reconnection in Approximate Local-Recovery.\n+\t *\n+\t * <p>Pipelined results can be consumed only once by a single consumer at one time.\n+\t * {@link #PIPELINED_APPROXIMATE} is different from {@link #PIPELINED_BOUNDED} in that\n+\t * {@link #PIPELINED_APPROXIMATE} is not decomposed automatically after consumption.\n+\t */\n+\tPIPELINED_APPROXIMATE(true, true, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5MzA4Mw==", "bodyText": "It is similar to bounded in Pipelined_Bounded: use a fixed limit on the buffer pool size", "url": "https://github.com/apache/flink/pull/13648#discussion_r508193083", "createdAt": "2020-10-20T03:51:27Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartitionType.java", "diffHunk": "@@ -71,7 +71,17 @@\n \t * <p>For batch jobs, it will be best to keep this unlimited ({@link #PIPELINED}) since there are\n \t * no checkpoint barriers.\n \t */\n-\tPIPELINED_BOUNDED(true, true, true, false);\n+\tPIPELINED_BOUNDED(true, true, true, false),\n+\n+\t/**\n+\t * Pipelined partitions with a bounded (local) buffer pool to support downstream task to\n+\t * continue consuming data after reconnection in Approximate Local-Recovery.\n+\t *\n+\t * <p>Pipelined results can be consumed only once by a single consumer at one time.\n+\t * {@link #PIPELINED_APPROXIMATE} is different from {@link #PIPELINED_BOUNDED} in that\n+\t * {@link #PIPELINED_APPROXIMATE} is not decomposed automatically after consumption.\n+\t */\n+\tPIPELINED_APPROXIMATE(true, true, true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0NTczMA=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDQ5OTM4OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzozMzozNFrOHkOkfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzozMzozNFrOHkOkfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc0OTUwMA==", "bodyText": "I think this message should mention that a new view is being created.", "url": "https://github.com/apache/flink/pull/13648#discussion_r507749500", "createdAt": "2020-10-19T13:33:34Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDUzNjYyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzo0MToxNlrOHkO7EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMToxMTozNVrOHlmjXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NTI4MA==", "bodyText": "The writes in this method should be done under a lock, right?\nBut I'm not sure that all execution paths do acquire this lock.\nShould we add synchronized (buffers) or checkState(Thread.holdsLock)?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507755280", "createdAt": "2020-10-19T13:41:16Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5MzM5NQ==", "bodyText": "The creation and release all go through the netty server thread, so I do not think it needs a lock.", "url": "https://github.com/apache/flink/pull/13648#discussion_r508193395", "createdAt": "2020-10-20T03:52:48Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NTI4MA=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0NTQ5Ng==", "bodyText": "Can't this thread change upon reconnection?\nWhat about isBlockedByCheckpoint? It's read by other threads.\nAnd even if it would be safe today, leaving this method without even a check seems dangerous in the future.", "url": "https://github.com/apache/flink/pull/13648#discussion_r508345496", "createdAt": "2020-10-20T09:22:37Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NTI4MA=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3NDg1Mg==", "bodyText": "Yes, that's so true upon reconnection. Good catch!", "url": "https://github.com/apache/flink/pull/13648#discussion_r508374852", "createdAt": "2020-10-20T10:06:57Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NTI4MA=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE5MTAwNQ==", "bodyText": "added the lock.\ntwo netty threads may require the same view to release.", "url": "https://github.com/apache/flink/pull/13648#discussion_r509191005", "createdAt": "2020-10-21T11:11:35Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1NTI4MA=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDU2NDcxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMzo0NzoxMFrOHkPMYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwMzo1MzoxOFrOHkprBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTcxMw==", "bodyText": "I couldn't find any differences from super.toString other than class name.\nCan we just replace in super \"PipelinedSubpartition with getSiimpleClassName instead of overriding?\nditto: view", "url": "https://github.com/apache/flink/pull/13648#discussion_r507759713", "createdAt": "2020-10-19T13:47:10Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;\n+\t\tisPartialBuffer = true;\n+\t\tisBlockedByCheckpoint = false;\n+\t\tsequenceNumber = 0;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5MzU0MQ==", "bodyText": "That's a good suggestion!! Thanks!", "url": "https://github.com/apache/flink/pull/13648#discussion_r508193541", "createdAt": "2020-10-20T03:53:18Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;\n+\t\tisPartialBuffer = true;\n+\t\tisBlockedByCheckpoint = false;\n+\t\tsequenceNumber = 0;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc1OTcxMw=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDcyNDk2OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartitionView.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDoxNzowMVrOHkQyQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODowOToxMVrOHl7rBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NTc5NQ==", "bodyText": "I think this method is called not only upon downstream RPC, but also on task shutdown and other cases.\nIf so, completely skipping of super.releaseAllResources can lead to resource leaks in those cases.\nWDYT?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507785795", "createdAt": "2020-10-19T14:17:01Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartitionView.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * View over a pipelined in-memory only subpartition allowing reconnecting.\n+ */\n+public class PipelinedApproximateSubpartitionView extends PipelinedSubpartitionView {\n+\n+\tPipelinedApproximateSubpartitionView(PipelinedApproximateSubpartition parent, BufferAvailabilityListener listener) {\n+\t\tsuper(parent, listener);\n+\t}\n+\n+\t@Override\n+\tpublic void releaseAllResources() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNDQxMg==", "bodyText": "That's a good question, I probably should add some description somewhere to explain this.\nFor view release, the PipelinedSubpartitionView#releaseAllResources (the original one) notifies its parent's parent (the result partition) that the corresponding subpartition has already been consumed (able to release). If all its subpartitions are released, the result partition is released.\nIn PipelinedApproximateSubpartitionView#releaseAllResources, we only set the readView to null; The partition is set tracked in JobMasterPartitionTrackerImpl#startTrackingPartition . The change would be included in the next diff (draft PR 7d31593), with the failover strategy change altogether.\nIn that case, the result partition would be released in case of the job exit.\nIn task failure case, the produced partition would be released by its corresponding RecordWriter.", "url": "https://github.com/apache/flink/pull/13648#discussion_r508234412", "createdAt": "2020-10-20T06:16:43Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartitionView.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * View over a pipelined in-memory only subpartition allowing reconnecting.\n+ */\n+public class PipelinedApproximateSubpartitionView extends PipelinedSubpartitionView {\n+\n+\tPipelinedApproximateSubpartitionView(PipelinedApproximateSubpartition parent, BufferAvailabilityListener listener) {\n+\t\tsuper(parent, listener);\n+\t}\n+\n+\t@Override\n+\tpublic void releaseAllResources() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NTc5NQ=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM0ODcxNA==", "bodyText": "Thanks for the explanation.\nCan you please elaborate on\n\nIn task failure case, the produced partition would be released by its corresponding RecordWriter.\n\nI don't see any calls from RecordWriter to release its targetPartition. Do you mean they will be added in the next diff too?", "url": "https://github.com/apache/flink/pull/13648#discussion_r508348714", "createdAt": "2020-10-20T09:27:17Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartitionView.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * View over a pipelined in-memory only subpartition allowing reconnecting.\n+ */\n+public class PipelinedApproximateSubpartitionView extends PipelinedSubpartitionView {\n+\n+\tPipelinedApproximateSubpartitionView(PipelinedApproximateSubpartition parent, BufferAvailabilityListener listener) {\n+\t\tsuper(parent, listener);\n+\t}\n+\n+\t@Override\n+\tpublic void releaseAllResources() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NTc5NQ=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwNTkzMw==", "bodyText": "In Task#releaseResources\n                        if (isCanceledOrFailed()) {\n\t\t\t\tpartitionWriter.fail(getFailureCause());\n\t\t\t}", "url": "https://github.com/apache/flink/pull/13648#discussion_r508405933", "createdAt": "2020-10-20T10:57:54Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartitionView.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * View over a pipelined in-memory only subpartition allowing reconnecting.\n+ */\n+public class PipelinedApproximateSubpartitionView extends PipelinedSubpartitionView {\n+\n+\tPipelinedApproximateSubpartitionView(PipelinedApproximateSubpartition parent, BufferAvailabilityListener listener) {\n+\t\tsuper(parent, listener);\n+\t}\n+\n+\t@Override\n+\tpublic void releaseAllResources() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NTc5NQ=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUzNzAzMA==", "bodyText": "Got it, thanks.", "url": "https://github.com/apache/flink/pull/13648#discussion_r509537030", "createdAt": "2020-10-21T18:09:11Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartitionView.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * View over a pipelined in-memory only subpartition allowing reconnecting.\n+ */\n+public class PipelinedApproximateSubpartitionView extends PipelinedSubpartitionView {\n+\n+\tPipelinedApproximateSubpartitionView(PipelinedApproximateSubpartition parent, BufferAvailabilityListener listener) {\n+\t\tsuper(parent, listener);\n+\t}\n+\n+\t@Override\n+\tpublic void releaseAllResources() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc4NTc5NQ=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDc2ODgxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDoyNToyOFrOHkRNVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODowODo1MVrOHl7pvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5MjcyNg==", "bodyText": "I think there is no point in adding explicit requireNonNull just before dereferencing it.", "url": "https://github.com/apache/flink/pull/13648#discussion_r507792726", "createdAt": "2020-10-19T14:25:28Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -259,9 +260,10 @@ BufferAndBacklog pollBuffer() {\n \t\t\t}\n \n \t\t\twhile (!buffers.isEmpty()) {\n-\t\t\t\tBufferConsumer bufferConsumer = buffers.peek().getBufferConsumer();\n+\t\t\t\tBufferConsumerWithPartialRecordLength bufferConsumerWithPartialRecordLength = buffers.peek();\n+\t\t\t\tBufferConsumer bufferConsumer = requireNonNull(bufferConsumerWithPartialRecordLength).getBufferConsumer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNTc2OQ==", "bodyText": "add here to avoid IDE check warning.", "url": "https://github.com/apache/flink/pull/13648#discussion_r508235769", "createdAt": "2020-10-20T06:20:10Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -259,9 +260,10 @@ BufferAndBacklog pollBuffer() {\n \t\t\t}\n \n \t\t\twhile (!buffers.isEmpty()) {\n-\t\t\t\tBufferConsumer bufferConsumer = buffers.peek().getBufferConsumer();\n+\t\t\t\tBufferConsumerWithPartialRecordLength bufferConsumerWithPartialRecordLength = buffers.peek();\n+\t\t\t\tBufferConsumer bufferConsumer = requireNonNull(bufferConsumerWithPartialRecordLength).getBufferConsumer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5MjcyNg=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1MzcxMw==", "bodyText": "I think this IDE warning doesn't make sense here so.\nI'd prefer to alter IDE behavior rather than code (e.g. by adding @SuppressWarnings(\"ConstantConditions\")).", "url": "https://github.com/apache/flink/pull/13648#discussion_r508353713", "createdAt": "2020-10-20T09:34:45Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -259,9 +260,10 @@ BufferAndBacklog pollBuffer() {\n \t\t\t}\n \n \t\t\twhile (!buffers.isEmpty()) {\n-\t\t\t\tBufferConsumer bufferConsumer = buffers.peek().getBufferConsumer();\n+\t\t\t\tBufferConsumerWithPartialRecordLength bufferConsumerWithPartialRecordLength = buffers.peek();\n+\t\t\t\tBufferConsumer bufferConsumer = requireNonNull(bufferConsumerWithPartialRecordLength).getBufferConsumer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5MjcyNg=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIxMzk2Nw==", "bodyText": "I agree, let's just remove it.", "url": "https://github.com/apache/flink/pull/13648#discussion_r509213967", "createdAt": "2020-10-21T11:52:26Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -259,9 +260,10 @@ BufferAndBacklog pollBuffer() {\n \t\t\t}\n \n \t\t\twhile (!buffers.isEmpty()) {\n-\t\t\t\tBufferConsumer bufferConsumer = buffers.peek().getBufferConsumer();\n+\t\t\t\tBufferConsumerWithPartialRecordLength bufferConsumerWithPartialRecordLength = buffers.peek();\n+\t\t\t\tBufferConsumer bufferConsumer = requireNonNull(bufferConsumerWithPartialRecordLength).getBufferConsumer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5MjcyNg=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTUzNjcwMA==", "bodyText": "Thanks!", "url": "https://github.com/apache/flink/pull/13648#discussion_r509536700", "createdAt": "2020-10-21T18:08:51Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -259,9 +260,10 @@ BufferAndBacklog pollBuffer() {\n \t\t\t}\n \n \t\t\twhile (!buffers.isEmpty()) {\n-\t\t\t\tBufferConsumer bufferConsumer = buffers.peek().getBufferConsumer();\n+\t\t\t\tBufferConsumerWithPartialRecordLength bufferConsumerWithPartialRecordLength = buffers.peek();\n+\t\t\t\tBufferConsumer bufferConsumer = requireNonNull(bufferConsumerWithPartialRecordLength).getBufferConsumer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5MjcyNg=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDc3NTc1OnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDoyNjo0MlrOHkRRtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoyMjowOFrOHksTJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5Mzg0NQ==", "bodyText": "nit: super.buildSliceBuffer ?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507793845", "createdAt": "2020-10-19T14:26:42Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNjU4MA==", "bodyText": "the build() method is a normal build method that is used in the normal build as well.\nprobably just keep it as it is?", "url": "https://github.com/apache/flink/pull/13648#discussion_r508236580", "createdAt": "2020-10-20T06:22:08Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc5Mzg0NQ=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDgyMjQxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartitionFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDozMzowNlrOHkRuzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjo0ODowOVrOHktAKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwMTI5Mg==", "bodyText": "nit: I'd prefer this simple ternary if in a loop:\nfor (int i = 0; i < subpartitions.length; i++) {\n    subpartitions[i] = type == ResultPartitionType.PIPELINED_APPROXIMATE ?\n        new PipelinedApproximateSubpartition(i, pipelinedPartition) :\n        new PipelinedSubpartition(i, pipelinedPartition);\n}", "url": "https://github.com/apache/flink/pull/13648#discussion_r507801292", "createdAt": "2020-10-19T14:33:06Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartitionFactory.java", "diffHunk": "@@ -130,8 +132,15 @@ public ResultPartition create(\n \t\t\t\tbufferCompressor,\n \t\t\t\tbufferPoolFactory);\n \n+\t\t\tBiFunction<Integer, PipelinedResultPartition, PipelinedSubpartition> factory;\n+\t\t\tif (type == ResultPartitionType.PIPELINED_APPROXIMATE) {\n+\t\t\t\tfactory = PipelinedApproximateSubpartition::new;\n+\t\t\t} else {\n+\t\t\t\tfactory = PipelinedSubpartition::new;\n+\t\t\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI0ODEwNg==", "bodyText": "LOL, I've changed from this version -> the fancy version based on Arvid's suggestion.", "url": "https://github.com/apache/flink/pull/13648#discussion_r508248106", "createdAt": "2020-10-20T06:48:09Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartitionFactory.java", "diffHunk": "@@ -130,8 +132,15 @@ public ResultPartition create(\n \t\t\t\tbufferCompressor,\n \t\t\t\tbufferPoolFactory);\n \n+\t\t\tBiFunction<Integer, PipelinedResultPartition, PipelinedSubpartition> factory;\n+\t\t\tif (type == ResultPartitionType.PIPELINED_APPROXIMATE) {\n+\t\t\t\tfactory = PipelinedApproximateSubpartition::new;\n+\t\t\t} else {\n+\t\t\t\tfactory = PipelinedSubpartition::new;\n+\t\t\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgwMTI5Mg=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDg4OTcxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo0NTo0MFrOHkSZvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjo1MDozMlrOHktEeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxMjI4NQ==", "bodyText": "The name isPartialBuffer is a bit misleading to me because it implies that partial buffer was emitted.\nBut in fact, this field reflects that the view was released.\nHow about isPartialBufferCleanupRequired?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507812285", "createdAt": "2020-10-19T14:45:40Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;\n+\t\tisPartialBuffer = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI0OTIwOQ==", "bodyText": "That a good name!", "url": "https://github.com/apache/flink/pull/13648#discussion_r508249209", "createdAt": "2020-10-20T06:50:32Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;\n+\t\tisPartialBuffer = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgxMjI4NQ=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDk1NTAxOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNDo1Nzo1OFrOHkTA4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo1NTowOFrOHk2h3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjMwNg==", "bodyText": "I'm concerned about a potential race condition here (even with synchronized added).\nConsider a case:\nThread1: call subpartition.createReadView() - create view1\nThread2: obtain a reference to view1\nThread1: call subpartition.createReadView() - create view2\nThread2: call view1.releaseAllResources <-- nulls out subpartition.readView; view2 is now corrupt?\nWDYT?", "url": "https://github.com/apache/flink/pull/13648#discussion_r507822306", "createdAt": "2020-10-19T14:57:58Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI1MDEyOQ==", "bodyText": "creation and release happen in the same netty server thread.\na view can be released multiple times before creation. The release behavior is idempotent.", "url": "https://github.com/apache/flink/pull/13648#discussion_r508250129", "createdAt": "2020-10-20T06:52:28Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjMwNg=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MjU0Ng==", "bodyText": "Is it the same netty thread after reconnection? (same question as above)\nAnd from the call hierarchy, I see it's called not only from the netty thread.\nIn either case, I think here it's easier to avoid concurrency issues than to investigate whether they can happen.", "url": "https://github.com/apache/flink/pull/13648#discussion_r508372546", "createdAt": "2020-10-20T10:03:20Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjMwNg=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4MjI0MA==", "bodyText": "Would this possibly happen?\n\nThread1: call subpartition.createReadView() - create view1\nThread2: obtain a reference to view1\n\nIt is not possible to access to view1 through a different thread, unless downstream reconnects, meaning either thread1 releases the view upon disconnecting from downstream or a different thread (thread2) reconnects and release the view; that would be guarded by the buffer lock as you suggested.\n\nThread1: call subpartition.createReadView() - create view2\nThread2: call view1.releaseAllResources <-- nulls out subpartition.readView; view2 is now corrupt?\n\nsame as above.", "url": "https://github.com/apache/flink/pull/13648#discussion_r508382240", "createdAt": "2020-10-20T10:19:00Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjMwNg=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwNDE5MA==", "bodyText": "But I can think of a possible case that might have a problem:\nThread1: create view\nThread2: release view, create view\nThread1: release view (the release is way too slow)\nLet me think of this tonight. In the worst case, we can always release view before create a new one.", "url": "https://github.com/apache/flink/pull/13648#discussion_r508404190", "createdAt": "2020-10-20T10:55:08Z", "author": {"login": "curcur"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBuffer = false;\n+\n+\tPipelinedApproximateSubpartition(int index, ResultPartition parent) {\n+\t\tsuper(index, parent);\n+\t}\n+\n+\t@Override\n+\tpublic PipelinedSubpartitionView createReadView(BufferAvailabilityListener availabilityListener) {\n+\t\tsynchronized (buffers) {\n+\t\t\tcheckState(!isReleased);\n+\n+\t\t\t// if the view is not released yet\n+\t\t\tif (readView != null) {\n+\t\t\t\tLOG.info(\"{} ReadView for Subpartition {} of {} has not been released!\",\n+\t\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\t\t\t\treleaseView();\n+\t\t\t}\n+\n+\t\t\tLOG.debug(\"{}: Creating read view for subpartition {} of partition {}.\",\n+\t\t\t\tparent.getOwningTaskName(), getSubPartitionIndex(), parent.getPartitionId());\n+\n+\t\t\treadView = new PipelinedApproximateSubpartitionView(this, availabilityListener);\n+\t\t}\n+\n+\t\treturn readView;\n+\t}\n+\n+\t@Override\n+\tBuffer buildSliceBuffer(BufferConsumerWithPartialRecordLength buffer) {\n+\t\tif (isPartialBuffer) {\n+\t\t\tisPartialBuffer = !buffer.cleanupPartialRecord();\n+\t\t}\n+\n+\t\treturn buffer.build();\n+\t}\n+\n+\tvoid releaseView() {\n+\t\tLOG.info(\"Releasing view of subpartition {} of {}.\", getSubPartitionIndex(), parent.getPartitionId());\n+\t\treadView = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyMjMwNg=="}, "originalCommit": {"oid": "d259609d97fa73cd79b3dd400e2868f6be1c5e89"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NDc1MTczOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToxODo1OVrOHmYfqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwOToxODo1OVrOHmYfqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAwOTI1OA==", "bodyText": "@GuardedBy(\"buffers\") ?", "url": "https://github.com/apache/flink/pull/13648#discussion_r510009258", "createdAt": "2020-10-22T09:18:59Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedApproximateSubpartition.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.partition;\n+\n+import org.apache.flink.annotation.VisibleForTesting;\n+import org.apache.flink.runtime.io.network.buffer.Buffer;\n+import org.apache.flink.runtime.io.network.buffer.BufferConsumerWithPartialRecordLength;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A pipelined in-memory only subpartition, which allows to reconnecting after failure.\n+ * Only one view is allowed at a time to read teh subpartition.\n+ */\n+public class PipelinedApproximateSubpartition extends PipelinedSubpartition {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PipelinedApproximateSubpartition.class);\n+\n+\tprivate boolean isPartialBufferCleanupRequired = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dcce3b9301d178ae2e3ab05888260b05f24b15a"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 162, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}