{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NDk4ODM5", "number": 10737, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwMzo0MzoyMVrODV4bEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzoyMDo0MlrODV5wpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjcxMTIyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/ExprCodeGenerator.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwMzo0MzoyMVrOFaU4DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNDowMjoxMFrOFaVBUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE0OTMyNA==", "bodyText": "throws", "url": "https://github.com/apache/flink/pull/10737#discussion_r363149324", "createdAt": "2020-01-06T03:43:21Z", "author": {"login": "JingsongLi"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/ExprCodeGenerator.scala", "diffHunk": "@@ -285,11 +287,30 @@ class ExprCodeGenerator(ctx: CodeGeneratorContext, nullableInput: Boolean)\n       case _ => // ok\n     }\n \n-    val setFieldsCode = fieldExprs.zipWithIndex.map { case (fieldExpr, index) =>\n+    val setFieldsCodes = fieldExprs.zipWithIndex.map { case (fieldExpr, index) =>\n       val pos = fieldExprIdxToOutputRowPosMap.getOrElse(index,\n         throw new CodeGenException(s\"Illegal field expr index: $index\"))\n       baseRowSetField(ctx, returnTypeClazz, outRow, pos.toString, fieldExpr, outRowWriter)\n-    }.mkString(\"\\n\")\n+    }\n+    val totalLen = setFieldsCodes.map(_.length).sum\n+    val maxCodeLength = ctx.tableConfig.getMaxGeneratedCodeLength\n+    val setFieldsCode = if (allowSplit && totalLen > maxCodeLength) {\n+      // do the split.\n+      ctx.setSplit()\n+      setFieldsCodes.map(project => {\n+        val methodName = newName(\"split\")\n+        val method =\n+          s\"\"\"\n+            |private void $methodName() throw Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe8321877a13fcaf202f24643e3ff0933cfb63c9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE1MTY5OA==", "bodyText": "Thanks for the review, fixed.", "url": "https://github.com/apache/flink/pull/10737#discussion_r363151698", "createdAt": "2020-01-06T04:02:10Z", "author": {"login": "libenchao"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/ExprCodeGenerator.scala", "diffHunk": "@@ -285,11 +287,30 @@ class ExprCodeGenerator(ctx: CodeGeneratorContext, nullableInput: Boolean)\n       case _ => // ok\n     }\n \n-    val setFieldsCode = fieldExprs.zipWithIndex.map { case (fieldExpr, index) =>\n+    val setFieldsCodes = fieldExprs.zipWithIndex.map { case (fieldExpr, index) =>\n       val pos = fieldExprIdxToOutputRowPosMap.getOrElse(index,\n         throw new CodeGenException(s\"Illegal field expr index: $index\"))\n       baseRowSetField(ctx, returnTypeClazz, outRow, pos.toString, fieldExpr, outRowWriter)\n-    }.mkString(\"\\n\")\n+    }\n+    val totalLen = setFieldsCodes.map(_.length).sum\n+    val maxCodeLength = ctx.tableConfig.getMaxGeneratedCodeLength\n+    val setFieldsCode = if (allowSplit && totalLen > maxCodeLength) {\n+      // do the split.\n+      ctx.setSplit()\n+      setFieldsCodes.map(project => {\n+        val methodName = newName(\"split\")\n+        val method =\n+          s\"\"\"\n+            |private void $methodName() throw Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE0OTMyNA=="}, "originalCommit": {"oid": "fe8321877a13fcaf202f24643e3ff0933cfb63c9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjkyMDMzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/CodeGeneratorContext.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzoxMjo0N1rOFaWxJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzoxMjo0N1rOFaWxJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4MDMyNg==", "bodyText": "Rename the variable to isCodeSplit to make it clear that the code is splitted?\nThe comment can also be improved Flag that indicates whether the generated code is split into several methods.", "url": "https://github.com/apache/flink/pull/10737#discussion_r363180326", "createdAt": "2020-01-06T07:12:47Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/CodeGeneratorContext.scala", "diffHunk": "@@ -108,6 +108,11 @@ class CodeGeneratorContext(val tableConfig: TableConfig) {\n     */\n   private var currentMethodNameForLocalVariables = \"DEFAULT\"\n \n+  /**\n+   * Flag indicating whether split has occurred.\n+   */\n+  private var isSplit = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5bceadd1288ab341212b44480c90d10329f5c74"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjkzMDI5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/CodeGeneratorContext.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzoyMDo0MlrOFaW20A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNzoyMDo0MlrOFaW20A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE4MTc3Ng==", "bodyText": "enableCodeSplit() or setCodeSplit()?  Please also add Javadoc above this method.", "url": "https://github.com/apache/flink/pull/10737#discussion_r363181776", "createdAt": "2020-01-06T07:20:42Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/codegen/CodeGeneratorContext.scala", "diffHunk": "@@ -143,6 +148,9 @@ class CodeGeneratorContext(val tableConfig: TableConfig) {\n     reusableLocalVariableStatements(methodName) = mutable.LinkedHashSet[String]()\n   }\n \n+  def setSplit(): Unit = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5bceadd1288ab341212b44480c90d10329f5c74"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1262, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}