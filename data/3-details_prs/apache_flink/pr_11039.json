{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDE5NDU1", "number": 11039, "title": "[FLINK-15942] Do not log huge/infinite cpu/memory resources in profiles", "bodyText": "What is the purpose of the change\nIn local execution mode, we assume that cpu and task memory of slots are infinite to match any requests. Those resources are configured to Double/Long.MAX_VALUE values in this case. These ridiculously huge numbers get logged as slot's ResourceProfile and can confuse users. As a quick fix, we do not output the values which exceed a certain huge threshold.\nBrief change log\nAdjust ResourceProfile#toString.\nVerifying this change\nunit tests", "createdAt": "2020-02-07T13:46:01Z", "url": "https://github.com/apache/flink/pull/11039", "merged": true, "mergeCommit": {"oid": "43b4289c0851b93da7d57d97e911f8b8091f11f5"}, "closed": true, "closedAt": "2020-02-07T17:12:24Z", "author": {"login": "azagrebin"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcB_gN-gH2gAyMzcyNDE5NDU1OjQzYjQyODljMDg1MWI5M2RhN2Q1N2Q5N2U5MTFmOGI4MDkxZjExZjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCCaiyAFqTM1NTI4ODA2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "43b4289c0851b93da7d57d97e911f8b8091f11f5", "author": {"user": {"login": "azagrebin", "name": null}}, "url": "https://github.com/apache/flink/commit/43b4289c0851b93da7d57d97e911f8b8091f11f5", "committedDate": "2020-02-07T13:39:13Z", "message": "[FLINK-15942] Do not log huge/infinite cpu/memory resources in profiles"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1Mjg4MDY0", "url": "https://github.com/apache/flink/pull/11039#pullrequestreview-355288064", "createdAt": "2020-02-07T16:42:11Z", "commit": {"oid": "43b4289c0851b93da7d57d97e911f8b8091f11f5"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0MjoxMVrOFnDO1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowMjoyM1rOFnD2eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5MTczNQ==", "bodyText": "extends TestLogger is missing.", "url": "https://github.com/apache/flink/pull/11039#discussion_r376491735", "createdAt": "2020-02-07T16:42:11Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/types/ResourceProfileTest.java", "diffHunk": "@@ -29,17 +29,22 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static org.apache.flink.runtime.clusterframework.types.ResourceProfile.MAX_CPU_CORE_NUMBER_TO_LOG;\n+import static org.apache.flink.runtime.clusterframework.types.ResourceProfile.MAX_MEMORY_SIZE_TO_LOG;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotEquals;\n import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertThat;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n /**\n  * Tests for the {@link ResourceProfile}.\n  */\n public class ResourceProfileTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43b4289c0851b93da7d57d97e911f8b8091f11f5"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMTg4MA==", "bodyText": "I think we could simplify the assertion a bit by testing whether the string contains cpuCores and a configured memory.", "url": "https://github.com/apache/flink/pull/11039#discussion_r376501880", "createdAt": "2020-02-07T17:02:23Z", "author": {"login": "tillrohrmann"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/clusterframework/types/ResourceProfileTest.java", "diffHunk": "@@ -387,4 +392,36 @@ public void testSingletonPropertyOfAny() throws Exception {\n \n \t\tassertSame(ResourceProfile.ANY, copiedProfile);\n \t}\n+\n+\t@Test\n+\tpublic void testToStringWithoutCpu() {\n+\t\tdouble notLoggedCpu = MAX_CPU_CORE_NUMBER_TO_LOG.doubleValue() + 1.0;\n+\t\tResourceProfile resourceProfile = getResourceProfileForLogsWithCpuVal(notLoggedCpu);\n+\t\tassertThat(resourceProfile.toString(), is(getExpectedToString(resourceProfile, \"\")));\n+\t}\n+\n+\t@Test\n+\tpublic void testToStringWithCpu() {\n+\t\tResourceProfile resourceProfile = getResourceProfileForLogsWithCpuVal(1.0);\n+\t\tassertThat(resourceProfile.toString(), is(getExpectedToString(resourceProfile, \"cpuCores=1.0, \")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43b4289c0851b93da7d57d97e911f8b8091f11f5"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4255, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}