{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MjQ5ODI3", "number": 13097, "title": "[FLINK-18864][python] Support key_by() operation for Python DataStrea\u2026", "bodyText": "What is the purpose of the change\nSupport key_by() operation for Python DataStream API.\nBrief change log\n\nAdd a new class nemed KeyStream to represent a keyed DataStream.\nAdd key_by() interface for DataStream.\n\nVerifying this change\nThis change has test cases covered in test_key_by() and test_key_by_map() in test_data_stream.py\nDoes this pull request potentially affect one of the following parts:\n\nDependencies (does it add or upgrade a dependency): ( no)\nThe public API, i.e., is any changed class annotated with @Public(Evolving): ( no)\nThe serializers: (no)\nThe runtime per-record code paths (performance sensitive): (no)\nAnything that affects deployment or recovery: JobManager (and its components), Checkpointing, Kubernetes/Yarn/Mesos, ZooKeeper: (no)\nThe S3 file system connector: (no)\n\nDocumentation\n\nDoes this pull request introduce a new feature? (no)\nIf yes, how is the feature documented? (not documented)", "createdAt": "2020-08-10T03:02:54Z", "url": "https://github.com/apache/flink/pull/13097", "merged": true, "mergeCommit": {"oid": "fa9e4a5ec330998239c9a8e6f974da5bb8c1599b"}, "closed": true, "closedAt": "2020-08-11T01:42:53Z", "author": {"login": "shuiqiangchen"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9curDgFqTQ2Mzk4Mzk5Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9h4XpAH2gAyNDY1MjQ5ODI3OmViOGM4MWZkMDYyMjNhY2ZkNDNiZjViM2Y0Nzc4YmEzMmU4YjRhZGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTgzOTkz", "url": "https://github.com/apache/flink/pull/13097#pullrequestreview-463983993", "createdAt": "2020-08-10T06:37:33Z", "commit": {"oid": "52e8670eef5651d09ad0defeb1a8729aa7c589ba"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjozNzozM1rOG-Cz9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNzowMzozN1rOG-DVlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMDk2NQ==", "bodyText": "The key can be other types if key_by with type information. For example, ds.key_by(MyKeySelector(), Types.INT())", "url": "https://github.com/apache/flink/pull/13097#discussion_r467710965", "createdAt": "2020-08-10T06:37:33Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/functions/python/PickledKeySelector.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.functions.python;\n+\n+import org.apache.flink.api.java.functions.KeySelector;\n+import org.apache.flink.types.Row;\n+\n+import net.razorvine.pickle.Unpickler;\n+\n+/**\n+ * PickledKeySelector is responsible for extracting the first filed of the input row as key.\n+ * The input row is generated by python DataStream map function in the format of (key_selector.get_key(value), value)\n+ * tuple2.\n+ */\n+public class PickledKeySelector implements KeySelector<Row, Object> {\n+\n+\tprivate Unpickler unpickler = null;\n+\n+\t@Override\n+\tpublic Object getKey(Row value) throws Exception {\n+\n+\t\tif (this.unpickler == null) {\n+\t\t\tunpickler = new Unpickler();\n+\t\t}\n+\n+\t\tObject key = value.getField(0);\n+\t\tif (key instanceof byte[]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e8670eef5651d09ad0defeb1a8729aa7c589ba"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjQwMA==", "bodyText": "Use java annotation to describe Java class(e.g., PickledKeySelector, DataStream).", "url": "https://github.com/apache/flink/pull/13097#discussion_r467712400", "createdAt": "2020-08-10T06:41:58Z", "author": {"login": "hequn8128"}, "path": "flink-python/src/main/java/org/apache/flink/datastream/runtime/functions/python/PickledKeySelector.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.datastream.runtime.functions.python;\n+\n+import org.apache.flink.api.java.functions.KeySelector;\n+import org.apache.flink.types.Row;\n+\n+import net.razorvine.pickle.Unpickler;\n+\n+/**\n+ * PickledKeySelector is responsible for extracting the first filed of the input row as key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e8670eef5651d09ad0defeb1a8729aa7c589ba"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMzg4MQ==", "bodyText": ".keyBy(PickledKeySelector(), key_type_info)", "url": "https://github.com/apache/flink/pull/13097#discussion_r467713881", "createdAt": "2020-08-10T06:46:48Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -233,6 +234,54 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             j_python_data_stream_scalar_function_operator\n         ))\n \n+    def key_by(self, key_selector: Union[Callable, KeySelector],\n+               key_type_info: TypeInformation = None) -> 'KeyedStream':\n+        \"\"\"\n+        Creates a new KeyedStream that uses the provided key for partitioning its operator states.\n+\n+        :param key_selector: The KeySelector to be used for extracting the key for partitioning.\n+        :param key_type_info: The type information describing the key type.\n+        :return: The DataStream with partitioned state(i.e. KeyedStream).\n+        \"\"\"\n+        if callable(key_selector):\n+            key_selector = KeySelectorFunctionWrapper(key_selector)\n+        if not isinstance(key_selector, (KeySelector, KeySelectorFunctionWrapper)):\n+            raise TypeError(\"Parameter key_selector should be a type of KeySelector.\")\n+\n+        gateway = get_gateway()\n+        PickledKeySelector = gateway.jvm \\\n+            .org.apache.flink.datastream.runtime.functions.python.PickledKeySelector\n+        j_output_type_info = self._j_data_stream.getTransformation().getOutputType()\n+        output_type_info = typeinfo._from_java_type(j_output_type_info)\n+        if key_type_info is None:\n+            key_type_info = Types.PICKLED_BYTE_ARRAY()\n+        generated_key_stream = KeyedStream(self.map(lambda x: (key_selector.get_key(x), x),\n+                                                    type_info=Types.ROW([key_type_info,\n+                                                                         output_type_info]))\n+                                           ._j_data_stream\n+                                           .keyBy(PickledKeySelector()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e8670eef5651d09ad0defeb1a8729aa7c589ba"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNDcwNA==", "bodyText": "The method has never been used.", "url": "https://github.com/apache/flink/pull/13097#discussion_r467714704", "createdAt": "2020-08-10T06:49:28Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -233,6 +234,54 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             j_python_data_stream_scalar_function_operator\n         ))\n \n+    def key_by(self, key_selector: Union[Callable, KeySelector],\n+               key_type_info: TypeInformation = None) -> 'KeyedStream':\n+        \"\"\"\n+        Creates a new KeyedStream that uses the provided key for partitioning its operator states.\n+\n+        :param key_selector: The KeySelector to be used for extracting the key for partitioning.\n+        :param key_type_info: The type information describing the key type.\n+        :return: The DataStream with partitioned state(i.e. KeyedStream).\n+        \"\"\"\n+        if callable(key_selector):\n+            key_selector = KeySelectorFunctionWrapper(key_selector)\n+        if not isinstance(key_selector, (KeySelector, KeySelectorFunctionWrapper)):\n+            raise TypeError(\"Parameter key_selector should be a type of KeySelector.\")\n+\n+        gateway = get_gateway()\n+        PickledKeySelector = gateway.jvm \\\n+            .org.apache.flink.datastream.runtime.functions.python.PickledKeySelector\n+        j_output_type_info = self._j_data_stream.getTransformation().getOutputType()\n+        output_type_info = typeinfo._from_java_type(j_output_type_info)\n+        if key_type_info is None:\n+            key_type_info = Types.PICKLED_BYTE_ARRAY()\n+        generated_key_stream = KeyedStream(self.map(lambda x: (key_selector.get_key(x), x),\n+                                                    type_info=Types.ROW([key_type_info,\n+                                                                         output_type_info]))\n+                                           ._j_data_stream\n+                                           .keyBy(PickledKeySelector()))\n+        generated_key_stream._original_data_type_info = output_type_info\n+        return generated_key_stream\n+\n+    def _align_output_type(self) -> 'DataStream':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e8670eef5651d09ad0defeb1a8729aa7c589ba"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNzQ0NQ==", "bodyText": "Throw exception when perform set_parallelism, name, uid, etc.", "url": "https://github.com/apache/flink/pull/13097#discussion_r467717445", "createdAt": "2020-08-10T06:57:35Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -290,3 +339,39 @@ def _get_java_python_function_operator(self, func: Union[Function, FunctionWrapp\n             output_type_info.get_java_type_info(),\n             j_python_data_stream_function_info)\n         return j_python_data_stream_scalar_function_operator, output_type_info\n+\n+\n+class KeyedStream(DataStream):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e8670eef5651d09ad0defeb1a8729aa7c589ba"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxOTU3NQ==", "bodyText": "The two tests are duplicated?", "url": "https://github.com/apache/flink/pull/13097#discussion_r467719575", "createdAt": "2020-08-10T07:03:37Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/tests/test_data_stream.py", "diffHunk": "@@ -140,15 +135,68 @@ def flat_map(value):\n \n         flat_mapped_stream = ds.flat_map(flat_map, type_info=Types.ROW([Types.STRING(),\n                                                                         Types.INT()]))\n-        collect_util = DataStreamCollectUtil()\n-        collect_util.collect(flat_mapped_stream)\n+        self.collect_util.collect(flat_mapped_stream)\n         self.env.execute('flat_map_test')\n-        results = collect_util.results()\n+        results = self.collect_util.results()\n         expected = ['a,0', 'bdc,2', 'deeefg,4']\n         results.sort()\n         expected.sort()\n         self.assertEqual(expected, results)\n \n+    def test_key_by(self):\n+        element_collection = [('a', 0), ('b', 0), ('c', 1), ('d', 1), ('e', 2)]\n+        self.env.set_parallelism(1)\n+        ds = self.env.from_collection(element_collection,\n+                                      type_info=Types.ROW([Types.STRING(), Types.INT()]))\n+\n+        class AssertKeyMapFunction(MapFunction):\n+            def __init__(self):\n+                self.pre = None\n+\n+            def map(self, value):\n+                if value[0] == 'b':\n+                    assert self.pre == 'a'\n+                if value[0] == 'd':\n+                    assert self.pre == 'c'\n+                self.pre = value[0]\n+                return value\n+\n+        mapped_stream = ds.key_by(MyKeySelector()).map(AssertKeyMapFunction())\n+        self.collect_util.collect(mapped_stream)\n+        self.env.execute('key_by_test')\n+        results = self.collect_util.results()\n+        expected = [\"<Row('a', 0)>\", \"<Row('b', 0)>\", \"<Row('c', 1)>\", \"<Row('d', 1)>\",\n+                    \"<Row('e', 2)>\"]\n+        results.sort()\n+        expected.sort()\n+        self.assertEqual(expected, results)\n+\n+    def test_key_by_map(self):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e8670eef5651d09ad0defeb1a8729aa7c589ba"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDM4NDY5", "url": "https://github.com/apache/flink/pull/13097#pullrequestreview-464038469", "createdAt": "2020-08-10T08:25:32Z", "commit": {"oid": "3a4fc8cbc9cab1b8395b92c33b960fe4913c6d4a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyNTozMlrOG-FebQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyNjo1N1rOG-FhIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1NDYwNQ==", "bodyText": "Remove this method in this PR.", "url": "https://github.com/apache/flink/pull/13097#discussion_r467754605", "createdAt": "2020-08-10T08:25:32Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -233,6 +234,56 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             j_python_data_stream_scalar_function_operator\n         ))\n \n+    def key_by(self, key_selector: Union[Callable, KeySelector],\n+               key_type_info: TypeInformation = None) -> 'KeyedStream':\n+        \"\"\"\n+        Creates a new KeyedStream that uses the provided key for partitioning its operator states.\n+\n+        :param key_selector: The KeySelector to be used for extracting the key for partitioning.\n+        :param key_type_info: The type information describing the key type.\n+        :return: The DataStream with partitioned state(i.e. KeyedStream).\n+        \"\"\"\n+        if callable(key_selector):\n+            key_selector = KeySelectorFunctionWrapper(key_selector)\n+        if not isinstance(key_selector, (KeySelector, KeySelectorFunctionWrapper)):\n+            raise TypeError(\"Parameter key_selector should be a type of KeySelector.\")\n+\n+        gateway = get_gateway()\n+        PickledKeySelector = gateway.jvm \\\n+            .org.apache.flink.datastream.runtime.functions.python.PickledKeySelector\n+        j_output_type_info = self._j_data_stream.getTransformation().getOutputType()\n+        output_type_info = typeinfo._from_java_type(j_output_type_info)\n+        is_key_pickled_byte_array = False\n+        if key_type_info is None:\n+            key_type_info = Types.PICKLED_BYTE_ARRAY()\n+            is_key_pickled_byte_array = True\n+        generated_key_stream = KeyedStream(self.map(lambda x: (key_selector.get_key(x), x),\n+                                                    type_info=Types.ROW([key_type_info,\n+                                                                         output_type_info]))\n+                                           ._j_data_stream\n+                                           .keyBy(PickledKeySelector(is_key_pickled_byte_array)))\n+        generated_key_stream._original_data_type_info = output_type_info\n+        return generated_key_stream\n+\n+    def _align_output_type(self) -> 'DataStream':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4fc8cbc9cab1b8395b92c33b960fe4913c6d4a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1NDgzNw==", "bodyText": "Throw exception when perform set_parallelism, name, uid, etc.", "url": "https://github.com/apache/flink/pull/13097#discussion_r467754837", "createdAt": "2020-08-10T08:25:57Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -290,3 +341,39 @@ def _get_java_python_function_operator(self, func: Union[Function, FunctionWrapp\n             output_type_info.get_java_type_info(),\n             j_python_data_stream_function_info)\n         return j_python_data_stream_scalar_function_operator, output_type_info\n+\n+\n+class KeyedStream(DataStream):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4fc8cbc9cab1b8395b92c33b960fe4913c6d4a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1NTI5Ng==", "bodyText": ".keyBy(PickledKeySelector(), key_type_info)", "url": "https://github.com/apache/flink/pull/13097#discussion_r467755296", "createdAt": "2020-08-10T08:26:57Z", "author": {"login": "hequn8128"}, "path": "flink-python/pyflink/datastream/data_stream.py", "diffHunk": "@@ -233,6 +234,56 @@ def flat_map(self, func: Union[Callable, FlatMapFunction], type_info: TypeInform\n             j_python_data_stream_scalar_function_operator\n         ))\n \n+    def key_by(self, key_selector: Union[Callable, KeySelector],\n+               key_type_info: TypeInformation = None) -> 'KeyedStream':\n+        \"\"\"\n+        Creates a new KeyedStream that uses the provided key for partitioning its operator states.\n+\n+        :param key_selector: The KeySelector to be used for extracting the key for partitioning.\n+        :param key_type_info: The type information describing the key type.\n+        :return: The DataStream with partitioned state(i.e. KeyedStream).\n+        \"\"\"\n+        if callable(key_selector):\n+            key_selector = KeySelectorFunctionWrapper(key_selector)\n+        if not isinstance(key_selector, (KeySelector, KeySelectorFunctionWrapper)):\n+            raise TypeError(\"Parameter key_selector should be a type of KeySelector.\")\n+\n+        gateway = get_gateway()\n+        PickledKeySelector = gateway.jvm \\\n+            .org.apache.flink.datastream.runtime.functions.python.PickledKeySelector\n+        j_output_type_info = self._j_data_stream.getTransformation().getOutputType()\n+        output_type_info = typeinfo._from_java_type(j_output_type_info)\n+        is_key_pickled_byte_array = False\n+        if key_type_info is None:\n+            key_type_info = Types.PICKLED_BYTE_ARRAY()\n+            is_key_pickled_byte_array = True\n+        generated_key_stream = KeyedStream(self.map(lambda x: (key_selector.get_key(x), x),\n+                                                    type_info=Types.ROW([key_type_info,\n+                                                                         output_type_info]))\n+                                           ._j_data_stream\n+                                           .keyBy(PickledKeySelector(is_key_pickled_byte_array)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a4fc8cbc9cab1b8395b92c33b960fe4913c6d4a"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDYyNDUx", "url": "https://github.com/apache/flink/pull/13097#pullrequestreview-464062451", "createdAt": "2020-08-10T09:03:32Z", "commit": {"oid": "70d1588a2ca469ef4dd78f41760a7b1be3a91488"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "051cb0425e5a4e644abc4033cbe319a91a69cebd", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/051cb0425e5a4e644abc4033cbe319a91a69cebd", "committedDate": "2020-08-10T10:55:47Z", "message": "[FLINK-18864][python] Support key_by() operation for Python DataStream API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd88969eaa2c0dd3894566a4f1e2637e724a609d", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/fd88969eaa2c0dd3894566a4f1e2637e724a609d", "committedDate": "2020-08-10T10:56:58Z", "message": "- fix PickledKeySelector to support user specified key type, clean key_by tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "545155322175ba49ef9973ccad13f93f0b57e2a0", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/545155322175ba49ef9973ccad13f93f0b57e2a0", "committedDate": "2020-08-10T10:56:58Z", "message": "- resolve review issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03a8bdd5a1f59e18ea58fafefacddd76c50a09be", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/03a8bdd5a1f59e18ea58fafefacddd76c50a09be", "committedDate": "2020-08-10T11:18:42Z", "message": "- rebase master branch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70d1588a2ca469ef4dd78f41760a7b1be3a91488", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/70d1588a2ca469ef4dd78f41760a7b1be3a91488", "committedDate": "2020-08-10T08:53:06Z", "message": "- resolve review issues."}, "afterCommit": {"oid": "03a8bdd5a1f59e18ea58fafefacddd76c50a09be", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/03a8bdd5a1f59e18ea58fafefacddd76c50a09be", "committedDate": "2020-08-10T11:18:42Z", "message": "- rebase master branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb8c81fd06223acfd43bf5b3f4778ba32e8b4ade", "author": {"user": {"login": "shuiqiangchen", "name": "Shuiqiang Chen"}}, "url": "https://github.com/apache/flink/commit/eb8c81fd06223acfd43bf5b3f4778ba32e8b4ade", "committedDate": "2020-08-10T13:03:54Z", "message": "[FLINK-18864][python] Simplified test for key_by."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2834, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}