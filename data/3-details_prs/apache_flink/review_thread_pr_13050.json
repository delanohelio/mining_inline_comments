{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMDQzMzM3", "number": 13050, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODoxNjo1MVrOEYYTIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0MjoyN1rOEbcYpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTk5MzkyOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/operations/SqlToOperationConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODoxNjo1MVrOHArvjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODoxNjo1MVrOHArvjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3ODczMg==", "bodyText": "Can we extract the logic from alter view and create view to a common helper method? The code is nearly identical. I am pretty sure we can extract the majority of the logic to a method like:\nCatalogView catalogView = transformToCatalogView(SqlNode query, String comment, List<String> aliases);\n\nRight now we need to modify the code in two different places and the comments differ significantly between the two locations, even though they should be exactly the same.", "url": "https://github.com/apache/flink/pull/13050#discussion_r470478732", "createdAt": "2020-08-14T08:16:51Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/operations/SqlToOperationConverter.java", "diffHunk": "@@ -676,15 +680,20 @@ private Operation convertCreateView(SqlCreateView sqlCreateView) {\n \t\tfinal SqlNode query = sqlCreateView.getQuery();\n \t\tfinal SqlNodeList fieldList = sqlCreateView.getFieldList();\n \n-\t\tSqlNode validateQuery = flinkPlanner.validate(query);\n \t\t// Put the sql string unparse (getQuotedSqlString()) in front of\n \t\t// the node conversion (toQueryOperation()),\n \t\t// because before Calcite 1.22.0, during sql-to-rel conversion, the SqlWindow\n \t\t// bounds state would be mutated as default when they are null (not specified).\n \n \t\t// This bug is fixed in CALCITE-3877 of Calcite 1.23.0.\n \t\tString originalQuery = getQuotedSqlString(query);\n-\t\tString expandedQuery = getQuotedSqlString(validateQuery);\n+\t\tSqlNode validateQuery = flinkPlanner.validate(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTk5NDk1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODoxNzoxM1rOHArwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODoxNzoxM1rOHArwJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3ODg4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Utility that expand SQL identifiers from a SQL query.\n          \n          \n            \n             * Utility that expands SQL identifiers in a SQL query.", "url": "https://github.com/apache/flink/pull/13050#discussion_r470478884", "createdAt": "2020-08-14T08:17:13Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDIwMjc2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMDowMFrOHAtujA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMDowMFrOHAtujA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTI0NA==", "bodyText": "nit: inline assignment", "url": "https://github.com/apache/flink/pull/13050#discussion_r470511244", "createdAt": "2020-08-14T09:20:00Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {\n+\tprivate final FlinkPlannerImpl planner;\n+\n+\tprivate Expander(FlinkPlannerImpl planner) {\n+\t\tthis.planner = Objects.requireNonNull(planner);\n+\t}\n+\n+\t/** Creates an Expander. **/\n+\tpublic static Expander create(FlinkPlannerImpl planner) {\n+\t\treturn new Expander(planner);\n+\t}\n+\n+\t/** Expands identifiers in a given SQL string, returning a {@link Expanded}. */\n+\tpublic Expanded expanded(String ori) {\n+\t\tfinal Map<SqlParserPos, SqlIdentifier> identifiers = new HashMap<>();\n+\t\tfinal SqlNode oriNode;\n+\t\tfinal SqlNode validated;\n+\t\toriNode = planner.parser().parse(ori);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDIwMzM5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMDowOVrOHAtu4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMDowOVrOHAtu4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTMzMQ==", "bodyText": "nit: inline assignment", "url": "https://github.com/apache/flink/pull/13050#discussion_r470511331", "createdAt": "2020-08-14T09:20:09Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {\n+\tprivate final FlinkPlannerImpl planner;\n+\n+\tprivate Expander(FlinkPlannerImpl planner) {\n+\t\tthis.planner = Objects.requireNonNull(planner);\n+\t}\n+\n+\t/** Creates an Expander. **/\n+\tpublic static Expander create(FlinkPlannerImpl planner) {\n+\t\treturn new Expander(planner);\n+\t}\n+\n+\t/** Expands identifiers in a given SQL string, returning a {@link Expanded}. */\n+\tpublic Expanded expanded(String ori) {\n+\t\tfinal Map<SqlParserPos, SqlIdentifier> identifiers = new HashMap<>();\n+\t\tfinal SqlNode oriNode;\n+\t\tfinal SqlNode validated;\n+\t\toriNode = planner.parser().parse(ori);\n+\t\t// parse again because validation is stateful, that means the node tree was probably\n+\t\t// mutated.\n+\t\tvalidated = planner.validate(planner.parser().parse(ori));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDI2NzY5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTozOTo0MVrOHAuVIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjoyOToyN1rOHBbNwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMTEyMg==", "bodyText": "Shouldn't this be rather:\nif (toReplace == null || id.names.size() >= toReplace.names.size()) {\n\n?", "url": "https://github.com/apache/flink/pull/13050#discussion_r470521122", "createdAt": "2020-08-14T09:39:41Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {\n+\tprivate final FlinkPlannerImpl planner;\n+\n+\tprivate Expander(FlinkPlannerImpl planner) {\n+\t\tthis.planner = Objects.requireNonNull(planner);\n+\t}\n+\n+\t/** Creates an Expander. **/\n+\tpublic static Expander create(FlinkPlannerImpl planner) {\n+\t\treturn new Expander(planner);\n+\t}\n+\n+\t/** Expands identifiers in a given SQL string, returning a {@link Expanded}. */\n+\tpublic Expanded expanded(String ori) {\n+\t\tfinal Map<SqlParserPos, SqlIdentifier> identifiers = new HashMap<>();\n+\t\tfinal SqlNode oriNode;\n+\t\tfinal SqlNode validated;\n+\t\toriNode = planner.parser().parse(ori);\n+\t\t// parse again because validation is stateful, that means the node tree was probably\n+\t\t// mutated.\n+\t\tvalidated = planner.validate(planner.parser().parse(ori));\n+\t\tvalidated.accept(new SqlBasicVisitor<Void>() {\n+\t\t\t@Override public Void visit(SqlIdentifier identifier) {\n+\t\t\t\tidentifiers.putIfAbsent(identifier.getParserPosition(), identifier);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t});\n+\t\treturn new Expanded(planner.config().getParserConfig(), oriNode, identifiers);\n+\t}\n+\n+\t/** Result of expanding. */\n+\tpublic static class Expanded {\n+\t\tpublic final SqlParser.Config parserConf;\n+\t\tpublic final SqlNode oriNode;\n+\t\tpublic final Map<SqlParserPos, SqlIdentifier> identifiersMap;\n+\n+\t\tExpanded(SqlParser.Config parserConf, SqlNode oriNode,\n+\t\t\t\tMap<SqlParserPos, SqlIdentifier> identifiers) {\n+\t\t\tthis.oriNode = oriNode;\n+\t\t\tthis.parserConf = parserConf;\n+\t\t\tthis.identifiersMap = ImmutableMap.copyOf(identifiers);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn substitute(SqlNode::toString);\n+\t\t}\n+\n+\t\t/** Returns the SQL string with identifiers replaced according to the\n+\t\t * given unparse function. */\n+\t\tpublic String substitute(Function<SqlNode, String> fn) {\n+\t\t\tfinal SqlShuttle shuttle = new SqlShuttle() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic SqlNode visit(SqlIdentifier id) {\n+\t\t\t\t\tif (id.isStar()) {\n+\t\t\t\t\t\treturn id;\n+\t\t\t\t\t}\n+\t\t\t\t\tfinal SqlIdentifier toReplace = identifiersMap.get(id.getParserPosition());\n+\t\t\t\t\tif (toReplace != null && id.names.size() >= toReplace.names.size()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI1NjUxMg==", "bodyText": "Yes, nice catch ~", "url": "https://github.com/apache/flink/pull/13050#discussion_r471256512", "createdAt": "2020-08-17T06:29:27Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {\n+\tprivate final FlinkPlannerImpl planner;\n+\n+\tprivate Expander(FlinkPlannerImpl planner) {\n+\t\tthis.planner = Objects.requireNonNull(planner);\n+\t}\n+\n+\t/** Creates an Expander. **/\n+\tpublic static Expander create(FlinkPlannerImpl planner) {\n+\t\treturn new Expander(planner);\n+\t}\n+\n+\t/** Expands identifiers in a given SQL string, returning a {@link Expanded}. */\n+\tpublic Expanded expanded(String ori) {\n+\t\tfinal Map<SqlParserPos, SqlIdentifier> identifiers = new HashMap<>();\n+\t\tfinal SqlNode oriNode;\n+\t\tfinal SqlNode validated;\n+\t\toriNode = planner.parser().parse(ori);\n+\t\t// parse again because validation is stateful, that means the node tree was probably\n+\t\t// mutated.\n+\t\tvalidated = planner.validate(planner.parser().parse(ori));\n+\t\tvalidated.accept(new SqlBasicVisitor<Void>() {\n+\t\t\t@Override public Void visit(SqlIdentifier identifier) {\n+\t\t\t\tidentifiers.putIfAbsent(identifier.getParserPosition(), identifier);\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t});\n+\t\treturn new Expanded(planner.config().getParserConfig(), oriNode, identifiers);\n+\t}\n+\n+\t/** Result of expanding. */\n+\tpublic static class Expanded {\n+\t\tpublic final SqlParser.Config parserConf;\n+\t\tpublic final SqlNode oriNode;\n+\t\tpublic final Map<SqlParserPos, SqlIdentifier> identifiersMap;\n+\n+\t\tExpanded(SqlParser.Config parserConf, SqlNode oriNode,\n+\t\t\t\tMap<SqlParserPos, SqlIdentifier> identifiers) {\n+\t\t\tthis.oriNode = oriNode;\n+\t\t\tthis.parserConf = parserConf;\n+\t\t\tthis.identifiersMap = ImmutableMap.copyOf(identifiers);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn substitute(SqlNode::toString);\n+\t\t}\n+\n+\t\t/** Returns the SQL string with identifiers replaced according to the\n+\t\t * given unparse function. */\n+\t\tpublic String substitute(Function<SqlNode, String> fn) {\n+\t\t\tfinal SqlShuttle shuttle = new SqlShuttle() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic SqlNode visit(SqlIdentifier id) {\n+\t\t\t\t\tif (id.isStar()) {\n+\t\t\t\t\t\treturn id;\n+\t\t\t\t\t}\n+\t\t\t\t\tfinal SqlIdentifier toReplace = identifiersMap.get(id.getParserPosition());\n+\t\t\t\t\tif (toReplace != null && id.names.size() >= toReplace.names.size()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMTEyMg=="}, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDI3NjMwOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTo0MjoyNFrOHAuaSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzozMTozM1rOHEBLgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMjQ0MQ==", "bodyText": "Will it expand function identifiers as well? Can we have a test for that case?", "url": "https://github.com/apache/flink/pull/13050#discussion_r470522441", "createdAt": "2020-08-14T09:42:24Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5MjEzOA==", "bodyText": "I'm afraid we never support expanding functions, i have added a test.", "url": "https://github.com/apache/flink/pull/13050#discussion_r471292138", "createdAt": "2020-08-17T07:29:13Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMjQ0MQ=="}, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NTM4MQ==", "bodyText": "The test you added uses a built-in function, which has a single part identifier which does not differ from not expanded one. Are you saying we never expanded identifiers for UDFs?", "url": "https://github.com/apache/flink/pull/13050#discussion_r471355381", "createdAt": "2020-08-17T09:28:54Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMjQ0MQ=="}, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg3MjgzMA==", "bodyText": "The first test also add a UDTF there and it still no expanded.\nI didn't find any evidence that Calcite validator expands the function IDs, the DelegatingScope#fullyQualify expands the table columns, the IdentifierNamespace#validateImpl expands the table name.\nOr did i miss something ?", "url": "https://github.com/apache/flink/pull/13050#discussion_r471872830", "createdAt": "2020-08-18T02:11:59Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMjQ0MQ=="}, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgxNTExNg==", "bodyText": "I don't know where it happens but a test like:\n  @Test\n  def testViewExpandingWithUDF(): Unit = {\n    val tableUtil = tableTestUtil(this)\n    val tableEnv = tableUtil.tableEnv\n    tableEnv.createTemporaryFunction(\"func\", classOf[PrimitiveScalarFunction])\n    val createView =\n      \"\"\"\n        |CREATE VIEW tmp_view AS\n        |  SELECT func(1)\n        |\"\"\".stripMargin\n    tableEnv.executeSql(createView)\n    val objectID = ObjectIdentifier.of(tableEnv.getCurrentCatalog,\n      tableEnv.getCurrentDatabase, \"tmp_view\")\n    val view: CatalogBaseTable = tableEnv.getCatalog(objectID.getCatalogName)\n      .get().getTable(objectID.toObjectPath)\n    assertThat(view.asInstanceOf[CatalogView].getExpandedQuery, is(\"SELECT `default_catalog`.`default_database`.`func`(1)\"))\n  }\n\npasses on master and fails with your changes.", "url": "https://github.com/apache/flink/pull/13050#discussion_r472815116", "createdAt": "2020-08-19T07:41:36Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMjQ0MQ=="}, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk3NTY4Mg==", "bodyText": "Yes, the BridgingSqlFunction did the function id expanding out of the scope of the SqlValidator, so in the code base of this patch, it does not work because BridgingSqlFunction id position was always SqlParserPos.ZERO so it can not match the original identifier.", "url": "https://github.com/apache/flink/pull/13050#discussion_r473975682", "createdAt": "2020-08-20T13:31:33Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.utils;\n+\n+import org.apache.flink.table.planner.calcite.FlinkPlannerImpl;\n+\n+import org.apache.flink.shaded.guava18.com.google.common.collect.ImmutableMap;\n+\n+import org.apache.calcite.sql.SqlIdentifier;\n+import org.apache.calcite.sql.SqlNode;\n+import org.apache.calcite.sql.parser.SqlParser;\n+import org.apache.calcite.sql.parser.SqlParserPos;\n+import org.apache.calcite.sql.util.SqlBasicVisitor;\n+import org.apache.calcite.sql.util.SqlShuttle;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+/**\n+ * Utility that expand SQL identifiers from a SQL query.\n+ *\n+ * <p>Simple use:\n+ *\n+ * <blockquote><code>\n+ * final String sql =<br>\n+ *     \"select ename from emp where deptno &lt; 10\";<br>\n+ * final Expander.Expanded expanded =<br>\n+ *     Expander.create(planner).expanded(sql);<br>\n+ * print(expanded); // \"select `emp`.`ename` from `catalog`.`db`.`emp` where `emp`.`deptno` &lt; 10\"\n+ * </code></blockquote>\n+ *\n+ * <p>Calling {@link Expanded#toString()} generates a string that is similar to\n+ * SQL where a user has manually converted all identifiers as expanded, and\n+ * which could then be persisted as expanded query of a Catalog view.\n+ *\n+ * <p>For more advanced formatting, use {@link Expanded#substitute(Function)}.\n+ *\n+ * <p>Adjust {@link SqlParser.Config} to use a different parser or parsing options.\n+ */\n+public class Expander {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUyMjQ0MQ=="}, "originalCommit": {"oid": "c44b190d9e1350fa8853fe95b9f0284090f4d0fc"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NjE2MTY0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/optimize/program/FlinkChainedProgram.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwOToyNjozOFrOHBhLDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwMjowMjozMlrOHCAsGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDEyNQ==", "bodyText": "unrelated change", "url": "https://github.com/apache/flink/pull/13050#discussion_r471354125", "createdAt": "2020-08-17T09:26:38Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/optimize/program/FlinkChainedProgram.scala", "diffHunk": "@@ -62,8 +62,8 @@ class FlinkChainedProgram[OC <: FlinkOptimizeContext]\n         val result = program.optimize(input, context)\n         val end = System.currentTimeMillis()\n \n-        if (LOG.isDebugEnabled) {\n-          LOG.debug(s\"optimize $name cost ${end - start} ms.\\n\" +\n+        if (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba1b32fd9b7acb3e2ddc4678d4d26c835880e0b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg3MDQ4OQ==", "bodyText": "Oops, i committed some test code, fixed.", "url": "https://github.com/apache/flink/pull/13050#discussion_r471870489", "createdAt": "2020-08-18T02:02:32Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-table-planner-blink/src/main/scala/org/apache/flink/table/planner/plan/optimize/program/FlinkChainedProgram.scala", "diffHunk": "@@ -62,8 +62,8 @@ class FlinkChainedProgram[OC <: FlinkOptimizeContext]\n         val result = program.optimize(input, context)\n         val end = System.currentTimeMillis()\n \n-        if (LOG.isDebugEnabled) {\n-          LOG.debug(s\"optimize $name cost ${end - start} ms.\\n\" +\n+        if (true) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NDEyNQ=="}, "originalCommit": {"oid": "bba1b32fd9b7acb3e2ddc4678d4d26c835880e0b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjExMzE0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0MDozMFrOHFYFmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjowNjoyOVrOHGAotQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5OTU3Ng==", "bodyText": "Why did you decide to use a different key for functions? Can't we use the SqlParserPos as well?", "url": "https://github.com/apache/flink/pull/13050#discussion_r475399576", "createdAt": "2020-08-24T07:40:30Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -70,30 +75,43 @@ public static Expander create(FlinkPlannerImpl planner) {\n \t/** Expands identifiers in a given SQL string, returning a {@link Expanded}. */\n \tpublic Expanded expanded(String ori) {\n \t\tfinal Map<SqlParserPos, SqlIdentifier> identifiers = new HashMap<>();\n+\t\tfinal Map<String, SqlIdentifier> funcNameToId = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe2b4b092cbce31dee74b4261ca7a20904b2000"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA2MzkyNQ==", "bodyText": "Because the BridgingSqlFunction lost the parser position information. We may need a refactor to BridgingSqlFunction but i don't want to in this PR.", "url": "https://github.com/apache/flink/pull/13050#discussion_r476063925", "createdAt": "2020-08-25T02:06:29Z", "author": {"login": "danny0405"}, "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/utils/Expander.java", "diffHunk": "@@ -70,30 +75,43 @@ public static Expander create(FlinkPlannerImpl planner) {\n \t/** Expands identifiers in a given SQL string, returning a {@link Expanded}. */\n \tpublic Expanded expanded(String ori) {\n \t\tfinal Map<SqlParserPos, SqlIdentifier> identifiers = new HashMap<>();\n+\t\tfinal Map<String, SqlIdentifier> funcNameToId = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5OTU3Ng=="}, "originalCommit": {"oid": "efe2b4b092cbce31dee74b4261ca7a20904b2000"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjEyMDY5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/common/ViewsExpandingTest.scala", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0MjoyN1rOHFYJwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0MjoyN1rOHFYJwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMDY0Mg==", "bodyText": "Let's not import the PrimitiveScalarFunction. I don't think it makes sense to introduce a cross dependency between the tests. I think it is easy enough to add a simple function in this class.", "url": "https://github.com/apache/flink/pull/13050#discussion_r475400642", "createdAt": "2020-08-24T07:42:27Z", "author": {"login": "dawidwys"}, "path": "flink-table/flink-table-planner-blink/src/test/scala/org/apache/flink/table/planner/plan/common/ViewsExpandingTest.scala", "diffHunk": "@@ -20,9 +20,12 @@ package org.apache.flink.table.planner.plan.common\n \n import org.apache.flink.api.scala._\n import org.apache.flink.table.api._\n-import org.apache.flink.table.catalog.{CatalogView, CatalogViewImpl, ObjectPath}\n-import org.apache.flink.table.planner.utils.{TableTestBase, TableTestUtil, TableTestUtilBase}\n+import org.apache.flink.table.catalog.{CatalogBaseTable, CatalogView, CatalogViewImpl, ObjectIdentifier, ObjectPath}\n+import org.apache.flink.table.planner.runtime.stream.sql.FunctionITCase.PrimitiveScalarFunction", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe2b4b092cbce31dee74b4261ca7a20904b2000"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4903, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}