{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0MjIyODM3", "number": 11534, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1MjoxMlrODs1F6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMDozMVrODuUSfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzMzODAwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1MjoxM1rOF95veQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTowNzo1NlrOF-MPyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MzQ5Nw==", "bodyText": "nit: we can get rid of this variable using for loop\nnit: import constant could improve readability", "url": "https://github.com/apache/flink/pull/11534#discussion_r400453497", "createdAt": "2020-03-30T19:52:13Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYxNDk5Mg==", "bodyText": "we can get rid of this variable using for loop\n\nI guess you mean the way via while(true) and break the loop inside while. I also tried that way in first version, but it seems not very suggested by intelliJ.", "url": "https://github.com/apache/flink/pull/11534#discussion_r400614992", "createdAt": "2020-03-31T03:03:17Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MzQ5Nw=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0ODk1OA==", "bodyText": "I mean something like this:\nfor (ReadResult readResult = HAS_MORE_DATA; readResult == HAS_MORE_DATA; ) {\n    readResult = read ...\n}", "url": "https://github.com/apache/flink/pull/11534#discussion_r400748958", "createdAt": "2020-03-31T08:55:30Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MzQ5Nw=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1NjY4MA==", "bodyText": "It is interesting and actually I have not tried out this way before. Actually we still have the variable definition in for way and they are same in essence. Only reduce one line in practice. I can try out it for your favor. :)", "url": "https://github.com/apache/flink/pull/11534#discussion_r400756680", "createdAt": "2020-03-31T09:07:56Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MzQ5Nw=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM1MjgyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxOTo1NjozNVrOF954uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOTowMzoyMVrOF-ME2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NTg2NA==", "bodyText": "I see initializeState is called by parent.\nWhy not to pass ChannelStateReader as a parameter to initializeState then?\n(this would decrease coupling and increase testability)", "url": "https://github.com/apache/flink/pull/11534#discussion_r400455864", "createdAt": "2020-03-30T19:56:35Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;\n+\t\twhile (readResult == ReadResult.HAS_MORE_DATA) {\n+\t\t\tBufferBuilder bufferBuilder = parent.getBufferPool().requestBufferBuilderBlocking();\n+\t\t\tBufferConsumer bufferConsumer = bufferBuilder.createBufferConsumer();\n+\t\t\treadResult = parent.getChannelStateReader().readOutputData(subpartitionInfo, bufferBuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYxOTc1OQ==", "bodyText": "I think it is not so necessary to decouple ResultPartition with ResultSubpartition, because the ResultSubpartition is derived from ResultPartition and it can get everything from parent by design. In the constructor of ResultSubpartition, ResultPartition is already passed as argument and defined as protected variable to be referenced directly by any kind of subpartitions. So we do not destroy the existing rules or add any new rules. Also for tests, the separate PipelinedSubpartitionTest still needs to construct parent ResultPartition in practice.\nBut your comment makes me think of another possible option, to pass ChannelStateReader into ResultPartitionWriter#initializeState, then we do not need to pass it into constructor to touch many components.", "url": "https://github.com/apache/flink/pull/11534#discussion_r400619759", "createdAt": "2020-03-31T03:21:22Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;\n+\t\twhile (readResult == ReadResult.HAS_MORE_DATA) {\n+\t\t\tBufferBuilder bufferBuilder = parent.getBufferPool().requestBufferBuilderBlocking();\n+\t\t\tBufferConsumer bufferConsumer = bufferBuilder.createBufferConsumer();\n+\t\t\treadResult = parent.getChannelStateReader().readOutputData(subpartitionInfo, bufferBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NTg2NA=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc1Mzg4Mw==", "bodyText": "But your comment makes me think of another possible option, to pass ChannelStateReader into ResultPartitionWriter#initializeState, then we do not need to pass it into constructor to touch many components.\n\nThis is exactly what I meant by\n\nWhy not to pass ChannelStateReader as a parameter to initializeState then?\n\nSo, instead of having channelStateReader field anywhere I'd pass it from StreamTask\nto ResultPartitionWriter.initializeState()\nto ResultPartition.initializeState()\nto ResultSubpartition.initializeState()\nSorry for the confusion", "url": "https://github.com/apache/flink/pull/11534#discussion_r400753883", "createdAt": "2020-03-31T09:03:21Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;\n+\t\twhile (readResult == ReadResult.HAS_MORE_DATA) {\n+\t\t\tBufferBuilder bufferBuilder = parent.getBufferPool().requestBufferBuilderBlocking();\n+\t\t\tBufferConsumer bufferConsumer = bufferBuilder.createBufferConsumer();\n+\t\t\treadResult = parent.getChannelStateReader().readOutputData(subpartitionInfo, bufferBuilder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1NTg2NA=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM2NjAwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDowMDoyOVrOF96A9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1MDozOVrOF-ULog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1Nzk3Mw==", "bodyText": "I guess update() was added to read the value that was written in ChannelStateReader?\nWouldn't creation of bufferConsumer after readOutputData() have the same effect?", "url": "https://github.com/apache/flink/pull/11534#discussion_r400457973", "createdAt": "2020-03-30T20:00:29Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;\n+\t\twhile (readResult == ReadResult.HAS_MORE_DATA) {\n+\t\t\tBufferBuilder bufferBuilder = parent.getBufferPool().requestBufferBuilderBlocking();\n+\t\t\tBufferConsumer bufferConsumer = bufferBuilder.createBufferConsumer();\n+\t\t\treadResult = parent.getChannelStateReader().readOutputData(subpartitionInfo, bufferBuilder);\n+\n+\t\t\t// check whether there are some states data filled in this time\n+\t\t\tbufferConsumer.update();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyMzExNA==", "bodyText": "I guess update() was added to read the value that was written in ChannelStateReader?\n\nNot really. The update() is used for checking whether there are any data written in above readOutputData call. And it is actually used together with below bufferConsumer.getWrittenBytes(). There are actually two implicit limitations here:\n\n\nThe ReadResult from ChannelStateReader only indicates the future situation, not indicates whether the current call actually reads data or not, especially for the first call. So we have to judge whether the passed BufferBuilder has written any data or not.\n\n\nThe cached position is only updated after calling BufferConsumer#build() atm. In order to check the written position before constructing the slice buffer, we have to call update() explicitly before calling bufferConsumer.getWrittenBytes(). I ever tried to break this rule to also add the update() inside BufferConsumer#getWrittenBytes() and BufferConsumer#isFinished(). But it would bring many unit tests failure and break previous design of BufferConsumer which might bring additional discussions. So I introduce another separate update() from BufferConsumer which can be used by demand.\n\n\n\nWouldn't creation of bufferConsumer after readOutputData() have the same effect?\n\nActually not. The property usage is to to create BufferConsumer firstly, and then written data into BufferBuilder. Otherwise the delay creation of BufferConsumer can not see the data written before creation.", "url": "https://github.com/apache/flink/pull/11534#discussion_r400623114", "createdAt": "2020-03-31T03:34:41Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;\n+\t\twhile (readResult == ReadResult.HAS_MORE_DATA) {\n+\t\t\tBufferBuilder bufferBuilder = parent.getBufferPool().requestBufferBuilderBlocking();\n+\t\t\tBufferConsumer bufferConsumer = bufferBuilder.createBufferConsumer();\n+\t\t\treadResult = parent.getChannelStateReader().readOutputData(subpartitionInfo, bufferBuilder);\n+\n+\t\t\t// check whether there are some states data filled in this time\n+\t\t\tbufferConsumer.update();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1Nzk3Mw=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4MjU3Ng==", "bodyText": "I actually meant the committed writer position by value. Bad wording, sorry.\nI see, we shouldn't change the creation order.\nBut can we use BufferConsumer.isDataAvailable instead of update() + getWrittenBytes()?\npublic boolean isDataAvailable() {\n\treturn currentReaderPosition < writerPosition.getLatest();\n}", "url": "https://github.com/apache/flink/pull/11534#discussion_r400782576", "createdAt": "2020-03-31T09:49:27Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;\n+\t\twhile (readResult == ReadResult.HAS_MORE_DATA) {\n+\t\t\tBufferBuilder bufferBuilder = parent.getBufferPool().requestBufferBuilderBlocking();\n+\t\t\tBufferConsumer bufferConsumer = bufferBuilder.createBufferConsumer();\n+\t\t\treadResult = parent.getChannelStateReader().readOutputData(subpartitionInfo, bufferBuilder);\n+\n+\t\t\t// check whether there are some states data filled in this time\n+\t\t\tbufferConsumer.update();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1Nzk3Mw=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NjY5MA==", "bodyText": "I am also fine with the way of isDataAvailable.", "url": "https://github.com/apache/flink/pull/11534#discussion_r400886690", "createdAt": "2020-03-31T12:50:39Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/PipelinedSubpartition.java", "diffHunk": "@@ -89,6 +91,25 @@\n \t\tsuper(index, parent);\n \t}\n \n+\t@Override\n+\tpublic void initializeState() throws IOException, InterruptedException {\n+\t\tReadResult readResult = ReadResult.HAS_MORE_DATA;\n+\t\twhile (readResult == ReadResult.HAS_MORE_DATA) {\n+\t\t\tBufferBuilder bufferBuilder = parent.getBufferPool().requestBufferBuilderBlocking();\n+\t\t\tBufferConsumer bufferConsumer = bufferBuilder.createBufferConsumer();\n+\t\t\treadResult = parent.getChannelStateReader().readOutputData(subpartitionInfo, bufferBuilder);\n+\n+\t\t\t// check whether there are some states data filled in this time\n+\t\t\tbufferConsumer.update();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1Nzk3Mw=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzM5OTcyOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDoxMDoyM1rOF96WCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMzozNToyN1rOF-EGxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MzM3MA==", "bodyText": "The same as for PipelinedSubpartition: I think it's better to pass channelStateReader as a parameter to initializeState (to reduce coupling and other benefits).", "url": "https://github.com/apache/flink/pull/11534#discussion_r400463370", "createdAt": "2020-03-30T20:10:23Z", "author": {"login": "rkhachatryan"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartition.java", "diffHunk": "@@ -107,6 +108,8 @@\n \t@Nullable\n \tprotected final BufferCompressor bufferCompressor;\n \n+\tprivate final ChannelStateReader channelStateReader;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyMzMwMA==", "bodyText": "Replied above.", "url": "https://github.com/apache/flink/pull/11534#discussion_r400623300", "createdAt": "2020-03-31T03:35:27Z", "author": {"login": "zhijiangW"}, "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/ResultPartition.java", "diffHunk": "@@ -107,6 +108,8 @@\n \t@Nullable\n \tprotected final BufferCompressor bufferCompressor;\n \n+\tprivate final ChannelStateReader channelStateReader;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ2MzM3MA=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzUzNDA0OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMDo0OTo1MVrOF97q0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwOToxNjoxNFrOF-MjKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NTA3Mg==", "bodyText": "Should we close the reader here? Or it will be used for InputChannels later?", "url": "https://github.com/apache/flink/pull/11534#discussion_r400485072", "createdAt": "2020-03-30T20:49:51Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -434,6 +434,13 @@ protected void beforeInvoke() throws Exception {\n \t\t\t// so that we avoid race conditions in the case that initializeState()\n \t\t\t// registers a timer, that fires before the open() is called.\n \t\t\toperatorChain.initializeStateAndOpenOperators(createStreamTaskStateInitializer());\n+\n+\t\t\tResultPartitionWriter[] writers = getEnvironment().getAllWriters();\n+\t\t\tif (writers != null) {\n+\t\t\t\tfor (ResultPartitionWriter writer : writers) {\n+\t\t\t\t\twriter.initializeState();\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyNTg3Nw==", "bodyText": "The reader would also be used for input side for recovery in another PR. Have you considered when to close it in your PR? The ChannelStateReader is a task-level component and passed into Environment to be used anywhere in theory. Input and output sides are the users for reader ATM, but they should not be aware whether there are other users. So they should not close it after using . The proper way might consider its lifecycle together with task's lifecycle. WDYT?", "url": "https://github.com/apache/flink/pull/11534#discussion_r400625877", "createdAt": "2020-03-31T03:45:56Z", "author": {"login": "zhijiangW"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -434,6 +434,13 @@ protected void beforeInvoke() throws Exception {\n \t\t\t// so that we avoid race conditions in the case that initializeState()\n \t\t\t// registers a timer, that fires before the open() is called.\n \t\t\toperatorChain.initializeStateAndOpenOperators(createStreamTaskStateInitializer());\n+\n+\t\t\tResultPartitionWriter[] writers = getEnvironment().getAllWriters();\n+\t\t\tif (writers != null) {\n+\t\t\t\tfor (ResultPartitionWriter writer : writers) {\n+\t\t\t\t\twriter.initializeState();\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NTA3Mg=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2MTY0MQ==", "bodyText": "Yes, I fully agree with what you point. In my PR, I'm closing it in Task.releaseResources. Just wanted to make sure that we can't close it sooner.\nIn ChannelStreamReaderImpl, the underlying streams are closed as soon as all the data is read from them, so it shouldn't be an issue.", "url": "https://github.com/apache/flink/pull/11534#discussion_r400761641", "createdAt": "2020-03-31T09:16:14Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/StreamTask.java", "diffHunk": "@@ -434,6 +434,13 @@ protected void beforeInvoke() throws Exception {\n \t\t\t// so that we avoid race conditions in the case that initializeState()\n \t\t\t// registers a timer, that fires before the open() is called.\n \t\t\toperatorChain.initializeStateAndOpenOperators(createStreamTaskStateInitializer());\n+\n+\t\t\tResultPartitionWriter[] writers = getEnvironment().getAllWriters();\n+\t\t\tif (writers != null) {\n+\t\t\t\tfor (ResultPartitionWriter writer : writers) {\n+\t\t\t\t\twriter.initializeState();\n+\t\t\t\t}\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NTA3Mg=="}, "originalCommit": {"oid": "d0d0b6fef21a118932e878255aa40f10f17fe753"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODkzNTAwOnYy", "diffSide": "RIGHT", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/api/writer/RecordWriterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMDozMVrOGAPcvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyMDozMVrOGAPcvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwNjMwMQ==", "bodyText": "nit: space", "url": "https://github.com/apache/flink/pull/11534#discussion_r402906301", "createdAt": "2020-04-03T10:20:31Z", "author": {"login": "AHeise"}, "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/api/writer/RecordWriterTest.java", "diffHunk": "@@ -464,6 +456,59 @@ public void testIsAvailableOrNot() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testEmitRecordWithPartitionStateRecovery() throws Exception {\n+\t\tfinal int totalBuffers = 10; // enough for both states and normal records\n+\t\tfinal int totalStates = 2;\n+\t\tfinal int[] states = {1, 2, 3, 4};\n+\t\tfinal int[] records = {5, 6, 7, 8};\n+\t\tfinal int bufferSize = states.length * Integer.BYTES;\n+\n+\t\tfinal NetworkBufferPool globalPool = new NetworkBufferPool(totalBuffers, bufferSize , 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2670a045bd9c9c4c75e7a22bf188fc673c85a062"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 737, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}