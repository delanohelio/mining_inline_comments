{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MTA1MjU3", "number": 12880, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzozMDo1NFrOESRKFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxMjowNVrOEZztLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTkwOTM0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/TableConfigOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzozMDo1NFrOG3Wvgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNjo0NTowNVrOG7TNBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5NzQ3NA==", "bodyText": "What about to use (system-default) here? It will be more like a system default value like (none).\nBesides, please store the \"(system-default)\" in a static final variable.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460697474", "createdAt": "2020-07-27T07:30:54Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/TableConfigOptions.java", "diffHunk": "@@ -51,4 +52,24 @@ private TableConfigOptions() {}\n \t\t\t.withDescription(\"The SQL dialect defines how to parse a SQL query. \" +\n \t\t\t\t\t\"A different SQL dialect may support different SQL grammar. \" +\n \t\t\t\t\t\"Currently supported dialects are: default and hive\");\n+\n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.BATCH_STREAMING)\n+\tpublic static final ConfigOption<String> LOCAL_TIME_ZONE = key(\"table.local-time-zone\")\n+\t\t\t.stringType()\n+\t\t\t// special value to decide whether to use ZoneId.systemDefault() in TableConfig.getLocalTimeZone()\n+\t\t\t.defaultValue(\"System\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgzMzc5OQ==", "bodyText": "I think it would be better to use \"default\" as the default value here. Because this is very easy to understand literally and table.sql-dialect also uses it.", "url": "https://github.com/apache/flink/pull/12880#discussion_r464833799", "createdAt": "2020-08-04T06:45:05Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/TableConfigOptions.java", "diffHunk": "@@ -51,4 +52,24 @@ private TableConfigOptions() {}\n \t\t\t.withDescription(\"The SQL dialect defines how to parse a SQL query. \" +\n \t\t\t\t\t\"A different SQL dialect may support different SQL grammar. \" +\n \t\t\t\t\t\"Currently supported dialects are: default and hive\");\n+\n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.BATCH_STREAMING)\n+\tpublic static final ConfigOption<String> LOCAL_TIME_ZONE = key(\"table.local-time-zone\")\n+\t\t\t.stringType()\n+\t\t\t// special value to decide whether to use ZoneId.systemDefault() in TableConfig.getLocalTimeZone()\n+\t\t\t.defaultValue(\"System\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY5NzQ3NA=="}, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTkzMDM2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/ExecutionConfigOptions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzozNzoxOVrOG3W75A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzozOTowNlrOG3W_Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMDY0NA==", "bodyText": "Move this before Source Options? And add comment State Options on it?", "url": "https://github.com/apache/flink/pull/12880#discussion_r460700644", "createdAt": "2020-07-27T07:37:19Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/ExecutionConfigOptions.java", "diffHunk": "@@ -49,6 +51,15 @@\n \t\t\t\t\"tasks to advance their watermarks without the need to wait for \" +\n \t\t\t\t\"watermarks from this source while it is idle.\");\n \n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.STREAMING)\n+\tpublic static final ConfigOption<Duration> IDLE_STATE_RETENTION =\n+\t\tkey(\"table.exec.state.ttl\")\n+\t\t\t.durationType()\n+\t\t\t.defaultValue(Duration.ofMillis(0))\n+\t\t\t.withDescription(\"A time-to-live (TTL) can be assigned to the keyed state of any type. \" +\n+\t\t\t\t\"If a TTL is configured and a state value has expired, \" +\n+\t\t\t\t\"the stored value will be cleaned up on a best effort basis.\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMTQ5OQ==", "bodyText": "Add description for default value, for example: Default is 0 (zero) which will never clean-up state.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460701499", "createdAt": "2020-07-27T07:39:06Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/ExecutionConfigOptions.java", "diffHunk": "@@ -49,6 +51,15 @@\n \t\t\t\t\"tasks to advance their watermarks without the need to wait for \" +\n \t\t\t\t\"watermarks from this source while it is idle.\");\n \n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.STREAMING)\n+\tpublic static final ConfigOption<Duration> IDLE_STATE_RETENTION =\n+\t\tkey(\"table.exec.state.ttl\")\n+\t\t\t.durationType()\n+\t\t\t.defaultValue(Duration.ofMillis(0))\n+\t\t\t.withDescription(\"A time-to-live (TTL) can be assigned to the keyed state of any type. \" +\n+\t\t\t\t\"If a TTL is configured and a state value has expired, \" +\n+\t\t\t\t\"the stored value will be cleaned up on a best effort basis.\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMDY0NA=="}, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk0NTA1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0MTozNFrOG3XEXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0MTozNFrOG3XEXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMjgxMg==", "bodyText": "Add deprecate javadoc on this method, and suggest to use which method instead.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460702812", "createdAt": "2020-07-27T07:41:34Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -274,9 +263,10 @@ public void setMaxGeneratedCodeLength(Integer maxGeneratedCodeLength) {\n \t *\n \t * @param minTime The minimum time interval for which idle state is retained. Set to 0 (zero) to\n \t *                never clean-up the state.\n-\t * @param maxTime The maximum time interval for which idle state is retained. Must be at least\n-\t *                5 minutes greater than minTime. Set to 0 (zero) to never clean-up the state.\n+\t * @param maxTime Currently maxTime will be ignored and it will automatically derived from minTime\n+\t *                as 1.5 x minTime.\n \t */\n+\t@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk1MTg0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0Mzo0MVrOG3XIew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0Mzo0MVrOG3XIew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwMzg2Nw==", "bodyText": "Remove the NOTE.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460703867", "createdAt": "2020-07-27T07:43:41Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.\n+\t *\n+\t * <p>When new data arrives for previously cleaned-up state, the new data will be handled as if it\n+\t * was the first data. This can result in previous results being overwritten.\n+\t *\n+\t * <p>Set to 0 (zero) to never clean-up the state.\n+\t *\n+\t * <p>NOTE: Cleaning up state requires additional bookkeeping which becomes less expensive for\n+\t * larger differences of minTime and maxTime. The difference between minTime and maxTime must be\n+\t * at least 5 minutes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk1NjYwOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0NTowM1rOG3XLNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjowODoyMFrOG8Gy3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNDU2Ng==", "bodyText": "I prefer to use the same method as before setIdleStateRetentionTime or without the Time/Duration suffix.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460704566", "createdAt": "2020-07-27T07:45:03Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.\n+\t *\n+\t * <p>When new data arrives for previously cleaned-up state, the new data will be handled as if it\n+\t * was the first data. This can result in previous results being overwritten.\n+\t *\n+\t * <p>Set to 0 (zero) to never clean-up the state.\n+\t *\n+\t * <p>NOTE: Cleaning up state requires additional bookkeeping which becomes less expensive for\n+\t * larger differences of minTime and maxTime. The difference between minTime and maxTime must be\n+\t * at least 5 minutes.\n+\t *\n+\t * @param duration The retention time interval for which idle state is retained. Set to 0 (zero) to\n+\t *                never clean-up the state.\n+\t */\n+\tpublic void setIdleStateRetentionDuration(Duration duration){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY3OTA3MA==", "bodyText": "If we use the same function name with different parametere list, it will get strange thing on python side. We can only use one of the setIdleStateRetentionTime in python. So the only option is to use the method name setIdleStateRetention", "url": "https://github.com/apache/flink/pull/12880#discussion_r465679070", "createdAt": "2020-08-05T12:08:20Z", "author": {"login": "fsk119"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.\n+\t *\n+\t * <p>When new data arrives for previously cleaned-up state, the new data will be handled as if it\n+\t * was the first data. This can result in previous results being overwritten.\n+\t *\n+\t * <p>Set to 0 (zero) to never clean-up the state.\n+\t *\n+\t * <p>NOTE: Cleaning up state requires additional bookkeeping which becomes less expensive for\n+\t * larger differences of minTime and maxTime. The difference between minTime and maxTime must be\n+\t * at least 5 minutes.\n+\t *\n+\t * @param duration The retention time interval for which idle state is retained. Set to 0 (zero) to\n+\t *                never clean-up the state.\n+\t */\n+\tpublic void setIdleStateRetentionDuration(Duration duration){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNDU2Ng=="}, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk2MTU0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0NjozN1rOG3XORg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo0NjozN1rOG3XORg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwNTM1MA==", "bodyText": "The member variables minIdleStateRetentionTime, maxIdleStateRetentionTime can be removed?", "url": "https://github.com/apache/flink/pull/12880#discussion_r460705350", "createdAt": "2020-07-27T07:46:37Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk4ODA5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1NDoyOVrOG3Xemw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1NDoyOVrOG3Xemw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwOTUzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * State will never be cleared until it was idle for less than the retention time and will never\n          \n          \n            \n            \t * be kept if it was idle for more than the 1.5 * retention time.\n          \n          \n            \n            \t * State will never be cleared until it was idle for less than the retention time and will be cleared on a best effort basis after the retention time.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460709531", "createdAt": "2020-07-27T07:54:29Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTk5MDY5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1NToxMVrOG3XgIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzo1NToxMVrOG3XgIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcwOTkyMw==", "bodyText": "Add a @see comment:\n* @see org.apache.flink.api.common.state.StateTtlConfig", "url": "https://github.com/apache/flink/pull/12880#discussion_r460709923", "createdAt": "2020-07-27T07:55:11Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.\n+\t *\n+\t * <p>When new data arrives for previously cleaned-up state, the new data will be handled as if it\n+\t * was the first data. This can result in previous results being overwritten.\n+\t *\n+\t * <p>Set to 0 (zero) to never clean-up the state.\n+\t *\n+\t * <p>NOTE: Cleaning up state requires additional bookkeeping which becomes less expensive for\n+\t * larger differences of minTime and maxTime. The difference between minTime and maxTime must be\n+\t * at least 5 minutes.\n+\t *\n+\t * @param duration The retention time interval for which idle state is retained. Set to 0 (zero) to\n+\t *                never clean-up the state.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjAxMTQ1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowMToyNVrOG3Xs3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowMToyNVrOG3Xs3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxMzE4MA==", "bodyText": "I would suggest to keep the original description for maxTime, but add a NOTE to explain the maxTime is ignored now and is inferred from minTime with a 1.5 multiplier.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460713180", "createdAt": "2020-07-27T08:01:25Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -274,9 +263,10 @@ public void setMaxGeneratedCodeLength(Integer maxGeneratedCodeLength) {\n \t *\n \t * @param minTime The minimum time interval for which idle state is retained. Set to 0 (zero) to\n \t *                never clean-up the state.\n-\t * @param maxTime The maximum time interval for which idle state is retained. Must be at least\n-\t *                5 minutes greater than minTime. Set to 0 (zero) to never clean-up the state.\n+\t * @param maxTime Currently maxTime will be ignored and it will automatically derived from minTime", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjAyNzc4OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/TableConfigOptions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowNjoyM1rOG3X2ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODowNjoyM1rOG3X2ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxNTY4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\"TIMESTAMP_WITH_LOCAL_TIME_ZONE. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +\n          \n          \n            \n            \t\t\t\t\"<code>TIMESTAMP WITH LOCAL TIME ZONE</code>. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +", "url": "https://github.com/apache/flink/pull/12880#discussion_r460715683", "createdAt": "2020-07-27T08:06:23Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/TableConfigOptions.java", "diffHunk": "@@ -51,4 +52,24 @@ private TableConfigOptions() {}\n \t\t\t.withDescription(\"The SQL dialect defines how to parse a SQL query. \" +\n \t\t\t\t\t\"A different SQL dialect may support different SQL grammar. \" +\n \t\t\t\t\t\"Currently supported dialects are: default and hive\");\n+\n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.BATCH_STREAMING)\n+\tpublic static final ConfigOption<String> LOCAL_TIME_ZONE = key(\"table.local-time-zone\")\n+\t\t\t.stringType()\n+\t\t\t// special value to decide whether to use ZoneId.systemDefault() in TableConfig.getLocalTimeZone()\n+\t\t\t.defaultValue(\"System\")\n+\t\t\t.withDescription(\"The local time zone defines current session time zone id. It is used when converting to/from \" +\n+\t\t\t\t\"TIMESTAMP_WITH_LOCAL_TIME_ZONE. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjA0Mjg5OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxMTowMlrOG3X_xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxMTowMlrOG3X_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxODAyMQ==", "bodyText": "I think we should avoid use the Java reflection here, otherwise, it's hard to maintain when TableConfig is refactored again in the future.\nI think we don't have much tests here, we can have a test for each method/option.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460718021", "createdAt": "2020-07-27T08:11:02Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.api;\n+\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests for {@link TableConfig}.\n+ */\n+public class TableConfigTest {\n+\t@Test\n+\tpublic void testGetAndSetTableConfigOptions() throws Exception{\n+\t\tClass<?> configClass = TableConfig.class;\n+\t\tTableConfig config = new TableConfig();\n+\t\tfor (TestSpec<?> spec: testSpecList){\n+\t\t\tconfigClass.getMethod(\"set\" + spec.fieldName, spec.inputClass).invoke(config, spec.inputValue);\n+\t\t\tassertEquals(spec.expectedValue, configClass.getMethod(\"get\" + spec.fieldName).invoke(config));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjA0NDA1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxMToyMFrOG3YAYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxMToyMFrOG3YAYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxODE3Nw==", "bodyText": "Please also test the string option.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460718177", "createdAt": "2020-07-27T08:11:20Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.api;\n+\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests for {@link TableConfig}.\n+ */\n+public class TableConfigTest {\n+\t@Test\n+\tpublic void testGetAndSetTableConfigOptions() throws Exception{\n+\t\tClass<?> configClass = TableConfig.class;\n+\t\tTableConfig config = new TableConfig();\n+\t\tfor (TestSpec<?> spec: testSpecList){\n+\t\t\tconfigClass.getMethod(\"set\" + spec.fieldName, spec.inputClass).invoke(config, spec.inputValue);\n+\t\t\tassertEquals(spec.expectedValue, configClass.getMethod(\"get\" + spec.fieldName).invoke(config));\n+\t\t}\n+\t}\n+\n+\t@Test\n+\tpublic void testGetAndSetIdleStateRetentionDuration(){\n+\t\tTableConfig config = new TableConfig();\n+\t\tconfig.setIdleStateRetentionDuration(Duration.ofHours(1));\n+\t\tassertEquals(Duration.ofHours(1).toMillis(), config.getMinIdleStateRetentionTime());\n+\t\tassertEquals(Duration.ofHours(1).toMillis() * 3 / 2, config.getMaxIdleStateRetentionTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjA1MzgzOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxNDoxMFrOG3YGLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxNDoxMFrOG3YGLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcxOTY2MQ==", "bodyText": "Add a new method getIdleStateRetentionTime and deprecate getMinIdleStateRetentionTime and getMaxIdleStateRetentionTime.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460719661", "createdAt": "2020-07-27T08:14:10Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/TableConfig.java", "diffHunk": "@@ -286,20 +276,43 @@ public void setIdleStateRetentionTime(Time minTime, Time maxTime) {\n \t\t}\n \t\tminIdleStateRetentionTime = minTime.toMilliseconds();\n \t\tmaxIdleStateRetentionTime = maxTime.toMilliseconds();\n+\t\tsetIdleStateRetentionDuration(Duration.ofMillis(minIdleStateRetentionTime));\n+\t}\n+\n+\t/**\n+\t * Specifies a retention time interval for how long idle state, i.e., state which\n+\t * was not updated, will be retained.\n+\t * State will never be cleared until it was idle for less than the retention time and will never\n+\t * be kept if it was idle for more than the 1.5 * retention time.\n+\t *\n+\t * <p>When new data arrives for previously cleaned-up state, the new data will be handled as if it\n+\t * was the first data. This can result in previous results being overwritten.\n+\t *\n+\t * <p>Set to 0 (zero) to never clean-up the state.\n+\t *\n+\t * <p>NOTE: Cleaning up state requires additional bookkeeping which becomes less expensive for\n+\t * larger differences of minTime and maxTime. The difference between minTime and maxTime must be\n+\t * at least 5 minutes.\n+\t *\n+\t * @param duration The retention time interval for which idle state is retained. Set to 0 (zero) to\n+\t *                never clean-up the state.\n+\t */\n+\tpublic void setIdleStateRetentionDuration(Duration duration){\n+\t\tconfiguration.set(ExecutionConfigOptions.IDLE_STATE_RETENTION, duration);\n \t}\n \n \t/**\n \t * @return The minimum time until state which was not updated will be retained.\n \t */\n \tpublic long getMinIdleStateRetentionTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjA1NzQ3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/api/bridge/java/internal/StreamTableEnvironmentImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxNToxMVrOG3YIQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoxNToxMVrOG3YIQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyMDE5Mw==", "bodyText": "Please use the new method setIdleStateRetentionTime to set idle state in tests.", "url": "https://github.com/apache/flink/pull/12880#discussion_r460720193", "createdAt": "2020-07-27T08:15:11Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/api/bridge/java/internal/StreamTableEnvironmentImplTest.java", "diffHunk": "@@ -63,7 +63,7 @@ public void testAppendStreamDoesNotOverwriteTableConfig() {\n \t\t\tequalTo(minRetention.toMilliseconds()));\n \t\tassertThat(\n \t\t\ttEnv.getConfig().getMaxIdleStateRetentionTime(),\n-\t\t\tequalTo(maxRetention.toMilliseconds()));\n+\t\t\tequalTo(minRetention.toMilliseconds() * 3 / 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05fede7e394cf0d1a7ba614d1411fa15141c3c65"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjE3NjQ2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyMzoxN1rOG9PVfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyMzoxN1rOG9PVfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2NzU4Mw==", "bodyText": "We don't need to refactor it into TestSpec. There is limited methods to test. We can have a test for each option.\nThe TestSpec is not easy to understand and can't test some special methods, e.g. setIdleStateRetentionTime(Time minTime, Time maxTime)", "url": "https://github.com/apache/flink/pull/12880#discussion_r466867583", "createdAt": "2020-08-07T07:23:17Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.api;\n+\n+import org.apache.flink.configuration.Configuration;\n+\n+import org.junit.Test;\n+\n+import java.time.Duration;\n+import java.time.ZoneId;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Tests for {@link TableConfig}.\n+ */\n+public class TableConfigTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82edfc5569e7d434ecd56a872b2f56015df3a851"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjIwODg1OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/ExecutionConfigOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzozMzo1OVrOG9PpBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzozMzo1OVrOG9PpBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg3MjU4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t.withDescription(\"A time-to-live (TTL) can be assigned to the keyed state of any type. \" +\n          \n          \n            \n            \t\t\t\t\"If a TTL is configured and a state value has expired, \" +\n          \n          \n            \n            \t\t\t\t\"the stored value will be cleaned up on a best effort basis. \" +\n          \n          \n            \n            \t\t\t\t\"Default value is 0, which means that it will never clean up state.\");\n          \n          \n            \n            \t\t\t.withDescription(\"Specifies a minimum time interval for how long idle state \" +\n          \n          \n            \n            \t\t\t\t\t\"(i.e. state which was not updated), will be retained. State will never be \" +\n          \n          \n            \n            \t\t\t\t\t\"cleared until it was idle for less than the minimum time, and will be cleared \" +\n          \n          \n            \n            \t\t\t\t\t\"at some time after it was idle. Default is never clean-up the state.\\n\" +\n          \n          \n            \n            \t\t\t\t\t\"NOTE: Cleaning up state requires additional overhead for bookkeeping.\\n\" +\n          \n          \n            \n            \t\t\t\t\t\"Default value is 0, which means that it will never clean up state.\");", "url": "https://github.com/apache/flink/pull/12880#discussion_r466872581", "createdAt": "2020-08-07T07:33:59Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/ExecutionConfigOptions.java", "diffHunk": "@@ -37,9 +39,24 @@\n @PublicEvolving\n public class ExecutionConfigOptions {\n \n+\t// ------------------------------------------------------------------------\n+\t//  State Options\n+\t// ------------------------------------------------------------------------\n+\n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.STREAMING)\n+\tpublic static final ConfigOption<Duration> IDLE_STATE_RETENTION =\n+\t\tkey(\"table.exec.state.ttl\")\n+\t\t\t.durationType()\n+\t\t\t.defaultValue(Duration.ofMillis(0))\n+\t\t\t.withDescription(\"A time-to-live (TTL) can be assigned to the keyed state of any type. \" +\n+\t\t\t\t\"If a TTL is configured and a state value has expired, \" +\n+\t\t\t\t\"the stored value will be cleaned up on a best effort basis. \" +\n+\t\t\t\t\"Default value is 0, which means that it will never clean up state.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82edfc5569e7d434ecd56a872b2f56015df3a851"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjIxMTAxOnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/TableConfigOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzozNDo0MlrOG9PqSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzozNDo0MlrOG9PqSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg3MjkwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t.withDescription(\"The local time zone defines current session time zone id. It is used when converting to/from \" +\n          \n          \n            \n            \t\t\t\t\"<code>TIMESTAMP_WITH_LOCAL_TIME_ZONE</code>. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +\n          \n          \n            \n            \t\t\t\t\"However, when converting to data types that don't include a time zone (e.g. TIMESTAMP, TIME, or simply STRING), \" +\n          \n          \n            \n            \t\t\t\t\"the session time zone is used during conversion. The input of option is either an abbreviation such as \\\"PST\\\", a full name \" +\n          \n          \n            \n            \t\t\t\t\"such as \\\"America/Los_Angeles\\\", or a custom timezone_id such as \\\"GMT-8:00\\\".\");\n          \n          \n            \n            \t\t\t.withDescription(\"The local time zone defines current session time zone id. It is used when converting to/from \" +\n          \n          \n            \n            \t\t\t\t\"<code>TIMESTAMP WITH LOCAL TIME ZONE</code>. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +\n          \n          \n            \n            \t\t\t\t\"However, when converting to data types that don't include a time zone (e.g. TIMESTAMP, TIME, or simply STRING), \" +\n          \n          \n            \n            \t\t\t\t\"the session time zone is used during conversion. The input of option is either an abbreviation such as \\\"PST\\\", a full name \" +\n          \n          \n            \n            \t\t\t\t\"such as \\\"America/Los_Angeles\\\", or a custom timezone id such as \\\"GMT-8:00\\\".\");", "url": "https://github.com/apache/flink/pull/12880#discussion_r466872907", "createdAt": "2020-08-07T07:34:42Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/config/TableConfigOptions.java", "diffHunk": "@@ -51,4 +52,24 @@ private TableConfigOptions() {}\n \t\t\t.withDescription(\"The SQL dialect defines how to parse a SQL query. \" +\n \t\t\t\t\t\"A different SQL dialect may support different SQL grammar. \" +\n \t\t\t\t\t\"Currently supported dialects are: default and hive\");\n+\n+\t@Documentation.TableOption(execMode = Documentation.ExecMode.BATCH_STREAMING)\n+\tpublic static final ConfigOption<String> LOCAL_TIME_ZONE = key(\"table.local-time-zone\")\n+\t\t\t.stringType()\n+\t\t\t// special value to decide whether to use ZoneId.systemDefault() in TableConfig.getLocalTimeZone()\n+\t\t\t.defaultValue(\"default\")\n+\t\t\t.withDescription(\"The local time zone defines current session time zone id. It is used when converting to/from \" +\n+\t\t\t\t\"<code>TIMESTAMP_WITH_LOCAL_TIME_ZONE</code>. Internally, timestamps with local time zone are always represented in the UTC time zone. \" +\n+\t\t\t\t\"However, when converting to data types that don't include a time zone (e.g. TIMESTAMP, TIME, or simply STRING), \" +\n+\t\t\t\t\"the session time zone is used during conversion. The input of option is either an abbreviation such as \\\"PST\\\", a full name \" +\n+\t\t\t\t\"such as \\\"America/Los_Angeles\\\", or a custom timezone_id such as \\\"GMT-8:00\\\".\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82edfc5569e7d434ecd56a872b2f56015df3a851"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDk2NDU0OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxMDo0MVrOHC17fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxMDo0MVrOHC17fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0Mjc4Mg==", "bodyText": "Should assert time zone.", "url": "https://github.com/apache/flink/pull/12880#discussion_r472742782", "createdAt": "2020-08-19T06:10:41Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/api/TableConfigTest.java", "diffHunk": "@@ -24,114 +24,54 @@\n \n import java.time.Duration;\n import java.time.ZoneId;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.function.BiConsumer;\n-import java.util.function.Function;\n \n-import static org.hamcrest.CoreMatchers.equalTo;\n-import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertEquals;\n \n /**\n  * Tests for {@link TableConfig}.\n  */\n public class TableConfigTest {\n-\tprivate static List<TestSpec> specs = Arrays.asList(\n-\t\tTestSpec.testValue(SqlDialect.HIVE)\n-\t\t\t.viaSetter(TableConfig::setSqlDialect)\n-\t\t\t.getterVia(TableConfig::getSqlDialect)\n-\t\t\t.whenSetFromConfig(\"table.sql-dialect\", \"HIVE\"),\n-\n-\t\tTestSpec.testValue(5000)\n-\t\t\t.viaSetter(TableConfig::setMaxGeneratedCodeLength)\n-\t\t\t.getterVia(TableConfig::getMaxGeneratedCodeLength)\n-\t\t\t.whenSetFromConfig(\"table.generated-code.max-length\", \"5000\"),\n-\n-\t\tTestSpec.testValue(ZoneId.of(\"Asia/Shanghai\"))\n-\t\t\t.viaSetter(TableConfig::setLocalTimeZone)\n-\t\t\t.getterVia(TableConfig::getLocalTimeZone)\n-\t\t\t.whenSetFromConfig(\"table.local-time-zone\", \"Asia/Shanghai\"),\n-\n-\t\tTestSpec.testValue(Duration.ofHours(1))\n-\t\t\t.viaSetter(TableConfig::setIdleStateRetention)\n-\t\t\t.getterVia(tableConfig -> Duration.ofMillis(tableConfig.getMinIdleStateRetentionTime()))\n-\t\t\t.whenSetFromConfig(\"table.exec.state.ttl\", \"1 h\"),\n-\n-\t\tTestSpec.testValue(Duration.ofHours(2))\n-\t\t\t.viaSetter(TableConfig::setIdleStateRetention)\n-\t\t\t.getterVia(tableConfig -> Duration.ofMillis(tableConfig.getMaxIdleStateRetentionTime()))\n-\t\t\t.whenSetFromConfig(\"table.exec.state.ttl\", \"2 h\")\n-\t\t\t.nonDefaultValue(Duration.ofHours(3))\n-\t);\n+\tprivate static TableConfig configByMethod = new TableConfig();\n+\tprivate static TableConfig configByConfiguration = new TableConfig();\n+\tprivate static Configuration configuration = new Configuration();\n \n \t@Test\n-\tpublic void testLoadFromConfiguration() {\n-\t\tfor (TestSpec<?> spec: specs) {\n-\t\t\ttestWithSpec(spec);\n-\t\t}\n-\t}\n-\n-\tprivate void testWithSpec(TestSpec<?> testSpec) {\n-\t\tConfiguration config = new Configuration();\n-\t\tconfig.setString(testSpec.key, testSpec.value);\n-\t\tTableConfig tableConfigFromConfig = new TableConfig();\n-\t\ttableConfigFromConfig.addConfiguration(config);\n+\tpublic void testSetAndGetSqlDialect() {\n+\t\tconfiguration.setString(\"table.sql-dialect\", \"HIVE\");\n+\t\tconfigByConfiguration.addConfiguration(configuration);\n+\t\tconfigByMethod.setSqlDialect(SqlDialect.HIVE);\n \n-\t\tTableConfig tableConfigFromSetter = new TableConfig();\n-\t\ttestSpec.setValue(tableConfigFromSetter);\n-\n-\t\ttestSpec.assertEqual(tableConfigFromConfig, tableConfigFromSetter);\n-\t\ttestSpec.assertEqualNonDefaultValue(tableConfigFromConfig);\n+\t\tassertEquals(SqlDialect.HIVE, configByMethod.getSqlDialect());\n+\t\tassertEquals(SqlDialect.HIVE, configByConfiguration.getSqlDialect());\n \t}\n \n-\tprivate static class TestSpec<T> {\n-\t\tprivate String key;\n-\t\tprivate String value;\n-\t\tprivate final T objectValue;\n-\t\tprivate BiConsumer<TableConfig, T> setter;\n-\t\tprivate Function<TableConfig, T> getter;\n-\t\tprivate T nonDefaultValue;\n-\n-\t\tprivate TestSpec(T value) {\n-\t\t\tthis.objectValue = value;\n-\t\t\tthis.nonDefaultValue = value;\n-\t\t}\n-\n-\t\tpublic static <T> TestSpec<T> testValue(T value) {\n-\t\t\treturn new TestSpec<>(value);\n-\t\t}\n-\n-\t\tpublic TestSpec<T> nonDefaultValue(T value) {\n-\t\t\tthis.nonDefaultValue = value;\n-\t\t\treturn this;\n-\t\t}\n-\n-\t\tpublic TestSpec<T> whenSetFromConfig(String key, String value) {\n-\t\t\tthis.key = key;\n-\t\t\tthis.value = value;\n-\t\t\treturn this;\n-\t\t}\n+\t@Test\n+\tpublic void testSetAndGetMaxGeneratedCodeLength() {\n+\t\tconfiguration.setString(\"table.generated-code.max-length\", \"5000\");\n+\t\tconfigByConfiguration.addConfiguration(configuration);\n+\t\tconfigByMethod.setMaxGeneratedCodeLength(5000);\n \n-\t\tpublic TestSpec<T> viaSetter(BiConsumer<TableConfig, T> setter) {\n-\t\t\tthis.setter = setter;\n-\t\t\treturn this;\n-\t\t}\n+\t\tassertEquals(Integer.valueOf(5000), configByMethod.getMaxGeneratedCodeLength());\n+\t\tassertEquals(Integer.valueOf(5000), configByConfiguration.getMaxGeneratedCodeLength());\n+\t}\n \n-\t\tpublic TestSpec<T> getterVia(Function<TableConfig, T> getter) {\n-\t\t\tthis.getter = getter;\n-\t\t\treturn this;\n-\t\t}\n+\t@Test\n+\tpublic void testSetAndGetLocalTimeZone() {\n+\t\tconfiguration.setString(\"table.local-time-zone\", \"Asia/Shanghai\");\n+\t\tconfigByConfiguration.addConfiguration(configuration);\n+\t\tconfigByMethod.setLocalTimeZone(ZoneId.of(\"Asia/Shanghai\"));\n \n-\t\tpublic void setValue(TableConfig config) {\n-\t\t\tsetter.accept(config, objectValue);\n-\t\t}\n+\t\tassertEquals(Integer.valueOf(5000), configByMethod.getMaxGeneratedCodeLength());\n+\t\tassertEquals(Integer.valueOf(5000), configByConfiguration.getMaxGeneratedCodeLength());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f213639e4e38e9e25506c20d7eff660cadbb6b1"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDk2OTc3OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/api/bridge/java/internal/StreamTableEnvironmentImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxMjowMVrOHC1_DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxMjowMVrOHC1_DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0MzY5Mg==", "bodyText": "We only need to assert the tEnv.getConfig().getIdleStateRetention().", "url": "https://github.com/apache/flink/pull/12880#discussion_r472743692", "createdAt": "2020-08-19T06:12:01Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/api/bridge/java/internal/StreamTableEnvironmentImplTest.java", "diffHunk": "@@ -52,18 +52,17 @@ public void testAppendStreamDoesNotOverwriteTableConfig() {\n \n \t\tStreamTableEnvironmentImpl tEnv = getStreamTableEnvironment(env, elements);\n \n-\t\tTime minRetention = Time.minutes(1);\n-\t\tTime maxRetention = Time.minutes(10);\n-\t\ttEnv.getConfig().setIdleStateRetentionTime(minRetention, maxRetention);\n+\t\tDuration minRetention = Duration.ofMinutes(1);\n+\t\ttEnv.getConfig().setIdleStateRetention(minRetention);\n \t\tTable table = tEnv.fromDataStream(elements);\n \t\ttEnv.toAppendStream(table, Row.class);\n \n \t\tassertThat(\n \t\t\ttEnv.getConfig().getMinIdleStateRetentionTime(),\n-\t\t\tequalTo(minRetention.toMilliseconds()));\n+\t\t\tequalTo(minRetention.toMillis()));\n \t\tassertThat(\n \t\t\ttEnv.getConfig().getMaxIdleStateRetentionTime(),\n-\t\t\tequalTo(maxRetention.toMilliseconds()));\n+\t\t\tequalTo(minRetention.toMillis() * 3 / 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f213639e4e38e9e25506c20d7eff660cadbb6b1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDk3MDA2OnYy", "diffSide": "RIGHT", "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/api/bridge/java/internal/StreamTableEnvironmentImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxMjowNVrOHC1_SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjoxMjowNVrOHC1_SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc0Mzc1Mw==", "bodyText": "ditto.", "url": "https://github.com/apache/flink/pull/12880#discussion_r472743753", "createdAt": "2020-08-19T06:12:05Z", "author": {"login": "wuchong"}, "path": "flink-table/flink-table-api-java-bridge/src/test/java/org/apache/flink/table/api/bridge/java/internal/StreamTableEnvironmentImplTest.java", "diffHunk": "@@ -73,18 +72,17 @@ public void testRetractStreamDoesNotOverwriteTableConfig() {\n \n \t\tStreamTableEnvironmentImpl tEnv = getStreamTableEnvironment(env, elements);\n \n-\t\tTime minRetention = Time.minutes(1);\n-\t\tTime maxRetention = Time.minutes(10);\n-\t\ttEnv.getConfig().setIdleStateRetentionTime(minRetention, maxRetention);\n+\t\tDuration minRetention = Duration.ofMinutes(1);\n+\t\ttEnv.getConfig().setIdleStateRetention(minRetention);\n \t\tTable table = tEnv.fromDataStream(elements);\n \t\ttEnv.toRetractStream(table, Row.class);\n \n \t\tassertThat(\n \t\t\ttEnv.getConfig().getMinIdleStateRetentionTime(),\n-\t\t\tequalTo(minRetention.toMilliseconds()));\n+\t\t\tequalTo(minRetention.toMillis()));\n \t\tassertThat(\n \t\t\ttEnv.getConfig().getMaxIdleStateRetentionTime(),\n-\t\t\tequalTo(maxRetention.toMilliseconds()));\n+\t\t\tequalTo(minRetention.toMillis() * 3 / 2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f213639e4e38e9e25506c20d7eff660cadbb6b1"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4190, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}