{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzOTk1MzM2", "number": 14140, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo1NjozOVrOE7k2aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo1ODozMlrOE7k5Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTA1MTk1OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTestHarness.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo1NjozOVrOH3THHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNToyMjozMVrOH3UJMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0Njg0Nw==", "bodyText": "I think isDefaultActionUnavailable() is not the best choice here because suspension is a temporary state; some input may come after this check.\nWhat about using mailboxProcessor.isMailboxLoopRunning() instead?\nIt is updated on InputStatus.END_OF_INPUT which seems exactly what is needed here.", "url": "https://github.com/apache/flink/pull/14140#discussion_r527746847", "createdAt": "2020-11-20T14:56:39Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTestHarness.java", "diffHunk": "@@ -401,20 +401,36 @@ public void waitForInputProcessing() throws Exception {\n \t\t\t}\n \t\t}\n \n-\t\t// then wait for the Task Thread to be in a blocked state\n-\t\t// Check whether the state is blocked, this should be the case if it cannot\n-\t\t// notifyNonEmpty more input, i.e. all currently available input has been processed.\n-\t\twhile (true) {\n-\t\t\tThread.State state = taskThread.getState();\n-\t\t\tif (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||\n-\t\t\t\t\tstate == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {\n+\t\t// Wait for all currently available input has been processed.\n+\t\tfinal AtomicBoolean allInputProcessed = new AtomicBoolean();\n+\t\tfinal MailboxProcessor mailboxProcessor = taskThread.task.mailboxProcessor;\n+\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMainMailboxExecutor();\n+\t\twhile (taskThread.isAlive()) {\n+\t\t\ttry {\n+\t\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n+\t\t\t\tmailboxExecutor.execute(() -> {\n+\t\t\t\t\tallInputProcessed.set(mailboxProcessor.isDefaultActionUnavailable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3576e24be6fa62e1a942c408897fdf034cbb30d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc2Mzc2Mg==", "bodyText": "It may made wrong name for allInputProcessed, it should express all current available input has been processed, not end of input. What StreamTaskTestHarness.waitForInputProcessing does is waiting current available input processed, so that following up testing code could do post-process assertion.", "url": "https://github.com/apache/flink/pull/14140#discussion_r527763762", "createdAt": "2020-11-20T15:22:31Z", "author": {"login": "kezhuw"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTestHarness.java", "diffHunk": "@@ -401,20 +401,36 @@ public void waitForInputProcessing() throws Exception {\n \t\t\t}\n \t\t}\n \n-\t\t// then wait for the Task Thread to be in a blocked state\n-\t\t// Check whether the state is blocked, this should be the case if it cannot\n-\t\t// notifyNonEmpty more input, i.e. all currently available input has been processed.\n-\t\twhile (true) {\n-\t\t\tThread.State state = taskThread.getState();\n-\t\t\tif (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||\n-\t\t\t\t\tstate == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {\n+\t\t// Wait for all currently available input has been processed.\n+\t\tfinal AtomicBoolean allInputProcessed = new AtomicBoolean();\n+\t\tfinal MailboxProcessor mailboxProcessor = taskThread.task.mailboxProcessor;\n+\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMainMailboxExecutor();\n+\t\twhile (taskThread.isAlive()) {\n+\t\t\ttry {\n+\t\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n+\t\t\t\tmailboxExecutor.execute(() -> {\n+\t\t\t\t\tallInputProcessed.set(mailboxProcessor.isDefaultActionUnavailable());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0Njg0Nw=="}, "originalCommit": {"oid": "b3576e24be6fa62e1a942c408897fdf034cbb30d"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTA1OTQ3OnYy", "diffSide": "RIGHT", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTestHarness.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo1ODozMlrOH3TL-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNTo0NzozOFrOH3VM4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0ODA4OA==", "bodyText": "With this await, is the sleep below still necessary?", "url": "https://github.com/apache/flink/pull/14140#discussion_r527748088", "createdAt": "2020-11-20T14:58:32Z", "author": {"login": "rkhachatryan"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTestHarness.java", "diffHunk": "@@ -401,20 +401,36 @@ public void waitForInputProcessing() throws Exception {\n \t\t\t}\n \t\t}\n \n-\t\t// then wait for the Task Thread to be in a blocked state\n-\t\t// Check whether the state is blocked, this should be the case if it cannot\n-\t\t// notifyNonEmpty more input, i.e. all currently available input has been processed.\n-\t\twhile (true) {\n-\t\t\tThread.State state = taskThread.getState();\n-\t\t\tif (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||\n-\t\t\t\t\tstate == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {\n+\t\t// Wait for all currently available input has been processed.\n+\t\tfinal AtomicBoolean allInputProcessed = new AtomicBoolean();\n+\t\tfinal MailboxProcessor mailboxProcessor = taskThread.task.mailboxProcessor;\n+\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMainMailboxExecutor();\n+\t\twhile (taskThread.isAlive()) {\n+\t\t\ttry {\n+\t\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n+\t\t\t\tmailboxExecutor.execute(() -> {\n+\t\t\t\t\tallInputProcessed.set(mailboxProcessor.isDefaultActionUnavailable());\n+\t\t\t\t\tlatch.countDown();\n+\t\t\t\t}, \"query-whether-processInput-has-suspend-itself\");\n+\t\t\t\t// Mail could be dropped due to task exception, so we do timed-await here.\n+\t\t\t\tlatch.await(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3576e24be6fa62e1a942c408897fdf034cbb30d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc4MTA4OQ==", "bodyText": "This await has two purposes here:\n\nWait until post mail has been processed, so we can query allInputProcessed safely.\nIf post mail has been dropped due to task exception, break out indefinite wait.\n\nIt does not serve as sleeping to yield control to mailbox thread. Without sleep, testing thread and mailbox thread may do ping-pong game between process-one-element and execute-one-mail.\nI tend to keep it, it does not affect correctness at least.", "url": "https://github.com/apache/flink/pull/14140#discussion_r527781089", "createdAt": "2020-11-20T15:47:38Z", "author": {"login": "kezhuw"}, "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/tasks/StreamTaskTestHarness.java", "diffHunk": "@@ -401,20 +401,36 @@ public void waitForInputProcessing() throws Exception {\n \t\t\t}\n \t\t}\n \n-\t\t// then wait for the Task Thread to be in a blocked state\n-\t\t// Check whether the state is blocked, this should be the case if it cannot\n-\t\t// notifyNonEmpty more input, i.e. all currently available input has been processed.\n-\t\twhile (true) {\n-\t\t\tThread.State state = taskThread.getState();\n-\t\t\tif (state == Thread.State.BLOCKED || state == Thread.State.TERMINATED ||\n-\t\t\t\t\tstate == Thread.State.WAITING || state == Thread.State.TIMED_WAITING) {\n+\t\t// Wait for all currently available input has been processed.\n+\t\tfinal AtomicBoolean allInputProcessed = new AtomicBoolean();\n+\t\tfinal MailboxProcessor mailboxProcessor = taskThread.task.mailboxProcessor;\n+\t\tfinal MailboxExecutor mailboxExecutor = mailboxProcessor.getMainMailboxExecutor();\n+\t\twhile (taskThread.isAlive()) {\n+\t\t\ttry {\n+\t\t\t\tfinal CountDownLatch latch = new CountDownLatch(1);\n+\t\t\t\tmailboxExecutor.execute(() -> {\n+\t\t\t\t\tallInputProcessed.set(mailboxProcessor.isDefaultActionUnavailable());\n+\t\t\t\t\tlatch.countDown();\n+\t\t\t\t}, \"query-whether-processInput-has-suspend-itself\");\n+\t\t\t\t// Mail could be dropped due to task exception, so we do timed-await here.\n+\t\t\t\tlatch.await(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc0ODA4OA=="}, "originalCommit": {"oid": "b3576e24be6fa62e1a942c408897fdf034cbb30d"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4813, "cost": 1, "resetAt": "2021-11-12T11:57:46Z"}}}